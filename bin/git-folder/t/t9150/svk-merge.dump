SVN-fs-dump-format-version: 2

UUID: b48289b2-9c08-4d72-af37-0358a40b9c15

Revision-number: 0
Prop-content-length: 56
Content-length: 56

K 8
svn:date
V 27
2009-10-19T23:44:03.722969Z
PROPS-END

Revision-number: 1
Prop-content-length: 123
Content-length: 123

K 7
svn:log
V 24
Setup trunk and branches
K 10
svn:author
V 4
samv
K 8
svn:date
V 27
2009-10-19T23:44:04.927533Z
PROPS-END

Node-path: branches
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Node-path: trunk
Node-kind: dir
Node-action: add
Prop-content-length: 10
Content-length: 10

PROPS-END


Revision-number: 2
Prop-content-length: 106
Content-length: 106

K 7
svn:log
V 8
ancestor
K 10
svn:author
V 4
samv
K 8
svn:date
V 27
2009-10-19T23:44:05.835585Z
PROPS-END

Node-path: trunk/Makefile
Node-kind: file
Node-action: add
Prop-content-length: 10
Text-content-length: 2401
Text-content-md5: bfd8ff778d1492dc6758567373176a89
Content-length: 2411

PROPS-END
# -DCOLLISION_CHECK if you believe that SHA1's
# 1461501637330902918203684832716283019655932542976 hashes do not give you
# enough guarantees about no collisions between objects ever hapenning.
#
# -DNSEC if you want git to care about sub-second file mtimes and ctimes.
# Note that you need some new glibc (at least >2.2.4) for this, and it will
# BREAK YOUR LOCAL DIFFS! show-diff and anything using it will likely randomly
# break unless your underlying filesystem supports those sub-second times
# (my ext3 doesn't).
CFLAGS=-g -O3 -Wall

CC=gcc


PROG=   update-cache show-diff init-db write-tree read-tree commit-tree \
	cat-file fsck-cache checkout-cache diff-tree rev-tree show-files \
	check-files ls-tree merge-base

all: $(PROG)

install: $(PROG)
	install $(PROG) $(HOME)/bin/

LIBS= -lssl -lz

init-db: init-db.o

update-cache: update-cache.o read-cache.o
	$(CC) $(CFLAGS) -o update-cache update-cache.o read-cache.o $(LIBS)

show-diff: show-diff.o read-cache.o
	$(CC) $(CFLAGS) -o show-diff show-diff.o read-cache.o $(LIBS)

write-tree: write-tree.o read-cache.o
	$(CC) $(CFLAGS) -o write-tree write-tree.o read-cache.o $(LIBS)

read-tree: read-tree.o read-cache.o
	$(CC) $(CFLAGS) -o read-tree read-tree.o read-cache.o $(LIBS)

commit-tree: commit-tree.o read-cache.o
	$(CC) $(CFLAGS) -o commit-tree commit-tree.o read-cache.o $(LIBS)

cat-file: cat-file.o read-cache.o
	$(CC) $(CFLAGS) -o cat-file cat-file.o read-cache.o $(LIBS)

fsck-cache: fsck-cache.o read-cache.o
	$(CC) $(CFLAGS) -o fsck-cache fsck-cache.o read-cache.o $(LIBS)

checkout-cache: checkout-cache.o read-cache.o
	$(CC) $(CFLAGS) -o checkout-cache checkout-cache.o read-cache.o $(LIBS)

diff-tree: diff-tree.o read-cache.o
	$(CC) $(CFLAGS) -o diff-tree diff-tree.o read-cache.o $(LIBS)

rev-tree: rev-tree.o read-cache.o
	$(CC) $(CFLAGS) -o rev-tree rev-tree.o read-cache.o $(LIBS)

show-files: show-files.o read-cache.o
	$(CC) $(CFLAGS) -o show-files show-files.o read-cache.o $(LIBS)

check-files: check-files.o read-cache.o
	$(CC) $(CFLAGS) -o check-files check-files.o read-cache.o $(LIBS)

ls-tree: ls-tree.o read-cache.o
	$(CC) $(CFLAGS) -o ls-tree ls-tree.o read-cache.o $(LIBS)

merge-base: merge-base.o read-cache.o
	$(CC) $(CFLAGS) -o merge-base merge-base.o read-cache.o $(LIBS)

read-cache.o: cache.h
show-diff.o: cache.h

clean:
	rm -f *.o $(PROG)

backup: clean
	cd .. ; tar czvf dircache.tar.gz dir-cache


Revision-number: 3
Prop-content-length: 115
Content-length: 115

K 7
svn:log
V 16
make left branch
K 10
svn:author
V 4
samv
K 8
svn:date
V 27
2009-10-19T23:44:06.719737Z
PROPS-END

Node-path: branches/left
Node-kind: dir
Node-action: add
Node-copyfrom-rev: 2
Node-copyfrom-path: trunk


Revision-number: 4
Prop-content-length: 112
Content-length: 112

K 7
svn:log
V 13
left update 1
K 10
svn:author
V 4
samv
K 8
svn:date
V 27
2009-10-19T23:44:07.167666Z
PROPS-END

Node-path: branches/left/Makefile
Node-kind: file
Node-action: change
Text-content-length: 2465
Text-content-md5: 16e38d9753b061731650561ce01b1195
Content-length: 2465

# -DCOLLISION_CHECK if you believe that SHA1's
# 1461501637330902918203684832716283019655932542976 hashes do not give you
# enough guarantees about no collisions between objects ever hapenning.
#
# -DNSEC if you want git to care about sub-second file mtimes and ctimes.
# Note that you need some new glibc (at least >2.2.4) for this, and it will
# BREAK YOUR LOCAL DIFFS! show-diff and anything using it will likely randomly
# break unless your underlying filesystem supports those sub-second times
# (my ext3 doesn't).
CFLAGS=-g -O3 -Wall

CC=gcc


PROG=   update-cache show-diff init-db write-tree read-tree commit-tree \
	cat-file fsck-cache checkout-cache diff-tree rev-tree show-files \
	check-files ls-tree merge-base

all: $(PROG)

install: $(PROG)
	install $(PROG) $(HOME)/bin/

LIBS= -lssl -lz

init-db: init-db.o

update-cache: update-cache.o read-cache.o
	$(CC) $(CFLAGS) -o update-cache update-cache.o read-cache.o $(LIBS)

show-diff: show-diff.o read-cache.o
	$(CC) $(CFLAGS) -o show-diff show-diff.o read-cache.o $(LIBS)

write-tree: write-tree.o read-cache.o
	$(CC) $(CFLAGS) -o write-tree write-tree.o read-cache.o $(LIBS)

read-tree: read-tree.o read-cache.o
	$(CC) $(CFLAGS) -o read-tree read-tree.o read-cache.o $(LIBS)

commit-tree: commit-tree.o read-cache.o
	$(CC) $(CFLAGS) -o commit-tree commit-tree.o read-cache.o $(LIBS)

cat-file: cat-file.o read-cache.o
	$(CC) $(CFLAGS) -o cat-file cat-file.o read-cache.o $(LIBS)

fsck-cache: fsck-cache.o read-cache.o
	$(CC) $(CFLAGS) -o fsck-cache fsck-cache.o read-cache.o $(LIBS)

checkout-cache: checkout-cache.o read-cache.o
	$(CC) $(CFLAGS) -o checkout-cache checkout-cache.o read-cache.o $(LIBS)

diff-tree: diff-tree.o read-cache.o
	$(CC) $(CFLAGS) -o diff-tree diff-tree.o read-cache.o $(LIBS)

rev-tree: rev-tree.o read-cache.o object.o commit.o tree.o blob.o
	$(CC) $(CFLAGS) -o rev-tree rev-tree.o read-cache.o object.o commit.o tree.o blob.o $(LIBS)

show-files: show-files.o read-cache.o
	$(CC) $(CFLAGS) -o show-files show-files.o read-cache.o $(LIBS)

check-files: check-files.o read-cache.o
	$(CC) $(CFLAGS) -o check-files check-files.o read-cache.o $(LIBS)

ls-tree: ls-tree.o read-cache.o
	$(CC) $(CFLAGS) -o ls-tree ls-tree.o read-cache.o $(LIBS)

merge-base: merge-base.o read-cache.o
	$(CC) $(CFLAGS) -o merge-base merge-base.o read-cache.o $(LIBS)

read-cache.o: cache.h
show-diff.o: cache.h

clean:
	rm -f *.o $(PROG)

backup: clean
	cd .. ; tar czvf dircache.tar.gz dir-cache


Revision-number: 5
Prop-content-length: 111
Content-length: 111

K 7
svn:log
V 12
trunk update
K 10
svn:author
V 4
samv
K 8
svn:date
V 27
2009-10-19T23:44:07.619633Z
PROPS-END

Node-path: trunk/Makefile
Node-kind: file
Node-action: change
Text-content-length: 2521
Text-content-md5: 0668418a621333f4aa8b6632cd63e2a0
Content-length: 2521

# -DCOLLISION_CHECK if you believe that SHA1's
# 1461501637330902918203684832716283019655932542976 hashes do not give you
# enough guarantees about no collisions between objects ever hapenning.
#
# -DNSEC if you want git to care about sub-second file mtimes and ctimes.
# Note that you need some new glibc (at least >2.2.4) for this, and it will
# BREAK YOUR LOCAL DIFFS! show-diff and anything using it will likely randomly
# break unless your underlying filesystem supports those sub-second times
# (my ext3 doesn't).
CFLAGS=-g -O3 -Wall

CC=gcc


PROG=   update-cache show-diff init-db write-tree read-tree commit-tree \
	cat-file fsck-cache checkout-cache diff-tree rev-tree show-files \
	check-files ls-tree merge-base merge-cache

all: $(PROG)

install: $(PROG)
	install $(PROG) $(HOME)/bin/

LIBS= -lssl -lz

init-db: init-db.o

update-cache: update-cache.o read-cache.o
	$(CC) $(CFLAGS) -o update-cache update-cache.o read-cache.o $(LIBS)

show-diff: show-diff.o read-cache.o
	$(CC) $(CFLAGS) -o show-diff show-diff.o read-cache.o $(LIBS)

write-tree: write-tree.o read-cache.o
	$(CC) $(CFLAGS) -o write-tree write-tree.o read-cache.o $(LIBS)

read-tree: read-tree.o read-cache.o
	$(CC) $(CFLAGS) -o read-tree read-tree.o read-cache.o $(LIBS)

commit-tree: commit-tree.o read-cache.o
	$(CC) $(CFLAGS) -o commit-tree commit-tree.o read-cache.o $(LIBS)

cat-file: cat-file.o read-cache.o
	$(CC) $(CFLAGS) -o cat-file cat-file.o read-cache.o $(LIBS)

fsck-cache: fsck-cache.o read-cache.o
	$(CC) $(CFLAGS) -o fsck-cache fsck-cache.o read-cache.o $(LIBS)

checkout-cache: checkout-cache.o read-cache.o
	$(CC) $(CFLAGS) -o checkout-cache checkout-cache.o read-cache.o $(LIBS)

diff-tree: diff-tree.o read-cache.o
	$(CC) $(CFLAGS) -o diff-tree diff-tree.o read-cache.o $(LIBS)

rev-tree: rev-tree.o read-cache.o
	$(CC) $(CFLAGS) -o rev-tree rev-tree.o read-cache.o $(LIBS)

show-files: show-files.o read-cache.o
	$(CC) $(CFLAGS) -o show-files show-files.o read-cache.o $(LIBS)

check-files: check-files.o read-cache.o
	$(CC) $(CFLAGS) -o check-files check-files.o read-cache.o $(LIBS)

ls-tree: ls-tree.o read-cache.o
	$(CC) $(CFLAGS) -o ls-tree ls-tree.o read-cache.o $(LIBS)

merge-base: merge-base.o read-cache.o
	$(CC) $(CFLAGS) -o merge-base merge-base.o read-cache.o $(LIBS)

merge-cache: merge-cache.o read-cache.o
	$(CC) $(CFLAGS) -o merge-cache merge-cache.o read-cache.o $(LIBS)

read-cache.o: cache.h
show-diff.o: cache.h

clean:
	rm -f *.o $(PROG)

backup: clean
	cd .. ; tar czvf dircache.tar.gz dir-cache


Revision-number: 6
Prop-content-length: 112
Content-length: 112

K 7
svn:log
V 13
left update 2
K 10
svn:author
V 4
samv
K 8
svn:date
V 27
2009-10-19T23:44:08.067554Z
PROPS-END

Node-path: branches/left/Makefile
Node-kind: file
Node-action: change
Text-content-length: 2593
Text-content-md5: 5ccff689fb290e00b85fe18ee50c54ba
Content-length: 2593

# -DCOLLISION_CHECK if you believe that SHA1's
# 1461501637330902918203684832716283019655932542976 hashes do not give you
# enough guarantees about no collisions between objects ever hapenning.
#
# -DNSEC if you want git to care about sub-second file mtimes and ctimes.
# Note that you need some new glibc (at least >2.2.4) for this, and it will
# BREAK YOUR LOCAL DIFFS! show-diff and anything using it will likely randomly
# break unless your underlying filesystem supports those sub-second times
# (my ext3 doesn't).
CFLAGS=-g -O3 -Wall

CC=gcc


PROG=   update-cache show-diff init-db write-tree read-tree commit-tree \
	cat-file fsck-cache checkout-cache diff-tree rev-tree show-files \
	check-files ls-tree merge-base

all: $(PROG)

install: $(PROG)
	install $(PROG) $(HOME)/bin/

LIBS= -lssl -lz

init-db: init-db.o

update-cache: update-cache.o read-cache.o
	$(CC) $(CFLAGS) -o update-cache update-cache.o read-cache.o $(LIBS)

show-diff: show-diff.o read-cache.o
	$(CC) $(CFLAGS) -o show-diff show-diff.o read-cache.o $(LIBS)

write-tree: write-tree.o read-cache.o
	$(CC) $(CFLAGS) -o write-tree write-tree.o read-cache.o $(LIBS)

read-tree: read-tree.o read-cache.o
	$(CC) $(CFLAGS) -o read-tree read-tree.o read-cache.o $(LIBS)

commit-tree: commit-tree.o read-cache.o
	$(CC) $(CFLAGS) -o commit-tree commit-tree.o read-cache.o $(LIBS)

cat-file: cat-file.o read-cache.o
	$(CC) $(CFLAGS) -o cat-file cat-file.o read-cache.o $(LIBS)

fsck-cache: fsck-cache.o read-cache.o object.o commit.o tree.o blob.o
	$(CC) $(CFLAGS) -o fsck-cache fsck-cache.o read-cache.o object.o commit.o tree.o blob.o $(LIBS)

checkout-cache: checkout-cache.o read-cache.o
	$(CC) $(CFLAGS) -o checkout-cache checkout-cache.o read-cache.o $(LIBS)

diff-tree: diff-tree.o read-cache.o
	$(CC) $(CFLAGS) -o diff-tree diff-tree.o read-cache.o $(LIBS)

rev-tree: rev-tree.o read-cache.o object.o commit.o tree.o blob.o
	$(CC) $(CFLAGS) -o rev-tree rev-tree.o read-cache.o object.o commit.o tree.o blob.o $(LIBS)

show-files: show-files.o read-cache.o
	$(CC) $(CFLAGS) -o show-files show-files.o read-cache.o $(LIBS)

check-files: check-files.o read-cache.o
	$(CC) $(CFLAGS) -o check-files check-files.o read-cache.o $(LIBS)

ls-tree: ls-tree.o read-cache.o
	$(CC) $(CFLAGS) -o ls-tree ls-tree.o read-cache.o $(LIBS)

merge-base: merge-base.o read-cache.o object.o commit.o tree.o blob.o
	$(CC) $(CFLAGS) -o merge-base merge-base.o read-cache.o object.o commit.o tree.o blob.o $(LIBS)

read-cache.o: cache.h
show-diff.o: cache.h

clean:
	rm -f *.o $(PROG)

backup: clean
	cd .. ; tar czvf dircache.tar.gz dir-cache


Revision-number: 7
Prop-content-length: 131
Content-length: 131

K 7
svn:log
V 32
merge branch 'left' into 'trunk'
K 10
svn:author
V 4
samv
K 8
svn:date
V 27
2009-10-19T23:44:08.971801Z
PROPS-END

Node-path: trunk
Node-kind: dir
Node-action: change
Prop-content-length: 83
Content-length: 83

K 9
svk:merge
V 53
b48289b2-9c08-4d72-af37-0358a40b9c15:/branches/left:6
PROPS-END


Node-path: trunk/Makefile
Node-kind: file
Node-action: change
Text-content-length: 2713
Text-content-md5: 0afbe34f244cd662b1f97d708c687f90
Content-length: 2713

# -DCOLLISION_CHECK if you believe that SHA1's
# 1461501637330902918203684832716283019655932542976 hashes do not give you
# enough guarantees about no collisions between objects ever hapenning.
#
# -DNSEC if you want git to care about sub-second file mtimes and ctimes.
# Note that you need some new glibc (at least >2.2.4) for this, and it will
# BREAK YOUR LOCAL DIFFS! show-diff and anything using it will likely randomly
# break unless your underlying filesystem supports those sub-second times
# (my ext3 doesn't).
CFLAGS=-g -O3 -Wall

CC=gcc


PROG=   update-cache show-diff init-db write-tree read-tree commit-tree \
	cat-file fsck-cache checkout-cache diff-tree rev-tree show-files \
	check-files ls-tree merge-base merge-cache

all: $(PROG)

install: $(PROG)
	install $(PROG) $(HOME)/bin/

LIBS= -lssl -lz

init-db: init-db.o

update-cache: update-cache.o read-cache.o
	$(CC) $(CFLAGS) -o update-cache update-cache.o read-cache.o $(LIBS)

show-diff: show-diff.o read-cache.o
	$(CC) $(CFLAGS) -o show-diff show-diff.o read-cache.o $(LIBS)

write-tree: write-tree.o read-cache.o
	$(CC) $(CFLAGS) -o write-tree write-tree.o read-cache.o $(LIBS)

read-tree: read-tree.o read-cache.o
	$(CC) $(CFLAGS) -o read-tree read-tree.o read-cache.o $(LIBS)

commit-tree: commit-tree.o read-cache.o
	$(CC) $(CFLAGS) -o commit-tree commit-tree.o read-cache.o $(LIBS)

cat-file: cat-file.o read-cache.o
	$(CC) $(CFLAGS) -o cat-file cat-file.o read-cache.o $(LIBS)

fsck-cache: fsck-cache.o read-cache.o object.o commit.o tree.o blob.o
	$(CC) $(CFLAGS) -o fsck-cache fsck-cache.o read-cache.o object.o commit.o tree.o blob.o $(LIBS)

checkout-cache: checkout-cache.o read-cache.o
	$(CC) $(CFLAGS) -o checkout-cache checkout-cache.o read-cache.o $(LIBS)

diff-tree: diff-tree.o read-cache.o
	$(CC) $(CFLAGS) -o diff-tree diff-tree.o read-cache.o $(LIBS)

rev-tree: rev-tree.o read-cache.o object.o commit.o tree.o blob.o
	$(CC) $(CFLAGS) -o rev-tree rev-tree.o read-cache.o object.o commit.o tree.o blob.o $(LIBS)

show-files: show-files.o read-cache.o
	$(CC) $(CFLAGS) -o show-files show-files.o read-cache.o $(LIBS)

check-files: check-files.o read-cache.o
	$(CC) $(CFLAGS) -o check-files check-files.o read-cache.o $(LIBS)

ls-tree: ls-tree.o read-cache.o
	$(CC) $(CFLAGS) -o ls-tree ls-tree.o read-cache.o $(LIBS)

merge-base: merge-base.o read-cache.o object.o commit.o tree.o blob.o
	$(CC) $(CFLAGS) -o merge-base merge-base.o read-cache.o object.o commit.o tree.o blob.o $(LIBS)

merge-cache: merge-cache.o read-cache.o
	$(CC) $(CFLAGS) -o merge-cache merge-cache.o read-cache.o $(LIBS)

read-cache.o: cache.h
show-diff.o: cache.h

clean:
	rm -f *.o $(PROG)

backup: clean
	cd .. ; tar czvf dircache.tar.gz dir-cache



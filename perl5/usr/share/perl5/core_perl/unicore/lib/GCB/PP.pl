# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
# This file is machine-generated by lib/unicore/mktables from the Unicode
# database, Version 5.2.0.  Any changes made here will be lost!

# !!!!!!!   INTERNAL PERL USE ONLY   !!!!!!!
# This file is for internal use by the Perl program only.  The format and even
# the name or existence of this file are subject to change without notice.
# Don't use it directly.

# This file is for tables that are not necessarily related:  To conserve
# resources, every table that matches the identical set of code points in
# this version of Unicode uses this file.  Each one is listed in a separate
# group below.  It could be that the tables will match the same set of code
# points in other Unicode releases, or it could be purely coincidence that
# they happen to be the same in Unicode 5.2.0, and hence may not in other
# versions.
# 
# This file returns the 15 code points in Unicode Version 5.2.0 that match
# any of the following regular expression constructs:
# 
#         \p{Grapheme_Cluster_Break=Prepend}
#         \p{GCB=PP}
#         \p{Is_Grapheme_Cluster_Break=Prepend}
#         \p{Is_GCB=PP}
# 
#         \p{Logical_Order_Exception=Yes}
#         \p{LOE=Y}
#         \p{Is_Logical_Order_Exception=T}
#         \p{Is_LOE=True}
# 
#         \p{Logical_Order_Exception}
#         \p{Is_Logical_Order_Exception}
#         \p{LOE}
#         \p{Is_LOE}
# 
# perluniprops.pod should be consulted for the syntax rules for any of these,
# including if adding or subtracting white space, underscore, and hyphen
# characters matters or doesn't matter, and other permissible syntactic
# variants.  Upper/lower case distinctions never matter.
# 
# A colon can be substituted for the equals sign, and within each group
# above, anything to the left of the equals (or colon) can be combined with
# anything to the right.  Thus, for example,
#         \p{Is_LOE: Yes}
# is also valid.
# 
# The format of the lines of this file is: START\tSTOP\twhere START is the
# starting code point of the range, in hex; STOP is the ending point, or if
# omitted, the range has just one code point.  Numbers in comments in
# [brackets] indicate how many code points are in the range.

return <<'END';
0E40	0E44	 # [5]
0EC0	0EC4	 # [5]
AAB5	AAB6	 # [2]
AAB9		
AABB	AABC	 # [2]
END

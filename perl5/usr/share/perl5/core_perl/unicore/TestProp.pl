# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
# This file is machine-generated by lib/unicore/mktables from the Unicode
# database, Version 5.2.0.  Any changes made here will be lost!

use strict;
use warnings;

# Test qr/\X/ and the \p{} regular expression constructs.  This file is
# constructed by mktables from the tables it generates, so if mktables is
# buggy, this won't necessarily catch those bugs.  Tests are generated for all
# feasible properties; a few aren't currently feasible; see
# is_code_point_usable() in mktables for details.

# Standard test packages are not used because this manipulates SIG_WARN.  It
# exits 0 if every non-skipped test succeeded; -1 if any failed.

my $Tests = 0;
my $Fails = 0;

my $non_ASCII = (ord('A') != 65);

# The 256 8-bit characters in ASCII ordinal order, with the ones that don't
# have Perl names replaced by -1
my @ascii_ordered_chars = (
    "\0",
    (-1) x 6,
    "\a", "\b", "\t", "\n",
    -1,   # No Vt
    "\f", "\r",
    (-1) x 18,
    " ", "!", "\"", "#", '$', "%", "&", "'",
    "(", ")", "*", "+", ",", "-", ".", "/",
    "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
    ":", ";", "<", "=", ">", "?", "@",
    "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M",
    "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z",
    "[", "\\", "]", "^", "_", "`",
    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
    "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z",
    "{", "|", "}", "~",
    (-1) x 129
);

sub ASCII_ord_to_native ($) {
    # Converts input ordinal number to the native one, if can be done easily.
    # Returns -1 otherwise.

    my $ord = shift;

    return $ord if $ord > 255 || ! $non_ASCII;
    my $result = $ascii_ordered_chars[$ord];
    return $result if $result eq '-1';
    return ord($result);
}

sub Expect($$$$) {
    my $expected = shift;
    my $ord = shift;
    my $regex  = shift;
    my $warning_type = shift;   # Type of warning message, like 'deprecated'
                                # or empty if none
    my $line   = (caller)[2];

    # Convert the non-ASCII code points expressible as characters to their
    # ASCII equivalents, and skip the others.
    $ord = ASCII_ord_to_native($ord);
    if ($ord < 0) {
        $Tests++;
        print "ok $Tests - "
              . sprintf("\"\\x{%04X}\"", $ord)
              . " =~ $regex # Skipped: non-ASCII\n";
        return;
    }

    # Convert the code point to hex form
    my $string = sprintf "\"\\x{%04X}\"", $ord;

    my @tests = "";

    # The first time through, use all warnings.  If the input should generate
    # a warning, add another time through with them turned off
    push @tests, "no warnings '$warning_type';" if $warning_type;

    foreach my $no_warnings (@tests) {

        # Store any warning messages instead of outputting them
        local $SIG{__WARN__} = $SIG{__WARN__};
        my $warning_message;
        $SIG{__WARN__} = sub { $warning_message = $_[0] };

        $Tests++;

        # A string eval is needed because of the 'no warnings'.
        # Assumes no parens in the regular expression
        my $result = eval "$no_warnings
                            my \$RegObj = qr($regex);
                            $string =~ \$RegObj ? 1 : 0";
        if (not defined $result) {
            print "not ok $Tests - couldn't compile /$regex/; line $line: $@\n";
            $Fails++;
        }
        elsif ($result ^ $expected) {
            print "not ok $Tests - expected $expected but got $result for $string =~ qr/$regex/; line $line\n";
            $Fails++;
        }
        elsif ($warning_message) {
            if (! $warning_type || ($warning_type && $no_warnings)) {
                print "not ok $Tests - for qr/$regex/ did not expect warning message '$warning_message'; line $line\n";
                $Fails++;
            }
            else {
                print "ok $Tests - expected and got a warning message for qr/$regex/; line $line\n";
            }
        }
        elsif ($warning_type && ! $no_warnings) {
            print "not ok $Tests - for qr/$regex/ expected a $warning_type warning message, but got none; line $line\n";
            $Fails++;
        }
        else {
            print "ok $Tests - got $result for $string =~ qr/$regex/; line $line\n";
        }
    }
    return;
}

sub Error($) {
    my $regex  = shift;
    $Tests++;
    if (eval { 'x' =~ qr/$regex/; 1 }) {
        $Fails++;
        my $line = (caller)[2];
        print "not ok $Tests - re compiled ok, but expected error for qr/$regex/; line $line: $@\n";
    }
    else {
        my $line = (caller)[2];
        print "ok $Tests - got and expected error for qr/$regex/; line $line\n";
    }
    return;
}

# GCBTest.txt character that separates grapheme clusters
my $breakable_utf8 = my $breakable = chr(0xF7);
utf8::upgrade($breakable_utf8);

# GCBTest.txt character that indicates that the adjoining code points are part
# of the same grapheme cluster
my $nobreak_utf8 = my $nobreak = chr(0xD7);
utf8::upgrade($nobreak_utf8);

sub Test_X($) {
    # Test qr/\X/ matches.  The input is a line from auxiliary/GCBTest.txt
    # Each such line is a sequence of code points given by their hex numbers,
    # separated by the two characters defined just before this subroutine that
    # indicate that either there can or cannot be a break between the adjacent
    # code points.  If there isn't a break, that means the sequence forms an
    # extended grapheme cluster, which means that \X should match the whole
    # thing.  If there is a break, \X should stop there.  This is all
    # converted by this routine into a match:
    #   $string =~ /(\X)/,
    # Each \X should match the next cluster; and that is what is checked.

    my $template = shift;

    my $line   = (caller)[2];

    # The line contains characters above the ASCII range, but in Latin1.  It
    # may or may not be in utf8, and if it is, it may or may not know it.  So,
    # convert these characters to 8 bits.  If knows is in utf8, simply
    # downgrade.
    if (utf8::is_utf8($template)) {
        utf8::downgrade($template);
    } else {

        # Otherwise, if it is in utf8, but doesn't know it, the next lines
        # convert the two problematic characters to their 8-bit equivalents.
        # If it isn't in utf8, they don't harm anything.
        use bytes;
        $template =~ s/$nobreak_utf8/$nobreak/g;
        $template =~ s/$breakable_utf8/$breakable/g;
    }

    # Get rid of the leading and trailing breakables
    $template =~ s/^ \s* $breakable \s* //x;
    $template =~ s/ \s* $breakable \s* $ //x;

    # And no-breaks become just a space.
    $template =~ s/ \s* $nobreak \s* / /xg;

    # Split the input into segments that are breakable between them.
    my @segments = split /\s*$breakable\s*/, $template;

    my $string = "";
    my $display_string = "";
    my @should_match;
    my @should_display;

    # Convert the code point sequence in each segment into a Perl string of
    # characters
    foreach my $segment (@segments) {
        my @code_points = split /\s+/, $segment;
        my $this_string = "";
        my $this_display = "";
        foreach my $code_point (@code_points) {
            my $ord = ASCII_ord_to_native(hex $code_point);
            if ($ord < 0) {
                $Tests++;
                print "ok $Tests - String containing $code_point =~ /(\\X)/g # Skipped: non-ASCII\n";
                return;
            }
            $this_string .= chr $ord;
            $this_display .= "\\x{$code_point}";
        }

        # The next cluster should match the string in this segment.
        push @should_match, $this_string;
        push @should_display, $this_display;
        $string .= $this_string;
        $display_string .= $this_display;
    }

    # If a string can be represented in both non-ut8 and utf8, test both cases
    UPGRADE:
    for my $to_upgrade (0 .. 1) {

        if ($to_upgrade) {

            # If already in utf8, would just be a repeat
            next UPGRADE if utf8::is_utf8($string);

            utf8::upgrade($string);
        }

        # Finally, do the \X match.
        my @matches = $string =~ /(\X)/g;

        # Look through each matched cluster to verify that it matches what we
        # expect.
        my $min = (@matches < @should_match) ? @matches : @should_match;
        for my $i (0 .. $min - 1) {
            $Tests++;
            if ($matches[$i] eq $should_match[$i]) {
                print "ok $Tests - ";
                if ($i == 0) {
                    print "In \"$display_string\" =~ /(\\X)/g, \\X #1";
                } else {
                    print "And \\X #", $i + 1,
                }
                print " correctly matched $should_display[$i]; line $line\n";
            } else {
                $matches[$i] = join("", map { sprintf "\\x{%04X}", $_ }
                                                    unpack("U*", $matches[$i]));
                print "not ok $Tests - In \"$display_string\" =~ /(\\X)/g, \\X #",
                    $i + 1,
                    " should have matched $should_display[$i]",
                    " but instead matched $matches[$i]",
                    ".  Abandoning rest of line $line\n";
                next UPGRADE;
            }
        }

        # And the number of matches should equal the number of expected matches.
        $Tests++;
        if (@matches == @should_match) {
            print "ok $Tests - Nothing was left over; line $line\n";
        } else {
            print "not ok $Tests - There were ", scalar @should_match, " \\X matches expected, but got ", scalar @matches, " instead; line $line\n";
        }
    }

    return;
}

sub Finished() {
    print "1..$Tests\n";
    exit($Fails ? -1 : 0);
}

Error('\p{Script=InGreek}');    # Bug #69018
Test_X("1100 $nobreak 1161");  # Bug #70940
Expect(0, 0x2028, '\p{Print}', ""); # Bug # 71722
Expect(0, 0x2029, '\p{Print}', ""); # Bug # 71722
Expect(1, 0xFF10, '\p{XDigit}', ""); # Bug # 71726
Error('\p{Other_Lowercase=:=	Yes}');
Error('\P{Other_Lowercase=:=	Yes}');
Expect(1, 696, '\p{Other_Lowercase=yes}', 'deprecated');
Expect(0, 696, '\p{^Other_Lowercase=yes}', 'deprecated');
Expect(0, 696, '\P{Other_Lowercase=yes}', 'deprecated');
Expect(1, 696, '\P{^Other_Lowercase=yes}', 'deprecated');
Expect(0, 687, '\p{Other_Lowercase=yes}', 'deprecated');
Expect(1, 687, '\p{^Other_Lowercase=yes}', 'deprecated');
Expect(1, 687, '\P{Other_Lowercase=yes}', 'deprecated');
Expect(0, 687, '\P{^Other_Lowercase=yes}', 'deprecated');
Expect(1, 696, '\p{Other_Lowercase=--Yes}', 'deprecated');
Expect(0, 696, '\p{^Other_Lowercase=--Yes}', 'deprecated');
Expect(0, 696, '\P{Other_Lowercase=--Yes}', 'deprecated');
Expect(1, 696, '\P{^Other_Lowercase=--Yes}', 'deprecated');
Expect(0, 687, '\p{Other_Lowercase=--Yes}', 'deprecated');
Expect(1, 687, '\p{^Other_Lowercase=--Yes}', 'deprecated');
Expect(1, 687, '\P{Other_Lowercase=--Yes}', 'deprecated');
Expect(0, 687, '\P{^Other_Lowercase=--Yes}', 'deprecated');
Error('\p{OLower=		Y:=}');
Error('\P{OLower=		Y:=}');
Expect(1, 696, '\p{OLower=y}', 'deprecated');
Expect(0, 696, '\p{^OLower=y}', 'deprecated');
Expect(0, 696, '\P{OLower=y}', 'deprecated');
Expect(1, 696, '\P{^OLower=y}', 'deprecated');
Expect(0, 687, '\p{OLower=y}', 'deprecated');
Expect(1, 687, '\p{^OLower=y}', 'deprecated');
Expect(1, 687, '\P{OLower=y}', 'deprecated');
Expect(0, 687, '\P{^OLower=y}', 'deprecated');
Expect(1, 696, '\p{OLower:	Y}', 'deprecated');
Expect(0, 696, '\p{^OLower:	Y}', 'deprecated');
Expect(0, 696, '\P{OLower:	Y}', 'deprecated');
Expect(1, 696, '\P{^OLower:	Y}', 'deprecated');
Expect(0, 687, '\p{OLower:	Y}', 'deprecated');
Expect(1, 687, '\p{^OLower:	Y}', 'deprecated');
Expect(1, 687, '\P{OLower:	Y}', 'deprecated');
Expect(0, 687, '\P{^OLower:	Y}', 'deprecated');
Error('\p{Is_Other_Lowercase=/a/		T}');
Error('\P{Is_Other_Lowercase=/a/		T}');
Expect(1, 696, '\p{Is_Other_Lowercase=t}', 'deprecated');
Expect(0, 696, '\p{^Is_Other_Lowercase=t}', 'deprecated');
Expect(0, 696, '\P{Is_Other_Lowercase=t}', 'deprecated');
Expect(1, 696, '\P{^Is_Other_Lowercase=t}', 'deprecated');
Expect(0, 687, '\p{Is_Other_Lowercase=t}', 'deprecated');
Expect(1, 687, '\p{^Is_Other_Lowercase=t}', 'deprecated');
Expect(1, 687, '\P{Is_Other_Lowercase=t}', 'deprecated');
Expect(0, 687, '\P{^Is_Other_Lowercase=t}', 'deprecated');
Expect(1, 696, '\p{Is_Other_Lowercase=-T}', 'deprecated');
Expect(0, 696, '\p{^Is_Other_Lowercase=-T}', 'deprecated');
Expect(0, 696, '\P{Is_Other_Lowercase=-T}', 'deprecated');
Expect(1, 696, '\P{^Is_Other_Lowercase=-T}', 'deprecated');
Expect(0, 687, '\p{Is_Other_Lowercase=-T}', 'deprecated');
Expect(1, 687, '\p{^Is_Other_Lowercase=-T}', 'deprecated');
Expect(1, 687, '\P{Is_Other_Lowercase=-T}', 'deprecated');
Expect(0, 687, '\P{^Is_Other_Lowercase=-T}', 'deprecated');
Error('\p{Is_OLower=		True/a/}');
Error('\P{Is_OLower=		True/a/}');
Expect(1, 696, '\p{Is_OLower=true}', 'deprecated');
Expect(0, 696, '\p{^Is_OLower=true}', 'deprecated');
Expect(0, 696, '\P{Is_OLower=true}', 'deprecated');
Expect(1, 696, '\P{^Is_OLower=true}', 'deprecated');
Expect(0, 687, '\p{Is_OLower=true}', 'deprecated');
Expect(1, 687, '\p{^Is_OLower=true}', 'deprecated');
Expect(1, 687, '\P{Is_OLower=true}', 'deprecated');
Expect(0, 687, '\P{^Is_OLower=true}', 'deprecated');
Expect(1, 696, '\p{Is_OLower=_-true}', 'deprecated');
Expect(0, 696, '\p{^Is_OLower=_-true}', 'deprecated');
Expect(0, 696, '\P{Is_OLower=_-true}', 'deprecated');
Expect(1, 696, '\P{^Is_OLower=_-true}', 'deprecated');
Expect(0, 687, '\p{Is_OLower=_-true}', 'deprecated');
Expect(1, 687, '\p{^Is_OLower=_-true}', 'deprecated');
Expect(1, 687, '\P{Is_OLower=_-true}', 'deprecated');
Expect(0, 687, '\P{^Is_OLower=_-true}', 'deprecated');
Error('\p{Other_Lowercase=_ NO:=}');
Error('\P{Other_Lowercase=_ NO:=}');
Expect(1, 687, '\p{Other_Lowercase=no}', 'deprecated');
Expect(0, 687, '\p{^Other_Lowercase=no}', 'deprecated');
Expect(0, 687, '\P{Other_Lowercase=no}', 'deprecated');
Expect(1, 687, '\P{^Other_Lowercase=no}', 'deprecated');
Expect(0, 696, '\p{Other_Lowercase=no}', 'deprecated');
Expect(1, 696, '\p{^Other_Lowercase=no}', 'deprecated');
Expect(1, 696, '\P{Other_Lowercase=no}', 'deprecated');
Expect(0, 696, '\P{^Other_Lowercase=no}', 'deprecated');
Expect(1, 687, '\p{Other_Lowercase=_	no}', 'deprecated');
Expect(0, 687, '\p{^Other_Lowercase=_	no}', 'deprecated');
Expect(0, 687, '\P{Other_Lowercase=_	no}', 'deprecated');
Expect(1, 687, '\P{^Other_Lowercase=_	no}', 'deprecated');
Expect(0, 696, '\p{Other_Lowercase=_	no}', 'deprecated');
Expect(1, 696, '\p{^Other_Lowercase=_	no}', 'deprecated');
Expect(1, 696, '\P{Other_Lowercase=_	no}', 'deprecated');
Expect(0, 696, '\P{^Other_Lowercase=_	no}', 'deprecated');
Error('\p{OLower:   /a/	N}');
Error('\P{OLower:   /a/	N}');
Expect(1, 687, '\p{OLower=n}', 'deprecated');
Expect(0, 687, '\p{^OLower=n}', 'deprecated');
Expect(0, 687, '\P{OLower=n}', 'deprecated');
Expect(1, 687, '\P{^OLower=n}', 'deprecated');
Expect(0, 696, '\p{OLower=n}', 'deprecated');
Expect(1, 696, '\p{^OLower=n}', 'deprecated');
Expect(1, 696, '\P{OLower=n}', 'deprecated');
Expect(0, 696, '\P{^OLower=n}', 'deprecated');
Expect(1, 687, '\p{OLower= n}', 'deprecated');
Expect(0, 687, '\p{^OLower= n}', 'deprecated');
Expect(0, 687, '\P{OLower= n}', 'deprecated');
Expect(1, 687, '\P{^OLower= n}', 'deprecated');
Expect(0, 696, '\p{OLower= n}', 'deprecated');
Expect(1, 696, '\p{^OLower= n}', 'deprecated');
Expect(1, 696, '\P{OLower= n}', 'deprecated');
Expect(0, 696, '\P{^OLower= n}', 'deprecated');
Error('\p{Is_Other_Lowercase::=-	F}');
Error('\P{Is_Other_Lowercase::=-	F}');
Expect(1, 687, '\p{Is_Other_Lowercase=f}', 'deprecated');
Expect(0, 687, '\p{^Is_Other_Lowercase=f}', 'deprecated');
Expect(0, 687, '\P{Is_Other_Lowercase=f}', 'deprecated');
Expect(1, 687, '\P{^Is_Other_Lowercase=f}', 'deprecated');
Expect(0, 696, '\p{Is_Other_Lowercase=f}', 'deprecated');
Expect(1, 696, '\p{^Is_Other_Lowercase=f}', 'deprecated');
Expect(1, 696, '\P{Is_Other_Lowercase=f}', 'deprecated');
Expect(0, 696, '\P{^Is_Other_Lowercase=f}', 'deprecated');
Expect(1, 687, '\p{Is_Other_Lowercase:  F}', 'deprecated');
Expect(0, 687, '\p{^Is_Other_Lowercase:  F}', 'deprecated');
Expect(0, 687, '\P{Is_Other_Lowercase:  F}', 'deprecated');
Expect(1, 687, '\P{^Is_Other_Lowercase:  F}', 'deprecated');
Expect(0, 696, '\p{Is_Other_Lowercase:  F}', 'deprecated');
Expect(1, 696, '\p{^Is_Other_Lowercase:  F}', 'deprecated');
Expect(1, 696, '\P{Is_Other_Lowercase:  F}', 'deprecated');
Expect(0, 696, '\P{^Is_Other_Lowercase:  F}', 'deprecated');
Error('\p{Is_OLower=	:=False}');
Error('\P{Is_OLower=	:=False}');
Expect(1, 687, '\p{Is_OLower=false}', 'deprecated');
Expect(0, 687, '\p{^Is_OLower=false}', 'deprecated');
Expect(0, 687, '\P{Is_OLower=false}', 'deprecated');
Expect(1, 687, '\P{^Is_OLower=false}', 'deprecated');
Expect(0, 696, '\p{Is_OLower=false}', 'deprecated');
Expect(1, 696, '\p{^Is_OLower=false}', 'deprecated');
Expect(1, 696, '\P{Is_OLower=false}', 'deprecated');
Expect(0, 696, '\P{^Is_OLower=false}', 'deprecated');
Expect(1, 687, '\p{Is_OLower=_	False}', 'deprecated');
Expect(0, 687, '\p{^Is_OLower=_	False}', 'deprecated');
Expect(0, 687, '\P{Is_OLower=_	False}', 'deprecated');
Expect(1, 687, '\P{^Is_OLower=_	False}', 'deprecated');
Expect(0, 696, '\p{Is_OLower=_	False}', 'deprecated');
Expect(1, 696, '\p{^Is_OLower=_	False}', 'deprecated');
Expect(1, 696, '\P{Is_OLower=_	False}', 'deprecated');
Expect(0, 696, '\P{^Is_OLower=_	False}', 'deprecated');
Error('\p{Variation_Selector= Yes:=}');
Error('\P{Variation_Selector= Yes:=}');
Expect(1, 6157, '\p{Variation_Selector=yes}', "");
Expect(0, 6157, '\p{^Variation_Selector=yes}', "");
Expect(0, 6157, '\P{Variation_Selector=yes}', "");
Expect(1, 6157, '\P{^Variation_Selector=yes}', "");
Expect(0, 6154, '\p{Variation_Selector=yes}', "");
Expect(1, 6154, '\p{^Variation_Selector=yes}', "");
Expect(1, 6154, '\P{Variation_Selector=yes}', "");
Expect(0, 6154, '\P{^Variation_Selector=yes}', "");
Expect(1, 6157, '\p{Variation_Selector:   -_Yes}', "");
Expect(0, 6157, '\p{^Variation_Selector:   -_Yes}', "");
Expect(0, 6157, '\P{Variation_Selector:   -_Yes}', "");
Expect(1, 6157, '\P{^Variation_Selector:   -_Yes}', "");
Expect(0, 6154, '\p{Variation_Selector:   -_Yes}', "");
Expect(1, 6154, '\p{^Variation_Selector:   -_Yes}', "");
Expect(1, 6154, '\P{Variation_Selector:   -_Yes}', "");
Expect(0, 6154, '\P{^Variation_Selector:   -_Yes}', "");
Error('\p{VS=-_y/a/}');
Error('\P{VS=-_y/a/}');
Expect(1, 6157, '\p{VS=y}', "");
Expect(0, 6157, '\p{^VS=y}', "");
Expect(0, 6157, '\P{VS=y}', "");
Expect(1, 6157, '\P{^VS=y}', "");
Expect(0, 6154, '\p{VS=y}', "");
Expect(1, 6154, '\p{^VS=y}', "");
Expect(1, 6154, '\P{VS=y}', "");
Expect(0, 6154, '\P{^VS=y}', "");
Expect(1, 6157, '\p{VS=	 Y}', "");
Expect(0, 6157, '\p{^VS=	 Y}', "");
Expect(0, 6157, '\P{VS=	 Y}', "");
Expect(1, 6157, '\P{^VS=	 Y}', "");
Expect(0, 6154, '\p{VS=	 Y}', "");
Expect(1, 6154, '\p{^VS=	 Y}', "");
Expect(1, 6154, '\P{VS=	 Y}', "");
Expect(0, 6154, '\P{^VS=	 Y}', "");
Error('\p{Is_Variation_Selector:	:=_T}');
Error('\P{Is_Variation_Selector:	:=_T}');
Expect(1, 6157, '\p{Is_Variation_Selector=t}', "");
Expect(0, 6157, '\p{^Is_Variation_Selector=t}', "");
Expect(0, 6157, '\P{Is_Variation_Selector=t}', "");
Expect(1, 6157, '\P{^Is_Variation_Selector=t}', "");
Expect(0, 6154, '\p{Is_Variation_Selector=t}', "");
Expect(1, 6154, '\p{^Is_Variation_Selector=t}', "");
Expect(1, 6154, '\P{Is_Variation_Selector=t}', "");
Expect(0, 6154, '\P{^Is_Variation_Selector=t}', "");
Expect(1, 6157, '\p{Is_Variation_Selector= T}', "");
Expect(0, 6157, '\p{^Is_Variation_Selector= T}', "");
Expect(0, 6157, '\P{Is_Variation_Selector= T}', "");
Expect(1, 6157, '\P{^Is_Variation_Selector= T}', "");
Expect(0, 6154, '\p{Is_Variation_Selector= T}', "");
Expect(1, 6154, '\p{^Is_Variation_Selector= T}', "");
Expect(1, 6154, '\P{Is_Variation_Selector= T}', "");
Expect(0, 6154, '\P{^Is_Variation_Selector= T}', "");
Error('\p{Is_VS=/a/--true}');
Error('\P{Is_VS=/a/--true}');
Expect(1, 6157, '\p{Is_VS=true}', "");
Expect(0, 6157, '\p{^Is_VS=true}', "");
Expect(0, 6157, '\P{Is_VS=true}', "");
Expect(1, 6157, '\P{^Is_VS=true}', "");
Expect(0, 6154, '\p{Is_VS=true}', "");
Expect(1, 6154, '\p{^Is_VS=true}', "");
Expect(1, 6154, '\P{Is_VS=true}', "");
Expect(0, 6154, '\P{^Is_VS=true}', "");
Expect(1, 6157, '\p{Is_VS: true}', "");
Expect(0, 6157, '\p{^Is_VS: true}', "");
Expect(0, 6157, '\P{Is_VS: true}', "");
Expect(1, 6157, '\P{^Is_VS: true}', "");
Expect(0, 6154, '\p{Is_VS: true}', "");
Expect(1, 6154, '\p{^Is_VS: true}', "");
Expect(1, 6154, '\P{Is_VS: true}', "");
Expect(0, 6154, '\P{^Is_VS: true}', "");
Error('\p{Variation_Selector= No/a/}');
Error('\P{Variation_Selector= No/a/}');
Expect(1, 6154, '\p{Variation_Selector=no}', "");
Expect(0, 6154, '\p{^Variation_Selector=no}', "");
Expect(0, 6154, '\P{Variation_Selector=no}', "");
Expect(1, 6154, '\P{^Variation_Selector=no}', "");
Expect(0, 6157, '\p{Variation_Selector=no}', "");
Expect(1, 6157, '\p{^Variation_Selector=no}', "");
Expect(1, 6157, '\P{Variation_Selector=no}', "");
Expect(0, 6157, '\P{^Variation_Selector=no}', "");
Expect(1, 6154, '\p{Variation_Selector=-	no}', "");
Expect(0, 6154, '\p{^Variation_Selector=-	no}', "");
Expect(0, 6154, '\P{Variation_Selector=-	no}', "");
Expect(1, 6154, '\P{^Variation_Selector=-	no}', "");
Expect(0, 6157, '\p{Variation_Selector=-	no}', "");
Expect(1, 6157, '\p{^Variation_Selector=-	no}', "");
Expect(1, 6157, '\P{Variation_Selector=-	no}', "");
Expect(0, 6157, '\P{^Variation_Selector=-	no}', "");
Error('\p{VS=:=N}');
Error('\P{VS=:=N}');
Expect(1, 6154, '\p{VS=n}', "");
Expect(0, 6154, '\p{^VS=n}', "");
Expect(0, 6154, '\P{VS=n}', "");
Expect(1, 6154, '\P{^VS=n}', "");
Expect(0, 6157, '\p{VS=n}', "");
Expect(1, 6157, '\p{^VS=n}', "");
Expect(1, 6157, '\P{VS=n}', "");
Expect(0, 6157, '\P{^VS=n}', "");
Expect(1, 6154, '\p{VS=__N}', "");
Expect(0, 6154, '\p{^VS=__N}', "");
Expect(0, 6154, '\P{VS=__N}', "");
Expect(1, 6154, '\P{^VS=__N}', "");
Expect(0, 6157, '\p{VS=__N}', "");
Expect(1, 6157, '\p{^VS=__N}', "");
Expect(1, 6157, '\P{VS=__N}', "");
Expect(0, 6157, '\P{^VS=__N}', "");
Error('\p{Is_Variation_Selector=	F/a/}');
Error('\P{Is_Variation_Selector=	F/a/}');
Expect(1, 6154, '\p{Is_Variation_Selector:f}', "");
Expect(0, 6154, '\p{^Is_Variation_Selector:f}', "");
Expect(0, 6154, '\P{Is_Variation_Selector:f}', "");
Expect(1, 6154, '\P{^Is_Variation_Selector:f}', "");
Expect(0, 6157, '\p{Is_Variation_Selector:f}', "");
Expect(1, 6157, '\p{^Is_Variation_Selector:f}', "");
Expect(1, 6157, '\P{Is_Variation_Selector:f}', "");
Expect(0, 6157, '\P{^Is_Variation_Selector:f}', "");
Expect(1, 6154, '\p{Is_Variation_Selector=_-F}', "");
Expect(0, 6154, '\p{^Is_Variation_Selector=_-F}', "");
Expect(0, 6154, '\P{Is_Variation_Selector=_-F}', "");
Expect(1, 6154, '\P{^Is_Variation_Selector=_-F}', "");
Expect(0, 6157, '\p{Is_Variation_Selector=_-F}', "");
Expect(1, 6157, '\p{^Is_Variation_Selector=_-F}', "");
Expect(1, 6157, '\P{Is_Variation_Selector=_-F}', "");
Expect(0, 6157, '\P{^Is_Variation_Selector=_-F}', "");
Error('\p{Is_VS=/a/		False}');
Error('\P{Is_VS=/a/		False}');
Expect(1, 6154, '\p{Is_VS=false}', "");
Expect(0, 6154, '\p{^Is_VS=false}', "");
Expect(0, 6154, '\P{Is_VS=false}', "");
Expect(1, 6154, '\P{^Is_VS=false}', "");
Expect(0, 6157, '\p{Is_VS=false}', "");
Expect(1, 6157, '\p{^Is_VS=false}', "");
Expect(1, 6157, '\P{Is_VS=false}', "");
Expect(0, 6157, '\P{^Is_VS=false}', "");
Expect(1, 6154, '\p{Is_VS=	-FALSE}', "");
Expect(0, 6154, '\p{^Is_VS=	-FALSE}', "");
Expect(0, 6154, '\P{Is_VS=	-FALSE}', "");
Expect(1, 6154, '\P{^Is_VS=	-FALSE}', "");
Expect(0, 6157, '\p{Is_VS=	-FALSE}', "");
Expect(1, 6157, '\p{^Is_VS=	-FALSE}', "");
Expect(1, 6157, '\P{Is_VS=	-FALSE}', "");
Expect(0, 6157, '\P{^Is_VS=	-FALSE}', "");
Error('\p{Full_Composition_Exclusion=-yes:=}');
Error('\P{Full_Composition_Exclusion=-yes:=}');
Expect(1, 833, '\p{Full_Composition_Exclusion=yes}', "");
Expect(0, 833, '\p{^Full_Composition_Exclusion=yes}', "");
Expect(0, 833, '\P{Full_Composition_Exclusion=yes}', "");
Expect(1, 833, '\P{^Full_Composition_Exclusion=yes}', "");
Expect(0, 831, '\p{Full_Composition_Exclusion=yes}', "");
Expect(1, 831, '\p{^Full_Composition_Exclusion=yes}', "");
Expect(1, 831, '\P{Full_Composition_Exclusion=yes}', "");
Expect(0, 831, '\P{^Full_Composition_Exclusion=yes}', "");
Expect(1, 833, '\p{Full_Composition_Exclusion= YES}', "");
Expect(0, 833, '\p{^Full_Composition_Exclusion= YES}', "");
Expect(0, 833, '\P{Full_Composition_Exclusion= YES}', "");
Expect(1, 833, '\P{^Full_Composition_Exclusion= YES}', "");
Expect(0, 831, '\p{Full_Composition_Exclusion= YES}', "");
Expect(1, 831, '\p{^Full_Composition_Exclusion= YES}', "");
Expect(1, 831, '\P{Full_Composition_Exclusion= YES}', "");
Expect(0, 831, '\P{^Full_Composition_Exclusion= YES}', "");
Error('\p{Comp_Ex=/a/	-Y}');
Error('\P{Comp_Ex=/a/	-Y}');
Expect(1, 833, '\p{Comp_Ex=y}', "");
Expect(0, 833, '\p{^Comp_Ex=y}', "");
Expect(0, 833, '\P{Comp_Ex=y}', "");
Expect(1, 833, '\P{^Comp_Ex=y}', "");
Expect(0, 831, '\p{Comp_Ex=y}', "");
Expect(1, 831, '\p{^Comp_Ex=y}', "");
Expect(1, 831, '\P{Comp_Ex=y}', "");
Expect(0, 831, '\P{^Comp_Ex=y}', "");
Expect(1, 833, '\p{Comp_Ex=-y}', "");
Expect(0, 833, '\p{^Comp_Ex=-y}', "");
Expect(0, 833, '\P{Comp_Ex=-y}', "");
Expect(1, 833, '\P{^Comp_Ex=-y}', "");
Expect(0, 831, '\p{Comp_Ex=-y}', "");
Expect(1, 831, '\p{^Comp_Ex=-y}', "");
Expect(1, 831, '\P{Comp_Ex=-y}', "");
Expect(0, 831, '\P{^Comp_Ex=-y}', "");
Error('\p{Is_Full_Composition_Exclusion=	 T:=}');
Error('\P{Is_Full_Composition_Exclusion=	 T:=}');
Expect(1, 833, '\p{Is_Full_Composition_Exclusion=t}', "");
Expect(0, 833, '\p{^Is_Full_Composition_Exclusion=t}', "");
Expect(0, 833, '\P{Is_Full_Composition_Exclusion=t}', "");
Expect(1, 833, '\P{^Is_Full_Composition_Exclusion=t}', "");
Expect(0, 831, '\p{Is_Full_Composition_Exclusion=t}', "");
Expect(1, 831, '\p{^Is_Full_Composition_Exclusion=t}', "");
Expect(1, 831, '\P{Is_Full_Composition_Exclusion=t}', "");
Expect(0, 831, '\P{^Is_Full_Composition_Exclusion=t}', "");
Expect(1, 833, '\p{Is_Full_Composition_Exclusion=  T}', "");
Expect(0, 833, '\p{^Is_Full_Composition_Exclusion=  T}', "");
Expect(0, 833, '\P{Is_Full_Composition_Exclusion=  T}', "");
Expect(1, 833, '\P{^Is_Full_Composition_Exclusion=  T}', "");
Expect(0, 831, '\p{Is_Full_Composition_Exclusion=  T}', "");
Expect(1, 831, '\p{^Is_Full_Composition_Exclusion=  T}', "");
Expect(1, 831, '\P{Is_Full_Composition_Exclusion=  T}', "");
Expect(0, 831, '\P{^Is_Full_Composition_Exclusion=  T}', "");
Error('\p{Is_Comp_Ex=-True/a/}');
Error('\P{Is_Comp_Ex=-True/a/}');
Expect(1, 833, '\p{Is_Comp_Ex=true}', "");
Expect(0, 833, '\p{^Is_Comp_Ex=true}', "");
Expect(0, 833, '\P{Is_Comp_Ex=true}', "");
Expect(1, 833, '\P{^Is_Comp_Ex=true}', "");
Expect(0, 831, '\p{Is_Comp_Ex=true}', "");
Expect(1, 831, '\p{^Is_Comp_Ex=true}', "");
Expect(1, 831, '\P{Is_Comp_Ex=true}', "");
Expect(0, 831, '\P{^Is_Comp_Ex=true}', "");
Expect(1, 833, '\p{Is_Comp_Ex=TRUE}', "");
Expect(0, 833, '\p{^Is_Comp_Ex=TRUE}', "");
Expect(0, 833, '\P{Is_Comp_Ex=TRUE}', "");
Expect(1, 833, '\P{^Is_Comp_Ex=TRUE}', "");
Expect(0, 831, '\p{Is_Comp_Ex=TRUE}', "");
Expect(1, 831, '\p{^Is_Comp_Ex=TRUE}', "");
Expect(1, 831, '\P{Is_Comp_Ex=TRUE}', "");
Expect(0, 831, '\P{^Is_Comp_Ex=TRUE}', "");
Error('\p{Full_Composition_Exclusion=--No/a/}');
Error('\P{Full_Composition_Exclusion=--No/a/}');
Expect(1, 831, '\p{Full_Composition_Exclusion=no}', "");
Expect(0, 831, '\p{^Full_Composition_Exclusion=no}', "");
Expect(0, 831, '\P{Full_Composition_Exclusion=no}', "");
Expect(1, 831, '\P{^Full_Composition_Exclusion=no}', "");
Expect(0, 833, '\p{Full_Composition_Exclusion=no}', "");
Expect(1, 833, '\p{^Full_Composition_Exclusion=no}', "");
Expect(1, 833, '\P{Full_Composition_Exclusion=no}', "");
Expect(0, 833, '\P{^Full_Composition_Exclusion=no}', "");
Expect(1, 831, '\p{Full_Composition_Exclusion=	_No}', "");
Expect(0, 831, '\p{^Full_Composition_Exclusion=	_No}', "");
Expect(0, 831, '\P{Full_Composition_Exclusion=	_No}', "");
Expect(1, 831, '\P{^Full_Composition_Exclusion=	_No}', "");
Expect(0, 833, '\p{Full_Composition_Exclusion=	_No}', "");
Expect(1, 833, '\p{^Full_Composition_Exclusion=	_No}', "");
Expect(1, 833, '\P{Full_Composition_Exclusion=	_No}', "");
Expect(0, 833, '\P{^Full_Composition_Exclusion=	_No}', "");
Error('\p{Comp_Ex=:= _N}');
Error('\P{Comp_Ex=:= _N}');
Expect(1, 831, '\p{Comp_Ex=n}', "");
Expect(0, 831, '\p{^Comp_Ex=n}', "");
Expect(0, 831, '\P{Comp_Ex=n}', "");
Expect(1, 831, '\P{^Comp_Ex=n}', "");
Expect(0, 833, '\p{Comp_Ex=n}', "");
Expect(1, 833, '\p{^Comp_Ex=n}', "");
Expect(1, 833, '\P{Comp_Ex=n}', "");
Expect(0, 833, '\P{^Comp_Ex=n}', "");
Expect(1, 831, '\p{Comp_Ex=_N}', "");
Expect(0, 831, '\p{^Comp_Ex=_N}', "");
Expect(0, 831, '\P{Comp_Ex=_N}', "");
Expect(1, 831, '\P{^Comp_Ex=_N}', "");
Expect(0, 833, '\p{Comp_Ex=_N}', "");
Expect(1, 833, '\p{^Comp_Ex=_N}', "");
Expect(1, 833, '\P{Comp_Ex=_N}', "");
Expect(0, 833, '\P{^Comp_Ex=_N}', "");
Error('\p{Is_Full_Composition_Exclusion= -F/a/}');
Error('\P{Is_Full_Composition_Exclusion= -F/a/}');
Expect(1, 831, '\p{Is_Full_Composition_Exclusion=f}', "");
Expect(0, 831, '\p{^Is_Full_Composition_Exclusion=f}', "");
Expect(0, 831, '\P{Is_Full_Composition_Exclusion=f}', "");
Expect(1, 831, '\P{^Is_Full_Composition_Exclusion=f}', "");
Expect(0, 833, '\p{Is_Full_Composition_Exclusion=f}', "");
Expect(1, 833, '\p{^Is_Full_Composition_Exclusion=f}', "");
Expect(1, 833, '\P{Is_Full_Composition_Exclusion=f}', "");
Expect(0, 833, '\P{^Is_Full_Composition_Exclusion=f}', "");
Expect(1, 831, '\p{Is_Full_Composition_Exclusion= -F}', "");
Expect(0, 831, '\p{^Is_Full_Composition_Exclusion= -F}', "");
Expect(0, 831, '\P{Is_Full_Composition_Exclusion= -F}', "");
Expect(1, 831, '\P{^Is_Full_Composition_Exclusion= -F}', "");
Expect(0, 833, '\p{Is_Full_Composition_Exclusion= -F}', "");
Expect(1, 833, '\p{^Is_Full_Composition_Exclusion= -F}', "");
Expect(1, 833, '\P{Is_Full_Composition_Exclusion= -F}', "");
Expect(0, 833, '\P{^Is_Full_Composition_Exclusion= -F}', "");
Error('\p{Is_Comp_Ex=		FALSE/a/}');
Error('\P{Is_Comp_Ex=		FALSE/a/}');
Expect(1, 831, '\p{Is_Comp_Ex=false}', "");
Expect(0, 831, '\p{^Is_Comp_Ex=false}', "");
Expect(0, 831, '\P{Is_Comp_Ex=false}', "");
Expect(1, 831, '\P{^Is_Comp_Ex=false}', "");
Expect(0, 833, '\p{Is_Comp_Ex=false}', "");
Expect(1, 833, '\p{^Is_Comp_Ex=false}', "");
Expect(1, 833, '\P{Is_Comp_Ex=false}', "");
Expect(0, 833, '\P{^Is_Comp_Ex=false}', "");
Expect(1, 831, '\p{Is_Comp_Ex=  false}', "");
Expect(0, 831, '\p{^Is_Comp_Ex=  false}', "");
Expect(0, 831, '\P{Is_Comp_Ex=  false}', "");
Expect(1, 831, '\P{^Is_Comp_Ex=  false}', "");
Expect(0, 833, '\p{Is_Comp_Ex=  false}', "");
Expect(1, 833, '\p{^Is_Comp_Ex=  false}', "");
Expect(1, 833, '\P{Is_Comp_Ex=  false}', "");
Expect(0, 833, '\P{^Is_Comp_Ex=  false}', "");
Error('\p{Changes_When_NFKC_Casefolded=		Yes:=}');
Error('\P{Changes_When_NFKC_Casefolded=		Yes:=}');
Expect(1, 90, '\p{Changes_When_NFKC_Casefolded=yes}', "");
Expect(0, 90, '\p{^Changes_When_NFKC_Casefolded=yes}', "");
Expect(0, 90, '\P{Changes_When_NFKC_Casefolded=yes}', "");
Expect(1, 90, '\P{^Changes_When_NFKC_Casefolded=yes}', "");
Expect(0, 64, '\p{Changes_When_NFKC_Casefolded=yes}', "");
Expect(1, 64, '\p{^Changes_When_NFKC_Casefolded=yes}', "");
Expect(1, 64, '\P{Changes_When_NFKC_Casefolded=yes}', "");
Expect(0, 64, '\P{^Changes_When_NFKC_Casefolded=yes}', "");
Expect(1, 90, '\p{Changes_When_NFKC_Casefolded=Yes}', "");
Expect(0, 90, '\p{^Changes_When_NFKC_Casefolded=Yes}', "");
Expect(0, 90, '\P{Changes_When_NFKC_Casefolded=Yes}', "");
Expect(1, 90, '\P{^Changes_When_NFKC_Casefolded=Yes}', "");
Expect(0, 64, '\p{Changes_When_NFKC_Casefolded=Yes}', "");
Expect(1, 64, '\p{^Changes_When_NFKC_Casefolded=Yes}', "");
Expect(1, 64, '\P{Changes_When_NFKC_Casefolded=Yes}', "");
Expect(0, 64, '\P{^Changes_When_NFKC_Casefolded=Yes}', "");
Error('\p{CWKCF= :=Y}');
Error('\P{CWKCF= :=Y}');
Expect(1, 90, '\p{CWKCF=y}', "");
Expect(0, 90, '\p{^CWKCF=y}', "");
Expect(0, 90, '\P{CWKCF=y}', "");
Expect(1, 90, '\P{^CWKCF=y}', "");
Expect(0, 64, '\p{CWKCF=y}', "");
Expect(1, 64, '\p{^CWKCF=y}', "");
Expect(1, 64, '\P{CWKCF=y}', "");
Expect(0, 64, '\P{^CWKCF=y}', "");
Expect(1, 90, '\p{CWKCF=  Y}', "");
Expect(0, 90, '\p{^CWKCF=  Y}', "");
Expect(0, 90, '\P{CWKCF=  Y}', "");
Expect(1, 90, '\P{^CWKCF=  Y}', "");
Expect(0, 64, '\p{CWKCF=  Y}', "");
Expect(1, 64, '\p{^CWKCF=  Y}', "");
Expect(1, 64, '\P{CWKCF=  Y}', "");
Expect(0, 64, '\P{^CWKCF=  Y}', "");
Error('\p{Is_Changes_When_NFKC_Casefolded=/a/-T}');
Error('\P{Is_Changes_When_NFKC_Casefolded=/a/-T}');
Expect(1, 90, '\p{Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(0, 90, '\p{^Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(0, 90, '\P{Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(1, 90, '\P{^Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(0, 64, '\p{Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(1, 64, '\p{^Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(1, 64, '\P{Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(0, 64, '\P{^Is_Changes_When_NFKC_Casefolded=t}', "");
Expect(1, 90, '\p{Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(0, 90, '\p{^Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(0, 90, '\P{Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(1, 90, '\P{^Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(0, 64, '\p{Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(1, 64, '\p{^Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(1, 64, '\P{Is_Changes_When_NFKC_Casefolded=	 T}', "");
Expect(0, 64, '\P{^Is_Changes_When_NFKC_Casefolded=	 T}', "");
Error('\p{Is_CWKCF: _-true/a/}');
Error('\P{Is_CWKCF: _-true/a/}');
Expect(1, 90, '\p{Is_CWKCF=true}', "");
Expect(0, 90, '\p{^Is_CWKCF=true}', "");
Expect(0, 90, '\P{Is_CWKCF=true}', "");
Expect(1, 90, '\P{^Is_CWKCF=true}', "");
Expect(0, 64, '\p{Is_CWKCF=true}', "");
Expect(1, 64, '\p{^Is_CWKCF=true}', "");
Expect(1, 64, '\P{Is_CWKCF=true}', "");
Expect(0, 64, '\P{^Is_CWKCF=true}', "");
Expect(1, 90, '\p{Is_CWKCF= 	True}', "");
Expect(0, 90, '\p{^Is_CWKCF= 	True}', "");
Expect(0, 90, '\P{Is_CWKCF= 	True}', "");
Expect(1, 90, '\P{^Is_CWKCF= 	True}', "");
Expect(0, 64, '\p{Is_CWKCF= 	True}', "");
Expect(1, 64, '\p{^Is_CWKCF= 	True}', "");
Expect(1, 64, '\P{Is_CWKCF= 	True}', "");
Expect(0, 64, '\P{^Is_CWKCF= 	True}', "");
Error('\p{Changes_When_NFKC_Casefolded:	/a/	-NO}');
Error('\P{Changes_When_NFKC_Casefolded:	/a/	-NO}');
Expect(1, 64, '\p{Changes_When_NFKC_Casefolded=no}', "");
Expect(0, 64, '\p{^Changes_When_NFKC_Casefolded=no}', "");
Expect(0, 64, '\P{Changes_When_NFKC_Casefolded=no}', "");
Expect(1, 64, '\P{^Changes_When_NFKC_Casefolded=no}', "");
Expect(0, 90, '\p{Changes_When_NFKC_Casefolded=no}', "");
Expect(1, 90, '\p{^Changes_When_NFKC_Casefolded=no}', "");
Expect(1, 90, '\P{Changes_When_NFKC_Casefolded=no}', "");
Expect(0, 90, '\P{^Changes_When_NFKC_Casefolded=no}', "");
Expect(1, 64, '\p{Changes_When_NFKC_Casefolded=  No}', "");
Expect(0, 64, '\p{^Changes_When_NFKC_Casefolded=  No}', "");
Expect(0, 64, '\P{Changes_When_NFKC_Casefolded=  No}', "");
Expect(1, 64, '\P{^Changes_When_NFKC_Casefolded=  No}', "");
Expect(0, 90, '\p{Changes_When_NFKC_Casefolded=  No}', "");
Expect(1, 90, '\p{^Changes_When_NFKC_Casefolded=  No}', "");
Expect(1, 90, '\P{Changes_When_NFKC_Casefolded=  No}', "");
Expect(0, 90, '\P{^Changes_When_NFKC_Casefolded=  No}', "");
Error('\p{CWKCF=-	n:=}');
Error('\P{CWKCF=-	n:=}');
Expect(1, 64, '\p{CWKCF=n}', "");
Expect(0, 64, '\p{^CWKCF=n}', "");
Expect(0, 64, '\P{CWKCF=n}', "");
Expect(1, 64, '\P{^CWKCF=n}', "");
Expect(0, 90, '\p{CWKCF=n}', "");
Expect(1, 90, '\p{^CWKCF=n}', "");
Expect(1, 90, '\P{CWKCF=n}', "");
Expect(0, 90, '\P{^CWKCF=n}', "");
Expect(1, 64, '\p{CWKCF=	_n}', "");
Expect(0, 64, '\p{^CWKCF=	_n}', "");
Expect(0, 64, '\P{CWKCF=	_n}', "");
Expect(1, 64, '\P{^CWKCF=	_n}', "");
Expect(0, 90, '\p{CWKCF=	_n}', "");
Expect(1, 90, '\p{^CWKCF=	_n}', "");
Expect(1, 90, '\P{CWKCF=	_n}', "");
Expect(0, 90, '\P{^CWKCF=	_n}', "");
Error('\p{Is_Changes_When_NFKC_Casefolded=_	F/a/}');
Error('\P{Is_Changes_When_NFKC_Casefolded=_	F/a/}');
Expect(1, 64, '\p{Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(0, 64, '\p{^Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(0, 64, '\P{Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(1, 64, '\P{^Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(0, 90, '\p{Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(1, 90, '\p{^Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(1, 90, '\P{Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(0, 90, '\P{^Is_Changes_When_NFKC_Casefolded=f}', "");
Expect(1, 64, '\p{Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(0, 64, '\p{^Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(0, 64, '\P{Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(1, 64, '\P{^Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(0, 90, '\p{Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(1, 90, '\p{^Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(1, 90, '\P{Is_Changes_When_NFKC_Casefolded=-f}', "");
Expect(0, 90, '\P{^Is_Changes_When_NFKC_Casefolded=-f}', "");
Error('\p{Is_CWKCF=	/a/FALSE}');
Error('\P{Is_CWKCF=	/a/FALSE}');
Expect(1, 64, '\p{Is_CWKCF=false}', "");
Expect(0, 64, '\p{^Is_CWKCF=false}', "");
Expect(0, 64, '\P{Is_CWKCF=false}', "");
Expect(1, 64, '\P{^Is_CWKCF=false}', "");
Expect(0, 90, '\p{Is_CWKCF=false}', "");
Expect(1, 90, '\p{^Is_CWKCF=false}', "");
Expect(1, 90, '\P{Is_CWKCF=false}', "");
Expect(0, 90, '\P{^Is_CWKCF=false}', "");
Expect(1, 64, '\p{Is_CWKCF:	-_False}', "");
Expect(0, 64, '\p{^Is_CWKCF:	-_False}', "");
Expect(0, 64, '\P{Is_CWKCF:	-_False}', "");
Expect(1, 64, '\P{^Is_CWKCF:	-_False}', "");
Expect(0, 90, '\p{Is_CWKCF:	-_False}', "");
Expect(1, 90, '\p{^Is_CWKCF:	-_False}', "");
Expect(1, 90, '\P{Is_CWKCF:	-_False}', "");
Expect(0, 90, '\P{^Is_CWKCF:	-_False}', "");
Error('\p{NFKC_Quick_Check=:=-_YES}');
Error('\P{NFKC_Quick_Check=:=-_YES}');
Expect(1, 159, '\p{NFKC_Quick_Check:yes}', "");
Expect(0, 159, '\p{^NFKC_Quick_Check:yes}', "");
Expect(0, 159, '\P{NFKC_Quick_Check:yes}', "");
Expect(1, 159, '\P{^NFKC_Quick_Check:yes}', "");
Expect(0, 160, '\p{NFKC_Quick_Check:yes}', "");
Expect(1, 160, '\p{^NFKC_Quick_Check:yes}', "");
Expect(1, 160, '\P{NFKC_Quick_Check:yes}', "");
Expect(0, 160, '\P{^NFKC_Quick_Check:yes}', "");
Expect(1, 159, '\p{NFKC_Quick_Check=_	YES}', "");
Expect(0, 159, '\p{^NFKC_Quick_Check=_	YES}', "");
Expect(0, 159, '\P{NFKC_Quick_Check=_	YES}', "");
Expect(1, 159, '\P{^NFKC_Quick_Check=_	YES}', "");
Expect(0, 160, '\p{NFKC_Quick_Check=_	YES}', "");
Expect(1, 160, '\p{^NFKC_Quick_Check=_	YES}', "");
Expect(1, 160, '\P{NFKC_Quick_Check=_	YES}', "");
Expect(0, 160, '\P{^NFKC_Quick_Check=_	YES}', "");
Error('\p{NFKC_QC=_/a/Y}');
Error('\P{NFKC_QC=_/a/Y}');
Expect(1, 159, '\p{NFKC_QC=y}', "");
Expect(0, 159, '\p{^NFKC_QC=y}', "");
Expect(0, 159, '\P{NFKC_QC=y}', "");
Expect(1, 159, '\P{^NFKC_QC=y}', "");
Expect(0, 160, '\p{NFKC_QC=y}', "");
Expect(1, 160, '\p{^NFKC_QC=y}', "");
Expect(1, 160, '\P{NFKC_QC=y}', "");
Expect(0, 160, '\P{^NFKC_QC=y}', "");
Expect(1, 159, '\p{NFKC_QC=Y}', "");
Expect(0, 159, '\p{^NFKC_QC=Y}', "");
Expect(0, 159, '\P{NFKC_QC=Y}', "");
Expect(1, 159, '\P{^NFKC_QC=Y}', "");
Expect(0, 160, '\p{NFKC_QC=Y}', "");
Expect(1, 160, '\p{^NFKC_QC=Y}', "");
Expect(1, 160, '\P{NFKC_QC=Y}', "");
Expect(0, 160, '\P{^NFKC_QC=Y}', "");
Error('\p{Is_NFKC_Quick_Check=__YES:=}');
Error('\P{Is_NFKC_Quick_Check=__YES:=}');
Expect(1, 159, '\p{Is_NFKC_Quick_Check=yes}', "");
Expect(0, 159, '\p{^Is_NFKC_Quick_Check=yes}', "");
Expect(0, 159, '\P{Is_NFKC_Quick_Check=yes}', "");
Expect(1, 159, '\P{^Is_NFKC_Quick_Check=yes}', "");
Expect(0, 160, '\p{Is_NFKC_Quick_Check=yes}', "");
Expect(1, 160, '\p{^Is_NFKC_Quick_Check=yes}', "");
Expect(1, 160, '\P{Is_NFKC_Quick_Check=yes}', "");
Expect(0, 160, '\P{^Is_NFKC_Quick_Check=yes}', "");
Expect(1, 159, '\p{Is_NFKC_Quick_Check=_-Yes}', "");
Expect(0, 159, '\p{^Is_NFKC_Quick_Check=_-Yes}', "");
Expect(0, 159, '\P{Is_NFKC_Quick_Check=_-Yes}', "");
Expect(1, 159, '\P{^Is_NFKC_Quick_Check=_-Yes}', "");
Expect(0, 160, '\p{Is_NFKC_Quick_Check=_-Yes}', "");
Expect(1, 160, '\p{^Is_NFKC_Quick_Check=_-Yes}', "");
Expect(1, 160, '\P{Is_NFKC_Quick_Check=_-Yes}', "");
Expect(0, 160, '\P{^Is_NFKC_Quick_Check=_-Yes}', "");
Error('\p{Is_NFKC_QC=--y/a/}');
Error('\P{Is_NFKC_QC=--y/a/}');
Expect(1, 159, '\p{Is_NFKC_QC=y}', "");
Expect(0, 159, '\p{^Is_NFKC_QC=y}', "");
Expect(0, 159, '\P{Is_NFKC_QC=y}', "");
Expect(1, 159, '\P{^Is_NFKC_QC=y}', "");
Expect(0, 160, '\p{Is_NFKC_QC=y}', "");
Expect(1, 160, '\p{^Is_NFKC_QC=y}', "");
Expect(1, 160, '\P{Is_NFKC_QC=y}', "");
Expect(0, 160, '\P{^Is_NFKC_QC=y}', "");
Expect(1, 159, '\p{Is_NFKC_QC:    y}', "");
Expect(0, 159, '\p{^Is_NFKC_QC:    y}', "");
Expect(0, 159, '\P{Is_NFKC_QC:    y}', "");
Expect(1, 159, '\P{^Is_NFKC_QC:    y}', "");
Expect(0, 160, '\p{Is_NFKC_QC:    y}', "");
Expect(1, 160, '\p{^Is_NFKC_QC:    y}', "");
Expect(1, 160, '\P{Is_NFKC_QC:    y}', "");
Expect(0, 160, '\P{^Is_NFKC_QC:    y}', "");
Error('\p{NFKC_Quick_Check=:=_no}');
Error('\P{NFKC_Quick_Check=:=_no}');
Expect(1, 160, '\p{NFKC_Quick_Check:no}', "");
Expect(0, 160, '\p{^NFKC_Quick_Check:no}', "");
Expect(0, 160, '\P{NFKC_Quick_Check:no}', "");
Expect(1, 160, '\P{^NFKC_Quick_Check:no}', "");
Expect(0, 159, '\p{NFKC_Quick_Check:no}', "");
Expect(1, 159, '\p{^NFKC_Quick_Check:no}', "");
Expect(1, 159, '\P{NFKC_Quick_Check:no}', "");
Expect(0, 159, '\P{^NFKC_Quick_Check:no}', "");
Expect(1, 160, '\p{NFKC_Quick_Check=_	No}', "");
Expect(0, 160, '\p{^NFKC_Quick_Check=_	No}', "");
Expect(0, 160, '\P{NFKC_Quick_Check=_	No}', "");
Expect(1, 160, '\P{^NFKC_Quick_Check=_	No}', "");
Expect(0, 159, '\p{NFKC_Quick_Check=_	No}', "");
Expect(1, 159, '\p{^NFKC_Quick_Check=_	No}', "");
Expect(1, 159, '\P{NFKC_Quick_Check=_	No}', "");
Expect(0, 159, '\P{^NFKC_Quick_Check=_	No}', "");
Error('\p{NFKC_QC=--n:=}');
Error('\P{NFKC_QC=--n:=}');
Expect(1, 160, '\p{NFKC_QC=n}', "");
Expect(0, 160, '\p{^NFKC_QC=n}', "");
Expect(0, 160, '\P{NFKC_QC=n}', "");
Expect(1, 160, '\P{^NFKC_QC=n}', "");
Expect(0, 159, '\p{NFKC_QC=n}', "");
Expect(1, 159, '\p{^NFKC_QC=n}', "");
Expect(1, 159, '\P{NFKC_QC=n}', "");
Expect(0, 159, '\P{^NFKC_QC=n}', "");
Expect(1, 160, '\p{NFKC_QC=__n}', "");
Expect(0, 160, '\p{^NFKC_QC=__n}', "");
Expect(0, 160, '\P{NFKC_QC=__n}', "");
Expect(1, 160, '\P{^NFKC_QC=__n}', "");
Expect(0, 159, '\p{NFKC_QC=__n}', "");
Expect(1, 159, '\p{^NFKC_QC=__n}', "");
Expect(1, 159, '\P{NFKC_QC=__n}', "");
Expect(0, 159, '\P{^NFKC_QC=__n}', "");
Error('\p{Is_NFKC_Quick_Check=:=		No}');
Error('\P{Is_NFKC_Quick_Check=:=		No}');
Expect(1, 160, '\p{Is_NFKC_Quick_Check=no}', "");
Expect(0, 160, '\p{^Is_NFKC_Quick_Check=no}', "");
Expect(0, 160, '\P{Is_NFKC_Quick_Check=no}', "");
Expect(1, 160, '\P{^Is_NFKC_Quick_Check=no}', "");
Expect(0, 159, '\p{Is_NFKC_Quick_Check=no}', "");
Expect(1, 159, '\p{^Is_NFKC_Quick_Check=no}', "");
Expect(1, 159, '\P{Is_NFKC_Quick_Check=no}', "");
Expect(0, 159, '\P{^Is_NFKC_Quick_Check=no}', "");
Expect(1, 160, '\p{Is_NFKC_Quick_Check=__no}', "");
Expect(0, 160, '\p{^Is_NFKC_Quick_Check=__no}', "");
Expect(0, 160, '\P{Is_NFKC_Quick_Check=__no}', "");
Expect(1, 160, '\P{^Is_NFKC_Quick_Check=__no}', "");
Expect(0, 159, '\p{Is_NFKC_Quick_Check=__no}', "");
Expect(1, 159, '\p{^Is_NFKC_Quick_Check=__no}', "");
Expect(1, 159, '\P{Is_NFKC_Quick_Check=__no}', "");
Expect(0, 159, '\P{^Is_NFKC_Quick_Check=__no}', "");
Error('\p{Is_NFKC_QC=_:=n}');
Error('\P{Is_NFKC_QC=_:=n}');
Expect(1, 160, '\p{Is_NFKC_QC=n}', "");
Expect(0, 160, '\p{^Is_NFKC_QC=n}', "");
Expect(0, 160, '\P{Is_NFKC_QC=n}', "");
Expect(1, 160, '\P{^Is_NFKC_QC=n}', "");
Expect(0, 159, '\p{Is_NFKC_QC=n}', "");
Expect(1, 159, '\p{^Is_NFKC_QC=n}', "");
Expect(1, 159, '\P{Is_NFKC_QC=n}', "");
Expect(0, 159, '\P{^Is_NFKC_QC=n}', "");
Expect(1, 160, '\p{Is_NFKC_QC=_n}', "");
Expect(0, 160, '\p{^Is_NFKC_QC=_n}', "");
Expect(0, 160, '\P{Is_NFKC_QC=_n}', "");
Expect(1, 160, '\P{^Is_NFKC_QC=_n}', "");
Expect(0, 159, '\p{Is_NFKC_QC=_n}', "");
Expect(1, 159, '\p{^Is_NFKC_QC=_n}', "");
Expect(1, 159, '\P{Is_NFKC_QC=_n}', "");
Expect(0, 159, '\P{^Is_NFKC_QC=_n}', "");
Error('\p{NFKC_Quick_Check=/a/maybe}');
Error('\P{NFKC_Quick_Check=/a/maybe}');
Expect(1, 772, '\p{NFKC_Quick_Check=maybe}', "");
Expect(0, 772, '\p{^NFKC_Quick_Check=maybe}', "");
Expect(0, 772, '\P{NFKC_Quick_Check=maybe}', "");
Expect(1, 772, '\P{^NFKC_Quick_Check=maybe}', "");
Expect(0, 767, '\p{NFKC_Quick_Check=maybe}', "");
Expect(1, 767, '\p{^NFKC_Quick_Check=maybe}', "");
Expect(1, 767, '\P{NFKC_Quick_Check=maybe}', "");
Expect(0, 767, '\P{^NFKC_Quick_Check=maybe}', "");
Expect(1, 772, '\p{NFKC_Quick_Check=__Maybe}', "");
Expect(0, 772, '\p{^NFKC_Quick_Check=__Maybe}', "");
Expect(0, 772, '\P{NFKC_Quick_Check=__Maybe}', "");
Expect(1, 772, '\P{^NFKC_Quick_Check=__Maybe}', "");
Expect(0, 767, '\p{NFKC_Quick_Check=__Maybe}', "");
Expect(1, 767, '\p{^NFKC_Quick_Check=__Maybe}', "");
Expect(1, 767, '\P{NFKC_Quick_Check=__Maybe}', "");
Expect(0, 767, '\P{^NFKC_Quick_Check=__Maybe}', "");
Error('\p{NFKC_QC:/a/		M}');
Error('\P{NFKC_QC:/a/		M}');
Expect(1, 772, '\p{NFKC_QC=m}', "");
Expect(0, 772, '\p{^NFKC_QC=m}', "");
Expect(0, 772, '\P{NFKC_QC=m}', "");
Expect(1, 772, '\P{^NFKC_QC=m}', "");
Expect(0, 767, '\p{NFKC_QC=m}', "");
Expect(1, 767, '\p{^NFKC_QC=m}', "");
Expect(1, 767, '\P{NFKC_QC=m}', "");
Expect(0, 767, '\P{^NFKC_QC=m}', "");
Expect(1, 772, '\p{NFKC_QC:   _M}', "");
Expect(0, 772, '\p{^NFKC_QC:   _M}', "");
Expect(0, 772, '\P{NFKC_QC:   _M}', "");
Expect(1, 772, '\P{^NFKC_QC:   _M}', "");
Expect(0, 767, '\p{NFKC_QC:   _M}', "");
Expect(1, 767, '\p{^NFKC_QC:   _M}', "");
Expect(1, 767, '\P{NFKC_QC:   _M}', "");
Expect(0, 767, '\P{^NFKC_QC:   _M}', "");
Error('\p{Is_NFKC_Quick_Check=-/a/MAYBE}');
Error('\P{Is_NFKC_Quick_Check=-/a/MAYBE}');
Expect(1, 772, '\p{Is_NFKC_Quick_Check=maybe}', "");
Expect(0, 772, '\p{^Is_NFKC_Quick_Check=maybe}', "");
Expect(0, 772, '\P{Is_NFKC_Quick_Check=maybe}', "");
Expect(1, 772, '\P{^Is_NFKC_Quick_Check=maybe}', "");
Expect(0, 767, '\p{Is_NFKC_Quick_Check=maybe}', "");
Expect(1, 767, '\p{^Is_NFKC_Quick_Check=maybe}', "");
Expect(1, 767, '\P{Is_NFKC_Quick_Check=maybe}', "");
Expect(0, 767, '\P{^Is_NFKC_Quick_Check=maybe}', "");
Expect(1, 772, '\p{Is_NFKC_Quick_Check= -Maybe}', "");
Expect(0, 772, '\p{^Is_NFKC_Quick_Check= -Maybe}', "");
Expect(0, 772, '\P{Is_NFKC_Quick_Check= -Maybe}', "");
Expect(1, 772, '\P{^Is_NFKC_Quick_Check= -Maybe}', "");
Expect(0, 767, '\p{Is_NFKC_Quick_Check= -Maybe}', "");
Expect(1, 767, '\p{^Is_NFKC_Quick_Check= -Maybe}', "");
Expect(1, 767, '\P{Is_NFKC_Quick_Check= -Maybe}', "");
Expect(0, 767, '\P{^Is_NFKC_Quick_Check= -Maybe}', "");
Error('\p{Is_NFKC_QC=	 M/a/}');
Error('\P{Is_NFKC_QC=	 M/a/}');
Expect(1, 772, '\p{Is_NFKC_QC=m}', "");
Expect(0, 772, '\p{^Is_NFKC_QC=m}', "");
Expect(0, 772, '\P{Is_NFKC_QC=m}', "");
Expect(1, 772, '\P{^Is_NFKC_QC=m}', "");
Expect(0, 767, '\p{Is_NFKC_QC=m}', "");
Expect(1, 767, '\p{^Is_NFKC_QC=m}', "");
Expect(1, 767, '\P{Is_NFKC_QC=m}', "");
Expect(0, 767, '\P{^Is_NFKC_QC=m}', "");
Expect(1, 772, '\p{Is_NFKC_QC=- M}', "");
Expect(0, 772, '\p{^Is_NFKC_QC=- M}', "");
Expect(0, 772, '\P{Is_NFKC_QC=- M}', "");
Expect(1, 772, '\P{^Is_NFKC_QC=- M}', "");
Expect(0, 767, '\p{Is_NFKC_QC=- M}', "");
Expect(1, 767, '\p{^Is_NFKC_QC=- M}', "");
Expect(1, 767, '\P{Is_NFKC_QC=- M}', "");
Expect(0, 767, '\P{^Is_NFKC_QC=- M}', "");
Error('\p{Jamo_Short_Name=}');
Error('\P{Jamo_Short_Name=}');
Error('\p{JSN=}');
Error('\P{JSN=}');
Error('\p{Is_Jamo_Short_Name=}');
Error('\P{Is_Jamo_Short_Name=}');
Error('\p{Is_JSN:}');
Error('\P{Is_JSN:}');
Error('\p{Jamo_Short_Name=S}');
Error('\P{Jamo_Short_Name=S}');
Error('\p{JSN:	S}');
Error('\P{JSN:	S}');
Error('\p{Is_Jamo_Short_Name: S}');
Error('\P{Is_Jamo_Short_Name: S}');
Error('\p{Is_JSN=S}');
Error('\P{Is_JSN=S}');
Error('\p{Jamo_Short_Name=GG}');
Error('\P{Jamo_Short_Name=GG}');
Error('\p{JSN=GG}');
Error('\P{JSN=GG}');
Error('\p{Is_Jamo_Short_Name=GG}');
Error('\P{Is_Jamo_Short_Name=GG}');
Error('\p{Is_JSN=GG}');
Error('\P{Is_JSN=GG}');
Error('\p{Jamo_Short_Name=YU}');
Error('\P{Jamo_Short_Name=YU}');
Error('\p{JSN=YU}');
Error('\P{JSN=YU}');
Error('\p{Is_Jamo_Short_Name=YU}');
Error('\P{Is_Jamo_Short_Name=YU}');
Error('\p{Is_JSN=YU}');
Error('\P{Is_JSN=YU}');
Error('\p{Jamo_Short_Name=WE}');
Error('\P{Jamo_Short_Name=WE}');
Error('\p{JSN=WE}');
Error('\P{JSN=WE}');
Error('\p{Is_Jamo_Short_Name=WE}');
Error('\P{Is_Jamo_Short_Name=WE}');
Error('\p{Is_JSN=WE}');
Error('\P{Is_JSN=WE}');
Error('\p{Jamo_Short_Name=LM}');
Error('\P{Jamo_Short_Name=LM}');
Error('\p{JSN=LM}');
Error('\P{JSN=LM}');
Error('\p{Is_Jamo_Short_Name=LM}');
Error('\P{Is_Jamo_Short_Name=LM}');
Error('\p{Is_JSN=LM}');
Error('\P{Is_JSN=LM}');
Error('\p{Jamo_Short_Name=K}');
Error('\P{Jamo_Short_Name=K}');
Error('\p{JSN=K}');
Error('\P{JSN=K}');
Error('\p{Is_Jamo_Short_Name=K}');
Error('\P{Is_Jamo_Short_Name=K}');
Error('\p{Is_JSN=K}');
Error('\P{Is_JSN=K}');
Error('\p{Jamo_Short_Name:   BB}');
Error('\P{Jamo_Short_Name:   BB}');
Error('\p{JSN=BB}');
Error('\P{JSN=BB}');
Error('\p{Is_Jamo_Short_Name=BB}');
Error('\P{Is_Jamo_Short_Name=BB}');
Error('\p{Is_JSN=BB}');
Error('\P{Is_JSN=BB}');
Error('\p{Jamo_Short_Name=D}');
Error('\P{Jamo_Short_Name=D}');
Error('\p{JSN: D}');
Error('\P{JSN: D}');
Error('\p{Is_Jamo_Short_Name=D}');
Error('\P{Is_Jamo_Short_Name=D}');
Error('\p{Is_JSN=D}');
Error('\P{Is_JSN=D}');
Error('\p{Jamo_Short_Name:   E}');
Error('\P{Jamo_Short_Name:   E}');
Error('\p{JSN=E}');
Error('\P{JSN=E}');
Error('\p{Is_Jamo_Short_Name=E}');
Error('\P{Is_Jamo_Short_Name=E}');
Error('\p{Is_JSN=E}');
Error('\P{Is_JSN=E}');
Error('\p{Jamo_Short_Name=JJ}');
Error('\P{Jamo_Short_Name=JJ}');
Error('\p{JSN=JJ}');
Error('\P{JSN=JJ}');
Error('\p{Is_Jamo_Short_Name=JJ}');
Error('\P{Is_Jamo_Short_Name=JJ}');
Error('\p{Is_JSN=JJ}');
Error('\P{Is_JSN=JJ}');
Error('\p{Jamo_Short_Name=G}');
Error('\P{Jamo_Short_Name=G}');
Error('\p{JSN:	G}');
Error('\P{JSN:	G}');
Error('\p{Is_Jamo_Short_Name=G}');
Error('\P{Is_Jamo_Short_Name=G}');
Error('\p{Is_JSN=G}');
Error('\P{Is_JSN=G}');
Error('\p{Jamo_Short_Name=YA}');
Error('\P{Jamo_Short_Name=YA}');
Error('\p{JSN=YA}');
Error('\P{JSN=YA}');
Error('\p{Is_Jamo_Short_Name=YA}');
Error('\P{Is_Jamo_Short_Name=YA}');
Error('\p{Is_JSN=YA}');
Error('\P{Is_JSN=YA}');
Error('\p{Jamo_Short_Name=SS}');
Error('\P{Jamo_Short_Name=SS}');
Error('\p{JSN=SS}');
Error('\P{JSN=SS}');
Error('\p{Is_Jamo_Short_Name=SS}');
Error('\P{Is_Jamo_Short_Name=SS}');
Error('\p{Is_JSN=SS}');
Error('\P{Is_JSN=SS}');
Error('\p{Jamo_Short_Name=LB}');
Error('\P{Jamo_Short_Name=LB}');
Error('\p{JSN=LB}');
Error('\P{JSN=LB}');
Error('\p{Is_Jamo_Short_Name:LB}');
Error('\P{Is_Jamo_Short_Name:LB}');
Error('\p{Is_JSN:   LB}');
Error('\P{Is_JSN:   LB}');
Error('\p{Jamo_Short_Name=J}');
Error('\P{Jamo_Short_Name=J}');
Error('\p{JSN=J}');
Error('\P{JSN=J}');
Error('\p{Is_Jamo_Short_Name=J}');
Error('\P{Is_Jamo_Short_Name=J}');
Error('\p{Is_JSN:	J}');
Error('\P{Is_JSN:	J}');
Error('\p{Jamo_Short_Name=NH}');
Error('\P{Jamo_Short_Name=NH}');
Error('\p{JSN=NH}');
Error('\P{JSN=NH}');
Error('\p{Is_Jamo_Short_Name=NH}');
Error('\P{Is_Jamo_Short_Name=NH}');
Error('\p{Is_JSN=NH}');
Error('\P{Is_JSN=NH}');
Error('\p{Jamo_Short_Name=YEO}');
Error('\P{Jamo_Short_Name=YEO}');
Error('\p{JSN=YEO}');
Error('\P{JSN=YEO}');
Error('\p{Is_Jamo_Short_Name=YEO}');
Error('\P{Is_Jamo_Short_Name=YEO}');
Error('\p{Is_JSN=YEO}');
Error('\P{Is_JSN=YEO}');
Error('\p{Jamo_Short_Name=LP}');
Error('\P{Jamo_Short_Name=LP}');
Error('\p{JSN=LP}');
Error('\P{JSN=LP}');
Error('\p{Is_Jamo_Short_Name=LP}');
Error('\P{Is_Jamo_Short_Name=LP}');
Error('\p{Is_JSN=LP}');
Error('\P{Is_JSN=LP}');
Error('\p{Jamo_Short_Name:   NJ}');
Error('\P{Jamo_Short_Name:   NJ}');
Error('\p{JSN: NJ}');
Error('\P{JSN: NJ}');
Error('\p{Is_Jamo_Short_Name=NJ}');
Error('\P{Is_Jamo_Short_Name=NJ}');
Error('\p{Is_JSN=NJ}');
Error('\P{Is_JSN=NJ}');
Error('\p{Jamo_Short_Name=B}');
Error('\P{Jamo_Short_Name=B}');
Error('\p{JSN=B}');
Error('\P{JSN=B}');
Error('\p{Is_Jamo_Short_Name:B}');
Error('\P{Is_Jamo_Short_Name:B}');
Error('\p{Is_JSN=B}');
Error('\P{Is_JSN=B}');
Error('\p{Jamo_Short_Name=WA}');
Error('\P{Jamo_Short_Name=WA}');
Error('\p{JSN: WA}');
Error('\P{JSN: WA}');
Error('\p{Is_Jamo_Short_Name=WA}');
Error('\P{Is_Jamo_Short_Name=WA}');
Error('\p{Is_JSN=WA}');
Error('\P{Is_JSN=WA}');
Error('\p{Jamo_Short_Name=LH}');
Error('\P{Jamo_Short_Name=LH}');
Error('\p{JSN=LH}');
Error('\P{JSN=LH}');
Error('\p{Is_Jamo_Short_Name=LH}');
Error('\P{Is_Jamo_Short_Name=LH}');
Error('\p{Is_JSN=LH}');
Error('\P{Is_JSN=LH}');
Error('\p{Jamo_Short_Name=YI}');
Error('\P{Jamo_Short_Name=YI}');
Error('\p{JSN=YI}');
Error('\P{JSN=YI}');
Error('\p{Is_Jamo_Short_Name=YI}');
Error('\P{Is_Jamo_Short_Name=YI}');
Error('\p{Is_JSN=YI}');
Error('\P{Is_JSN=YI}');
Error('\p{Jamo_Short_Name=WEO}');
Error('\P{Jamo_Short_Name=WEO}');
Error('\p{JSN=WEO}');
Error('\P{JSN=WEO}');
Error('\p{Is_Jamo_Short_Name=WEO}');
Error('\P{Is_Jamo_Short_Name=WEO}');
Error('\p{Is_JSN=WEO}');
Error('\P{Is_JSN=WEO}');
Error('\p{Jamo_Short_Name=LS}');
Error('\P{Jamo_Short_Name=LS}');
Error('\p{JSN=LS}');
Error('\P{JSN=LS}');
Error('\p{Is_Jamo_Short_Name=LS}');
Error('\P{Is_Jamo_Short_Name=LS}');
Error('\p{Is_JSN=LS}');
Error('\P{Is_JSN=LS}');
Error('\p{Jamo_Short_Name: BS}');
Error('\P{Jamo_Short_Name: BS}');
Error('\p{JSN=BS}');
Error('\P{JSN=BS}');
Error('\p{Is_Jamo_Short_Name=BS}');
Error('\P{Is_Jamo_Short_Name=BS}');
Error('\p{Is_JSN=BS}');
Error('\P{Is_JSN=BS}');
Error('\p{Jamo_Short_Name=YO}');
Error('\P{Jamo_Short_Name=YO}');
Error('\p{JSN=YO}');
Error('\P{JSN=YO}');
Error('\p{Is_Jamo_Short_Name=YO}');
Error('\P{Is_Jamo_Short_Name=YO}');
Error('\p{Is_JSN=YO}');
Error('\P{Is_JSN=YO}');
Error('\p{Jamo_Short_Name: OE}');
Error('\P{Jamo_Short_Name: OE}');
Error('\p{JSN=OE}');
Error('\P{JSN=OE}');
Error('\p{Is_Jamo_Short_Name=OE}');
Error('\P{Is_Jamo_Short_Name=OE}');
Error('\p{Is_JSN=OE}');
Error('\P{Is_JSN=OE}');
Error('\p{Jamo_Short_Name=M}');
Error('\P{Jamo_Short_Name=M}');
Error('\p{JSN=M}');
Error('\P{JSN=M}');
Error('\p{Is_Jamo_Short_Name=M}');
Error('\P{Is_Jamo_Short_Name=M}');
Error('\p{Is_JSN=M}');
Error('\P{Is_JSN=M}');
Error('\p{Jamo_Short_Name=EO}');
Error('\P{Jamo_Short_Name=EO}');
Error('\p{JSN:EO}');
Error('\P{JSN:EO}');
Error('\p{Is_Jamo_Short_Name=EO}');
Error('\P{Is_Jamo_Short_Name=EO}');
Error('\p{Is_JSN=EO}');
Error('\P{Is_JSN=EO}');
Error('\p{Jamo_Short_Name=C}');
Error('\P{Jamo_Short_Name=C}');
Error('\p{JSN=C}');
Error('\P{JSN=C}');
Error('\p{Is_Jamo_Short_Name=C}');
Error('\P{Is_Jamo_Short_Name=C}');
Error('\p{Is_JSN=C}');
Error('\P{Is_JSN=C}');
Error('\p{Jamo_Short_Name=WI}');
Error('\P{Jamo_Short_Name=WI}');
Error('\p{JSN=WI}');
Error('\P{JSN=WI}');
Error('\p{Is_Jamo_Short_Name=WI}');
Error('\P{Is_Jamo_Short_Name=WI}');
Error('\p{Is_JSN=WI}');
Error('\P{Is_JSN=WI}');
Error('\p{Jamo_Short_Name=EU}');
Error('\P{Jamo_Short_Name=EU}');
Error('\p{JSN=EU}');
Error('\P{JSN=EU}');
Error('\p{Is_Jamo_Short_Name=EU}');
Error('\P{Is_Jamo_Short_Name=EU}');
Error('\p{Is_JSN=EU}');
Error('\P{Is_JSN=EU}');
Error('\p{Jamo_Short_Name=LG}');
Error('\P{Jamo_Short_Name=LG}');
Error('\p{JSN=LG}');
Error('\P{JSN=LG}');
Error('\p{Is_Jamo_Short_Name=LG}');
Error('\P{Is_Jamo_Short_Name=LG}');
Error('\p{Is_JSN=LG}');
Error('\P{Is_JSN=LG}');
Error('\p{Jamo_Short_Name=L}');
Error('\P{Jamo_Short_Name=L}');
Error('\p{JSN=L}');
Error('\P{JSN=L}');
Error('\p{Is_Jamo_Short_Name=L}');
Error('\P{Is_Jamo_Short_Name=L}');
Error('\p{Is_JSN:	L}');
Error('\P{Is_JSN:	L}');
Error('\p{Jamo_Short_Name=P}');
Error('\P{Jamo_Short_Name=P}');
Error('\p{JSN=P}');
Error('\P{JSN=P}');
Error('\p{Is_Jamo_Short_Name:	P}');
Error('\P{Is_Jamo_Short_Name:	P}');
Error('\p{Is_JSN=P}');
Error('\P{Is_JSN=P}');
Error('\p{Jamo_Short_Name=DD}');
Error('\P{Jamo_Short_Name=DD}');
Error('\p{JSN=DD}');
Error('\P{JSN=DD}');
Error('\p{Is_Jamo_Short_Name: DD}');
Error('\P{Is_Jamo_Short_Name: DD}');
Error('\p{Is_JSN=DD}');
Error('\P{Is_JSN=DD}');
Error('\p{Jamo_Short_Name:   NG}');
Error('\P{Jamo_Short_Name:   NG}');
Error('\p{JSN=NG}');
Error('\P{JSN=NG}');
Error('\p{Is_Jamo_Short_Name=NG}');
Error('\P{Is_Jamo_Short_Name=NG}');
Error('\p{Is_JSN=NG}');
Error('\P{Is_JSN=NG}');
Error('\p{Jamo_Short_Name=AE}');
Error('\P{Jamo_Short_Name=AE}');
Error('\p{JSN=AE}');
Error('\P{JSN=AE}');
Error('\p{Is_Jamo_Short_Name=AE}');
Error('\P{Is_Jamo_Short_Name=AE}');
Error('\p{Is_JSN=AE}');
Error('\P{Is_JSN=AE}');
Error('\p{Jamo_Short_Name=T}');
Error('\P{Jamo_Short_Name=T}');
Error('\p{JSN=T}');
Error('\P{JSN=T}');
Error('\p{Is_Jamo_Short_Name=T}');
Error('\P{Is_Jamo_Short_Name=T}');
Error('\p{Is_JSN=T}');
Error('\P{Is_JSN=T}');
Error('\p{Jamo_Short_Name=A}');
Error('\P{Jamo_Short_Name=A}');
Error('\p{JSN=A}');
Error('\P{JSN=A}');
Error('\p{Is_Jamo_Short_Name=A}');
Error('\P{Is_Jamo_Short_Name=A}');
Error('\p{Is_JSN=A}');
Error('\P{Is_JSN=A}');
Error('\p{Jamo_Short_Name=N}');
Error('\P{Jamo_Short_Name=N}');
Error('\p{JSN=N}');
Error('\P{JSN=N}');
Error('\p{Is_Jamo_Short_Name=N}');
Error('\P{Is_Jamo_Short_Name=N}');
Error('\p{Is_JSN:	N}');
Error('\P{Is_JSN:	N}');
Error('\p{Jamo_Short_Name=YAE}');
Error('\P{Jamo_Short_Name=YAE}');
Error('\p{JSN=YAE}');
Error('\P{JSN=YAE}');
Error('\p{Is_Jamo_Short_Name=YAE}');
Error('\P{Is_Jamo_Short_Name=YAE}');
Error('\p{Is_JSN=YAE}');
Error('\P{Is_JSN=YAE}');
Error('\p{Jamo_Short_Name=U}');
Error('\P{Jamo_Short_Name=U}');
Error('\p{JSN=U}');
Error('\P{JSN=U}');
Error('\p{Is_Jamo_Short_Name=U}');
Error('\P{Is_Jamo_Short_Name=U}');
Error('\p{Is_JSN=U}');
Error('\P{Is_JSN=U}');
Error('\p{Jamo_Short_Name=WAE}');
Error('\P{Jamo_Short_Name=WAE}');
Error('\p{JSN=WAE}');
Error('\P{JSN=WAE}');
Error('\p{Is_Jamo_Short_Name=WAE}');
Error('\P{Is_Jamo_Short_Name=WAE}');
Error('\p{Is_JSN:	WAE}');
Error('\P{Is_JSN:	WAE}');
Error('\p{Jamo_Short_Name=GS}');
Error('\P{Jamo_Short_Name=GS}');
Error('\p{JSN=GS}');
Error('\P{JSN=GS}');
Error('\p{Is_Jamo_Short_Name=GS}');
Error('\P{Is_Jamo_Short_Name=GS}');
Error('\p{Is_JSN=GS}');
Error('\P{Is_JSN=GS}');
Error('\p{Jamo_Short_Name=H}');
Error('\P{Jamo_Short_Name=H}');
Error('\p{JSN=H}');
Error('\P{JSN=H}');
Error('\p{Is_Jamo_Short_Name=H}');
Error('\P{Is_Jamo_Short_Name=H}');
Error('\p{Is_JSN=H}');
Error('\P{Is_JSN=H}');
Error('\p{Jamo_Short_Name=LT}');
Error('\P{Jamo_Short_Name=LT}');
Error('\p{JSN=LT}');
Error('\P{JSN=LT}');
Error('\p{Is_Jamo_Short_Name=LT}');
Error('\P{Is_Jamo_Short_Name=LT}');
Error('\p{Is_JSN=LT}');
Error('\P{Is_JSN=LT}');
Error('\p{Jamo_Short_Name=YE}');
Error('\P{Jamo_Short_Name=YE}');
Error('\p{JSN=YE}');
Error('\P{JSN=YE}');
Error('\p{Is_Jamo_Short_Name=YE}');
Error('\P{Is_Jamo_Short_Name=YE}');
Error('\p{Is_JSN=YE}');
Error('\P{Is_JSN=YE}');
Error('\p{Jamo_Short_Name=I}');
Error('\P{Jamo_Short_Name=I}');
Error('\p{JSN=I}');
Error('\P{JSN=I}');
Error('\p{Is_Jamo_Short_Name=I}');
Error('\P{Is_Jamo_Short_Name=I}');
Error('\p{Is_JSN=I}');
Error('\P{Is_JSN=I}');
Error('\p{Jamo_Short_Name:   R}');
Error('\P{Jamo_Short_Name:   R}');
Error('\p{JSN=R}');
Error('\P{JSN=R}');
Error('\p{Is_Jamo_Short_Name=R}');
Error('\P{Is_Jamo_Short_Name=R}');
Error('\p{Is_JSN=R}');
Error('\P{Is_JSN=R}');
Error('\p{Jamo_Short_Name=O}');
Error('\P{Jamo_Short_Name=O}');
Error('\p{JSN=O}');
Error('\P{JSN=O}');
Error('\p{Is_Jamo_Short_Name=O}');
Error('\P{Is_Jamo_Short_Name=O}');
Error('\p{Is_JSN=O}');
Error('\P{Is_JSN=O}');
Error('\p{Age=	:=+00003.2}');
Error('\P{Age=	:=+00003.2}');
Expect(1, 544, '\p{Age:0_3.2}', "");
Expect(0, 544, '\p{^Age:0_3.2}', "");
Expect(0, 544, '\P{Age:0_3.2}', "");
Expect(1, 544, '\P{^Age:0_3.2}', "");
Expect(0, 543, '\p{Age:0_3.2}', "");
Expect(1, 543, '\p{^Age:0_3.2}', "");
Expect(1, 543, '\P{Age:0_3.2}', "");
Expect(0, 543, '\P{^Age:0_3.2}', "");
Error('\p{Is_Age=	/a/0_0 03.2}');
Error('\P{Is_Age=	/a/0_0 03.2}');
Expect(1, 544, '\p{Is_Age=+00003.2}', "");
Expect(0, 544, '\p{^Is_Age=+00003.2}', "");
Expect(0, 544, '\P{Is_Age=+00003.2}', "");
Expect(1, 544, '\P{^Is_Age=+00003.2}', "");
Expect(0, 543, '\p{Is_Age=+00003.2}', "");
Expect(1, 543, '\p{^Is_Age=+00003.2}', "");
Expect(1, 543, '\P{Is_Age=+00003.2}', "");
Expect(0, 543, '\P{^Is_Age=+00003.2}', "");
Error('\p{Age=0002.0/a/}');
Error('\P{Age=0002.0/a/}');
Expect(1, 1441, '\p{Age=+00_00_02.0}', "");
Expect(0, 1441, '\p{^Age=+00_00_02.0}', "");
Expect(0, 1441, '\P{Age=+00_00_02.0}', "");
Expect(1, 1441, '\P{^Age=+00_00_02.0}', "");
Expect(0, 1424, '\p{Age=+00_00_02.0}', "");
Expect(1, 1424, '\p{^Age=+00_00_02.0}', "");
Expect(1, 1424, '\P{Age=+00_00_02.0}', "");
Expect(0, 1424, '\P{^Age=+00_00_02.0}', "");
Error('\p{Is_Age=:=  0_0 0-0	0-00002.0}');
Error('\P{Is_Age=:=  0_0 0-0	0-00002.0}');
Expect(1, 1441, '\p{Is_Age=+0_0_0_0_0_002.0}', "");
Expect(0, 1441, '\p{^Is_Age=+0_0_0_0_0_002.0}', "");
Expect(0, 1441, '\P{Is_Age=+0_0_0_0_0_002.0}', "");
Expect(1, 1441, '\P{^Is_Age=+0_0_0_0_0_002.0}', "");
Expect(0, 1424, '\p{Is_Age=+0_0_0_0_0_002.0}', "");
Expect(1, 1424, '\p{^Is_Age=+0_0_0_0_0_002.0}', "");
Expect(1, 1424, '\P{Is_Age=+0_0_0_0_0_002.0}', "");
Expect(0, 1424, '\P{^Is_Age=+0_0_0_0_0_002.0}', "");
Error('\p{Age=_:=000_0001.1}');
Error('\P{Age=_:=000_0001.1}');
Expect(1, 501, '\p{Age=+000_1.1}', "");
Expect(0, 501, '\p{^Age=+000_1.1}', "");
Expect(0, 501, '\P{Age=+000_1.1}', "");
Expect(1, 501, '\P{^Age=+000_1.1}', "");
Expect(0, 505, '\p{Age=+000_1.1}', "");
Expect(1, 505, '\p{^Age=+000_1.1}', "");
Expect(1, 505, '\P{Age=+000_1.1}', "");
Expect(0, 505, '\P{^Age=+000_1.1}', "");
Error('\p{Is_Age= _00000001.1/a/}');
Error('\P{Is_Age= _00000001.1/a/}');
Expect(1, 501, '\p{Is_Age=0000000_1.1}', "");
Expect(0, 501, '\p{^Is_Age=0000000_1.1}', "");
Expect(0, 501, '\P{Is_Age=0000000_1.1}', "");
Expect(1, 501, '\P{^Is_Age=0000000_1.1}', "");
Expect(0, 505, '\p{Is_Age=0000000_1.1}', "");
Expect(1, 505, '\p{^Is_Age=0000000_1.1}', "");
Expect(1, 505, '\P{Is_Age=0000000_1.1}', "");
Expect(0, 505, '\P{^Is_Age=0000000_1.1}', "");
Error('\p{Age=	_+0_5.0:=}');
Error('\P{Age=	_+0_5.0:=}');
Expect(1, 591, '\p{Age=+00000000_5.0}', "");
Expect(0, 591, '\p{^Age=+00000000_5.0}', "");
Expect(0, 591, '\P{Age=+00000000_5.0}', "");
Expect(1, 591, '\P{^Age=+00000000_5.0}', "");
Expect(0, 577, '\p{Age=+00000000_5.0}', "");
Expect(1, 577, '\p{^Age=+00000000_5.0}', "");
Expect(1, 577, '\P{Age=+00000000_5.0}', "");
Expect(0, 577, '\P{^Age=+00000000_5.0}', "");
Error('\p{Is_Age=-005.0:=}');
Error('\P{Is_Age=-005.0:=}');
Expect(1, 591, '\p{Is_Age:	00000005.0}', "");
Expect(0, 591, '\p{^Is_Age:	00000005.0}', "");
Expect(0, 591, '\P{Is_Age:	00000005.0}', "");
Expect(1, 591, '\P{^Is_Age:	00000005.0}', "");
Expect(0, 577, '\p{Is_Age:	00000005.0}', "");
Expect(1, 577, '\p{^Is_Age:	00000005.0}', "");
Expect(1, 577, '\P{Is_Age:	00000005.0}', "");
Expect(0, 577, '\P{^Is_Age:	00000005.0}', "");
Error('\p{Age= -3.0/a/}');
Error('\P{Age= -3.0/a/}');
Expect(1, 505, '\p{Age=+0003.0}', "");
Expect(0, 505, '\p{^Age=+0003.0}', "");
Expect(0, 505, '\P{Age=+0003.0}', "");
Expect(1, 505, '\P{^Age=+0003.0}', "");
Expect(0, 501, '\p{Age=+0003.0}', "");
Expect(1, 501, '\p{^Age=+0003.0}', "");
Expect(1, 501, '\P{Age=+0003.0}', "");
Expect(0, 501, '\P{^Age=+0003.0}', "");
Error('\p{Is_Age=	_003.0/a/}');
Error('\P{Is_Age=	_003.0/a/}');
Expect(1, 505, '\p{Is_Age:   +00003.0}', "");
Expect(0, 505, '\p{^Is_Age:   +00003.0}', "");
Expect(0, 505, '\P{Is_Age:   +00003.0}', "");
Expect(1, 505, '\P{^Is_Age:   +00003.0}', "");
Expect(0, 501, '\p{Is_Age:   +00003.0}', "");
Expect(1, 501, '\p{^Is_Age:   +00003.0}', "");
Expect(1, 501, '\P{Is_Age:   +00003.0}', "");
Expect(0, 501, '\P{^Is_Age:   +00003.0}', "");
Error('\p{Age:/a/Unassigned}');
Error('\P{Age:/a/Unassigned}');
Expect(1, 889, '\p{Age=unassigned}', "");
Expect(0, 889, '\p{^Age=unassigned}', "");
Expect(0, 889, '\P{Age=unassigned}', "");
Expect(1, 889, '\P{^Age=unassigned}', "");
Expect(0, 887, '\p{Age=unassigned}', "");
Expect(1, 887, '\p{^Age=unassigned}', "");
Expect(1, 887, '\P{Age=unassigned}', "");
Expect(0, 887, '\P{^Age=unassigned}', "");
Expect(1, 889, '\p{Age=- Unassigned}', "");
Expect(0, 889, '\p{^Age=- Unassigned}', "");
Expect(0, 889, '\P{Age=- Unassigned}', "");
Expect(1, 889, '\P{^Age=- Unassigned}', "");
Expect(0, 887, '\p{Age=- Unassigned}', "");
Expect(1, 887, '\p{^Age=- Unassigned}', "");
Expect(1, 887, '\P{Age=- Unassigned}', "");
Expect(0, 887, '\P{^Age=- Unassigned}', "");
Error('\p{Is_Age=-/a/Unassigned}');
Error('\P{Is_Age=-/a/Unassigned}');
Expect(1, 889, '\p{Is_Age=unassigned}', "");
Expect(0, 889, '\p{^Is_Age=unassigned}', "");
Expect(0, 889, '\P{Is_Age=unassigned}', "");
Expect(1, 889, '\P{^Is_Age=unassigned}', "");
Expect(0, 887, '\p{Is_Age=unassigned}', "");
Expect(1, 887, '\p{^Is_Age=unassigned}', "");
Expect(1, 887, '\P{Is_Age=unassigned}', "");
Expect(0, 887, '\P{^Is_Age=unassigned}', "");
Expect(1, 889, '\p{Is_Age=Unassigned}', "");
Expect(0, 889, '\p{^Is_Age=Unassigned}', "");
Expect(0, 889, '\P{Is_Age=Unassigned}', "");
Expect(1, 889, '\P{^Is_Age=Unassigned}', "");
Expect(0, 887, '\p{Is_Age=Unassigned}', "");
Expect(1, 887, '\p{^Is_Age=Unassigned}', "");
Expect(1, 887, '\P{Is_Age=Unassigned}', "");
Expect(0, 887, '\P{^Is_Age=Unassigned}', "");
Error('\p{Age=_ +0_0 00:=0	05.1}');
Error('\P{Age=_ +0_0 00:=0	05.1}');
Expect(1, 883, '\p{Age=0005.1}', "");
Expect(0, 883, '\p{^Age=0005.1}', "");
Expect(0, 883, '\P{Age=0005.1}', "");
Expect(1, 883, '\P{^Age=0005.1}', "");
Expect(0, 879, '\p{Age=0005.1}', "");
Expect(1, 879, '\p{^Age=0005.1}', "");
Expect(1, 879, '\P{Age=0005.1}', "");
Expect(0, 879, '\P{^Age=0005.1}', "");
Error('\p{Is_Age=	_0000000005.1/a/}');
Error('\P{Is_Age=	_0000000005.1/a/}');
Expect(1, 883, '\p{Is_Age=005.1}', "");
Expect(0, 883, '\p{^Is_Age=005.1}', "");
Expect(0, 883, '\P{Is_Age=005.1}', "");
Expect(1, 883, '\P{^Is_Age=005.1}', "");
Expect(0, 879, '\p{Is_Age=005.1}', "");
Expect(1, 879, '\p{^Is_Age=005.1}', "");
Expect(1, 879, '\P{Is_Age=005.1}', "");
Expect(0, 879, '\P{^Is_Age=005.1}', "");
Error('\p{Age:   /a/-4.0}');
Error('\P{Age:   /a/-4.0}');
Expect(1, 545, '\p{Age=000_4.0}', "");
Expect(0, 545, '\p{^Age=000_4.0}', "");
Expect(0, 545, '\P{Age=000_4.0}', "");
Expect(1, 545, '\P{^Age=000_4.0}', "");
Expect(0, 544, '\p{Age=000_4.0}', "");
Expect(1, 544, '\p{^Age=000_4.0}', "");
Expect(1, 544, '\P{Age=000_4.0}', "");
Expect(0, 544, '\P{^Age=000_4.0}', "");
Error('\p{Is_Age=		0-00/a/00_00004.0}');
Error('\P{Is_Age=		0-00/a/00_00004.0}');
Expect(1, 545, '\p{Is_Age=+0_0_0_0_0_0_0_0_04.0}', "");
Expect(0, 545, '\p{^Is_Age=+0_0_0_0_0_0_0_0_04.0}', "");
Expect(0, 545, '\P{Is_Age=+0_0_0_0_0_0_0_0_04.0}', "");
Expect(1, 545, '\P{^Is_Age=+0_0_0_0_0_0_0_0_04.0}', "");
Expect(0, 544, '\p{Is_Age=+0_0_0_0_0_0_0_0_04.0}', "");
Expect(1, 544, '\p{^Is_Age=+0_0_0_0_0_0_0_0_04.0}', "");
Expect(1, 544, '\P{Is_Age=+0_0_0_0_0_0_0_0_04.0}', "");
Expect(0, 544, '\P{^Is_Age=+0_0_0_0_0_0_0_0_04.0}', "");
Error('\p{Age:_	+005.2/a/}');
Error('\P{Age:_	+005.2/a/}');
Expect(1, 1317, '\p{Age=000000005.2}', "");
Expect(0, 1317, '\p{^Age=000000005.2}', "");
Expect(0, 1317, '\P{Age=000000005.2}', "");
Expect(1, 1317, '\P{^Age=000000005.2}', "");
Expect(0, 1315, '\p{Age=000000005.2}', "");
Expect(1, 1315, '\p{^Age=000000005.2}', "");
Expect(1, 1315, '\P{Age=000000005.2}', "");
Expect(0, 1315, '\P{^Age=000000005.2}', "");
Error('\p{Is_Age=/a/  005.2}');
Error('\P{Is_Age=/a/  005.2}');
Expect(1, 1317, '\p{Is_Age=0000005.2}', "");
Expect(0, 1317, '\p{^Is_Age=0000005.2}', "");
Expect(0, 1317, '\P{Is_Age=0000005.2}', "");
Expect(1, 1317, '\P{^Is_Age=0000005.2}', "");
Expect(0, 1315, '\p{Is_Age=0000005.2}', "");
Expect(1, 1315, '\p{^Is_Age=0000005.2}', "");
Expect(1, 1315, '\P{Is_Age=0000005.2}', "");
Expect(0, 1315, '\P{^Is_Age=0000005.2}', "");
Error('\p{Age=:=_ +0 3.1}');
Error('\P{Age=:=_ +0 3.1}');
Expect(1, 1013, '\p{Age=+0000000003.1}', "");
Expect(0, 1013, '\p{^Age=+0000000003.1}', "");
Expect(0, 1013, '\P{Age=+0000000003.1}', "");
Expect(1, 1013, '\P{^Age=+0000000003.1}', "");
Expect(0, 1011, '\p{Age=+0000000003.1}', "");
Expect(1, 1011, '\p{^Age=+0000000003.1}', "");
Expect(1, 1011, '\P{Age=+0000000003.1}', "");
Expect(0, 1011, '\P{^Age=+0000000003.1}', "");
Error('\p{Is_Age:   _/a/03.1}');
Error('\P{Is_Age:   _/a/03.1}');
Expect(1, 1013, '\p{Is_Age=00000003.1}', "");
Expect(0, 1013, '\p{^Is_Age=00000003.1}', "");
Expect(0, 1013, '\P{Is_Age=00000003.1}', "");
Expect(1, 1013, '\P{^Is_Age=00000003.1}', "");
Expect(0, 1011, '\p{Is_Age=00000003.1}', "");
Expect(1, 1011, '\p{^Is_Age=00000003.1}', "");
Expect(1, 1011, '\P{Is_Age=00000003.1}', "");
Expect(0, 1011, '\P{^Is_Age=00000003.1}', "");
Error('\p{Age=	000002.1:=}');
Error('\P{Age=	000002.1:=}');
Expect(1, 8364, '\p{Age:00_00_00_00_2.1}', "");
Expect(0, 8364, '\p{^Age:00_00_00_00_2.1}', "");
Expect(0, 8364, '\P{Age:00_00_00_00_2.1}', "");
Expect(1, 8364, '\P{^Age:00_00_00_00_2.1}', "");
Expect(0, 8363, '\p{Age:00_00_00_00_2.1}', "");
Expect(1, 8363, '\p{^Age:00_00_00_00_2.1}', "");
Expect(1, 8363, '\P{Age:00_00_00_00_2.1}', "");
Expect(0, 8363, '\P{^Age:00_00_00_00_2.1}', "");
Error('\p{Is_Age=	_+0	00:=02.1}');
Error('\P{Is_Age=	_+0	00:=02.1}');
Expect(1, 8364, '\p{Is_Age=+000002.1}', "");
Expect(0, 8364, '\p{^Is_Age=+000002.1}', "");
Expect(0, 8364, '\P{Is_Age=+000002.1}', "");
Expect(1, 8364, '\P{^Is_Age=+000002.1}', "");
Expect(0, 8363, '\p{Is_Age=+000002.1}', "");
Expect(1, 8363, '\p{^Is_Age=+000002.1}', "");
Expect(1, 8363, '\P{Is_Age=+000002.1}', "");
Expect(0, 8363, '\P{^Is_Age=+000002.1}', "");
Error('\p{Age:    _00000004.1:=}');
Error('\P{Age:    _00000004.1:=}');
Expect(1, 577, '\p{Age=+0_4.1}', "");
Expect(0, 577, '\p{^Age=+0_4.1}', "");
Expect(0, 577, '\P{Age=+0_4.1}', "");
Expect(1, 577, '\P{^Age=+0_4.1}', "");
Expect(0, 566, '\p{Age=+0_4.1}', "");
Expect(1, 566, '\p{^Age=+0_4.1}', "");
Expect(1, 566, '\P{Age=+0_4.1}', "");
Expect(0, 566, '\P{^Age=+0_4.1}', "");
Error('\p{Is_Age=_ 0	0:=0_00_04.1}');
Error('\P{Is_Age=_ 0	0:=0_00_04.1}');
Expect(1, 577, '\p{Is_Age=00_00_00_00_4.1}', "");
Expect(0, 577, '\p{^Is_Age=00_00_00_00_4.1}', "");
Expect(0, 577, '\P{Is_Age=00_00_00_00_4.1}', "");
Expect(1, 577, '\P{^Is_Age=00_00_00_00_4.1}', "");
Expect(0, 566, '\p{Is_Age=00_00_00_00_4.1}', "");
Expect(1, 566, '\p{^Is_Age=00_00_00_00_4.1}', "");
Expect(1, 566, '\P{Is_Age=00_00_00_00_4.1}', "");
Expect(0, 566, '\P{^Is_Age=00_00_00_00_4.1}', "");
Error('\p{Expands_On_NFKD=Yes}');
Error('\P{Expands_On_NFKD=Yes}');
Error('\p{XO_NFKD=Y}');
Error('\P{XO_NFKD=Y}');
Error('\p{Is_Expands_On_NFKD=T}');
Error('\P{Is_Expands_On_NFKD=T}');
Error('\p{Is_XO_NFKD=True}');
Error('\P{Is_XO_NFKD=True}');
Error('\p{Expands_On_NFKD=No}');
Error('\P{Expands_On_NFKD=No}');
Error('\p{XO_NFKD=N}');
Error('\P{XO_NFKD=N}');
Error('\p{Is_Expands_On_NFKD=F}');
Error('\P{Is_Expands_On_NFKD=F}');
Error('\p{Is_XO_NFKD=False}');
Error('\P{Is_XO_NFKD=False}');
Error('\p{Grapheme_Cluster_Break=:= _SpacingMark}');
Error('\P{Grapheme_Cluster_Break=:= _SpacingMark}');
Expect(1, 2307, '\p{Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2307, '\p{^Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2307, '\P{Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2307, '\P{^Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2306, '\p{Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2306, '\p{^Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2306, '\P{Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2306, '\P{^Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2307, '\p{Grapheme_Cluster_Break: -_SPACINGMARK}', "");
Expect(0, 2307, '\p{^Grapheme_Cluster_Break: -_SPACINGMARK}', "");
Expect(0, 2307, '\P{Grapheme_Cluster_Break: -_SPACINGMARK}', "");
Expect(1, 2307, '\P{^Grapheme_Cluster_Break: -_SPACINGMARK}', "");
Expect(0, 2306, '\p{Grapheme_Cluster_Break: -_SPACINGMARK}', "");
Expect(1, 2306, '\p{^Grapheme_Cluster_Break: -_SPACINGMARK}', "");
Expect(1, 2306, '\P{Grapheme_Cluster_Break: -_SPACINGMARK}', "");
Expect(0, 2306, '\P{^Grapheme_Cluster_Break: -_SPACINGMARK}', "");
Error('\p{GCB=-sm:=}');
Error('\P{GCB=-sm:=}');
Expect(1, 2307, '\p{GCB: sm}', "");
Expect(0, 2307, '\p{^GCB: sm}', "");
Expect(0, 2307, '\P{GCB: sm}', "");
Expect(1, 2307, '\P{^GCB: sm}', "");
Expect(0, 2306, '\p{GCB: sm}', "");
Expect(1, 2306, '\p{^GCB: sm}', "");
Expect(1, 2306, '\P{GCB: sm}', "");
Expect(0, 2306, '\P{^GCB: sm}', "");
Expect(1, 2307, '\p{GCB=- sm}', "");
Expect(0, 2307, '\p{^GCB=- sm}', "");
Expect(0, 2307, '\P{GCB=- sm}', "");
Expect(1, 2307, '\P{^GCB=- sm}', "");
Expect(0, 2306, '\p{GCB=- sm}', "");
Expect(1, 2306, '\p{^GCB=- sm}', "");
Expect(1, 2306, '\P{GCB=- sm}', "");
Expect(0, 2306, '\P{^GCB=- sm}', "");
Error('\p{Is_Grapheme_Cluster_Break=:=- SPACINGMARK}');
Error('\P{Is_Grapheme_Cluster_Break=:=- SPACINGMARK}');
Expect(1, 2307, '\p{Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2307, '\p{^Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2307, '\P{Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2307, '\P{^Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2306, '\p{Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2306, '\p{^Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2306, '\P{Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(0, 2306, '\P{^Is_Grapheme_Cluster_Break=spacingmark}', "");
Expect(1, 2307, '\p{Is_Grapheme_Cluster_Break=_-spacingmark}', "");
Expect(0, 2307, '\p{^Is_Grapheme_Cluster_Break=_-spacingmark}', "");
Expect(0, 2307, '\P{Is_Grapheme_Cluster_Break=_-spacingmark}', "");
Expect(1, 2307, '\P{^Is_Grapheme_Cluster_Break=_-spacingmark}', "");
Expect(0, 2306, '\p{Is_Grapheme_Cluster_Break=_-spacingmark}', "");
Expect(1, 2306, '\p{^Is_Grapheme_Cluster_Break=_-spacingmark}', "");
Expect(1, 2306, '\P{Is_Grapheme_Cluster_Break=_-spacingmark}', "");
Expect(0, 2306, '\P{^Is_Grapheme_Cluster_Break=_-spacingmark}', "");
Error('\p{Is_GCB=_/a/sm}');
Error('\P{Is_GCB=_/a/sm}');
Expect(1, 2307, '\p{Is_GCB=sm}', "");
Expect(0, 2307, '\p{^Is_GCB=sm}', "");
Expect(0, 2307, '\P{Is_GCB=sm}', "");
Expect(1, 2307, '\P{^Is_GCB=sm}', "");
Expect(0, 2306, '\p{Is_GCB=sm}', "");
Expect(1, 2306, '\p{^Is_GCB=sm}', "");
Expect(1, 2306, '\P{Is_GCB=sm}', "");
Expect(0, 2306, '\P{^Is_GCB=sm}', "");
Expect(1, 2307, '\p{Is_GCB=- SM}', "");
Expect(0, 2307, '\p{^Is_GCB=- SM}', "");
Expect(0, 2307, '\P{Is_GCB=- SM}', "");
Expect(1, 2307, '\P{^Is_GCB=- SM}', "");
Expect(0, 2306, '\p{Is_GCB=- SM}', "");
Expect(1, 2306, '\p{^Is_GCB=- SM}', "");
Expect(1, 2306, '\P{Is_GCB=- SM}', "");
Expect(0, 2306, '\P{^Is_GCB=- SM}', "");
Error('\p{Grapheme_Cluster_Break=/a/- T}');
Error('\P{Grapheme_Cluster_Break=/a/- T}');
Expect(1, 4607, '\p{Grapheme_Cluster_Break: t}', "");
Expect(0, 4607, '\p{^Grapheme_Cluster_Break: t}', "");
Expect(0, 4607, '\P{Grapheme_Cluster_Break: t}', "");
Expect(1, 4607, '\P{^Grapheme_Cluster_Break: t}', "");
Expect(0, 4519, '\p{Grapheme_Cluster_Break: t}', "");
Expect(1, 4519, '\p{^Grapheme_Cluster_Break: t}', "");
Expect(1, 4519, '\P{Grapheme_Cluster_Break: t}', "");
Expect(0, 4519, '\P{^Grapheme_Cluster_Break: t}', "");
Expect(1, 4607, '\p{Grapheme_Cluster_Break=	_T}', "");
Expect(0, 4607, '\p{^Grapheme_Cluster_Break=	_T}', "");
Expect(0, 4607, '\P{Grapheme_Cluster_Break=	_T}', "");
Expect(1, 4607, '\P{^Grapheme_Cluster_Break=	_T}', "");
Expect(0, 4519, '\p{Grapheme_Cluster_Break=	_T}', "");
Expect(1, 4519, '\p{^Grapheme_Cluster_Break=	_T}', "");
Expect(1, 4519, '\P{Grapheme_Cluster_Break=	_T}', "");
Expect(0, 4519, '\P{^Grapheme_Cluster_Break=	_T}', "");
Error('\p{GCB=	-T:=}');
Error('\P{GCB=	-T:=}');
Expect(1, 4607, '\p{GCB=t}', "");
Expect(0, 4607, '\p{^GCB=t}', "");
Expect(0, 4607, '\P{GCB=t}', "");
Expect(1, 4607, '\P{^GCB=t}', "");
Expect(0, 4519, '\p{GCB=t}', "");
Expect(1, 4519, '\p{^GCB=t}', "");
Expect(1, 4519, '\P{GCB=t}', "");
Expect(0, 4519, '\P{^GCB=t}', "");
Expect(1, 4607, '\p{GCB=- T}', "");
Expect(0, 4607, '\p{^GCB=- T}', "");
Expect(0, 4607, '\P{GCB=- T}', "");
Expect(1, 4607, '\P{^GCB=- T}', "");
Expect(0, 4519, '\p{GCB=- T}', "");
Expect(1, 4519, '\p{^GCB=- T}', "");
Expect(1, 4519, '\P{GCB=- T}', "");
Expect(0, 4519, '\P{^GCB=- T}', "");
Error('\p{Is_Grapheme_Cluster_Break: /a/-	t}');
Error('\P{Is_Grapheme_Cluster_Break: /a/-	t}');
Expect(1, 4607, '\p{Is_Grapheme_Cluster_Break=t}', "");
Expect(0, 4607, '\p{^Is_Grapheme_Cluster_Break=t}', "");
Expect(0, 4607, '\P{Is_Grapheme_Cluster_Break=t}', "");
Expect(1, 4607, '\P{^Is_Grapheme_Cluster_Break=t}', "");
Expect(0, 4519, '\p{Is_Grapheme_Cluster_Break=t}', "");
Expect(1, 4519, '\p{^Is_Grapheme_Cluster_Break=t}', "");
Expect(1, 4519, '\P{Is_Grapheme_Cluster_Break=t}', "");
Expect(0, 4519, '\P{^Is_Grapheme_Cluster_Break=t}', "");
Expect(1, 4607, '\p{Is_Grapheme_Cluster_Break= 	T}', "");
Expect(0, 4607, '\p{^Is_Grapheme_Cluster_Break= 	T}', "");
Expect(0, 4607, '\P{Is_Grapheme_Cluster_Break= 	T}', "");
Expect(1, 4607, '\P{^Is_Grapheme_Cluster_Break= 	T}', "");
Expect(0, 4519, '\p{Is_Grapheme_Cluster_Break= 	T}', "");
Expect(1, 4519, '\p{^Is_Grapheme_Cluster_Break= 	T}', "");
Expect(1, 4519, '\P{Is_Grapheme_Cluster_Break= 	T}', "");
Expect(0, 4519, '\P{^Is_Grapheme_Cluster_Break= 	T}', "");
Error('\p{Is_GCB=/a/- T}');
Error('\P{Is_GCB=/a/- T}');
Expect(1, 4607, '\p{Is_GCB:t}', "");
Expect(0, 4607, '\p{^Is_GCB:t}', "");
Expect(0, 4607, '\P{Is_GCB:t}', "");
Expect(1, 4607, '\P{^Is_GCB:t}', "");
Expect(0, 4519, '\p{Is_GCB:t}', "");
Expect(1, 4519, '\p{^Is_GCB:t}', "");
Expect(1, 4519, '\P{Is_GCB:t}', "");
Expect(0, 4519, '\P{^Is_GCB:t}', "");
Expect(1, 4607, '\p{Is_GCB=		T}', "");
Expect(0, 4607, '\p{^Is_GCB=		T}', "");
Expect(0, 4607, '\P{Is_GCB=		T}', "");
Expect(1, 4607, '\P{^Is_GCB=		T}', "");
Expect(0, 4519, '\p{Is_GCB=		T}', "");
Expect(1, 4519, '\p{^Is_GCB=		T}', "");
Expect(1, 4519, '\P{Is_GCB=		T}', "");
Expect(0, 4519, '\P{^Is_GCB=		T}', "");
Error('\p{Grapheme_Cluster_Break=-:=LVT}');
Error('\P{Grapheme_Cluster_Break=-:=LVT}');
Expect(1, 44059, '\p{Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44059, '\p{^Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44059, '\P{Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44059, '\P{^Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44032, '\p{Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44032, '\p{^Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44032, '\P{Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44032, '\P{^Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44059, '\p{Grapheme_Cluster_Break= lvt}', "");
Expect(0, 44059, '\p{^Grapheme_Cluster_Break= lvt}', "");
Expect(0, 44059, '\P{Grapheme_Cluster_Break= lvt}', "");
Expect(1, 44059, '\P{^Grapheme_Cluster_Break= lvt}', "");
Expect(0, 44032, '\p{Grapheme_Cluster_Break= lvt}', "");
Expect(1, 44032, '\p{^Grapheme_Cluster_Break= lvt}', "");
Expect(1, 44032, '\P{Grapheme_Cluster_Break= lvt}', "");
Expect(0, 44032, '\P{^Grapheme_Cluster_Break= lvt}', "");
Error('\p{GCB=_	LVT/a/}');
Error('\P{GCB=_	LVT/a/}');
Expect(1, 44059, '\p{GCB=lvt}', "");
Expect(0, 44059, '\p{^GCB=lvt}', "");
Expect(0, 44059, '\P{GCB=lvt}', "");
Expect(1, 44059, '\P{^GCB=lvt}', "");
Expect(0, 44032, '\p{GCB=lvt}', "");
Expect(1, 44032, '\p{^GCB=lvt}', "");
Expect(1, 44032, '\P{GCB=lvt}', "");
Expect(0, 44032, '\P{^GCB=lvt}', "");
Expect(1, 44059, '\p{GCB=	LVT}', "");
Expect(0, 44059, '\p{^GCB=	LVT}', "");
Expect(0, 44059, '\P{GCB=	LVT}', "");
Expect(1, 44059, '\P{^GCB=	LVT}', "");
Expect(0, 44032, '\p{GCB=	LVT}', "");
Expect(1, 44032, '\p{^GCB=	LVT}', "");
Expect(1, 44032, '\P{GCB=	LVT}', "");
Expect(0, 44032, '\P{^GCB=	LVT}', "");
Error('\p{Is_Grapheme_Cluster_Break:--LVT:=}');
Error('\P{Is_Grapheme_Cluster_Break:--LVT:=}');
Expect(1, 44059, '\p{Is_Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44059, '\p{^Is_Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44059, '\P{Is_Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44059, '\P{^Is_Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44032, '\p{Is_Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44032, '\p{^Is_Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44032, '\P{Is_Grapheme_Cluster_Break=lvt}', "");
Expect(0, 44032, '\P{^Is_Grapheme_Cluster_Break=lvt}', "");
Expect(1, 44059, '\p{Is_Grapheme_Cluster_Break= LVT}', "");
Expect(0, 44059, '\p{^Is_Grapheme_Cluster_Break= LVT}', "");
Expect(0, 44059, '\P{Is_Grapheme_Cluster_Break= LVT}', "");
Expect(1, 44059, '\P{^Is_Grapheme_Cluster_Break= LVT}', "");
Expect(0, 44032, '\p{Is_Grapheme_Cluster_Break= LVT}', "");
Expect(1, 44032, '\p{^Is_Grapheme_Cluster_Break= LVT}', "");
Expect(1, 44032, '\P{Is_Grapheme_Cluster_Break= LVT}', "");
Expect(0, 44032, '\P{^Is_Grapheme_Cluster_Break= LVT}', "");
Error('\p{Is_GCB=/a/LVT}');
Error('\P{Is_GCB=/a/LVT}');
Expect(1, 44059, '\p{Is_GCB:lvt}', "");
Expect(0, 44059, '\p{^Is_GCB:lvt}', "");
Expect(0, 44059, '\P{Is_GCB:lvt}', "");
Expect(1, 44059, '\P{^Is_GCB:lvt}', "");
Expect(0, 44032, '\p{Is_GCB:lvt}', "");
Expect(1, 44032, '\p{^Is_GCB:lvt}', "");
Expect(1, 44032, '\P{Is_GCB:lvt}', "");
Expect(0, 44032, '\P{^Is_GCB:lvt}', "");
Expect(1, 44059, '\p{Is_GCB=  lvt}', "");
Expect(0, 44059, '\p{^Is_GCB=  lvt}', "");
Expect(0, 44059, '\P{Is_GCB=  lvt}', "");
Expect(1, 44059, '\P{^Is_GCB=  lvt}', "");
Expect(0, 44032, '\p{Is_GCB=  lvt}', "");
Expect(1, 44032, '\p{^Is_GCB=  lvt}', "");
Expect(1, 44032, '\P{Is_GCB=  lvt}', "");
Expect(0, 44032, '\P{^Is_GCB=  lvt}', "");
Error('\p{Grapheme_Cluster_Break=/a/Control}');
Error('\P{Grapheme_Cluster_Break=/a/Control}');
Expect(1, 9, '\p{Grapheme_Cluster_Break=control}', "");
Expect(0, 9, '\p{^Grapheme_Cluster_Break=control}', "");
Expect(0, 9, '\P{Grapheme_Cluster_Break=control}', "");
Expect(1, 9, '\P{^Grapheme_Cluster_Break=control}', "");
Expect(0, 10, '\p{Grapheme_Cluster_Break=control}', "");
Expect(1, 10, '\p{^Grapheme_Cluster_Break=control}', "");
Expect(1, 10, '\P{Grapheme_Cluster_Break=control}', "");
Expect(0, 10, '\P{^Grapheme_Cluster_Break=control}', "");
Expect(1, 9, '\p{Grapheme_Cluster_Break=_	control}', "");
Expect(0, 9, '\p{^Grapheme_Cluster_Break=_	control}', "");
Expect(0, 9, '\P{Grapheme_Cluster_Break=_	control}', "");
Expect(1, 9, '\P{^Grapheme_Cluster_Break=_	control}', "");
Expect(0, 10, '\p{Grapheme_Cluster_Break=_	control}', "");
Expect(1, 10, '\p{^Grapheme_Cluster_Break=_	control}', "");
Expect(1, 10, '\P{Grapheme_Cluster_Break=_	control}', "");
Expect(0, 10, '\P{^Grapheme_Cluster_Break=_	control}', "");
Error('\p{GCB: 	CN/a/}');
Error('\P{GCB: 	CN/a/}');
Expect(1, 9, '\p{GCB=cn}', "");
Expect(0, 9, '\p{^GCB=cn}', "");
Expect(0, 9, '\P{GCB=cn}', "");
Expect(1, 9, '\P{^GCB=cn}', "");
Expect(0, 10, '\p{GCB=cn}', "");
Expect(1, 10, '\p{^GCB=cn}', "");
Expect(1, 10, '\P{GCB=cn}', "");
Expect(0, 10, '\P{^GCB=cn}', "");
Expect(1, 9, '\p{GCB=_CN}', "");
Expect(0, 9, '\p{^GCB=_CN}', "");
Expect(0, 9, '\P{GCB=_CN}', "");
Expect(1, 9, '\P{^GCB=_CN}', "");
Expect(0, 10, '\p{GCB=_CN}', "");
Expect(1, 10, '\p{^GCB=_CN}', "");
Expect(1, 10, '\P{GCB=_CN}', "");
Expect(0, 10, '\P{^GCB=_CN}', "");
Error('\p{Is_Grapheme_Cluster_Break=/a/_Control}');
Error('\P{Is_Grapheme_Cluster_Break=/a/_Control}');
Expect(1, 9, '\p{Is_Grapheme_Cluster_Break=control}', "");
Expect(0, 9, '\p{^Is_Grapheme_Cluster_Break=control}', "");
Expect(0, 9, '\P{Is_Grapheme_Cluster_Break=control}', "");
Expect(1, 9, '\P{^Is_Grapheme_Cluster_Break=control}', "");
Expect(0, 10, '\p{Is_Grapheme_Cluster_Break=control}', "");
Expect(1, 10, '\p{^Is_Grapheme_Cluster_Break=control}', "");
Expect(1, 10, '\P{Is_Grapheme_Cluster_Break=control}', "");
Expect(0, 10, '\P{^Is_Grapheme_Cluster_Break=control}', "");
Expect(1, 9, '\p{Is_Grapheme_Cluster_Break= control}', "");
Expect(0, 9, '\p{^Is_Grapheme_Cluster_Break= control}', "");
Expect(0, 9, '\P{Is_Grapheme_Cluster_Break= control}', "");
Expect(1, 9, '\P{^Is_Grapheme_Cluster_Break= control}', "");
Expect(0, 10, '\p{Is_Grapheme_Cluster_Break= control}', "");
Expect(1, 10, '\p{^Is_Grapheme_Cluster_Break= control}', "");
Expect(1, 10, '\P{Is_Grapheme_Cluster_Break= control}', "");
Expect(0, 10, '\P{^Is_Grapheme_Cluster_Break= control}', "");
Error('\p{Is_GCB:   	/a/cn}');
Error('\P{Is_GCB:   	/a/cn}');
Expect(1, 9, '\p{Is_GCB=cn}', "");
Expect(0, 9, '\p{^Is_GCB=cn}', "");
Expect(0, 9, '\P{Is_GCB=cn}', "");
Expect(1, 9, '\P{^Is_GCB=cn}', "");
Expect(0, 10, '\p{Is_GCB=cn}', "");
Expect(1, 10, '\p{^Is_GCB=cn}', "");
Expect(1, 10, '\P{Is_GCB=cn}', "");
Expect(0, 10, '\P{^Is_GCB=cn}', "");
Expect(1, 9, '\p{Is_GCB=--CN}', "");
Expect(0, 9, '\p{^Is_GCB=--CN}', "");
Expect(0, 9, '\P{Is_GCB=--CN}', "");
Expect(1, 9, '\P{^Is_GCB=--CN}', "");
Expect(0, 10, '\p{Is_GCB=--CN}', "");
Expect(1, 10, '\p{^Is_GCB=--CN}', "");
Expect(1, 10, '\P{Is_GCB=--CN}', "");
Expect(0, 10, '\P{^Is_GCB=--CN}', "");
Error('\p{Grapheme_Cluster_Break=Prepend/a/}');
Error('\P{Grapheme_Cluster_Break=Prepend/a/}');
Expect(1, 3652, '\p{Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3652, '\p{^Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3652, '\P{Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3652, '\P{^Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3647, '\p{Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3647, '\p{^Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3647, '\P{Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3647, '\P{^Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3652, '\p{Grapheme_Cluster_Break=--Prepend}', "");
Expect(0, 3652, '\p{^Grapheme_Cluster_Break=--Prepend}', "");
Expect(0, 3652, '\P{Grapheme_Cluster_Break=--Prepend}', "");
Expect(1, 3652, '\P{^Grapheme_Cluster_Break=--Prepend}', "");
Expect(0, 3647, '\p{Grapheme_Cluster_Break=--Prepend}', "");
Expect(1, 3647, '\p{^Grapheme_Cluster_Break=--Prepend}', "");
Expect(1, 3647, '\P{Grapheme_Cluster_Break=--Prepend}', "");
Expect(0, 3647, '\P{^Grapheme_Cluster_Break=--Prepend}', "");
Error('\p{GCB:		/a/PP}');
Error('\P{GCB:		/a/PP}');
Expect(1, 3652, '\p{GCB=pp}', "");
Expect(0, 3652, '\p{^GCB=pp}', "");
Expect(0, 3652, '\P{GCB=pp}', "");
Expect(1, 3652, '\P{^GCB=pp}', "");
Expect(0, 3647, '\p{GCB=pp}', "");
Expect(1, 3647, '\p{^GCB=pp}', "");
Expect(1, 3647, '\P{GCB=pp}', "");
Expect(0, 3647, '\P{^GCB=pp}', "");
Expect(1, 3652, '\p{GCB=- PP}', "");
Expect(0, 3652, '\p{^GCB=- PP}', "");
Expect(0, 3652, '\P{GCB=- PP}', "");
Expect(1, 3652, '\P{^GCB=- PP}', "");
Expect(0, 3647, '\p{GCB=- PP}', "");
Expect(1, 3647, '\p{^GCB=- PP}', "");
Expect(1, 3647, '\P{GCB=- PP}', "");
Expect(0, 3647, '\P{^GCB=- PP}', "");
Error('\p{Is_Grapheme_Cluster_Break=/a/  Prepend}');
Error('\P{Is_Grapheme_Cluster_Break=/a/  Prepend}');
Expect(1, 3652, '\p{Is_Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3652, '\p{^Is_Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3652, '\P{Is_Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3652, '\P{^Is_Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3647, '\p{Is_Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3647, '\p{^Is_Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3647, '\P{Is_Grapheme_Cluster_Break=prepend}', "");
Expect(0, 3647, '\P{^Is_Grapheme_Cluster_Break=prepend}', "");
Expect(1, 3652, '\p{Is_Grapheme_Cluster_Break=-_PREPEND}', "");
Expect(0, 3652, '\p{^Is_Grapheme_Cluster_Break=-_PREPEND}', "");
Expect(0, 3652, '\P{Is_Grapheme_Cluster_Break=-_PREPEND}', "");
Expect(1, 3652, '\P{^Is_Grapheme_Cluster_Break=-_PREPEND}', "");
Expect(0, 3647, '\p{Is_Grapheme_Cluster_Break=-_PREPEND}', "");
Expect(1, 3647, '\p{^Is_Grapheme_Cluster_Break=-_PREPEND}', "");
Expect(1, 3647, '\P{Is_Grapheme_Cluster_Break=-_PREPEND}', "");
Expect(0, 3647, '\P{^Is_Grapheme_Cluster_Break=-_PREPEND}', "");
Error('\p{Is_GCB=PP:=}');
Error('\P{Is_GCB=PP:=}');
Expect(1, 3652, '\p{Is_GCB=pp}', "");
Expect(0, 3652, '\p{^Is_GCB=pp}', "");
Expect(0, 3652, '\P{Is_GCB=pp}', "");
Expect(1, 3652, '\P{^Is_GCB=pp}', "");
Expect(0, 3647, '\p{Is_GCB=pp}', "");
Expect(1, 3647, '\p{^Is_GCB=pp}', "");
Expect(1, 3647, '\P{Is_GCB=pp}', "");
Expect(0, 3647, '\P{^Is_GCB=pp}', "");
Expect(1, 3652, '\p{Is_GCB= 	PP}', "");
Expect(0, 3652, '\p{^Is_GCB= 	PP}', "");
Expect(0, 3652, '\P{Is_GCB= 	PP}', "");
Expect(1, 3652, '\P{^Is_GCB= 	PP}', "");
Expect(0, 3647, '\p{Is_GCB= 	PP}', "");
Expect(1, 3647, '\p{^Is_GCB= 	PP}', "");
Expect(1, 3647, '\P{Is_GCB= 	PP}', "");
Expect(0, 3647, '\P{^Is_GCB= 	PP}', "");
Error('\p{Grapheme_Cluster_Break= -LV:=}');
Error('\P{Grapheme_Cluster_Break= -LV:=}');
Expect(1, 44032, '\p{Grapheme_Cluster_Break=lv}', "");
Expect(0, 44032, '\p{^Grapheme_Cluster_Break=lv}', "");
Expect(0, 44032, '\P{Grapheme_Cluster_Break=lv}', "");
Expect(1, 44032, '\P{^Grapheme_Cluster_Break=lv}', "");
Expect(0, 44031, '\p{Grapheme_Cluster_Break=lv}', "");
Expect(1, 44031, '\p{^Grapheme_Cluster_Break=lv}', "");
Expect(1, 44031, '\P{Grapheme_Cluster_Break=lv}', "");
Expect(0, 44031, '\P{^Grapheme_Cluster_Break=lv}', "");
Expect(1, 44032, '\p{Grapheme_Cluster_Break=- LV}', "");
Expect(0, 44032, '\p{^Grapheme_Cluster_Break=- LV}', "");
Expect(0, 44032, '\P{Grapheme_Cluster_Break=- LV}', "");
Expect(1, 44032, '\P{^Grapheme_Cluster_Break=- LV}', "");
Expect(0, 44031, '\p{Grapheme_Cluster_Break=- LV}', "");
Expect(1, 44031, '\p{^Grapheme_Cluster_Break=- LV}', "");
Expect(1, 44031, '\P{Grapheme_Cluster_Break=- LV}', "");
Expect(0, 44031, '\P{^Grapheme_Cluster_Break=- LV}', "");
Error('\p{GCB=-:=LV}');
Error('\P{GCB=-:=LV}');
Expect(1, 44032, '\p{GCB:	lv}', "");
Expect(0, 44032, '\p{^GCB:	lv}', "");
Expect(0, 44032, '\P{GCB:	lv}', "");
Expect(1, 44032, '\P{^GCB:	lv}', "");
Expect(0, 44031, '\p{GCB:	lv}', "");
Expect(1, 44031, '\p{^GCB:	lv}', "");
Expect(1, 44031, '\P{GCB:	lv}', "");
Expect(0, 44031, '\P{^GCB:	lv}', "");
Expect(1, 44032, '\p{GCB= 	lv}', "");
Expect(0, 44032, '\p{^GCB= 	lv}', "");
Expect(0, 44032, '\P{GCB= 	lv}', "");
Expect(1, 44032, '\P{^GCB= 	lv}', "");
Expect(0, 44031, '\p{GCB= 	lv}', "");
Expect(1, 44031, '\p{^GCB= 	lv}', "");
Expect(1, 44031, '\P{GCB= 	lv}', "");
Expect(0, 44031, '\P{^GCB= 	lv}', "");
Error('\p{Is_Grapheme_Cluster_Break=_:=LV}');
Error('\P{Is_Grapheme_Cluster_Break=_:=LV}');
Expect(1, 44032, '\p{Is_Grapheme_Cluster_Break=lv}', "");
Expect(0, 44032, '\p{^Is_Grapheme_Cluster_Break=lv}', "");
Expect(0, 44032, '\P{Is_Grapheme_Cluster_Break=lv}', "");
Expect(1, 44032, '\P{^Is_Grapheme_Cluster_Break=lv}', "");
Expect(0, 44031, '\p{Is_Grapheme_Cluster_Break=lv}', "");
Expect(1, 44031, '\p{^Is_Grapheme_Cluster_Break=lv}', "");
Expect(1, 44031, '\P{Is_Grapheme_Cluster_Break=lv}', "");
Expect(0, 44031, '\P{^Is_Grapheme_Cluster_Break=lv}', "");
Expect(1, 44032, '\p{Is_Grapheme_Cluster_Break=	LV}', "");
Expect(0, 44032, '\p{^Is_Grapheme_Cluster_Break=	LV}', "");
Expect(0, 44032, '\P{Is_Grapheme_Cluster_Break=	LV}', "");
Expect(1, 44032, '\P{^Is_Grapheme_Cluster_Break=	LV}', "");
Expect(0, 44031, '\p{Is_Grapheme_Cluster_Break=	LV}', "");
Expect(1, 44031, '\p{^Is_Grapheme_Cluster_Break=	LV}', "");
Expect(1, 44031, '\P{Is_Grapheme_Cluster_Break=	LV}', "");
Expect(0, 44031, '\P{^Is_Grapheme_Cluster_Break=	LV}', "");
Error('\p{Is_GCB:/a/_LV}');
Error('\P{Is_GCB:/a/_LV}');
Expect(1, 44032, '\p{Is_GCB=lv}', "");
Expect(0, 44032, '\p{^Is_GCB=lv}', "");
Expect(0, 44032, '\P{Is_GCB=lv}', "");
Expect(1, 44032, '\P{^Is_GCB=lv}', "");
Expect(0, 44031, '\p{Is_GCB=lv}', "");
Expect(1, 44031, '\p{^Is_GCB=lv}', "");
Expect(1, 44031, '\P{Is_GCB=lv}', "");
Expect(0, 44031, '\P{^Is_GCB=lv}', "");
Expect(1, 44032, '\p{Is_GCB=_	LV}', "");
Expect(0, 44032, '\p{^Is_GCB=_	LV}', "");
Expect(0, 44032, '\P{Is_GCB=_	LV}', "");
Expect(1, 44032, '\P{^Is_GCB=_	LV}', "");
Expect(0, 44031, '\p{Is_GCB=_	LV}', "");
Expect(1, 44031, '\p{^Is_GCB=_	LV}', "");
Expect(1, 44031, '\P{Is_GCB=_	LV}', "");
Expect(0, 44031, '\P{^Is_GCB=_	LV}', "");
Error('\p{Grapheme_Cluster_Break=:=_CR}');
Error('\P{Grapheme_Cluster_Break=:=_CR}');
Expect(1, 13, '\p{Grapheme_Cluster_Break:   cr}', "");
Expect(0, 13, '\p{^Grapheme_Cluster_Break:   cr}', "");
Expect(0, 13, '\P{Grapheme_Cluster_Break:   cr}', "");
Expect(1, 13, '\P{^Grapheme_Cluster_Break:   cr}', "");
Expect(0, 12, '\p{Grapheme_Cluster_Break:   cr}', "");
Expect(1, 12, '\p{^Grapheme_Cluster_Break:   cr}', "");
Expect(1, 12, '\P{Grapheme_Cluster_Break:   cr}', "");
Expect(0, 12, '\P{^Grapheme_Cluster_Break:   cr}', "");
Expect(1, 13, '\p{Grapheme_Cluster_Break:	-CR}', "");
Expect(0, 13, '\p{^Grapheme_Cluster_Break:	-CR}', "");
Expect(0, 13, '\P{Grapheme_Cluster_Break:	-CR}', "");
Expect(1, 13, '\P{^Grapheme_Cluster_Break:	-CR}', "");
Expect(0, 12, '\p{Grapheme_Cluster_Break:	-CR}', "");
Expect(1, 12, '\p{^Grapheme_Cluster_Break:	-CR}', "");
Expect(1, 12, '\P{Grapheme_Cluster_Break:	-CR}', "");
Expect(0, 12, '\P{^Grapheme_Cluster_Break:	-CR}', "");
Error('\p{GCB=:= 	cr}');
Error('\P{GCB=:= 	cr}');
Expect(1, 13, '\p{GCB=cr}', "");
Expect(0, 13, '\p{^GCB=cr}', "");
Expect(0, 13, '\P{GCB=cr}', "");
Expect(1, 13, '\P{^GCB=cr}', "");
Expect(0, 12, '\p{GCB=cr}', "");
Expect(1, 12, '\p{^GCB=cr}', "");
Expect(1, 12, '\P{GCB=cr}', "");
Expect(0, 12, '\P{^GCB=cr}', "");
Expect(1, 13, '\p{GCB= cr}', "");
Expect(0, 13, '\p{^GCB= cr}', "");
Expect(0, 13, '\P{GCB= cr}', "");
Expect(1, 13, '\P{^GCB= cr}', "");
Expect(0, 12, '\p{GCB= cr}', "");
Expect(1, 12, '\p{^GCB= cr}', "");
Expect(1, 12, '\P{GCB= cr}', "");
Expect(0, 12, '\P{^GCB= cr}', "");
Error('\p{Is_Grapheme_Cluster_Break= /a/CR}');
Error('\P{Is_Grapheme_Cluster_Break= /a/CR}');
Expect(1, 13, '\p{Is_Grapheme_Cluster_Break=cr}', "");
Expect(0, 13, '\p{^Is_Grapheme_Cluster_Break=cr}', "");
Expect(0, 13, '\P{Is_Grapheme_Cluster_Break=cr}', "");
Expect(1, 13, '\P{^Is_Grapheme_Cluster_Break=cr}', "");
Expect(0, 12, '\p{Is_Grapheme_Cluster_Break=cr}', "");
Expect(1, 12, '\p{^Is_Grapheme_Cluster_Break=cr}', "");
Expect(1, 12, '\P{Is_Grapheme_Cluster_Break=cr}', "");
Expect(0, 12, '\P{^Is_Grapheme_Cluster_Break=cr}', "");
Expect(1, 13, '\p{Is_Grapheme_Cluster_Break= cr}', "");
Expect(0, 13, '\p{^Is_Grapheme_Cluster_Break= cr}', "");
Expect(0, 13, '\P{Is_Grapheme_Cluster_Break= cr}', "");
Expect(1, 13, '\P{^Is_Grapheme_Cluster_Break= cr}', "");
Expect(0, 12, '\p{Is_Grapheme_Cluster_Break= cr}', "");
Expect(1, 12, '\p{^Is_Grapheme_Cluster_Break= cr}', "");
Expect(1, 12, '\P{Is_Grapheme_Cluster_Break= cr}', "");
Expect(0, 12, '\P{^Is_Grapheme_Cluster_Break= cr}', "");
Error('\p{Is_GCB=:= _CR}');
Error('\P{Is_GCB=:= _CR}');
Expect(1, 13, '\p{Is_GCB=cr}', "");
Expect(0, 13, '\p{^Is_GCB=cr}', "");
Expect(0, 13, '\P{Is_GCB=cr}', "");
Expect(1, 13, '\P{^Is_GCB=cr}', "");
Expect(0, 12, '\p{Is_GCB=cr}', "");
Expect(1, 12, '\p{^Is_GCB=cr}', "");
Expect(1, 12, '\P{Is_GCB=cr}', "");
Expect(0, 12, '\P{^Is_GCB=cr}', "");
Expect(1, 13, '\p{Is_GCB=-CR}', "");
Expect(0, 13, '\p{^Is_GCB=-CR}', "");
Expect(0, 13, '\P{Is_GCB=-CR}', "");
Expect(1, 13, '\P{^Is_GCB=-CR}', "");
Expect(0, 12, '\p{Is_GCB=-CR}', "");
Expect(1, 12, '\p{^Is_GCB=-CR}', "");
Expect(1, 12, '\P{Is_GCB=-CR}', "");
Expect(0, 12, '\P{^Is_GCB=-CR}', "");
Error('\p{Grapheme_Cluster_Break=/a/-Other}');
Error('\P{Grapheme_Cluster_Break=/a/-Other}');
Expect(1, 126, '\p{Grapheme_Cluster_Break=other}', "");
Expect(0, 126, '\p{^Grapheme_Cluster_Break=other}', "");
Expect(0, 126, '\P{Grapheme_Cluster_Break=other}', "");
Expect(1, 126, '\P{^Grapheme_Cluster_Break=other}', "");
Expect(0, 31, '\p{Grapheme_Cluster_Break=other}', "");
Expect(1, 31, '\p{^Grapheme_Cluster_Break=other}', "");
Expect(1, 31, '\P{Grapheme_Cluster_Break=other}', "");
Expect(0, 31, '\P{^Grapheme_Cluster_Break=other}', "");
Expect(1, 126, '\p{Grapheme_Cluster_Break=		Other}', "");
Expect(0, 126, '\p{^Grapheme_Cluster_Break=		Other}', "");
Expect(0, 126, '\P{Grapheme_Cluster_Break=		Other}', "");
Expect(1, 126, '\P{^Grapheme_Cluster_Break=		Other}', "");
Expect(0, 31, '\p{Grapheme_Cluster_Break=		Other}', "");
Expect(1, 31, '\p{^Grapheme_Cluster_Break=		Other}', "");
Expect(1, 31, '\P{Grapheme_Cluster_Break=		Other}', "");
Expect(0, 31, '\P{^Grapheme_Cluster_Break=		Other}', "");
Error('\p{GCB=	 XX:=}');
Error('\P{GCB=	 XX:=}');
Expect(1, 126, '\p{GCB=xx}', "");
Expect(0, 126, '\p{^GCB=xx}', "");
Expect(0, 126, '\P{GCB=xx}', "");
Expect(1, 126, '\P{^GCB=xx}', "");
Expect(0, 31, '\p{GCB=xx}', "");
Expect(1, 31, '\p{^GCB=xx}', "");
Expect(1, 31, '\P{GCB=xx}', "");
Expect(0, 31, '\P{^GCB=xx}', "");
Expect(1, 126, '\p{GCB= xx}', "");
Expect(0, 126, '\p{^GCB= xx}', "");
Expect(0, 126, '\P{GCB= xx}', "");
Expect(1, 126, '\P{^GCB= xx}', "");
Expect(0, 31, '\p{GCB= xx}', "");
Expect(1, 31, '\p{^GCB= xx}', "");
Expect(1, 31, '\P{GCB= xx}', "");
Expect(0, 31, '\P{^GCB= xx}', "");
Error('\p{Is_Grapheme_Cluster_Break= _OTHER:=}');
Error('\P{Is_Grapheme_Cluster_Break= _OTHER:=}');
Expect(1, 126, '\p{Is_Grapheme_Cluster_Break:   other}', "");
Expect(0, 126, '\p{^Is_Grapheme_Cluster_Break:   other}', "");
Expect(0, 126, '\P{Is_Grapheme_Cluster_Break:   other}', "");
Expect(1, 126, '\P{^Is_Grapheme_Cluster_Break:   other}', "");
Expect(0, 31, '\p{Is_Grapheme_Cluster_Break:   other}', "");
Expect(1, 31, '\p{^Is_Grapheme_Cluster_Break:   other}', "");
Expect(1, 31, '\P{Is_Grapheme_Cluster_Break:   other}', "");
Expect(0, 31, '\P{^Is_Grapheme_Cluster_Break:   other}', "");
Expect(1, 126, '\p{Is_Grapheme_Cluster_Break=	_other}', "");
Expect(0, 126, '\p{^Is_Grapheme_Cluster_Break=	_other}', "");
Expect(0, 126, '\P{Is_Grapheme_Cluster_Break=	_other}', "");
Expect(1, 126, '\P{^Is_Grapheme_Cluster_Break=	_other}', "");
Expect(0, 31, '\p{Is_Grapheme_Cluster_Break=	_other}', "");
Expect(1, 31, '\p{^Is_Grapheme_Cluster_Break=	_other}', "");
Expect(1, 31, '\P{Is_Grapheme_Cluster_Break=	_other}', "");
Expect(0, 31, '\P{^Is_Grapheme_Cluster_Break=	_other}', "");
Error('\p{Is_GCB=	:=XX}');
Error('\P{Is_GCB=	:=XX}');
Expect(1, 126, '\p{Is_GCB=xx}', "");
Expect(0, 126, '\p{^Is_GCB=xx}', "");
Expect(0, 126, '\P{Is_GCB=xx}', "");
Expect(1, 126, '\P{^Is_GCB=xx}', "");
Expect(0, 31, '\p{Is_GCB=xx}', "");
Expect(1, 31, '\p{^Is_GCB=xx}', "");
Expect(1, 31, '\P{Is_GCB=xx}', "");
Expect(0, 31, '\P{^Is_GCB=xx}', "");
Expect(1, 126, '\p{Is_GCB= XX}', "");
Expect(0, 126, '\p{^Is_GCB= XX}', "");
Expect(0, 126, '\P{Is_GCB= XX}', "");
Expect(1, 126, '\P{^Is_GCB= XX}', "");
Expect(0, 31, '\p{Is_GCB= XX}', "");
Expect(1, 31, '\p{^Is_GCB= XX}', "");
Expect(1, 31, '\P{Is_GCB= XX}', "");
Expect(0, 31, '\P{^Is_GCB= XX}', "");
Error('\p{Grapheme_Cluster_Break=/a/		Extend}');
Error('\P{Grapheme_Cluster_Break=/a/		Extend}');
Expect(1, 879, '\p{Grapheme_Cluster_Break:	extend}', "");
Expect(0, 879, '\p{^Grapheme_Cluster_Break:	extend}', "");
Expect(0, 879, '\P{Grapheme_Cluster_Break:	extend}', "");
Expect(1, 879, '\P{^Grapheme_Cluster_Break:	extend}', "");
Expect(0, 767, '\p{Grapheme_Cluster_Break:	extend}', "");
Expect(1, 767, '\p{^Grapheme_Cluster_Break:	extend}', "");
Expect(1, 767, '\P{Grapheme_Cluster_Break:	extend}', "");
Expect(0, 767, '\P{^Grapheme_Cluster_Break:	extend}', "");
Expect(1, 879, '\p{Grapheme_Cluster_Break=		extend}', "");
Expect(0, 879, '\p{^Grapheme_Cluster_Break=		extend}', "");
Expect(0, 879, '\P{Grapheme_Cluster_Break=		extend}', "");
Expect(1, 879, '\P{^Grapheme_Cluster_Break=		extend}', "");
Expect(0, 767, '\p{Grapheme_Cluster_Break=		extend}', "");
Expect(1, 767, '\p{^Grapheme_Cluster_Break=		extend}', "");
Expect(1, 767, '\P{Grapheme_Cluster_Break=		extend}', "");
Expect(0, 767, '\P{^Grapheme_Cluster_Break=		extend}', "");
Error('\p{GCB=/a/	-EX}');
Error('\P{GCB=/a/	-EX}');
Expect(1, 879, '\p{GCB=ex}', "");
Expect(0, 879, '\p{^GCB=ex}', "");
Expect(0, 879, '\P{GCB=ex}', "");
Expect(1, 879, '\P{^GCB=ex}', "");
Expect(0, 767, '\p{GCB=ex}', "");
Expect(1, 767, '\p{^GCB=ex}', "");
Expect(1, 767, '\P{GCB=ex}', "");
Expect(0, 767, '\P{^GCB=ex}', "");
Expect(1, 879, '\p{GCB=_-EX}', "");
Expect(0, 879, '\p{^GCB=_-EX}', "");
Expect(0, 879, '\P{GCB=_-EX}', "");
Expect(1, 879, '\P{^GCB=_-EX}', "");
Expect(0, 767, '\p{GCB=_-EX}', "");
Expect(1, 767, '\p{^GCB=_-EX}', "");
Expect(1, 767, '\P{GCB=_-EX}', "");
Expect(0, 767, '\P{^GCB=_-EX}', "");
Error('\p{Is_Grapheme_Cluster_Break=_/a/Extend}');
Error('\P{Is_Grapheme_Cluster_Break=_/a/Extend}');
Expect(1, 879, '\p{Is_Grapheme_Cluster_Break:extend}', "");
Expect(0, 879, '\p{^Is_Grapheme_Cluster_Break:extend}', "");
Expect(0, 879, '\P{Is_Grapheme_Cluster_Break:extend}', "");
Expect(1, 879, '\P{^Is_Grapheme_Cluster_Break:extend}', "");
Expect(0, 767, '\p{Is_Grapheme_Cluster_Break:extend}', "");
Expect(1, 767, '\p{^Is_Grapheme_Cluster_Break:extend}', "");
Expect(1, 767, '\P{Is_Grapheme_Cluster_Break:extend}', "");
Expect(0, 767, '\P{^Is_Grapheme_Cluster_Break:extend}', "");
Expect(1, 879, '\p{Is_Grapheme_Cluster_Break=		Extend}', "");
Expect(0, 879, '\p{^Is_Grapheme_Cluster_Break=		Extend}', "");
Expect(0, 879, '\P{Is_Grapheme_Cluster_Break=		Extend}', "");
Expect(1, 879, '\P{^Is_Grapheme_Cluster_Break=		Extend}', "");
Expect(0, 767, '\p{Is_Grapheme_Cluster_Break=		Extend}', "");
Expect(1, 767, '\p{^Is_Grapheme_Cluster_Break=		Extend}', "");
Expect(1, 767, '\P{Is_Grapheme_Cluster_Break=		Extend}', "");
Expect(0, 767, '\P{^Is_Grapheme_Cluster_Break=		Extend}', "");
Error('\p{Is_GCB=-/a/EX}');
Error('\P{Is_GCB=-/a/EX}');
Expect(1, 879, '\p{Is_GCB=ex}', "");
Expect(0, 879, '\p{^Is_GCB=ex}', "");
Expect(0, 879, '\P{Is_GCB=ex}', "");
Expect(1, 879, '\P{^Is_GCB=ex}', "");
Expect(0, 767, '\p{Is_GCB=ex}', "");
Expect(1, 767, '\p{^Is_GCB=ex}', "");
Expect(1, 767, '\P{Is_GCB=ex}', "");
Expect(0, 767, '\P{^Is_GCB=ex}', "");
Expect(1, 879, '\p{Is_GCB=	ex}', "");
Expect(0, 879, '\p{^Is_GCB=	ex}', "");
Expect(0, 879, '\P{Is_GCB=	ex}', "");
Expect(1, 879, '\P{^Is_GCB=	ex}', "");
Expect(0, 767, '\p{Is_GCB=	ex}', "");
Expect(1, 767, '\p{^Is_GCB=	ex}', "");
Expect(1, 767, '\P{Is_GCB=	ex}', "");
Expect(0, 767, '\P{^Is_GCB=	ex}', "");
Error('\p{Grapheme_Cluster_Break:	- V/a/}');
Error('\P{Grapheme_Cluster_Break:	- V/a/}');
Expect(1, 4519, '\p{Grapheme_Cluster_Break=v}', "");
Expect(0, 4519, '\p{^Grapheme_Cluster_Break=v}', "");
Expect(0, 4519, '\P{Grapheme_Cluster_Break=v}', "");
Expect(1, 4519, '\P{^Grapheme_Cluster_Break=v}', "");
Expect(0, 4447, '\p{Grapheme_Cluster_Break=v}', "");
Expect(1, 4447, '\p{^Grapheme_Cluster_Break=v}', "");
Expect(1, 4447, '\P{Grapheme_Cluster_Break=v}', "");
Expect(0, 4447, '\P{^Grapheme_Cluster_Break=v}', "");
Expect(1, 4519, '\p{Grapheme_Cluster_Break=	v}', "");
Expect(0, 4519, '\p{^Grapheme_Cluster_Break=	v}', "");
Expect(0, 4519, '\P{Grapheme_Cluster_Break=	v}', "");
Expect(1, 4519, '\P{^Grapheme_Cluster_Break=	v}', "");
Expect(0, 4447, '\p{Grapheme_Cluster_Break=	v}', "");
Expect(1, 4447, '\p{^Grapheme_Cluster_Break=	v}', "");
Expect(1, 4447, '\P{Grapheme_Cluster_Break=	v}', "");
Expect(0, 4447, '\P{^Grapheme_Cluster_Break=	v}', "");
Error('\p{GCB=/a/ _V}');
Error('\P{GCB=/a/ _V}');
Expect(1, 4519, '\p{GCB=v}', "");
Expect(0, 4519, '\p{^GCB=v}', "");
Expect(0, 4519, '\P{GCB=v}', "");
Expect(1, 4519, '\P{^GCB=v}', "");
Expect(0, 4447, '\p{GCB=v}', "");
Expect(1, 4447, '\p{^GCB=v}', "");
Expect(1, 4447, '\P{GCB=v}', "");
Expect(0, 4447, '\P{^GCB=v}', "");
Expect(1, 4519, '\p{GCB= V}', "");
Expect(0, 4519, '\p{^GCB= V}', "");
Expect(0, 4519, '\P{GCB= V}', "");
Expect(1, 4519, '\P{^GCB= V}', "");
Expect(0, 4447, '\p{GCB= V}', "");
Expect(1, 4447, '\p{^GCB= V}', "");
Expect(1, 4447, '\P{GCB= V}', "");
Expect(0, 4447, '\P{^GCB= V}', "");
Error('\p{Is_Grapheme_Cluster_Break=:=	 V}');
Error('\P{Is_Grapheme_Cluster_Break=:=	 V}');
Expect(1, 4519, '\p{Is_Grapheme_Cluster_Break=v}', "");
Expect(0, 4519, '\p{^Is_Grapheme_Cluster_Break=v}', "");
Expect(0, 4519, '\P{Is_Grapheme_Cluster_Break=v}', "");
Expect(1, 4519, '\P{^Is_Grapheme_Cluster_Break=v}', "");
Expect(0, 4447, '\p{Is_Grapheme_Cluster_Break=v}', "");
Expect(1, 4447, '\p{^Is_Grapheme_Cluster_Break=v}', "");
Expect(1, 4447, '\P{Is_Grapheme_Cluster_Break=v}', "");
Expect(0, 4447, '\P{^Is_Grapheme_Cluster_Break=v}', "");
Expect(1, 4519, '\p{Is_Grapheme_Cluster_Break= 	V}', "");
Expect(0, 4519, '\p{^Is_Grapheme_Cluster_Break= 	V}', "");
Expect(0, 4519, '\P{Is_Grapheme_Cluster_Break= 	V}', "");
Expect(1, 4519, '\P{^Is_Grapheme_Cluster_Break= 	V}', "");
Expect(0, 4447, '\p{Is_Grapheme_Cluster_Break= 	V}', "");
Expect(1, 4447, '\p{^Is_Grapheme_Cluster_Break= 	V}', "");
Expect(1, 4447, '\P{Is_Grapheme_Cluster_Break= 	V}', "");
Expect(0, 4447, '\P{^Is_Grapheme_Cluster_Break= 	V}', "");
Error('\p{Is_GCB=	-v/a/}');
Error('\P{Is_GCB=	-v/a/}');
Expect(1, 4519, '\p{Is_GCB=v}', "");
Expect(0, 4519, '\p{^Is_GCB=v}', "");
Expect(0, 4519, '\P{Is_GCB=v}', "");
Expect(1, 4519, '\P{^Is_GCB=v}', "");
Expect(0, 4447, '\p{Is_GCB=v}', "");
Expect(1, 4447, '\p{^Is_GCB=v}', "");
Expect(1, 4447, '\P{Is_GCB=v}', "");
Expect(0, 4447, '\P{^Is_GCB=v}', "");
Expect(1, 4519, '\p{Is_GCB=-V}', "");
Expect(0, 4519, '\p{^Is_GCB=-V}', "");
Expect(0, 4519, '\P{Is_GCB=-V}', "");
Expect(1, 4519, '\P{^Is_GCB=-V}', "");
Expect(0, 4447, '\p{Is_GCB=-V}', "");
Expect(1, 4447, '\p{^Is_GCB=-V}', "");
Expect(1, 4447, '\P{Is_GCB=-V}', "");
Expect(0, 4447, '\P{^Is_GCB=-V}', "");
Error('\p{Grapheme_Cluster_Break= -lf/a/}');
Error('\P{Grapheme_Cluster_Break= -lf/a/}');
Expect(1, 10, '\p{Grapheme_Cluster_Break=lf}', "");
Expect(0, 10, '\p{^Grapheme_Cluster_Break=lf}', "");
Expect(0, 10, '\P{Grapheme_Cluster_Break=lf}', "");
Expect(1, 10, '\P{^Grapheme_Cluster_Break=lf}', "");
Expect(0, 9, '\p{Grapheme_Cluster_Break=lf}', "");
Expect(1, 9, '\p{^Grapheme_Cluster_Break=lf}', "");
Expect(1, 9, '\P{Grapheme_Cluster_Break=lf}', "");
Expect(0, 9, '\P{^Grapheme_Cluster_Break=lf}', "");
Expect(1, 10, '\p{Grapheme_Cluster_Break= 	lf}', "");
Expect(0, 10, '\p{^Grapheme_Cluster_Break= 	lf}', "");
Expect(0, 10, '\P{Grapheme_Cluster_Break= 	lf}', "");
Expect(1, 10, '\P{^Grapheme_Cluster_Break= 	lf}', "");
Expect(0, 9, '\p{Grapheme_Cluster_Break= 	lf}', "");
Expect(1, 9, '\p{^Grapheme_Cluster_Break= 	lf}', "");
Expect(1, 9, '\P{Grapheme_Cluster_Break= 	lf}', "");
Expect(0, 9, '\P{^Grapheme_Cluster_Break= 	lf}', "");
Error('\p{GCB=_lf:=}');
Error('\P{GCB=_lf:=}');
Expect(1, 10, '\p{GCB:	lf}', "");
Expect(0, 10, '\p{^GCB:	lf}', "");
Expect(0, 10, '\P{GCB:	lf}', "");
Expect(1, 10, '\P{^GCB:	lf}', "");
Expect(0, 9, '\p{GCB:	lf}', "");
Expect(1, 9, '\p{^GCB:	lf}', "");
Expect(1, 9, '\P{GCB:	lf}', "");
Expect(0, 9, '\P{^GCB:	lf}', "");
Expect(1, 10, '\p{GCB=  LF}', "");
Expect(0, 10, '\p{^GCB=  LF}', "");
Expect(0, 10, '\P{GCB=  LF}', "");
Expect(1, 10, '\P{^GCB=  LF}', "");
Expect(0, 9, '\p{GCB=  LF}', "");
Expect(1, 9, '\p{^GCB=  LF}', "");
Expect(1, 9, '\P{GCB=  LF}', "");
Expect(0, 9, '\P{^GCB=  LF}', "");
Error('\p{Is_Grapheme_Cluster_Break=:= LF}');
Error('\P{Is_Grapheme_Cluster_Break=:= LF}');
Expect(1, 10, '\p{Is_Grapheme_Cluster_Break=lf}', "");
Expect(0, 10, '\p{^Is_Grapheme_Cluster_Break=lf}', "");
Expect(0, 10, '\P{Is_Grapheme_Cluster_Break=lf}', "");
Expect(1, 10, '\P{^Is_Grapheme_Cluster_Break=lf}', "");
Expect(0, 9, '\p{Is_Grapheme_Cluster_Break=lf}', "");
Expect(1, 9, '\p{^Is_Grapheme_Cluster_Break=lf}', "");
Expect(1, 9, '\P{Is_Grapheme_Cluster_Break=lf}', "");
Expect(0, 9, '\P{^Is_Grapheme_Cluster_Break=lf}', "");
Expect(1, 10, '\p{Is_Grapheme_Cluster_Break:	 LF}', "");
Expect(0, 10, '\p{^Is_Grapheme_Cluster_Break:	 LF}', "");
Expect(0, 10, '\P{Is_Grapheme_Cluster_Break:	 LF}', "");
Expect(1, 10, '\P{^Is_Grapheme_Cluster_Break:	 LF}', "");
Expect(0, 9, '\p{Is_Grapheme_Cluster_Break:	 LF}', "");
Expect(1, 9, '\p{^Is_Grapheme_Cluster_Break:	 LF}', "");
Expect(1, 9, '\P{Is_Grapheme_Cluster_Break:	 LF}', "");
Expect(0, 9, '\P{^Is_Grapheme_Cluster_Break:	 LF}', "");
Error('\p{Is_GCB=:=	_lf}');
Error('\P{Is_GCB=:=	_lf}');
Expect(1, 10, '\p{Is_GCB:	lf}', "");
Expect(0, 10, '\p{^Is_GCB:	lf}', "");
Expect(0, 10, '\P{Is_GCB:	lf}', "");
Expect(1, 10, '\P{^Is_GCB:	lf}', "");
Expect(0, 9, '\p{Is_GCB:	lf}', "");
Expect(1, 9, '\p{^Is_GCB:	lf}', "");
Expect(1, 9, '\P{Is_GCB:	lf}', "");
Expect(0, 9, '\P{^Is_GCB:	lf}', "");
Expect(1, 10, '\p{Is_GCB=	 LF}', "");
Expect(0, 10, '\p{^Is_GCB=	 LF}', "");
Expect(0, 10, '\P{Is_GCB=	 LF}', "");
Expect(1, 10, '\P{^Is_GCB=	 LF}', "");
Expect(0, 9, '\p{Is_GCB=	 LF}', "");
Expect(1, 9, '\p{^Is_GCB=	 LF}', "");
Expect(1, 9, '\P{Is_GCB=	 LF}', "");
Expect(0, 9, '\P{^Is_GCB=	 LF}', "");
Error('\p{Grapheme_Cluster_Break=:= 	L}');
Error('\P{Grapheme_Cluster_Break=:= 	L}');
Expect(1, 4447, '\p{Grapheme_Cluster_Break=l}', "");
Expect(0, 4447, '\p{^Grapheme_Cluster_Break=l}', "");
Expect(0, 4447, '\P{Grapheme_Cluster_Break=l}', "");
Expect(1, 4447, '\P{^Grapheme_Cluster_Break=l}', "");
Expect(0, 4351, '\p{Grapheme_Cluster_Break=l}', "");
Expect(1, 4351, '\p{^Grapheme_Cluster_Break=l}', "");
Expect(1, 4351, '\P{Grapheme_Cluster_Break=l}', "");
Expect(0, 4351, '\P{^Grapheme_Cluster_Break=l}', "");
Expect(1, 4447, '\p{Grapheme_Cluster_Break=- L}', "");
Expect(0, 4447, '\p{^Grapheme_Cluster_Break=- L}', "");
Expect(0, 4447, '\P{Grapheme_Cluster_Break=- L}', "");
Expect(1, 4447, '\P{^Grapheme_Cluster_Break=- L}', "");
Expect(0, 4351, '\p{Grapheme_Cluster_Break=- L}', "");
Expect(1, 4351, '\p{^Grapheme_Cluster_Break=- L}', "");
Expect(1, 4351, '\P{Grapheme_Cluster_Break=- L}', "");
Expect(0, 4351, '\P{^Grapheme_Cluster_Break=- L}', "");
Error('\p{GCB=	l/a/}');
Error('\P{GCB=	l/a/}');
Expect(1, 4447, '\p{GCB=l}', "");
Expect(0, 4447, '\p{^GCB=l}', "");
Expect(0, 4447, '\P{GCB=l}', "");
Expect(1, 4447, '\P{^GCB=l}', "");
Expect(0, 4351, '\p{GCB=l}', "");
Expect(1, 4351, '\p{^GCB=l}', "");
Expect(1, 4351, '\P{GCB=l}', "");
Expect(0, 4351, '\P{^GCB=l}', "");
Expect(1, 4447, '\p{GCB=__L}', "");
Expect(0, 4447, '\p{^GCB=__L}', "");
Expect(0, 4447, '\P{GCB=__L}', "");
Expect(1, 4447, '\P{^GCB=__L}', "");
Expect(0, 4351, '\p{GCB=__L}', "");
Expect(1, 4351, '\p{^GCB=__L}', "");
Expect(1, 4351, '\P{GCB=__L}', "");
Expect(0, 4351, '\P{^GCB=__L}', "");
Error('\p{Is_Grapheme_Cluster_Break=  L:=}');
Error('\P{Is_Grapheme_Cluster_Break=  L:=}');
Expect(1, 4447, '\p{Is_Grapheme_Cluster_Break=l}', "");
Expect(0, 4447, '\p{^Is_Grapheme_Cluster_Break=l}', "");
Expect(0, 4447, '\P{Is_Grapheme_Cluster_Break=l}', "");
Expect(1, 4447, '\P{^Is_Grapheme_Cluster_Break=l}', "");
Expect(0, 4351, '\p{Is_Grapheme_Cluster_Break=l}', "");
Expect(1, 4351, '\p{^Is_Grapheme_Cluster_Break=l}', "");
Expect(1, 4351, '\P{Is_Grapheme_Cluster_Break=l}', "");
Expect(0, 4351, '\P{^Is_Grapheme_Cluster_Break=l}', "");
Expect(1, 4447, '\p{Is_Grapheme_Cluster_Break= -L}', "");
Expect(0, 4447, '\p{^Is_Grapheme_Cluster_Break= -L}', "");
Expect(0, 4447, '\P{Is_Grapheme_Cluster_Break= -L}', "");
Expect(1, 4447, '\P{^Is_Grapheme_Cluster_Break= -L}', "");
Expect(0, 4351, '\p{Is_Grapheme_Cluster_Break= -L}', "");
Expect(1, 4351, '\p{^Is_Grapheme_Cluster_Break= -L}', "");
Expect(1, 4351, '\P{Is_Grapheme_Cluster_Break= -L}', "");
Expect(0, 4351, '\P{^Is_Grapheme_Cluster_Break= -L}', "");
Error('\p{Is_GCB:	  l:=}');
Error('\P{Is_GCB:	  l:=}');
Expect(1, 4447, '\p{Is_GCB=l}', "");
Expect(0, 4447, '\p{^Is_GCB=l}', "");
Expect(0, 4447, '\P{Is_GCB=l}', "");
Expect(1, 4447, '\P{^Is_GCB=l}', "");
Expect(0, 4351, '\p{Is_GCB=l}', "");
Expect(1, 4351, '\p{^Is_GCB=l}', "");
Expect(1, 4351, '\P{Is_GCB=l}', "");
Expect(0, 4351, '\P{^Is_GCB=l}', "");
Expect(1, 4447, '\p{Is_GCB=L}', "");
Expect(0, 4447, '\p{^Is_GCB=L}', "");
Expect(0, 4447, '\P{Is_GCB=L}', "");
Expect(1, 4447, '\P{^Is_GCB=L}', "");
Expect(0, 4351, '\p{Is_GCB=L}', "");
Expect(1, 4351, '\p{^Is_GCB=L}', "");
Expect(1, 4351, '\P{Is_GCB=L}', "");
Expect(0, 4351, '\P{^Is_GCB=L}', "");
Error('\p{Logical_Order_Exception=	_Yes:=}');
Error('\P{Logical_Order_Exception=	_Yes:=}');
Expect(1, 3652, '\p{Logical_Order_Exception=yes}', "");
Expect(0, 3652, '\p{^Logical_Order_Exception=yes}', "");
Expect(0, 3652, '\P{Logical_Order_Exception=yes}', "");
Expect(1, 3652, '\P{^Logical_Order_Exception=yes}', "");
Expect(0, 3647, '\p{Logical_Order_Exception=yes}', "");
Expect(1, 3647, '\p{^Logical_Order_Exception=yes}', "");
Expect(1, 3647, '\P{Logical_Order_Exception=yes}', "");
Expect(0, 3647, '\P{^Logical_Order_Exception=yes}', "");
Expect(1, 3652, '\p{Logical_Order_Exception=-_Yes}', "");
Expect(0, 3652, '\p{^Logical_Order_Exception=-_Yes}', "");
Expect(0, 3652, '\P{Logical_Order_Exception=-_Yes}', "");
Expect(1, 3652, '\P{^Logical_Order_Exception=-_Yes}', "");
Expect(0, 3647, '\p{Logical_Order_Exception=-_Yes}', "");
Expect(1, 3647, '\p{^Logical_Order_Exception=-_Yes}', "");
Expect(1, 3647, '\P{Logical_Order_Exception=-_Yes}', "");
Expect(0, 3647, '\P{^Logical_Order_Exception=-_Yes}', "");
Error('\p{LOE:  Y:=}');
Error('\P{LOE:  Y:=}');
Expect(1, 3652, '\p{LOE=y}', "");
Expect(0, 3652, '\p{^LOE=y}', "");
Expect(0, 3652, '\P{LOE=y}', "");
Expect(1, 3652, '\P{^LOE=y}', "");
Expect(0, 3647, '\p{LOE=y}', "");
Expect(1, 3647, '\p{^LOE=y}', "");
Expect(1, 3647, '\P{LOE=y}', "");
Expect(0, 3647, '\P{^LOE=y}', "");
Expect(1, 3652, '\p{LOE=__Y}', "");
Expect(0, 3652, '\p{^LOE=__Y}', "");
Expect(0, 3652, '\P{LOE=__Y}', "");
Expect(1, 3652, '\P{^LOE=__Y}', "");
Expect(0, 3647, '\p{LOE=__Y}', "");
Expect(1, 3647, '\p{^LOE=__Y}', "");
Expect(1, 3647, '\P{LOE=__Y}', "");
Expect(0, 3647, '\P{^LOE=__Y}', "");
Error('\p{Is_Logical_Order_Exception= :=t}');
Error('\P{Is_Logical_Order_Exception= :=t}');
Expect(1, 3652, '\p{Is_Logical_Order_Exception:   t}', "");
Expect(0, 3652, '\p{^Is_Logical_Order_Exception:   t}', "");
Expect(0, 3652, '\P{Is_Logical_Order_Exception:   t}', "");
Expect(1, 3652, '\P{^Is_Logical_Order_Exception:   t}', "");
Expect(0, 3647, '\p{Is_Logical_Order_Exception:   t}', "");
Expect(1, 3647, '\p{^Is_Logical_Order_Exception:   t}', "");
Expect(1, 3647, '\P{Is_Logical_Order_Exception:   t}', "");
Expect(0, 3647, '\P{^Is_Logical_Order_Exception:   t}', "");
Expect(1, 3652, '\p{Is_Logical_Order_Exception=	_T}', "");
Expect(0, 3652, '\p{^Is_Logical_Order_Exception=	_T}', "");
Expect(0, 3652, '\P{Is_Logical_Order_Exception=	_T}', "");
Expect(1, 3652, '\P{^Is_Logical_Order_Exception=	_T}', "");
Expect(0, 3647, '\p{Is_Logical_Order_Exception=	_T}', "");
Expect(1, 3647, '\p{^Is_Logical_Order_Exception=	_T}', "");
Expect(1, 3647, '\P{Is_Logical_Order_Exception=	_T}', "");
Expect(0, 3647, '\P{^Is_Logical_Order_Exception=	_T}', "");
Error('\p{Is_LOE=	-True/a/}');
Error('\P{Is_LOE=	-True/a/}');
Expect(1, 3652, '\p{Is_LOE=true}', "");
Expect(0, 3652, '\p{^Is_LOE=true}', "");
Expect(0, 3652, '\P{Is_LOE=true}', "");
Expect(1, 3652, '\P{^Is_LOE=true}', "");
Expect(0, 3647, '\p{Is_LOE=true}', "");
Expect(1, 3647, '\p{^Is_LOE=true}', "");
Expect(1, 3647, '\P{Is_LOE=true}', "");
Expect(0, 3647, '\P{^Is_LOE=true}', "");
Expect(1, 3652, '\p{Is_LOE=	_True}', "");
Expect(0, 3652, '\p{^Is_LOE=	_True}', "");
Expect(0, 3652, '\P{Is_LOE=	_True}', "");
Expect(1, 3652, '\P{^Is_LOE=	_True}', "");
Expect(0, 3647, '\p{Is_LOE=	_True}', "");
Expect(1, 3647, '\p{^Is_LOE=	_True}', "");
Expect(1, 3647, '\P{Is_LOE=	_True}', "");
Expect(0, 3647, '\P{^Is_LOE=	_True}', "");
Error('\p{Logical_Order_Exception::=	no}');
Error('\P{Logical_Order_Exception::=	no}');
Expect(1, 3647, '\p{Logical_Order_Exception: no}', "");
Expect(0, 3647, '\p{^Logical_Order_Exception: no}', "");
Expect(0, 3647, '\P{Logical_Order_Exception: no}', "");
Expect(1, 3647, '\P{^Logical_Order_Exception: no}', "");
Expect(0, 3652, '\p{Logical_Order_Exception: no}', "");
Expect(1, 3652, '\p{^Logical_Order_Exception: no}', "");
Expect(1, 3652, '\P{Logical_Order_Exception: no}', "");
Expect(0, 3652, '\P{^Logical_Order_Exception: no}', "");
Expect(1, 3647, '\p{Logical_Order_Exception= No}', "");
Expect(0, 3647, '\p{^Logical_Order_Exception= No}', "");
Expect(0, 3647, '\P{Logical_Order_Exception= No}', "");
Expect(1, 3647, '\P{^Logical_Order_Exception= No}', "");
Expect(0, 3652, '\p{Logical_Order_Exception= No}', "");
Expect(1, 3652, '\p{^Logical_Order_Exception= No}', "");
Expect(1, 3652, '\P{Logical_Order_Exception= No}', "");
Expect(0, 3652, '\P{^Logical_Order_Exception= No}', "");
Error('\p{LOE=  n/a/}');
Error('\P{LOE=  n/a/}');
Expect(1, 3647, '\p{LOE=n}', "");
Expect(0, 3647, '\p{^LOE=n}', "");
Expect(0, 3647, '\P{LOE=n}', "");
Expect(1, 3647, '\P{^LOE=n}', "");
Expect(0, 3652, '\p{LOE=n}', "");
Expect(1, 3652, '\p{^LOE=n}', "");
Expect(1, 3652, '\P{LOE=n}', "");
Expect(0, 3652, '\P{^LOE=n}', "");
Expect(1, 3647, '\p{LOE:	-N}', "");
Expect(0, 3647, '\p{^LOE:	-N}', "");
Expect(0, 3647, '\P{LOE:	-N}', "");
Expect(1, 3647, '\P{^LOE:	-N}', "");
Expect(0, 3652, '\p{LOE:	-N}', "");
Expect(1, 3652, '\p{^LOE:	-N}', "");
Expect(1, 3652, '\P{LOE:	-N}', "");
Expect(0, 3652, '\P{^LOE:	-N}', "");
Error('\p{Is_Logical_Order_Exception=	F:=}');
Error('\P{Is_Logical_Order_Exception=	F:=}');
Expect(1, 3647, '\p{Is_Logical_Order_Exception: f}', "");
Expect(0, 3647, '\p{^Is_Logical_Order_Exception: f}', "");
Expect(0, 3647, '\P{Is_Logical_Order_Exception: f}', "");
Expect(1, 3647, '\P{^Is_Logical_Order_Exception: f}', "");
Expect(0, 3652, '\p{Is_Logical_Order_Exception: f}', "");
Expect(1, 3652, '\p{^Is_Logical_Order_Exception: f}', "");
Expect(1, 3652, '\P{Is_Logical_Order_Exception: f}', "");
Expect(0, 3652, '\P{^Is_Logical_Order_Exception: f}', "");
Expect(1, 3647, '\p{Is_Logical_Order_Exception=_ f}', "");
Expect(0, 3647, '\p{^Is_Logical_Order_Exception=_ f}', "");
Expect(0, 3647, '\P{Is_Logical_Order_Exception=_ f}', "");
Expect(1, 3647, '\P{^Is_Logical_Order_Exception=_ f}', "");
Expect(0, 3652, '\p{Is_Logical_Order_Exception=_ f}', "");
Expect(1, 3652, '\p{^Is_Logical_Order_Exception=_ f}', "");
Expect(1, 3652, '\P{Is_Logical_Order_Exception=_ f}', "");
Expect(0, 3652, '\P{^Is_Logical_Order_Exception=_ f}', "");
Error('\p{Is_LOE=:=- False}');
Error('\P{Is_LOE=:=- False}');
Expect(1, 3647, '\p{Is_LOE=false}', "");
Expect(0, 3647, '\p{^Is_LOE=false}', "");
Expect(0, 3647, '\P{Is_LOE=false}', "");
Expect(1, 3647, '\P{^Is_LOE=false}', "");
Expect(0, 3652, '\p{Is_LOE=false}', "");
Expect(1, 3652, '\p{^Is_LOE=false}', "");
Expect(1, 3652, '\P{Is_LOE=false}', "");
Expect(0, 3652, '\P{^Is_LOE=false}', "");
Expect(1, 3647, '\p{Is_LOE=-False}', "");
Expect(0, 3647, '\p{^Is_LOE=-False}', "");
Expect(0, 3647, '\P{Is_LOE=-False}', "");
Expect(1, 3647, '\P{^Is_LOE=-False}', "");
Expect(0, 3652, '\p{Is_LOE=-False}', "");
Expect(1, 3652, '\p{^Is_LOE=-False}', "");
Expect(1, 3652, '\P{Is_LOE=-False}', "");
Expect(0, 3652, '\P{^Is_LOE=-False}', "");
Error('\p{Bidi_Mirrored=_	Yes:=}');
Error('\P{Bidi_Mirrored=_	Yes:=}');
Expect(1, 41, '\p{Bidi_Mirrored=yes}', "");
Expect(0, 41, '\p{^Bidi_Mirrored=yes}', "");
Expect(0, 41, '\P{Bidi_Mirrored=yes}', "");
Expect(1, 41, '\P{^Bidi_Mirrored=yes}', "");
Expect(0, 39, '\p{Bidi_Mirrored=yes}', "");
Expect(1, 39, '\p{^Bidi_Mirrored=yes}', "");
Expect(1, 39, '\P{Bidi_Mirrored=yes}', "");
Expect(0, 39, '\P{^Bidi_Mirrored=yes}', "");
Expect(1, 41, '\p{Bidi_Mirrored=	_yes}', "");
Expect(0, 41, '\p{^Bidi_Mirrored=	_yes}', "");
Expect(0, 41, '\P{Bidi_Mirrored=	_yes}', "");
Expect(1, 41, '\P{^Bidi_Mirrored=	_yes}', "");
Expect(0, 39, '\p{Bidi_Mirrored=	_yes}', "");
Expect(1, 39, '\p{^Bidi_Mirrored=	_yes}', "");
Expect(1, 39, '\P{Bidi_Mirrored=	_yes}', "");
Expect(0, 39, '\P{^Bidi_Mirrored=	_yes}', "");
Error('\p{Bidi_M=__y/a/}');
Error('\P{Bidi_M=__y/a/}');
Expect(1, 41, '\p{Bidi_M=y}', "");
Expect(0, 41, '\p{^Bidi_M=y}', "");
Expect(0, 41, '\P{Bidi_M=y}', "");
Expect(1, 41, '\P{^Bidi_M=y}', "");
Expect(0, 39, '\p{Bidi_M=y}', "");
Expect(1, 39, '\p{^Bidi_M=y}', "");
Expect(1, 39, '\P{Bidi_M=y}', "");
Expect(0, 39, '\P{^Bidi_M=y}', "");
Expect(1, 41, '\p{Bidi_M=	 y}', "");
Expect(0, 41, '\p{^Bidi_M=	 y}', "");
Expect(0, 41, '\P{Bidi_M=	 y}', "");
Expect(1, 41, '\P{^Bidi_M=	 y}', "");
Expect(0, 39, '\p{Bidi_M=	 y}', "");
Expect(1, 39, '\p{^Bidi_M=	 y}', "");
Expect(1, 39, '\P{Bidi_M=	 y}', "");
Expect(0, 39, '\P{^Bidi_M=	 y}', "");
Error('\p{Is_Bidi_Mirrored= T/a/}');
Error('\P{Is_Bidi_Mirrored= T/a/}');
Expect(1, 41, '\p{Is_Bidi_Mirrored=t}', "");
Expect(0, 41, '\p{^Is_Bidi_Mirrored=t}', "");
Expect(0, 41, '\P{Is_Bidi_Mirrored=t}', "");
Expect(1, 41, '\P{^Is_Bidi_Mirrored=t}', "");
Expect(0, 39, '\p{Is_Bidi_Mirrored=t}', "");
Expect(1, 39, '\p{^Is_Bidi_Mirrored=t}', "");
Expect(1, 39, '\P{Is_Bidi_Mirrored=t}', "");
Expect(0, 39, '\P{^Is_Bidi_Mirrored=t}', "");
Expect(1, 41, '\p{Is_Bidi_Mirrored=_ T}', "");
Expect(0, 41, '\p{^Is_Bidi_Mirrored=_ T}', "");
Expect(0, 41, '\P{Is_Bidi_Mirrored=_ T}', "");
Expect(1, 41, '\P{^Is_Bidi_Mirrored=_ T}', "");
Expect(0, 39, '\p{Is_Bidi_Mirrored=_ T}', "");
Expect(1, 39, '\p{^Is_Bidi_Mirrored=_ T}', "");
Expect(1, 39, '\P{Is_Bidi_Mirrored=_ T}', "");
Expect(0, 39, '\P{^Is_Bidi_Mirrored=_ T}', "");
Error('\p{Is_Bidi_M=--TRUE/a/}');
Error('\P{Is_Bidi_M=--TRUE/a/}');
Expect(1, 41, '\p{Is_Bidi_M: true}', "");
Expect(0, 41, '\p{^Is_Bidi_M: true}', "");
Expect(0, 41, '\P{Is_Bidi_M: true}', "");
Expect(1, 41, '\P{^Is_Bidi_M: true}', "");
Expect(0, 39, '\p{Is_Bidi_M: true}', "");
Expect(1, 39, '\p{^Is_Bidi_M: true}', "");
Expect(1, 39, '\P{Is_Bidi_M: true}', "");
Expect(0, 39, '\P{^Is_Bidi_M: true}', "");
Expect(1, 41, '\p{Is_Bidi_M:   - True}', "");
Expect(0, 41, '\p{^Is_Bidi_M:   - True}', "");
Expect(0, 41, '\P{Is_Bidi_M:   - True}', "");
Expect(1, 41, '\P{^Is_Bidi_M:   - True}', "");
Expect(0, 39, '\p{Is_Bidi_M:   - True}', "");
Expect(1, 39, '\p{^Is_Bidi_M:   - True}', "");
Expect(1, 39, '\P{Is_Bidi_M:   - True}', "");
Expect(0, 39, '\P{^Is_Bidi_M:   - True}', "");
Error('\p{Bidi_Mirrored=-:=NO}');
Error('\P{Bidi_Mirrored=-:=NO}');
Expect(1, 39, '\p{Bidi_Mirrored=no}', "");
Expect(0, 39, '\p{^Bidi_Mirrored=no}', "");
Expect(0, 39, '\P{Bidi_Mirrored=no}', "");
Expect(1, 39, '\P{^Bidi_Mirrored=no}', "");
Expect(0, 41, '\p{Bidi_Mirrored=no}', "");
Expect(1, 41, '\p{^Bidi_Mirrored=no}', "");
Expect(1, 41, '\P{Bidi_Mirrored=no}', "");
Expect(0, 41, '\P{^Bidi_Mirrored=no}', "");
Expect(1, 39, '\p{Bidi_Mirrored=-_no}', "");
Expect(0, 39, '\p{^Bidi_Mirrored=-_no}', "");
Expect(0, 39, '\P{Bidi_Mirrored=-_no}', "");
Expect(1, 39, '\P{^Bidi_Mirrored=-_no}', "");
Expect(0, 41, '\p{Bidi_Mirrored=-_no}', "");
Expect(1, 41, '\p{^Bidi_Mirrored=-_no}', "");
Expect(1, 41, '\P{Bidi_Mirrored=-_no}', "");
Expect(0, 41, '\P{^Bidi_Mirrored=-_no}', "");
Error('\p{Bidi_M=:=_ N}');
Error('\P{Bidi_M=:=_ N}');
Expect(1, 39, '\p{Bidi_M=n}', "");
Expect(0, 39, '\p{^Bidi_M=n}', "");
Expect(0, 39, '\P{Bidi_M=n}', "");
Expect(1, 39, '\P{^Bidi_M=n}', "");
Expect(0, 41, '\p{Bidi_M=n}', "");
Expect(1, 41, '\p{^Bidi_M=n}', "");
Expect(1, 41, '\P{Bidi_M=n}', "");
Expect(0, 41, '\P{^Bidi_M=n}', "");
Expect(1, 39, '\p{Bidi_M= 	N}', "");
Expect(0, 39, '\p{^Bidi_M= 	N}', "");
Expect(0, 39, '\P{Bidi_M= 	N}', "");
Expect(1, 39, '\P{^Bidi_M= 	N}', "");
Expect(0, 41, '\p{Bidi_M= 	N}', "");
Expect(1, 41, '\p{^Bidi_M= 	N}', "");
Expect(1, 41, '\P{Bidi_M= 	N}', "");
Expect(0, 41, '\P{^Bidi_M= 	N}', "");
Error('\p{Is_Bidi_Mirrored:- F/a/}');
Error('\P{Is_Bidi_Mirrored:- F/a/}');
Expect(1, 39, '\p{Is_Bidi_Mirrored=f}', "");
Expect(0, 39, '\p{^Is_Bidi_Mirrored=f}', "");
Expect(0, 39, '\P{Is_Bidi_Mirrored=f}', "");
Expect(1, 39, '\P{^Is_Bidi_Mirrored=f}', "");
Expect(0, 41, '\p{Is_Bidi_Mirrored=f}', "");
Expect(1, 41, '\p{^Is_Bidi_Mirrored=f}', "");
Expect(1, 41, '\P{Is_Bidi_Mirrored=f}', "");
Expect(0, 41, '\P{^Is_Bidi_Mirrored=f}', "");
Expect(1, 39, '\p{Is_Bidi_Mirrored=_F}', "");
Expect(0, 39, '\p{^Is_Bidi_Mirrored=_F}', "");
Expect(0, 39, '\P{Is_Bidi_Mirrored=_F}', "");
Expect(1, 39, '\P{^Is_Bidi_Mirrored=_F}', "");
Expect(0, 41, '\p{Is_Bidi_Mirrored=_F}', "");
Expect(1, 41, '\p{^Is_Bidi_Mirrored=_F}', "");
Expect(1, 41, '\P{Is_Bidi_Mirrored=_F}', "");
Expect(0, 41, '\P{^Is_Bidi_Mirrored=_F}', "");
Error('\p{Is_Bidi_M=:=-_false}');
Error('\P{Is_Bidi_M=:=-_false}');
Expect(1, 39, '\p{Is_Bidi_M=false}', "");
Expect(0, 39, '\p{^Is_Bidi_M=false}', "");
Expect(0, 39, '\P{Is_Bidi_M=false}', "");
Expect(1, 39, '\P{^Is_Bidi_M=false}', "");
Expect(0, 41, '\p{Is_Bidi_M=false}', "");
Expect(1, 41, '\p{^Is_Bidi_M=false}', "");
Expect(1, 41, '\P{Is_Bidi_M=false}', "");
Expect(0, 41, '\P{^Is_Bidi_M=false}', "");
Expect(1, 39, '\p{Is_Bidi_M=-_False}', "");
Expect(0, 39, '\p{^Is_Bidi_M=-_False}', "");
Expect(0, 39, '\P{Is_Bidi_M=-_False}', "");
Expect(1, 39, '\P{^Is_Bidi_M=-_False}', "");
Expect(0, 41, '\p{Is_Bidi_M=-_False}', "");
Expect(1, 41, '\p{^Is_Bidi_M=-_False}', "");
Expect(1, 41, '\P{Is_Bidi_M=-_False}', "");
Expect(0, 41, '\P{^Is_Bidi_M=-_False}', "");
Error('\p{Lowercase=/a/__YES}');
Error('\P{Lowercase=/a/__YES}');
Expect(1, 122, '\p{Lowercase=yes}', "");
Expect(0, 122, '\p{^Lowercase=yes}', "");
Expect(0, 122, '\P{Lowercase=yes}', "");
Expect(1, 122, '\P{^Lowercase=yes}', "");
Expect(0, 96, '\p{Lowercase=yes}', "");
Expect(1, 96, '\p{^Lowercase=yes}', "");
Expect(1, 96, '\P{Lowercase=yes}', "");
Expect(0, 96, '\P{^Lowercase=yes}', "");
Expect(1, 122, '\p{Lowercase=_Yes}', "");
Expect(0, 122, '\p{^Lowercase=_Yes}', "");
Expect(0, 122, '\P{Lowercase=_Yes}', "");
Expect(1, 122, '\P{^Lowercase=_Yes}', "");
Expect(0, 96, '\p{Lowercase=_Yes}', "");
Expect(1, 96, '\p{^Lowercase=_Yes}', "");
Expect(1, 96, '\P{Lowercase=_Yes}', "");
Expect(0, 96, '\P{^Lowercase=_Yes}', "");
Error('\p{Lower=/a/ y}');
Error('\P{Lower=/a/ y}');
Expect(1, 122, '\p{Lower:	y}', "");
Expect(0, 122, '\p{^Lower:	y}', "");
Expect(0, 122, '\P{Lower:	y}', "");
Expect(1, 122, '\P{^Lower:	y}', "");
Expect(0, 96, '\p{Lower:	y}', "");
Expect(1, 96, '\p{^Lower:	y}', "");
Expect(1, 96, '\P{Lower:	y}', "");
Expect(0, 96, '\P{^Lower:	y}', "");
Expect(1, 122, '\p{Lower=-y}', "");
Expect(0, 122, '\p{^Lower=-y}', "");
Expect(0, 122, '\P{Lower=-y}', "");
Expect(1, 122, '\P{^Lower=-y}', "");
Expect(0, 96, '\p{Lower=-y}', "");
Expect(1, 96, '\p{^Lower=-y}', "");
Expect(1, 96, '\P{Lower=-y}', "");
Expect(0, 96, '\P{^Lower=-y}', "");
Error('\p{Is_Lowercase=_t:=}');
Error('\P{Is_Lowercase=_t:=}');
Expect(1, 122, '\p{Is_Lowercase=t}', "");
Expect(0, 122, '\p{^Is_Lowercase=t}', "");
Expect(0, 122, '\P{Is_Lowercase=t}', "");
Expect(1, 122, '\P{^Is_Lowercase=t}', "");
Expect(0, 96, '\p{Is_Lowercase=t}', "");
Expect(1, 96, '\p{^Is_Lowercase=t}', "");
Expect(1, 96, '\P{Is_Lowercase=t}', "");
Expect(0, 96, '\P{^Is_Lowercase=t}', "");
Expect(1, 122, '\p{Is_Lowercase= t}', "");
Expect(0, 122, '\p{^Is_Lowercase= t}', "");
Expect(0, 122, '\P{Is_Lowercase= t}', "");
Expect(1, 122, '\P{^Is_Lowercase= t}', "");
Expect(0, 96, '\p{Is_Lowercase= t}', "");
Expect(1, 96, '\p{^Is_Lowercase= t}', "");
Expect(1, 96, '\P{Is_Lowercase= t}', "");
Expect(0, 96, '\P{^Is_Lowercase= t}', "");
Error('\p{Is_Lower:/a/True}');
Error('\P{Is_Lower:/a/True}');
Expect(1, 122, '\p{Is_Lower=true}', "");
Expect(0, 122, '\p{^Is_Lower=true}', "");
Expect(0, 122, '\P{Is_Lower=true}', "");
Expect(1, 122, '\P{^Is_Lower=true}', "");
Expect(0, 96, '\p{Is_Lower=true}', "");
Expect(1, 96, '\p{^Is_Lower=true}', "");
Expect(1, 96, '\P{Is_Lower=true}', "");
Expect(0, 96, '\P{^Is_Lower=true}', "");
Expect(1, 122, '\p{Is_Lower=		TRUE}', "");
Expect(0, 122, '\p{^Is_Lower=		TRUE}', "");
Expect(0, 122, '\P{Is_Lower=		TRUE}', "");
Expect(1, 122, '\P{^Is_Lower=		TRUE}', "");
Expect(0, 96, '\p{Is_Lower=		TRUE}', "");
Expect(1, 96, '\p{^Is_Lower=		TRUE}', "");
Expect(1, 96, '\P{Is_Lower=		TRUE}', "");
Expect(0, 96, '\P{^Is_Lower=		TRUE}', "");
Error('\p{Lowercase=:=_-NO}');
Error('\P{Lowercase=:=_-NO}');
Expect(1, 96, '\p{Lowercase=no}', "");
Expect(0, 96, '\p{^Lowercase=no}', "");
Expect(0, 96, '\P{Lowercase=no}', "");
Expect(1, 96, '\P{^Lowercase=no}', "");
Expect(0, 122, '\p{Lowercase=no}', "");
Expect(1, 122, '\p{^Lowercase=no}', "");
Expect(1, 122, '\P{Lowercase=no}', "");
Expect(0, 122, '\P{^Lowercase=no}', "");
Expect(1, 96, '\p{Lowercase:	 -No}', "");
Expect(0, 96, '\p{^Lowercase:	 -No}', "");
Expect(0, 96, '\P{Lowercase:	 -No}', "");
Expect(1, 96, '\P{^Lowercase:	 -No}', "");
Expect(0, 122, '\p{Lowercase:	 -No}', "");
Expect(1, 122, '\p{^Lowercase:	 -No}', "");
Expect(1, 122, '\P{Lowercase:	 -No}', "");
Expect(0, 122, '\P{^Lowercase:	 -No}', "");
Error('\p{Lower= 	N/a/}');
Error('\P{Lower= 	N/a/}');
Expect(1, 96, '\p{Lower=n}', "");
Expect(0, 96, '\p{^Lower=n}', "");
Expect(0, 96, '\P{Lower=n}', "");
Expect(1, 96, '\P{^Lower=n}', "");
Expect(0, 122, '\p{Lower=n}', "");
Expect(1, 122, '\p{^Lower=n}', "");
Expect(1, 122, '\P{Lower=n}', "");
Expect(0, 122, '\P{^Lower=n}', "");
Expect(1, 96, '\p{Lower=--n}', "");
Expect(0, 96, '\p{^Lower=--n}', "");
Expect(0, 96, '\P{Lower=--n}', "");
Expect(1, 96, '\P{^Lower=--n}', "");
Expect(0, 122, '\p{Lower=--n}', "");
Expect(1, 122, '\p{^Lower=--n}', "");
Expect(1, 122, '\P{Lower=--n}', "");
Expect(0, 122, '\P{^Lower=--n}', "");
Error('\p{Is_Lowercase=F:=}');
Error('\P{Is_Lowercase=F:=}');
Expect(1, 96, '\p{Is_Lowercase=f}', "");
Expect(0, 96, '\p{^Is_Lowercase=f}', "");
Expect(0, 96, '\P{Is_Lowercase=f}', "");
Expect(1, 96, '\P{^Is_Lowercase=f}', "");
Expect(0, 122, '\p{Is_Lowercase=f}', "");
Expect(1, 122, '\p{^Is_Lowercase=f}', "");
Expect(1, 122, '\P{Is_Lowercase=f}', "");
Expect(0, 122, '\P{^Is_Lowercase=f}', "");
Expect(1, 96, '\p{Is_Lowercase=-F}', "");
Expect(0, 96, '\p{^Is_Lowercase=-F}', "");
Expect(0, 96, '\P{Is_Lowercase=-F}', "");
Expect(1, 96, '\P{^Is_Lowercase=-F}', "");
Expect(0, 122, '\p{Is_Lowercase=-F}', "");
Expect(1, 122, '\p{^Is_Lowercase=-F}', "");
Expect(1, 122, '\P{Is_Lowercase=-F}', "");
Expect(0, 122, '\P{^Is_Lowercase=-F}', "");
Error('\p{Is_Lower=_	FALSE:=}');
Error('\P{Is_Lower=_	FALSE:=}');
Expect(1, 96, '\p{Is_Lower=false}', "");
Expect(0, 96, '\p{^Is_Lower=false}', "");
Expect(0, 96, '\P{Is_Lower=false}', "");
Expect(1, 96, '\P{^Is_Lower=false}', "");
Expect(0, 122, '\p{Is_Lower=false}', "");
Expect(1, 122, '\p{^Is_Lower=false}', "");
Expect(1, 122, '\P{Is_Lower=false}', "");
Expect(0, 122, '\P{^Is_Lower=false}', "");
Expect(1, 96, '\p{Is_Lower=-FALSE}', "");
Expect(0, 96, '\p{^Is_Lower=-FALSE}', "");
Expect(0, 96, '\P{Is_Lower=-FALSE}', "");
Expect(1, 96, '\P{^Is_Lower=-FALSE}', "");
Expect(0, 122, '\p{Is_Lower=-FALSE}', "");
Expect(1, 122, '\p{^Is_Lower=-FALSE}', "");
Expect(1, 122, '\P{Is_Lower=-FALSE}', "");
Expect(0, 122, '\P{^Is_Lower=-FALSE}', "");
Error('\p{Uppercase=_	Yes:=}');
Error('\P{Uppercase=_	Yes:=}');
Expect(1, 90, '\p{Uppercase=yes}', "");
Expect(0, 90, '\p{^Uppercase=yes}', "");
Expect(0, 90, '\P{Uppercase=yes}', "");
Expect(1, 90, '\P{^Uppercase=yes}', "");
Expect(0, 64, '\p{Uppercase=yes}', "");
Expect(1, 64, '\p{^Uppercase=yes}', "");
Expect(1, 64, '\P{Uppercase=yes}', "");
Expect(0, 64, '\P{^Uppercase=yes}', "");
Expect(1, 90, '\p{Uppercase= YES}', "");
Expect(0, 90, '\p{^Uppercase= YES}', "");
Expect(0, 90, '\P{Uppercase= YES}', "");
Expect(1, 90, '\P{^Uppercase= YES}', "");
Expect(0, 64, '\p{Uppercase= YES}', "");
Expect(1, 64, '\p{^Uppercase= YES}', "");
Expect(1, 64, '\P{Uppercase= YES}', "");
Expect(0, 64, '\P{^Uppercase= YES}', "");
Error('\p{Upper=-/a/Y}');
Error('\P{Upper=-/a/Y}');
Expect(1, 90, '\p{Upper:	y}', "");
Expect(0, 90, '\p{^Upper:	y}', "");
Expect(0, 90, '\P{Upper:	y}', "");
Expect(1, 90, '\P{^Upper:	y}', "");
Expect(0, 64, '\p{Upper:	y}', "");
Expect(1, 64, '\p{^Upper:	y}', "");
Expect(1, 64, '\P{Upper:	y}', "");
Expect(0, 64, '\P{^Upper:	y}', "");
Expect(1, 90, '\p{Upper=-_Y}', "");
Expect(0, 90, '\p{^Upper=-_Y}', "");
Expect(0, 90, '\P{Upper=-_Y}', "");
Expect(1, 90, '\P{^Upper=-_Y}', "");
Expect(0, 64, '\p{Upper=-_Y}', "");
Expect(1, 64, '\p{^Upper=-_Y}', "");
Expect(1, 64, '\P{Upper=-_Y}', "");
Expect(0, 64, '\P{^Upper=-_Y}', "");
Error('\p{Is_Uppercase: _:=t}');
Error('\P{Is_Uppercase: _:=t}');
Expect(1, 90, '\p{Is_Uppercase=t}', "");
Expect(0, 90, '\p{^Is_Uppercase=t}', "");
Expect(0, 90, '\P{Is_Uppercase=t}', "");
Expect(1, 90, '\P{^Is_Uppercase=t}', "");
Expect(0, 64, '\p{Is_Uppercase=t}', "");
Expect(1, 64, '\p{^Is_Uppercase=t}', "");
Expect(1, 64, '\P{Is_Uppercase=t}', "");
Expect(0, 64, '\P{^Is_Uppercase=t}', "");
Expect(1, 90, '\p{Is_Uppercase=_t}', "");
Expect(0, 90, '\p{^Is_Uppercase=_t}', "");
Expect(0, 90, '\P{Is_Uppercase=_t}', "");
Expect(1, 90, '\P{^Is_Uppercase=_t}', "");
Expect(0, 64, '\p{Is_Uppercase=_t}', "");
Expect(1, 64, '\p{^Is_Uppercase=_t}', "");
Expect(1, 64, '\P{Is_Uppercase=_t}', "");
Expect(0, 64, '\P{^Is_Uppercase=_t}', "");
Error('\p{Is_Upper=_-TRUE/a/}');
Error('\P{Is_Upper=_-TRUE/a/}');
Expect(1, 90, '\p{Is_Upper=true}', "");
Expect(0, 90, '\p{^Is_Upper=true}', "");
Expect(0, 90, '\P{Is_Upper=true}', "");
Expect(1, 90, '\P{^Is_Upper=true}', "");
Expect(0, 64, '\p{Is_Upper=true}', "");
Expect(1, 64, '\p{^Is_Upper=true}', "");
Expect(1, 64, '\P{Is_Upper=true}', "");
Expect(0, 64, '\P{^Is_Upper=true}', "");
Expect(1, 90, '\p{Is_Upper= 	TRUE}', "");
Expect(0, 90, '\p{^Is_Upper= 	TRUE}', "");
Expect(0, 90, '\P{Is_Upper= 	TRUE}', "");
Expect(1, 90, '\P{^Is_Upper= 	TRUE}', "");
Expect(0, 64, '\p{Is_Upper= 	TRUE}', "");
Expect(1, 64, '\p{^Is_Upper= 	TRUE}', "");
Expect(1, 64, '\P{Is_Upper= 	TRUE}', "");
Expect(0, 64, '\P{^Is_Upper= 	TRUE}', "");
Error('\p{Uppercase=:=_No}');
Error('\P{Uppercase=:=_No}');
Expect(1, 64, '\p{Uppercase: no}', "");
Expect(0, 64, '\p{^Uppercase: no}', "");
Expect(0, 64, '\P{Uppercase: no}', "");
Expect(1, 64, '\P{^Uppercase: no}', "");
Expect(0, 90, '\p{Uppercase: no}', "");
Expect(1, 90, '\p{^Uppercase: no}', "");
Expect(1, 90, '\P{Uppercase: no}', "");
Expect(0, 90, '\P{^Uppercase: no}', "");
Expect(1, 64, '\p{Uppercase=	NO}', "");
Expect(0, 64, '\p{^Uppercase=	NO}', "");
Expect(0, 64, '\P{Uppercase=	NO}', "");
Expect(1, 64, '\P{^Uppercase=	NO}', "");
Expect(0, 90, '\p{Uppercase=	NO}', "");
Expect(1, 90, '\p{^Uppercase=	NO}', "");
Expect(1, 90, '\P{Uppercase=	NO}', "");
Expect(0, 90, '\P{^Uppercase=	NO}', "");
Error('\p{Upper=-n:=}');
Error('\P{Upper=-n:=}');
Expect(1, 64, '\p{Upper=n}', "");
Expect(0, 64, '\p{^Upper=n}', "");
Expect(0, 64, '\P{Upper=n}', "");
Expect(1, 64, '\P{^Upper=n}', "");
Expect(0, 90, '\p{Upper=n}', "");
Expect(1, 90, '\p{^Upper=n}', "");
Expect(1, 90, '\P{Upper=n}', "");
Expect(0, 90, '\P{^Upper=n}', "");
Expect(1, 64, '\p{Upper=-N}', "");
Expect(0, 64, '\p{^Upper=-N}', "");
Expect(0, 64, '\P{Upper=-N}', "");
Expect(1, 64, '\P{^Upper=-N}', "");
Expect(0, 90, '\p{Upper=-N}', "");
Expect(1, 90, '\p{^Upper=-N}', "");
Expect(1, 90, '\P{Upper=-N}', "");
Expect(0, 90, '\P{^Upper=-N}', "");
Error('\p{Is_Uppercase=  F:=}');
Error('\P{Is_Uppercase=  F:=}');
Expect(1, 64, '\p{Is_Uppercase=f}', "");
Expect(0, 64, '\p{^Is_Uppercase=f}', "");
Expect(0, 64, '\P{Is_Uppercase=f}', "");
Expect(1, 64, '\P{^Is_Uppercase=f}', "");
Expect(0, 90, '\p{Is_Uppercase=f}', "");
Expect(1, 90, '\p{^Is_Uppercase=f}', "");
Expect(1, 90, '\P{Is_Uppercase=f}', "");
Expect(0, 90, '\P{^Is_Uppercase=f}', "");
Expect(1, 64, '\p{Is_Uppercase=-F}', "");
Expect(0, 64, '\p{^Is_Uppercase=-F}', "");
Expect(0, 64, '\P{Is_Uppercase=-F}', "");
Expect(1, 64, '\P{^Is_Uppercase=-F}', "");
Expect(0, 90, '\p{Is_Uppercase=-F}', "");
Expect(1, 90, '\p{^Is_Uppercase=-F}', "");
Expect(1, 90, '\P{Is_Uppercase=-F}', "");
Expect(0, 90, '\P{^Is_Uppercase=-F}', "");
Error('\p{Is_Upper=/a/ FALSE}');
Error('\P{Is_Upper=/a/ FALSE}');
Expect(1, 64, '\p{Is_Upper=false}', "");
Expect(0, 64, '\p{^Is_Upper=false}', "");
Expect(0, 64, '\P{Is_Upper=false}', "");
Expect(1, 64, '\P{^Is_Upper=false}', "");
Expect(0, 90, '\p{Is_Upper=false}', "");
Expect(1, 90, '\p{^Is_Upper=false}', "");
Expect(1, 90, '\P{Is_Upper=false}', "");
Expect(0, 90, '\P{^Is_Upper=false}', "");
Expect(1, 64, '\p{Is_Upper:False}', "");
Expect(0, 64, '\p{^Is_Upper:False}', "");
Expect(0, 64, '\P{Is_Upper:False}', "");
Expect(1, 64, '\P{^Is_Upper:False}', "");
Expect(0, 90, '\p{Is_Upper:False}', "");
Expect(1, 90, '\p{^Is_Upper:False}', "");
Expect(1, 90, '\P{Is_Upper:False}', "");
Expect(0, 90, '\P{^Is_Upper:False}', "");
Error('\p{Expands_On_NFKC=Yes}');
Error('\P{Expands_On_NFKC=Yes}');
Error('\p{XO_NFKC=Y}');
Error('\P{XO_NFKC=Y}');
Error('\p{Is_Expands_On_NFKC=T}');
Error('\P{Is_Expands_On_NFKC=T}');
Error('\p{Is_XO_NFKC=True}');
Error('\P{Is_XO_NFKC=True}');
Error('\p{Expands_On_NFKC=No}');
Error('\P{Expands_On_NFKC=No}');
Error('\p{XO_NFKC=N}');
Error('\P{XO_NFKC=N}');
Error('\p{Is_Expands_On_NFKC=F}');
Error('\P{Is_Expands_On_NFKC=F}');
Error('\p{Is_XO_NFKC=False}');
Error('\P{Is_XO_NFKC=False}');
Error('\p{NFD_Quick_Check:	  yes:=}');
Error('\P{NFD_Quick_Check:	  yes:=}');
Expect(1, 191, '\p{NFD_Quick_Check=yes}', "");
Expect(0, 191, '\p{^NFD_Quick_Check=yes}', "");
Expect(0, 191, '\P{NFD_Quick_Check=yes}', "");
Expect(1, 191, '\P{^NFD_Quick_Check=yes}', "");
Expect(0, 197, '\p{NFD_Quick_Check=yes}', "");
Expect(1, 197, '\p{^NFD_Quick_Check=yes}', "");
Expect(1, 197, '\P{NFD_Quick_Check=yes}', "");
Expect(0, 197, '\P{^NFD_Quick_Check=yes}', "");
Expect(1, 191, '\p{NFD_Quick_Check=__yes}', "");
Expect(0, 191, '\p{^NFD_Quick_Check=__yes}', "");
Expect(0, 191, '\P{NFD_Quick_Check=__yes}', "");
Expect(1, 191, '\P{^NFD_Quick_Check=__yes}', "");
Expect(0, 197, '\p{NFD_Quick_Check=__yes}', "");
Expect(1, 197, '\p{^NFD_Quick_Check=__yes}', "");
Expect(1, 197, '\P{NFD_Quick_Check=__yes}', "");
Expect(0, 197, '\P{^NFD_Quick_Check=__yes}', "");
Error('\p{NFD_QC=/a/-Y}');
Error('\P{NFD_QC=/a/-Y}');
Expect(1, 191, '\p{NFD_QC=y}', "");
Expect(0, 191, '\p{^NFD_QC=y}', "");
Expect(0, 191, '\P{NFD_QC=y}', "");
Expect(1, 191, '\P{^NFD_QC=y}', "");
Expect(0, 197, '\p{NFD_QC=y}', "");
Expect(1, 197, '\p{^NFD_QC=y}', "");
Expect(1, 197, '\P{NFD_QC=y}', "");
Expect(0, 197, '\P{^NFD_QC=y}', "");
Expect(1, 191, '\p{NFD_QC=Y}', "");
Expect(0, 191, '\p{^NFD_QC=Y}', "");
Expect(0, 191, '\P{NFD_QC=Y}', "");
Expect(1, 191, '\P{^NFD_QC=Y}', "");
Expect(0, 197, '\p{NFD_QC=Y}', "");
Expect(1, 197, '\p{^NFD_QC=Y}', "");
Expect(1, 197, '\P{NFD_QC=Y}', "");
Expect(0, 197, '\P{^NFD_QC=Y}', "");
Error('\p{Is_NFD_Quick_Check:	-_Yes:=}');
Error('\P{Is_NFD_Quick_Check:	-_Yes:=}');
Expect(1, 191, '\p{Is_NFD_Quick_Check=yes}', "");
Expect(0, 191, '\p{^Is_NFD_Quick_Check=yes}', "");
Expect(0, 191, '\P{Is_NFD_Quick_Check=yes}', "");
Expect(1, 191, '\P{^Is_NFD_Quick_Check=yes}', "");
Expect(0, 197, '\p{Is_NFD_Quick_Check=yes}', "");
Expect(1, 197, '\p{^Is_NFD_Quick_Check=yes}', "");
Expect(1, 197, '\P{Is_NFD_Quick_Check=yes}', "");
Expect(0, 197, '\P{^Is_NFD_Quick_Check=yes}', "");
Expect(1, 191, '\p{Is_NFD_Quick_Check=_	Yes}', "");
Expect(0, 191, '\p{^Is_NFD_Quick_Check=_	Yes}', "");
Expect(0, 191, '\P{Is_NFD_Quick_Check=_	Yes}', "");
Expect(1, 191, '\P{^Is_NFD_Quick_Check=_	Yes}', "");
Expect(0, 197, '\p{Is_NFD_Quick_Check=_	Yes}', "");
Expect(1, 197, '\p{^Is_NFD_Quick_Check=_	Yes}', "");
Expect(1, 197, '\P{Is_NFD_Quick_Check=_	Yes}', "");
Expect(0, 197, '\P{^Is_NFD_Quick_Check=_	Yes}', "");
Error('\p{Is_NFD_QC=:=		y}');
Error('\P{Is_NFD_QC=:=		y}');
Expect(1, 191, '\p{Is_NFD_QC=y}', "");
Expect(0, 191, '\p{^Is_NFD_QC=y}', "");
Expect(0, 191, '\P{Is_NFD_QC=y}', "");
Expect(1, 191, '\P{^Is_NFD_QC=y}', "");
Expect(0, 197, '\p{Is_NFD_QC=y}', "");
Expect(1, 197, '\p{^Is_NFD_QC=y}', "");
Expect(1, 197, '\P{Is_NFD_QC=y}', "");
Expect(0, 197, '\P{^Is_NFD_QC=y}', "");
Expect(1, 191, '\p{Is_NFD_QC=_	Y}', "");
Expect(0, 191, '\p{^Is_NFD_QC=_	Y}', "");
Expect(0, 191, '\P{Is_NFD_QC=_	Y}', "");
Expect(1, 191, '\P{^Is_NFD_QC=_	Y}', "");
Expect(0, 197, '\p{Is_NFD_QC=_	Y}', "");
Expect(1, 197, '\p{^Is_NFD_QC=_	Y}', "");
Expect(1, 197, '\P{Is_NFD_QC=_	Y}', "");
Expect(0, 197, '\P{^Is_NFD_QC=_	Y}', "");
Error('\p{NFD_Quick_Check:/a/		no}');
Error('\P{NFD_Quick_Check:/a/		no}');
Expect(1, 197, '\p{NFD_Quick_Check:no}', "");
Expect(0, 197, '\p{^NFD_Quick_Check:no}', "");
Expect(0, 197, '\P{NFD_Quick_Check:no}', "");
Expect(1, 197, '\P{^NFD_Quick_Check:no}', "");
Expect(0, 191, '\p{NFD_Quick_Check:no}', "");
Expect(1, 191, '\p{^NFD_Quick_Check:no}', "");
Expect(1, 191, '\P{NFD_Quick_Check:no}', "");
Expect(0, 191, '\P{^NFD_Quick_Check:no}', "");
Expect(1, 197, '\p{NFD_Quick_Check=__No}', "");
Expect(0, 197, '\p{^NFD_Quick_Check=__No}', "");
Expect(0, 197, '\P{NFD_Quick_Check=__No}', "");
Expect(1, 197, '\P{^NFD_Quick_Check=__No}', "");
Expect(0, 191, '\p{NFD_Quick_Check=__No}', "");
Expect(1, 191, '\p{^NFD_Quick_Check=__No}', "");
Expect(1, 191, '\P{NFD_Quick_Check=__No}', "");
Expect(0, 191, '\P{^NFD_Quick_Check=__No}', "");
Error('\p{NFD_QC=:=_ n}');
Error('\P{NFD_QC=:=_ n}');
Expect(1, 197, '\p{NFD_QC=n}', "");
Expect(0, 197, '\p{^NFD_QC=n}', "");
Expect(0, 197, '\P{NFD_QC=n}', "");
Expect(1, 197, '\P{^NFD_QC=n}', "");
Expect(0, 191, '\p{NFD_QC=n}', "");
Expect(1, 191, '\p{^NFD_QC=n}', "");
Expect(1, 191, '\P{NFD_QC=n}', "");
Expect(0, 191, '\P{^NFD_QC=n}', "");
Expect(1, 197, '\p{NFD_QC=	_N}', "");
Expect(0, 197, '\p{^NFD_QC=	_N}', "");
Expect(0, 197, '\P{NFD_QC=	_N}', "");
Expect(1, 197, '\P{^NFD_QC=	_N}', "");
Expect(0, 191, '\p{NFD_QC=	_N}', "");
Expect(1, 191, '\p{^NFD_QC=	_N}', "");
Expect(1, 191, '\P{NFD_QC=	_N}', "");
Expect(0, 191, '\P{^NFD_QC=	_N}', "");
Error('\p{Is_NFD_Quick_Check:   -	no/a/}');
Error('\P{Is_NFD_Quick_Check:   -	no/a/}');
Expect(1, 197, '\p{Is_NFD_Quick_Check=no}', "");
Expect(0, 197, '\p{^Is_NFD_Quick_Check=no}', "");
Expect(0, 197, '\P{Is_NFD_Quick_Check=no}', "");
Expect(1, 197, '\P{^Is_NFD_Quick_Check=no}', "");
Expect(0, 191, '\p{Is_NFD_Quick_Check=no}', "");
Expect(1, 191, '\p{^Is_NFD_Quick_Check=no}', "");
Expect(1, 191, '\P{Is_NFD_Quick_Check=no}', "");
Expect(0, 191, '\P{^Is_NFD_Quick_Check=no}', "");
Expect(1, 197, '\p{Is_NFD_Quick_Check=	no}', "");
Expect(0, 197, '\p{^Is_NFD_Quick_Check=	no}', "");
Expect(0, 197, '\P{Is_NFD_Quick_Check=	no}', "");
Expect(1, 197, '\P{^Is_NFD_Quick_Check=	no}', "");
Expect(0, 191, '\p{Is_NFD_Quick_Check=	no}', "");
Expect(1, 191, '\p{^Is_NFD_Quick_Check=	no}', "");
Expect(1, 191, '\P{Is_NFD_Quick_Check=	no}', "");
Expect(0, 191, '\P{^Is_NFD_Quick_Check=	no}', "");
Error('\p{Is_NFD_QC= _N:=}');
Error('\P{Is_NFD_QC= _N:=}');
Expect(1, 197, '\p{Is_NFD_QC=n}', "");
Expect(0, 197, '\p{^Is_NFD_QC=n}', "");
Expect(0, 197, '\P{Is_NFD_QC=n}', "");
Expect(1, 197, '\P{^Is_NFD_QC=n}', "");
Expect(0, 191, '\p{Is_NFD_QC=n}', "");
Expect(1, 191, '\p{^Is_NFD_QC=n}', "");
Expect(1, 191, '\P{Is_NFD_QC=n}', "");
Expect(0, 191, '\P{^Is_NFD_QC=n}', "");
Expect(1, 197, '\p{Is_NFD_QC=_-N}', "");
Expect(0, 197, '\p{^Is_NFD_QC=_-N}', "");
Expect(0, 197, '\P{Is_NFD_QC=_-N}', "");
Expect(1, 197, '\P{^Is_NFD_QC=_-N}', "");
Expect(0, 191, '\p{Is_NFD_QC=_-N}', "");
Expect(1, 191, '\p{^Is_NFD_QC=_-N}', "");
Expect(1, 191, '\P{Is_NFD_QC=_-N}', "");
Expect(0, 191, '\P{^Is_NFD_QC=_-N}', "");
Error('\p{Line_Break=- SPACE/a/}');
Error('\P{Line_Break=- SPACE/a/}');
Expect(1, 32, '\p{Line_Break=space}', "");
Expect(0, 32, '\p{^Line_Break=space}', "");
Expect(0, 32, '\P{Line_Break=space}', "");
Expect(1, 32, '\P{^Line_Break=space}', "");
Expect(0, 31, '\p{Line_Break=space}', "");
Expect(1, 31, '\p{^Line_Break=space}', "");
Expect(1, 31, '\P{Line_Break=space}', "");
Expect(0, 31, '\P{^Line_Break=space}', "");
Expect(1, 32, '\p{Line_Break=-Space}', "");
Expect(0, 32, '\p{^Line_Break=-Space}', "");
Expect(0, 32, '\P{Line_Break=-Space}', "");
Expect(1, 32, '\P{^Line_Break=-Space}', "");
Expect(0, 31, '\p{Line_Break=-Space}', "");
Expect(1, 31, '\p{^Line_Break=-Space}', "");
Expect(1, 31, '\P{Line_Break=-Space}', "");
Expect(0, 31, '\P{^Line_Break=-Space}', "");
Error('\p{Lb=-/a/sp}');
Error('\P{Lb=-/a/sp}');
Expect(1, 32, '\p{Lb=sp}', "");
Expect(0, 32, '\p{^Lb=sp}', "");
Expect(0, 32, '\P{Lb=sp}', "");
Expect(1, 32, '\P{^Lb=sp}', "");
Expect(0, 31, '\p{Lb=sp}', "");
Expect(1, 31, '\p{^Lb=sp}', "");
Expect(1, 31, '\P{Lb=sp}', "");
Expect(0, 31, '\P{^Lb=sp}', "");
Expect(1, 32, '\p{Lb= _SP}', "");
Expect(0, 32, '\p{^Lb= _SP}', "");
Expect(0, 32, '\P{Lb= _SP}', "");
Expect(1, 32, '\P{^Lb= _SP}', "");
Expect(0, 31, '\p{Lb= _SP}', "");
Expect(1, 31, '\p{^Lb= _SP}', "");
Expect(1, 31, '\P{Lb= _SP}', "");
Expect(0, 31, '\P{^Lb= _SP}', "");
Error('\p{Is_Line_Break=:=SPACE}');
Error('\P{Is_Line_Break=:=SPACE}');
Expect(1, 32, '\p{Is_Line_Break=space}', "");
Expect(0, 32, '\p{^Is_Line_Break=space}', "");
Expect(0, 32, '\P{Is_Line_Break=space}', "");
Expect(1, 32, '\P{^Is_Line_Break=space}', "");
Expect(0, 31, '\p{Is_Line_Break=space}', "");
Expect(1, 31, '\p{^Is_Line_Break=space}', "");
Expect(1, 31, '\P{Is_Line_Break=space}', "");
Expect(0, 31, '\P{^Is_Line_Break=space}', "");
Expect(1, 32, '\p{Is_Line_Break:   	_SPACE}', "");
Expect(0, 32, '\p{^Is_Line_Break:   	_SPACE}', "");
Expect(0, 32, '\P{Is_Line_Break:   	_SPACE}', "");
Expect(1, 32, '\P{^Is_Line_Break:   	_SPACE}', "");
Expect(0, 31, '\p{Is_Line_Break:   	_SPACE}', "");
Expect(1, 31, '\p{^Is_Line_Break:   	_SPACE}', "");
Expect(1, 31, '\P{Is_Line_Break:   	_SPACE}', "");
Expect(0, 31, '\P{^Is_Line_Break:   	_SPACE}', "");
Error('\p{Is_Lb=-:=SP}');
Error('\P{Is_Lb=-:=SP}');
Expect(1, 32, '\p{Is_Lb=sp}', "");
Expect(0, 32, '\p{^Is_Lb=sp}', "");
Expect(0, 32, '\P{Is_Lb=sp}', "");
Expect(1, 32, '\P{^Is_Lb=sp}', "");
Expect(0, 31, '\p{Is_Lb=sp}', "");
Expect(1, 31, '\p{^Is_Lb=sp}', "");
Expect(1, 31, '\P{Is_Lb=sp}', "");
Expect(0, 31, '\P{^Is_Lb=sp}', "");
Expect(1, 32, '\p{Is_Lb=_SP}', "");
Expect(0, 32, '\p{^Is_Lb=_SP}', "");
Expect(0, 32, '\P{Is_Lb=_SP}', "");
Expect(1, 32, '\P{^Is_Lb=_SP}', "");
Expect(0, 31, '\p{Is_Lb=_SP}', "");
Expect(1, 31, '\p{^Is_Lb=_SP}', "");
Expect(1, 31, '\P{Is_Lb=_SP}', "");
Expect(0, 31, '\P{^Is_Lb=_SP}', "");
Error('\p{Line_Break=-_Glue/a/}');
Error('\P{Line_Break=-_Glue/a/}');
Expect(1, 160, '\p{Line_Break=glue}', "");
Expect(0, 160, '\p{^Line_Break=glue}', "");
Expect(0, 160, '\P{Line_Break=glue}', "");
Expect(1, 160, '\P{^Line_Break=glue}', "");
Expect(0, 159, '\p{Line_Break=glue}', "");
Expect(1, 159, '\p{^Line_Break=glue}', "");
Expect(1, 159, '\P{Line_Break=glue}', "");
Expect(0, 159, '\P{^Line_Break=glue}', "");
Expect(1, 160, '\p{Line_Break=	 Glue}', "");
Expect(0, 160, '\p{^Line_Break=	 Glue}', "");
Expect(0, 160, '\P{Line_Break=	 Glue}', "");
Expect(1, 160, '\P{^Line_Break=	 Glue}', "");
Expect(0, 159, '\p{Line_Break=	 Glue}', "");
Expect(1, 159, '\p{^Line_Break=	 Glue}', "");
Expect(1, 159, '\P{Line_Break=	 Glue}', "");
Expect(0, 159, '\P{^Line_Break=	 Glue}', "");
Error('\p{Lb=_/a/GL}');
Error('\P{Lb=_/a/GL}');
Expect(1, 160, '\p{Lb=gl}', "");
Expect(0, 160, '\p{^Lb=gl}', "");
Expect(0, 160, '\P{Lb=gl}', "");
Expect(1, 160, '\P{^Lb=gl}', "");
Expect(0, 159, '\p{Lb=gl}', "");
Expect(1, 159, '\p{^Lb=gl}', "");
Expect(1, 159, '\P{Lb=gl}', "");
Expect(0, 159, '\P{^Lb=gl}', "");
Expect(1, 160, '\p{Lb=_-GL}', "");
Expect(0, 160, '\p{^Lb=_-GL}', "");
Expect(0, 160, '\P{Lb=_-GL}', "");
Expect(1, 160, '\P{^Lb=_-GL}', "");
Expect(0, 159, '\p{Lb=_-GL}', "");
Expect(1, 159, '\p{^Lb=_-GL}', "");
Expect(1, 159, '\P{Lb=_-GL}', "");
Expect(0, 159, '\P{^Lb=_-GL}', "");
Error('\p{Is_Line_Break=-:=GLUE}');
Error('\P{Is_Line_Break=-:=GLUE}');
Expect(1, 160, '\p{Is_Line_Break=glue}', "");
Expect(0, 160, '\p{^Is_Line_Break=glue}', "");
Expect(0, 160, '\P{Is_Line_Break=glue}', "");
Expect(1, 160, '\P{^Is_Line_Break=glue}', "");
Expect(0, 159, '\p{Is_Line_Break=glue}', "");
Expect(1, 159, '\p{^Is_Line_Break=glue}', "");
Expect(1, 159, '\P{Is_Line_Break=glue}', "");
Expect(0, 159, '\P{^Is_Line_Break=glue}', "");
Expect(1, 160, '\p{Is_Line_Break=-glue}', "");
Expect(0, 160, '\p{^Is_Line_Break=-glue}', "");
Expect(0, 160, '\P{Is_Line_Break=-glue}', "");
Expect(1, 160, '\P{^Is_Line_Break=-glue}', "");
Expect(0, 159, '\p{Is_Line_Break=-glue}', "");
Expect(1, 159, '\p{^Is_Line_Break=-glue}', "");
Expect(1, 159, '\P{Is_Line_Break=-glue}', "");
Expect(0, 159, '\P{^Is_Line_Break=-glue}', "");
Error('\p{Is_Lb= GL/a/}');
Error('\P{Is_Lb= GL/a/}');
Expect(1, 160, '\p{Is_Lb=gl}', "");
Expect(0, 160, '\p{^Is_Lb=gl}', "");
Expect(0, 160, '\P{Is_Lb=gl}', "");
Expect(1, 160, '\P{^Is_Lb=gl}', "");
Expect(0, 159, '\p{Is_Lb=gl}', "");
Expect(1, 159, '\p{^Is_Lb=gl}', "");
Expect(1, 159, '\P{Is_Lb=gl}', "");
Expect(0, 159, '\P{^Is_Lb=gl}', "");
Expect(1, 160, '\p{Is_Lb=	 GL}', "");
Expect(0, 160, '\p{^Is_Lb=	 GL}', "");
Expect(0, 160, '\P{Is_Lb=	 GL}', "");
Expect(1, 160, '\P{^Is_Lb=	 GL}', "");
Expect(0, 159, '\p{Is_Lb=	 GL}', "");
Expect(1, 159, '\p{^Is_Lb=	 GL}', "");
Expect(1, 159, '\P{Is_Lb=	 GL}', "");
Expect(0, 159, '\P{^Is_Lb=	 GL}', "");
Error('\p{Line_Break= surrogate/a/}');
Error('\P{Line_Break= surrogate/a/}');
Expect(0, 55295, '\p{Line_Break=surrogate}', 'deprecated');
Expect(1, 55295, '\p{^Line_Break=surrogate}', 'deprecated');
Expect(1, 55295, '\P{Line_Break=surrogate}', 'deprecated');
Expect(0, 55295, '\P{^Line_Break=surrogate}', 'deprecated');
Expect(0, 55295, '\p{Line_Break=--Surrogate}', 'deprecated');
Expect(1, 55295, '\p{^Line_Break=--Surrogate}', 'deprecated');
Expect(1, 55295, '\P{Line_Break=--Surrogate}', 'deprecated');
Expect(0, 55295, '\P{^Line_Break=--Surrogate}', 'deprecated');
Error('\p{Lb=	:=sg}');
Error('\P{Lb=	:=sg}');
Expect(0, 55295, '\p{Lb=sg}', 'deprecated');
Expect(1, 55295, '\p{^Lb=sg}', 'deprecated');
Expect(1, 55295, '\P{Lb=sg}', 'deprecated');
Expect(0, 55295, '\P{^Lb=sg}', 'deprecated');
Expect(0, 55295, '\p{Lb= 	SG}', 'deprecated');
Expect(1, 55295, '\p{^Lb= 	SG}', 'deprecated');
Expect(1, 55295, '\P{Lb= 	SG}', 'deprecated');
Expect(0, 55295, '\P{^Lb= 	SG}', 'deprecated');
Error('\p{Is_Line_Break: - SURROGATE:=}');
Error('\P{Is_Line_Break: - SURROGATE:=}');
Expect(0, 55295, '\p{Is_Line_Break=surrogate}', 'deprecated');
Expect(1, 55295, '\p{^Is_Line_Break=surrogate}', 'deprecated');
Expect(1, 55295, '\P{Is_Line_Break=surrogate}', 'deprecated');
Expect(0, 55295, '\P{^Is_Line_Break=surrogate}', 'deprecated');
Expect(0, 55295, '\p{Is_Line_Break=--surrogate}', 'deprecated');
Expect(1, 55295, '\p{^Is_Line_Break=--surrogate}', 'deprecated');
Expect(1, 55295, '\P{Is_Line_Break=--surrogate}', 'deprecated');
Expect(0, 55295, '\P{^Is_Line_Break=--surrogate}', 'deprecated');
Error('\p{Is_Lb=/a/ -SG}');
Error('\P{Is_Lb=/a/ -SG}');
Expect(0, 55295, '\p{Is_Lb=sg}', 'deprecated');
Expect(1, 55295, '\p{^Is_Lb=sg}', 'deprecated');
Expect(1, 55295, '\P{Is_Lb=sg}', 'deprecated');
Expect(0, 55295, '\P{^Is_Lb=sg}', 'deprecated');
Expect(0, 55295, '\p{Is_Lb=_sg}', 'deprecated');
Expect(1, 55295, '\p{^Is_Lb=_sg}', 'deprecated');
Expect(1, 55295, '\P{Is_Lb=_sg}', 'deprecated');
Expect(0, 55295, '\P{^Is_Lb=_sg}', 'deprecated');
Error('\p{Line_Break=:=--Unknown}');
Error('\P{Line_Break=:=--Unknown}');
Expect(1, 889, '\p{Line_Break=unknown}', "");
Expect(0, 889, '\p{^Line_Break=unknown}', "");
Expect(0, 889, '\P{Line_Break=unknown}', "");
Expect(1, 889, '\P{^Line_Break=unknown}', "");
Expect(0, 887, '\p{Line_Break=unknown}', "");
Expect(1, 887, '\p{^Line_Break=unknown}', "");
Expect(1, 887, '\P{Line_Break=unknown}', "");
Expect(0, 887, '\P{^Line_Break=unknown}', "");
Expect(1, 889, '\p{Line_Break=	_UNKNOWN}', "");
Expect(0, 889, '\p{^Line_Break=	_UNKNOWN}', "");
Expect(0, 889, '\P{Line_Break=	_UNKNOWN}', "");
Expect(1, 889, '\P{^Line_Break=	_UNKNOWN}', "");
Expect(0, 887, '\p{Line_Break=	_UNKNOWN}', "");
Expect(1, 887, '\p{^Line_Break=	_UNKNOWN}', "");
Expect(1, 887, '\P{Line_Break=	_UNKNOWN}', "");
Expect(0, 887, '\P{^Line_Break=	_UNKNOWN}', "");
Error('\p{Lb=- XX:=}');
Error('\P{Lb=- XX:=}');
Expect(1, 889, '\p{Lb:xx}', "");
Expect(0, 889, '\p{^Lb:xx}', "");
Expect(0, 889, '\P{Lb:xx}', "");
Expect(1, 889, '\P{^Lb:xx}', "");
Expect(0, 887, '\p{Lb:xx}', "");
Expect(1, 887, '\p{^Lb:xx}', "");
Expect(1, 887, '\P{Lb:xx}', "");
Expect(0, 887, '\P{^Lb:xx}', "");
Expect(1, 889, '\p{Lb=-XX}', "");
Expect(0, 889, '\p{^Lb=-XX}', "");
Expect(0, 889, '\P{Lb=-XX}', "");
Expect(1, 889, '\P{^Lb=-XX}', "");
Expect(0, 887, '\p{Lb=-XX}', "");
Expect(1, 887, '\p{^Lb=-XX}', "");
Expect(1, 887, '\P{Lb=-XX}', "");
Expect(0, 887, '\P{^Lb=-XX}', "");
Error('\p{Is_Line_Break= _UNKNOWN/a/}');
Error('\P{Is_Line_Break= _UNKNOWN/a/}');
Expect(1, 889, '\p{Is_Line_Break=unknown}', "");
Expect(0, 889, '\p{^Is_Line_Break=unknown}', "");
Expect(0, 889, '\P{Is_Line_Break=unknown}', "");
Expect(1, 889, '\P{^Is_Line_Break=unknown}', "");
Expect(0, 887, '\p{Is_Line_Break=unknown}', "");
Expect(1, 887, '\p{^Is_Line_Break=unknown}', "");
Expect(1, 887, '\P{Is_Line_Break=unknown}', "");
Expect(0, 887, '\P{^Is_Line_Break=unknown}', "");
Expect(1, 889, '\p{Is_Line_Break=		UNKNOWN}', "");
Expect(0, 889, '\p{^Is_Line_Break=		UNKNOWN}', "");
Expect(0, 889, '\P{Is_Line_Break=		UNKNOWN}', "");
Expect(1, 889, '\P{^Is_Line_Break=		UNKNOWN}', "");
Expect(0, 887, '\p{Is_Line_Break=		UNKNOWN}', "");
Expect(1, 887, '\p{^Is_Line_Break=		UNKNOWN}', "");
Expect(1, 887, '\P{Is_Line_Break=		UNKNOWN}', "");
Expect(0, 887, '\P{^Is_Line_Break=		UNKNOWN}', "");
Error('\p{Is_Lb=_/a/XX}');
Error('\P{Is_Lb=_/a/XX}');
Expect(1, 889, '\p{Is_Lb=xx}', "");
Expect(0, 889, '\p{^Is_Lb=xx}', "");
Expect(0, 889, '\P{Is_Lb=xx}', "");
Expect(1, 889, '\P{^Is_Lb=xx}', "");
Expect(0, 887, '\p{Is_Lb=xx}', "");
Expect(1, 887, '\p{^Is_Lb=xx}', "");
Expect(1, 887, '\P{Is_Lb=xx}', "");
Expect(0, 887, '\P{^Is_Lb=xx}', "");
Expect(1, 889, '\p{Is_Lb=	-XX}', "");
Expect(0, 889, '\p{^Is_Lb=	-XX}', "");
Expect(0, 889, '\P{Is_Lb=	-XX}', "");
Expect(1, 889, '\P{^Is_Lb=	-XX}', "");
Expect(0, 887, '\p{Is_Lb=	-XX}', "");
Expect(1, 887, '\p{^Is_Lb=	-XX}', "");
Expect(1, 887, '\P{Is_Lb=	-XX}', "");
Expect(0, 887, '\P{^Is_Lb=	-XX}', "");
Error('\p{Line_Break=  Numeric:=}');
Error('\P{Line_Break=  Numeric:=}');
Expect(1, 57, '\p{Line_Break=numeric}', "");
Expect(0, 57, '\p{^Line_Break=numeric}', "");
Expect(0, 57, '\P{Line_Break=numeric}', "");
Expect(1, 57, '\P{^Line_Break=numeric}', "");
Expect(0, 47, '\p{Line_Break=numeric}', "");
Expect(1, 47, '\p{^Line_Break=numeric}', "");
Expect(1, 47, '\P{Line_Break=numeric}', "");
Expect(0, 47, '\P{^Line_Break=numeric}', "");
Expect(1, 57, '\p{Line_Break=	 Numeric}', "");
Expect(0, 57, '\p{^Line_Break=	 Numeric}', "");
Expect(0, 57, '\P{Line_Break=	 Numeric}', "");
Expect(1, 57, '\P{^Line_Break=	 Numeric}', "");
Expect(0, 47, '\p{Line_Break=	 Numeric}', "");
Expect(1, 47, '\p{^Line_Break=	 Numeric}', "");
Expect(1, 47, '\P{Line_Break=	 Numeric}', "");
Expect(0, 47, '\P{^Line_Break=	 Numeric}', "");
Error('\p{Lb=/a/-	NU}');
Error('\P{Lb=/a/-	NU}');
Expect(1, 57, '\p{Lb=nu}', "");
Expect(0, 57, '\p{^Lb=nu}', "");
Expect(0, 57, '\P{Lb=nu}', "");
Expect(1, 57, '\P{^Lb=nu}', "");
Expect(0, 47, '\p{Lb=nu}', "");
Expect(1, 47, '\p{^Lb=nu}', "");
Expect(1, 47, '\P{Lb=nu}', "");
Expect(0, 47, '\P{^Lb=nu}', "");
Expect(1, 57, '\p{Lb=_NU}', "");
Expect(0, 57, '\p{^Lb=_NU}', "");
Expect(0, 57, '\P{Lb=_NU}', "");
Expect(1, 57, '\P{^Lb=_NU}', "");
Expect(0, 47, '\p{Lb=_NU}', "");
Expect(1, 47, '\p{^Lb=_NU}', "");
Expect(1, 47, '\P{Lb=_NU}', "");
Expect(0, 47, '\P{^Lb=_NU}', "");
Error('\p{Is_Line_Break=:=numeric}');
Error('\P{Is_Line_Break=:=numeric}');
Expect(1, 57, '\p{Is_Line_Break=numeric}', "");
Expect(0, 57, '\p{^Is_Line_Break=numeric}', "");
Expect(0, 57, '\P{Is_Line_Break=numeric}', "");
Expect(1, 57, '\P{^Is_Line_Break=numeric}', "");
Expect(0, 47, '\p{Is_Line_Break=numeric}', "");
Expect(1, 47, '\p{^Is_Line_Break=numeric}', "");
Expect(1, 47, '\P{Is_Line_Break=numeric}', "");
Expect(0, 47, '\P{^Is_Line_Break=numeric}', "");
Expect(1, 57, '\p{Is_Line_Break=__Numeric}', "");
Expect(0, 57, '\p{^Is_Line_Break=__Numeric}', "");
Expect(0, 57, '\P{Is_Line_Break=__Numeric}', "");
Expect(1, 57, '\P{^Is_Line_Break=__Numeric}', "");
Expect(0, 47, '\p{Is_Line_Break=__Numeric}', "");
Expect(1, 47, '\p{^Is_Line_Break=__Numeric}', "");
Expect(1, 47, '\P{Is_Line_Break=__Numeric}', "");
Expect(0, 47, '\P{^Is_Line_Break=__Numeric}', "");
Error('\p{Is_Lb=	:=nu}');
Error('\P{Is_Lb=	:=nu}');
Expect(1, 57, '\p{Is_Lb=nu}', "");
Expect(0, 57, '\p{^Is_Lb=nu}', "");
Expect(0, 57, '\P{Is_Lb=nu}', "");
Expect(1, 57, '\P{^Is_Lb=nu}', "");
Expect(0, 47, '\p{Is_Lb=nu}', "");
Expect(1, 47, '\p{^Is_Lb=nu}', "");
Expect(1, 47, '\P{Is_Lb=nu}', "");
Expect(0, 47, '\P{^Is_Lb=nu}', "");
Expect(1, 57, '\p{Is_Lb=	-nu}', "");
Expect(0, 57, '\p{^Is_Lb=	-nu}', "");
Expect(0, 57, '\P{Is_Lb=	-nu}', "");
Expect(1, 57, '\P{^Is_Lb=	-nu}', "");
Expect(0, 47, '\p{Is_Lb=	-nu}', "");
Expect(1, 47, '\p{^Is_Lb=	-nu}', "");
Expect(1, 47, '\P{Is_Lb=	-nu}', "");
Expect(0, 47, '\P{^Is_Lb=	-nu}', "");
Error('\p{Line_Break=/a/	_break-Before}');
Error('\P{Line_Break=/a/	_break-Before}');
Expect(1, 180, '\p{Line_Break:	breakbefore}', "");
Expect(0, 180, '\p{^Line_Break:	breakbefore}', "");
Expect(0, 180, '\P{Line_Break:	breakbefore}', "");
Expect(1, 180, '\P{^Line_Break:	breakbefore}', "");
Expect(0, 179, '\p{Line_Break:	breakbefore}', "");
Expect(1, 179, '\p{^Line_Break:	breakbefore}', "");
Expect(1, 179, '\P{Line_Break:	breakbefore}', "");
Expect(0, 179, '\P{^Line_Break:	breakbefore}', "");
Expect(1, 180, '\p{Line_Break=	break_Before}', "");
Expect(0, 180, '\p{^Line_Break=	break_Before}', "");
Expect(0, 180, '\P{Line_Break=	break_Before}', "");
Expect(1, 180, '\P{^Line_Break=	break_Before}', "");
Expect(0, 179, '\p{Line_Break=	break_Before}', "");
Expect(1, 179, '\p{^Line_Break=	break_Before}', "");
Expect(1, 179, '\P{Line_Break=	break_Before}', "");
Expect(0, 179, '\P{^Line_Break=	break_Before}', "");
Error('\p{Lb= :=BB}');
Error('\P{Lb= :=BB}');
Expect(1, 180, '\p{Lb=bb}', "");
Expect(0, 180, '\p{^Lb=bb}', "");
Expect(0, 180, '\P{Lb=bb}', "");
Expect(1, 180, '\P{^Lb=bb}', "");
Expect(0, 179, '\p{Lb=bb}', "");
Expect(1, 179, '\p{^Lb=bb}', "");
Expect(1, 179, '\P{Lb=bb}', "");
Expect(0, 179, '\P{^Lb=bb}', "");
Expect(1, 180, '\p{Lb:_-BB}', "");
Expect(0, 180, '\p{^Lb:_-BB}', "");
Expect(0, 180, '\P{Lb:_-BB}', "");
Expect(1, 180, '\P{^Lb:_-BB}', "");
Expect(0, 179, '\p{Lb:_-BB}', "");
Expect(1, 179, '\p{^Lb:_-BB}', "");
Expect(1, 179, '\P{Lb:_-BB}', "");
Expect(0, 179, '\P{^Lb:_-BB}', "");
Error('\p{Is_Line_Break:	__Break Before:=}');
Error('\P{Is_Line_Break:	__Break Before:=}');
Expect(1, 180, '\p{Is_Line_Break=breakbefore}', "");
Expect(0, 180, '\p{^Is_Line_Break=breakbefore}', "");
Expect(0, 180, '\P{Is_Line_Break=breakbefore}', "");
Expect(1, 180, '\P{^Is_Line_Break=breakbefore}', "");
Expect(0, 179, '\p{Is_Line_Break=breakbefore}', "");
Expect(1, 179, '\p{^Is_Line_Break=breakbefore}', "");
Expect(1, 179, '\P{Is_Line_Break=breakbefore}', "");
Expect(0, 179, '\P{^Is_Line_Break=breakbefore}', "");
Expect(1, 180, '\p{Is_Line_Break= break	before}', "");
Expect(0, 180, '\p{^Is_Line_Break= break	before}', "");
Expect(0, 180, '\P{Is_Line_Break= break	before}', "");
Expect(1, 180, '\P{^Is_Line_Break= break	before}', "");
Expect(0, 179, '\p{Is_Line_Break= break	before}', "");
Expect(1, 179, '\p{^Is_Line_Break= break	before}', "");
Expect(1, 179, '\P{Is_Line_Break= break	before}', "");
Expect(0, 179, '\P{^Is_Line_Break= break	before}', "");
Error('\p{Is_Lb=-	BB:=}');
Error('\P{Is_Lb=-	BB:=}');
Expect(1, 180, '\p{Is_Lb=bb}', "");
Expect(0, 180, '\p{^Is_Lb=bb}', "");
Expect(0, 180, '\P{Is_Lb=bb}', "");
Expect(1, 180, '\P{^Is_Lb=bb}', "");
Expect(0, 179, '\p{Is_Lb=bb}', "");
Expect(1, 179, '\p{^Is_Lb=bb}', "");
Expect(1, 179, '\P{Is_Lb=bb}', "");
Expect(0, 179, '\P{^Is_Lb=bb}', "");
Expect(1, 180, '\p{Is_Lb=BB}', "");
Expect(0, 180, '\p{^Is_Lb=BB}', "");
Expect(0, 180, '\P{Is_Lb=BB}', "");
Expect(1, 180, '\P{^Is_Lb=BB}', "");
Expect(0, 179, '\p{Is_Lb=BB}', "");
Expect(1, 179, '\p{^Is_Lb=BB}', "");
Expect(1, 179, '\P{Is_Lb=BB}', "");
Expect(0, 179, '\P{^Is_Lb=BB}', "");
Error('\p{Line_Break=-	ZWSpace:=}');
Error('\P{Line_Break=-	ZWSpace:=}');
Expect(1, 8203, '\p{Line_Break=zwspace}', "");
Expect(0, 8203, '\p{^Line_Break=zwspace}', "");
Expect(0, 8203, '\P{Line_Break=zwspace}', "");
Expect(1, 8203, '\P{^Line_Break=zwspace}', "");
Expect(0, 8202, '\p{Line_Break=zwspace}', "");
Expect(1, 8202, '\p{^Line_Break=zwspace}', "");
Expect(1, 8202, '\P{Line_Break=zwspace}', "");
Expect(0, 8202, '\P{^Line_Break=zwspace}', "");
Expect(1, 8203, '\p{Line_Break=  ZWSpace}', "");
Expect(0, 8203, '\p{^Line_Break=  ZWSpace}', "");
Expect(0, 8203, '\P{Line_Break=  ZWSpace}', "");
Expect(1, 8203, '\P{^Line_Break=  ZWSpace}', "");
Expect(0, 8202, '\p{Line_Break=  ZWSpace}', "");
Expect(1, 8202, '\p{^Line_Break=  ZWSpace}', "");
Expect(1, 8202, '\P{Line_Break=  ZWSpace}', "");
Expect(0, 8202, '\P{^Line_Break=  ZWSpace}', "");
Error('\p{Lb=/a/-	zw}');
Error('\P{Lb=/a/-	zw}');
Expect(1, 8203, '\p{Lb=zw}', "");
Expect(0, 8203, '\p{^Lb=zw}', "");
Expect(0, 8203, '\P{Lb=zw}', "");
Expect(1, 8203, '\P{^Lb=zw}', "");
Expect(0, 8202, '\p{Lb=zw}', "");
Expect(1, 8202, '\p{^Lb=zw}', "");
Expect(1, 8202, '\P{Lb=zw}', "");
Expect(0, 8202, '\P{^Lb=zw}', "");
Expect(1, 8203, '\p{Lb: _ZW}', "");
Expect(0, 8203, '\p{^Lb: _ZW}', "");
Expect(0, 8203, '\P{Lb: _ZW}', "");
Expect(1, 8203, '\P{^Lb: _ZW}', "");
Expect(0, 8202, '\p{Lb: _ZW}', "");
Expect(1, 8202, '\p{^Lb: _ZW}', "");
Expect(1, 8202, '\P{Lb: _ZW}', "");
Expect(0, 8202, '\P{^Lb: _ZW}', "");
Error('\p{Is_Line_Break=	zwspace/a/}');
Error('\P{Is_Line_Break=	zwspace/a/}');
Expect(1, 8203, '\p{Is_Line_Break=zwspace}', "");
Expect(0, 8203, '\p{^Is_Line_Break=zwspace}', "");
Expect(0, 8203, '\P{Is_Line_Break=zwspace}', "");
Expect(1, 8203, '\P{^Is_Line_Break=zwspace}', "");
Expect(0, 8202, '\p{Is_Line_Break=zwspace}', "");
Expect(1, 8202, '\p{^Is_Line_Break=zwspace}', "");
Expect(1, 8202, '\P{Is_Line_Break=zwspace}', "");
Expect(0, 8202, '\P{^Is_Line_Break=zwspace}', "");
Expect(1, 8203, '\p{Is_Line_Break=- ZWSpace}', "");
Expect(0, 8203, '\p{^Is_Line_Break=- ZWSpace}', "");
Expect(0, 8203, '\P{Is_Line_Break=- ZWSpace}', "");
Expect(1, 8203, '\P{^Is_Line_Break=- ZWSpace}', "");
Expect(0, 8202, '\p{Is_Line_Break=- ZWSpace}', "");
Expect(1, 8202, '\p{^Is_Line_Break=- ZWSpace}', "");
Expect(1, 8202, '\P{Is_Line_Break=- ZWSpace}', "");
Expect(0, 8202, '\P{^Is_Line_Break=- ZWSpace}', "");
Error('\p{Is_Lb=-/a/zw}');
Error('\P{Is_Lb=-/a/zw}');
Expect(1, 8203, '\p{Is_Lb=zw}', "");
Expect(0, 8203, '\p{^Is_Lb=zw}', "");
Expect(0, 8203, '\P{Is_Lb=zw}', "");
Expect(1, 8203, '\P{^Is_Lb=zw}', "");
Expect(0, 8202, '\p{Is_Lb=zw}', "");
Expect(1, 8202, '\p{^Is_Lb=zw}', "");
Expect(1, 8202, '\P{Is_Lb=zw}', "");
Expect(0, 8202, '\P{^Is_Lb=zw}', "");
Expect(1, 8203, '\p{Is_Lb=__ZW}', "");
Expect(0, 8203, '\p{^Is_Lb=__ZW}', "");
Expect(0, 8203, '\P{Is_Lb=__ZW}', "");
Expect(1, 8203, '\P{^Is_Lb=__ZW}', "");
Expect(0, 8202, '\p{Is_Lb=__ZW}', "");
Expect(1, 8202, '\p{^Is_Lb=__ZW}', "");
Expect(1, 8202, '\P{Is_Lb=__ZW}', "");
Expect(0, 8202, '\P{^Is_Lb=__ZW}', "");
Error('\p{Line_Break=	JL/a/}');
Error('\P{Line_Break=	JL/a/}');
Expect(1, 4447, '\p{Line_Break=jl}', "");
Expect(0, 4447, '\p{^Line_Break=jl}', "");
Expect(0, 4447, '\P{Line_Break=jl}', "");
Expect(1, 4447, '\P{^Line_Break=jl}', "");
Expect(0, 4351, '\p{Line_Break=jl}', "");
Expect(1, 4351, '\p{^Line_Break=jl}', "");
Expect(1, 4351, '\P{Line_Break=jl}', "");
Expect(0, 4351, '\P{^Line_Break=jl}', "");
Expect(1, 4447, '\p{Line_Break=	jl}', "");
Expect(0, 4447, '\p{^Line_Break=	jl}', "");
Expect(0, 4447, '\P{Line_Break=	jl}', "");
Expect(1, 4447, '\P{^Line_Break=	jl}', "");
Expect(0, 4351, '\p{Line_Break=	jl}', "");
Expect(1, 4351, '\p{^Line_Break=	jl}', "");
Expect(1, 4351, '\P{Line_Break=	jl}', "");
Expect(0, 4351, '\P{^Line_Break=	jl}', "");
Error('\p{Lb=_/a/jl}');
Error('\P{Lb=_/a/jl}');
Expect(1, 4447, '\p{Lb=jl}', "");
Expect(0, 4447, '\p{^Lb=jl}', "");
Expect(0, 4447, '\P{Lb=jl}', "");
Expect(1, 4447, '\P{^Lb=jl}', "");
Expect(0, 4351, '\p{Lb=jl}', "");
Expect(1, 4351, '\p{^Lb=jl}', "");
Expect(1, 4351, '\P{Lb=jl}', "");
Expect(0, 4351, '\P{^Lb=jl}', "");
Expect(1, 4447, '\p{Lb=-	JL}', "");
Expect(0, 4447, '\p{^Lb=-	JL}', "");
Expect(0, 4447, '\P{Lb=-	JL}', "");
Expect(1, 4447, '\P{^Lb=-	JL}', "");
Expect(0, 4351, '\p{Lb=-	JL}', "");
Expect(1, 4351, '\p{^Lb=-	JL}', "");
Expect(1, 4351, '\P{Lb=-	JL}', "");
Expect(0, 4351, '\P{^Lb=-	JL}', "");
Error('\p{Is_Line_Break=-JL/a/}');
Error('\P{Is_Line_Break=-JL/a/}');
Expect(1, 4447, '\p{Is_Line_Break=jl}', "");
Expect(0, 4447, '\p{^Is_Line_Break=jl}', "");
Expect(0, 4447, '\P{Is_Line_Break=jl}', "");
Expect(1, 4447, '\P{^Is_Line_Break=jl}', "");
Expect(0, 4351, '\p{Is_Line_Break=jl}', "");
Expect(1, 4351, '\p{^Is_Line_Break=jl}', "");
Expect(1, 4351, '\P{Is_Line_Break=jl}', "");
Expect(0, 4351, '\P{^Is_Line_Break=jl}', "");
Expect(1, 4447, '\p{Is_Line_Break=	_JL}', "");
Expect(0, 4447, '\p{^Is_Line_Break=	_JL}', "");
Expect(0, 4447, '\P{Is_Line_Break=	_JL}', "");
Expect(1, 4447, '\P{^Is_Line_Break=	_JL}', "");
Expect(0, 4351, '\p{Is_Line_Break=	_JL}', "");
Expect(1, 4351, '\p{^Is_Line_Break=	_JL}', "");
Expect(1, 4351, '\P{Is_Line_Break=	_JL}', "");
Expect(0, 4351, '\P{^Is_Line_Break=	_JL}', "");
Error('\p{Is_Lb=/a/-jl}');
Error('\P{Is_Lb=/a/-jl}');
Expect(1, 4447, '\p{Is_Lb=jl}', "");
Expect(0, 4447, '\p{^Is_Lb=jl}', "");
Expect(0, 4447, '\P{Is_Lb=jl}', "");
Expect(1, 4447, '\P{^Is_Lb=jl}', "");
Expect(0, 4351, '\p{Is_Lb=jl}', "");
Expect(1, 4351, '\p{^Is_Lb=jl}', "");
Expect(1, 4351, '\P{Is_Lb=jl}', "");
Expect(0, 4351, '\P{^Is_Lb=jl}', "");
Expect(1, 4447, '\p{Is_Lb= -JL}', "");
Expect(0, 4447, '\p{^Is_Lb= -JL}', "");
Expect(0, 4447, '\P{Is_Lb= -JL}', "");
Expect(1, 4447, '\P{^Is_Lb= -JL}', "");
Expect(0, 4351, '\p{Is_Lb= -JL}', "");
Expect(1, 4351, '\p{^Is_Lb= -JL}', "");
Expect(1, 4351, '\P{Is_Lb= -JL}', "");
Expect(0, 4351, '\P{^Is_Lb= -JL}', "");
Error('\p{Line_Break=_Break_SYMBOLS:=}');
Error('\P{Line_Break=_Break_SYMBOLS:=}');
Expect(1, 47, '\p{Line_Break=breaksymbols}', "");
Expect(0, 47, '\p{^Line_Break=breaksymbols}', "");
Expect(0, 47, '\P{Line_Break=breaksymbols}', "");
Expect(1, 47, '\P{^Line_Break=breaksymbols}', "");
Expect(0, 46, '\p{Line_Break=breaksymbols}', "");
Expect(1, 46, '\p{^Line_Break=breaksymbols}', "");
Expect(1, 46, '\P{Line_Break=breaksymbols}', "");
Expect(0, 46, '\P{^Line_Break=breaksymbols}', "");
Expect(1, 47, '\p{Line_Break=		BREAKSymbols}', "");
Expect(0, 47, '\p{^Line_Break=		BREAKSymbols}', "");
Expect(0, 47, '\P{Line_Break=		BREAKSymbols}', "");
Expect(1, 47, '\P{^Line_Break=		BREAKSymbols}', "");
Expect(0, 46, '\p{Line_Break=		BREAKSymbols}', "");
Expect(1, 46, '\p{^Line_Break=		BREAKSymbols}', "");
Expect(1, 46, '\P{Line_Break=		BREAKSymbols}', "");
Expect(0, 46, '\P{^Line_Break=		BREAKSymbols}', "");
Error('\p{Lb=_sy/a/}');
Error('\P{Lb=_sy/a/}');
Expect(1, 47, '\p{Lb=sy}', "");
Expect(0, 47, '\p{^Lb=sy}', "");
Expect(0, 47, '\P{Lb=sy}', "");
Expect(1, 47, '\P{^Lb=sy}', "");
Expect(0, 46, '\p{Lb=sy}', "");
Expect(1, 46, '\p{^Lb=sy}', "");
Expect(1, 46, '\P{Lb=sy}', "");
Expect(0, 46, '\P{^Lb=sy}', "");
Expect(1, 47, '\p{Lb=--SY}', "");
Expect(0, 47, '\p{^Lb=--SY}', "");
Expect(0, 47, '\P{Lb=--SY}', "");
Expect(1, 47, '\P{^Lb=--SY}', "");
Expect(0, 46, '\p{Lb=--SY}', "");
Expect(1, 46, '\p{^Lb=--SY}', "");
Expect(1, 46, '\P{Lb=--SY}', "");
Expect(0, 46, '\P{^Lb=--SY}', "");
Error('\p{Is_Line_Break=_:=BREAK symbols}');
Error('\P{Is_Line_Break=_:=BREAK symbols}');
Expect(1, 47, '\p{Is_Line_Break=breaksymbols}', "");
Expect(0, 47, '\p{^Is_Line_Break=breaksymbols}', "");
Expect(0, 47, '\P{Is_Line_Break=breaksymbols}', "");
Expect(1, 47, '\P{^Is_Line_Break=breaksymbols}', "");
Expect(0, 46, '\p{Is_Line_Break=breaksymbols}', "");
Expect(1, 46, '\p{^Is_Line_Break=breaksymbols}', "");
Expect(1, 46, '\P{Is_Line_Break=breaksymbols}', "");
Expect(0, 46, '\P{^Is_Line_Break=breaksymbols}', "");
Expect(1, 47, '\p{Is_Line_Break=  Break	Symbols}', "");
Expect(0, 47, '\p{^Is_Line_Break=  Break	Symbols}', "");
Expect(0, 47, '\P{Is_Line_Break=  Break	Symbols}', "");
Expect(1, 47, '\P{^Is_Line_Break=  Break	Symbols}', "");
Expect(0, 46, '\p{Is_Line_Break=  Break	Symbols}', "");
Expect(1, 46, '\p{^Is_Line_Break=  Break	Symbols}', "");
Expect(1, 46, '\P{Is_Line_Break=  Break	Symbols}', "");
Expect(0, 46, '\P{^Is_Line_Break=  Break	Symbols}', "");
Error('\p{Is_Lb=	_SY:=}');
Error('\P{Is_Lb=	_SY:=}');
Expect(1, 47, '\p{Is_Lb=sy}', "");
Expect(0, 47, '\p{^Is_Lb=sy}', "");
Expect(0, 47, '\P{Is_Lb=sy}', "");
Expect(1, 47, '\P{^Is_Lb=sy}', "");
Expect(0, 46, '\p{Is_Lb=sy}', "");
Expect(1, 46, '\p{^Is_Lb=sy}', "");
Expect(1, 46, '\P{Is_Lb=sy}', "");
Expect(0, 46, '\P{^Is_Lb=sy}', "");
Expect(1, 47, '\p{Is_Lb=__SY}', "");
Expect(0, 47, '\p{^Is_Lb=__SY}', "");
Expect(0, 47, '\P{Is_Lb=__SY}', "");
Expect(1, 47, '\P{^Is_Lb=__SY}', "");
Expect(0, 46, '\p{Is_Lb=__SY}', "");
Expect(1, 46, '\p{^Is_Lb=__SY}', "");
Expect(1, 46, '\P{Is_Lb=__SY}', "");
Expect(0, 46, '\P{^Is_Lb=__SY}', "");
Error('\p{Line_Break=-/a/PREFIX-Numeric}');
Error('\P{Line_Break=-/a/PREFIX-Numeric}');
Expect(1, 36, '\p{Line_Break=prefixnumeric}', "");
Expect(0, 36, '\p{^Line_Break=prefixnumeric}', "");
Expect(0, 36, '\P{Line_Break=prefixnumeric}', "");
Expect(1, 36, '\P{^Line_Break=prefixnumeric}', "");
Expect(0, 35, '\p{Line_Break=prefixnumeric}', "");
Expect(1, 35, '\p{^Line_Break=prefixnumeric}', "");
Expect(1, 35, '\P{Line_Break=prefixnumeric}', "");
Expect(0, 35, '\P{^Line_Break=prefixnumeric}', "");
Expect(1, 36, '\p{Line_Break=	Prefix NUMERIC}', "");
Expect(0, 36, '\p{^Line_Break=	Prefix NUMERIC}', "");
Expect(0, 36, '\P{Line_Break=	Prefix NUMERIC}', "");
Expect(1, 36, '\P{^Line_Break=	Prefix NUMERIC}', "");
Expect(0, 35, '\p{Line_Break=	Prefix NUMERIC}', "");
Expect(1, 35, '\p{^Line_Break=	Prefix NUMERIC}', "");
Expect(1, 35, '\P{Line_Break=	Prefix NUMERIC}', "");
Expect(0, 35, '\P{^Line_Break=	Prefix NUMERIC}', "");
Error('\p{Lb=_:=PR}');
Error('\P{Lb=_:=PR}');
Expect(1, 36, '\p{Lb=pr}', "");
Expect(0, 36, '\p{^Lb=pr}', "");
Expect(0, 36, '\P{Lb=pr}', "");
Expect(1, 36, '\P{^Lb=pr}', "");
Expect(0, 35, '\p{Lb=pr}', "");
Expect(1, 35, '\p{^Lb=pr}', "");
Expect(1, 35, '\P{Lb=pr}', "");
Expect(0, 35, '\P{^Lb=pr}', "");
Expect(1, 36, '\p{Lb= PR}', "");
Expect(0, 36, '\p{^Lb= PR}', "");
Expect(0, 36, '\P{Lb= PR}', "");
Expect(1, 36, '\P{^Lb= PR}', "");
Expect(0, 35, '\p{Lb= PR}', "");
Expect(1, 35, '\p{^Lb= PR}', "");
Expect(1, 35, '\P{Lb= PR}', "");
Expect(0, 35, '\P{^Lb= PR}', "");
Error('\p{Is_Line_Break=	:=PREFIX-Numeric}');
Error('\P{Is_Line_Break=	:=PREFIX-Numeric}');
Expect(1, 36, '\p{Is_Line_Break=prefixnumeric}', "");
Expect(0, 36, '\p{^Is_Line_Break=prefixnumeric}', "");
Expect(0, 36, '\P{Is_Line_Break=prefixnumeric}', "");
Expect(1, 36, '\P{^Is_Line_Break=prefixnumeric}', "");
Expect(0, 35, '\p{Is_Line_Break=prefixnumeric}', "");
Expect(1, 35, '\p{^Is_Line_Break=prefixnumeric}', "");
Expect(1, 35, '\P{Is_Line_Break=prefixnumeric}', "");
Expect(0, 35, '\P{^Is_Line_Break=prefixnumeric}', "");
Expect(1, 36, '\p{Is_Line_Break=__PREFIX-numeric}', "");
Expect(0, 36, '\p{^Is_Line_Break=__PREFIX-numeric}', "");
Expect(0, 36, '\P{Is_Line_Break=__PREFIX-numeric}', "");
Expect(1, 36, '\P{^Is_Line_Break=__PREFIX-numeric}', "");
Expect(0, 35, '\p{Is_Line_Break=__PREFIX-numeric}', "");
Expect(1, 35, '\p{^Is_Line_Break=__PREFIX-numeric}', "");
Expect(1, 35, '\P{Is_Line_Break=__PREFIX-numeric}', "");
Expect(0, 35, '\P{^Is_Line_Break=__PREFIX-numeric}', "");
Error('\p{Is_Lb:	 /a/PR}');
Error('\P{Is_Lb:	 /a/PR}');
Expect(1, 36, '\p{Is_Lb=pr}', "");
Expect(0, 36, '\p{^Is_Lb=pr}', "");
Expect(0, 36, '\P{Is_Lb=pr}', "");
Expect(1, 36, '\P{^Is_Lb=pr}', "");
Expect(0, 35, '\p{Is_Lb=pr}', "");
Expect(1, 35, '\p{^Is_Lb=pr}', "");
Expect(1, 35, '\P{Is_Lb=pr}', "");
Expect(0, 35, '\P{^Is_Lb=pr}', "");
Expect(1, 36, '\p{Is_Lb=	-pr}', "");
Expect(0, 36, '\p{^Is_Lb=	-pr}', "");
Expect(0, 36, '\P{Is_Lb=	-pr}', "");
Expect(1, 36, '\P{^Is_Lb=	-pr}', "");
Expect(0, 35, '\p{Is_Lb=	-pr}', "");
Expect(1, 35, '\p{^Is_Lb=	-pr}', "");
Expect(1, 35, '\P{Is_Lb=	-pr}', "");
Expect(0, 35, '\P{^Is_Lb=	-pr}', "");
Error('\p{Line_Break=/a/ Close	Parenthesis}');
Error('\P{Line_Break=/a/ Close	Parenthesis}');
Expect(1, 41, '\p{Line_Break=closeparenthesis}', "");
Expect(0, 41, '\p{^Line_Break=closeparenthesis}', "");
Expect(0, 41, '\P{Line_Break=closeparenthesis}', "");
Expect(1, 41, '\P{^Line_Break=closeparenthesis}', "");
Expect(0, 40, '\p{Line_Break=closeparenthesis}', "");
Expect(1, 40, '\p{^Line_Break=closeparenthesis}', "");
Expect(1, 40, '\P{Line_Break=closeparenthesis}', "");
Expect(0, 40, '\P{^Line_Break=closeparenthesis}', "");
Expect(1, 41, '\p{Line_Break=	_Close-Parenthesis}', "");
Expect(0, 41, '\p{^Line_Break=	_Close-Parenthesis}', "");
Expect(0, 41, '\P{Line_Break=	_Close-Parenthesis}', "");
Expect(1, 41, '\P{^Line_Break=	_Close-Parenthesis}', "");
Expect(0, 40, '\p{Line_Break=	_Close-Parenthesis}', "");
Expect(1, 40, '\p{^Line_Break=	_Close-Parenthesis}', "");
Expect(1, 40, '\P{Line_Break=	_Close-Parenthesis}', "");
Expect(0, 40, '\P{^Line_Break=	_Close-Parenthesis}', "");
Error('\p{Lb=	/a/CP}');
Error('\P{Lb=	/a/CP}');
Expect(1, 41, '\p{Lb:	cp}', "");
Expect(0, 41, '\p{^Lb:	cp}', "");
Expect(0, 41, '\P{Lb:	cp}', "");
Expect(1, 41, '\P{^Lb:	cp}', "");
Expect(0, 40, '\p{Lb:	cp}', "");
Expect(1, 40, '\p{^Lb:	cp}', "");
Expect(1, 40, '\P{Lb:	cp}', "");
Expect(0, 40, '\P{^Lb:	cp}', "");
Expect(1, 41, '\p{Lb=_ CP}', "");
Expect(0, 41, '\p{^Lb=_ CP}', "");
Expect(0, 41, '\P{Lb=_ CP}', "");
Expect(1, 41, '\P{^Lb=_ CP}', "");
Expect(0, 40, '\p{Lb=_ CP}', "");
Expect(1, 40, '\p{^Lb=_ CP}', "");
Expect(1, 40, '\P{Lb=_ CP}', "");
Expect(0, 40, '\P{^Lb=_ CP}', "");
Error('\p{Is_Line_Break:_-Close:=Parenthesis}');
Error('\P{Is_Line_Break:_-Close:=Parenthesis}');
Expect(1, 41, '\p{Is_Line_Break=closeparenthesis}', "");
Expect(0, 41, '\p{^Is_Line_Break=closeparenthesis}', "");
Expect(0, 41, '\P{Is_Line_Break=closeparenthesis}', "");
Expect(1, 41, '\P{^Is_Line_Break=closeparenthesis}', "");
Expect(0, 40, '\p{Is_Line_Break=closeparenthesis}', "");
Expect(1, 40, '\p{^Is_Line_Break=closeparenthesis}', "");
Expect(1, 40, '\P{Is_Line_Break=closeparenthesis}', "");
Expect(0, 40, '\P{^Is_Line_Break=closeparenthesis}', "");
Expect(1, 41, '\p{Is_Line_Break=-CloseParenthesis}', "");
Expect(0, 41, '\p{^Is_Line_Break=-CloseParenthesis}', "");
Expect(0, 41, '\P{Is_Line_Break=-CloseParenthesis}', "");
Expect(1, 41, '\P{^Is_Line_Break=-CloseParenthesis}', "");
Expect(0, 40, '\p{Is_Line_Break=-CloseParenthesis}', "");
Expect(1, 40, '\p{^Is_Line_Break=-CloseParenthesis}', "");
Expect(1, 40, '\P{Is_Line_Break=-CloseParenthesis}', "");
Expect(0, 40, '\P{^Is_Line_Break=-CloseParenthesis}', "");
Error('\p{Is_Lb=/a/ cp}');
Error('\P{Is_Lb=/a/ cp}');
Expect(1, 41, '\p{Is_Lb=cp}', "");
Expect(0, 41, '\p{^Is_Lb=cp}', "");
Expect(0, 41, '\P{Is_Lb=cp}', "");
Expect(1, 41, '\P{^Is_Lb=cp}', "");
Expect(0, 40, '\p{Is_Lb=cp}', "");
Expect(1, 40, '\p{^Is_Lb=cp}', "");
Expect(1, 40, '\P{Is_Lb=cp}', "");
Expect(0, 40, '\P{^Is_Lb=cp}', "");
Expect(1, 41, '\p{Is_Lb= _cp}', "");
Expect(0, 41, '\p{^Is_Lb= _cp}', "");
Expect(0, 41, '\P{Is_Lb= _cp}', "");
Expect(1, 41, '\P{^Is_Lb= _cp}', "");
Expect(0, 40, '\p{Is_Lb= _cp}', "");
Expect(1, 40, '\p{^Is_Lb= _cp}', "");
Expect(1, 40, '\P{Is_Lb= _cp}', "");
Expect(0, 40, '\P{^Is_Lb= _cp}', "");
Error('\p{Line_Break=-:=h3}');
Error('\P{Line_Break=-:=h3}');
Expect(1, 44059, '\p{Line_Break=h3}', "");
Expect(0, 44059, '\p{^Line_Break=h3}', "");
Expect(0, 44059, '\P{Line_Break=h3}', "");
Expect(1, 44059, '\P{^Line_Break=h3}', "");
Expect(0, 44032, '\p{Line_Break=h3}', "");
Expect(1, 44032, '\p{^Line_Break=h3}', "");
Expect(1, 44032, '\P{Line_Break=h3}', "");
Expect(0, 44032, '\P{^Line_Break=h3}', "");
Expect(1, 44059, '\p{Line_Break=_H3}', "");
Expect(0, 44059, '\p{^Line_Break=_H3}', "");
Expect(0, 44059, '\P{Line_Break=_H3}', "");
Expect(1, 44059, '\P{^Line_Break=_H3}', "");
Expect(0, 44032, '\p{Line_Break=_H3}', "");
Expect(1, 44032, '\p{^Line_Break=_H3}', "");
Expect(1, 44032, '\P{Line_Break=_H3}', "");
Expect(0, 44032, '\P{^Line_Break=_H3}', "");
Error('\p{Lb:_:=H3}');
Error('\P{Lb:_:=H3}');
Expect(1, 44059, '\p{Lb=h3}', "");
Expect(0, 44059, '\p{^Lb=h3}', "");
Expect(0, 44059, '\P{Lb=h3}', "");
Expect(1, 44059, '\P{^Lb=h3}', "");
Expect(0, 44032, '\p{Lb=h3}', "");
Expect(1, 44032, '\p{^Lb=h3}', "");
Expect(1, 44032, '\P{Lb=h3}', "");
Expect(0, 44032, '\P{^Lb=h3}', "");
Expect(1, 44059, '\p{Lb=	-H3}', "");
Expect(0, 44059, '\p{^Lb=	-H3}', "");
Expect(0, 44059, '\P{Lb=	-H3}', "");
Expect(1, 44059, '\P{^Lb=	-H3}', "");
Expect(0, 44032, '\p{Lb=	-H3}', "");
Expect(1, 44032, '\p{^Lb=	-H3}', "");
Expect(1, 44032, '\P{Lb=	-H3}', "");
Expect(0, 44032, '\P{^Lb=	-H3}', "");
Error('\p{Is_Line_Break= :=H3}');
Error('\P{Is_Line_Break= :=H3}');
Expect(1, 44059, '\p{Is_Line_Break=h3}', "");
Expect(0, 44059, '\p{^Is_Line_Break=h3}', "");
Expect(0, 44059, '\P{Is_Line_Break=h3}', "");
Expect(1, 44059, '\P{^Is_Line_Break=h3}', "");
Expect(0, 44032, '\p{Is_Line_Break=h3}', "");
Expect(1, 44032, '\p{^Is_Line_Break=h3}', "");
Expect(1, 44032, '\P{Is_Line_Break=h3}', "");
Expect(0, 44032, '\P{^Is_Line_Break=h3}', "");
Expect(1, 44059, '\p{Is_Line_Break=-H3}', "");
Expect(0, 44059, '\p{^Is_Line_Break=-H3}', "");
Expect(0, 44059, '\P{Is_Line_Break=-H3}', "");
Expect(1, 44059, '\P{^Is_Line_Break=-H3}', "");
Expect(0, 44032, '\p{Is_Line_Break=-H3}', "");
Expect(1, 44032, '\p{^Is_Line_Break=-H3}', "");
Expect(1, 44032, '\P{Is_Line_Break=-H3}', "");
Expect(0, 44032, '\P{^Is_Line_Break=-H3}', "");
Error('\p{Is_Lb:   	H3:=}');
Error('\P{Is_Lb:   	H3:=}');
Expect(1, 44059, '\p{Is_Lb=h3}', "");
Expect(0, 44059, '\p{^Is_Lb=h3}', "");
Expect(0, 44059, '\P{Is_Lb=h3}', "");
Expect(1, 44059, '\P{^Is_Lb=h3}', "");
Expect(0, 44032, '\p{Is_Lb=h3}', "");
Expect(1, 44032, '\p{^Is_Lb=h3}', "");
Expect(1, 44032, '\P{Is_Lb=h3}', "");
Expect(0, 44032, '\P{^Is_Lb=h3}', "");
Expect(1, 44059, '\p{Is_Lb=-H3}', "");
Expect(0, 44059, '\p{^Is_Lb=-H3}', "");
Expect(0, 44059, '\P{Is_Lb=-H3}', "");
Expect(1, 44059, '\P{^Is_Lb=-H3}', "");
Expect(0, 44032, '\p{Is_Lb=-H3}', "");
Expect(1, 44032, '\p{^Is_Lb=-H3}', "");
Expect(1, 44032, '\P{Is_Lb=-H3}', "");
Expect(0, 44032, '\P{^Is_Lb=-H3}', "");
Error('\p{Line_Break=:=_ carriage-RETURN}');
Error('\P{Line_Break=:=_ carriage-RETURN}');
Expect(1, 13, '\p{Line_Break=carriagereturn}', "");
Expect(0, 13, '\p{^Line_Break=carriagereturn}', "");
Expect(0, 13, '\P{Line_Break=carriagereturn}', "");
Expect(1, 13, '\P{^Line_Break=carriagereturn}', "");
Expect(0, 12, '\p{Line_Break=carriagereturn}', "");
Expect(1, 12, '\p{^Line_Break=carriagereturn}', "");
Expect(1, 12, '\P{Line_Break=carriagereturn}', "");
Expect(0, 12, '\P{^Line_Break=carriagereturn}', "");
Expect(1, 13, '\p{Line_Break=_Carriage return}', "");
Expect(0, 13, '\p{^Line_Break=_Carriage return}', "");
Expect(0, 13, '\P{Line_Break=_Carriage return}', "");
Expect(1, 13, '\P{^Line_Break=_Carriage return}', "");
Expect(0, 12, '\p{Line_Break=_Carriage return}', "");
Expect(1, 12, '\p{^Line_Break=_Carriage return}', "");
Expect(1, 12, '\P{Line_Break=_Carriage return}', "");
Expect(0, 12, '\P{^Line_Break=_Carriage return}', "");
Error('\p{Lb=_:=CR}');
Error('\P{Lb=_:=CR}');
Expect(1, 13, '\p{Lb=cr}', "");
Expect(0, 13, '\p{^Lb=cr}', "");
Expect(0, 13, '\P{Lb=cr}', "");
Expect(1, 13, '\P{^Lb=cr}', "");
Expect(0, 12, '\p{Lb=cr}', "");
Expect(1, 12, '\p{^Lb=cr}', "");
Expect(1, 12, '\P{Lb=cr}', "");
Expect(0, 12, '\P{^Lb=cr}', "");
Expect(1, 13, '\p{Lb=--CR}', "");
Expect(0, 13, '\p{^Lb=--CR}', "");
Expect(0, 13, '\P{Lb=--CR}', "");
Expect(1, 13, '\P{^Lb=--CR}', "");
Expect(0, 12, '\p{Lb=--CR}', "");
Expect(1, 12, '\p{^Lb=--CR}', "");
Expect(1, 12, '\P{Lb=--CR}', "");
Expect(0, 12, '\P{^Lb=--CR}', "");
Error('\p{Is_Line_Break=-/a/Carriage_RETURN}');
Error('\P{Is_Line_Break=-/a/Carriage_RETURN}');
Expect(1, 13, '\p{Is_Line_Break=carriagereturn}', "");
Expect(0, 13, '\p{^Is_Line_Break=carriagereturn}', "");
Expect(0, 13, '\P{Is_Line_Break=carriagereturn}', "");
Expect(1, 13, '\P{^Is_Line_Break=carriagereturn}', "");
Expect(0, 12, '\p{Is_Line_Break=carriagereturn}', "");
Expect(1, 12, '\p{^Is_Line_Break=carriagereturn}', "");
Expect(1, 12, '\P{Is_Line_Break=carriagereturn}', "");
Expect(0, 12, '\P{^Is_Line_Break=carriagereturn}', "");
Expect(1, 13, '\p{Is_Line_Break=__Carriage-return}', "");
Expect(0, 13, '\p{^Is_Line_Break=__Carriage-return}', "");
Expect(0, 13, '\P{Is_Line_Break=__Carriage-return}', "");
Expect(1, 13, '\P{^Is_Line_Break=__Carriage-return}', "");
Expect(0, 12, '\p{Is_Line_Break=__Carriage-return}', "");
Expect(1, 12, '\p{^Is_Line_Break=__Carriage-return}', "");
Expect(1, 12, '\P{Is_Line_Break=__Carriage-return}', "");
Expect(0, 12, '\P{^Is_Line_Break=__Carriage-return}', "");
Error('\p{Is_Lb=:=	CR}');
Error('\P{Is_Lb=:=	CR}');
Expect(1, 13, '\p{Is_Lb=cr}', "");
Expect(0, 13, '\p{^Is_Lb=cr}', "");
Expect(0, 13, '\P{Is_Lb=cr}', "");
Expect(1, 13, '\P{^Is_Lb=cr}', "");
Expect(0, 12, '\p{Is_Lb=cr}', "");
Expect(1, 12, '\p{^Is_Lb=cr}', "");
Expect(1, 12, '\P{Is_Lb=cr}', "");
Expect(0, 12, '\P{^Is_Lb=cr}', "");
Expect(1, 13, '\p{Is_Lb=- CR}', "");
Expect(0, 13, '\p{^Is_Lb=- CR}', "");
Expect(0, 13, '\P{Is_Lb=- CR}', "");
Expect(1, 13, '\P{^Is_Lb=- CR}', "");
Expect(0, 12, '\p{Is_Lb=- CR}', "");
Expect(1, 12, '\p{^Is_Lb=- CR}', "");
Expect(1, 12, '\P{Is_Lb=- CR}', "");
Expect(0, 12, '\P{^Is_Lb=- CR}', "");
Error('\p{Line_Break=--CLOSE:=punctuation}');
Error('\P{Line_Break=--CLOSE:=punctuation}');
Expect(1, 125, '\p{Line_Break=closepunctuation}', "");
Expect(0, 125, '\p{^Line_Break=closepunctuation}', "");
Expect(0, 125, '\P{Line_Break=closepunctuation}', "");
Expect(1, 125, '\P{^Line_Break=closepunctuation}', "");
Expect(0, 124, '\p{Line_Break=closepunctuation}', "");
Expect(1, 124, '\p{^Line_Break=closepunctuation}', "");
Expect(1, 124, '\P{Line_Break=closepunctuation}', "");
Expect(0, 124, '\P{^Line_Break=closepunctuation}', "");
Expect(1, 125, '\p{Line_Break=_CLOSE	Punctuation}', "");
Expect(0, 125, '\p{^Line_Break=_CLOSE	Punctuation}', "");
Expect(0, 125, '\P{Line_Break=_CLOSE	Punctuation}', "");
Expect(1, 125, '\P{^Line_Break=_CLOSE	Punctuation}', "");
Expect(0, 124, '\p{Line_Break=_CLOSE	Punctuation}', "");
Expect(1, 124, '\p{^Line_Break=_CLOSE	Punctuation}', "");
Expect(1, 124, '\P{Line_Break=_CLOSE	Punctuation}', "");
Expect(0, 124, '\P{^Line_Break=_CLOSE	Punctuation}', "");
Error('\p{Lb=/a/ 	cl}');
Error('\P{Lb=/a/ 	cl}');
Expect(1, 125, '\p{Lb=cl}', "");
Expect(0, 125, '\p{^Lb=cl}', "");
Expect(0, 125, '\P{Lb=cl}', "");
Expect(1, 125, '\P{^Lb=cl}', "");
Expect(0, 124, '\p{Lb=cl}', "");
Expect(1, 124, '\p{^Lb=cl}', "");
Expect(1, 124, '\P{Lb=cl}', "");
Expect(0, 124, '\P{^Lb=cl}', "");
Expect(1, 125, '\p{Lb=_CL}', "");
Expect(0, 125, '\p{^Lb=_CL}', "");
Expect(0, 125, '\P{Lb=_CL}', "");
Expect(1, 125, '\P{^Lb=_CL}', "");
Expect(0, 124, '\p{Lb=_CL}', "");
Expect(1, 124, '\p{^Lb=_CL}', "");
Expect(1, 124, '\P{Lb=_CL}', "");
Expect(0, 124, '\P{^Lb=_CL}', "");
Error('\p{Is_Line_Break=/a/ closepunctuation}');
Error('\P{Is_Line_Break=/a/ closepunctuation}');
Expect(1, 125, '\p{Is_Line_Break=closepunctuation}', "");
Expect(0, 125, '\p{^Is_Line_Break=closepunctuation}', "");
Expect(0, 125, '\P{Is_Line_Break=closepunctuation}', "");
Expect(1, 125, '\P{^Is_Line_Break=closepunctuation}', "");
Expect(0, 124, '\p{Is_Line_Break=closepunctuation}', "");
Expect(1, 124, '\p{^Is_Line_Break=closepunctuation}', "");
Expect(1, 124, '\P{Is_Line_Break=closepunctuation}', "");
Expect(0, 124, '\P{^Is_Line_Break=closepunctuation}', "");
Expect(1, 125, '\p{Is_Line_Break=  CLOSE	Punctuation}', "");
Expect(0, 125, '\p{^Is_Line_Break=  CLOSE	Punctuation}', "");
Expect(0, 125, '\P{Is_Line_Break=  CLOSE	Punctuation}', "");
Expect(1, 125, '\P{^Is_Line_Break=  CLOSE	Punctuation}', "");
Expect(0, 124, '\p{Is_Line_Break=  CLOSE	Punctuation}', "");
Expect(1, 124, '\p{^Is_Line_Break=  CLOSE	Punctuation}', "");
Expect(1, 124, '\P{Is_Line_Break=  CLOSE	Punctuation}', "");
Expect(0, 124, '\P{^Is_Line_Break=  CLOSE	Punctuation}', "");
Error('\p{Is_Lb=:=- CL}');
Error('\P{Is_Lb=:=- CL}');
Expect(1, 125, '\p{Is_Lb=cl}', "");
Expect(0, 125, '\p{^Is_Lb=cl}', "");
Expect(0, 125, '\P{Is_Lb=cl}', "");
Expect(1, 125, '\P{^Is_Lb=cl}', "");
Expect(0, 124, '\p{Is_Lb=cl}', "");
Expect(1, 124, '\p{^Is_Lb=cl}', "");
Expect(1, 124, '\P{Is_Lb=cl}', "");
Expect(0, 124, '\P{^Is_Lb=cl}', "");
Expect(1, 125, '\p{Is_Lb=-_CL}', "");
Expect(0, 125, '\p{^Is_Lb=-_CL}', "");
Expect(0, 125, '\P{Is_Lb=-_CL}', "");
Expect(1, 125, '\P{^Is_Lb=-_CL}', "");
Expect(0, 124, '\p{Is_Lb=-_CL}', "");
Expect(1, 124, '\p{^Is_Lb=-_CL}', "");
Expect(1, 124, '\P{Is_Lb=-_CL}', "");
Expect(0, 124, '\P{^Is_Lb=-_CL}', "");
Error('\p{Line_Break:	:=	-COMBININGmark}');
Error('\P{Line_Break:	:=	-COMBININGmark}');
Expect(1, 8, '\p{Line_Break=combiningmark}', "");
Expect(0, 8, '\p{^Line_Break=combiningmark}', "");
Expect(0, 8, '\P{Line_Break=combiningmark}', "");
Expect(1, 8, '\P{^Line_Break=combiningmark}', "");
Expect(0, 13, '\p{Line_Break=combiningmark}', "");
Expect(1, 13, '\p{^Line_Break=combiningmark}', "");
Expect(1, 13, '\P{Line_Break=combiningmark}', "");
Expect(0, 13, '\P{^Line_Break=combiningmark}', "");
Expect(1, 8, '\p{Line_Break=_-combining-mark}', "");
Expect(0, 8, '\p{^Line_Break=_-combining-mark}', "");
Expect(0, 8, '\P{Line_Break=_-combining-mark}', "");
Expect(1, 8, '\P{^Line_Break=_-combining-mark}', "");
Expect(0, 13, '\p{Line_Break=_-combining-mark}', "");
Expect(1, 13, '\p{^Line_Break=_-combining-mark}', "");
Expect(1, 13, '\P{Line_Break=_-combining-mark}', "");
Expect(0, 13, '\P{^Line_Break=_-combining-mark}', "");
Error('\p{Lb=	/a/CM}');
Error('\P{Lb=	/a/CM}');
Expect(1, 8, '\p{Lb=cm}', "");
Expect(0, 8, '\p{^Lb=cm}', "");
Expect(0, 8, '\P{Lb=cm}', "");
Expect(1, 8, '\P{^Lb=cm}', "");
Expect(0, 13, '\p{Lb=cm}', "");
Expect(1, 13, '\p{^Lb=cm}', "");
Expect(1, 13, '\P{Lb=cm}', "");
Expect(0, 13, '\P{^Lb=cm}', "");
Expect(1, 8, '\p{Lb=_	CM}', "");
Expect(0, 8, '\p{^Lb=_	CM}', "");
Expect(0, 8, '\P{Lb=_	CM}', "");
Expect(1, 8, '\P{^Lb=_	CM}', "");
Expect(0, 13, '\p{Lb=_	CM}', "");
Expect(1, 13, '\p{^Lb=_	CM}', "");
Expect(1, 13, '\P{Lb=_	CM}', "");
Expect(0, 13, '\P{^Lb=_	CM}', "");
Error('\p{Is_Line_Break=	CombiningMARK/a/}');
Error('\P{Is_Line_Break=	CombiningMARK/a/}');
Expect(1, 8, '\p{Is_Line_Break=combiningmark}', "");
Expect(0, 8, '\p{^Is_Line_Break=combiningmark}', "");
Expect(0, 8, '\P{Is_Line_Break=combiningmark}', "");
Expect(1, 8, '\P{^Is_Line_Break=combiningmark}', "");
Expect(0, 13, '\p{Is_Line_Break=combiningmark}', "");
Expect(1, 13, '\p{^Is_Line_Break=combiningmark}', "");
Expect(1, 13, '\P{Is_Line_Break=combiningmark}', "");
Expect(0, 13, '\P{^Is_Line_Break=combiningmark}', "");
Expect(1, 8, '\p{Is_Line_Break=--CombiningMARK}', "");
Expect(0, 8, '\p{^Is_Line_Break=--CombiningMARK}', "");
Expect(0, 8, '\P{Is_Line_Break=--CombiningMARK}', "");
Expect(1, 8, '\P{^Is_Line_Break=--CombiningMARK}', "");
Expect(0, 13, '\p{Is_Line_Break=--CombiningMARK}', "");
Expect(1, 13, '\p{^Is_Line_Break=--CombiningMARK}', "");
Expect(1, 13, '\P{Is_Line_Break=--CombiningMARK}', "");
Expect(0, 13, '\P{^Is_Line_Break=--CombiningMARK}', "");
Error('\p{Is_Lb:   	/a/CM}');
Error('\P{Is_Lb:   	/a/CM}');
Expect(1, 8, '\p{Is_Lb=cm}', "");
Expect(0, 8, '\p{^Is_Lb=cm}', "");
Expect(0, 8, '\P{Is_Lb=cm}', "");
Expect(1, 8, '\P{^Is_Lb=cm}', "");
Expect(0, 13, '\p{Is_Lb=cm}', "");
Expect(1, 13, '\p{^Is_Lb=cm}', "");
Expect(1, 13, '\P{Is_Lb=cm}', "");
Expect(0, 13, '\P{^Is_Lb=cm}', "");
Expect(1, 8, '\p{Is_Lb=	 cm}', "");
Expect(0, 8, '\p{^Is_Lb=	 cm}', "");
Expect(0, 8, '\P{Is_Lb=	 cm}', "");
Expect(1, 8, '\P{^Is_Lb=	 cm}', "");
Expect(0, 13, '\p{Is_Lb=	 cm}', "");
Expect(1, 13, '\p{^Is_Lb=	 cm}', "");
Expect(1, 13, '\P{Is_Lb=	 cm}', "");
Expect(0, 13, '\P{^Is_Lb=	 cm}', "");
Error('\p{Line_Break=/a/_	Mandatory Break}');
Error('\P{Line_Break=/a/_	Mandatory Break}');
Expect(1, 12, '\p{Line_Break=mandatorybreak}', "");
Expect(0, 12, '\p{^Line_Break=mandatorybreak}', "");
Expect(0, 12, '\P{Line_Break=mandatorybreak}', "");
Expect(1, 12, '\P{^Line_Break=mandatorybreak}', "");
Expect(0, 10, '\p{Line_Break=mandatorybreak}', "");
Expect(1, 10, '\p{^Line_Break=mandatorybreak}', "");
Expect(1, 10, '\P{Line_Break=mandatorybreak}', "");
Expect(0, 10, '\P{^Line_Break=mandatorybreak}', "");
Expect(1, 12, '\p{Line_Break= 	Mandatory-break}', "");
Expect(0, 12, '\p{^Line_Break= 	Mandatory-break}', "");
Expect(0, 12, '\P{Line_Break= 	Mandatory-break}', "");
Expect(1, 12, '\P{^Line_Break= 	Mandatory-break}', "");
Expect(0, 10, '\p{Line_Break= 	Mandatory-break}', "");
Expect(1, 10, '\p{^Line_Break= 	Mandatory-break}', "");
Expect(1, 10, '\P{Line_Break= 	Mandatory-break}', "");
Expect(0, 10, '\P{^Line_Break= 	Mandatory-break}', "");
Error('\p{Lb=	 BK:=}');
Error('\P{Lb=	 BK:=}');
Expect(1, 12, '\p{Lb=bk}', "");
Expect(0, 12, '\p{^Lb=bk}', "");
Expect(0, 12, '\P{Lb=bk}', "");
Expect(1, 12, '\P{^Lb=bk}', "");
Expect(0, 10, '\p{Lb=bk}', "");
Expect(1, 10, '\p{^Lb=bk}', "");
Expect(1, 10, '\P{Lb=bk}', "");
Expect(0, 10, '\P{^Lb=bk}', "");
Expect(1, 12, '\p{Lb= -BK}', "");
Expect(0, 12, '\p{^Lb= -BK}', "");
Expect(0, 12, '\P{Lb= -BK}', "");
Expect(1, 12, '\P{^Lb= -BK}', "");
Expect(0, 10, '\p{Lb= -BK}', "");
Expect(1, 10, '\p{^Lb= -BK}', "");
Expect(1, 10, '\P{Lb= -BK}', "");
Expect(0, 10, '\P{^Lb= -BK}', "");
Error('\p{Is_Line_Break= /a/Mandatory_Break}');
Error('\P{Is_Line_Break= /a/Mandatory_Break}');
Expect(1, 12, '\p{Is_Line_Break=mandatorybreak}', "");
Expect(0, 12, '\p{^Is_Line_Break=mandatorybreak}', "");
Expect(0, 12, '\P{Is_Line_Break=mandatorybreak}', "");
Expect(1, 12, '\P{^Is_Line_Break=mandatorybreak}', "");
Expect(0, 10, '\p{Is_Line_Break=mandatorybreak}', "");
Expect(1, 10, '\p{^Is_Line_Break=mandatorybreak}', "");
Expect(1, 10, '\P{Is_Line_Break=mandatorybreak}', "");
Expect(0, 10, '\P{^Is_Line_Break=mandatorybreak}', "");
Expect(1, 12, '\p{Is_Line_Break=- Mandatorybreak}', "");
Expect(0, 12, '\p{^Is_Line_Break=- Mandatorybreak}', "");
Expect(0, 12, '\P{Is_Line_Break=- Mandatorybreak}', "");
Expect(1, 12, '\P{^Is_Line_Break=- Mandatorybreak}', "");
Expect(0, 10, '\p{Is_Line_Break=- Mandatorybreak}', "");
Expect(1, 10, '\p{^Is_Line_Break=- Mandatorybreak}', "");
Expect(1, 10, '\P{Is_Line_Break=- Mandatorybreak}', "");
Expect(0, 10, '\P{^Is_Line_Break=- Mandatorybreak}', "");
Error('\p{Is_Lb=-/a/BK}');
Error('\P{Is_Lb=-/a/BK}');
Expect(1, 12, '\p{Is_Lb=bk}', "");
Expect(0, 12, '\p{^Is_Lb=bk}', "");
Expect(0, 12, '\P{Is_Lb=bk}', "");
Expect(1, 12, '\P{^Is_Lb=bk}', "");
Expect(0, 10, '\p{Is_Lb=bk}', "");
Expect(1, 10, '\p{^Is_Lb=bk}', "");
Expect(1, 10, '\P{Is_Lb=bk}', "");
Expect(0, 10, '\P{^Is_Lb=bk}', "");
Expect(1, 12, '\p{Is_Lb= bk}', "");
Expect(0, 12, '\p{^Is_Lb= bk}', "");
Expect(0, 12, '\P{Is_Lb= bk}', "");
Expect(1, 12, '\P{^Is_Lb= bk}', "");
Expect(0, 10, '\p{Is_Lb= bk}', "");
Expect(1, 10, '\p{^Is_Lb= bk}', "");
Expect(1, 10, '\P{Is_Lb= bk}', "");
Expect(0, 10, '\P{^Is_Lb= bk}', "");
Error('\p{Line_Break=:=	-Nonstarter}');
Error('\P{Line_Break=:=	-Nonstarter}');
Expect(1, 6102, '\p{Line_Break=nonstarter}', "");
Expect(0, 6102, '\p{^Line_Break=nonstarter}', "");
Expect(0, 6102, '\P{Line_Break=nonstarter}', "");
Expect(1, 6102, '\P{^Line_Break=nonstarter}', "");
Expect(0, 6101, '\p{Line_Break=nonstarter}', "");
Expect(1, 6101, '\p{^Line_Break=nonstarter}', "");
Expect(1, 6101, '\P{Line_Break=nonstarter}', "");
Expect(0, 6101, '\P{^Line_Break=nonstarter}', "");
Expect(1, 6102, '\p{Line_Break:  	Nonstarter}', "");
Expect(0, 6102, '\p{^Line_Break:  	Nonstarter}', "");
Expect(0, 6102, '\P{Line_Break:  	Nonstarter}', "");
Expect(1, 6102, '\P{^Line_Break:  	Nonstarter}', "");
Expect(0, 6101, '\p{Line_Break:  	Nonstarter}', "");
Expect(1, 6101, '\p{^Line_Break:  	Nonstarter}', "");
Expect(1, 6101, '\P{Line_Break:  	Nonstarter}', "");
Expect(0, 6101, '\P{^Line_Break:  	Nonstarter}', "");
Error('\p{Lb=/a/ -NS}');
Error('\P{Lb=/a/ -NS}');
Expect(1, 6102, '\p{Lb=ns}', "");
Expect(0, 6102, '\p{^Lb=ns}', "");
Expect(0, 6102, '\P{Lb=ns}', "");
Expect(1, 6102, '\P{^Lb=ns}', "");
Expect(0, 6101, '\p{Lb=ns}', "");
Expect(1, 6101, '\p{^Lb=ns}', "");
Expect(1, 6101, '\P{Lb=ns}', "");
Expect(0, 6101, '\P{^Lb=ns}', "");
Expect(1, 6102, '\p{Lb:   _NS}', "");
Expect(0, 6102, '\p{^Lb:   _NS}', "");
Expect(0, 6102, '\P{Lb:   _NS}', "");
Expect(1, 6102, '\P{^Lb:   _NS}', "");
Expect(0, 6101, '\p{Lb:   _NS}', "");
Expect(1, 6101, '\p{^Lb:   _NS}', "");
Expect(1, 6101, '\P{Lb:   _NS}', "");
Expect(0, 6101, '\P{^Lb:   _NS}', "");
Error('\p{Is_Line_Break=--Nonstarter:=}');
Error('\P{Is_Line_Break=--Nonstarter:=}');
Expect(1, 6102, '\p{Is_Line_Break=nonstarter}', "");
Expect(0, 6102, '\p{^Is_Line_Break=nonstarter}', "");
Expect(0, 6102, '\P{Is_Line_Break=nonstarter}', "");
Expect(1, 6102, '\P{^Is_Line_Break=nonstarter}', "");
Expect(0, 6101, '\p{Is_Line_Break=nonstarter}', "");
Expect(1, 6101, '\p{^Is_Line_Break=nonstarter}', "");
Expect(1, 6101, '\P{Is_Line_Break=nonstarter}', "");
Expect(0, 6101, '\P{^Is_Line_Break=nonstarter}', "");
Expect(1, 6102, '\p{Is_Line_Break=	Nonstarter}', "");
Expect(0, 6102, '\p{^Is_Line_Break=	Nonstarter}', "");
Expect(0, 6102, '\P{Is_Line_Break=	Nonstarter}', "");
Expect(1, 6102, '\P{^Is_Line_Break=	Nonstarter}', "");
Expect(0, 6101, '\p{Is_Line_Break=	Nonstarter}', "");
Expect(1, 6101, '\p{^Is_Line_Break=	Nonstarter}', "");
Expect(1, 6101, '\P{Is_Line_Break=	Nonstarter}', "");
Expect(0, 6101, '\P{^Is_Line_Break=	Nonstarter}', "");
Error('\p{Is_Lb= /a/NS}');
Error('\P{Is_Lb= /a/NS}');
Expect(1, 6102, '\p{Is_Lb=ns}', "");
Expect(0, 6102, '\p{^Is_Lb=ns}', "");
Expect(0, 6102, '\P{Is_Lb=ns}', "");
Expect(1, 6102, '\P{^Is_Lb=ns}', "");
Expect(0, 6101, '\p{Is_Lb=ns}', "");
Expect(1, 6101, '\p{^Is_Lb=ns}', "");
Expect(1, 6101, '\P{Is_Lb=ns}', "");
Expect(0, 6101, '\P{^Is_Lb=ns}', "");
Expect(1, 6102, '\p{Is_Lb= 	NS}', "");
Expect(0, 6102, '\p{^Is_Lb= 	NS}', "");
Expect(0, 6102, '\P{Is_Lb= 	NS}', "");
Expect(1, 6102, '\P{^Is_Lb= 	NS}', "");
Expect(0, 6101, '\p{Is_Lb= 	NS}', "");
Expect(1, 6101, '\p{^Is_Lb= 	NS}', "");
Expect(1, 6101, '\P{Is_Lb= 	NS}', "");
Expect(0, 6101, '\P{^Is_Lb= 	NS}', "");
Error('\p{Line_Break: :=JV}');
Error('\P{Line_Break: :=JV}');
Expect(1, 4519, '\p{Line_Break=jv}', "");
Expect(0, 4519, '\p{^Line_Break=jv}', "");
Expect(0, 4519, '\P{Line_Break=jv}', "");
Expect(1, 4519, '\P{^Line_Break=jv}', "");
Expect(0, 4447, '\p{Line_Break=jv}', "");
Expect(1, 4447, '\p{^Line_Break=jv}', "");
Expect(1, 4447, '\P{Line_Break=jv}', "");
Expect(0, 4447, '\P{^Line_Break=jv}', "");
Expect(1, 4519, '\p{Line_Break=_	JV}', "");
Expect(0, 4519, '\p{^Line_Break=_	JV}', "");
Expect(0, 4519, '\P{Line_Break=_	JV}', "");
Expect(1, 4519, '\P{^Line_Break=_	JV}', "");
Expect(0, 4447, '\p{Line_Break=_	JV}', "");
Expect(1, 4447, '\p{^Line_Break=_	JV}', "");
Expect(1, 4447, '\P{Line_Break=_	JV}', "");
Expect(0, 4447, '\P{^Line_Break=_	JV}', "");
Error('\p{Lb=-:=JV}');
Error('\P{Lb=-:=JV}');
Expect(1, 4519, '\p{Lb=jv}', "");
Expect(0, 4519, '\p{^Lb=jv}', "");
Expect(0, 4519, '\P{Lb=jv}', "");
Expect(1, 4519, '\P{^Lb=jv}', "");
Expect(0, 4447, '\p{Lb=jv}', "");
Expect(1, 4447, '\p{^Lb=jv}', "");
Expect(1, 4447, '\P{Lb=jv}', "");
Expect(0, 4447, '\P{^Lb=jv}', "");
Expect(1, 4519, '\p{Lb=_	JV}', "");
Expect(0, 4519, '\p{^Lb=_	JV}', "");
Expect(0, 4519, '\P{Lb=_	JV}', "");
Expect(1, 4519, '\P{^Lb=_	JV}', "");
Expect(0, 4447, '\p{Lb=_	JV}', "");
Expect(1, 4447, '\p{^Lb=_	JV}', "");
Expect(1, 4447, '\P{Lb=_	JV}', "");
Expect(0, 4447, '\P{^Lb=_	JV}', "");
Error('\p{Is_Line_Break=:=-	JV}');
Error('\P{Is_Line_Break=:=-	JV}');
Expect(1, 4519, '\p{Is_Line_Break=jv}', "");
Expect(0, 4519, '\p{^Is_Line_Break=jv}', "");
Expect(0, 4519, '\P{Is_Line_Break=jv}', "");
Expect(1, 4519, '\P{^Is_Line_Break=jv}', "");
Expect(0, 4447, '\p{Is_Line_Break=jv}', "");
Expect(1, 4447, '\p{^Is_Line_Break=jv}', "");
Expect(1, 4447, '\P{Is_Line_Break=jv}', "");
Expect(0, 4447, '\P{^Is_Line_Break=jv}', "");
Expect(1, 4519, '\p{Is_Line_Break=JV}', "");
Expect(0, 4519, '\p{^Is_Line_Break=JV}', "");
Expect(0, 4519, '\P{Is_Line_Break=JV}', "");
Expect(1, 4519, '\P{^Is_Line_Break=JV}', "");
Expect(0, 4447, '\p{Is_Line_Break=JV}', "");
Expect(1, 4447, '\p{^Is_Line_Break=JV}', "");
Expect(1, 4447, '\P{Is_Line_Break=JV}', "");
Expect(0, 4447, '\P{^Is_Line_Break=JV}', "");
Error('\p{Is_Lb=	/a/JV}');
Error('\P{Is_Lb=	/a/JV}');
Expect(1, 4519, '\p{Is_Lb=jv}', "");
Expect(0, 4519, '\p{^Is_Lb=jv}', "");
Expect(0, 4519, '\P{Is_Lb=jv}', "");
Expect(1, 4519, '\P{^Is_Lb=jv}', "");
Expect(0, 4447, '\p{Is_Lb=jv}', "");
Expect(1, 4447, '\p{^Is_Lb=jv}', "");
Expect(1, 4447, '\P{Is_Lb=jv}', "");
Expect(0, 4447, '\P{^Is_Lb=jv}', "");
Expect(1, 4519, '\p{Is_Lb=  JV}', "");
Expect(0, 4519, '\p{^Is_Lb=  JV}', "");
Expect(0, 4519, '\P{Is_Lb=  JV}', "");
Expect(1, 4519, '\P{^Is_Lb=  JV}', "");
Expect(0, 4447, '\p{Is_Lb=  JV}', "");
Expect(1, 4447, '\p{^Is_Lb=  JV}', "");
Expect(1, 4447, '\P{Is_Lb=  JV}', "");
Expect(0, 4447, '\P{^Is_Lb=  JV}', "");
Error('\p{Line_Break:	 QUOTATION/a/}');
Error('\P{Line_Break:	 QUOTATION/a/}');
Expect(1, 34, '\p{Line_Break=quotation}', "");
Expect(0, 34, '\p{^Line_Break=quotation}', "");
Expect(0, 34, '\P{Line_Break=quotation}', "");
Expect(1, 34, '\P{^Line_Break=quotation}', "");
Expect(0, 33, '\p{Line_Break=quotation}', "");
Expect(1, 33, '\p{^Line_Break=quotation}', "");
Expect(1, 33, '\P{Line_Break=quotation}', "");
Expect(0, 33, '\P{^Line_Break=quotation}', "");
Expect(1, 34, '\p{Line_Break=-QUOTATION}', "");
Expect(0, 34, '\p{^Line_Break=-QUOTATION}', "");
Expect(0, 34, '\P{Line_Break=-QUOTATION}', "");
Expect(1, 34, '\P{^Line_Break=-QUOTATION}', "");
Expect(0, 33, '\p{Line_Break=-QUOTATION}', "");
Expect(1, 33, '\p{^Line_Break=-QUOTATION}', "");
Expect(1, 33, '\P{Line_Break=-QUOTATION}', "");
Expect(0, 33, '\P{^Line_Break=-QUOTATION}', "");
Error('\p{Lb=_/a/QU}');
Error('\P{Lb=_/a/QU}');
Expect(1, 34, '\p{Lb=qu}', "");
Expect(0, 34, '\p{^Lb=qu}', "");
Expect(0, 34, '\P{Lb=qu}', "");
Expect(1, 34, '\P{^Lb=qu}', "");
Expect(0, 33, '\p{Lb=qu}', "");
Expect(1, 33, '\p{^Lb=qu}', "");
Expect(1, 33, '\P{Lb=qu}', "");
Expect(0, 33, '\P{^Lb=qu}', "");
Expect(1, 34, '\p{Lb=-QU}', "");
Expect(0, 34, '\p{^Lb=-QU}', "");
Expect(0, 34, '\P{Lb=-QU}', "");
Expect(1, 34, '\P{^Lb=-QU}', "");
Expect(0, 33, '\p{Lb=-QU}', "");
Expect(1, 33, '\p{^Lb=-QU}', "");
Expect(1, 33, '\P{Lb=-QU}', "");
Expect(0, 33, '\P{^Lb=-QU}', "");
Error('\p{Is_Line_Break=:=Quotation}');
Error('\P{Is_Line_Break=:=Quotation}');
Expect(1, 34, '\p{Is_Line_Break=quotation}', "");
Expect(0, 34, '\p{^Is_Line_Break=quotation}', "");
Expect(0, 34, '\P{Is_Line_Break=quotation}', "");
Expect(1, 34, '\P{^Is_Line_Break=quotation}', "");
Expect(0, 33, '\p{Is_Line_Break=quotation}', "");
Expect(1, 33, '\p{^Is_Line_Break=quotation}', "");
Expect(1, 33, '\P{Is_Line_Break=quotation}', "");
Expect(0, 33, '\P{^Is_Line_Break=quotation}', "");
Expect(1, 34, '\p{Is_Line_Break=	QUOTATION}', "");
Expect(0, 34, '\p{^Is_Line_Break=	QUOTATION}', "");
Expect(0, 34, '\P{Is_Line_Break=	QUOTATION}', "");
Expect(1, 34, '\P{^Is_Line_Break=	QUOTATION}', "");
Expect(0, 33, '\p{Is_Line_Break=	QUOTATION}', "");
Expect(1, 33, '\p{^Is_Line_Break=	QUOTATION}', "");
Expect(1, 33, '\P{Is_Line_Break=	QUOTATION}', "");
Expect(0, 33, '\P{^Is_Line_Break=	QUOTATION}', "");
Error('\p{Is_Lb: _	QU/a/}');
Error('\P{Is_Lb: _	QU/a/}');
Expect(1, 34, '\p{Is_Lb=qu}', "");
Expect(0, 34, '\p{^Is_Lb=qu}', "");
Expect(0, 34, '\P{Is_Lb=qu}', "");
Expect(1, 34, '\P{^Is_Lb=qu}', "");
Expect(0, 33, '\p{Is_Lb=qu}', "");
Expect(1, 33, '\p{^Is_Lb=qu}', "");
Expect(1, 33, '\P{Is_Lb=qu}', "");
Expect(0, 33, '\P{^Is_Lb=qu}', "");
Expect(1, 34, '\p{Is_Lb= 	qu}', "");
Expect(0, 34, '\p{^Is_Lb= 	qu}', "");
Expect(0, 34, '\P{Is_Lb= 	qu}', "");
Expect(1, 34, '\P{^Is_Lb= 	qu}', "");
Expect(0, 33, '\p{Is_Lb= 	qu}', "");
Expect(1, 33, '\p{^Is_Lb= 	qu}', "");
Expect(1, 33, '\P{Is_Lb= 	qu}', "");
Expect(0, 33, '\P{^Is_Lb= 	qu}', "");
Error('\p{Line_Break=/a/- infix-NUMERIC}');
Error('\P{Line_Break=/a/- infix-NUMERIC}');
Expect(1, 44, '\p{Line_Break=infixnumeric}', "");
Expect(0, 44, '\p{^Line_Break=infixnumeric}', "");
Expect(0, 44, '\P{Line_Break=infixnumeric}', "");
Expect(1, 44, '\P{^Line_Break=infixnumeric}', "");
Expect(0, 43, '\p{Line_Break=infixnumeric}', "");
Expect(1, 43, '\p{^Line_Break=infixnumeric}', "");
Expect(1, 43, '\P{Line_Break=infixnumeric}', "");
Expect(0, 43, '\P{^Line_Break=infixnumeric}', "");
Expect(1, 44, '\p{Line_Break=-_INFIX	Numeric}', "");
Expect(0, 44, '\p{^Line_Break=-_INFIX	Numeric}', "");
Expect(0, 44, '\P{Line_Break=-_INFIX	Numeric}', "");
Expect(1, 44, '\P{^Line_Break=-_INFIX	Numeric}', "");
Expect(0, 43, '\p{Line_Break=-_INFIX	Numeric}', "");
Expect(1, 43, '\p{^Line_Break=-_INFIX	Numeric}', "");
Expect(1, 43, '\P{Line_Break=-_INFIX	Numeric}', "");
Expect(0, 43, '\P{^Line_Break=-_INFIX	Numeric}', "");
Error('\p{Lb=-IS/a/}');
Error('\P{Lb=-IS/a/}');
Expect(1, 44, '\p{Lb=is}', "");
Expect(0, 44, '\p{^Lb=is}', "");
Expect(0, 44, '\P{Lb=is}', "");
Expect(1, 44, '\P{^Lb=is}', "");
Expect(0, 43, '\p{Lb=is}', "");
Expect(1, 43, '\p{^Lb=is}', "");
Expect(1, 43, '\P{Lb=is}', "");
Expect(0, 43, '\P{^Lb=is}', "");
Expect(1, 44, '\p{Lb=__IS}', "");
Expect(0, 44, '\p{^Lb=__IS}', "");
Expect(0, 44, '\P{Lb=__IS}', "");
Expect(1, 44, '\P{^Lb=__IS}', "");
Expect(0, 43, '\p{Lb=__IS}', "");
Expect(1, 43, '\p{^Lb=__IS}', "");
Expect(1, 43, '\P{Lb=__IS}', "");
Expect(0, 43, '\P{^Lb=__IS}', "");
Error('\p{Is_Line_Break=/a/_Infix-Numeric}');
Error('\P{Is_Line_Break=/a/_Infix-Numeric}');
Expect(1, 44, '\p{Is_Line_Break=infixnumeric}', "");
Expect(0, 44, '\p{^Is_Line_Break=infixnumeric}', "");
Expect(0, 44, '\P{Is_Line_Break=infixnumeric}', "");
Expect(1, 44, '\P{^Is_Line_Break=infixnumeric}', "");
Expect(0, 43, '\p{Is_Line_Break=infixnumeric}', "");
Expect(1, 43, '\p{^Is_Line_Break=infixnumeric}', "");
Expect(1, 43, '\P{Is_Line_Break=infixnumeric}', "");
Expect(0, 43, '\P{^Is_Line_Break=infixnumeric}', "");
Expect(1, 44, '\p{Is_Line_Break=  Infix	numeric}', "");
Expect(0, 44, '\p{^Is_Line_Break=  Infix	numeric}', "");
Expect(0, 44, '\P{Is_Line_Break=  Infix	numeric}', "");
Expect(1, 44, '\P{^Is_Line_Break=  Infix	numeric}', "");
Expect(0, 43, '\p{Is_Line_Break=  Infix	numeric}', "");
Expect(1, 43, '\p{^Is_Line_Break=  Infix	numeric}', "");
Expect(1, 43, '\P{Is_Line_Break=  Infix	numeric}', "");
Expect(0, 43, '\P{^Is_Line_Break=  Infix	numeric}', "");
Error('\p{Is_Lb=/a/-IS}');
Error('\P{Is_Lb=/a/-IS}');
Expect(1, 44, '\p{Is_Lb=is}', "");
Expect(0, 44, '\p{^Is_Lb=is}', "");
Expect(0, 44, '\P{Is_Lb=is}', "");
Expect(1, 44, '\P{^Is_Lb=is}', "");
Expect(0, 43, '\p{Is_Lb=is}', "");
Expect(1, 43, '\p{^Is_Lb=is}', "");
Expect(1, 43, '\P{Is_Lb=is}', "");
Expect(0, 43, '\P{^Is_Lb=is}', "");
Expect(1, 44, '\p{Is_Lb=_ IS}', "");
Expect(0, 44, '\p{^Is_Lb=_ IS}', "");
Expect(0, 44, '\P{Is_Lb=_ IS}', "");
Expect(1, 44, '\P{^Is_Lb=_ IS}', "");
Expect(0, 43, '\p{Is_Lb=_ IS}', "");
Expect(1, 43, '\p{^Is_Lb=_ IS}', "");
Expect(1, 43, '\P{Is_Lb=_ IS}', "");
Expect(0, 43, '\P{^Is_Lb=_ IS}', "");
Error('\p{Line_Break:   :=__Inseparable}');
Error('\P{Line_Break:   :=__Inseparable}');
Expect(1, 8230, '\p{Line_Break=inseparable}', "");
Expect(0, 8230, '\p{^Line_Break=inseparable}', "");
Expect(0, 8230, '\P{Line_Break=inseparable}', "");
Expect(1, 8230, '\P{^Line_Break=inseparable}', "");
Expect(0, 8227, '\p{Line_Break=inseparable}', "");
Expect(1, 8227, '\p{^Line_Break=inseparable}', "");
Expect(1, 8227, '\P{Line_Break=inseparable}', "");
Expect(0, 8227, '\P{^Line_Break=inseparable}', "");
Expect(1, 8230, '\p{Line_Break=-_inseparable}', "");
Expect(0, 8230, '\p{^Line_Break=-_inseparable}', "");
Expect(0, 8230, '\P{Line_Break=-_inseparable}', "");
Expect(1, 8230, '\P{^Line_Break=-_inseparable}', "");
Expect(0, 8227, '\p{Line_Break=-_inseparable}', "");
Expect(1, 8227, '\p{^Line_Break=-_inseparable}', "");
Expect(1, 8227, '\P{Line_Break=-_inseparable}', "");
Expect(0, 8227, '\P{^Line_Break=-_inseparable}', "");
Error('\p{Lb: 	_IN:=}');
Error('\P{Lb: 	_IN:=}');
Expect(1, 8230, '\p{Lb=in}', "");
Expect(0, 8230, '\p{^Lb=in}', "");
Expect(0, 8230, '\P{Lb=in}', "");
Expect(1, 8230, '\P{^Lb=in}', "");
Expect(0, 8227, '\p{Lb=in}', "");
Expect(1, 8227, '\p{^Lb=in}', "");
Expect(1, 8227, '\P{Lb=in}', "");
Expect(0, 8227, '\P{^Lb=in}', "");
Expect(1, 8230, '\p{Lb=-IN}', "");
Expect(0, 8230, '\p{^Lb=-IN}', "");
Expect(0, 8230, '\P{Lb=-IN}', "");
Expect(1, 8230, '\P{^Lb=-IN}', "");
Expect(0, 8227, '\p{Lb=-IN}', "");
Expect(1, 8227, '\p{^Lb=-IN}', "");
Expect(1, 8227, '\P{Lb=-IN}', "");
Expect(0, 8227, '\P{^Lb=-IN}', "");
Error('\p{Is_Line_Break:	-	INSEPERABLE:=}');
Error('\P{Is_Line_Break:	-	INSEPERABLE:=}');
Expect(1, 8230, '\p{Is_Line_Break=inseperable}', "");
Expect(0, 8230, '\p{^Is_Line_Break=inseperable}', "");
Expect(0, 8230, '\P{Is_Line_Break=inseperable}', "");
Expect(1, 8230, '\P{^Is_Line_Break=inseperable}', "");
Expect(0, 8227, '\p{Is_Line_Break=inseperable}', "");
Expect(1, 8227, '\p{^Is_Line_Break=inseperable}', "");
Expect(1, 8227, '\P{Is_Line_Break=inseperable}', "");
Expect(0, 8227, '\P{^Is_Line_Break=inseperable}', "");
Expect(1, 8230, '\p{Is_Line_Break=-	Inseperable}', "");
Expect(0, 8230, '\p{^Is_Line_Break=-	Inseperable}', "");
Expect(0, 8230, '\P{Is_Line_Break=-	Inseperable}', "");
Expect(1, 8230, '\P{^Is_Line_Break=-	Inseperable}', "");
Expect(0, 8227, '\p{Is_Line_Break=-	Inseperable}', "");
Expect(1, 8227, '\p{^Is_Line_Break=-	Inseperable}', "");
Expect(1, 8227, '\P{Is_Line_Break=-	Inseperable}', "");
Expect(0, 8227, '\P{^Is_Line_Break=-	Inseperable}', "");
Error('\p{Is_Lb=/a/-INSEPARABLE}');
Error('\P{Is_Lb=/a/-INSEPARABLE}');
Expect(1, 8230, '\p{Is_Lb=inseparable}', "");
Expect(0, 8230, '\p{^Is_Lb=inseparable}', "");
Expect(0, 8230, '\P{Is_Lb=inseparable}', "");
Expect(1, 8230, '\P{^Is_Lb=inseparable}', "");
Expect(0, 8227, '\p{Is_Lb=inseparable}', "");
Expect(1, 8227, '\p{^Is_Lb=inseparable}', "");
Expect(1, 8227, '\P{Is_Lb=inseparable}', "");
Expect(0, 8227, '\P{^Is_Lb=inseparable}', "");
Expect(1, 8230, '\p{Is_Lb=-Inseparable}', "");
Expect(0, 8230, '\p{^Is_Lb=-Inseparable}', "");
Expect(0, 8230, '\P{Is_Lb=-Inseparable}', "");
Expect(1, 8230, '\P{^Is_Lb=-Inseparable}', "");
Expect(0, 8227, '\p{Is_Lb=-Inseparable}', "");
Expect(1, 8227, '\p{^Is_Lb=-Inseparable}', "");
Expect(1, 8227, '\P{Is_Lb=-Inseparable}', "");
Expect(0, 8227, '\P{^Is_Lb=-Inseparable}', "");
Error('\p{Line_Break: 	Complex:=CONTEXT}');
Error('\P{Line_Break: 	Complex:=CONTEXT}');
Expect(1, 3642, '\p{Line_Break=complexcontext}', "");
Expect(0, 3642, '\p{^Line_Break=complexcontext}', "");
Expect(0, 3642, '\P{Line_Break=complexcontext}', "");
Expect(1, 3642, '\P{^Line_Break=complexcontext}', "");
Expect(0, 3584, '\p{Line_Break=complexcontext}', "");
Expect(1, 3584, '\p{^Line_Break=complexcontext}', "");
Expect(1, 3584, '\P{Line_Break=complexcontext}', "");
Expect(0, 3584, '\P{^Line_Break=complexcontext}', "");
Expect(1, 3642, '\p{Line_Break=Complex-Context}', "");
Expect(0, 3642, '\p{^Line_Break=Complex-Context}', "");
Expect(0, 3642, '\P{Line_Break=Complex-Context}', "");
Expect(1, 3642, '\P{^Line_Break=Complex-Context}', "");
Expect(0, 3584, '\p{Line_Break=Complex-Context}', "");
Expect(1, 3584, '\p{^Line_Break=Complex-Context}', "");
Expect(1, 3584, '\P{Line_Break=Complex-Context}', "");
Expect(0, 3584, '\P{^Line_Break=Complex-Context}', "");
Error('\p{Lb=/a/-SA}');
Error('\P{Lb=/a/-SA}');
Expect(1, 3642, '\p{Lb:   sa}', "");
Expect(0, 3642, '\p{^Lb:   sa}', "");
Expect(0, 3642, '\P{Lb:   sa}', "");
Expect(1, 3642, '\P{^Lb:   sa}', "");
Expect(0, 3584, '\p{Lb:   sa}', "");
Expect(1, 3584, '\p{^Lb:   sa}', "");
Expect(1, 3584, '\P{Lb:   sa}', "");
Expect(0, 3584, '\P{^Lb:   sa}', "");
Expect(1, 3642, '\p{Lb= SA}', "");
Expect(0, 3642, '\p{^Lb= SA}', "");
Expect(0, 3642, '\P{Lb= SA}', "");
Expect(1, 3642, '\P{^Lb= SA}', "");
Expect(0, 3584, '\p{Lb= SA}', "");
Expect(1, 3584, '\p{^Lb= SA}', "");
Expect(1, 3584, '\P{Lb= SA}', "");
Expect(0, 3584, '\P{^Lb= SA}', "");
Error('\p{Is_Line_Break=	_COMPLEX/a/Context}');
Error('\P{Is_Line_Break=	_COMPLEX/a/Context}');
Expect(1, 3642, '\p{Is_Line_Break=complexcontext}', "");
Expect(0, 3642, '\p{^Is_Line_Break=complexcontext}', "");
Expect(0, 3642, '\P{Is_Line_Break=complexcontext}', "");
Expect(1, 3642, '\P{^Is_Line_Break=complexcontext}', "");
Expect(0, 3584, '\p{Is_Line_Break=complexcontext}', "");
Expect(1, 3584, '\p{^Is_Line_Break=complexcontext}', "");
Expect(1, 3584, '\P{Is_Line_Break=complexcontext}', "");
Expect(0, 3584, '\P{^Is_Line_Break=complexcontext}', "");
Expect(1, 3642, '\p{Is_Line_Break= COMPLEX-Context}', "");
Expect(0, 3642, '\p{^Is_Line_Break= COMPLEX-Context}', "");
Expect(0, 3642, '\P{Is_Line_Break= COMPLEX-Context}', "");
Expect(1, 3642, '\P{^Is_Line_Break= COMPLEX-Context}', "");
Expect(0, 3584, '\p{Is_Line_Break= COMPLEX-Context}', "");
Expect(1, 3584, '\p{^Is_Line_Break= COMPLEX-Context}', "");
Expect(1, 3584, '\P{Is_Line_Break= COMPLEX-Context}', "");
Expect(0, 3584, '\P{^Is_Line_Break= COMPLEX-Context}', "");
Error('\p{Is_Lb=_	sa:=}');
Error('\P{Is_Lb=_	sa:=}');
Expect(1, 3642, '\p{Is_Lb=sa}', "");
Expect(0, 3642, '\p{^Is_Lb=sa}', "");
Expect(0, 3642, '\P{Is_Lb=sa}', "");
Expect(1, 3642, '\P{^Is_Lb=sa}', "");
Expect(0, 3584, '\p{Is_Lb=sa}', "");
Expect(1, 3584, '\p{^Is_Lb=sa}', "");
Expect(1, 3584, '\P{Is_Lb=sa}', "");
Expect(0, 3584, '\P{^Is_Lb=sa}', "");
Expect(1, 3642, '\p{Is_Lb=	 SA}', "");
Expect(0, 3642, '\p{^Is_Lb=	 SA}', "");
Expect(0, 3642, '\P{Is_Lb=	 SA}', "");
Expect(1, 3642, '\P{^Is_Lb=	 SA}', "");
Expect(0, 3584, '\p{Is_Lb=	 SA}', "");
Expect(1, 3584, '\p{^Is_Lb=	 SA}', "");
Expect(1, 3584, '\P{Is_Lb=	 SA}', "");
Expect(0, 3584, '\P{^Is_Lb=	 SA}', "");
Error('\p{Line_Break= /a/HYPHEN}');
Error('\P{Line_Break= /a/HYPHEN}');
Expect(1, 45, '\p{Line_Break=hyphen}', "");
Expect(0, 45, '\p{^Line_Break=hyphen}', "");
Expect(0, 45, '\P{Line_Break=hyphen}', "");
Expect(1, 45, '\P{^Line_Break=hyphen}', "");
Expect(0, 44, '\p{Line_Break=hyphen}', "");
Expect(1, 44, '\p{^Line_Break=hyphen}', "");
Expect(1, 44, '\P{Line_Break=hyphen}', "");
Expect(0, 44, '\P{^Line_Break=hyphen}', "");
Expect(1, 45, '\p{Line_Break=__Hyphen}', "");
Expect(0, 45, '\p{^Line_Break=__Hyphen}', "");
Expect(0, 45, '\P{Line_Break=__Hyphen}', "");
Expect(1, 45, '\P{^Line_Break=__Hyphen}', "");
Expect(0, 44, '\p{Line_Break=__Hyphen}', "");
Expect(1, 44, '\p{^Line_Break=__Hyphen}', "");
Expect(1, 44, '\P{Line_Break=__Hyphen}', "");
Expect(0, 44, '\P{^Line_Break=__Hyphen}', "");
Error('\p{Lb=:=_ HY}');
Error('\P{Lb=:=_ HY}');
Expect(1, 45, '\p{Lb=hy}', "");
Expect(0, 45, '\p{^Lb=hy}', "");
Expect(0, 45, '\P{Lb=hy}', "");
Expect(1, 45, '\P{^Lb=hy}', "");
Expect(0, 44, '\p{Lb=hy}', "");
Expect(1, 44, '\p{^Lb=hy}', "");
Expect(1, 44, '\P{Lb=hy}', "");
Expect(0, 44, '\P{^Lb=hy}', "");
Expect(1, 45, '\p{Lb=	_hy}', "");
Expect(0, 45, '\p{^Lb=	_hy}', "");
Expect(0, 45, '\P{Lb=	_hy}', "");
Expect(1, 45, '\P{^Lb=	_hy}', "");
Expect(0, 44, '\p{Lb=	_hy}', "");
Expect(1, 44, '\p{^Lb=	_hy}', "");
Expect(1, 44, '\P{Lb=	_hy}', "");
Expect(0, 44, '\P{^Lb=	_hy}', "");
Error('\p{Is_Line_Break=	:=Hyphen}');
Error('\P{Is_Line_Break=	:=Hyphen}');
Expect(1, 45, '\p{Is_Line_Break=hyphen}', "");
Expect(0, 45, '\p{^Is_Line_Break=hyphen}', "");
Expect(0, 45, '\P{Is_Line_Break=hyphen}', "");
Expect(1, 45, '\P{^Is_Line_Break=hyphen}', "");
Expect(0, 44, '\p{Is_Line_Break=hyphen}', "");
Expect(1, 44, '\p{^Is_Line_Break=hyphen}', "");
Expect(1, 44, '\P{Is_Line_Break=hyphen}', "");
Expect(0, 44, '\P{^Is_Line_Break=hyphen}', "");
Expect(1, 45, '\p{Is_Line_Break=-_Hyphen}', "");
Expect(0, 45, '\p{^Is_Line_Break=-_Hyphen}', "");
Expect(0, 45, '\P{Is_Line_Break=-_Hyphen}', "");
Expect(1, 45, '\P{^Is_Line_Break=-_Hyphen}', "");
Expect(0, 44, '\p{Is_Line_Break=-_Hyphen}', "");
Expect(1, 44, '\p{^Is_Line_Break=-_Hyphen}', "");
Expect(1, 44, '\P{Is_Line_Break=-_Hyphen}', "");
Expect(0, 44, '\P{^Is_Line_Break=-_Hyphen}', "");
Error('\p{Is_Lb=/a/-_HY}');
Error('\P{Is_Lb=/a/-_HY}');
Expect(1, 45, '\p{Is_Lb:hy}', "");
Expect(0, 45, '\p{^Is_Lb:hy}', "");
Expect(0, 45, '\P{Is_Lb:hy}', "");
Expect(1, 45, '\P{^Is_Lb:hy}', "");
Expect(0, 44, '\p{Is_Lb:hy}', "");
Expect(1, 44, '\p{^Is_Lb:hy}', "");
Expect(1, 44, '\P{Is_Lb:hy}', "");
Expect(0, 44, '\P{^Is_Lb:hy}', "");
Expect(1, 45, '\p{Is_Lb= HY}', "");
Expect(0, 45, '\p{^Is_Lb= HY}', "");
Expect(0, 45, '\P{Is_Lb= HY}', "");
Expect(1, 45, '\P{^Is_Lb= HY}', "");
Expect(0, 44, '\p{Is_Lb= HY}', "");
Expect(1, 44, '\p{^Is_Lb= HY}', "");
Expect(1, 44, '\P{Is_Lb= HY}', "");
Expect(0, 44, '\P{^Is_Lb= HY}', "");
Error('\p{Line_Break=	_Break After:=}');
Error('\P{Line_Break=	_Break After:=}');
Expect(1, 9, '\p{Line_Break=breakafter}', "");
Expect(0, 9, '\p{^Line_Break=breakafter}', "");
Expect(0, 9, '\P{Line_Break=breakafter}', "");
Expect(1, 9, '\P{^Line_Break=breakafter}', "");
Expect(0, 8, '\p{Line_Break=breakafter}', "");
Expect(1, 8, '\p{^Line_Break=breakafter}', "");
Expect(1, 8, '\P{Line_Break=breakafter}', "");
Expect(0, 8, '\P{^Line_Break=breakafter}', "");
Expect(1, 9, '\p{Line_Break=_	BREAK_after}', "");
Expect(0, 9, '\p{^Line_Break=_	BREAK_after}', "");
Expect(0, 9, '\P{Line_Break=_	BREAK_after}', "");
Expect(1, 9, '\P{^Line_Break=_	BREAK_after}', "");
Expect(0, 8, '\p{Line_Break=_	BREAK_after}', "");
Expect(1, 8, '\p{^Line_Break=_	BREAK_after}', "");
Expect(1, 8, '\P{Line_Break=_	BREAK_after}', "");
Expect(0, 8, '\P{^Line_Break=_	BREAK_after}', "");
Error('\p{Lb=	 ba/a/}');
Error('\P{Lb=	 ba/a/}');
Expect(1, 9, '\p{Lb=ba}', "");
Expect(0, 9, '\p{^Lb=ba}', "");
Expect(0, 9, '\P{Lb=ba}', "");
Expect(1, 9, '\P{^Lb=ba}', "");
Expect(0, 8, '\p{Lb=ba}', "");
Expect(1, 8, '\p{^Lb=ba}', "");
Expect(1, 8, '\P{Lb=ba}', "");
Expect(0, 8, '\P{^Lb=ba}', "");
Expect(1, 9, '\p{Lb=  BA}', "");
Expect(0, 9, '\p{^Lb=  BA}', "");
Expect(0, 9, '\P{Lb=  BA}', "");
Expect(1, 9, '\P{^Lb=  BA}', "");
Expect(0, 8, '\p{Lb=  BA}', "");
Expect(1, 8, '\p{^Lb=  BA}', "");
Expect(1, 8, '\P{Lb=  BA}', "");
Expect(0, 8, '\P{^Lb=  BA}', "");
Error('\p{Is_Line_Break=--BREAK_after/a/}');
Error('\P{Is_Line_Break=--BREAK_after/a/}');
Expect(1, 9, '\p{Is_Line_Break=breakafter}', "");
Expect(0, 9, '\p{^Is_Line_Break=breakafter}', "");
Expect(0, 9, '\P{Is_Line_Break=breakafter}', "");
Expect(1, 9, '\P{^Is_Line_Break=breakafter}', "");
Expect(0, 8, '\p{Is_Line_Break=breakafter}', "");
Expect(1, 8, '\p{^Is_Line_Break=breakafter}', "");
Expect(1, 8, '\P{Is_Line_Break=breakafter}', "");
Expect(0, 8, '\P{^Is_Line_Break=breakafter}', "");
Expect(1, 9, '\p{Is_Line_Break= _Break-AFTER}', "");
Expect(0, 9, '\p{^Is_Line_Break= _Break-AFTER}', "");
Expect(0, 9, '\P{Is_Line_Break= _Break-AFTER}', "");
Expect(1, 9, '\P{^Is_Line_Break= _Break-AFTER}', "");
Expect(0, 8, '\p{Is_Line_Break= _Break-AFTER}', "");
Expect(1, 8, '\p{^Is_Line_Break= _Break-AFTER}', "");
Expect(1, 8, '\P{Is_Line_Break= _Break-AFTER}', "");
Expect(0, 8, '\P{^Is_Line_Break= _Break-AFTER}', "");
Error('\p{Is_Lb=/a/		ba}');
Error('\P{Is_Lb=/a/		ba}');
Expect(1, 9, '\p{Is_Lb:   ba}', "");
Expect(0, 9, '\p{^Is_Lb:   ba}', "");
Expect(0, 9, '\P{Is_Lb:   ba}', "");
Expect(1, 9, '\P{^Is_Lb:   ba}', "");
Expect(0, 8, '\p{Is_Lb:   ba}', "");
Expect(1, 8, '\p{^Is_Lb:   ba}', "");
Expect(1, 8, '\P{Is_Lb:   ba}', "");
Expect(0, 8, '\P{^Is_Lb:   ba}', "");
Expect(1, 9, '\p{Is_Lb:    	BA}', "");
Expect(0, 9, '\p{^Is_Lb:    	BA}', "");
Expect(0, 9, '\P{Is_Lb:    	BA}', "");
Expect(1, 9, '\P{^Is_Lb:    	BA}', "");
Expect(0, 8, '\p{Is_Lb:    	BA}', "");
Expect(1, 8, '\p{^Is_Lb:    	BA}', "");
Expect(1, 8, '\P{Is_Lb:    	BA}', "");
Expect(0, 8, '\P{^Is_Lb:    	BA}', "");
Error('\p{Line_Break:	-_LineFEED:=}');
Error('\P{Line_Break:	-_LineFEED:=}');
Expect(1, 10, '\p{Line_Break=linefeed}', "");
Expect(0, 10, '\p{^Line_Break=linefeed}', "");
Expect(0, 10, '\P{Line_Break=linefeed}', "");
Expect(1, 10, '\P{^Line_Break=linefeed}', "");
Expect(0, 9, '\p{Line_Break=linefeed}', "");
Expect(1, 9, '\p{^Line_Break=linefeed}', "");
Expect(1, 9, '\P{Line_Break=linefeed}', "");
Expect(0, 9, '\P{^Line_Break=linefeed}', "");
Expect(1, 10, '\p{Line_Break=__Line-Feed}', "");
Expect(0, 10, '\p{^Line_Break=__Line-Feed}', "");
Expect(0, 10, '\P{Line_Break=__Line-Feed}', "");
Expect(1, 10, '\P{^Line_Break=__Line-Feed}', "");
Expect(0, 9, '\p{Line_Break=__Line-Feed}', "");
Expect(1, 9, '\p{^Line_Break=__Line-Feed}', "");
Expect(1, 9, '\P{Line_Break=__Line-Feed}', "");
Expect(0, 9, '\P{^Line_Break=__Line-Feed}', "");
Error('\p{Lb=:= -lf}');
Error('\P{Lb=:= -lf}');
Expect(1, 10, '\p{Lb=lf}', "");
Expect(0, 10, '\p{^Lb=lf}', "");
Expect(0, 10, '\P{Lb=lf}', "");
Expect(1, 10, '\P{^Lb=lf}', "");
Expect(0, 9, '\p{Lb=lf}', "");
Expect(1, 9, '\p{^Lb=lf}', "");
Expect(1, 9, '\P{Lb=lf}', "");
Expect(0, 9, '\P{^Lb=lf}', "");
Expect(1, 10, '\p{Lb=-_LF}', "");
Expect(0, 10, '\p{^Lb=-_LF}', "");
Expect(0, 10, '\P{Lb=-_LF}', "");
Expect(1, 10, '\P{^Lb=-_LF}', "");
Expect(0, 9, '\p{Lb=-_LF}', "");
Expect(1, 9, '\p{^Lb=-_LF}', "");
Expect(1, 9, '\P{Lb=-_LF}', "");
Expect(0, 9, '\P{^Lb=-_LF}', "");
Error('\p{Is_Line_Break=-LINE_feed:=}');
Error('\P{Is_Line_Break=-LINE_feed:=}');
Expect(1, 10, '\p{Is_Line_Break=linefeed}', "");
Expect(0, 10, '\p{^Is_Line_Break=linefeed}', "");
Expect(0, 10, '\P{Is_Line_Break=linefeed}', "");
Expect(1, 10, '\P{^Is_Line_Break=linefeed}', "");
Expect(0, 9, '\p{Is_Line_Break=linefeed}', "");
Expect(1, 9, '\p{^Is_Line_Break=linefeed}', "");
Expect(1, 9, '\P{Is_Line_Break=linefeed}', "");
Expect(0, 9, '\P{^Is_Line_Break=linefeed}', "");
Expect(1, 10, '\p{Is_Line_Break:	_-lineFeed}', "");
Expect(0, 10, '\p{^Is_Line_Break:	_-lineFeed}', "");
Expect(0, 10, '\P{Is_Line_Break:	_-lineFeed}', "");
Expect(1, 10, '\P{^Is_Line_Break:	_-lineFeed}', "");
Expect(0, 9, '\p{Is_Line_Break:	_-lineFeed}', "");
Expect(1, 9, '\p{^Is_Line_Break:	_-lineFeed}', "");
Expect(1, 9, '\P{Is_Line_Break:	_-lineFeed}', "");
Expect(0, 9, '\P{^Is_Line_Break:	_-lineFeed}', "");
Error('\p{Is_Lb=-LF/a/}');
Error('\P{Is_Lb=-LF/a/}');
Expect(1, 10, '\p{Is_Lb=lf}', "");
Expect(0, 10, '\p{^Is_Lb=lf}', "");
Expect(0, 10, '\P{Is_Lb=lf}', "");
Expect(1, 10, '\P{^Is_Lb=lf}', "");
Expect(0, 9, '\p{Is_Lb=lf}', "");
Expect(1, 9, '\p{^Is_Lb=lf}', "");
Expect(1, 9, '\P{Is_Lb=lf}', "");
Expect(0, 9, '\P{^Is_Lb=lf}', "");
Expect(1, 10, '\p{Is_Lb= -LF}', "");
Expect(0, 10, '\p{^Is_Lb= -LF}', "");
Expect(0, 10, '\P{Is_Lb= -LF}', "");
Expect(1, 10, '\P{^Is_Lb= -LF}', "");
Expect(0, 9, '\p{Is_Lb= -LF}', "");
Expect(1, 9, '\p{^Is_Lb= -LF}', "");
Expect(1, 9, '\P{Is_Lb= -LF}', "");
Expect(0, 9, '\P{^Is_Lb= -LF}', "");
Error('\p{Line_Break=/a/-	Ambiguous}');
Error('\P{Line_Break=/a/-	Ambiguous}');
Expect(1, 168, '\p{Line_Break=ambiguous}', "");
Expect(0, 168, '\p{^Line_Break=ambiguous}', "");
Expect(0, 168, '\P{Line_Break=ambiguous}', "");
Expect(1, 168, '\P{^Line_Break=ambiguous}', "");
Expect(0, 166, '\p{Line_Break=ambiguous}', "");
Expect(1, 166, '\p{^Line_Break=ambiguous}', "");
Expect(1, 166, '\P{Line_Break=ambiguous}', "");
Expect(0, 166, '\P{^Line_Break=ambiguous}', "");
Expect(1, 168, '\p{Line_Break= 	ambiguous}', "");
Expect(0, 168, '\p{^Line_Break= 	ambiguous}', "");
Expect(0, 168, '\P{Line_Break= 	ambiguous}', "");
Expect(1, 168, '\P{^Line_Break= 	ambiguous}', "");
Expect(0, 166, '\p{Line_Break= 	ambiguous}', "");
Expect(1, 166, '\p{^Line_Break= 	ambiguous}', "");
Expect(1, 166, '\P{Line_Break= 	ambiguous}', "");
Expect(0, 166, '\P{^Line_Break= 	ambiguous}', "");
Error('\p{Lb=	:=AI}');
Error('\P{Lb=	:=AI}');
Expect(1, 168, '\p{Lb=ai}', "");
Expect(0, 168, '\p{^Lb=ai}', "");
Expect(0, 168, '\P{Lb=ai}', "");
Expect(1, 168, '\P{^Lb=ai}', "");
Expect(0, 166, '\p{Lb=ai}', "");
Expect(1, 166, '\p{^Lb=ai}', "");
Expect(1, 166, '\P{Lb=ai}', "");
Expect(0, 166, '\P{^Lb=ai}', "");
Expect(1, 168, '\p{Lb=  AI}', "");
Expect(0, 168, '\p{^Lb=  AI}', "");
Expect(0, 168, '\P{Lb=  AI}', "");
Expect(1, 168, '\P{^Lb=  AI}', "");
Expect(0, 166, '\p{Lb=  AI}', "");
Expect(1, 166, '\p{^Lb=  AI}', "");
Expect(1, 166, '\P{Lb=  AI}', "");
Expect(0, 166, '\P{^Lb=  AI}', "");
Error('\p{Is_Line_Break=:=Ambiguous}');
Error('\P{Is_Line_Break=:=Ambiguous}');
Expect(1, 168, '\p{Is_Line_Break=ambiguous}', "");
Expect(0, 168, '\p{^Is_Line_Break=ambiguous}', "");
Expect(0, 168, '\P{Is_Line_Break=ambiguous}', "");
Expect(1, 168, '\P{^Is_Line_Break=ambiguous}', "");
Expect(0, 166, '\p{Is_Line_Break=ambiguous}', "");
Expect(1, 166, '\p{^Is_Line_Break=ambiguous}', "");
Expect(1, 166, '\P{Is_Line_Break=ambiguous}', "");
Expect(0, 166, '\P{^Is_Line_Break=ambiguous}', "");
Expect(1, 168, '\p{Is_Line_Break= _Ambiguous}', "");
Expect(0, 168, '\p{^Is_Line_Break= _Ambiguous}', "");
Expect(0, 168, '\P{Is_Line_Break= _Ambiguous}', "");
Expect(1, 168, '\P{^Is_Line_Break= _Ambiguous}', "");
Expect(0, 166, '\p{Is_Line_Break= _Ambiguous}', "");
Expect(1, 166, '\p{^Is_Line_Break= _Ambiguous}', "");
Expect(1, 166, '\P{Is_Line_Break= _Ambiguous}', "");
Expect(0, 166, '\P{^Is_Line_Break= _Ambiguous}', "");
Error('\p{Is_Lb=-/a/ai}');
Error('\P{Is_Lb=-/a/ai}');
Expect(1, 168, '\p{Is_Lb=ai}', "");
Expect(0, 168, '\p{^Is_Lb=ai}', "");
Expect(0, 168, '\P{Is_Lb=ai}', "");
Expect(1, 168, '\P{^Is_Lb=ai}', "");
Expect(0, 166, '\p{Is_Lb=ai}', "");
Expect(1, 166, '\p{^Is_Lb=ai}', "");
Expect(1, 166, '\P{Is_Lb=ai}', "");
Expect(0, 166, '\P{^Is_Lb=ai}', "");
Expect(1, 168, '\p{Is_Lb=_	AI}', "");
Expect(0, 168, '\p{^Is_Lb=_	AI}', "");
Expect(0, 168, '\P{Is_Lb=_	AI}', "");
Expect(1, 168, '\P{^Is_Lb=_	AI}', "");
Expect(0, 166, '\p{Is_Lb=_	AI}', "");
Expect(1, 166, '\p{^Is_Lb=_	AI}', "");
Expect(1, 166, '\P{Is_Lb=_	AI}', "");
Expect(0, 166, '\P{^Is_Lb=_	AI}', "");
Error('\p{Line_Break=-CONTINGENT/a/break}');
Error('\P{Line_Break=-CONTINGENT/a/break}');
Expect(1, 65532, '\p{Line_Break=contingentbreak}', "");
Expect(0, 65532, '\p{^Line_Break=contingentbreak}', "");
Expect(0, 65532, '\P{Line_Break=contingentbreak}', "");
Expect(1, 65532, '\P{^Line_Break=contingentbreak}', "");
Expect(0, 65531, '\p{Line_Break=contingentbreak}', "");
Expect(1, 65531, '\p{^Line_Break=contingentbreak}', "");
Expect(1, 65531, '\P{Line_Break=contingentbreak}', "");
Expect(0, 65531, '\P{^Line_Break=contingentbreak}', "");
Expect(1, 65532, '\p{Line_Break=_ CONTINGENT break}', "");
Expect(0, 65532, '\p{^Line_Break=_ CONTINGENT break}', "");
Expect(0, 65532, '\P{Line_Break=_ CONTINGENT break}', "");
Expect(1, 65532, '\P{^Line_Break=_ CONTINGENT break}', "");
Expect(0, 65531, '\p{Line_Break=_ CONTINGENT break}', "");
Expect(1, 65531, '\p{^Line_Break=_ CONTINGENT break}', "");
Expect(1, 65531, '\P{Line_Break=_ CONTINGENT break}', "");
Expect(0, 65531, '\P{^Line_Break=_ CONTINGENT break}', "");
Error('\p{Lb=/a/	_cb}');
Error('\P{Lb=/a/	_cb}');
Expect(1, 65532, '\p{Lb=cb}', "");
Expect(0, 65532, '\p{^Lb=cb}', "");
Expect(0, 65532, '\P{Lb=cb}', "");
Expect(1, 65532, '\P{^Lb=cb}', "");
Expect(0, 65531, '\p{Lb=cb}', "");
Expect(1, 65531, '\p{^Lb=cb}', "");
Expect(1, 65531, '\P{Lb=cb}', "");
Expect(0, 65531, '\P{^Lb=cb}', "");
Expect(1, 65532, '\p{Lb=-CB}', "");
Expect(0, 65532, '\p{^Lb=-CB}', "");
Expect(0, 65532, '\P{Lb=-CB}', "");
Expect(1, 65532, '\P{^Lb=-CB}', "");
Expect(0, 65531, '\p{Lb=-CB}', "");
Expect(1, 65531, '\p{^Lb=-CB}', "");
Expect(1, 65531, '\P{Lb=-CB}', "");
Expect(0, 65531, '\P{^Lb=-CB}', "");
Error('\p{Is_Line_Break=-Contingent/a/break}');
Error('\P{Is_Line_Break=-Contingent/a/break}');
Expect(1, 65532, '\p{Is_Line_Break=contingentbreak}', "");
Expect(0, 65532, '\p{^Is_Line_Break=contingentbreak}', "");
Expect(0, 65532, '\P{Is_Line_Break=contingentbreak}', "");
Expect(1, 65532, '\P{^Is_Line_Break=contingentbreak}', "");
Expect(0, 65531, '\p{Is_Line_Break=contingentbreak}', "");
Expect(1, 65531, '\p{^Is_Line_Break=contingentbreak}', "");
Expect(1, 65531, '\P{Is_Line_Break=contingentbreak}', "");
Expect(0, 65531, '\P{^Is_Line_Break=contingentbreak}', "");
Expect(1, 65532, '\p{Is_Line_Break=_Contingent-break}', "");
Expect(0, 65532, '\p{^Is_Line_Break=_Contingent-break}', "");
Expect(0, 65532, '\P{Is_Line_Break=_Contingent-break}', "");
Expect(1, 65532, '\P{^Is_Line_Break=_Contingent-break}', "");
Expect(0, 65531, '\p{Is_Line_Break=_Contingent-break}', "");
Expect(1, 65531, '\p{^Is_Line_Break=_Contingent-break}', "");
Expect(1, 65531, '\P{Is_Line_Break=_Contingent-break}', "");
Expect(0, 65531, '\P{^Is_Line_Break=_Contingent-break}', "");
Error('\p{Is_Lb= :=cb}');
Error('\P{Is_Lb= :=cb}');
Expect(1, 65532, '\p{Is_Lb=cb}', "");
Expect(0, 65532, '\p{^Is_Lb=cb}', "");
Expect(0, 65532, '\P{Is_Lb=cb}', "");
Expect(1, 65532, '\P{^Is_Lb=cb}', "");
Expect(0, 65531, '\p{Is_Lb=cb}', "");
Expect(1, 65531, '\p{^Is_Lb=cb}', "");
Expect(1, 65531, '\P{Is_Lb=cb}', "");
Expect(0, 65531, '\P{^Is_Lb=cb}', "");
Expect(1, 65532, '\p{Is_Lb=  CB}', "");
Expect(0, 65532, '\p{^Is_Lb=  CB}', "");
Expect(0, 65532, '\P{Is_Lb=  CB}', "");
Expect(1, 65532, '\P{^Is_Lb=  CB}', "");
Expect(0, 65531, '\p{Is_Lb=  CB}', "");
Expect(1, 65531, '\p{^Is_Lb=  CB}', "");
Expect(1, 65531, '\P{Is_Lb=  CB}', "");
Expect(0, 65531, '\P{^Is_Lb=  CB}', "");
Error('\p{Line_Break=:=	_exclamation}');
Error('\P{Line_Break=:=	_exclamation}');
Expect(1, 33, '\p{Line_Break=exclamation}', "");
Expect(0, 33, '\p{^Line_Break=exclamation}', "");
Expect(0, 33, '\P{Line_Break=exclamation}', "");
Expect(1, 33, '\P{^Line_Break=exclamation}', "");
Expect(0, 32, '\p{Line_Break=exclamation}', "");
Expect(1, 32, '\p{^Line_Break=exclamation}', "");
Expect(1, 32, '\P{Line_Break=exclamation}', "");
Expect(0, 32, '\P{^Line_Break=exclamation}', "");
Expect(1, 33, '\p{Line_Break=	_EXCLAMATION}', "");
Expect(0, 33, '\p{^Line_Break=	_EXCLAMATION}', "");
Expect(0, 33, '\P{Line_Break=	_EXCLAMATION}', "");
Expect(1, 33, '\P{^Line_Break=	_EXCLAMATION}', "");
Expect(0, 32, '\p{Line_Break=	_EXCLAMATION}', "");
Expect(1, 32, '\p{^Line_Break=	_EXCLAMATION}', "");
Expect(1, 32, '\P{Line_Break=	_EXCLAMATION}', "");
Expect(0, 32, '\P{^Line_Break=	_EXCLAMATION}', "");
Error('\p{Lb=:=	-EX}');
Error('\P{Lb=:=	-EX}');
Expect(1, 33, '\p{Lb=ex}', "");
Expect(0, 33, '\p{^Lb=ex}', "");
Expect(0, 33, '\P{Lb=ex}', "");
Expect(1, 33, '\P{^Lb=ex}', "");
Expect(0, 32, '\p{Lb=ex}', "");
Expect(1, 32, '\p{^Lb=ex}', "");
Expect(1, 32, '\P{Lb=ex}', "");
Expect(0, 32, '\P{^Lb=ex}', "");
Expect(1, 33, '\p{Lb=_-EX}', "");
Expect(0, 33, '\p{^Lb=_-EX}', "");
Expect(0, 33, '\P{Lb=_-EX}', "");
Expect(1, 33, '\P{^Lb=_-EX}', "");
Expect(0, 32, '\p{Lb=_-EX}', "");
Expect(1, 32, '\p{^Lb=_-EX}', "");
Expect(1, 32, '\P{Lb=_-EX}', "");
Expect(0, 32, '\P{^Lb=_-EX}', "");
Error('\p{Is_Line_Break=	:=exclamation}');
Error('\P{Is_Line_Break=	:=exclamation}');
Expect(1, 33, '\p{Is_Line_Break:exclamation}', "");
Expect(0, 33, '\p{^Is_Line_Break:exclamation}', "");
Expect(0, 33, '\P{Is_Line_Break:exclamation}', "");
Expect(1, 33, '\P{^Is_Line_Break:exclamation}', "");
Expect(0, 32, '\p{Is_Line_Break:exclamation}', "");
Expect(1, 32, '\p{^Is_Line_Break:exclamation}', "");
Expect(1, 32, '\P{Is_Line_Break:exclamation}', "");
Expect(0, 32, '\P{^Is_Line_Break:exclamation}', "");
Expect(1, 33, '\p{Is_Line_Break: _-Exclamation}', "");
Expect(0, 33, '\p{^Is_Line_Break: _-Exclamation}', "");
Expect(0, 33, '\P{Is_Line_Break: _-Exclamation}', "");
Expect(1, 33, '\P{^Is_Line_Break: _-Exclamation}', "");
Expect(0, 32, '\p{Is_Line_Break: _-Exclamation}', "");
Expect(1, 32, '\p{^Is_Line_Break: _-Exclamation}', "");
Expect(1, 32, '\P{Is_Line_Break: _-Exclamation}', "");
Expect(0, 32, '\P{^Is_Line_Break: _-Exclamation}', "");
Error('\p{Is_Lb=:=- EX}');
Error('\P{Is_Lb=:=- EX}');
Expect(1, 33, '\p{Is_Lb:ex}', "");
Expect(0, 33, '\p{^Is_Lb:ex}', "");
Expect(0, 33, '\P{Is_Lb:ex}', "");
Expect(1, 33, '\P{^Is_Lb:ex}', "");
Expect(0, 32, '\p{Is_Lb:ex}', "");
Expect(1, 32, '\p{^Is_Lb:ex}', "");
Expect(1, 32, '\P{Is_Lb:ex}', "");
Expect(0, 32, '\P{^Is_Lb:ex}', "");
Expect(1, 33, '\p{Is_Lb:_EX}', "");
Expect(0, 33, '\p{^Is_Lb:_EX}', "");
Expect(0, 33, '\P{Is_Lb:_EX}', "");
Expect(1, 33, '\P{^Is_Lb:_EX}', "");
Expect(0, 32, '\p{Is_Lb:_EX}', "");
Expect(1, 32, '\p{^Is_Lb:_EX}', "");
Expect(1, 32, '\P{Is_Lb:_EX}', "");
Expect(0, 32, '\P{^Is_Lb:_EX}', "");
Error('\p{Line_Break=_	Ideographic:=}');
Error('\P{Line_Break=_	Ideographic:=}');
Expect(1, 11929, '\p{Line_Break=ideographic}', "");
Expect(0, 11929, '\p{^Line_Break=ideographic}', "");
Expect(0, 11929, '\P{Line_Break=ideographic}', "");
Expect(1, 11929, '\P{^Line_Break=ideographic}', "");
Expect(0, 11903, '\p{Line_Break=ideographic}', "");
Expect(1, 11903, '\p{^Line_Break=ideographic}', "");
Expect(1, 11903, '\P{Line_Break=ideographic}', "");
Expect(0, 11903, '\P{^Line_Break=ideographic}', "");
Expect(1, 11929, '\p{Line_Break: -IDEOGRAPHIC}', "");
Expect(0, 11929, '\p{^Line_Break: -IDEOGRAPHIC}', "");
Expect(0, 11929, '\P{Line_Break: -IDEOGRAPHIC}', "");
Expect(1, 11929, '\P{^Line_Break: -IDEOGRAPHIC}', "");
Expect(0, 11903, '\p{Line_Break: -IDEOGRAPHIC}', "");
Expect(1, 11903, '\p{^Line_Break: -IDEOGRAPHIC}', "");
Expect(1, 11903, '\P{Line_Break: -IDEOGRAPHIC}', "");
Expect(0, 11903, '\P{^Line_Break: -IDEOGRAPHIC}', "");
Error('\p{Lb=:= _id}');
Error('\P{Lb=:= _id}');
Expect(1, 11929, '\p{Lb=id}', "");
Expect(0, 11929, '\p{^Lb=id}', "");
Expect(0, 11929, '\P{Lb=id}', "");
Expect(1, 11929, '\P{^Lb=id}', "");
Expect(0, 11903, '\p{Lb=id}', "");
Expect(1, 11903, '\p{^Lb=id}', "");
Expect(1, 11903, '\P{Lb=id}', "");
Expect(0, 11903, '\P{^Lb=id}', "");
Expect(1, 11929, '\p{Lb=		id}', "");
Expect(0, 11929, '\p{^Lb=		id}', "");
Expect(0, 11929, '\P{Lb=		id}', "");
Expect(1, 11929, '\P{^Lb=		id}', "");
Expect(0, 11903, '\p{Lb=		id}', "");
Expect(1, 11903, '\p{^Lb=		id}', "");
Expect(1, 11903, '\P{Lb=		id}', "");
Expect(0, 11903, '\P{^Lb=		id}', "");
Error('\p{Is_Line_Break=:=Ideographic}');
Error('\P{Is_Line_Break=:=Ideographic}');
Expect(1, 11929, '\p{Is_Line_Break:   ideographic}', "");
Expect(0, 11929, '\p{^Is_Line_Break:   ideographic}', "");
Expect(0, 11929, '\P{Is_Line_Break:   ideographic}', "");
Expect(1, 11929, '\P{^Is_Line_Break:   ideographic}', "");
Expect(0, 11903, '\p{Is_Line_Break:   ideographic}', "");
Expect(1, 11903, '\p{^Is_Line_Break:   ideographic}', "");
Expect(1, 11903, '\P{Is_Line_Break:   ideographic}', "");
Expect(0, 11903, '\P{^Is_Line_Break:   ideographic}', "");
Expect(1, 11929, '\p{Is_Line_Break=	-ideographic}', "");
Expect(0, 11929, '\p{^Is_Line_Break=	-ideographic}', "");
Expect(0, 11929, '\P{Is_Line_Break=	-ideographic}', "");
Expect(1, 11929, '\P{^Is_Line_Break=	-ideographic}', "");
Expect(0, 11903, '\p{Is_Line_Break=	-ideographic}', "");
Expect(1, 11903, '\p{^Is_Line_Break=	-ideographic}', "");
Expect(1, 11903, '\P{Is_Line_Break=	-ideographic}', "");
Expect(0, 11903, '\P{^Is_Line_Break=	-ideographic}', "");
Error('\p{Is_Lb=ID/a/}');
Error('\P{Is_Lb=ID/a/}');
Expect(1, 11929, '\p{Is_Lb=id}', "");
Expect(0, 11929, '\p{^Is_Lb=id}', "");
Expect(0, 11929, '\P{Is_Lb=id}', "");
Expect(1, 11929, '\P{^Is_Lb=id}', "");
Expect(0, 11903, '\p{Is_Lb=id}', "");
Expect(1, 11903, '\p{^Is_Lb=id}', "");
Expect(1, 11903, '\P{Is_Lb=id}', "");
Expect(0, 11903, '\P{^Is_Lb=id}', "");
Expect(1, 11929, '\p{Is_Lb=	_ID}', "");
Expect(0, 11929, '\p{^Is_Lb=	_ID}', "");
Expect(0, 11929, '\P{Is_Lb=	_ID}', "");
Expect(1, 11929, '\P{^Is_Lb=	_ID}', "");
Expect(0, 11903, '\p{Is_Lb=	_ID}', "");
Expect(1, 11903, '\p{^Is_Lb=	_ID}', "");
Expect(1, 11903, '\P{Is_Lb=	_ID}', "");
Expect(0, 11903, '\P{^Is_Lb=	_ID}', "");
Error('\p{Line_Break=-WORDJoiner:=}');
Error('\P{Line_Break=-WORDJoiner:=}');
Expect(1, 8288, '\p{Line_Break=wordjoiner}', "");
Expect(0, 8288, '\p{^Line_Break=wordjoiner}', "");
Expect(0, 8288, '\P{Line_Break=wordjoiner}', "");
Expect(1, 8288, '\P{^Line_Break=wordjoiner}', "");
Expect(0, 8287, '\p{Line_Break=wordjoiner}', "");
Expect(1, 8287, '\p{^Line_Break=wordjoiner}', "");
Expect(1, 8287, '\P{Line_Break=wordjoiner}', "");
Expect(0, 8287, '\P{^Line_Break=wordjoiner}', "");
Expect(1, 8288, '\p{Line_Break=-Word_Joiner}', "");
Expect(0, 8288, '\p{^Line_Break=-Word_Joiner}', "");
Expect(0, 8288, '\P{Line_Break=-Word_Joiner}', "");
Expect(1, 8288, '\P{^Line_Break=-Word_Joiner}', "");
Expect(0, 8287, '\p{Line_Break=-Word_Joiner}', "");
Expect(1, 8287, '\p{^Line_Break=-Word_Joiner}', "");
Expect(1, 8287, '\P{Line_Break=-Word_Joiner}', "");
Expect(0, 8287, '\P{^Line_Break=-Word_Joiner}', "");
Error('\p{Lb=	/a/WJ}');
Error('\P{Lb=	/a/WJ}');
Expect(1, 8288, '\p{Lb=wj}', "");
Expect(0, 8288, '\p{^Lb=wj}', "");
Expect(0, 8288, '\P{Lb=wj}', "");
Expect(1, 8288, '\P{^Lb=wj}', "");
Expect(0, 8287, '\p{Lb=wj}', "");
Expect(1, 8287, '\p{^Lb=wj}', "");
Expect(1, 8287, '\P{Lb=wj}', "");
Expect(0, 8287, '\P{^Lb=wj}', "");
Expect(1, 8288, '\p{Lb=	WJ}', "");
Expect(0, 8288, '\p{^Lb=	WJ}', "");
Expect(0, 8288, '\P{Lb=	WJ}', "");
Expect(1, 8288, '\P{^Lb=	WJ}', "");
Expect(0, 8287, '\p{Lb=	WJ}', "");
Expect(1, 8287, '\p{^Lb=	WJ}', "");
Expect(1, 8287, '\P{Lb=	WJ}', "");
Expect(0, 8287, '\P{^Lb=	WJ}', "");
Error('\p{Is_Line_Break=_Word/a/JOINER}');
Error('\P{Is_Line_Break=_Word/a/JOINER}');
Expect(1, 8288, '\p{Is_Line_Break=wordjoiner}', "");
Expect(0, 8288, '\p{^Is_Line_Break=wordjoiner}', "");
Expect(0, 8288, '\P{Is_Line_Break=wordjoiner}', "");
Expect(1, 8288, '\P{^Is_Line_Break=wordjoiner}', "");
Expect(0, 8287, '\p{Is_Line_Break=wordjoiner}', "");
Expect(1, 8287, '\p{^Is_Line_Break=wordjoiner}', "");
Expect(1, 8287, '\P{Is_Line_Break=wordjoiner}', "");
Expect(0, 8287, '\P{^Is_Line_Break=wordjoiner}', "");
Expect(1, 8288, '\p{Is_Line_Break: WordJoiner}', "");
Expect(0, 8288, '\p{^Is_Line_Break: WordJoiner}', "");
Expect(0, 8288, '\P{Is_Line_Break: WordJoiner}', "");
Expect(1, 8288, '\P{^Is_Line_Break: WordJoiner}', "");
Expect(0, 8287, '\p{Is_Line_Break: WordJoiner}', "");
Expect(1, 8287, '\p{^Is_Line_Break: WordJoiner}', "");
Expect(1, 8287, '\P{Is_Line_Break: WordJoiner}', "");
Expect(0, 8287, '\P{^Is_Line_Break: WordJoiner}', "");
Error('\p{Is_Lb= _WJ:=}');
Error('\P{Is_Lb= _WJ:=}');
Expect(1, 8288, '\p{Is_Lb=wj}', "");
Expect(0, 8288, '\p{^Is_Lb=wj}', "");
Expect(0, 8288, '\P{Is_Lb=wj}', "");
Expect(1, 8288, '\P{^Is_Lb=wj}', "");
Expect(0, 8287, '\p{Is_Lb=wj}', "");
Expect(1, 8287, '\p{^Is_Lb=wj}', "");
Expect(1, 8287, '\P{Is_Lb=wj}', "");
Expect(0, 8287, '\P{^Is_Lb=wj}', "");
Expect(1, 8288, '\p{Is_Lb=	-WJ}', "");
Expect(0, 8288, '\p{^Is_Lb=	-WJ}', "");
Expect(0, 8288, '\P{Is_Lb=	-WJ}', "");
Expect(1, 8288, '\P{^Is_Lb=	-WJ}', "");
Expect(0, 8287, '\p{Is_Lb=	-WJ}', "");
Expect(1, 8287, '\p{^Is_Lb=	-WJ}', "");
Expect(1, 8287, '\P{Is_Lb=	-WJ}', "");
Expect(0, 8287, '\P{^Is_Lb=	-WJ}', "");
Error('\p{Line_Break=/a/_H2}');
Error('\P{Line_Break=/a/_H2}');
Expect(1, 44032, '\p{Line_Break: h2}', "");
Expect(0, 44032, '\p{^Line_Break: h2}', "");
Expect(0, 44032, '\P{Line_Break: h2}', "");
Expect(1, 44032, '\P{^Line_Break: h2}', "");
Expect(0, 44031, '\p{Line_Break: h2}', "");
Expect(1, 44031, '\p{^Line_Break: h2}', "");
Expect(1, 44031, '\P{Line_Break: h2}', "");
Expect(0, 44031, '\P{^Line_Break: h2}', "");
Expect(1, 44032, '\p{Line_Break=-h2}', "");
Expect(0, 44032, '\p{^Line_Break=-h2}', "");
Expect(0, 44032, '\P{Line_Break=-h2}', "");
Expect(1, 44032, '\P{^Line_Break=-h2}', "");
Expect(0, 44031, '\p{Line_Break=-h2}', "");
Expect(1, 44031, '\p{^Line_Break=-h2}', "");
Expect(1, 44031, '\P{Line_Break=-h2}', "");
Expect(0, 44031, '\P{^Line_Break=-h2}', "");
Error('\p{Lb=	:=H2}');
Error('\P{Lb=	:=H2}');
Expect(1, 44032, '\p{Lb=h2}', "");
Expect(0, 44032, '\p{^Lb=h2}', "");
Expect(0, 44032, '\P{Lb=h2}', "");
Expect(1, 44032, '\P{^Lb=h2}', "");
Expect(0, 44031, '\p{Lb=h2}', "");
Expect(1, 44031, '\p{^Lb=h2}', "");
Expect(1, 44031, '\P{Lb=h2}', "");
Expect(0, 44031, '\P{^Lb=h2}', "");
Expect(1, 44032, '\p{Lb=	 H2}', "");
Expect(0, 44032, '\p{^Lb=	 H2}', "");
Expect(0, 44032, '\P{Lb=	 H2}', "");
Expect(1, 44032, '\P{^Lb=	 H2}', "");
Expect(0, 44031, '\p{Lb=	 H2}', "");
Expect(1, 44031, '\p{^Lb=	 H2}', "");
Expect(1, 44031, '\P{Lb=	 H2}', "");
Expect(0, 44031, '\P{^Lb=	 H2}', "");
Error('\p{Is_Line_Break=-H2:=}');
Error('\P{Is_Line_Break=-H2:=}');
Expect(1, 44032, '\p{Is_Line_Break=h2}', "");
Expect(0, 44032, '\p{^Is_Line_Break=h2}', "");
Expect(0, 44032, '\P{Is_Line_Break=h2}', "");
Expect(1, 44032, '\P{^Is_Line_Break=h2}', "");
Expect(0, 44031, '\p{Is_Line_Break=h2}', "");
Expect(1, 44031, '\p{^Is_Line_Break=h2}', "");
Expect(1, 44031, '\P{Is_Line_Break=h2}', "");
Expect(0, 44031, '\P{^Is_Line_Break=h2}', "");
Expect(1, 44032, '\p{Is_Line_Break=_-H2}', "");
Expect(0, 44032, '\p{^Is_Line_Break=_-H2}', "");
Expect(0, 44032, '\P{Is_Line_Break=_-H2}', "");
Expect(1, 44032, '\P{^Is_Line_Break=_-H2}', "");
Expect(0, 44031, '\p{Is_Line_Break=_-H2}', "");
Expect(1, 44031, '\p{^Is_Line_Break=_-H2}', "");
Expect(1, 44031, '\P{Is_Line_Break=_-H2}', "");
Expect(0, 44031, '\P{^Is_Line_Break=_-H2}', "");
Error('\p{Is_Lb=_H2:=}');
Error('\P{Is_Lb=_H2:=}');
Expect(1, 44032, '\p{Is_Lb=h2}', "");
Expect(0, 44032, '\p{^Is_Lb=h2}', "");
Expect(0, 44032, '\P{Is_Lb=h2}', "");
Expect(1, 44032, '\P{^Is_Lb=h2}', "");
Expect(0, 44031, '\p{Is_Lb=h2}', "");
Expect(1, 44031, '\p{^Is_Lb=h2}', "");
Expect(1, 44031, '\P{Is_Lb=h2}', "");
Expect(0, 44031, '\P{^Is_Lb=h2}', "");
Expect(1, 44032, '\p{Is_Lb:--H2}', "");
Expect(0, 44032, '\p{^Is_Lb:--H2}', "");
Expect(0, 44032, '\P{Is_Lb:--H2}', "");
Expect(1, 44032, '\P{^Is_Lb:--H2}', "");
Expect(0, 44031, '\p{Is_Lb:--H2}', "");
Expect(1, 44031, '\p{^Is_Lb:--H2}', "");
Expect(1, 44031, '\P{Is_Lb:--H2}', "");
Expect(0, 44031, '\P{^Is_Lb:--H2}', "");
Error('\p{Line_Break=--break/a/BOTH}');
Error('\P{Line_Break=--break/a/BOTH}');
Expect(1, 8212, '\p{Line_Break=breakboth}', "");
Expect(0, 8212, '\p{^Line_Break=breakboth}', "");
Expect(0, 8212, '\P{Line_Break=breakboth}', "");
Expect(1, 8212, '\P{^Line_Break=breakboth}', "");
Expect(0, 8211, '\p{Line_Break=breakboth}', "");
Expect(1, 8211, '\p{^Line_Break=breakboth}', "");
Expect(1, 8211, '\P{Line_Break=breakboth}', "");
Expect(0, 8211, '\P{^Line_Break=breakboth}', "");
Expect(1, 8212, '\p{Line_Break= Break_Both}', "");
Expect(0, 8212, '\p{^Line_Break= Break_Both}', "");
Expect(0, 8212, '\P{Line_Break= Break_Both}', "");
Expect(1, 8212, '\P{^Line_Break= Break_Both}', "");
Expect(0, 8211, '\p{Line_Break= Break_Both}', "");
Expect(1, 8211, '\p{^Line_Break= Break_Both}', "");
Expect(1, 8211, '\P{Line_Break= Break_Both}', "");
Expect(0, 8211, '\P{^Line_Break= Break_Both}', "");
Error('\p{Lb=/a/B2}');
Error('\P{Lb=/a/B2}');
Expect(1, 8212, '\p{Lb:   b2}', "");
Expect(0, 8212, '\p{^Lb:   b2}', "");
Expect(0, 8212, '\P{Lb:   b2}', "");
Expect(1, 8212, '\P{^Lb:   b2}', "");
Expect(0, 8211, '\p{Lb:   b2}', "");
Expect(1, 8211, '\p{^Lb:   b2}', "");
Expect(1, 8211, '\P{Lb:   b2}', "");
Expect(0, 8211, '\P{^Lb:   b2}', "");
Expect(1, 8212, '\p{Lb=_ B2}', "");
Expect(0, 8212, '\p{^Lb=_ B2}', "");
Expect(0, 8212, '\P{Lb=_ B2}', "");
Expect(1, 8212, '\P{^Lb=_ B2}', "");
Expect(0, 8211, '\p{Lb=_ B2}', "");
Expect(1, 8211, '\p{^Lb=_ B2}', "");
Expect(1, 8211, '\P{Lb=_ B2}', "");
Expect(0, 8211, '\P{^Lb=_ B2}', "");
Error('\p{Is_Line_Break=-/a/break Both}');
Error('\P{Is_Line_Break=-/a/break Both}');
Expect(1, 8212, '\p{Is_Line_Break=breakboth}', "");
Expect(0, 8212, '\p{^Is_Line_Break=breakboth}', "");
Expect(0, 8212, '\P{Is_Line_Break=breakboth}', "");
Expect(1, 8212, '\P{^Is_Line_Break=breakboth}', "");
Expect(0, 8211, '\p{Is_Line_Break=breakboth}', "");
Expect(1, 8211, '\p{^Is_Line_Break=breakboth}', "");
Expect(1, 8211, '\P{Is_Line_Break=breakboth}', "");
Expect(0, 8211, '\P{^Is_Line_Break=breakboth}', "");
Expect(1, 8212, '\p{Is_Line_Break:	 Break_Both}', "");
Expect(0, 8212, '\p{^Is_Line_Break:	 Break_Both}', "");
Expect(0, 8212, '\P{Is_Line_Break:	 Break_Both}', "");
Expect(1, 8212, '\P{^Is_Line_Break:	 Break_Both}', "");
Expect(0, 8211, '\p{Is_Line_Break:	 Break_Both}', "");
Expect(1, 8211, '\p{^Is_Line_Break:	 Break_Both}', "");
Expect(1, 8211, '\P{Is_Line_Break:	 Break_Both}', "");
Expect(0, 8211, '\P{^Is_Line_Break:	 Break_Both}', "");
Error('\p{Is_Lb= /a/B2}');
Error('\P{Is_Lb= /a/B2}');
Expect(1, 8212, '\p{Is_Lb=b2}', "");
Expect(0, 8212, '\p{^Is_Lb=b2}', "");
Expect(0, 8212, '\P{Is_Lb=b2}', "");
Expect(1, 8212, '\P{^Is_Lb=b2}', "");
Expect(0, 8211, '\p{Is_Lb=b2}', "");
Expect(1, 8211, '\p{^Is_Lb=b2}', "");
Expect(1, 8211, '\P{Is_Lb=b2}', "");
Expect(0, 8211, '\P{^Is_Lb=b2}', "");
Expect(1, 8212, '\p{Is_Lb=-B2}', "");
Expect(0, 8212, '\p{^Is_Lb=-B2}', "");
Expect(0, 8212, '\P{Is_Lb=-B2}', "");
Expect(1, 8212, '\P{^Is_Lb=-B2}', "");
Expect(0, 8211, '\p{Is_Lb=-B2}', "");
Expect(1, 8211, '\p{^Is_Lb=-B2}', "");
Expect(1, 8211, '\P{Is_Lb=-B2}', "");
Expect(0, 8211, '\P{^Is_Lb=-B2}', "");
Error('\p{Line_Break=:=		Alphabetic}');
Error('\P{Line_Break=:=		Alphabetic}');
Expect(1, 35, '\p{Line_Break=alphabetic}', "");
Expect(0, 35, '\p{^Line_Break=alphabetic}', "");
Expect(0, 35, '\P{Line_Break=alphabetic}', "");
Expect(1, 35, '\P{^Line_Break=alphabetic}', "");
Expect(0, 34, '\p{Line_Break=alphabetic}', "");
Expect(1, 34, '\p{^Line_Break=alphabetic}', "");
Expect(1, 34, '\P{Line_Break=alphabetic}', "");
Expect(0, 34, '\P{^Line_Break=alphabetic}', "");
Expect(1, 35, '\p{Line_Break:	- ALPHABETIC}', "");
Expect(0, 35, '\p{^Line_Break:	- ALPHABETIC}', "");
Expect(0, 35, '\P{Line_Break:	- ALPHABETIC}', "");
Expect(1, 35, '\P{^Line_Break:	- ALPHABETIC}', "");
Expect(0, 34, '\p{Line_Break:	- ALPHABETIC}', "");
Expect(1, 34, '\p{^Line_Break:	- ALPHABETIC}', "");
Expect(1, 34, '\P{Line_Break:	- ALPHABETIC}', "");
Expect(0, 34, '\P{^Line_Break:	- ALPHABETIC}', "");
Error('\p{Lb=	/a/AL}');
Error('\P{Lb=	/a/AL}');
Expect(1, 35, '\p{Lb=al}', "");
Expect(0, 35, '\p{^Lb=al}', "");
Expect(0, 35, '\P{Lb=al}', "");
Expect(1, 35, '\P{^Lb=al}', "");
Expect(0, 34, '\p{Lb=al}', "");
Expect(1, 34, '\p{^Lb=al}', "");
Expect(1, 34, '\P{Lb=al}', "");
Expect(0, 34, '\P{^Lb=al}', "");
Expect(1, 35, '\p{Lb=AL}', "");
Expect(0, 35, '\p{^Lb=AL}', "");
Expect(0, 35, '\P{Lb=AL}', "");
Expect(1, 35, '\P{^Lb=AL}', "");
Expect(0, 34, '\p{Lb=AL}', "");
Expect(1, 34, '\p{^Lb=AL}', "");
Expect(1, 34, '\P{Lb=AL}', "");
Expect(0, 34, '\P{^Lb=AL}', "");
Error('\p{Is_Line_Break=:=		Alphabetic}');
Error('\P{Is_Line_Break=:=		Alphabetic}');
Expect(1, 35, '\p{Is_Line_Break=alphabetic}', "");
Expect(0, 35, '\p{^Is_Line_Break=alphabetic}', "");
Expect(0, 35, '\P{Is_Line_Break=alphabetic}', "");
Expect(1, 35, '\P{^Is_Line_Break=alphabetic}', "");
Expect(0, 34, '\p{Is_Line_Break=alphabetic}', "");
Expect(1, 34, '\p{^Is_Line_Break=alphabetic}', "");
Expect(1, 34, '\P{Is_Line_Break=alphabetic}', "");
Expect(0, 34, '\P{^Is_Line_Break=alphabetic}', "");
Expect(1, 35, '\p{Is_Line_Break=	Alphabetic}', "");
Expect(0, 35, '\p{^Is_Line_Break=	Alphabetic}', "");
Expect(0, 35, '\P{Is_Line_Break=	Alphabetic}', "");
Expect(1, 35, '\P{^Is_Line_Break=	Alphabetic}', "");
Expect(0, 34, '\p{Is_Line_Break=	Alphabetic}', "");
Expect(1, 34, '\p{^Is_Line_Break=	Alphabetic}', "");
Expect(1, 34, '\P{Is_Line_Break=	Alphabetic}', "");
Expect(0, 34, '\P{^Is_Line_Break=	Alphabetic}', "");
Error('\p{Is_Lb=	 al/a/}');
Error('\P{Is_Lb=	 al/a/}');
Expect(1, 35, '\p{Is_Lb=al}', "");
Expect(0, 35, '\p{^Is_Lb=al}', "");
Expect(0, 35, '\P{Is_Lb=al}', "");
Expect(1, 35, '\P{^Is_Lb=al}', "");
Expect(0, 34, '\p{Is_Lb=al}', "");
Expect(1, 34, '\p{^Is_Lb=al}', "");
Expect(1, 34, '\P{Is_Lb=al}', "");
Expect(0, 34, '\P{^Is_Lb=al}', "");
Expect(1, 35, '\p{Is_Lb=_ AL}', "");
Expect(0, 35, '\p{^Is_Lb=_ AL}', "");
Expect(0, 35, '\P{Is_Lb=_ AL}', "");
Expect(1, 35, '\P{^Is_Lb=_ AL}', "");
Expect(0, 34, '\p{Is_Lb=_ AL}', "");
Expect(1, 34, '\p{^Is_Lb=_ AL}', "");
Expect(1, 34, '\P{Is_Lb=_ AL}', "");
Expect(0, 34, '\P{^Is_Lb=_ AL}', "");
Error('\p{Line_Break:   	-POSTFIX	numeric:=}');
Error('\P{Line_Break:   	-POSTFIX	numeric:=}');
Expect(1, 37, '\p{Line_Break=postfixnumeric}', "");
Expect(0, 37, '\p{^Line_Break=postfixnumeric}', "");
Expect(0, 37, '\P{Line_Break=postfixnumeric}', "");
Expect(1, 37, '\P{^Line_Break=postfixnumeric}', "");
Expect(0, 36, '\p{Line_Break=postfixnumeric}', "");
Expect(1, 36, '\p{^Line_Break=postfixnumeric}', "");
Expect(1, 36, '\P{Line_Break=postfixnumeric}', "");
Expect(0, 36, '\P{^Line_Break=postfixnumeric}', "");
Expect(1, 37, '\p{Line_Break=_-postfix NUMERIC}', "");
Expect(0, 37, '\p{^Line_Break=_-postfix NUMERIC}', "");
Expect(0, 37, '\P{Line_Break=_-postfix NUMERIC}', "");
Expect(1, 37, '\P{^Line_Break=_-postfix NUMERIC}', "");
Expect(0, 36, '\p{Line_Break=_-postfix NUMERIC}', "");
Expect(1, 36, '\p{^Line_Break=_-postfix NUMERIC}', "");
Expect(1, 36, '\P{Line_Break=_-postfix NUMERIC}', "");
Expect(0, 36, '\P{^Line_Break=_-postfix NUMERIC}', "");
Error('\p{Lb: _ po/a/}');
Error('\P{Lb: _ po/a/}');
Expect(1, 37, '\p{Lb=po}', "");
Expect(0, 37, '\p{^Lb=po}', "");
Expect(0, 37, '\P{Lb=po}', "");
Expect(1, 37, '\P{^Lb=po}', "");
Expect(0, 36, '\p{Lb=po}', "");
Expect(1, 36, '\p{^Lb=po}', "");
Expect(1, 36, '\P{Lb=po}', "");
Expect(0, 36, '\P{^Lb=po}', "");
Expect(1, 37, '\p{Lb=-	po}', "");
Expect(0, 37, '\p{^Lb=-	po}', "");
Expect(0, 37, '\P{Lb=-	po}', "");
Expect(1, 37, '\P{^Lb=-	po}', "");
Expect(0, 36, '\p{Lb=-	po}', "");
Expect(1, 36, '\p{^Lb=-	po}', "");
Expect(1, 36, '\P{Lb=-	po}', "");
Expect(0, 36, '\P{^Lb=-	po}', "");
Error('\p{Is_Line_Break=	 postfix numeric/a/}');
Error('\P{Is_Line_Break=	 postfix numeric/a/}');
Expect(1, 37, '\p{Is_Line_Break=postfixnumeric}', "");
Expect(0, 37, '\p{^Is_Line_Break=postfixnumeric}', "");
Expect(0, 37, '\P{Is_Line_Break=postfixnumeric}', "");
Expect(1, 37, '\P{^Is_Line_Break=postfixnumeric}', "");
Expect(0, 36, '\p{Is_Line_Break=postfixnumeric}', "");
Expect(1, 36, '\p{^Is_Line_Break=postfixnumeric}', "");
Expect(1, 36, '\P{Is_Line_Break=postfixnumeric}', "");
Expect(0, 36, '\P{^Is_Line_Break=postfixnumeric}', "");
Expect(1, 37, '\p{Is_Line_Break= _POSTFIX	NUMERIC}', "");
Expect(0, 37, '\p{^Is_Line_Break= _POSTFIX	NUMERIC}', "");
Expect(0, 37, '\P{Is_Line_Break= _POSTFIX	NUMERIC}', "");
Expect(1, 37, '\P{^Is_Line_Break= _POSTFIX	NUMERIC}', "");
Expect(0, 36, '\p{Is_Line_Break= _POSTFIX	NUMERIC}', "");
Expect(1, 36, '\p{^Is_Line_Break= _POSTFIX	NUMERIC}', "");
Expect(1, 36, '\P{Is_Line_Break= _POSTFIX	NUMERIC}', "");
Expect(0, 36, '\P{^Is_Line_Break= _POSTFIX	NUMERIC}', "");
Error('\p{Is_Lb=_/a/po}');
Error('\P{Is_Lb=_/a/po}');
Expect(1, 37, '\p{Is_Lb=po}', "");
Expect(0, 37, '\p{^Is_Lb=po}', "");
Expect(0, 37, '\P{Is_Lb=po}', "");
Expect(1, 37, '\P{^Is_Lb=po}', "");
Expect(0, 36, '\p{Is_Lb=po}', "");
Expect(1, 36, '\p{^Is_Lb=po}', "");
Expect(1, 36, '\P{Is_Lb=po}', "");
Expect(0, 36, '\P{^Is_Lb=po}', "");
Expect(1, 37, '\p{Is_Lb:	_PO}', "");
Expect(0, 37, '\p{^Is_Lb:	_PO}', "");
Expect(0, 37, '\P{Is_Lb:	_PO}', "");
Expect(1, 37, '\P{^Is_Lb:	_PO}', "");
Expect(0, 36, '\p{Is_Lb:	_PO}', "");
Expect(1, 36, '\p{^Is_Lb:	_PO}', "");
Expect(1, 36, '\P{Is_Lb:	_PO}', "");
Expect(0, 36, '\P{^Is_Lb:	_PO}', "");
Error('\p{Line_Break=-open Punctuation/a/}');
Error('\P{Line_Break=-open Punctuation/a/}');
Expect(1, 40, '\p{Line_Break=openpunctuation}', "");
Expect(0, 40, '\p{^Line_Break=openpunctuation}', "");
Expect(0, 40, '\P{Line_Break=openpunctuation}', "");
Expect(1, 40, '\P{^Line_Break=openpunctuation}', "");
Expect(0, 39, '\p{Line_Break=openpunctuation}', "");
Expect(1, 39, '\p{^Line_Break=openpunctuation}', "");
Expect(1, 39, '\P{Line_Break=openpunctuation}', "");
Expect(0, 39, '\P{^Line_Break=openpunctuation}', "");
Expect(1, 40, '\p{Line_Break=_ Open Punctuation}', "");
Expect(0, 40, '\p{^Line_Break=_ Open Punctuation}', "");
Expect(0, 40, '\P{Line_Break=_ Open Punctuation}', "");
Expect(1, 40, '\P{^Line_Break=_ Open Punctuation}', "");
Expect(0, 39, '\p{Line_Break=_ Open Punctuation}', "");
Expect(1, 39, '\p{^Line_Break=_ Open Punctuation}', "");
Expect(1, 39, '\P{Line_Break=_ Open Punctuation}', "");
Expect(0, 39, '\P{^Line_Break=_ Open Punctuation}', "");
Error('\p{Lb=	:=OP}');
Error('\P{Lb=	:=OP}');
Expect(1, 40, '\p{Lb=op}', "");
Expect(0, 40, '\p{^Lb=op}', "");
Expect(0, 40, '\P{Lb=op}', "");
Expect(1, 40, '\P{^Lb=op}', "");
Expect(0, 39, '\p{Lb=op}', "");
Expect(1, 39, '\p{^Lb=op}', "");
Expect(1, 39, '\P{Lb=op}', "");
Expect(0, 39, '\P{^Lb=op}', "");
Expect(1, 40, '\p{Lb=-_OP}', "");
Expect(0, 40, '\p{^Lb=-_OP}', "");
Expect(0, 40, '\P{Lb=-_OP}', "");
Expect(1, 40, '\P{^Lb=-_OP}', "");
Expect(0, 39, '\p{Lb=-_OP}', "");
Expect(1, 39, '\p{^Lb=-_OP}', "");
Expect(1, 39, '\P{Lb=-_OP}', "");
Expect(0, 39, '\P{^Lb=-_OP}', "");
Error('\p{Is_Line_Break=/a/-Open	Punctuation}');
Error('\P{Is_Line_Break=/a/-Open	Punctuation}');
Expect(1, 40, '\p{Is_Line_Break=openpunctuation}', "");
Expect(0, 40, '\p{^Is_Line_Break=openpunctuation}', "");
Expect(0, 40, '\P{Is_Line_Break=openpunctuation}', "");
Expect(1, 40, '\P{^Is_Line_Break=openpunctuation}', "");
Expect(0, 39, '\p{Is_Line_Break=openpunctuation}', "");
Expect(1, 39, '\p{^Is_Line_Break=openpunctuation}', "");
Expect(1, 39, '\P{Is_Line_Break=openpunctuation}', "");
Expect(0, 39, '\P{^Is_Line_Break=openpunctuation}', "");
Expect(1, 40, '\p{Is_Line_Break=-open_Punctuation}', "");
Expect(0, 40, '\p{^Is_Line_Break=-open_Punctuation}', "");
Expect(0, 40, '\P{Is_Line_Break=-open_Punctuation}', "");
Expect(1, 40, '\P{^Is_Line_Break=-open_Punctuation}', "");
Expect(0, 39, '\p{Is_Line_Break=-open_Punctuation}', "");
Expect(1, 39, '\p{^Is_Line_Break=-open_Punctuation}', "");
Expect(1, 39, '\P{Is_Line_Break=-open_Punctuation}', "");
Expect(0, 39, '\P{^Is_Line_Break=-open_Punctuation}', "");
Error('\p{Is_Lb=--OP/a/}');
Error('\P{Is_Lb=--OP/a/}');
Expect(1, 40, '\p{Is_Lb=op}', "");
Expect(0, 40, '\p{^Is_Lb=op}', "");
Expect(0, 40, '\P{Is_Lb=op}', "");
Expect(1, 40, '\P{^Is_Lb=op}', "");
Expect(0, 39, '\p{Is_Lb=op}', "");
Expect(1, 39, '\p{^Is_Lb=op}', "");
Expect(1, 39, '\P{Is_Lb=op}', "");
Expect(0, 39, '\P{^Is_Lb=op}', "");
Expect(1, 40, '\p{Is_Lb=_op}', "");
Expect(0, 40, '\p{^Is_Lb=_op}', "");
Expect(0, 40, '\P{Is_Lb=_op}', "");
Expect(1, 40, '\P{^Is_Lb=_op}', "");
Expect(0, 39, '\p{Is_Lb=_op}', "");
Expect(1, 39, '\p{^Is_Lb=_op}', "");
Expect(1, 39, '\P{Is_Lb=_op}', "");
Expect(0, 39, '\P{^Is_Lb=_op}', "");
Error('\p{Line_Break= :=Next-Line}');
Error('\P{Line_Break= :=Next-Line}');
Expect(1, 133, '\p{Line_Break=nextline}', "");
Expect(0, 133, '\p{^Line_Break=nextline}', "");
Expect(0, 133, '\P{Line_Break=nextline}', "");
Expect(1, 133, '\P{^Line_Break=nextline}', "");
Expect(0, 132, '\p{Line_Break=nextline}', "");
Expect(1, 132, '\p{^Line_Break=nextline}', "");
Expect(1, 132, '\P{Line_Break=nextline}', "");
Expect(0, 132, '\P{^Line_Break=nextline}', "");
Expect(1, 133, '\p{Line_Break=		NEXT	Line}', "");
Expect(0, 133, '\p{^Line_Break=		NEXT	Line}', "");
Expect(0, 133, '\P{Line_Break=		NEXT	Line}', "");
Expect(1, 133, '\P{^Line_Break=		NEXT	Line}', "");
Expect(0, 132, '\p{Line_Break=		NEXT	Line}', "");
Expect(1, 132, '\p{^Line_Break=		NEXT	Line}', "");
Expect(1, 132, '\P{Line_Break=		NEXT	Line}', "");
Expect(0, 132, '\P{^Line_Break=		NEXT	Line}', "");
Error('\p{Lb=/a/nl}');
Error('\P{Lb=/a/nl}');
Expect(1, 133, '\p{Lb: nl}', "");
Expect(0, 133, '\p{^Lb: nl}', "");
Expect(0, 133, '\P{Lb: nl}', "");
Expect(1, 133, '\P{^Lb: nl}', "");
Expect(0, 132, '\p{Lb: nl}', "");
Expect(1, 132, '\p{^Lb: nl}', "");
Expect(1, 132, '\P{Lb: nl}', "");
Expect(0, 132, '\P{^Lb: nl}', "");
Expect(1, 133, '\p{Lb= -NL}', "");
Expect(0, 133, '\p{^Lb= -NL}', "");
Expect(0, 133, '\P{Lb= -NL}', "");
Expect(1, 133, '\P{^Lb= -NL}', "");
Expect(0, 132, '\p{Lb= -NL}', "");
Expect(1, 132, '\p{^Lb= -NL}', "");
Expect(1, 132, '\P{Lb= -NL}', "");
Expect(0, 132, '\P{^Lb= -NL}', "");
Error('\p{Is_Line_Break=:=-Next Line}');
Error('\P{Is_Line_Break=:=-Next Line}');
Expect(1, 133, '\p{Is_Line_Break=nextline}', "");
Expect(0, 133, '\p{^Is_Line_Break=nextline}', "");
Expect(0, 133, '\P{Is_Line_Break=nextline}', "");
Expect(1, 133, '\P{^Is_Line_Break=nextline}', "");
Expect(0, 132, '\p{Is_Line_Break=nextline}', "");
Expect(1, 132, '\p{^Is_Line_Break=nextline}', "");
Expect(1, 132, '\P{Is_Line_Break=nextline}', "");
Expect(0, 132, '\P{^Is_Line_Break=nextline}', "");
Expect(1, 133, '\p{Is_Line_Break= _Next-LINE}', "");
Expect(0, 133, '\p{^Is_Line_Break= _Next-LINE}', "");
Expect(0, 133, '\P{Is_Line_Break= _Next-LINE}', "");
Expect(1, 133, '\P{^Is_Line_Break= _Next-LINE}', "");
Expect(0, 132, '\p{Is_Line_Break= _Next-LINE}', "");
Expect(1, 132, '\p{^Is_Line_Break= _Next-LINE}', "");
Expect(1, 132, '\P{Is_Line_Break= _Next-LINE}', "");
Expect(0, 132, '\P{^Is_Line_Break= _Next-LINE}', "");
Error('\p{Is_Lb= NL/a/}');
Error('\P{Is_Lb= NL/a/}');
Expect(1, 133, '\p{Is_Lb=nl}', "");
Expect(0, 133, '\p{^Is_Lb=nl}', "");
Expect(0, 133, '\P{Is_Lb=nl}', "");
Expect(1, 133, '\P{^Is_Lb=nl}', "");
Expect(0, 132, '\p{Is_Lb=nl}', "");
Expect(1, 132, '\p{^Is_Lb=nl}', "");
Expect(1, 132, '\P{Is_Lb=nl}', "");
Expect(0, 132, '\P{^Is_Lb=nl}', "");
Expect(1, 133, '\p{Is_Lb:	 NL}', "");
Expect(0, 133, '\p{^Is_Lb:	 NL}', "");
Expect(0, 133, '\P{Is_Lb:	 NL}', "");
Expect(1, 133, '\P{^Is_Lb:	 NL}', "");
Expect(0, 132, '\p{Is_Lb:	 NL}', "");
Expect(1, 132, '\p{^Is_Lb:	 NL}', "");
Expect(1, 132, '\P{Is_Lb:	 NL}', "");
Expect(0, 132, '\P{^Is_Lb:	 NL}', "");
Error('\p{Line_Break=/a/_-JT}');
Error('\P{Line_Break=/a/_-JT}');
Expect(1, 4607, '\p{Line_Break=jt}', "");
Expect(0, 4607, '\p{^Line_Break=jt}', "");
Expect(0, 4607, '\P{Line_Break=jt}', "");
Expect(1, 4607, '\P{^Line_Break=jt}', "");
Expect(0, 4519, '\p{Line_Break=jt}', "");
Expect(1, 4519, '\p{^Line_Break=jt}', "");
Expect(1, 4519, '\P{Line_Break=jt}', "");
Expect(0, 4519, '\P{^Line_Break=jt}', "");
Expect(1, 4607, '\p{Line_Break=  jt}', "");
Expect(0, 4607, '\p{^Line_Break=  jt}', "");
Expect(0, 4607, '\P{Line_Break=  jt}', "");
Expect(1, 4607, '\P{^Line_Break=  jt}', "");
Expect(0, 4519, '\p{Line_Break=  jt}', "");
Expect(1, 4519, '\p{^Line_Break=  jt}', "");
Expect(1, 4519, '\P{Line_Break=  jt}', "");
Expect(0, 4519, '\P{^Line_Break=  jt}', "");
Error('\p{Lb=	:=JT}');
Error('\P{Lb=	:=JT}');
Expect(1, 4607, '\p{Lb=jt}', "");
Expect(0, 4607, '\p{^Lb=jt}', "");
Expect(0, 4607, '\P{Lb=jt}', "");
Expect(1, 4607, '\P{^Lb=jt}', "");
Expect(0, 4519, '\p{Lb=jt}', "");
Expect(1, 4519, '\p{^Lb=jt}', "");
Expect(1, 4519, '\P{Lb=jt}', "");
Expect(0, 4519, '\P{^Lb=jt}', "");
Expect(1, 4607, '\p{Lb=	jt}', "");
Expect(0, 4607, '\p{^Lb=	jt}', "");
Expect(0, 4607, '\P{Lb=	jt}', "");
Expect(1, 4607, '\P{^Lb=	jt}', "");
Expect(0, 4519, '\p{Lb=	jt}', "");
Expect(1, 4519, '\p{^Lb=	jt}', "");
Expect(1, 4519, '\P{Lb=	jt}', "");
Expect(0, 4519, '\P{^Lb=	jt}', "");
Error('\p{Is_Line_Break=	-jt/a/}');
Error('\P{Is_Line_Break=	-jt/a/}');
Expect(1, 4607, '\p{Is_Line_Break:	jt}', "");
Expect(0, 4607, '\p{^Is_Line_Break:	jt}', "");
Expect(0, 4607, '\P{Is_Line_Break:	jt}', "");
Expect(1, 4607, '\P{^Is_Line_Break:	jt}', "");
Expect(0, 4519, '\p{Is_Line_Break:	jt}', "");
Expect(1, 4519, '\p{^Is_Line_Break:	jt}', "");
Expect(1, 4519, '\P{Is_Line_Break:	jt}', "");
Expect(0, 4519, '\P{^Is_Line_Break:	jt}', "");
Expect(1, 4607, '\p{Is_Line_Break=-_JT}', "");
Expect(0, 4607, '\p{^Is_Line_Break=-_JT}', "");
Expect(0, 4607, '\P{Is_Line_Break=-_JT}', "");
Expect(1, 4607, '\P{^Is_Line_Break=-_JT}', "");
Expect(0, 4519, '\p{Is_Line_Break=-_JT}', "");
Expect(1, 4519, '\p{^Is_Line_Break=-_JT}', "");
Expect(1, 4519, '\P{Is_Line_Break=-_JT}', "");
Expect(0, 4519, '\P{^Is_Line_Break=-_JT}', "");
Error('\p{Is_Lb=/a/	-JT}');
Error('\P{Is_Lb=/a/	-JT}');
Expect(1, 4607, '\p{Is_Lb=jt}', "");
Expect(0, 4607, '\p{^Is_Lb=jt}', "");
Expect(0, 4607, '\P{Is_Lb=jt}', "");
Expect(1, 4607, '\P{^Is_Lb=jt}', "");
Expect(0, 4519, '\p{Is_Lb=jt}', "");
Expect(1, 4519, '\p{^Is_Lb=jt}', "");
Expect(1, 4519, '\P{Is_Lb=jt}', "");
Expect(0, 4519, '\P{^Is_Lb=jt}', "");
Expect(1, 4607, '\p{Is_Lb=	_JT}', "");
Expect(0, 4607, '\p{^Is_Lb=	_JT}', "");
Expect(0, 4607, '\P{Is_Lb=	_JT}', "");
Expect(1, 4607, '\P{^Is_Lb=	_JT}', "");
Expect(0, 4519, '\p{Is_Lb=	_JT}', "");
Expect(1, 4519, '\p{^Is_Lb=	_JT}', "");
Expect(1, 4519, '\P{Is_Lb=	_JT}', "");
Expect(0, 4519, '\P{^Is_Lb=	_JT}', "");
Error('\p{Block=__New	Tai	lue:=}');
Error('\P{Block=__New	Tai	lue:=}');
Expect(1, 6623, '\p{Block=newtailue}', "");
Expect(0, 6623, '\p{^Block=newtailue}', "");
Expect(0, 6623, '\P{Block=newtailue}', "");
Expect(1, 6623, '\P{^Block=newtailue}', "");
Expect(0, 6527, '\p{Block=newtailue}', "");
Expect(1, 6527, '\p{^Block=newtailue}', "");
Expect(1, 6527, '\P{Block=newtailue}', "");
Expect(0, 6527, '\P{^Block=newtailue}', "");
Expect(1, 6623, '\p{Block= -NEW_TaiLUE}', "");
Expect(0, 6623, '\p{^Block= -NEW_TaiLUE}', "");
Expect(0, 6623, '\P{Block= -NEW_TaiLUE}', "");
Expect(1, 6623, '\P{^Block= -NEW_TaiLUE}', "");
Expect(0, 6527, '\p{Block= -NEW_TaiLUE}', "");
Expect(1, 6527, '\p{^Block= -NEW_TaiLUE}', "");
Expect(1, 6527, '\P{Block= -NEW_TaiLUE}', "");
Expect(0, 6527, '\P{^Block= -NEW_TaiLUE}', "");
Error('\p{Blk= :=new Tai-Lue}');
Error('\P{Blk= :=new Tai-Lue}');
Expect(1, 6623, '\p{Blk=newtailue}', "");
Expect(0, 6623, '\p{^Blk=newtailue}', "");
Expect(0, 6623, '\P{Blk=newtailue}', "");
Expect(1, 6623, '\P{^Blk=newtailue}', "");
Expect(0, 6527, '\p{Blk=newtailue}', "");
Expect(1, 6527, '\p{^Blk=newtailue}', "");
Expect(1, 6527, '\P{Blk=newtailue}', "");
Expect(0, 6527, '\P{^Blk=newtailue}', "");
Expect(1, 6623, '\p{Blk=_	New Tai-Lue}', "");
Expect(0, 6623, '\p{^Blk=_	New Tai-Lue}', "");
Expect(0, 6623, '\P{Blk=_	New Tai-Lue}', "");
Expect(1, 6623, '\P{^Blk=_	New Tai-Lue}', "");
Expect(0, 6527, '\p{Blk=_	New Tai-Lue}', "");
Expect(1, 6527, '\p{^Blk=_	New Tai-Lue}', "");
Expect(1, 6527, '\P{Blk=_	New Tai-Lue}', "");
Expect(0, 6527, '\P{^Blk=_	New Tai-Lue}', "");
Error('\p{Is_Block= NEW/a/Tai_Lue}');
Error('\P{Is_Block= NEW/a/Tai_Lue}');
Expect(1, 6623, '\p{Is_Block:newtailue}', "");
Expect(0, 6623, '\p{^Is_Block:newtailue}', "");
Expect(0, 6623, '\P{Is_Block:newtailue}', "");
Expect(1, 6623, '\P{^Is_Block:newtailue}', "");
Expect(0, 6527, '\p{Is_Block:newtailue}', "");
Expect(1, 6527, '\p{^Is_Block:newtailue}', "");
Expect(1, 6527, '\P{Is_Block:newtailue}', "");
Expect(0, 6527, '\P{^Is_Block:newtailue}', "");
Expect(1, 6623, '\p{Is_Block=	New_Tai_Lue}', "");
Expect(0, 6623, '\p{^Is_Block=	New_Tai_Lue}', "");
Expect(0, 6623, '\P{Is_Block=	New_Tai_Lue}', "");
Expect(1, 6623, '\P{^Is_Block=	New_Tai_Lue}', "");
Expect(0, 6527, '\p{Is_Block=	New_Tai_Lue}', "");
Expect(1, 6527, '\p{^Is_Block=	New_Tai_Lue}', "");
Expect(1, 6527, '\P{Is_Block=	New_Tai_Lue}', "");
Expect(0, 6527, '\P{^Is_Block=	New_Tai_Lue}', "");
Error('\p{Is_Blk=	-NEW/a/TaiLue}');
Error('\P{Is_Blk=	-NEW/a/TaiLue}');
Expect(1, 6623, '\p{Is_Blk=newtailue}', "");
Expect(0, 6623, '\p{^Is_Blk=newtailue}', "");
Expect(0, 6623, '\P{Is_Blk=newtailue}', "");
Expect(1, 6623, '\P{^Is_Blk=newtailue}', "");
Expect(0, 6527, '\p{Is_Blk=newtailue}', "");
Expect(1, 6527, '\p{^Is_Blk=newtailue}', "");
Expect(1, 6527, '\P{Is_Blk=newtailue}', "");
Expect(0, 6527, '\P{^Is_Blk=newtailue}', "");
Expect(1, 6623, '\p{Is_Blk= 	new-Tai LUE}', "");
Expect(0, 6623, '\p{^Is_Blk= 	new-Tai LUE}', "");
Expect(0, 6623, '\P{Is_Blk= 	new-Tai LUE}', "");
Expect(1, 6623, '\P{^Is_Blk= 	new-Tai LUE}', "");
Expect(0, 6527, '\p{Is_Blk= 	new-Tai LUE}', "");
Expect(1, 6527, '\p{^Is_Blk= 	new-Tai LUE}', "");
Expect(1, 6527, '\P{Is_Blk= 	new-Tai LUE}', "");
Expect(0, 6527, '\P{^Is_Blk= 	new-Tai LUE}', "");
Error('\p{Block=	 CJK:=Unified_Ideographs_extension-a}');
Error('\P{Block=	 CJK:=Unified_Ideographs_extension-a}');
Expect(1, 19903, '\p{Block:cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^Block:cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{Block:cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^Block:cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{Block:cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^Block:cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{Block:cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^Block:cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{Block=--CJK	Unified ideographsextension-a}', "");
Expect(0, 19903, '\p{^Block=--CJK	Unified ideographsextension-a}', "");
Expect(0, 19903, '\P{Block=--CJK	Unified ideographsextension-a}', "");
Expect(1, 19903, '\P{^Block=--CJK	Unified ideographsextension-a}', "");
Expect(0, 13311, '\p{Block=--CJK	Unified ideographsextension-a}', "");
Expect(1, 13311, '\p{^Block=--CJK	Unified ideographsextension-a}', "");
Expect(1, 13311, '\P{Block=--CJK	Unified ideographsextension-a}', "");
Expect(0, 13311, '\P{^Block=--CJK	Unified ideographsextension-a}', "");
Error('\p{Blk=- cjk:=UNIFIEDIdeographs Extension A}');
Error('\P{Blk=- cjk:=UNIFIEDIdeographs Extension A}');
Expect(1, 19903, '\p{Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{Blk=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^Blk=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{Blk:   --CJK_UNIFIED-Ideographs	ExtensionA}', "");
Expect(0, 19903, '\p{^Blk:   --CJK_UNIFIED-Ideographs	ExtensionA}', "");
Expect(0, 19903, '\P{Blk:   --CJK_UNIFIED-Ideographs	ExtensionA}', "");
Expect(1, 19903, '\P{^Blk:   --CJK_UNIFIED-Ideographs	ExtensionA}', "");
Expect(0, 13311, '\p{Blk:   --CJK_UNIFIED-Ideographs	ExtensionA}', "");
Expect(1, 13311, '\p{^Blk:   --CJK_UNIFIED-Ideographs	ExtensionA}', "");
Expect(1, 13311, '\P{Blk:   --CJK_UNIFIED-Ideographs	ExtensionA}', "");
Expect(0, 13311, '\P{^Blk:   --CJK_UNIFIED-Ideographs	ExtensionA}', "");
Error('\p{Is_Block=_CJKunified_Ideographs extension A/a/}');
Error('\P{Is_Block=_CJKunified_Ideographs extension A/a/}');
Expect(1, 19903, '\p{Is_Block=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^Is_Block=cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{Is_Block=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^Is_Block=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{Is_Block=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^Is_Block=cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{Is_Block=cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^Is_Block=cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{Is_Block=- cjk	UNIFIED	IDEOGRAPHS-Extension a}', "");
Expect(0, 19903, '\p{^Is_Block=- cjk	UNIFIED	IDEOGRAPHS-Extension a}', "");
Expect(0, 19903, '\P{Is_Block=- cjk	UNIFIED	IDEOGRAPHS-Extension a}', "");
Expect(1, 19903, '\P{^Is_Block=- cjk	UNIFIED	IDEOGRAPHS-Extension a}', "");
Expect(0, 13311, '\p{Is_Block=- cjk	UNIFIED	IDEOGRAPHS-Extension a}', "");
Expect(1, 13311, '\p{^Is_Block=- cjk	UNIFIED	IDEOGRAPHS-Extension a}', "");
Expect(1, 13311, '\P{Is_Block=- cjk	UNIFIED	IDEOGRAPHS-Extension a}', "");
Expect(0, 13311, '\P{^Is_Block=- cjk	UNIFIED	IDEOGRAPHS-Extension a}', "");
Error('\p{Is_Blk=	-cjk:=unified_Ideographs Extension-a}');
Error('\P{Is_Blk=	-cjk:=unified_Ideographs Extension-a}');
Expect(1, 19903, '\p{Is_Blk:   cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^Is_Blk:   cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{Is_Blk:   cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^Is_Blk:   cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{Is_Blk:   cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^Is_Blk:   cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{Is_Blk:   cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^Is_Blk:   cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{Is_Blk: -CJKunified_IDEOGRAPHS EXTENSION a}', "");
Expect(0, 19903, '\p{^Is_Blk: -CJKunified_IDEOGRAPHS EXTENSION a}', "");
Expect(0, 19903, '\P{Is_Blk: -CJKunified_IDEOGRAPHS EXTENSION a}', "");
Expect(1, 19903, '\P{^Is_Blk: -CJKunified_IDEOGRAPHS EXTENSION a}', "");
Expect(0, 13311, '\p{Is_Blk: -CJKunified_IDEOGRAPHS EXTENSION a}', "");
Expect(1, 13311, '\p{^Is_Blk: -CJKunified_IDEOGRAPHS EXTENSION a}', "");
Expect(1, 13311, '\P{Is_Blk: -CJKunified_IDEOGRAPHS EXTENSION a}', "");
Expect(0, 13311, '\P{^Is_Blk: -CJKunified_IDEOGRAPHS EXTENSION a}', "");
Error('\p{Block:	/a/-hangul-JAMO}');
Error('\P{Block:	/a/-hangul-JAMO}');
Expect(1, 4607, '\p{Block=hanguljamo}', "");
Expect(0, 4607, '\p{^Block=hanguljamo}', "");
Expect(0, 4607, '\P{Block=hanguljamo}', "");
Expect(1, 4607, '\P{^Block=hanguljamo}', "");
Expect(0, 4351, '\p{Block=hanguljamo}', "");
Expect(1, 4351, '\p{^Block=hanguljamo}', "");
Expect(1, 4351, '\P{Block=hanguljamo}', "");
Expect(0, 4351, '\P{^Block=hanguljamo}', "");
Expect(1, 4607, '\p{Block= _hangul-jamo}', "");
Expect(0, 4607, '\p{^Block= _hangul-jamo}', "");
Expect(0, 4607, '\P{Block= _hangul-jamo}', "");
Expect(1, 4607, '\P{^Block= _hangul-jamo}', "");
Expect(0, 4351, '\p{Block= _hangul-jamo}', "");
Expect(1, 4351, '\p{^Block= _hangul-jamo}', "");
Expect(1, 4351, '\P{Block= _hangul-jamo}', "");
Expect(0, 4351, '\P{^Block= _hangul-jamo}', "");
Error('\p{Blk=  Hangul/a/Jamo}');
Error('\P{Blk=  Hangul/a/Jamo}');
Expect(1, 4607, '\p{Blk=hanguljamo}', "");
Expect(0, 4607, '\p{^Blk=hanguljamo}', "");
Expect(0, 4607, '\P{Blk=hanguljamo}', "");
Expect(1, 4607, '\P{^Blk=hanguljamo}', "");
Expect(0, 4351, '\p{Blk=hanguljamo}', "");
Expect(1, 4351, '\p{^Blk=hanguljamo}', "");
Expect(1, 4351, '\P{Blk=hanguljamo}', "");
Expect(0, 4351, '\P{^Blk=hanguljamo}', "");
Expect(1, 4607, '\p{Blk=-HANGUL-Jamo}', "");
Expect(0, 4607, '\p{^Blk=-HANGUL-Jamo}', "");
Expect(0, 4607, '\P{Blk=-HANGUL-Jamo}', "");
Expect(1, 4607, '\P{^Blk=-HANGUL-Jamo}', "");
Expect(0, 4351, '\p{Blk=-HANGUL-Jamo}', "");
Expect(1, 4351, '\p{^Blk=-HANGUL-Jamo}', "");
Expect(1, 4351, '\P{Blk=-HANGUL-Jamo}', "");
Expect(0, 4351, '\P{^Blk=-HANGUL-Jamo}', "");
Error('\p{Is_Block=--Hangul_JAMO:=}');
Error('\P{Is_Block=--Hangul_JAMO:=}');
Expect(1, 4607, '\p{Is_Block=hanguljamo}', "");
Expect(0, 4607, '\p{^Is_Block=hanguljamo}', "");
Expect(0, 4607, '\P{Is_Block=hanguljamo}', "");
Expect(1, 4607, '\P{^Is_Block=hanguljamo}', "");
Expect(0, 4351, '\p{Is_Block=hanguljamo}', "");
Expect(1, 4351, '\p{^Is_Block=hanguljamo}', "");
Expect(1, 4351, '\P{Is_Block=hanguljamo}', "");
Expect(0, 4351, '\P{^Is_Block=hanguljamo}', "");
Expect(1, 4607, '\p{Is_Block=-Hangul	Jamo}', "");
Expect(0, 4607, '\p{^Is_Block=-Hangul	Jamo}', "");
Expect(0, 4607, '\P{Is_Block=-Hangul	Jamo}', "");
Expect(1, 4607, '\P{^Is_Block=-Hangul	Jamo}', "");
Expect(0, 4351, '\p{Is_Block=-Hangul	Jamo}', "");
Expect(1, 4351, '\p{^Is_Block=-Hangul	Jamo}', "");
Expect(1, 4351, '\P{Is_Block=-Hangul	Jamo}', "");
Expect(0, 4351, '\P{^Is_Block=-Hangul	Jamo}', "");
Error('\p{Is_Blk=_:=Hanguljamo}');
Error('\P{Is_Blk=_:=Hanguljamo}');
Expect(1, 4607, '\p{Is_Blk=hanguljamo}', "");
Expect(0, 4607, '\p{^Is_Blk=hanguljamo}', "");
Expect(0, 4607, '\P{Is_Blk=hanguljamo}', "");
Expect(1, 4607, '\P{^Is_Blk=hanguljamo}', "");
Expect(0, 4351, '\p{Is_Blk=hanguljamo}', "");
Expect(1, 4351, '\p{^Is_Blk=hanguljamo}', "");
Expect(1, 4351, '\P{Is_Blk=hanguljamo}', "");
Expect(0, 4351, '\P{^Is_Blk=hanguljamo}', "");
Expect(1, 4607, '\p{Is_Blk=-_hangulJamo}', "");
Expect(0, 4607, '\p{^Is_Blk=-_hangulJamo}', "");
Expect(0, 4607, '\P{Is_Blk=-_hangulJamo}', "");
Expect(1, 4607, '\P{^Is_Blk=-_hangulJamo}', "");
Expect(0, 4351, '\p{Is_Blk=-_hangulJamo}', "");
Expect(1, 4351, '\p{^Is_Blk=-_hangulJamo}', "");
Expect(1, 4351, '\P{Is_Blk=-_hangulJamo}', "");
Expect(0, 4351, '\P{^Is_Blk=-_hangulJamo}', "");
Error('\p{Block=-/a/DINGBATS}');
Error('\P{Block=-/a/DINGBATS}');
Expect(1, 10175, '\p{Block=dingbats}', "");
Expect(0, 10175, '\p{^Block=dingbats}', "");
Expect(0, 10175, '\P{Block=dingbats}', "");
Expect(1, 10175, '\P{^Block=dingbats}', "");
Expect(0, 9983, '\p{Block=dingbats}', "");
Expect(1, 9983, '\p{^Block=dingbats}', "");
Expect(1, 9983, '\P{Block=dingbats}', "");
Expect(0, 9983, '\P{^Block=dingbats}', "");
Expect(1, 10175, '\p{Block=		Dingbats}', "");
Expect(0, 10175, '\p{^Block=		Dingbats}', "");
Expect(0, 10175, '\P{Block=		Dingbats}', "");
Expect(1, 10175, '\P{^Block=		Dingbats}', "");
Expect(0, 9983, '\p{Block=		Dingbats}', "");
Expect(1, 9983, '\p{^Block=		Dingbats}', "");
Expect(1, 9983, '\P{Block=		Dingbats}', "");
Expect(0, 9983, '\P{^Block=		Dingbats}', "");
Error('\p{Blk=-/a/dingbats}');
Error('\P{Blk=-/a/dingbats}');
Expect(1, 10175, '\p{Blk=dingbats}', "");
Expect(0, 10175, '\p{^Blk=dingbats}', "");
Expect(0, 10175, '\P{Blk=dingbats}', "");
Expect(1, 10175, '\P{^Blk=dingbats}', "");
Expect(0, 9983, '\p{Blk=dingbats}', "");
Expect(1, 9983, '\p{^Blk=dingbats}', "");
Expect(1, 9983, '\P{Blk=dingbats}', "");
Expect(0, 9983, '\P{^Blk=dingbats}', "");
Expect(1, 10175, '\p{Blk=- Dingbats}', "");
Expect(0, 10175, '\p{^Blk=- Dingbats}', "");
Expect(0, 10175, '\P{Blk=- Dingbats}', "");
Expect(1, 10175, '\P{^Blk=- Dingbats}', "");
Expect(0, 9983, '\p{Blk=- Dingbats}', "");
Expect(1, 9983, '\p{^Blk=- Dingbats}', "");
Expect(1, 9983, '\P{Blk=- Dingbats}', "");
Expect(0, 9983, '\P{^Blk=- Dingbats}', "");
Error('\p{Is_Block=	/a/dingbats}');
Error('\P{Is_Block=	/a/dingbats}');
Expect(1, 10175, '\p{Is_Block=dingbats}', "");
Expect(0, 10175, '\p{^Is_Block=dingbats}', "");
Expect(0, 10175, '\P{Is_Block=dingbats}', "");
Expect(1, 10175, '\P{^Is_Block=dingbats}', "");
Expect(0, 9983, '\p{Is_Block=dingbats}', "");
Expect(1, 9983, '\p{^Is_Block=dingbats}', "");
Expect(1, 9983, '\P{Is_Block=dingbats}', "");
Expect(0, 9983, '\P{^Is_Block=dingbats}', "");
Expect(1, 10175, '\p{Is_Block= Dingbats}', "");
Expect(0, 10175, '\p{^Is_Block= Dingbats}', "");
Expect(0, 10175, '\P{Is_Block= Dingbats}', "");
Expect(1, 10175, '\P{^Is_Block= Dingbats}', "");
Expect(0, 9983, '\p{Is_Block= Dingbats}', "");
Expect(1, 9983, '\p{^Is_Block= Dingbats}', "");
Expect(1, 9983, '\P{Is_Block= Dingbats}', "");
Expect(0, 9983, '\P{^Is_Block= Dingbats}', "");
Error('\p{Is_Blk= :=DINGBATS}');
Error('\P{Is_Blk= :=DINGBATS}');
Expect(1, 10175, '\p{Is_Blk=dingbats}', "");
Expect(0, 10175, '\p{^Is_Blk=dingbats}', "");
Expect(0, 10175, '\P{Is_Blk=dingbats}', "");
Expect(1, 10175, '\P{^Is_Blk=dingbats}', "");
Expect(0, 9983, '\p{Is_Blk=dingbats}', "");
Expect(1, 9983, '\p{^Is_Blk=dingbats}', "");
Expect(1, 9983, '\P{Is_Blk=dingbats}', "");
Expect(0, 9983, '\P{^Is_Blk=dingbats}', "");
Expect(1, 10175, '\p{Is_Blk=_ DINGBATS}', "");
Expect(0, 10175, '\p{^Is_Blk=_ DINGBATS}', "");
Expect(0, 10175, '\P{Is_Blk=_ DINGBATS}', "");
Expect(1, 10175, '\P{^Is_Blk=_ DINGBATS}', "");
Expect(0, 9983, '\p{Is_Blk=_ DINGBATS}', "");
Expect(1, 9983, '\p{^Is_Blk=_ DINGBATS}', "");
Expect(1, 9983, '\P{Is_Blk=_ DINGBATS}', "");
Expect(0, 9983, '\P{^Is_Blk=_ DINGBATS}', "");
Error('\p{Block:	 Bamum:=}');
Error('\P{Block:	 Bamum:=}');
Expect(1, 42751, '\p{Block=bamum}', "");
Expect(0, 42751, '\p{^Block=bamum}', "");
Expect(0, 42751, '\P{Block=bamum}', "");
Expect(1, 42751, '\P{^Block=bamum}', "");
Expect(0, 42655, '\p{Block=bamum}', "");
Expect(1, 42655, '\p{^Block=bamum}', "");
Expect(1, 42655, '\P{Block=bamum}', "");
Expect(0, 42655, '\P{^Block=bamum}', "");
Expect(1, 42751, '\p{Block=	Bamum}', "");
Expect(0, 42751, '\p{^Block=	Bamum}', "");
Expect(0, 42751, '\P{Block=	Bamum}', "");
Expect(1, 42751, '\P{^Block=	Bamum}', "");
Expect(0, 42655, '\p{Block=	Bamum}', "");
Expect(1, 42655, '\p{^Block=	Bamum}', "");
Expect(1, 42655, '\P{Block=	Bamum}', "");
Expect(0, 42655, '\P{^Block=	Bamum}', "");
Error('\p{Blk:   /a/-bamum}');
Error('\P{Blk:   /a/-bamum}');
Expect(1, 42751, '\p{Blk=bamum}', "");
Expect(0, 42751, '\p{^Blk=bamum}', "");
Expect(0, 42751, '\P{Blk=bamum}', "");
Expect(1, 42751, '\P{^Blk=bamum}', "");
Expect(0, 42655, '\p{Blk=bamum}', "");
Expect(1, 42655, '\p{^Blk=bamum}', "");
Expect(1, 42655, '\P{Blk=bamum}', "");
Expect(0, 42655, '\P{^Blk=bamum}', "");
Expect(1, 42751, '\p{Blk=--Bamum}', "");
Expect(0, 42751, '\p{^Blk=--Bamum}', "");
Expect(0, 42751, '\P{Blk=--Bamum}', "");
Expect(1, 42751, '\P{^Blk=--Bamum}', "");
Expect(0, 42655, '\p{Blk=--Bamum}', "");
Expect(1, 42655, '\p{^Blk=--Bamum}', "");
Expect(1, 42655, '\P{Blk=--Bamum}', "");
Expect(0, 42655, '\P{^Blk=--Bamum}', "");
Error('\p{Is_Block=-:=Bamum}');
Error('\P{Is_Block=-:=Bamum}');
Expect(1, 42751, '\p{Is_Block=bamum}', "");
Expect(0, 42751, '\p{^Is_Block=bamum}', "");
Expect(0, 42751, '\P{Is_Block=bamum}', "");
Expect(1, 42751, '\P{^Is_Block=bamum}', "");
Expect(0, 42655, '\p{Is_Block=bamum}', "");
Expect(1, 42655, '\p{^Is_Block=bamum}', "");
Expect(1, 42655, '\P{Is_Block=bamum}', "");
Expect(0, 42655, '\P{^Is_Block=bamum}', "");
Expect(1, 42751, '\p{Is_Block=	-Bamum}', "");
Expect(0, 42751, '\p{^Is_Block=	-Bamum}', "");
Expect(0, 42751, '\P{Is_Block=	-Bamum}', "");
Expect(1, 42751, '\P{^Is_Block=	-Bamum}', "");
Expect(0, 42655, '\p{Is_Block=	-Bamum}', "");
Expect(1, 42655, '\p{^Is_Block=	-Bamum}', "");
Expect(1, 42655, '\P{Is_Block=	-Bamum}', "");
Expect(0, 42655, '\P{^Is_Block=	-Bamum}', "");
Error('\p{Is_Blk=:=_-BAMUM}');
Error('\P{Is_Blk=:=_-BAMUM}');
Expect(1, 42751, '\p{Is_Blk=bamum}', "");
Expect(0, 42751, '\p{^Is_Blk=bamum}', "");
Expect(0, 42751, '\P{Is_Blk=bamum}', "");
Expect(1, 42751, '\P{^Is_Blk=bamum}', "");
Expect(0, 42655, '\p{Is_Blk=bamum}', "");
Expect(1, 42655, '\p{^Is_Blk=bamum}', "");
Expect(1, 42655, '\P{Is_Blk=bamum}', "");
Expect(0, 42655, '\P{^Is_Blk=bamum}', "");
Expect(1, 42751, '\p{Is_Blk= 	Bamum}', "");
Expect(0, 42751, '\p{^Is_Blk= 	Bamum}', "");
Expect(0, 42751, '\P{Is_Blk= 	Bamum}', "");
Expect(1, 42751, '\P{^Is_Blk= 	Bamum}', "");
Expect(0, 42655, '\p{Is_Blk= 	Bamum}', "");
Expect(1, 42655, '\p{^Is_Blk= 	Bamum}', "");
Expect(1, 42655, '\P{Is_Blk= 	Bamum}', "");
Expect(0, 42655, '\P{^Is_Blk= 	Bamum}', "");
Error('\p{Block=_	inscriptionalPARTHIAN/a/}');
Error('\P{Block=_	inscriptionalPARTHIAN/a/}');
Expect(1, 68447, '\p{Block: inscriptionalparthian}', "");
Expect(0, 68447, '\p{^Block: inscriptionalparthian}', "");
Expect(0, 68447, '\P{Block: inscriptionalparthian}', "");
Expect(1, 68447, '\P{^Block: inscriptionalparthian}', "");
Expect(0, 68415, '\p{Block: inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Block: inscriptionalparthian}', "");
Expect(1, 68415, '\P{Block: inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Block: inscriptionalparthian}', "");
Expect(1, 68447, '\p{Block=-Inscriptional Parthian}', "");
Expect(0, 68447, '\p{^Block=-Inscriptional Parthian}', "");
Expect(0, 68447, '\P{Block=-Inscriptional Parthian}', "");
Expect(1, 68447, '\P{^Block=-Inscriptional Parthian}', "");
Expect(0, 68415, '\p{Block=-Inscriptional Parthian}', "");
Expect(1, 68415, '\p{^Block=-Inscriptional Parthian}', "");
Expect(1, 68415, '\P{Block=-Inscriptional Parthian}', "");
Expect(0, 68415, '\P{^Block=-Inscriptional Parthian}', "");
Error('\p{Blk= 	inscriptional:=Parthian}');
Error('\P{Blk= 	inscriptional:=Parthian}');
Expect(1, 68447, '\p{Blk=inscriptionalparthian}', "");
Expect(0, 68447, '\p{^Blk=inscriptionalparthian}', "");
Expect(0, 68447, '\P{Blk=inscriptionalparthian}', "");
Expect(1, 68447, '\P{^Blk=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Blk=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Blk=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Blk=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Blk=inscriptionalparthian}', "");
Expect(1, 68447, '\p{Blk= _INSCRIPTIONAL-Parthian}', "");
Expect(0, 68447, '\p{^Blk= _INSCRIPTIONAL-Parthian}', "");
Expect(0, 68447, '\P{Blk= _INSCRIPTIONAL-Parthian}', "");
Expect(1, 68447, '\P{^Blk= _INSCRIPTIONAL-Parthian}', "");
Expect(0, 68415, '\p{Blk= _INSCRIPTIONAL-Parthian}', "");
Expect(1, 68415, '\p{^Blk= _INSCRIPTIONAL-Parthian}', "");
Expect(1, 68415, '\P{Blk= _INSCRIPTIONAL-Parthian}', "");
Expect(0, 68415, '\P{^Blk= _INSCRIPTIONAL-Parthian}', "");
Error('\p{Is_Block=	/a/InscriptionalParthian}');
Error('\P{Is_Block=	/a/InscriptionalParthian}');
Expect(1, 68447, '\p{Is_Block=inscriptionalparthian}', "");
Expect(0, 68447, '\p{^Is_Block=inscriptionalparthian}', "");
Expect(0, 68447, '\P{Is_Block=inscriptionalparthian}', "");
Expect(1, 68447, '\P{^Is_Block=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Is_Block=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Is_Block=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Is_Block=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Is_Block=inscriptionalparthian}', "");
Expect(1, 68447, '\p{Is_Block=_-Inscriptional_parthian}', "");
Expect(0, 68447, '\p{^Is_Block=_-Inscriptional_parthian}', "");
Expect(0, 68447, '\P{Is_Block=_-Inscriptional_parthian}', "");
Expect(1, 68447, '\P{^Is_Block=_-Inscriptional_parthian}', "");
Expect(0, 68415, '\p{Is_Block=_-Inscriptional_parthian}', "");
Expect(1, 68415, '\p{^Is_Block=_-Inscriptional_parthian}', "");
Expect(1, 68415, '\P{Is_Block=_-Inscriptional_parthian}', "");
Expect(0, 68415, '\P{^Is_Block=_-Inscriptional_parthian}', "");
Error('\p{Is_Blk=:=-	inscriptional_Parthian}');
Error('\P{Is_Blk=:=-	inscriptional_Parthian}');
Expect(1, 68447, '\p{Is_Blk=inscriptionalparthian}', "");
Expect(0, 68447, '\p{^Is_Blk=inscriptionalparthian}', "");
Expect(0, 68447, '\P{Is_Blk=inscriptionalparthian}', "");
Expect(1, 68447, '\P{^Is_Blk=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Is_Blk=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Is_Blk=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Is_Blk=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Is_Blk=inscriptionalparthian}', "");
Expect(1, 68447, '\p{Is_Blk=-inscriptionalParthian}', "");
Expect(0, 68447, '\p{^Is_Blk=-inscriptionalParthian}', "");
Expect(0, 68447, '\P{Is_Blk=-inscriptionalParthian}', "");
Expect(1, 68447, '\P{^Is_Blk=-inscriptionalParthian}', "");
Expect(0, 68415, '\p{Is_Blk=-inscriptionalParthian}', "");
Expect(1, 68415, '\p{^Is_Blk=-inscriptionalParthian}', "");
Expect(1, 68415, '\P{Is_Blk=-inscriptionalParthian}', "");
Expect(0, 68415, '\P{^Is_Blk=-inscriptionalParthian}', "");
Error('\p{Block=		UNIFIEDCanadian/a/Aboriginal	Syllabics}');
Error('\P{Block=		UNIFIEDCanadian/a/Aboriginal	Syllabics}');
Expect(1, 5759, '\p{Block:unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^Block:unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{Block:unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^Block:unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{Block:unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^Block:unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{Block:unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^Block:unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{Block=	_unifiedCanadian	Aboriginal syllabics}', "");
Expect(0, 5759, '\p{^Block=	_unifiedCanadian	Aboriginal syllabics}', "");
Expect(0, 5759, '\P{Block=	_unifiedCanadian	Aboriginal syllabics}', "");
Expect(1, 5759, '\P{^Block=	_unifiedCanadian	Aboriginal syllabics}', "");
Expect(0, 5119, '\p{Block=	_unifiedCanadian	Aboriginal syllabics}', "");
Expect(1, 5119, '\p{^Block=	_unifiedCanadian	Aboriginal syllabics}', "");
Expect(1, 5119, '\P{Block=	_unifiedCanadian	Aboriginal syllabics}', "");
Expect(0, 5119, '\P{^Block=	_unifiedCanadian	Aboriginal syllabics}', "");
Error('\p{Blk=/a/  Canadian_SYLLABICS}');
Error('\P{Blk=/a/  Canadian_SYLLABICS}');
Expect(1, 5759, '\p{Blk=canadiansyllabics}', "");
Expect(0, 5759, '\p{^Blk=canadiansyllabics}', "");
Expect(0, 5759, '\P{Blk=canadiansyllabics}', "");
Expect(1, 5759, '\P{^Blk=canadiansyllabics}', "");
Expect(0, 5119, '\p{Blk=canadiansyllabics}', "");
Expect(1, 5119, '\p{^Blk=canadiansyllabics}', "");
Expect(1, 5119, '\P{Blk=canadiansyllabics}', "");
Expect(0, 5119, '\P{^Blk=canadiansyllabics}', "");
Expect(1, 5759, '\p{Blk= Canadian	Syllabics}', "");
Expect(0, 5759, '\p{^Blk= Canadian	Syllabics}', "");
Expect(0, 5759, '\P{Blk= Canadian	Syllabics}', "");
Expect(1, 5759, '\P{^Blk= Canadian	Syllabics}', "");
Expect(0, 5119, '\p{Blk= Canadian	Syllabics}', "");
Expect(1, 5119, '\p{^Blk= Canadian	Syllabics}', "");
Expect(1, 5119, '\P{Blk= Canadian	Syllabics}', "");
Expect(0, 5119, '\P{^Blk= Canadian	Syllabics}', "");
Error('\p{Is_Block=- Unified:=canadian Aboriginal syllabics}');
Error('\P{Is_Block=- Unified:=canadian Aboriginal syllabics}');
Expect(1, 5759, '\p{Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^Is_Block=unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{Is_Block=_-Unified-canadian Aboriginal syllabics}', "");
Expect(0, 5759, '\p{^Is_Block=_-Unified-canadian Aboriginal syllabics}', "");
Expect(0, 5759, '\P{Is_Block=_-Unified-canadian Aboriginal syllabics}', "");
Expect(1, 5759, '\P{^Is_Block=_-Unified-canadian Aboriginal syllabics}', "");
Expect(0, 5119, '\p{Is_Block=_-Unified-canadian Aboriginal syllabics}', "");
Expect(1, 5119, '\p{^Is_Block=_-Unified-canadian Aboriginal syllabics}', "");
Expect(1, 5119, '\P{Is_Block=_-Unified-canadian Aboriginal syllabics}', "");
Expect(0, 5119, '\P{^Is_Block=_-Unified-canadian Aboriginal syllabics}', "");
Error('\p{Is_Blk= CANADIAN:=SYLLABICS}');
Error('\P{Is_Blk= CANADIAN:=SYLLABICS}');
Expect(1, 5759, '\p{Is_Blk=canadiansyllabics}', "");
Expect(0, 5759, '\p{^Is_Blk=canadiansyllabics}', "");
Expect(0, 5759, '\P{Is_Blk=canadiansyllabics}', "");
Expect(1, 5759, '\P{^Is_Blk=canadiansyllabics}', "");
Expect(0, 5119, '\p{Is_Blk=canadiansyllabics}', "");
Expect(1, 5119, '\p{^Is_Blk=canadiansyllabics}', "");
Expect(1, 5119, '\P{Is_Blk=canadiansyllabics}', "");
Expect(0, 5119, '\P{^Is_Blk=canadiansyllabics}', "");
Expect(1, 5759, '\p{Is_Blk=-_canadian_SYLLABICS}', "");
Expect(0, 5759, '\p{^Is_Blk=-_canadian_SYLLABICS}', "");
Expect(0, 5759, '\P{Is_Blk=-_canadian_SYLLABICS}', "");
Expect(1, 5759, '\P{^Is_Blk=-_canadian_SYLLABICS}', "");
Expect(0, 5119, '\p{Is_Blk=-_canadian_SYLLABICS}', "");
Expect(1, 5119, '\p{^Is_Blk=-_canadian_SYLLABICS}', "");
Expect(1, 5119, '\P{Is_Blk=-_canadian_SYLLABICS}', "");
Expect(0, 5119, '\P{^Is_Blk=-_canadian_SYLLABICS}', "");
Error('\p{Block=-/a/VARIATION-SELECTORS}');
Error('\P{Block=-/a/VARIATION-SELECTORS}');
Expect(1, 65039, '\p{Block:	variationselectors}', "");
Expect(0, 65039, '\p{^Block:	variationselectors}', "");
Expect(0, 65039, '\P{Block:	variationselectors}', "");
Expect(1, 65039, '\P{^Block:	variationselectors}', "");
Expect(0, 65023, '\p{Block:	variationselectors}', "");
Expect(1, 65023, '\p{^Block:	variationselectors}', "");
Expect(1, 65023, '\P{Block:	variationselectors}', "");
Expect(0, 65023, '\P{^Block:	variationselectors}', "");
Expect(1, 65039, '\p{Block= variationSelectors}', "");
Expect(0, 65039, '\p{^Block= variationSelectors}', "");
Expect(0, 65039, '\P{Block= variationSelectors}', "");
Expect(1, 65039, '\P{^Block= variationSelectors}', "");
Expect(0, 65023, '\p{Block= variationSelectors}', "");
Expect(1, 65023, '\p{^Block= variationSelectors}', "");
Expect(1, 65023, '\P{Block= variationSelectors}', "");
Expect(0, 65023, '\P{^Block= variationSelectors}', "");
Error('\p{Blk=:= variation	Selectors}');
Error('\P{Blk=:= variation	Selectors}');
Expect(1, 65039, '\p{Blk:   variationselectors}', "");
Expect(0, 65039, '\p{^Blk:   variationselectors}', "");
Expect(0, 65039, '\P{Blk:   variationselectors}', "");
Expect(1, 65039, '\P{^Blk:   variationselectors}', "");
Expect(0, 65023, '\p{Blk:   variationselectors}', "");
Expect(1, 65023, '\p{^Blk:   variationselectors}', "");
Expect(1, 65023, '\P{Blk:   variationselectors}', "");
Expect(0, 65023, '\P{^Blk:   variationselectors}', "");
Expect(1, 65039, '\p{Blk=_-VariationSELECTORS}', "");
Expect(0, 65039, '\p{^Blk=_-VariationSELECTORS}', "");
Expect(0, 65039, '\P{Blk=_-VariationSELECTORS}', "");
Expect(1, 65039, '\P{^Blk=_-VariationSELECTORS}', "");
Expect(0, 65023, '\p{Blk=_-VariationSELECTORS}', "");
Expect(1, 65023, '\p{^Blk=_-VariationSELECTORS}', "");
Expect(1, 65023, '\P{Blk=_-VariationSELECTORS}', "");
Expect(0, 65023, '\P{^Blk=_-VariationSELECTORS}', "");
Error('\p{Is_Block=	/a/VARIATION_selectors}');
Error('\P{Is_Block=	/a/VARIATION_selectors}');
Expect(1, 65039, '\p{Is_Block=variationselectors}', "");
Expect(0, 65039, '\p{^Is_Block=variationselectors}', "");
Expect(0, 65039, '\P{Is_Block=variationselectors}', "");
Expect(1, 65039, '\P{^Is_Block=variationselectors}', "");
Expect(0, 65023, '\p{Is_Block=variationselectors}', "");
Expect(1, 65023, '\p{^Is_Block=variationselectors}', "");
Expect(1, 65023, '\P{Is_Block=variationselectors}', "");
Expect(0, 65023, '\P{^Is_Block=variationselectors}', "");
Expect(1, 65039, '\p{Is_Block= variation-Selectors}', "");
Expect(0, 65039, '\p{^Is_Block= variation-Selectors}', "");
Expect(0, 65039, '\P{Is_Block= variation-Selectors}', "");
Expect(1, 65039, '\P{^Is_Block= variation-Selectors}', "");
Expect(0, 65023, '\p{Is_Block= variation-Selectors}', "");
Expect(1, 65023, '\p{^Is_Block= variation-Selectors}', "");
Expect(1, 65023, '\P{Is_Block= variation-Selectors}', "");
Expect(0, 65023, '\P{^Is_Block= variation-Selectors}', "");
Error('\p{Is_Blk=	_VARIATION:=Selectors}');
Error('\P{Is_Blk=	_VARIATION:=Selectors}');
Expect(1, 65039, '\p{Is_Blk=variationselectors}', "");
Expect(0, 65039, '\p{^Is_Blk=variationselectors}', "");
Expect(0, 65039, '\P{Is_Blk=variationselectors}', "");
Expect(1, 65039, '\P{^Is_Blk=variationselectors}', "");
Expect(0, 65023, '\p{Is_Blk=variationselectors}', "");
Expect(1, 65023, '\p{^Is_Blk=variationselectors}', "");
Expect(1, 65023, '\P{Is_Blk=variationselectors}', "");
Expect(0, 65023, '\P{^Is_Blk=variationselectors}', "");
Expect(1, 65039, '\p{Is_Blk=	 VARIATION	selectors}', "");
Expect(0, 65039, '\p{^Is_Blk=	 VARIATION	selectors}', "");
Expect(0, 65039, '\P{Is_Blk=	 VARIATION	selectors}', "");
Expect(1, 65039, '\P{^Is_Blk=	 VARIATION	selectors}', "");
Expect(0, 65023, '\p{Is_Blk=	 VARIATION	selectors}', "");
Expect(1, 65023, '\p{^Is_Blk=	 VARIATION	selectors}', "");
Expect(1, 65023, '\P{Is_Blk=	 VARIATION	selectors}', "");
Expect(0, 65023, '\P{^Is_Blk=	 VARIATION	selectors}', "");
Error('\p{Block=:=	 numberForms}');
Error('\P{Block=:=	 numberForms}');
Expect(1, 8591, '\p{Block=numberforms}', "");
Expect(0, 8591, '\p{^Block=numberforms}', "");
Expect(0, 8591, '\P{Block=numberforms}', "");
Expect(1, 8591, '\P{^Block=numberforms}', "");
Expect(0, 8527, '\p{Block=numberforms}', "");
Expect(1, 8527, '\p{^Block=numberforms}', "");
Expect(1, 8527, '\P{Block=numberforms}', "");
Expect(0, 8527, '\P{^Block=numberforms}', "");
Expect(1, 8591, '\p{Block:  NUMBERforms}', "");
Expect(0, 8591, '\p{^Block:  NUMBERforms}', "");
Expect(0, 8591, '\P{Block:  NUMBERforms}', "");
Expect(1, 8591, '\P{^Block:  NUMBERforms}', "");
Expect(0, 8527, '\p{Block:  NUMBERforms}', "");
Expect(1, 8527, '\p{^Block:  NUMBERforms}', "");
Expect(1, 8527, '\P{Block:  NUMBERforms}', "");
Expect(0, 8527, '\P{^Block:  NUMBERforms}', "");
Error('\p{Blk=_:=number	Forms}');
Error('\P{Blk=_:=number	Forms}');
Expect(1, 8591, '\p{Blk=numberforms}', "");
Expect(0, 8591, '\p{^Blk=numberforms}', "");
Expect(0, 8591, '\P{Blk=numberforms}', "");
Expect(1, 8591, '\P{^Blk=numberforms}', "");
Expect(0, 8527, '\p{Blk=numberforms}', "");
Expect(1, 8527, '\p{^Blk=numberforms}', "");
Expect(1, 8527, '\P{Blk=numberforms}', "");
Expect(0, 8527, '\P{^Blk=numberforms}', "");
Expect(1, 8591, '\p{Blk=_ NUMBER forms}', "");
Expect(0, 8591, '\p{^Blk=_ NUMBER forms}', "");
Expect(0, 8591, '\P{Blk=_ NUMBER forms}', "");
Expect(1, 8591, '\P{^Blk=_ NUMBER forms}', "");
Expect(0, 8527, '\p{Blk=_ NUMBER forms}', "");
Expect(1, 8527, '\p{^Blk=_ NUMBER forms}', "");
Expect(1, 8527, '\P{Blk=_ NUMBER forms}', "");
Expect(0, 8527, '\P{^Blk=_ NUMBER forms}', "");
Error('\p{Is_Block=_:=NUMBER-Forms}');
Error('\P{Is_Block=_:=NUMBER-Forms}');
Expect(1, 8591, '\p{Is_Block=numberforms}', "");
Expect(0, 8591, '\p{^Is_Block=numberforms}', "");
Expect(0, 8591, '\P{Is_Block=numberforms}', "");
Expect(1, 8591, '\P{^Is_Block=numberforms}', "");
Expect(0, 8527, '\p{Is_Block=numberforms}', "");
Expect(1, 8527, '\p{^Is_Block=numberforms}', "");
Expect(1, 8527, '\P{Is_Block=numberforms}', "");
Expect(0, 8527, '\P{^Is_Block=numberforms}', "");
Expect(1, 8591, '\p{Is_Block=	 NUMBER	forms}', "");
Expect(0, 8591, '\p{^Is_Block=	 NUMBER	forms}', "");
Expect(0, 8591, '\P{Is_Block=	 NUMBER	forms}', "");
Expect(1, 8591, '\P{^Is_Block=	 NUMBER	forms}', "");
Expect(0, 8527, '\p{Is_Block=	 NUMBER	forms}', "");
Expect(1, 8527, '\p{^Is_Block=	 NUMBER	forms}', "");
Expect(1, 8527, '\P{Is_Block=	 NUMBER	forms}', "");
Expect(0, 8527, '\P{^Is_Block=	 NUMBER	forms}', "");
Error('\p{Is_Blk=	/a/Number-forms}');
Error('\P{Is_Blk=	/a/Number-forms}');
Expect(1, 8591, '\p{Is_Blk=numberforms}', "");
Expect(0, 8591, '\p{^Is_Blk=numberforms}', "");
Expect(0, 8591, '\P{Is_Blk=numberforms}', "");
Expect(1, 8591, '\P{^Is_Blk=numberforms}', "");
Expect(0, 8527, '\p{Is_Blk=numberforms}', "");
Expect(1, 8527, '\p{^Is_Blk=numberforms}', "");
Expect(1, 8527, '\P{Is_Blk=numberforms}', "");
Expect(0, 8527, '\P{^Is_Blk=numberforms}', "");
Expect(1, 8591, '\p{Is_Blk=	Number_FORMS}', "");
Expect(0, 8591, '\p{^Is_Blk=	Number_FORMS}', "");
Expect(0, 8591, '\P{Is_Blk=	Number_FORMS}', "");
Expect(1, 8591, '\P{^Is_Blk=	Number_FORMS}', "");
Expect(0, 8527, '\p{Is_Blk=	Number_FORMS}', "");
Expect(1, 8527, '\p{^Is_Blk=	Number_FORMS}', "");
Expect(1, 8527, '\P{Is_Blk=	Number_FORMS}', "");
Expect(0, 8527, '\P{^Is_Blk=	Number_FORMS}', "");
Error('\p{Block=_-Control:=Pictures}');
Error('\P{Block=_-Control:=Pictures}');
Expect(1, 9279, '\p{Block=controlpictures}', "");
Expect(0, 9279, '\p{^Block=controlpictures}', "");
Expect(0, 9279, '\P{Block=controlpictures}', "");
Expect(1, 9279, '\P{^Block=controlpictures}', "");
Expect(0, 9215, '\p{Block=controlpictures}', "");
Expect(1, 9215, '\p{^Block=controlpictures}', "");
Expect(1, 9215, '\P{Block=controlpictures}', "");
Expect(0, 9215, '\P{^Block=controlpictures}', "");
Expect(1, 9279, '\p{Block=_control	pictures}', "");
Expect(0, 9279, '\p{^Block=_control	pictures}', "");
Expect(0, 9279, '\P{Block=_control	pictures}', "");
Expect(1, 9279, '\P{^Block=_control	pictures}', "");
Expect(0, 9215, '\p{Block=_control	pictures}', "");
Expect(1, 9215, '\p{^Block=_control	pictures}', "");
Expect(1, 9215, '\P{Block=_control	pictures}', "");
Expect(0, 9215, '\P{^Block=_control	pictures}', "");
Error('\p{Blk=-/a/Control_Pictures}');
Error('\P{Blk=-/a/Control_Pictures}');
Expect(1, 9279, '\p{Blk=controlpictures}', "");
Expect(0, 9279, '\p{^Blk=controlpictures}', "");
Expect(0, 9279, '\P{Blk=controlpictures}', "");
Expect(1, 9279, '\P{^Blk=controlpictures}', "");
Expect(0, 9215, '\p{Blk=controlpictures}', "");
Expect(1, 9215, '\p{^Blk=controlpictures}', "");
Expect(1, 9215, '\P{Blk=controlpictures}', "");
Expect(0, 9215, '\P{^Blk=controlpictures}', "");
Expect(1, 9279, '\p{Blk=_control pictures}', "");
Expect(0, 9279, '\p{^Blk=_control pictures}', "");
Expect(0, 9279, '\P{Blk=_control pictures}', "");
Expect(1, 9279, '\P{^Blk=_control pictures}', "");
Expect(0, 9215, '\p{Blk=_control pictures}', "");
Expect(1, 9215, '\p{^Blk=_control pictures}', "");
Expect(1, 9215, '\P{Blk=_control pictures}', "");
Expect(0, 9215, '\P{^Blk=_control pictures}', "");
Error('\p{Is_Block=	_Control	Pictures/a/}');
Error('\P{Is_Block=	_Control	Pictures/a/}');
Expect(1, 9279, '\p{Is_Block=controlpictures}', "");
Expect(0, 9279, '\p{^Is_Block=controlpictures}', "");
Expect(0, 9279, '\P{Is_Block=controlpictures}', "");
Expect(1, 9279, '\P{^Is_Block=controlpictures}', "");
Expect(0, 9215, '\p{Is_Block=controlpictures}', "");
Expect(1, 9215, '\p{^Is_Block=controlpictures}', "");
Expect(1, 9215, '\P{Is_Block=controlpictures}', "");
Expect(0, 9215, '\P{^Is_Block=controlpictures}', "");
Expect(1, 9279, '\p{Is_Block=-Control Pictures}', "");
Expect(0, 9279, '\p{^Is_Block=-Control Pictures}', "");
Expect(0, 9279, '\P{Is_Block=-Control Pictures}', "");
Expect(1, 9279, '\P{^Is_Block=-Control Pictures}', "");
Expect(0, 9215, '\p{Is_Block=-Control Pictures}', "");
Expect(1, 9215, '\p{^Is_Block=-Control Pictures}', "");
Expect(1, 9215, '\P{Is_Block=-Control Pictures}', "");
Expect(0, 9215, '\P{^Is_Block=-Control Pictures}', "");
Error('\p{Is_Blk=	 control Pictures/a/}');
Error('\P{Is_Blk=	 control Pictures/a/}');
Expect(1, 9279, '\p{Is_Blk=controlpictures}', "");
Expect(0, 9279, '\p{^Is_Blk=controlpictures}', "");
Expect(0, 9279, '\P{Is_Blk=controlpictures}', "");
Expect(1, 9279, '\P{^Is_Blk=controlpictures}', "");
Expect(0, 9215, '\p{Is_Blk=controlpictures}', "");
Expect(1, 9215, '\p{^Is_Blk=controlpictures}', "");
Expect(1, 9215, '\P{Is_Blk=controlpictures}', "");
Expect(0, 9215, '\P{^Is_Blk=controlpictures}', "");
Expect(1, 9279, '\p{Is_Blk=  controlpictures}', "");
Expect(0, 9279, '\p{^Is_Blk=  controlpictures}', "");
Expect(0, 9279, '\P{Is_Blk=  controlpictures}', "");
Expect(1, 9279, '\P{^Is_Blk=  controlpictures}', "");
Expect(0, 9215, '\p{Is_Blk=  controlpictures}', "");
Expect(1, 9215, '\p{^Is_Blk=  controlpictures}', "");
Expect(1, 9215, '\P{Is_Blk=  controlpictures}', "");
Expect(0, 9215, '\P{^Is_Blk=  controlpictures}', "");
Error('\p{Block=	 HIGH:=PRIVATE Use-Surrogates}');
Error('\P{Block=	 HIGH:=PRIVATE Use-Surrogates}');
Expect(0, 1, '\p{Block=highprivateusesurrogates}', "");
Expect(1, 1, '\p{^Block=highprivateusesurrogates}', "");
Expect(1, 1, '\P{Block=highprivateusesurrogates}', "");
Expect(0, 1, '\P{^Block=highprivateusesurrogates}', "");
Expect(0, 1, '\p{Block=	HighPrivate_USE	SURROGATES}', "");
Expect(1, 1, '\p{^Block=	HighPrivate_USE	SURROGATES}', "");
Expect(1, 1, '\P{Block=	HighPrivate_USE	SURROGATES}', "");
Expect(0, 1, '\P{^Block=	HighPrivate_USE	SURROGATES}', "");
Error('\p{Blk= _High	PRIVATE_USE	surrogates:=}');
Error('\P{Blk= _High	PRIVATE_USE	surrogates:=}');
Expect(0, 1, '\p{Blk=highprivateusesurrogates}', "");
Expect(1, 1, '\p{^Blk=highprivateusesurrogates}', "");
Expect(1, 1, '\P{Blk=highprivateusesurrogates}', "");
Expect(0, 1, '\P{^Blk=highprivateusesurrogates}', "");
Expect(0, 1, '\p{Blk=_ high	private	USE_surrogates}', "");
Expect(1, 1, '\p{^Blk=_ high	private	USE_surrogates}', "");
Expect(1, 1, '\P{Blk=_ high	private	USE_surrogates}', "");
Expect(0, 1, '\P{^Blk=_ high	private	USE_surrogates}', "");
Error('\p{Is_Block=_:=High_PRIVATEUSE_Surrogates}');
Error('\P{Is_Block=_:=High_PRIVATEUSE_Surrogates}');
Expect(0, 1, '\p{Is_Block: highprivateusesurrogates}', "");
Expect(1, 1, '\p{^Is_Block: highprivateusesurrogates}', "");
Expect(1, 1, '\P{Is_Block: highprivateusesurrogates}', "");
Expect(0, 1, '\P{^Is_Block: highprivateusesurrogates}', "");
Expect(0, 1, '\p{Is_Block=-HighPrivate-USE-Surrogates}', "");
Expect(1, 1, '\p{^Is_Block=-HighPrivate-USE-Surrogates}', "");
Expect(1, 1, '\P{Is_Block=-HighPrivate-USE-Surrogates}', "");
Expect(0, 1, '\P{^Is_Block=-HighPrivate-USE-Surrogates}', "");
Error('\p{Is_Blk=- HIGH-PRIVATE:=Use surrogates}');
Error('\P{Is_Blk=- HIGH-PRIVATE:=Use surrogates}');
Expect(0, 1, '\p{Is_Blk=highprivateusesurrogates}', "");
Expect(1, 1, '\p{^Is_Blk=highprivateusesurrogates}', "");
Expect(1, 1, '\P{Is_Blk=highprivateusesurrogates}', "");
Expect(0, 1, '\P{^Is_Blk=highprivateusesurrogates}', "");
Expect(0, 1, '\p{Is_Blk=_-high	PRIVATEuse	SURROGATES}', "");
Expect(1, 1, '\p{^Is_Blk=_-high	PRIVATEuse	SURROGATES}', "");
Expect(1, 1, '\P{Is_Blk=_-high	PRIVATEuse	SURROGATES}', "");
Expect(0, 1, '\P{^Is_Blk=_-high	PRIVATEuse	SURROGATES}', "");
Error('\p{Block=/a/- UGARITIC}');
Error('\P{Block=/a/- UGARITIC}');
Expect(1, 66463, '\p{Block=ugaritic}', "");
Expect(0, 66463, '\p{^Block=ugaritic}', "");
Expect(0, 66463, '\P{Block=ugaritic}', "");
Expect(1, 66463, '\P{^Block=ugaritic}', "");
Expect(0, 66431, '\p{Block=ugaritic}', "");
Expect(1, 66431, '\p{^Block=ugaritic}', "");
Expect(1, 66431, '\P{Block=ugaritic}', "");
Expect(0, 66431, '\P{^Block=ugaritic}', "");
Expect(1, 66463, '\p{Block=  Ugaritic}', "");
Expect(0, 66463, '\p{^Block=  Ugaritic}', "");
Expect(0, 66463, '\P{Block=  Ugaritic}', "");
Expect(1, 66463, '\P{^Block=  Ugaritic}', "");
Expect(0, 66431, '\p{Block=  Ugaritic}', "");
Expect(1, 66431, '\p{^Block=  Ugaritic}', "");
Expect(1, 66431, '\P{Block=  Ugaritic}', "");
Expect(0, 66431, '\P{^Block=  Ugaritic}', "");
Error('\p{Blk=-/a/ugaritic}');
Error('\P{Blk=-/a/ugaritic}');
Expect(1, 66463, '\p{Blk=ugaritic}', "");
Expect(0, 66463, '\p{^Blk=ugaritic}', "");
Expect(0, 66463, '\P{Blk=ugaritic}', "");
Expect(1, 66463, '\P{^Blk=ugaritic}', "");
Expect(0, 66431, '\p{Blk=ugaritic}', "");
Expect(1, 66431, '\p{^Blk=ugaritic}', "");
Expect(1, 66431, '\P{Blk=ugaritic}', "");
Expect(0, 66431, '\P{^Blk=ugaritic}', "");
Expect(1, 66463, '\p{Blk:--Ugaritic}', "");
Expect(0, 66463, '\p{^Blk:--Ugaritic}', "");
Expect(0, 66463, '\P{Blk:--Ugaritic}', "");
Expect(1, 66463, '\P{^Blk:--Ugaritic}', "");
Expect(0, 66431, '\p{Blk:--Ugaritic}', "");
Expect(1, 66431, '\p{^Blk:--Ugaritic}', "");
Expect(1, 66431, '\P{Blk:--Ugaritic}', "");
Expect(0, 66431, '\P{^Blk:--Ugaritic}', "");
Error('\p{Is_Block=:= -Ugaritic}');
Error('\P{Is_Block=:= -Ugaritic}');
Expect(1, 66463, '\p{Is_Block=ugaritic}', "");
Expect(0, 66463, '\p{^Is_Block=ugaritic}', "");
Expect(0, 66463, '\P{Is_Block=ugaritic}', "");
Expect(1, 66463, '\P{^Is_Block=ugaritic}', "");
Expect(0, 66431, '\p{Is_Block=ugaritic}', "");
Expect(1, 66431, '\p{^Is_Block=ugaritic}', "");
Expect(1, 66431, '\P{Is_Block=ugaritic}', "");
Expect(0, 66431, '\P{^Is_Block=ugaritic}', "");
Expect(1, 66463, '\p{Is_Block=-Ugaritic}', "");
Expect(0, 66463, '\p{^Is_Block=-Ugaritic}', "");
Expect(0, 66463, '\P{Is_Block=-Ugaritic}', "");
Expect(1, 66463, '\P{^Is_Block=-Ugaritic}', "");
Expect(0, 66431, '\p{Is_Block=-Ugaritic}', "");
Expect(1, 66431, '\p{^Is_Block=-Ugaritic}', "");
Expect(1, 66431, '\P{Is_Block=-Ugaritic}', "");
Expect(0, 66431, '\P{^Is_Block=-Ugaritic}', "");
Error('\p{Is_Blk=/a/-UGARITIC}');
Error('\P{Is_Blk=/a/-UGARITIC}');
Expect(1, 66463, '\p{Is_Blk=ugaritic}', "");
Expect(0, 66463, '\p{^Is_Blk=ugaritic}', "");
Expect(0, 66463, '\P{Is_Blk=ugaritic}', "");
Expect(1, 66463, '\P{^Is_Blk=ugaritic}', "");
Expect(0, 66431, '\p{Is_Blk=ugaritic}', "");
Expect(1, 66431, '\p{^Is_Blk=ugaritic}', "");
Expect(1, 66431, '\P{Is_Blk=ugaritic}', "");
Expect(0, 66431, '\P{^Is_Blk=ugaritic}', "");
Expect(1, 66463, '\p{Is_Blk= 	UGARITIC}', "");
Expect(0, 66463, '\p{^Is_Blk= 	UGARITIC}', "");
Expect(0, 66463, '\P{Is_Blk= 	UGARITIC}', "");
Expect(1, 66463, '\P{^Is_Blk= 	UGARITIC}', "");
Expect(0, 66431, '\p{Is_Blk= 	UGARITIC}', "");
Expect(1, 66431, '\p{^Is_Blk= 	UGARITIC}', "");
Expect(1, 66431, '\P{Is_Blk= 	UGARITIC}', "");
Expect(0, 66431, '\P{^Is_Blk= 	UGARITIC}', "");
Error('\p{Block= /a/armenian}');
Error('\P{Block= /a/armenian}');
Expect(1, 1423, '\p{Block:armenian}', "");
Expect(0, 1423, '\p{^Block:armenian}', "");
Expect(0, 1423, '\P{Block:armenian}', "");
Expect(1, 1423, '\P{^Block:armenian}', "");
Expect(0, 1327, '\p{Block:armenian}', "");
Expect(1, 1327, '\p{^Block:armenian}', "");
Expect(1, 1327, '\P{Block:armenian}', "");
Expect(0, 1327, '\P{^Block:armenian}', "");
Expect(1, 1423, '\p{Block:--ARMENIAN}', "");
Expect(0, 1423, '\p{^Block:--ARMENIAN}', "");
Expect(0, 1423, '\P{Block:--ARMENIAN}', "");
Expect(1, 1423, '\P{^Block:--ARMENIAN}', "");
Expect(0, 1327, '\p{Block:--ARMENIAN}', "");
Expect(1, 1327, '\p{^Block:--ARMENIAN}', "");
Expect(1, 1327, '\P{Block:--ARMENIAN}', "");
Expect(0, 1327, '\P{^Block:--ARMENIAN}', "");
Error('\p{Blk=_/a/ARMENIAN}');
Error('\P{Blk=_/a/ARMENIAN}');
Expect(1, 1423, '\p{Blk=armenian}', "");
Expect(0, 1423, '\p{^Blk=armenian}', "");
Expect(0, 1423, '\P{Blk=armenian}', "");
Expect(1, 1423, '\P{^Blk=armenian}', "");
Expect(0, 1327, '\p{Blk=armenian}', "");
Expect(1, 1327, '\p{^Blk=armenian}', "");
Expect(1, 1327, '\P{Blk=armenian}', "");
Expect(0, 1327, '\P{^Blk=armenian}', "");
Expect(1, 1423, '\p{Blk=_armenian}', "");
Expect(0, 1423, '\p{^Blk=_armenian}', "");
Expect(0, 1423, '\P{Blk=_armenian}', "");
Expect(1, 1423, '\P{^Blk=_armenian}', "");
Expect(0, 1327, '\p{Blk=_armenian}', "");
Expect(1, 1327, '\p{^Blk=_armenian}', "");
Expect(1, 1327, '\P{Blk=_armenian}', "");
Expect(0, 1327, '\P{^Blk=_armenian}', "");
Error('\p{Is_Block=:= _Armenian}');
Error('\P{Is_Block=:= _Armenian}');
Expect(1, 1423, '\p{Is_Block=armenian}', "");
Expect(0, 1423, '\p{^Is_Block=armenian}', "");
Expect(0, 1423, '\P{Is_Block=armenian}', "");
Expect(1, 1423, '\P{^Is_Block=armenian}', "");
Expect(0, 1327, '\p{Is_Block=armenian}', "");
Expect(1, 1327, '\p{^Is_Block=armenian}', "");
Expect(1, 1327, '\P{Is_Block=armenian}', "");
Expect(0, 1327, '\P{^Is_Block=armenian}', "");
Expect(1, 1423, '\p{Is_Block=--ARMENIAN}', "");
Expect(0, 1423, '\p{^Is_Block=--ARMENIAN}', "");
Expect(0, 1423, '\P{Is_Block=--ARMENIAN}', "");
Expect(1, 1423, '\P{^Is_Block=--ARMENIAN}', "");
Expect(0, 1327, '\p{Is_Block=--ARMENIAN}', "");
Expect(1, 1327, '\p{^Is_Block=--ARMENIAN}', "");
Expect(1, 1327, '\P{Is_Block=--ARMENIAN}', "");
Expect(0, 1327, '\P{^Is_Block=--ARMENIAN}', "");
Error('\p{Is_Blk=:=  ARMENIAN}');
Error('\P{Is_Blk=:=  ARMENIAN}');
Expect(1, 1423, '\p{Is_Blk=armenian}', "");
Expect(0, 1423, '\p{^Is_Blk=armenian}', "");
Expect(0, 1423, '\P{Is_Blk=armenian}', "");
Expect(1, 1423, '\P{^Is_Blk=armenian}', "");
Expect(0, 1327, '\p{Is_Blk=armenian}', "");
Expect(1, 1327, '\p{^Is_Blk=armenian}', "");
Expect(1, 1327, '\P{Is_Blk=armenian}', "");
Expect(0, 1327, '\P{^Is_Blk=armenian}', "");
Expect(1, 1423, '\p{Is_Blk= -ARMENIAN}', "");
Expect(0, 1423, '\p{^Is_Blk= -ARMENIAN}', "");
Expect(0, 1423, '\P{Is_Blk= -ARMENIAN}', "");
Expect(1, 1423, '\P{^Is_Blk= -ARMENIAN}', "");
Expect(0, 1327, '\p{Is_Blk= -ARMENIAN}', "");
Expect(1, 1327, '\p{^Is_Blk= -ARMENIAN}', "");
Expect(1, 1327, '\P{Is_Blk= -ARMENIAN}', "");
Expect(0, 1327, '\P{^Is_Blk= -ARMENIAN}', "");
Error('\p{Block= _private:=USE	Area}');
Error('\P{Block= _private:=USE	Area}');
Expect(1, 63743, '\p{Block:privateusearea}', "");
Expect(0, 63743, '\p{^Block:privateusearea}', "");
Expect(0, 63743, '\P{Block:privateusearea}', "");
Expect(1, 63743, '\P{^Block:privateusearea}', "");
Expect(0, 1, '\p{Block:privateusearea}', "");
Expect(1, 1, '\p{^Block:privateusearea}', "");
Expect(1, 1, '\P{Block:privateusearea}', "");
Expect(0, 1, '\P{^Block:privateusearea}', "");
Expect(1, 63743, '\p{Block=-_Private	USE-Area}', "");
Expect(0, 63743, '\p{^Block=-_Private	USE-Area}', "");
Expect(0, 63743, '\P{Block=-_Private	USE-Area}', "");
Expect(1, 63743, '\P{^Block=-_Private	USE-Area}', "");
Expect(0, 1, '\p{Block=-_Private	USE-Area}', "");
Expect(1, 1, '\p{^Block=-_Private	USE-Area}', "");
Expect(1, 1, '\P{Block=-_Private	USE-Area}', "");
Expect(0, 1, '\P{^Block=-_Private	USE-Area}', "");
Error('\p{Blk=/a/ -Private-use}');
Error('\P{Blk=/a/ -Private-use}');
Expect(1, 63743, '\p{Blk=privateuse}', "");
Expect(0, 63743, '\p{^Blk=privateuse}', "");
Expect(0, 63743, '\P{Blk=privateuse}', "");
Expect(1, 63743, '\P{^Blk=privateuse}', "");
Expect(0, 1, '\p{Blk=privateuse}', "");
Expect(1, 1, '\p{^Blk=privateuse}', "");
Expect(1, 1, '\P{Blk=privateuse}', "");
Expect(0, 1, '\P{^Blk=privateuse}', "");
Expect(1, 63743, '\p{Blk=	 PRIVATE-USE}', "");
Expect(0, 63743, '\p{^Blk=	 PRIVATE-USE}', "");
Expect(0, 63743, '\P{Blk=	 PRIVATE-USE}', "");
Expect(1, 63743, '\P{^Blk=	 PRIVATE-USE}', "");
Expect(0, 1, '\p{Blk=	 PRIVATE-USE}', "");
Expect(1, 1, '\p{^Blk=	 PRIVATE-USE}', "");
Expect(1, 1, '\P{Blk=	 PRIVATE-USE}', "");
Expect(0, 1, '\P{^Blk=	 PRIVATE-USE}', "");
Error('\p{Is_Block=	:=privateuse-area}');
Error('\P{Is_Block=	:=privateuse-area}');
Expect(1, 63743, '\p{Is_Block=privateusearea}', "");
Expect(0, 63743, '\p{^Is_Block=privateusearea}', "");
Expect(0, 63743, '\P{Is_Block=privateusearea}', "");
Expect(1, 63743, '\P{^Is_Block=privateusearea}', "");
Expect(0, 1, '\p{Is_Block=privateusearea}', "");
Expect(1, 1, '\p{^Is_Block=privateusearea}', "");
Expect(1, 1, '\P{Is_Block=privateusearea}', "");
Expect(0, 1, '\P{^Is_Block=privateusearea}', "");
Expect(1, 63743, '\p{Is_Block=- private UseAREA}', "");
Expect(0, 63743, '\p{^Is_Block=- private UseAREA}', "");
Expect(0, 63743, '\P{Is_Block=- private UseAREA}', "");
Expect(1, 63743, '\P{^Is_Block=- private UseAREA}', "");
Expect(0, 1, '\p{Is_Block=- private UseAREA}', "");
Expect(1, 1, '\p{^Is_Block=- private UseAREA}', "");
Expect(1, 1, '\P{Is_Block=- private UseAREA}', "");
Expect(0, 1, '\P{^Is_Block=- private UseAREA}', "");
Error('\p{Is_Blk= _Private_Use/a/}');
Error('\P{Is_Blk= _Private_Use/a/}');
Expect(1, 63743, '\p{Is_Blk=privateuse}', "");
Expect(0, 63743, '\p{^Is_Blk=privateuse}', "");
Expect(0, 63743, '\P{Is_Blk=privateuse}', "");
Expect(1, 63743, '\P{^Is_Blk=privateuse}', "");
Expect(0, 1, '\p{Is_Blk=privateuse}', "");
Expect(1, 1, '\p{^Is_Blk=privateuse}', "");
Expect(1, 1, '\P{Is_Blk=privateuse}', "");
Expect(0, 1, '\P{^Is_Blk=privateuse}', "");
Expect(1, 63743, '\p{Is_Blk=-	PRIVATE	USE}', "");
Expect(0, 63743, '\p{^Is_Blk=-	PRIVATE	USE}', "");
Expect(0, 63743, '\P{Is_Blk=-	PRIVATE	USE}', "");
Expect(1, 63743, '\P{^Is_Blk=-	PRIVATE	USE}', "");
Expect(0, 1, '\p{Is_Blk=-	PRIVATE	USE}', "");
Expect(1, 1, '\p{^Is_Blk=-	PRIVATE	USE}', "");
Expect(1, 1, '\P{Is_Blk=-	PRIVATE	USE}', "");
Expect(0, 1, '\P{^Is_Blk=-	PRIVATE	USE}', "");
Error('\p{Block=:=--Syriac}');
Error('\P{Block=:=--Syriac}');
Expect(1, 1871, '\p{Block=syriac}', "");
Expect(0, 1871, '\p{^Block=syriac}', "");
Expect(0, 1871, '\P{Block=syriac}', "");
Expect(1, 1871, '\P{^Block=syriac}', "");
Expect(0, 1791, '\p{Block=syriac}', "");
Expect(1, 1791, '\p{^Block=syriac}', "");
Expect(1, 1791, '\P{Block=syriac}', "");
Expect(0, 1791, '\P{^Block=syriac}', "");
Expect(1, 1871, '\p{Block=	Syriac}', "");
Expect(0, 1871, '\p{^Block=	Syriac}', "");
Expect(0, 1871, '\P{Block=	Syriac}', "");
Expect(1, 1871, '\P{^Block=	Syriac}', "");
Expect(0, 1791, '\p{Block=	Syriac}', "");
Expect(1, 1791, '\p{^Block=	Syriac}', "");
Expect(1, 1791, '\P{Block=	Syriac}', "");
Expect(0, 1791, '\P{^Block=	Syriac}', "");
Error('\p{Blk=/a/SYRIAC}');
Error('\P{Blk=/a/SYRIAC}');
Expect(1, 1871, '\p{Blk=syriac}', "");
Expect(0, 1871, '\p{^Blk=syriac}', "");
Expect(0, 1871, '\P{Blk=syriac}', "");
Expect(1, 1871, '\P{^Blk=syriac}', "");
Expect(0, 1791, '\p{Blk=syriac}', "");
Expect(1, 1791, '\p{^Blk=syriac}', "");
Expect(1, 1791, '\P{Blk=syriac}', "");
Expect(0, 1791, '\P{^Blk=syriac}', "");
Expect(1, 1871, '\p{Blk= _Syriac}', "");
Expect(0, 1871, '\p{^Blk= _Syriac}', "");
Expect(0, 1871, '\P{Blk= _Syriac}', "");
Expect(1, 1871, '\P{^Blk= _Syriac}', "");
Expect(0, 1791, '\p{Blk= _Syriac}', "");
Expect(1, 1791, '\p{^Blk= _Syriac}', "");
Expect(1, 1791, '\P{Blk= _Syriac}', "");
Expect(0, 1791, '\P{^Blk= _Syriac}', "");
Error('\p{Is_Block=:=syriac}');
Error('\P{Is_Block=:=syriac}');
Expect(1, 1871, '\p{Is_Block=syriac}', "");
Expect(0, 1871, '\p{^Is_Block=syriac}', "");
Expect(0, 1871, '\P{Is_Block=syriac}', "");
Expect(1, 1871, '\P{^Is_Block=syriac}', "");
Expect(0, 1791, '\p{Is_Block=syriac}', "");
Expect(1, 1791, '\p{^Is_Block=syriac}', "");
Expect(1, 1791, '\P{Is_Block=syriac}', "");
Expect(0, 1791, '\P{^Is_Block=syriac}', "");
Expect(1, 1871, '\p{Is_Block=- Syriac}', "");
Expect(0, 1871, '\p{^Is_Block=- Syriac}', "");
Expect(0, 1871, '\P{Is_Block=- Syriac}', "");
Expect(1, 1871, '\P{^Is_Block=- Syriac}', "");
Expect(0, 1791, '\p{Is_Block=- Syriac}', "");
Expect(1, 1791, '\p{^Is_Block=- Syriac}', "");
Expect(1, 1791, '\P{Is_Block=- Syriac}', "");
Expect(0, 1791, '\P{^Is_Block=- Syriac}', "");
Error('\p{Is_Blk= :=syriac}');
Error('\P{Is_Blk= :=syriac}');
Expect(1, 1871, '\p{Is_Blk=syriac}', "");
Expect(0, 1871, '\p{^Is_Blk=syriac}', "");
Expect(0, 1871, '\P{Is_Blk=syriac}', "");
Expect(1, 1871, '\P{^Is_Blk=syriac}', "");
Expect(0, 1791, '\p{Is_Blk=syriac}', "");
Expect(1, 1791, '\p{^Is_Blk=syriac}', "");
Expect(1, 1791, '\P{Is_Blk=syriac}', "");
Expect(0, 1791, '\P{^Is_Blk=syriac}', "");
Expect(1, 1871, '\p{Is_Blk=	syriac}', "");
Expect(0, 1871, '\p{^Is_Blk=	syriac}', "");
Expect(0, 1871, '\P{Is_Blk=	syriac}', "");
Expect(1, 1871, '\P{^Is_Blk=	syriac}', "");
Expect(0, 1791, '\p{Is_Blk=	syriac}', "");
Expect(1, 1791, '\p{^Is_Blk=	syriac}', "");
Expect(1, 1791, '\P{Is_Blk=	syriac}', "");
Expect(0, 1791, '\P{^Is_Blk=	syriac}', "");
Error('\p{Block:   _	ancient/a/greekmusical	Notation}');
Error('\P{Block:   _	ancient/a/greekmusical	Notation}');
Expect(1, 119375, '\p{Block:   ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^Block:   ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{Block:   ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^Block:   ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{Block:   ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^Block:   ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{Block:   ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^Block:   ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{Block=	_ANCIENT	greek musicalnotation}', "");
Expect(0, 119375, '\p{^Block=	_ANCIENT	greek musicalnotation}', "");
Expect(0, 119375, '\P{Block=	_ANCIENT	greek musicalnotation}', "");
Expect(1, 119375, '\P{^Block=	_ANCIENT	greek musicalnotation}', "");
Expect(0, 119295, '\p{Block=	_ANCIENT	greek musicalnotation}', "");
Expect(1, 119295, '\p{^Block=	_ANCIENT	greek musicalnotation}', "");
Expect(1, 119295, '\P{Block=	_ANCIENT	greek musicalnotation}', "");
Expect(0, 119295, '\P{^Block=	_ANCIENT	greek musicalnotation}', "");
Error('\p{Blk=	:=Ancient_Greek Musical-Notation}');
Error('\P{Blk=	:=Ancient_Greek Musical-Notation}');
Expect(1, 119375, '\p{Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{Blk=  AncientGreek-MusicalNotation}', "");
Expect(0, 119375, '\p{^Blk=  AncientGreek-MusicalNotation}', "");
Expect(0, 119375, '\P{Blk=  AncientGreek-MusicalNotation}', "");
Expect(1, 119375, '\P{^Blk=  AncientGreek-MusicalNotation}', "");
Expect(0, 119295, '\p{Blk=  AncientGreek-MusicalNotation}', "");
Expect(1, 119295, '\p{^Blk=  AncientGreek-MusicalNotation}', "");
Expect(1, 119295, '\P{Blk=  AncientGreek-MusicalNotation}', "");
Expect(0, 119295, '\P{^Blk=  AncientGreek-MusicalNotation}', "");
Error('\p{Is_Block:   -/a/ANCIENT GREEK	musical	NOTATION}');
Error('\P{Is_Block:   -/a/ANCIENT GREEK	musical	NOTATION}');
Expect(1, 119375, '\p{Is_Block=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^Is_Block=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{Is_Block=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^Is_Block=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{Is_Block=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^Is_Block=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{Is_Block=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^Is_Block=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{Is_Block=-Ancient Greek-MUSICALNOTATION}', "");
Expect(0, 119375, '\p{^Is_Block=-Ancient Greek-MUSICALNOTATION}', "");
Expect(0, 119375, '\P{Is_Block=-Ancient Greek-MUSICALNOTATION}', "");
Expect(1, 119375, '\P{^Is_Block=-Ancient Greek-MUSICALNOTATION}', "");
Expect(0, 119295, '\p{Is_Block=-Ancient Greek-MUSICALNOTATION}', "");
Expect(1, 119295, '\p{^Is_Block=-Ancient Greek-MUSICALNOTATION}', "");
Expect(1, 119295, '\P{Is_Block=-Ancient Greek-MUSICALNOTATION}', "");
Expect(0, 119295, '\P{^Is_Block=-Ancient Greek-MUSICALNOTATION}', "");
Error('\p{Is_Blk=/a/Ancient Greek_MUSICAL-Notation}');
Error('\P{Is_Blk=/a/Ancient Greek_MUSICAL-Notation}');
Expect(1, 119375, '\p{Is_Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^Is_Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{Is_Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^Is_Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{Is_Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^Is_Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{Is_Blk=ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^Is_Blk=ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{Is_Blk= Ancient GREEK_Musical_Notation}', "");
Expect(0, 119375, '\p{^Is_Blk= Ancient GREEK_Musical_Notation}', "");
Expect(0, 119375, '\P{Is_Blk= Ancient GREEK_Musical_Notation}', "");
Expect(1, 119375, '\P{^Is_Blk= Ancient GREEK_Musical_Notation}', "");
Expect(0, 119295, '\p{Is_Blk= Ancient GREEK_Musical_Notation}', "");
Expect(1, 119295, '\p{^Is_Blk= Ancient GREEK_Musical_Notation}', "");
Expect(1, 119295, '\P{Is_Blk= Ancient GREEK_Musical_Notation}', "");
Expect(0, 119295, '\P{^Is_Blk= Ancient GREEK_Musical_Notation}', "");
Error('\p{Block:	_/a/Phags_PA}');
Error('\P{Block:	_/a/Phags_PA}');
Expect(1, 43135, '\p{Block=phagspa}', "");
Expect(0, 43135, '\p{^Block=phagspa}', "");
Expect(0, 43135, '\P{Block=phagspa}', "");
Expect(1, 43135, '\P{^Block=phagspa}', "");
Expect(0, 43071, '\p{Block=phagspa}', "");
Expect(1, 43071, '\p{^Block=phagspa}', "");
Expect(1, 43071, '\P{Block=phagspa}', "");
Expect(0, 43071, '\P{^Block=phagspa}', "");
Expect(1, 43135, '\p{Block=--Phags	PA}', "");
Expect(0, 43135, '\p{^Block=--Phags	PA}', "");
Expect(0, 43135, '\P{Block=--Phags	PA}', "");
Expect(1, 43135, '\P{^Block=--Phags	PA}', "");
Expect(0, 43071, '\p{Block=--Phags	PA}', "");
Expect(1, 43071, '\p{^Block=--Phags	PA}', "");
Expect(1, 43071, '\P{Block=--Phags	PA}', "");
Expect(0, 43071, '\P{^Block=--Phags	PA}', "");
Error('\p{Blk= Phags/a/Pa}');
Error('\P{Blk= Phags/a/Pa}');
Expect(1, 43135, '\p{Blk=phagspa}', "");
Expect(0, 43135, '\p{^Blk=phagspa}', "");
Expect(0, 43135, '\P{Blk=phagspa}', "");
Expect(1, 43135, '\P{^Blk=phagspa}', "");
Expect(0, 43071, '\p{Blk=phagspa}', "");
Expect(1, 43071, '\p{^Blk=phagspa}', "");
Expect(1, 43071, '\P{Blk=phagspa}', "");
Expect(0, 43071, '\P{^Blk=phagspa}', "");
Expect(1, 43135, '\p{Blk=	_Phags_PA}', "");
Expect(0, 43135, '\p{^Blk=	_Phags_PA}', "");
Expect(0, 43135, '\P{Blk=	_Phags_PA}', "");
Expect(1, 43135, '\P{^Blk=	_Phags_PA}', "");
Expect(0, 43071, '\p{Blk=	_Phags_PA}', "");
Expect(1, 43071, '\p{^Blk=	_Phags_PA}', "");
Expect(1, 43071, '\P{Blk=	_Phags_PA}', "");
Expect(0, 43071, '\P{^Blk=	_Phags_PA}', "");
Error('\p{Is_Block=_	phags:=Pa}');
Error('\P{Is_Block=_	phags:=Pa}');
Expect(1, 43135, '\p{Is_Block=phagspa}', "");
Expect(0, 43135, '\p{^Is_Block=phagspa}', "");
Expect(0, 43135, '\P{Is_Block=phagspa}', "");
Expect(1, 43135, '\P{^Is_Block=phagspa}', "");
Expect(0, 43071, '\p{Is_Block=phagspa}', "");
Expect(1, 43071, '\p{^Is_Block=phagspa}', "");
Expect(1, 43071, '\P{Is_Block=phagspa}', "");
Expect(0, 43071, '\P{^Is_Block=phagspa}', "");
Expect(1, 43135, '\p{Is_Block=__PHAGS_PA}', "");
Expect(0, 43135, '\p{^Is_Block=__PHAGS_PA}', "");
Expect(0, 43135, '\P{Is_Block=__PHAGS_PA}', "");
Expect(1, 43135, '\P{^Is_Block=__PHAGS_PA}', "");
Expect(0, 43071, '\p{Is_Block=__PHAGS_PA}', "");
Expect(1, 43071, '\p{^Is_Block=__PHAGS_PA}', "");
Expect(1, 43071, '\P{Is_Block=__PHAGS_PA}', "");
Expect(0, 43071, '\P{^Is_Block=__PHAGS_PA}', "");
Error('\p{Is_Blk=	-Phags/a/Pa}');
Error('\P{Is_Blk=	-Phags/a/Pa}');
Expect(1, 43135, '\p{Is_Blk=phagspa}', "");
Expect(0, 43135, '\p{^Is_Blk=phagspa}', "");
Expect(0, 43135, '\P{Is_Blk=phagspa}', "");
Expect(1, 43135, '\P{^Is_Blk=phagspa}', "");
Expect(0, 43071, '\p{Is_Blk=phagspa}', "");
Expect(1, 43071, '\p{^Is_Blk=phagspa}', "");
Expect(1, 43071, '\P{Is_Blk=phagspa}', "");
Expect(0, 43071, '\P{^Is_Blk=phagspa}', "");
Expect(1, 43135, '\p{Is_Blk=_	Phags pa}', "");
Expect(0, 43135, '\p{^Is_Blk=_	Phags pa}', "");
Expect(0, 43135, '\P{Is_Blk=_	Phags pa}', "");
Expect(1, 43135, '\P{^Is_Blk=_	Phags pa}', "");
Expect(0, 43071, '\p{Is_Blk=_	Phags pa}', "");
Expect(1, 43071, '\p{^Is_Blk=_	Phags pa}', "");
Expect(1, 43071, '\P{Is_Blk=_	Phags pa}', "");
Expect(0, 43071, '\P{^Is_Blk=_	Phags pa}', "");
Error('\p{Block= :=CJK-COMPATIBILITY-Ideographs}');
Error('\P{Block= :=CJK-COMPATIBILITY-Ideographs}');
Expect(1, 64255, '\p{Block=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^Block=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{Block=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^Block=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{Block=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^Block=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{Block=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^Block=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{Block=_ cjk	Compatibility_Ideographs}', "");
Expect(0, 64255, '\p{^Block=_ cjk	Compatibility_Ideographs}', "");
Expect(0, 64255, '\P{Block=_ cjk	Compatibility_Ideographs}', "");
Expect(1, 64255, '\P{^Block=_ cjk	Compatibility_Ideographs}', "");
Expect(0, 63743, '\p{Block=_ cjk	Compatibility_Ideographs}', "");
Expect(1, 63743, '\p{^Block=_ cjk	Compatibility_Ideographs}', "");
Expect(1, 63743, '\P{Block=_ cjk	Compatibility_Ideographs}', "");
Expect(0, 63743, '\P{^Block=_ cjk	Compatibility_Ideographs}', "");
Error('\p{Blk= /a/CJK	Compatibility	Ideographs}');
Error('\P{Blk= /a/CJK	Compatibility	Ideographs}');
Expect(1, 64255, '\p{Blk=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^Blk=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{Blk=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^Blk=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{Blk=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^Blk=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{Blk=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^Blk=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{Blk= 	cjk_COMPATIBILITY	Ideographs}', "");
Expect(0, 64255, '\p{^Blk= 	cjk_COMPATIBILITY	Ideographs}', "");
Expect(0, 64255, '\P{Blk= 	cjk_COMPATIBILITY	Ideographs}', "");
Expect(1, 64255, '\P{^Blk= 	cjk_COMPATIBILITY	Ideographs}', "");
Expect(0, 63743, '\p{Blk= 	cjk_COMPATIBILITY	Ideographs}', "");
Expect(1, 63743, '\p{^Blk= 	cjk_COMPATIBILITY	Ideographs}', "");
Expect(1, 63743, '\P{Blk= 	cjk_COMPATIBILITY	Ideographs}', "");
Expect(0, 63743, '\P{^Blk= 	cjk_COMPATIBILITY	Ideographs}', "");
Error('\p{Is_Block=	CJK COMPATIBILITY	Ideographs/a/}');
Error('\P{Is_Block=	CJK COMPATIBILITY	Ideographs/a/}');
Expect(1, 64255, '\p{Is_Block=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^Is_Block=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{Is_Block=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^Is_Block=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{Is_Block=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^Is_Block=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{Is_Block=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^Is_Block=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{Is_Block=  cjk-compatibility	ideographs}', "");
Expect(0, 64255, '\p{^Is_Block=  cjk-compatibility	ideographs}', "");
Expect(0, 64255, '\P{Is_Block=  cjk-compatibility	ideographs}', "");
Expect(1, 64255, '\P{^Is_Block=  cjk-compatibility	ideographs}', "");
Expect(0, 63743, '\p{Is_Block=  cjk-compatibility	ideographs}', "");
Expect(1, 63743, '\p{^Is_Block=  cjk-compatibility	ideographs}', "");
Expect(1, 63743, '\P{Is_Block=  cjk-compatibility	ideographs}', "");
Expect(0, 63743, '\P{^Is_Block=  cjk-compatibility	ideographs}', "");
Error('\p{Is_Blk=_CJKCompatibility_IDEOGRAPHS:=}');
Error('\P{Is_Blk=_CJKCompatibility_IDEOGRAPHS:=}');
Expect(1, 64255, '\p{Is_Blk=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^Is_Blk=cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{Is_Blk=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^Is_Blk=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{Is_Blk=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^Is_Blk=cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{Is_Blk=cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^Is_Blk=cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{Is_Blk=  CJK_Compatibility Ideographs}', "");
Expect(0, 64255, '\p{^Is_Blk=  CJK_Compatibility Ideographs}', "");
Expect(0, 64255, '\P{Is_Blk=  CJK_Compatibility Ideographs}', "");
Expect(1, 64255, '\P{^Is_Blk=  CJK_Compatibility Ideographs}', "");
Expect(0, 63743, '\p{Is_Blk=  CJK_Compatibility Ideographs}', "");
Expect(1, 63743, '\p{^Is_Blk=  CJK_Compatibility Ideographs}', "");
Expect(1, 63743, '\P{Is_Blk=  CJK_Compatibility Ideographs}', "");
Expect(0, 63743, '\P{^Is_Blk=  CJK_Compatibility Ideographs}', "");
Error('\p{Block=/a/	Thaana}');
Error('\P{Block=/a/	Thaana}');
Expect(1, 1983, '\p{Block=thaana}', "");
Expect(0, 1983, '\p{^Block=thaana}', "");
Expect(0, 1983, '\P{Block=thaana}', "");
Expect(1, 1983, '\P{^Block=thaana}', "");
Expect(0, 1919, '\p{Block=thaana}', "");
Expect(1, 1919, '\p{^Block=thaana}', "");
Expect(1, 1919, '\P{Block=thaana}', "");
Expect(0, 1919, '\P{^Block=thaana}', "");
Expect(1, 1983, '\p{Block= Thaana}', "");
Expect(0, 1983, '\p{^Block= Thaana}', "");
Expect(0, 1983, '\P{Block= Thaana}', "");
Expect(1, 1983, '\P{^Block= Thaana}', "");
Expect(0, 1919, '\p{Block= Thaana}', "");
Expect(1, 1919, '\p{^Block= Thaana}', "");
Expect(1, 1919, '\P{Block= Thaana}', "");
Expect(0, 1919, '\P{^Block= Thaana}', "");
Error('\p{Blk= /a/Thaana}');
Error('\P{Blk= /a/Thaana}');
Expect(1, 1983, '\p{Blk=thaana}', "");
Expect(0, 1983, '\p{^Blk=thaana}', "");
Expect(0, 1983, '\P{Blk=thaana}', "");
Expect(1, 1983, '\P{^Blk=thaana}', "");
Expect(0, 1919, '\p{Blk=thaana}', "");
Expect(1, 1919, '\p{^Blk=thaana}', "");
Expect(1, 1919, '\P{Blk=thaana}', "");
Expect(0, 1919, '\P{^Blk=thaana}', "");
Expect(1, 1983, '\p{Blk=_thaana}', "");
Expect(0, 1983, '\p{^Blk=_thaana}', "");
Expect(0, 1983, '\P{Blk=_thaana}', "");
Expect(1, 1983, '\P{^Blk=_thaana}', "");
Expect(0, 1919, '\p{Blk=_thaana}', "");
Expect(1, 1919, '\p{^Blk=_thaana}', "");
Expect(1, 1919, '\P{Blk=_thaana}', "");
Expect(0, 1919, '\P{^Blk=_thaana}', "");
Error('\p{Is_Block=	THAANA:=}');
Error('\P{Is_Block=	THAANA:=}');
Expect(1, 1983, '\p{Is_Block=thaana}', "");
Expect(0, 1983, '\p{^Is_Block=thaana}', "");
Expect(0, 1983, '\P{Is_Block=thaana}', "");
Expect(1, 1983, '\P{^Is_Block=thaana}', "");
Expect(0, 1919, '\p{Is_Block=thaana}', "");
Expect(1, 1919, '\p{^Is_Block=thaana}', "");
Expect(1, 1919, '\P{Is_Block=thaana}', "");
Expect(0, 1919, '\P{^Is_Block=thaana}', "");
Expect(1, 1983, '\p{Is_Block=--thaana}', "");
Expect(0, 1983, '\p{^Is_Block=--thaana}', "");
Expect(0, 1983, '\P{Is_Block=--thaana}', "");
Expect(1, 1983, '\P{^Is_Block=--thaana}', "");
Expect(0, 1919, '\p{Is_Block=--thaana}', "");
Expect(1, 1919, '\p{^Is_Block=--thaana}', "");
Expect(1, 1919, '\P{Is_Block=--thaana}', "");
Expect(0, 1919, '\P{^Is_Block=--thaana}', "");
Error('\p{Is_Blk=:=	-THAANA}');
Error('\P{Is_Blk=:=	-THAANA}');
Expect(1, 1983, '\p{Is_Blk=thaana}', "");
Expect(0, 1983, '\p{^Is_Blk=thaana}', "");
Expect(0, 1983, '\P{Is_Blk=thaana}', "");
Expect(1, 1983, '\P{^Is_Blk=thaana}', "");
Expect(0, 1919, '\p{Is_Blk=thaana}', "");
Expect(1, 1919, '\p{^Is_Blk=thaana}', "");
Expect(1, 1919, '\P{Is_Blk=thaana}', "");
Expect(0, 1919, '\P{^Is_Blk=thaana}', "");
Expect(1, 1983, '\p{Is_Blk=--Thaana}', "");
Expect(0, 1983, '\p{^Is_Blk=--Thaana}', "");
Expect(0, 1983, '\P{Is_Blk=--Thaana}', "");
Expect(1, 1983, '\P{^Is_Blk=--Thaana}', "");
Expect(0, 1919, '\p{Is_Blk=--Thaana}', "");
Expect(1, 1919, '\p{^Is_Blk=--Thaana}', "");
Expect(1, 1919, '\P{Is_Blk=--Thaana}', "");
Expect(0, 1919, '\P{^Is_Blk=--Thaana}', "");
Error('\p{Block=	:=Enclosed	Alphanumeric_Supplement}');
Error('\P{Block=	:=Enclosed	Alphanumeric_Supplement}');
Expect(1, 127487, '\p{Block=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^Block=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{Block=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^Block=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{Block=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^Block=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{Block=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^Block=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{Block= 	enclosed ALPHANUMERIC-Supplement}', "");
Expect(0, 127487, '\p{^Block= 	enclosed ALPHANUMERIC-Supplement}', "");
Expect(0, 127487, '\P{Block= 	enclosed ALPHANUMERIC-Supplement}', "");
Expect(1, 127487, '\P{^Block= 	enclosed ALPHANUMERIC-Supplement}', "");
Expect(0, 127231, '\p{Block= 	enclosed ALPHANUMERIC-Supplement}', "");
Expect(1, 127231, '\p{^Block= 	enclosed ALPHANUMERIC-Supplement}', "");
Expect(1, 127231, '\P{Block= 	enclosed ALPHANUMERIC-Supplement}', "");
Expect(0, 127231, '\P{^Block= 	enclosed ALPHANUMERIC-Supplement}', "");
Error('\p{Blk= /a/Enclosed-ALPHANUMERICSUPPLEMENT}');
Error('\P{Blk= /a/Enclosed-ALPHANUMERICSUPPLEMENT}');
Expect(1, 127487, '\p{Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{Blk=_ EnclosedAlphanumeric-Supplement}', "");
Expect(0, 127487, '\p{^Blk=_ EnclosedAlphanumeric-Supplement}', "");
Expect(0, 127487, '\P{Blk=_ EnclosedAlphanumeric-Supplement}', "");
Expect(1, 127487, '\P{^Blk=_ EnclosedAlphanumeric-Supplement}', "");
Expect(0, 127231, '\p{Blk=_ EnclosedAlphanumeric-Supplement}', "");
Expect(1, 127231, '\p{^Blk=_ EnclosedAlphanumeric-Supplement}', "");
Expect(1, 127231, '\P{Blk=_ EnclosedAlphanumeric-Supplement}', "");
Expect(0, 127231, '\P{^Blk=_ EnclosedAlphanumeric-Supplement}', "");
Error('\p{Is_Block=_	enclosed-Alphanumeric	Supplement/a/}');
Error('\P{Is_Block=_	enclosed-Alphanumeric	Supplement/a/}');
Expect(1, 127487, '\p{Is_Block=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^Is_Block=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{Is_Block=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^Is_Block=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{Is_Block=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^Is_Block=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{Is_Block=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^Is_Block=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{Is_Block=_Enclosed_Alphanumeric-Supplement}', "");
Expect(0, 127487, '\p{^Is_Block=_Enclosed_Alphanumeric-Supplement}', "");
Expect(0, 127487, '\P{Is_Block=_Enclosed_Alphanumeric-Supplement}', "");
Expect(1, 127487, '\P{^Is_Block=_Enclosed_Alphanumeric-Supplement}', "");
Expect(0, 127231, '\p{Is_Block=_Enclosed_Alphanumeric-Supplement}', "");
Expect(1, 127231, '\p{^Is_Block=_Enclosed_Alphanumeric-Supplement}', "");
Expect(1, 127231, '\P{Is_Block=_Enclosed_Alphanumeric-Supplement}', "");
Expect(0, 127231, '\P{^Is_Block=_Enclosed_Alphanumeric-Supplement}', "");
Error('\p{Is_Blk=-Enclosed	ALPHANUMERIC/a/supplement}');
Error('\P{Is_Blk=-Enclosed	ALPHANUMERIC/a/supplement}');
Expect(1, 127487, '\p{Is_Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^Is_Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{Is_Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^Is_Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{Is_Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^Is_Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{Is_Blk=enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^Is_Blk=enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{Is_Blk=-Enclosed-alphanumericSUPPLEMENT}', "");
Expect(0, 127487, '\p{^Is_Blk=-Enclosed-alphanumericSUPPLEMENT}', "");
Expect(0, 127487, '\P{Is_Blk=-Enclosed-alphanumericSUPPLEMENT}', "");
Expect(1, 127487, '\P{^Is_Blk=-Enclosed-alphanumericSUPPLEMENT}', "");
Expect(0, 127231, '\p{Is_Blk=-Enclosed-alphanumericSUPPLEMENT}', "");
Expect(1, 127231, '\p{^Is_Blk=-Enclosed-alphanumericSUPPLEMENT}', "");
Expect(1, 127231, '\P{Is_Blk=-Enclosed-alphanumericSUPPLEMENT}', "");
Expect(0, 127231, '\P{^Is_Blk=-Enclosed-alphanumericSUPPLEMENT}', "");
Error('\p{Block=	:=EthiopicExtended}');
Error('\P{Block=	:=EthiopicExtended}');
Expect(1, 11743, '\p{Block=ethiopicextended}', "");
Expect(0, 11743, '\p{^Block=ethiopicextended}', "");
Expect(0, 11743, '\P{Block=ethiopicextended}', "");
Expect(1, 11743, '\P{^Block=ethiopicextended}', "");
Expect(0, 11647, '\p{Block=ethiopicextended}', "");
Expect(1, 11647, '\p{^Block=ethiopicextended}', "");
Expect(1, 11647, '\P{Block=ethiopicextended}', "");
Expect(0, 11647, '\P{^Block=ethiopicextended}', "");
Expect(1, 11743, '\p{Block= -ethiopic-Extended}', "");
Expect(0, 11743, '\p{^Block= -ethiopic-Extended}', "");
Expect(0, 11743, '\P{Block= -ethiopic-Extended}', "");
Expect(1, 11743, '\P{^Block= -ethiopic-Extended}', "");
Expect(0, 11647, '\p{Block= -ethiopic-Extended}', "");
Expect(1, 11647, '\p{^Block= -ethiopic-Extended}', "");
Expect(1, 11647, '\P{Block= -ethiopic-Extended}', "");
Expect(0, 11647, '\P{^Block= -ethiopic-Extended}', "");
Error('\p{Blk=--Ethiopic_Extended/a/}');
Error('\P{Blk=--Ethiopic_Extended/a/}');
Expect(1, 11743, '\p{Blk=ethiopicextended}', "");
Expect(0, 11743, '\p{^Blk=ethiopicextended}', "");
Expect(0, 11743, '\P{Blk=ethiopicextended}', "");
Expect(1, 11743, '\P{^Blk=ethiopicextended}', "");
Expect(0, 11647, '\p{Blk=ethiopicextended}', "");
Expect(1, 11647, '\p{^Blk=ethiopicextended}', "");
Expect(1, 11647, '\P{Blk=ethiopicextended}', "");
Expect(0, 11647, '\P{^Blk=ethiopicextended}', "");
Expect(1, 11743, '\p{Blk:   _EthiopicExtended}', "");
Expect(0, 11743, '\p{^Blk:   _EthiopicExtended}', "");
Expect(0, 11743, '\P{Blk:   _EthiopicExtended}', "");
Expect(1, 11743, '\P{^Blk:   _EthiopicExtended}', "");
Expect(0, 11647, '\p{Blk:   _EthiopicExtended}', "");
Expect(1, 11647, '\p{^Blk:   _EthiopicExtended}', "");
Expect(1, 11647, '\P{Blk:   _EthiopicExtended}', "");
Expect(0, 11647, '\P{^Blk:   _EthiopicExtended}', "");
Error('\p{Is_Block: -ethiopic Extended:=}');
Error('\P{Is_Block: -ethiopic Extended:=}');
Expect(1, 11743, '\p{Is_Block=ethiopicextended}', "");
Expect(0, 11743, '\p{^Is_Block=ethiopicextended}', "");
Expect(0, 11743, '\P{Is_Block=ethiopicextended}', "");
Expect(1, 11743, '\P{^Is_Block=ethiopicextended}', "");
Expect(0, 11647, '\p{Is_Block=ethiopicextended}', "");
Expect(1, 11647, '\p{^Is_Block=ethiopicextended}', "");
Expect(1, 11647, '\P{Is_Block=ethiopicextended}', "");
Expect(0, 11647, '\P{^Is_Block=ethiopicextended}', "");
Expect(1, 11743, '\p{Is_Block=-_Ethiopic-Extended}', "");
Expect(0, 11743, '\p{^Is_Block=-_Ethiopic-Extended}', "");
Expect(0, 11743, '\P{Is_Block=-_Ethiopic-Extended}', "");
Expect(1, 11743, '\P{^Is_Block=-_Ethiopic-Extended}', "");
Expect(0, 11647, '\p{Is_Block=-_Ethiopic-Extended}', "");
Expect(1, 11647, '\p{^Is_Block=-_Ethiopic-Extended}', "");
Expect(1, 11647, '\P{Is_Block=-_Ethiopic-Extended}', "");
Expect(0, 11647, '\P{^Is_Block=-_Ethiopic-Extended}', "");
Error('\p{Is_Blk= Ethiopic	Extended/a/}');
Error('\P{Is_Blk= Ethiopic	Extended/a/}');
Expect(1, 11743, '\p{Is_Blk=ethiopicextended}', "");
Expect(0, 11743, '\p{^Is_Blk=ethiopicextended}', "");
Expect(0, 11743, '\P{Is_Blk=ethiopicextended}', "");
Expect(1, 11743, '\P{^Is_Blk=ethiopicextended}', "");
Expect(0, 11647, '\p{Is_Blk=ethiopicextended}', "");
Expect(1, 11647, '\p{^Is_Blk=ethiopicextended}', "");
Expect(1, 11647, '\P{Is_Blk=ethiopicextended}', "");
Expect(0, 11647, '\P{^Is_Blk=ethiopicextended}', "");
Expect(1, 11743, '\p{Is_Blk=--ethiopic-Extended}', "");
Expect(0, 11743, '\p{^Is_Blk=--ethiopic-Extended}', "");
Expect(0, 11743, '\P{Is_Blk=--ethiopic-Extended}', "");
Expect(1, 11743, '\P{^Is_Blk=--ethiopic-Extended}', "");
Expect(0, 11647, '\p{Is_Blk=--ethiopic-Extended}', "");
Expect(1, 11647, '\p{^Is_Blk=--ethiopic-Extended}', "");
Expect(1, 11647, '\P{Is_Blk=--ethiopic-Extended}', "");
Expect(0, 11647, '\P{^Is_Blk=--ethiopic-Extended}', "");
Error('\p{Block=	Phoenician/a/}');
Error('\P{Block=	Phoenician/a/}');
Expect(1, 67871, '\p{Block: phoenician}', "");
Expect(0, 67871, '\p{^Block: phoenician}', "");
Expect(0, 67871, '\P{Block: phoenician}', "");
Expect(1, 67871, '\P{^Block: phoenician}', "");
Expect(0, 67839, '\p{Block: phoenician}', "");
Expect(1, 67839, '\p{^Block: phoenician}', "");
Expect(1, 67839, '\P{Block: phoenician}', "");
Expect(0, 67839, '\P{^Block: phoenician}', "");
Expect(1, 67871, '\p{Block:	--Phoenician}', "");
Expect(0, 67871, '\p{^Block:	--Phoenician}', "");
Expect(0, 67871, '\P{Block:	--Phoenician}', "");
Expect(1, 67871, '\P{^Block:	--Phoenician}', "");
Expect(0, 67839, '\p{Block:	--Phoenician}', "");
Expect(1, 67839, '\p{^Block:	--Phoenician}', "");
Expect(1, 67839, '\P{Block:	--Phoenician}', "");
Expect(0, 67839, '\P{^Block:	--Phoenician}', "");
Error('\p{Blk=  PHOENICIAN:=}');
Error('\P{Blk=  PHOENICIAN:=}');
Expect(1, 67871, '\p{Blk=phoenician}', "");
Expect(0, 67871, '\p{^Blk=phoenician}', "");
Expect(0, 67871, '\P{Blk=phoenician}', "");
Expect(1, 67871, '\P{^Blk=phoenician}', "");
Expect(0, 67839, '\p{Blk=phoenician}', "");
Expect(1, 67839, '\p{^Blk=phoenician}', "");
Expect(1, 67839, '\P{Blk=phoenician}', "");
Expect(0, 67839, '\P{^Blk=phoenician}', "");
Expect(1, 67871, '\p{Blk=	-phoenician}', "");
Expect(0, 67871, '\p{^Blk=	-phoenician}', "");
Expect(0, 67871, '\P{Blk=	-phoenician}', "");
Expect(1, 67871, '\P{^Blk=	-phoenician}', "");
Expect(0, 67839, '\p{Blk=	-phoenician}', "");
Expect(1, 67839, '\p{^Blk=	-phoenician}', "");
Expect(1, 67839, '\P{Blk=	-phoenician}', "");
Expect(0, 67839, '\P{^Blk=	-phoenician}', "");
Error('\p{Is_Block=-:=phoenician}');
Error('\P{Is_Block=-:=phoenician}');
Expect(1, 67871, '\p{Is_Block=phoenician}', "");
Expect(0, 67871, '\p{^Is_Block=phoenician}', "");
Expect(0, 67871, '\P{Is_Block=phoenician}', "");
Expect(1, 67871, '\P{^Is_Block=phoenician}', "");
Expect(0, 67839, '\p{Is_Block=phoenician}', "");
Expect(1, 67839, '\p{^Is_Block=phoenician}', "");
Expect(1, 67839, '\P{Is_Block=phoenician}', "");
Expect(0, 67839, '\P{^Is_Block=phoenician}', "");
Expect(1, 67871, '\p{Is_Block= Phoenician}', "");
Expect(0, 67871, '\p{^Is_Block= Phoenician}', "");
Expect(0, 67871, '\P{Is_Block= Phoenician}', "");
Expect(1, 67871, '\P{^Is_Block= Phoenician}', "");
Expect(0, 67839, '\p{Is_Block= Phoenician}', "");
Expect(1, 67839, '\p{^Is_Block= Phoenician}', "");
Expect(1, 67839, '\P{Is_Block= Phoenician}', "");
Expect(0, 67839, '\P{^Is_Block= Phoenician}', "");
Error('\p{Is_Blk=:= -phoenician}');
Error('\P{Is_Blk=:= -phoenician}');
Expect(1, 67871, '\p{Is_Blk=phoenician}', "");
Expect(0, 67871, '\p{^Is_Blk=phoenician}', "");
Expect(0, 67871, '\P{Is_Blk=phoenician}', "");
Expect(1, 67871, '\P{^Is_Blk=phoenician}', "");
Expect(0, 67839, '\p{Is_Blk=phoenician}', "");
Expect(1, 67839, '\p{^Is_Blk=phoenician}', "");
Expect(1, 67839, '\P{Is_Blk=phoenician}', "");
Expect(0, 67839, '\P{^Is_Blk=phoenician}', "");
Expect(1, 67871, '\p{Is_Blk=__PHOENICIAN}', "");
Expect(0, 67871, '\p{^Is_Blk=__PHOENICIAN}', "");
Expect(0, 67871, '\P{Is_Blk=__PHOENICIAN}', "");
Expect(1, 67871, '\P{^Is_Blk=__PHOENICIAN}', "");
Expect(0, 67839, '\p{Is_Blk=__PHOENICIAN}', "");
Expect(1, 67839, '\p{^Is_Blk=__PHOENICIAN}', "");
Expect(1, 67839, '\P{Is_Blk=__PHOENICIAN}', "");
Expect(0, 67839, '\P{^Is_Blk=__PHOENICIAN}', "");
Error('\p{Block=/a/ 	LATIN	1supplement}');
Error('\P{Block=/a/ 	LATIN	1supplement}');
Expect(1, 255, '\p{Block:	latin1supplement}', "");
Expect(0, 255, '\p{^Block:	latin1supplement}', "");
Expect(0, 255, '\P{Block:	latin1supplement}', "");
Expect(1, 255, '\P{^Block:	latin1supplement}', "");
Expect(0, 127, '\p{Block:	latin1supplement}', "");
Expect(1, 127, '\p{^Block:	latin1supplement}', "");
Expect(1, 127, '\P{Block:	latin1supplement}', "");
Expect(0, 127, '\P{^Block:	latin1supplement}', "");
Expect(1, 255, '\p{Block=LATIN	1-supplement}', "");
Expect(0, 255, '\p{^Block=LATIN	1-supplement}', "");
Expect(0, 255, '\P{Block=LATIN	1-supplement}', "");
Expect(1, 255, '\P{^Block=LATIN	1-supplement}', "");
Expect(0, 127, '\p{Block=LATIN	1-supplement}', "");
Expect(1, 127, '\p{^Block=LATIN	1-supplement}', "");
Expect(1, 127, '\P{Block=LATIN	1-supplement}', "");
Expect(0, 127, '\P{^Block=LATIN	1-supplement}', "");
Error('\p{Blk=-LATIN1:=}');
Error('\P{Blk=-LATIN1:=}');
Expect(1, 255, '\p{Blk=latin1}', "");
Expect(0, 255, '\p{^Blk=latin1}', "");
Expect(0, 255, '\P{Blk=latin1}', "");
Expect(1, 255, '\P{^Blk=latin1}', "");
Expect(0, 127, '\p{Blk=latin1}', "");
Expect(1, 127, '\p{^Blk=latin1}', "");
Expect(1, 127, '\P{Blk=latin1}', "");
Expect(0, 127, '\P{^Blk=latin1}', "");
Expect(1, 255, '\p{Blk=	_LATIN	1}', "");
Expect(0, 255, '\p{^Blk=	_LATIN	1}', "");
Expect(0, 255, '\P{Blk=	_LATIN	1}', "");
Expect(1, 255, '\P{^Blk=	_LATIN	1}', "");
Expect(0, 127, '\p{Blk=	_LATIN	1}', "");
Expect(1, 127, '\p{^Blk=	_LATIN	1}', "");
Expect(1, 127, '\P{Blk=	_LATIN	1}', "");
Expect(0, 127, '\P{^Blk=	_LATIN	1}', "");
Error('\p{Is_Block=	_latin:=1_SUPPLEMENT}');
Error('\P{Is_Block=	_latin:=1_SUPPLEMENT}');
Expect(1, 255, '\p{Is_Block=latin1supplement}', "");
Expect(0, 255, '\p{^Is_Block=latin1supplement}', "");
Expect(0, 255, '\P{Is_Block=latin1supplement}', "");
Expect(1, 255, '\P{^Is_Block=latin1supplement}', "");
Expect(0, 127, '\p{Is_Block=latin1supplement}', "");
Expect(1, 127, '\p{^Is_Block=latin1supplement}', "");
Expect(1, 127, '\P{Is_Block=latin1supplement}', "");
Expect(0, 127, '\P{^Is_Block=latin1supplement}', "");
Expect(1, 255, '\p{Is_Block=_Latin	1Supplement}', "");
Expect(0, 255, '\p{^Is_Block=_Latin	1Supplement}', "");
Expect(0, 255, '\P{Is_Block=_Latin	1Supplement}', "");
Expect(1, 255, '\P{^Is_Block=_Latin	1Supplement}', "");
Expect(0, 127, '\p{Is_Block=_Latin	1Supplement}', "");
Expect(1, 127, '\p{^Is_Block=_Latin	1Supplement}', "");
Expect(1, 127, '\P{Is_Block=_Latin	1Supplement}', "");
Expect(0, 127, '\P{^Is_Block=_Latin	1Supplement}', "");
Error('\p{Is_Blk=/a/ Latin	1}');
Error('\P{Is_Blk=/a/ Latin	1}');
Expect(1, 255, '\p{Is_Blk=latin1}', "");
Expect(0, 255, '\p{^Is_Blk=latin1}', "");
Expect(0, 255, '\P{Is_Blk=latin1}', "");
Expect(1, 255, '\P{^Is_Blk=latin1}', "");
Expect(0, 127, '\p{Is_Blk=latin1}', "");
Expect(1, 127, '\p{^Is_Blk=latin1}', "");
Expect(1, 127, '\P{Is_Blk=latin1}', "");
Expect(0, 127, '\P{^Is_Blk=latin1}', "");
Expect(1, 255, '\p{Is_Blk=	-Latin	1}', "");
Expect(0, 255, '\p{^Is_Blk=	-Latin	1}', "");
Expect(0, 255, '\P{Is_Blk=	-Latin	1}', "");
Expect(1, 255, '\P{^Is_Blk=	-Latin	1}', "");
Expect(0, 127, '\p{Is_Blk=	-Latin	1}', "");
Expect(1, 127, '\p{^Is_Blk=	-Latin	1}', "");
Expect(1, 127, '\P{Is_Blk=	-Latin	1}', "");
Expect(0, 127, '\P{^Is_Blk=	-Latin	1}', "");
Error('\p{Block=/a/	-devanagari}');
Error('\P{Block=/a/	-devanagari}');
Expect(1, 2431, '\p{Block=devanagari}', "");
Expect(0, 2431, '\p{^Block=devanagari}', "");
Expect(0, 2431, '\P{Block=devanagari}', "");
Expect(1, 2431, '\P{^Block=devanagari}', "");
Expect(0, 2303, '\p{Block=devanagari}', "");
Expect(1, 2303, '\p{^Block=devanagari}', "");
Expect(1, 2303, '\P{Block=devanagari}', "");
Expect(0, 2303, '\P{^Block=devanagari}', "");
Expect(1, 2431, '\p{Block=-devanagari}', "");
Expect(0, 2431, '\p{^Block=-devanagari}', "");
Expect(0, 2431, '\P{Block=-devanagari}', "");
Expect(1, 2431, '\P{^Block=-devanagari}', "");
Expect(0, 2303, '\p{Block=-devanagari}', "");
Expect(1, 2303, '\p{^Block=-devanagari}', "");
Expect(1, 2303, '\P{Block=-devanagari}', "");
Expect(0, 2303, '\P{^Block=-devanagari}', "");
Error('\p{Blk=	:=devanagari}');
Error('\P{Blk=	:=devanagari}');
Expect(1, 2431, '\p{Blk=devanagari}', "");
Expect(0, 2431, '\p{^Blk=devanagari}', "");
Expect(0, 2431, '\P{Blk=devanagari}', "");
Expect(1, 2431, '\P{^Blk=devanagari}', "");
Expect(0, 2303, '\p{Blk=devanagari}', "");
Expect(1, 2303, '\p{^Blk=devanagari}', "");
Expect(1, 2303, '\P{Blk=devanagari}', "");
Expect(0, 2303, '\P{^Blk=devanagari}', "");
Expect(1, 2431, '\p{Blk= 	DEVANAGARI}', "");
Expect(0, 2431, '\p{^Blk= 	DEVANAGARI}', "");
Expect(0, 2431, '\P{Blk= 	DEVANAGARI}', "");
Expect(1, 2431, '\P{^Blk= 	DEVANAGARI}', "");
Expect(0, 2303, '\p{Blk= 	DEVANAGARI}', "");
Expect(1, 2303, '\p{^Blk= 	DEVANAGARI}', "");
Expect(1, 2303, '\P{Blk= 	DEVANAGARI}', "");
Expect(0, 2303, '\P{^Blk= 	DEVANAGARI}', "");
Error('\p{Is_Block=/a/- Devanagari}');
Error('\P{Is_Block=/a/- Devanagari}');
Expect(1, 2431, '\p{Is_Block=devanagari}', "");
Expect(0, 2431, '\p{^Is_Block=devanagari}', "");
Expect(0, 2431, '\P{Is_Block=devanagari}', "");
Expect(1, 2431, '\P{^Is_Block=devanagari}', "");
Expect(0, 2303, '\p{Is_Block=devanagari}', "");
Expect(1, 2303, '\p{^Is_Block=devanagari}', "");
Expect(1, 2303, '\P{Is_Block=devanagari}', "");
Expect(0, 2303, '\P{^Is_Block=devanagari}', "");
Expect(1, 2431, '\p{Is_Block=	Devanagari}', "");
Expect(0, 2431, '\p{^Is_Block=	Devanagari}', "");
Expect(0, 2431, '\P{Is_Block=	Devanagari}', "");
Expect(1, 2431, '\P{^Is_Block=	Devanagari}', "");
Expect(0, 2303, '\p{Is_Block=	Devanagari}', "");
Expect(1, 2303, '\p{^Is_Block=	Devanagari}', "");
Expect(1, 2303, '\P{Is_Block=	Devanagari}', "");
Expect(0, 2303, '\P{^Is_Block=	Devanagari}', "");
Error('\p{Is_Blk=_-DEVANAGARI:=}');
Error('\P{Is_Blk=_-DEVANAGARI:=}');
Expect(1, 2431, '\p{Is_Blk: devanagari}', "");
Expect(0, 2431, '\p{^Is_Blk: devanagari}', "");
Expect(0, 2431, '\P{Is_Blk: devanagari}', "");
Expect(1, 2431, '\P{^Is_Blk: devanagari}', "");
Expect(0, 2303, '\p{Is_Blk: devanagari}', "");
Expect(1, 2303, '\p{^Is_Blk: devanagari}', "");
Expect(1, 2303, '\P{Is_Blk: devanagari}', "");
Expect(0, 2303, '\P{^Is_Blk: devanagari}', "");
Expect(1, 2431, '\p{Is_Blk=	-Devanagari}', "");
Expect(0, 2431, '\p{^Is_Blk=	-Devanagari}', "");
Expect(0, 2431, '\P{Is_Blk=	-Devanagari}', "");
Expect(1, 2431, '\P{^Is_Blk=	-Devanagari}', "");
Expect(0, 2303, '\p{Is_Blk=	-Devanagari}', "");
Expect(1, 2303, '\p{^Is_Blk=	-Devanagari}', "");
Expect(1, 2303, '\P{Is_Blk=	-Devanagari}', "");
Expect(0, 2303, '\P{^Is_Blk=	-Devanagari}', "");
Error('\p{Block= _HANGUL:=Jamo EXTENDED A}');
Error('\P{Block= _HANGUL:=Jamo EXTENDED A}');
Expect(1, 43391, '\p{Block:	hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^Block:	hanguljamoextendeda}', "");
Expect(0, 43391, '\P{Block:	hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^Block:	hanguljamoextendeda}', "");
Expect(0, 43359, '\p{Block:	hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^Block:	hanguljamoextendeda}', "");
Expect(1, 43359, '\P{Block:	hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^Block:	hanguljamoextendeda}', "");
Expect(1, 43391, '\p{Block=_HANGUL	Jamo	extended	a}', "");
Expect(0, 43391, '\p{^Block=_HANGUL	Jamo	extended	a}', "");
Expect(0, 43391, '\P{Block=_HANGUL	Jamo	extended	a}', "");
Expect(1, 43391, '\P{^Block=_HANGUL	Jamo	extended	a}', "");
Expect(0, 43359, '\p{Block=_HANGUL	Jamo	extended	a}', "");
Expect(1, 43359, '\p{^Block=_HANGUL	Jamo	extended	a}', "");
Expect(1, 43359, '\P{Block=_HANGUL	Jamo	extended	a}', "");
Expect(0, 43359, '\P{^Block=_HANGUL	Jamo	extended	a}', "");
Error('\p{Blk=_	Hangul_Jamo:=Extended A}');
Error('\P{Blk=_	Hangul_Jamo:=Extended A}');
Expect(1, 43391, '\p{Blk=hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^Blk=hanguljamoextendeda}', "");
Expect(0, 43391, '\P{Blk=hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^Blk=hanguljamoextendeda}', "");
Expect(0, 43359, '\p{Blk=hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^Blk=hanguljamoextendeda}', "");
Expect(1, 43359, '\P{Blk=hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^Blk=hanguljamoextendeda}', "");
Expect(1, 43391, '\p{Blk= hangul	JamoExtended A}', "");
Expect(0, 43391, '\p{^Blk= hangul	JamoExtended A}', "");
Expect(0, 43391, '\P{Blk= hangul	JamoExtended A}', "");
Expect(1, 43391, '\P{^Blk= hangul	JamoExtended A}', "");
Expect(0, 43359, '\p{Blk= hangul	JamoExtended A}', "");
Expect(1, 43359, '\p{^Blk= hangul	JamoExtended A}', "");
Expect(1, 43359, '\P{Blk= hangul	JamoExtended A}', "");
Expect(0, 43359, '\P{^Blk= hangul	JamoExtended A}', "");
Error('\p{Is_Block=_-hanguljamo_Extended-A/a/}');
Error('\P{Is_Block=_-hanguljamo_Extended-A/a/}');
Expect(1, 43391, '\p{Is_Block=hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^Is_Block=hanguljamoextendeda}', "");
Expect(0, 43391, '\P{Is_Block=hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^Is_Block=hanguljamoextendeda}', "");
Expect(0, 43359, '\p{Is_Block=hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^Is_Block=hanguljamoextendeda}', "");
Expect(1, 43359, '\P{Is_Block=hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^Is_Block=hanguljamoextendeda}', "");
Expect(1, 43391, '\p{Is_Block=--Hangul Jamo Extended A}', "");
Expect(0, 43391, '\p{^Is_Block=--Hangul Jamo Extended A}', "");
Expect(0, 43391, '\P{Is_Block=--Hangul Jamo Extended A}', "");
Expect(1, 43391, '\P{^Is_Block=--Hangul Jamo Extended A}', "");
Expect(0, 43359, '\p{Is_Block=--Hangul Jamo Extended A}', "");
Expect(1, 43359, '\p{^Is_Block=--Hangul Jamo Extended A}', "");
Expect(1, 43359, '\P{Is_Block=--Hangul Jamo Extended A}', "");
Expect(0, 43359, '\P{^Is_Block=--Hangul Jamo Extended A}', "");
Error('\p{Is_Blk=Hangul:=Jamo_Extended	A}');
Error('\P{Is_Blk=Hangul:=Jamo_Extended	A}');
Expect(1, 43391, '\p{Is_Blk=hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^Is_Blk=hanguljamoextendeda}', "");
Expect(0, 43391, '\P{Is_Blk=hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^Is_Blk=hanguljamoextendeda}', "");
Expect(0, 43359, '\p{Is_Blk=hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^Is_Blk=hanguljamoextendeda}', "");
Expect(1, 43359, '\P{Is_Blk=hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^Is_Blk=hanguljamoextendeda}', "");
Expect(1, 43391, '\p{Is_Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(0, 43391, '\p{^Is_Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(0, 43391, '\P{Is_Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(1, 43391, '\P{^Is_Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(0, 43359, '\p{Is_Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(1, 43359, '\p{^Is_Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(1, 43359, '\P{Is_Blk:     Hangul-JAMO	ExtendedA}', "");
Expect(0, 43359, '\P{^Is_Blk:     Hangul-JAMO	ExtendedA}', "");
Error('\p{Block=	:=Carian}');
Error('\P{Block=	:=Carian}');
Expect(1, 66271, '\p{Block=carian}', "");
Expect(0, 66271, '\p{^Block=carian}', "");
Expect(0, 66271, '\P{Block=carian}', "");
Expect(1, 66271, '\P{^Block=carian}', "");
Expect(0, 66207, '\p{Block=carian}', "");
Expect(1, 66207, '\p{^Block=carian}', "");
Expect(1, 66207, '\P{Block=carian}', "");
Expect(0, 66207, '\P{^Block=carian}', "");
Expect(1, 66271, '\p{Block=_	Carian}', "");
Expect(0, 66271, '\p{^Block=_	Carian}', "");
Expect(0, 66271, '\P{Block=_	Carian}', "");
Expect(1, 66271, '\P{^Block=_	Carian}', "");
Expect(0, 66207, '\p{Block=_	Carian}', "");
Expect(1, 66207, '\p{^Block=_	Carian}', "");
Expect(1, 66207, '\P{Block=_	Carian}', "");
Expect(0, 66207, '\P{^Block=_	Carian}', "");
Error('\p{Blk=_	CARIAN/a/}');
Error('\P{Blk=_	CARIAN/a/}');
Expect(1, 66271, '\p{Blk=carian}', "");
Expect(0, 66271, '\p{^Blk=carian}', "");
Expect(0, 66271, '\P{Blk=carian}', "");
Expect(1, 66271, '\P{^Blk=carian}', "");
Expect(0, 66207, '\p{Blk=carian}', "");
Expect(1, 66207, '\p{^Blk=carian}', "");
Expect(1, 66207, '\P{Blk=carian}', "");
Expect(0, 66207, '\P{^Blk=carian}', "");
Expect(1, 66271, '\p{Blk=- carian}', "");
Expect(0, 66271, '\p{^Blk=- carian}', "");
Expect(0, 66271, '\P{Blk=- carian}', "");
Expect(1, 66271, '\P{^Blk=- carian}', "");
Expect(0, 66207, '\p{Blk=- carian}', "");
Expect(1, 66207, '\p{^Blk=- carian}', "");
Expect(1, 66207, '\P{Blk=- carian}', "");
Expect(0, 66207, '\P{^Blk=- carian}', "");
Error('\p{Is_Block: 	/a/Carian}');
Error('\P{Is_Block: 	/a/Carian}');
Expect(1, 66271, '\p{Is_Block=carian}', "");
Expect(0, 66271, '\p{^Is_Block=carian}', "");
Expect(0, 66271, '\P{Is_Block=carian}', "");
Expect(1, 66271, '\P{^Is_Block=carian}', "");
Expect(0, 66207, '\p{Is_Block=carian}', "");
Expect(1, 66207, '\p{^Is_Block=carian}', "");
Expect(1, 66207, '\P{Is_Block=carian}', "");
Expect(0, 66207, '\P{^Is_Block=carian}', "");
Expect(1, 66271, '\p{Is_Block= 	Carian}', "");
Expect(0, 66271, '\p{^Is_Block= 	Carian}', "");
Expect(0, 66271, '\P{Is_Block= 	Carian}', "");
Expect(1, 66271, '\P{^Is_Block= 	Carian}', "");
Expect(0, 66207, '\p{Is_Block= 	Carian}', "");
Expect(1, 66207, '\p{^Is_Block= 	Carian}', "");
Expect(1, 66207, '\P{Is_Block= 	Carian}', "");
Expect(0, 66207, '\P{^Is_Block= 	Carian}', "");
Error('\p{Is_Blk=/a/-_Carian}');
Error('\P{Is_Blk=/a/-_Carian}');
Expect(1, 66271, '\p{Is_Blk=carian}', "");
Expect(0, 66271, '\p{^Is_Blk=carian}', "");
Expect(0, 66271, '\P{Is_Blk=carian}', "");
Expect(1, 66271, '\P{^Is_Blk=carian}', "");
Expect(0, 66207, '\p{Is_Blk=carian}', "");
Expect(1, 66207, '\p{^Is_Blk=carian}', "");
Expect(1, 66207, '\P{Is_Blk=carian}', "");
Expect(0, 66207, '\P{^Is_Blk=carian}', "");
Expect(1, 66271, '\p{Is_Blk= Carian}', "");
Expect(0, 66271, '\p{^Is_Blk= Carian}', "");
Expect(0, 66271, '\P{Is_Blk= Carian}', "");
Expect(1, 66271, '\P{^Is_Blk= Carian}', "");
Expect(0, 66207, '\p{Is_Blk= Carian}', "");
Expect(1, 66207, '\p{^Is_Blk= Carian}', "");
Expect(1, 66207, '\P{Is_Blk= Carian}', "");
Expect(0, 66207, '\P{^Is_Blk= Carian}', "");
Error('\p{Block=	:=BUHID}');
Error('\P{Block=	:=BUHID}');
Expect(1, 5983, '\p{Block=buhid}', "");
Expect(0, 5983, '\p{^Block=buhid}', "");
Expect(0, 5983, '\P{Block=buhid}', "");
Expect(1, 5983, '\P{^Block=buhid}', "");
Expect(0, 5951, '\p{Block=buhid}', "");
Expect(1, 5951, '\p{^Block=buhid}', "");
Expect(1, 5951, '\P{Block=buhid}', "");
Expect(0, 5951, '\P{^Block=buhid}', "");
Expect(1, 5983, '\p{Block=-buhid}', "");
Expect(0, 5983, '\p{^Block=-buhid}', "");
Expect(0, 5983, '\P{Block=-buhid}', "");
Expect(1, 5983, '\P{^Block=-buhid}', "");
Expect(0, 5951, '\p{Block=-buhid}', "");
Expect(1, 5951, '\p{^Block=-buhid}', "");
Expect(1, 5951, '\P{Block=-buhid}', "");
Expect(0, 5951, '\P{^Block=-buhid}', "");
Error('\p{Blk=-/a/Buhid}');
Error('\P{Blk=-/a/Buhid}');
Expect(1, 5983, '\p{Blk=buhid}', "");
Expect(0, 5983, '\p{^Blk=buhid}', "");
Expect(0, 5983, '\P{Blk=buhid}', "");
Expect(1, 5983, '\P{^Blk=buhid}', "");
Expect(0, 5951, '\p{Blk=buhid}', "");
Expect(1, 5951, '\p{^Blk=buhid}', "");
Expect(1, 5951, '\P{Blk=buhid}', "");
Expect(0, 5951, '\P{^Blk=buhid}', "");
Expect(1, 5983, '\p{Blk= Buhid}', "");
Expect(0, 5983, '\p{^Blk= Buhid}', "");
Expect(0, 5983, '\P{Blk= Buhid}', "");
Expect(1, 5983, '\P{^Blk= Buhid}', "");
Expect(0, 5951, '\p{Blk= Buhid}', "");
Expect(1, 5951, '\p{^Blk= Buhid}', "");
Expect(1, 5951, '\P{Blk= Buhid}', "");
Expect(0, 5951, '\P{^Blk= Buhid}', "");
Error('\p{Is_Block=:=BUHID}');
Error('\P{Is_Block=:=BUHID}');
Expect(1, 5983, '\p{Is_Block=buhid}', "");
Expect(0, 5983, '\p{^Is_Block=buhid}', "");
Expect(0, 5983, '\P{Is_Block=buhid}', "");
Expect(1, 5983, '\P{^Is_Block=buhid}', "");
Expect(0, 5951, '\p{Is_Block=buhid}', "");
Expect(1, 5951, '\p{^Is_Block=buhid}', "");
Expect(1, 5951, '\P{Is_Block=buhid}', "");
Expect(0, 5951, '\P{^Is_Block=buhid}', "");
Expect(1, 5983, '\p{Is_Block= Buhid}', "");
Expect(0, 5983, '\p{^Is_Block= Buhid}', "");
Expect(0, 5983, '\P{Is_Block= Buhid}', "");
Expect(1, 5983, '\P{^Is_Block= Buhid}', "");
Expect(0, 5951, '\p{Is_Block= Buhid}', "");
Expect(1, 5951, '\p{^Is_Block= Buhid}', "");
Expect(1, 5951, '\P{Is_Block= Buhid}', "");
Expect(0, 5951, '\P{^Is_Block= Buhid}', "");
Error('\p{Is_Blk=:=	 Buhid}');
Error('\P{Is_Blk=:=	 Buhid}');
Expect(1, 5983, '\p{Is_Blk=buhid}', "");
Expect(0, 5983, '\p{^Is_Blk=buhid}', "");
Expect(0, 5983, '\P{Is_Blk=buhid}', "");
Expect(1, 5983, '\P{^Is_Blk=buhid}', "");
Expect(0, 5951, '\p{Is_Blk=buhid}', "");
Expect(1, 5951, '\p{^Is_Blk=buhid}', "");
Expect(1, 5951, '\P{Is_Blk=buhid}', "");
Expect(0, 5951, '\P{^Is_Blk=buhid}', "");
Expect(1, 5983, '\p{Is_Blk:	_BUHID}', "");
Expect(0, 5983, '\p{^Is_Blk:	_BUHID}', "");
Expect(0, 5983, '\P{Is_Blk:	_BUHID}', "");
Expect(1, 5983, '\P{^Is_Blk:	_BUHID}', "");
Expect(0, 5951, '\p{Is_Blk:	_BUHID}', "");
Expect(1, 5951, '\p{^Is_Blk:	_BUHID}', "");
Expect(1, 5951, '\P{Is_Blk:	_BUHID}', "");
Expect(0, 5951, '\P{^Is_Blk:	_BUHID}', "");
Error('\p{Block=-/a/IDEOGRAPHIC description_CHARACTERS}');
Error('\P{Block=-/a/IDEOGRAPHIC description_CHARACTERS}');
Expect(1, 12287, '\p{Block=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^Block=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{Block=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^Block=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{Block=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^Block=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{Block=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^Block=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{Block=- ideographic_Description-Characters}', "");
Expect(0, 12287, '\p{^Block=- ideographic_Description-Characters}', "");
Expect(0, 12287, '\P{Block=- ideographic_Description-Characters}', "");
Expect(1, 12287, '\P{^Block=- ideographic_Description-Characters}', "");
Expect(0, 12271, '\p{Block=- ideographic_Description-Characters}', "");
Expect(1, 12271, '\p{^Block=- ideographic_Description-Characters}', "");
Expect(1, 12271, '\P{Block=- ideographic_Description-Characters}', "");
Expect(0, 12271, '\P{^Block=- ideographic_Description-Characters}', "");
Error('\p{Blk=_IDEOGRAPHIC/a/DESCRIPTION_characters}');
Error('\P{Blk=_IDEOGRAPHIC/a/DESCRIPTION_characters}');
Expect(1, 12287, '\p{Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{Blk=_ ideographic Description-Characters}', "");
Expect(0, 12287, '\p{^Blk=_ ideographic Description-Characters}', "");
Expect(0, 12287, '\P{Blk=_ ideographic Description-Characters}', "");
Expect(1, 12287, '\P{^Blk=_ ideographic Description-Characters}', "");
Expect(0, 12271, '\p{Blk=_ ideographic Description-Characters}', "");
Expect(1, 12271, '\p{^Blk=_ ideographic Description-Characters}', "");
Expect(1, 12271, '\P{Blk=_ ideographic Description-Characters}', "");
Expect(0, 12271, '\P{^Blk=_ ideographic Description-Characters}', "");
Error('\p{Is_Block=:=Ideographic_DESCRIPTIONCharacters}');
Error('\P{Is_Block=:=Ideographic_DESCRIPTIONCharacters}');
Expect(1, 12287, '\p{Is_Block:   ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^Is_Block:   ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{Is_Block:   ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^Is_Block:   ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{Is_Block:   ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^Is_Block:   ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{Is_Block:   ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^Is_Block:   ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{Is_Block=  Ideographic	Description	characters}', "");
Expect(0, 12287, '\p{^Is_Block=  Ideographic	Description	characters}', "");
Expect(0, 12287, '\P{Is_Block=  Ideographic	Description	characters}', "");
Expect(1, 12287, '\P{^Is_Block=  Ideographic	Description	characters}', "");
Expect(0, 12271, '\p{Is_Block=  Ideographic	Description	characters}', "");
Expect(1, 12271, '\p{^Is_Block=  Ideographic	Description	characters}', "");
Expect(1, 12271, '\P{Is_Block=  Ideographic	Description	characters}', "");
Expect(0, 12271, '\P{^Is_Block=  Ideographic	Description	characters}', "");
Error('\p{Is_Blk= IDEOGRAPHIC	Description/a/CHARACTERS}');
Error('\P{Is_Blk= IDEOGRAPHIC	Description/a/CHARACTERS}');
Expect(1, 12287, '\p{Is_Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^Is_Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{Is_Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^Is_Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{Is_Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^Is_Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{Is_Blk=ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^Is_Blk=ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{Is_Blk=		ideographic-description_CHARACTERS}', "");
Expect(0, 12287, '\p{^Is_Blk=		ideographic-description_CHARACTERS}', "");
Expect(0, 12287, '\P{Is_Blk=		ideographic-description_CHARACTERS}', "");
Expect(1, 12287, '\P{^Is_Blk=		ideographic-description_CHARACTERS}', "");
Expect(0, 12271, '\p{Is_Blk=		ideographic-description_CHARACTERS}', "");
Expect(1, 12271, '\p{^Is_Blk=		ideographic-description_CHARACTERS}', "");
Expect(1, 12271, '\P{Is_Blk=		ideographic-description_CHARACTERS}', "");
Expect(0, 12271, '\P{^Is_Blk=		ideographic-description_CHARACTERS}', "");
Error('\p{Block=	cjkUnifiedIdeographs/a/Extension-B}');
Error('\P{Block=	cjkUnifiedIdeographs/a/Extension-B}');
Expect(1, 173791, '\p{Block:   cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^Block:   cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{Block:   cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^Block:   cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{Block:   cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^Block:   cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{Block:   cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^Block:   cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{Block:	-CJKUNIFIED	Ideographs_extension-B}', "");
Expect(0, 173791, '\p{^Block:	-CJKUNIFIED	Ideographs_extension-B}', "");
Expect(0, 173791, '\P{Block:	-CJKUNIFIED	Ideographs_extension-B}', "");
Expect(1, 173791, '\P{^Block:	-CJKUNIFIED	Ideographs_extension-B}', "");
Expect(0, 1, '\p{Block:	-CJKUNIFIED	Ideographs_extension-B}', "");
Expect(1, 1, '\p{^Block:	-CJKUNIFIED	Ideographs_extension-B}', "");
Expect(1, 1, '\P{Block:	-CJKUNIFIED	Ideographs_extension-B}', "");
Expect(0, 1, '\P{^Block:	-CJKUNIFIED	Ideographs_extension-B}', "");
Error('\p{Blk=- CJK-UNIFIED	ideographs/a/Extension_B}');
Error('\P{Blk=- CJK-UNIFIED	ideographs/a/Extension_B}');
Expect(1, 173791, '\p{Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{Blk=	-CJK unified_IDEOGRAPHS-extension	B}', "");
Expect(0, 173791, '\p{^Blk=	-CJK unified_IDEOGRAPHS-extension	B}', "");
Expect(0, 173791, '\P{Blk=	-CJK unified_IDEOGRAPHS-extension	B}', "");
Expect(1, 173791, '\P{^Blk=	-CJK unified_IDEOGRAPHS-extension	B}', "");
Expect(0, 1, '\p{Blk=	-CJK unified_IDEOGRAPHS-extension	B}', "");
Expect(1, 1, '\p{^Blk=	-CJK unified_IDEOGRAPHS-extension	B}', "");
Expect(1, 1, '\P{Blk=	-CJK unified_IDEOGRAPHS-extension	B}', "");
Expect(0, 1, '\P{^Blk=	-CJK unified_IDEOGRAPHS-extension	B}', "");
Error('\p{Is_Block=-CJK_Unified/a/ideographs_extensionB}');
Error('\P{Is_Block=-CJK_Unified/a/ideographs_extensionB}');
Expect(1, 173791, '\p{Is_Block=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^Is_Block=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{Is_Block=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^Is_Block=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{Is_Block=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^Is_Block=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{Is_Block=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^Is_Block=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{Is_Block=--cjk_Unified-IDEOGRAPHS EXTENSION_b}', "");
Expect(0, 173791, '\p{^Is_Block=--cjk_Unified-IDEOGRAPHS EXTENSION_b}', "");
Expect(0, 173791, '\P{Is_Block=--cjk_Unified-IDEOGRAPHS EXTENSION_b}', "");
Expect(1, 173791, '\P{^Is_Block=--cjk_Unified-IDEOGRAPHS EXTENSION_b}', "");
Expect(0, 1, '\p{Is_Block=--cjk_Unified-IDEOGRAPHS EXTENSION_b}', "");
Expect(1, 1, '\p{^Is_Block=--cjk_Unified-IDEOGRAPHS EXTENSION_b}', "");
Expect(1, 1, '\P{Is_Block=--cjk_Unified-IDEOGRAPHS EXTENSION_b}', "");
Expect(0, 1, '\P{^Is_Block=--cjk_Unified-IDEOGRAPHS EXTENSION_b}', "");
Error('\p{Is_Blk=  CJK/a/unified Ideographs-extension	B}');
Error('\P{Is_Blk=  CJK/a/unified Ideographs-extension	B}');
Expect(1, 173791, '\p{Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^Is_Blk=cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{Is_Blk= CJK_unifiedIdeographs_Extension_B}', "");
Expect(0, 173791, '\p{^Is_Blk= CJK_unifiedIdeographs_Extension_B}', "");
Expect(0, 173791, '\P{Is_Blk= CJK_unifiedIdeographs_Extension_B}', "");
Expect(1, 173791, '\P{^Is_Blk= CJK_unifiedIdeographs_Extension_B}', "");
Expect(0, 1, '\p{Is_Blk= CJK_unifiedIdeographs_Extension_B}', "");
Expect(1, 1, '\p{^Is_Blk= CJK_unifiedIdeographs_Extension_B}', "");
Expect(1, 1, '\P{Is_Blk= CJK_unifiedIdeographs_Extension_B}', "");
Expect(0, 1, '\P{^Is_Blk= CJK_unifiedIdeographs_Extension_B}', "");
Error('\p{Block=/a/Old_Italic}');
Error('\P{Block=/a/Old_Italic}');
Expect(1, 66351, '\p{Block=olditalic}', "");
Expect(0, 66351, '\p{^Block=olditalic}', "");
Expect(0, 66351, '\P{Block=olditalic}', "");
Expect(1, 66351, '\P{^Block=olditalic}', "");
Expect(0, 66303, '\p{Block=olditalic}', "");
Expect(1, 66303, '\p{^Block=olditalic}', "");
Expect(1, 66303, '\P{Block=olditalic}', "");
Expect(0, 66303, '\P{^Block=olditalic}', "");
Expect(1, 66351, '\p{Block:	-Old_Italic}', "");
Expect(0, 66351, '\p{^Block:	-Old_Italic}', "");
Expect(0, 66351, '\P{Block:	-Old_Italic}', "");
Expect(1, 66351, '\P{^Block:	-Old_Italic}', "");
Expect(0, 66303, '\p{Block:	-Old_Italic}', "");
Expect(1, 66303, '\p{^Block:	-Old_Italic}', "");
Expect(1, 66303, '\P{Block:	-Old_Italic}', "");
Expect(0, 66303, '\P{^Block:	-Old_Italic}', "");
Error('\p{Blk=_OLDitalic:=}');
Error('\P{Blk=_OLDitalic:=}');
Expect(1, 66351, '\p{Blk=olditalic}', "");
Expect(0, 66351, '\p{^Blk=olditalic}', "");
Expect(0, 66351, '\P{Blk=olditalic}', "");
Expect(1, 66351, '\P{^Blk=olditalic}', "");
Expect(0, 66303, '\p{Blk=olditalic}', "");
Expect(1, 66303, '\p{^Blk=olditalic}', "");
Expect(1, 66303, '\P{Blk=olditalic}', "");
Expect(0, 66303, '\P{^Blk=olditalic}', "");
Expect(1, 66351, '\p{Blk=--old-italic}', "");
Expect(0, 66351, '\p{^Blk=--old-italic}', "");
Expect(0, 66351, '\P{Blk=--old-italic}', "");
Expect(1, 66351, '\P{^Blk=--old-italic}', "");
Expect(0, 66303, '\p{Blk=--old-italic}', "");
Expect(1, 66303, '\p{^Blk=--old-italic}', "");
Expect(1, 66303, '\P{Blk=--old-italic}', "");
Expect(0, 66303, '\P{^Blk=--old-italic}', "");
Error('\p{Is_Block=	_Old	ITALIC/a/}');
Error('\P{Is_Block=	_Old	ITALIC/a/}');
Expect(1, 66351, '\p{Is_Block=olditalic}', "");
Expect(0, 66351, '\p{^Is_Block=olditalic}', "");
Expect(0, 66351, '\P{Is_Block=olditalic}', "");
Expect(1, 66351, '\P{^Is_Block=olditalic}', "");
Expect(0, 66303, '\p{Is_Block=olditalic}', "");
Expect(1, 66303, '\p{^Is_Block=olditalic}', "");
Expect(1, 66303, '\P{Is_Block=olditalic}', "");
Expect(0, 66303, '\P{^Is_Block=olditalic}', "");
Expect(1, 66351, '\p{Is_Block= Old_ITALIC}', "");
Expect(0, 66351, '\p{^Is_Block= Old_ITALIC}', "");
Expect(0, 66351, '\P{Is_Block= Old_ITALIC}', "");
Expect(1, 66351, '\P{^Is_Block= Old_ITALIC}', "");
Expect(0, 66303, '\p{Is_Block= Old_ITALIC}', "");
Expect(1, 66303, '\p{^Is_Block= Old_ITALIC}', "");
Expect(1, 66303, '\P{Is_Block= Old_ITALIC}', "");
Expect(0, 66303, '\P{^Is_Block= Old_ITALIC}', "");
Error('\p{Is_Blk=	 old:=Italic}');
Error('\P{Is_Blk=	 old:=Italic}');
Expect(1, 66351, '\p{Is_Blk:   olditalic}', "");
Expect(0, 66351, '\p{^Is_Blk:   olditalic}', "");
Expect(0, 66351, '\P{Is_Blk:   olditalic}', "");
Expect(1, 66351, '\P{^Is_Blk:   olditalic}', "");
Expect(0, 66303, '\p{Is_Blk:   olditalic}', "");
Expect(1, 66303, '\p{^Is_Blk:   olditalic}', "");
Expect(1, 66303, '\P{Is_Blk:   olditalic}', "");
Expect(0, 66303, '\P{^Is_Blk:   olditalic}', "");
Expect(1, 66351, '\p{Is_Blk= -Old-italic}', "");
Expect(0, 66351, '\p{^Is_Blk= -Old-italic}', "");
Expect(0, 66351, '\P{Is_Blk= -Old-italic}', "");
Expect(1, 66351, '\P{^Is_Blk= -Old-italic}', "");
Expect(0, 66303, '\p{Is_Blk= -Old-italic}', "");
Expect(1, 66303, '\p{^Is_Blk= -Old-italic}', "");
Expect(1, 66303, '\P{Is_Blk= -Old-italic}', "");
Expect(0, 66303, '\P{^Is_Blk= -Old-italic}', "");
Error('\p{Block=  Hangul SYLLABLES:=}');
Error('\P{Block=  Hangul SYLLABLES:=}');
Expect(1, 55215, '\p{Block=hangulsyllables}', "");
Expect(0, 55215, '\p{^Block=hangulsyllables}', "");
Expect(0, 55215, '\P{Block=hangulsyllables}', "");
Expect(1, 55215, '\P{^Block=hangulsyllables}', "");
Expect(0, 44031, '\p{Block=hangulsyllables}', "");
Expect(1, 44031, '\p{^Block=hangulsyllables}', "");
Expect(1, 44031, '\P{Block=hangulsyllables}', "");
Expect(0, 44031, '\P{^Block=hangulsyllables}', "");
Expect(1, 55215, '\p{Block=Hangul_Syllables}', "");
Expect(0, 55215, '\p{^Block=Hangul_Syllables}', "");
Expect(0, 55215, '\P{Block=Hangul_Syllables}', "");
Expect(1, 55215, '\P{^Block=Hangul_Syllables}', "");
Expect(0, 44031, '\p{Block=Hangul_Syllables}', "");
Expect(1, 44031, '\p{^Block=Hangul_Syllables}', "");
Expect(1, 44031, '\P{Block=Hangul_Syllables}', "");
Expect(0, 44031, '\P{^Block=Hangul_Syllables}', "");
Error('\p{Blk:/a/_-Hangulsyllables}');
Error('\P{Blk:/a/_-Hangulsyllables}');
Expect(1, 55215, '\p{Blk=hangulsyllables}', "");
Expect(0, 55215, '\p{^Blk=hangulsyllables}', "");
Expect(0, 55215, '\P{Blk=hangulsyllables}', "");
Expect(1, 55215, '\P{^Blk=hangulsyllables}', "");
Expect(0, 44031, '\p{Blk=hangulsyllables}', "");
Expect(1, 44031, '\p{^Blk=hangulsyllables}', "");
Expect(1, 44031, '\P{Blk=hangulsyllables}', "");
Expect(0, 44031, '\P{^Blk=hangulsyllables}', "");
Expect(1, 55215, '\p{Blk=	-HANGUL-Syllables}', "");
Expect(0, 55215, '\p{^Blk=	-HANGUL-Syllables}', "");
Expect(0, 55215, '\P{Blk=	-HANGUL-Syllables}', "");
Expect(1, 55215, '\P{^Blk=	-HANGUL-Syllables}', "");
Expect(0, 44031, '\p{Blk=	-HANGUL-Syllables}', "");
Expect(1, 44031, '\p{^Blk=	-HANGUL-Syllables}', "");
Expect(1, 44031, '\P{Blk=	-HANGUL-Syllables}', "");
Expect(0, 44031, '\P{^Blk=	-HANGUL-Syllables}', "");
Error('\p{Is_Block=:=	-HangulSyllables}');
Error('\P{Is_Block=:=	-HangulSyllables}');
Expect(1, 55215, '\p{Is_Block=hangulsyllables}', "");
Expect(0, 55215, '\p{^Is_Block=hangulsyllables}', "");
Expect(0, 55215, '\P{Is_Block=hangulsyllables}', "");
Expect(1, 55215, '\P{^Is_Block=hangulsyllables}', "");
Expect(0, 44031, '\p{Is_Block=hangulsyllables}', "");
Expect(1, 44031, '\p{^Is_Block=hangulsyllables}', "");
Expect(1, 44031, '\P{Is_Block=hangulsyllables}', "");
Expect(0, 44031, '\P{^Is_Block=hangulsyllables}', "");
Expect(1, 55215, '\p{Is_Block:			hangul syllables}', "");
Expect(0, 55215, '\p{^Is_Block:			hangul syllables}', "");
Expect(0, 55215, '\P{Is_Block:			hangul syllables}', "");
Expect(1, 55215, '\P{^Is_Block:			hangul syllables}', "");
Expect(0, 44031, '\p{Is_Block:			hangul syllables}', "");
Expect(1, 44031, '\p{^Is_Block:			hangul syllables}', "");
Expect(1, 44031, '\P{Is_Block:			hangul syllables}', "");
Expect(0, 44031, '\P{^Is_Block:			hangul syllables}', "");
Error('\p{Is_Blk=:= -HANGULSYLLABLES}');
Error('\P{Is_Blk=:= -HANGULSYLLABLES}');
Expect(1, 55215, '\p{Is_Blk=hangulsyllables}', "");
Expect(0, 55215, '\p{^Is_Blk=hangulsyllables}', "");
Expect(0, 55215, '\P{Is_Blk=hangulsyllables}', "");
Expect(1, 55215, '\P{^Is_Blk=hangulsyllables}', "");
Expect(0, 44031, '\p{Is_Blk=hangulsyllables}', "");
Expect(1, 44031, '\p{^Is_Blk=hangulsyllables}', "");
Expect(1, 44031, '\P{Is_Blk=hangulsyllables}', "");
Expect(0, 44031, '\P{^Is_Blk=hangulsyllables}', "");
Expect(1, 55215, '\p{Is_Blk:   		HANGUL	Syllables}', "");
Expect(0, 55215, '\p{^Is_Blk:   		HANGUL	Syllables}', "");
Expect(0, 55215, '\P{Is_Blk:   		HANGUL	Syllables}', "");
Expect(1, 55215, '\P{^Is_Blk:   		HANGUL	Syllables}', "");
Expect(0, 44031, '\p{Is_Blk:   		HANGUL	Syllables}', "");
Expect(1, 44031, '\p{^Is_Blk:   		HANGUL	Syllables}', "");
Expect(1, 44031, '\P{Is_Blk:   		HANGUL	Syllables}', "");
Expect(0, 44031, '\P{^Is_Blk:   		HANGUL	Syllables}', "");
Error('\p{Block=_ YIJING_HexagramSymbols:=}');
Error('\P{Block=_ YIJING_HexagramSymbols:=}');
Expect(1, 19967, '\p{Block=yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^Block=yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{Block=yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^Block=yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{Block=yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^Block=yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{Block=yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^Block=yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{Block:-_Yijing Hexagram	symbols}', "");
Expect(0, 19967, '\p{^Block:-_Yijing Hexagram	symbols}', "");
Expect(0, 19967, '\P{Block:-_Yijing Hexagram	symbols}', "");
Expect(1, 19967, '\P{^Block:-_Yijing Hexagram	symbols}', "");
Expect(0, 19903, '\p{Block:-_Yijing Hexagram	symbols}', "");
Expect(1, 19903, '\p{^Block:-_Yijing Hexagram	symbols}', "");
Expect(1, 19903, '\P{Block:-_Yijing Hexagram	symbols}', "");
Expect(0, 19903, '\P{^Block:-_Yijing Hexagram	symbols}', "");
Error('\p{Blk=/a/_-Yijing Hexagram	SYMBOLS}');
Error('\P{Blk=/a/_-Yijing Hexagram	SYMBOLS}');
Expect(1, 19967, '\p{Blk=yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^Blk=yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{Blk=yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^Blk=yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{Blk=yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^Blk=yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{Blk=yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^Blk=yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{Blk=	 yijing hexagram-Symbols}', "");
Expect(0, 19967, '\p{^Blk=	 yijing hexagram-Symbols}', "");
Expect(0, 19967, '\P{Blk=	 yijing hexagram-Symbols}', "");
Expect(1, 19967, '\P{^Blk=	 yijing hexagram-Symbols}', "");
Expect(0, 19903, '\p{Blk=	 yijing hexagram-Symbols}', "");
Expect(1, 19903, '\p{^Blk=	 yijing hexagram-Symbols}', "");
Expect(1, 19903, '\P{Blk=	 yijing hexagram-Symbols}', "");
Expect(0, 19903, '\P{^Blk=	 yijing hexagram-Symbols}', "");
Error('\p{Is_Block=:= YIJING_Hexagram SYMBOLS}');
Error('\P{Is_Block=:= YIJING_Hexagram SYMBOLS}');
Expect(1, 19967, '\p{Is_Block=yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^Is_Block=yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{Is_Block=yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^Is_Block=yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{Is_Block=yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^Is_Block=yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{Is_Block=yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^Is_Block=yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{Is_Block:YIJING HexagramSymbols}', "");
Expect(0, 19967, '\p{^Is_Block:YIJING HexagramSymbols}', "");
Expect(0, 19967, '\P{Is_Block:YIJING HexagramSymbols}', "");
Expect(1, 19967, '\P{^Is_Block:YIJING HexagramSymbols}', "");
Expect(0, 19903, '\p{Is_Block:YIJING HexagramSymbols}', "");
Expect(1, 19903, '\p{^Is_Block:YIJING HexagramSymbols}', "");
Expect(1, 19903, '\P{Is_Block:YIJING HexagramSymbols}', "");
Expect(0, 19903, '\P{^Is_Block:YIJING HexagramSymbols}', "");
Error('\p{Is_Blk=		Yijing:=hexagram	SYMBOLS}');
Error('\P{Is_Blk=		Yijing:=hexagram	SYMBOLS}');
Expect(1, 19967, '\p{Is_Blk=yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^Is_Blk=yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{Is_Blk=yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^Is_Blk=yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{Is_Blk=yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^Is_Blk=yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{Is_Blk=yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^Is_Blk=yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{Is_Blk:	Yijing-Hexagram-Symbols}', "");
Expect(0, 19967, '\p{^Is_Blk:	Yijing-Hexagram-Symbols}', "");
Expect(0, 19967, '\P{Is_Blk:	Yijing-Hexagram-Symbols}', "");
Expect(1, 19967, '\P{^Is_Blk:	Yijing-Hexagram-Symbols}', "");
Expect(0, 19903, '\p{Is_Blk:	Yijing-Hexagram-Symbols}', "");
Expect(1, 19903, '\p{^Is_Blk:	Yijing-Hexagram-Symbols}', "");
Expect(1, 19903, '\P{Is_Blk:	Yijing-Hexagram-Symbols}', "");
Expect(0, 19903, '\P{^Is_Blk:	Yijing-Hexagram-Symbols}', "");
Error('\p{Block:   :=_Phaistos	DISC}');
Error('\P{Block:   :=_Phaistos	DISC}');
Expect(1, 66047, '\p{Block=phaistosdisc}', "");
Expect(0, 66047, '\p{^Block=phaistosdisc}', "");
Expect(0, 66047, '\P{Block=phaistosdisc}', "");
Expect(1, 66047, '\P{^Block=phaistosdisc}', "");
Expect(0, 65999, '\p{Block=phaistosdisc}', "");
Expect(1, 65999, '\p{^Block=phaistosdisc}', "");
Expect(1, 65999, '\P{Block=phaistosdisc}', "");
Expect(0, 65999, '\P{^Block=phaistosdisc}', "");
Expect(1, 66047, '\p{Block=Phaistosdisc}', "");
Expect(0, 66047, '\p{^Block=Phaistosdisc}', "");
Expect(0, 66047, '\P{Block=Phaistosdisc}', "");
Expect(1, 66047, '\P{^Block=Phaistosdisc}', "");
Expect(0, 65999, '\p{Block=Phaistosdisc}', "");
Expect(1, 65999, '\p{^Block=Phaistosdisc}', "");
Expect(1, 65999, '\P{Block=Phaistosdisc}', "");
Expect(0, 65999, '\P{^Block=Phaistosdisc}', "");
Error('\p{Blk:_	Phaistos	disc:=}');
Error('\P{Blk:_	Phaistos	disc:=}');
Expect(1, 66047, '\p{Blk=phaistosdisc}', "");
Expect(0, 66047, '\p{^Blk=phaistosdisc}', "");
Expect(0, 66047, '\P{Blk=phaistosdisc}', "");
Expect(1, 66047, '\P{^Blk=phaistosdisc}', "");
Expect(0, 65999, '\p{Blk=phaistosdisc}', "");
Expect(1, 65999, '\p{^Blk=phaistosdisc}', "");
Expect(1, 65999, '\P{Blk=phaistosdisc}', "");
Expect(0, 65999, '\P{^Blk=phaistosdisc}', "");
Expect(1, 66047, '\p{Blk=  Phaistos-Disc}', "");
Expect(0, 66047, '\p{^Blk=  Phaistos-Disc}', "");
Expect(0, 66047, '\P{Blk=  Phaistos-Disc}', "");
Expect(1, 66047, '\P{^Blk=  Phaistos-Disc}', "");
Expect(0, 65999, '\p{Blk=  Phaistos-Disc}', "");
Expect(1, 65999, '\p{^Blk=  Phaistos-Disc}', "");
Expect(1, 65999, '\P{Blk=  Phaistos-Disc}', "");
Expect(0, 65999, '\P{^Blk=  Phaistos-Disc}', "");
Error('\p{Is_Block=-phaistos:=Disc}');
Error('\P{Is_Block=-phaistos:=Disc}');
Expect(1, 66047, '\p{Is_Block=phaistosdisc}', "");
Expect(0, 66047, '\p{^Is_Block=phaistosdisc}', "");
Expect(0, 66047, '\P{Is_Block=phaistosdisc}', "");
Expect(1, 66047, '\P{^Is_Block=phaistosdisc}', "");
Expect(0, 65999, '\p{Is_Block=phaistosdisc}', "");
Expect(1, 65999, '\p{^Is_Block=phaistosdisc}', "");
Expect(1, 65999, '\P{Is_Block=phaistosdisc}', "");
Expect(0, 65999, '\P{^Is_Block=phaistosdisc}', "");
Expect(1, 66047, '\p{Is_Block=_	Phaistos-Disc}', "");
Expect(0, 66047, '\p{^Is_Block=_	Phaistos-Disc}', "");
Expect(0, 66047, '\P{Is_Block=_	Phaistos-Disc}', "");
Expect(1, 66047, '\P{^Is_Block=_	Phaistos-Disc}', "");
Expect(0, 65999, '\p{Is_Block=_	Phaistos-Disc}', "");
Expect(1, 65999, '\p{^Is_Block=_	Phaistos-Disc}', "");
Expect(1, 65999, '\P{Is_Block=_	Phaistos-Disc}', "");
Expect(0, 65999, '\P{^Is_Block=_	Phaistos-Disc}', "");
Error('\p{Is_Blk=  Phaistos-DISC:=}');
Error('\P{Is_Blk=  Phaistos-DISC:=}');
Expect(1, 66047, '\p{Is_Blk=phaistosdisc}', "");
Expect(0, 66047, '\p{^Is_Blk=phaistosdisc}', "");
Expect(0, 66047, '\P{Is_Blk=phaistosdisc}', "");
Expect(1, 66047, '\P{^Is_Blk=phaistosdisc}', "");
Expect(0, 65999, '\p{Is_Blk=phaistosdisc}', "");
Expect(1, 65999, '\p{^Is_Blk=phaistosdisc}', "");
Expect(1, 65999, '\P{Is_Blk=phaistosdisc}', "");
Expect(0, 65999, '\P{^Is_Blk=phaistosdisc}', "");
Expect(1, 66047, '\p{Is_Blk=_	Phaistos_Disc}', "");
Expect(0, 66047, '\p{^Is_Blk=_	Phaistos_Disc}', "");
Expect(0, 66047, '\P{Is_Blk=_	Phaistos_Disc}', "");
Expect(1, 66047, '\P{^Is_Blk=_	Phaistos_Disc}', "");
Expect(0, 65999, '\p{Is_Blk=_	Phaistos_Disc}', "");
Expect(1, 65999, '\p{^Is_Blk=_	Phaistos_Disc}', "");
Expect(1, 65999, '\P{Is_Blk=_	Phaistos_Disc}', "");
Expect(0, 65999, '\P{^Is_Blk=_	Phaistos_Disc}', "");
Error('\p{Block=-/a/Small-Form	Variants}');
Error('\P{Block=-/a/Small-Form	Variants}');
Expect(1, 65135, '\p{Block=smallformvariants}', "");
Expect(0, 65135, '\p{^Block=smallformvariants}', "");
Expect(0, 65135, '\P{Block=smallformvariants}', "");
Expect(1, 65135, '\P{^Block=smallformvariants}', "");
Expect(0, 65103, '\p{Block=smallformvariants}', "");
Expect(1, 65103, '\p{^Block=smallformvariants}', "");
Expect(1, 65103, '\P{Block=smallformvariants}', "");
Expect(0, 65103, '\P{^Block=smallformvariants}', "");
Expect(1, 65135, '\p{Block=Small Form_Variants}', "");
Expect(0, 65135, '\p{^Block=Small Form_Variants}', "");
Expect(0, 65135, '\P{Block=Small Form_Variants}', "");
Expect(1, 65135, '\P{^Block=Small Form_Variants}', "");
Expect(0, 65103, '\p{Block=Small Form_Variants}', "");
Expect(1, 65103, '\p{^Block=Small Form_Variants}', "");
Expect(1, 65103, '\P{Block=Small Form_Variants}', "");
Expect(0, 65103, '\P{^Block=Small Form_Variants}', "");
Error('\p{Blk=-/a/Small	Form variants}');
Error('\P{Blk=-/a/Small	Form variants}');
Expect(1, 65135, '\p{Blk=smallformvariants}', "");
Expect(0, 65135, '\p{^Blk=smallformvariants}', "");
Expect(0, 65135, '\P{Blk=smallformvariants}', "");
Expect(1, 65135, '\P{^Blk=smallformvariants}', "");
Expect(0, 65103, '\p{Blk=smallformvariants}', "");
Expect(1, 65103, '\p{^Blk=smallformvariants}', "");
Expect(1, 65103, '\P{Blk=smallformvariants}', "");
Expect(0, 65103, '\P{^Blk=smallformvariants}', "");
Expect(1, 65135, '\p{Blk= _SMALL-Form VARIANTS}', "");
Expect(0, 65135, '\p{^Blk= _SMALL-Form VARIANTS}', "");
Expect(0, 65135, '\P{Blk= _SMALL-Form VARIANTS}', "");
Expect(1, 65135, '\P{^Blk= _SMALL-Form VARIANTS}', "");
Expect(0, 65103, '\p{Blk= _SMALL-Form VARIANTS}', "");
Expect(1, 65103, '\p{^Blk= _SMALL-Form VARIANTS}', "");
Expect(1, 65103, '\P{Blk= _SMALL-Form VARIANTS}', "");
Expect(0, 65103, '\P{^Blk= _SMALL-Form VARIANTS}', "");
Error('\p{Is_Block=- Small:=Form VARIANTS}');
Error('\P{Is_Block=- Small:=Form VARIANTS}');
Expect(1, 65135, '\p{Is_Block=smallformvariants}', "");
Expect(0, 65135, '\p{^Is_Block=smallformvariants}', "");
Expect(0, 65135, '\P{Is_Block=smallformvariants}', "");
Expect(1, 65135, '\P{^Is_Block=smallformvariants}', "");
Expect(0, 65103, '\p{Is_Block=smallformvariants}', "");
Expect(1, 65103, '\p{^Is_Block=smallformvariants}', "");
Expect(1, 65103, '\P{Is_Block=smallformvariants}', "");
Expect(0, 65103, '\P{^Is_Block=smallformvariants}', "");
Expect(1, 65135, '\p{Is_Block=_-small_Form Variants}', "");
Expect(0, 65135, '\p{^Is_Block=_-small_Form Variants}', "");
Expect(0, 65135, '\P{Is_Block=_-small_Form Variants}', "");
Expect(1, 65135, '\P{^Is_Block=_-small_Form Variants}', "");
Expect(0, 65103, '\p{Is_Block=_-small_Form Variants}', "");
Expect(1, 65103, '\p{^Is_Block=_-small_Form Variants}', "");
Expect(1, 65103, '\P{Is_Block=_-small_Form Variants}', "");
Expect(0, 65103, '\P{^Is_Block=_-small_Form Variants}', "");
Error('\p{Is_Blk=SmallForm/a/Variants}');
Error('\P{Is_Blk=SmallForm/a/Variants}');
Expect(1, 65135, '\p{Is_Blk=smallformvariants}', "");
Expect(0, 65135, '\p{^Is_Blk=smallformvariants}', "");
Expect(0, 65135, '\P{Is_Blk=smallformvariants}', "");
Expect(1, 65135, '\P{^Is_Blk=smallformvariants}', "");
Expect(0, 65103, '\p{Is_Blk=smallformvariants}', "");
Expect(1, 65103, '\p{^Is_Blk=smallformvariants}', "");
Expect(1, 65103, '\P{Is_Blk=smallformvariants}', "");
Expect(0, 65103, '\P{^Is_Blk=smallformvariants}', "");
Expect(1, 65135, '\p{Is_Blk=-SmallForm-Variants}', "");
Expect(0, 65135, '\p{^Is_Blk=-SmallForm-Variants}', "");
Expect(0, 65135, '\P{Is_Blk=-SmallForm-Variants}', "");
Expect(1, 65135, '\P{^Is_Blk=-SmallForm-Variants}', "");
Expect(0, 65103, '\p{Is_Blk=-SmallForm-Variants}', "");
Expect(1, 65103, '\p{^Is_Blk=-SmallForm-Variants}', "");
Expect(1, 65103, '\P{Is_Blk=-SmallForm-Variants}', "");
Expect(0, 65103, '\P{^Is_Blk=-SmallForm-Variants}', "");
Error('\p{Block=_	EGYPTIAN-Hieroglyphs:=}');
Error('\P{Block=_	EGYPTIAN-Hieroglyphs:=}');
Expect(1, 78895, '\p{Block=egyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^Block=egyptianhieroglyphs}', "");
Expect(0, 78895, '\P{Block=egyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^Block=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Block=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Block=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Block=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Block=egyptianhieroglyphs}', "");
Expect(1, 78895, '\p{Block= -egyptian HIEROGLYPHS}', "");
Expect(0, 78895, '\p{^Block= -egyptian HIEROGLYPHS}', "");
Expect(0, 78895, '\P{Block= -egyptian HIEROGLYPHS}', "");
Expect(1, 78895, '\P{^Block= -egyptian HIEROGLYPHS}', "");
Expect(0, 77823, '\p{Block= -egyptian HIEROGLYPHS}', "");
Expect(1, 77823, '\p{^Block= -egyptian HIEROGLYPHS}', "");
Expect(1, 77823, '\P{Block= -egyptian HIEROGLYPHS}', "");
Expect(0, 77823, '\P{^Block= -egyptian HIEROGLYPHS}', "");
Error('\p{Blk=:=	-egyptian-Hieroglyphs}');
Error('\P{Blk=:=	-egyptian-Hieroglyphs}');
Expect(1, 78895, '\p{Blk=egyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^Blk=egyptianhieroglyphs}', "");
Expect(0, 78895, '\P{Blk=egyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^Blk=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Blk=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Blk=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Blk=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Blk=egyptianhieroglyphs}', "");
Expect(1, 78895, '\p{Blk=	Egyptian Hieroglyphs}', "");
Expect(0, 78895, '\p{^Blk=	Egyptian Hieroglyphs}', "");
Expect(0, 78895, '\P{Blk=	Egyptian Hieroglyphs}', "");
Expect(1, 78895, '\P{^Blk=	Egyptian Hieroglyphs}', "");
Expect(0, 77823, '\p{Blk=	Egyptian Hieroglyphs}', "");
Expect(1, 77823, '\p{^Blk=	Egyptian Hieroglyphs}', "");
Expect(1, 77823, '\P{Blk=	Egyptian Hieroglyphs}', "");
Expect(0, 77823, '\P{^Blk=	Egyptian Hieroglyphs}', "");
Error('\p{Is_Block=-	Egyptian_hieroglyphs/a/}');
Error('\P{Is_Block=-	Egyptian_hieroglyphs/a/}');
Expect(1, 78895, '\p{Is_Block=egyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^Is_Block=egyptianhieroglyphs}', "");
Expect(0, 78895, '\P{Is_Block=egyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^Is_Block=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Is_Block=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Block=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Is_Block=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Block=egyptianhieroglyphs}', "");
Expect(1, 78895, '\p{Is_Block= EGYPTIANHieroglyphs}', "");
Expect(0, 78895, '\p{^Is_Block= EGYPTIANHieroglyphs}', "");
Expect(0, 78895, '\P{Is_Block= EGYPTIANHieroglyphs}', "");
Expect(1, 78895, '\P{^Is_Block= EGYPTIANHieroglyphs}', "");
Expect(0, 77823, '\p{Is_Block= EGYPTIANHieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Block= EGYPTIANHieroglyphs}', "");
Expect(1, 77823, '\P{Is_Block= EGYPTIANHieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Block= EGYPTIANHieroglyphs}', "");
Error('\p{Is_Blk=/a/_Egyptian	HIEROGLYPHS}');
Error('\P{Is_Blk=/a/_Egyptian	HIEROGLYPHS}');
Expect(1, 78895, '\p{Is_Blk=egyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^Is_Blk=egyptianhieroglyphs}', "");
Expect(0, 78895, '\P{Is_Blk=egyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^Is_Blk=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Is_Blk=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Blk=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Is_Blk=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Blk=egyptianhieroglyphs}', "");
Expect(1, 78895, '\p{Is_Blk=--EGYPTIAN	Hieroglyphs}', "");
Expect(0, 78895, '\p{^Is_Blk=--EGYPTIAN	Hieroglyphs}', "");
Expect(0, 78895, '\P{Is_Blk=--EGYPTIAN	Hieroglyphs}', "");
Expect(1, 78895, '\P{^Is_Blk=--EGYPTIAN	Hieroglyphs}', "");
Expect(0, 77823, '\p{Is_Blk=--EGYPTIAN	Hieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Blk=--EGYPTIAN	Hieroglyphs}', "");
Expect(1, 77823, '\P{Is_Blk=--EGYPTIAN	Hieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Blk=--EGYPTIAN	Hieroglyphs}', "");
Error('\p{Block=_Latin Extended/a/D}');
Error('\P{Block=_Latin Extended/a/D}');
Expect(1, 43007, '\p{Block:	latinextendedd}', "");
Expect(0, 43007, '\p{^Block:	latinextendedd}', "");
Expect(0, 43007, '\P{Block:	latinextendedd}', "");
Expect(1, 43007, '\P{^Block:	latinextendedd}', "");
Expect(0, 42783, '\p{Block:	latinextendedd}', "");
Expect(1, 42783, '\p{^Block:	latinextendedd}', "");
Expect(1, 42783, '\P{Block:	latinextendedd}', "");
Expect(0, 42783, '\P{^Block:	latinextendedd}', "");
Expect(1, 43007, '\p{Block=_	Latin Extended-d}', "");
Expect(0, 43007, '\p{^Block=_	Latin Extended-d}', "");
Expect(0, 43007, '\P{Block=_	Latin Extended-d}', "");
Expect(1, 43007, '\P{^Block=_	Latin Extended-d}', "");
Expect(0, 42783, '\p{Block=_	Latin Extended-d}', "");
Expect(1, 42783, '\p{^Block=_	Latin Extended-d}', "");
Expect(1, 42783, '\P{Block=_	Latin Extended-d}', "");
Expect(0, 42783, '\P{^Block=_	Latin Extended-d}', "");
Error('\p{Blk=- Latin/a/EXTENDED	d}');
Error('\P{Blk=- Latin/a/EXTENDED	d}');
Expect(1, 43007, '\p{Blk:   latinextendedd}', "");
Expect(0, 43007, '\p{^Blk:   latinextendedd}', "");
Expect(0, 43007, '\P{Blk:   latinextendedd}', "");
Expect(1, 43007, '\P{^Blk:   latinextendedd}', "");
Expect(0, 42783, '\p{Blk:   latinextendedd}', "");
Expect(1, 42783, '\p{^Blk:   latinextendedd}', "");
Expect(1, 42783, '\P{Blk:   latinextendedd}', "");
Expect(0, 42783, '\P{^Blk:   latinextendedd}', "");
Expect(1, 43007, '\p{Blk=_-latin_ExtendedD}', "");
Expect(0, 43007, '\p{^Blk=_-latin_ExtendedD}', "");
Expect(0, 43007, '\P{Blk=_-latin_ExtendedD}', "");
Expect(1, 43007, '\P{^Blk=_-latin_ExtendedD}', "");
Expect(0, 42783, '\p{Blk=_-latin_ExtendedD}', "");
Expect(1, 42783, '\p{^Blk=_-latin_ExtendedD}', "");
Expect(1, 42783, '\P{Blk=_-latin_ExtendedD}', "");
Expect(0, 42783, '\P{^Blk=_-latin_ExtendedD}', "");
Error('\p{Is_Block=_Latin Extended:=D}');
Error('\P{Is_Block=_Latin Extended:=D}');
Expect(1, 43007, '\p{Is_Block=latinextendedd}', "");
Expect(0, 43007, '\p{^Is_Block=latinextendedd}', "");
Expect(0, 43007, '\P{Is_Block=latinextendedd}', "");
Expect(1, 43007, '\P{^Is_Block=latinextendedd}', "");
Expect(0, 42783, '\p{Is_Block=latinextendedd}', "");
Expect(1, 42783, '\p{^Is_Block=latinextendedd}', "");
Expect(1, 42783, '\P{Is_Block=latinextendedd}', "");
Expect(0, 42783, '\P{^Is_Block=latinextendedd}', "");
Expect(1, 43007, '\p{Is_Block=__Latin	extended	D}', "");
Expect(0, 43007, '\p{^Is_Block=__Latin	extended	D}', "");
Expect(0, 43007, '\P{Is_Block=__Latin	extended	D}', "");
Expect(1, 43007, '\P{^Is_Block=__Latin	extended	D}', "");
Expect(0, 42783, '\p{Is_Block=__Latin	extended	D}', "");
Expect(1, 42783, '\p{^Is_Block=__Latin	extended	D}', "");
Expect(1, 42783, '\P{Is_Block=__Latin	extended	D}', "");
Expect(0, 42783, '\P{^Is_Block=__Latin	extended	D}', "");
Error('\p{Is_Blk=	/a/LATINextended D}');
Error('\P{Is_Blk=	/a/LATINextended D}');
Expect(1, 43007, '\p{Is_Blk=latinextendedd}', "");
Expect(0, 43007, '\p{^Is_Blk=latinextendedd}', "");
Expect(0, 43007, '\P{Is_Blk=latinextendedd}', "");
Expect(1, 43007, '\P{^Is_Blk=latinextendedd}', "");
Expect(0, 42783, '\p{Is_Blk=latinextendedd}', "");
Expect(1, 42783, '\p{^Is_Blk=latinextendedd}', "");
Expect(1, 42783, '\P{Is_Blk=latinextendedd}', "");
Expect(0, 42783, '\P{^Is_Blk=latinextendedd}', "");
Expect(1, 43007, '\p{Is_Blk=_ latin_extended D}', "");
Expect(0, 43007, '\p{^Is_Blk=_ latin_extended D}', "");
Expect(0, 43007, '\P{Is_Blk=_ latin_extended D}', "");
Expect(1, 43007, '\P{^Is_Blk=_ latin_extended D}', "");
Expect(0, 42783, '\p{Is_Blk=_ latin_extended D}', "");
Expect(1, 42783, '\p{^Is_Blk=_ latin_extended D}', "");
Expect(1, 42783, '\P{Is_Blk=_ latin_extended D}', "");
Expect(0, 42783, '\P{^Is_Blk=_ latin_extended D}', "");
Error('\p{Block=-	Alphabetic/a/PRESENTATIONForms}');
Error('\P{Block=-	Alphabetic/a/PRESENTATIONForms}');
Expect(1, 64335, '\p{Block:   alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^Block:   alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{Block:   alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^Block:   alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{Block:   alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^Block:   alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{Block:   alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^Block:   alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{Block=	_ALPHABETIC-presentationforms}', "");
Expect(0, 64335, '\p{^Block=	_ALPHABETIC-presentationforms}', "");
Expect(0, 64335, '\P{Block=	_ALPHABETIC-presentationforms}', "");
Expect(1, 64335, '\P{^Block=	_ALPHABETIC-presentationforms}', "");
Expect(0, 64255, '\p{Block=	_ALPHABETIC-presentationforms}', "");
Expect(1, 64255, '\p{^Block=	_ALPHABETIC-presentationforms}', "");
Expect(1, 64255, '\P{Block=	_ALPHABETIC-presentationforms}', "");
Expect(0, 64255, '\P{^Block=	_ALPHABETIC-presentationforms}', "");
Error('\p{Blk=:=	_ALPHABETICPRESENTATION_FORMS}');
Error('\P{Blk=:=	_ALPHABETICPRESENTATION_FORMS}');
Expect(1, 64335, '\p{Blk=alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^Blk=alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{Blk=alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^Blk=alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{Blk=alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^Blk=alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{Blk=alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^Blk=alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{Blk=-AlphabeticPresentation FORMS}', "");
Expect(0, 64335, '\p{^Blk=-AlphabeticPresentation FORMS}', "");
Expect(0, 64335, '\P{Blk=-AlphabeticPresentation FORMS}', "");
Expect(1, 64335, '\P{^Blk=-AlphabeticPresentation FORMS}', "");
Expect(0, 64255, '\p{Blk=-AlphabeticPresentation FORMS}', "");
Expect(1, 64255, '\p{^Blk=-AlphabeticPresentation FORMS}', "");
Expect(1, 64255, '\P{Blk=-AlphabeticPresentation FORMS}', "");
Expect(0, 64255, '\P{^Blk=-AlphabeticPresentation FORMS}', "");
Error('\p{Is_Block=:=_	ALPHABETIC presentation-FORMS}');
Error('\P{Is_Block=:=_	ALPHABETIC presentation-FORMS}');
Expect(1, 64335, '\p{Is_Block=alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^Is_Block=alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{Is_Block=alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^Is_Block=alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{Is_Block=alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^Is_Block=alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{Is_Block=alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^Is_Block=alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{Is_Block=- alphabeticPresentation	Forms}', "");
Expect(0, 64335, '\p{^Is_Block=- alphabeticPresentation	Forms}', "");
Expect(0, 64335, '\P{Is_Block=- alphabeticPresentation	Forms}', "");
Expect(1, 64335, '\P{^Is_Block=- alphabeticPresentation	Forms}', "");
Expect(0, 64255, '\p{Is_Block=- alphabeticPresentation	Forms}', "");
Expect(1, 64255, '\p{^Is_Block=- alphabeticPresentation	Forms}', "");
Expect(1, 64255, '\P{Is_Block=- alphabeticPresentation	Forms}', "");
Expect(0, 64255, '\P{^Is_Block=- alphabeticPresentation	Forms}', "");
Error('\p{Is_Blk=_Alphabetic_Presentation	Forms/a/}');
Error('\P{Is_Blk=_Alphabetic_Presentation	Forms/a/}');
Expect(1, 64335, '\p{Is_Blk=alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^Is_Blk=alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{Is_Blk=alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^Is_Blk=alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{Is_Blk=alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^Is_Blk=alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{Is_Blk=alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^Is_Blk=alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{Is_Blk=_	Alphabetic	PRESENTATION FORMS}', "");
Expect(0, 64335, '\p{^Is_Blk=_	Alphabetic	PRESENTATION FORMS}', "");
Expect(0, 64335, '\P{Is_Blk=_	Alphabetic	PRESENTATION FORMS}', "");
Expect(1, 64335, '\P{^Is_Blk=_	Alphabetic	PRESENTATION FORMS}', "");
Expect(0, 64255, '\p{Is_Blk=_	Alphabetic	PRESENTATION FORMS}', "");
Expect(1, 64255, '\p{^Is_Blk=_	Alphabetic	PRESENTATION FORMS}', "");
Expect(1, 64255, '\P{Is_Blk=_	Alphabetic	PRESENTATION FORMS}', "");
Expect(0, 64255, '\P{^Is_Blk=_	Alphabetic	PRESENTATION FORMS}', "");
Error('\p{Block=_OPTICAL-Character/a/Recognition}');
Error('\P{Block=_OPTICAL-Character/a/Recognition}');
Expect(1, 9311, '\p{Block=opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^Block=opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{Block=opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^Block=opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{Block=opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^Block=opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{Block=opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^Block=opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{Block=__Optical_Character-RECOGNITION}', "");
Expect(0, 9311, '\p{^Block=__Optical_Character-RECOGNITION}', "");
Expect(0, 9311, '\P{Block=__Optical_Character-RECOGNITION}', "");
Expect(1, 9311, '\P{^Block=__Optical_Character-RECOGNITION}', "");
Expect(0, 9279, '\p{Block=__Optical_Character-RECOGNITION}', "");
Expect(1, 9279, '\p{^Block=__Optical_Character-RECOGNITION}', "");
Expect(1, 9279, '\P{Block=__Optical_Character-RECOGNITION}', "");
Expect(0, 9279, '\P{^Block=__Optical_Character-RECOGNITION}', "");
Error('\p{Blk= _optical-CHARACTER/a/RECOGNITION}');
Error('\P{Blk= _optical-CHARACTER/a/RECOGNITION}');
Expect(1, 9311, '\p{Blk=opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^Blk=opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{Blk=opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^Blk=opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{Blk=opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^Blk=opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{Blk=opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^Blk=opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{Blk=__optical character-RECOGNITION}', "");
Expect(0, 9311, '\p{^Blk=__optical character-RECOGNITION}', "");
Expect(0, 9311, '\P{Blk=__optical character-RECOGNITION}', "");
Expect(1, 9311, '\P{^Blk=__optical character-RECOGNITION}', "");
Expect(0, 9279, '\p{Blk=__optical character-RECOGNITION}', "");
Expect(1, 9279, '\p{^Blk=__optical character-RECOGNITION}', "");
Expect(1, 9279, '\P{Blk=__optical character-RECOGNITION}', "");
Expect(0, 9279, '\P{^Blk=__optical character-RECOGNITION}', "");
Error('\p{Is_Block=	:=Optical-CHARACTER_recognition}');
Error('\P{Is_Block=	:=Optical-CHARACTER_recognition}');
Expect(1, 9311, '\p{Is_Block=opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^Is_Block=opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{Is_Block=opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^Is_Block=opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{Is_Block=opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^Is_Block=opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{Is_Block=opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^Is_Block=opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{Is_Block=-OpticalCharacter Recognition}', "");
Expect(0, 9311, '\p{^Is_Block=-OpticalCharacter Recognition}', "");
Expect(0, 9311, '\P{Is_Block=-OpticalCharacter Recognition}', "");
Expect(1, 9311, '\P{^Is_Block=-OpticalCharacter Recognition}', "");
Expect(0, 9279, '\p{Is_Block=-OpticalCharacter Recognition}', "");
Expect(1, 9279, '\p{^Is_Block=-OpticalCharacter Recognition}', "");
Expect(1, 9279, '\P{Is_Block=-OpticalCharacter Recognition}', "");
Expect(0, 9279, '\P{^Is_Block=-OpticalCharacter Recognition}', "");
Error('\p{Is_Blk=	-optical Character/a/recognition}');
Error('\P{Is_Blk=	-optical Character/a/recognition}');
Expect(1, 9311, '\p{Is_Blk=opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^Is_Blk=opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{Is_Blk=opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^Is_Blk=opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{Is_Blk=opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^Is_Blk=opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{Is_Blk=opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^Is_Blk=opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{Is_Blk=  OPTICALCharacter	Recognition}', "");
Expect(0, 9311, '\p{^Is_Blk=  OPTICALCharacter	Recognition}', "");
Expect(0, 9311, '\P{Is_Blk=  OPTICALCharacter	Recognition}', "");
Expect(1, 9311, '\P{^Is_Blk=  OPTICALCharacter	Recognition}', "");
Expect(0, 9279, '\p{Is_Blk=  OPTICALCharacter	Recognition}', "");
Expect(1, 9279, '\p{^Is_Blk=  OPTICALCharacter	Recognition}', "");
Expect(1, 9279, '\P{Is_Blk=  OPTICALCharacter	Recognition}', "");
Expect(0, 9279, '\P{^Is_Blk=  OPTICALCharacter	Recognition}', "");
Error('\p{Block=  CJK Unified/a/IDEOGRAPHS}');
Error('\P{Block=  CJK Unified/a/IDEOGRAPHS}');
Expect(1, 40959, '\p{Block=cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^Block=cjkunifiedideographs}', "");
Expect(0, 40959, '\P{Block=cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^Block=cjkunifiedideographs}', "");
Expect(0, 19967, '\p{Block=cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^Block=cjkunifiedideographs}', "");
Expect(1, 19967, '\P{Block=cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^Block=cjkunifiedideographs}', "");
Expect(1, 40959, '\p{Block=- CJK UNIFIED	ideographs}', "");
Expect(0, 40959, '\p{^Block=- CJK UNIFIED	ideographs}', "");
Expect(0, 40959, '\P{Block=- CJK UNIFIED	ideographs}', "");
Expect(1, 40959, '\P{^Block=- CJK UNIFIED	ideographs}', "");
Expect(0, 19967, '\p{Block=- CJK UNIFIED	ideographs}', "");
Expect(1, 19967, '\p{^Block=- CJK UNIFIED	ideographs}', "");
Expect(1, 19967, '\P{Block=- CJK UNIFIED	ideographs}', "");
Expect(0, 19967, '\P{^Block=- CJK UNIFIED	ideographs}', "");
Error('\p{Blk=-	CJK-Unified:=Ideographs}');
Error('\P{Blk=-	CJK-Unified:=Ideographs}');
Expect(1, 40959, '\p{Blk=cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^Blk=cjkunifiedideographs}', "");
Expect(0, 40959, '\P{Blk=cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^Blk=cjkunifiedideographs}', "");
Expect(0, 19967, '\p{Blk=cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^Blk=cjkunifiedideographs}', "");
Expect(1, 19967, '\P{Blk=cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^Blk=cjkunifiedideographs}', "");
Expect(1, 40959, '\p{Blk=-CJK_Unified_Ideographs}', "");
Expect(0, 40959, '\p{^Blk=-CJK_Unified_Ideographs}', "");
Expect(0, 40959, '\P{Blk=-CJK_Unified_Ideographs}', "");
Expect(1, 40959, '\P{^Blk=-CJK_Unified_Ideographs}', "");
Expect(0, 19967, '\p{Blk=-CJK_Unified_Ideographs}', "");
Expect(1, 19967, '\p{^Blk=-CJK_Unified_Ideographs}', "");
Expect(1, 19967, '\P{Blk=-CJK_Unified_Ideographs}', "");
Expect(0, 19967, '\P{^Blk=-CJK_Unified_Ideographs}', "");
Error('\p{Is_Block= /a/CJK unified_ideographs}');
Error('\P{Is_Block= /a/CJK unified_ideographs}');
Expect(1, 40959, '\p{Is_Block=cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^Is_Block=cjkunifiedideographs}', "");
Expect(0, 40959, '\P{Is_Block=cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^Is_Block=cjkunifiedideographs}', "");
Expect(0, 19967, '\p{Is_Block=cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^Is_Block=cjkunifiedideographs}', "");
Expect(1, 19967, '\P{Is_Block=cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^Is_Block=cjkunifiedideographs}', "");
Expect(1, 40959, '\p{Is_Block=_-cjk_UNIFIED IDEOGRAPHS}', "");
Expect(0, 40959, '\p{^Is_Block=_-cjk_UNIFIED IDEOGRAPHS}', "");
Expect(0, 40959, '\P{Is_Block=_-cjk_UNIFIED IDEOGRAPHS}', "");
Expect(1, 40959, '\P{^Is_Block=_-cjk_UNIFIED IDEOGRAPHS}', "");
Expect(0, 19967, '\p{Is_Block=_-cjk_UNIFIED IDEOGRAPHS}', "");
Expect(1, 19967, '\p{^Is_Block=_-cjk_UNIFIED IDEOGRAPHS}', "");
Expect(1, 19967, '\P{Is_Block=_-cjk_UNIFIED IDEOGRAPHS}', "");
Expect(0, 19967, '\P{^Is_Block=_-cjk_UNIFIED IDEOGRAPHS}', "");
Error('\p{Is_Blk=_	cjkUnified:=IDEOGRAPHS}');
Error('\P{Is_Blk=_	cjkUnified:=IDEOGRAPHS}');
Expect(1, 40959, '\p{Is_Blk:   cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^Is_Blk:   cjkunifiedideographs}', "");
Expect(0, 40959, '\P{Is_Blk:   cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^Is_Blk:   cjkunifiedideographs}', "");
Expect(0, 19967, '\p{Is_Blk:   cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^Is_Blk:   cjkunifiedideographs}', "");
Expect(1, 19967, '\P{Is_Blk:   cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^Is_Blk:   cjkunifiedideographs}', "");
Expect(1, 40959, '\p{Is_Blk= cjk	Unified IDEOGRAPHS}', "");
Expect(0, 40959, '\p{^Is_Blk= cjk	Unified IDEOGRAPHS}', "");
Expect(0, 40959, '\P{Is_Blk= cjk	Unified IDEOGRAPHS}', "");
Expect(1, 40959, '\P{^Is_Blk= cjk	Unified IDEOGRAPHS}', "");
Expect(0, 19967, '\p{Is_Blk= cjk	Unified IDEOGRAPHS}', "");
Expect(1, 19967, '\p{^Is_Blk= cjk	Unified IDEOGRAPHS}', "");
Expect(1, 19967, '\P{Is_Blk= cjk	Unified IDEOGRAPHS}', "");
Expect(0, 19967, '\P{^Is_Blk= cjk	Unified IDEOGRAPHS}', "");
Error('\p{Block=	:=ancientSymbols}');
Error('\P{Block=	:=ancientSymbols}');
Expect(1, 65999, '\p{Block=ancientsymbols}', "");
Expect(0, 65999, '\p{^Block=ancientsymbols}', "");
Expect(0, 65999, '\P{Block=ancientsymbols}', "");
Expect(1, 65999, '\P{^Block=ancientsymbols}', "");
Expect(0, 65935, '\p{Block=ancientsymbols}', "");
Expect(1, 65935, '\p{^Block=ancientsymbols}', "");
Expect(1, 65935, '\P{Block=ancientsymbols}', "");
Expect(0, 65935, '\P{^Block=ancientsymbols}', "");
Expect(1, 65999, '\p{Block=_ Ancient Symbols}', "");
Expect(0, 65999, '\p{^Block=_ Ancient Symbols}', "");
Expect(0, 65999, '\P{Block=_ Ancient Symbols}', "");
Expect(1, 65999, '\P{^Block=_ Ancient Symbols}', "");
Expect(0, 65935, '\p{Block=_ Ancient Symbols}', "");
Expect(1, 65935, '\p{^Block=_ Ancient Symbols}', "");
Expect(1, 65935, '\P{Block=_ Ancient Symbols}', "");
Expect(0, 65935, '\P{^Block=_ Ancient Symbols}', "");
Error('\p{Blk=-Ancient_SYMBOLS:=}');
Error('\P{Blk=-Ancient_SYMBOLS:=}');
Expect(1, 65999, '\p{Blk=ancientsymbols}', "");
Expect(0, 65999, '\p{^Blk=ancientsymbols}', "");
Expect(0, 65999, '\P{Blk=ancientsymbols}', "");
Expect(1, 65999, '\P{^Blk=ancientsymbols}', "");
Expect(0, 65935, '\p{Blk=ancientsymbols}', "");
Expect(1, 65935, '\p{^Blk=ancientsymbols}', "");
Expect(1, 65935, '\P{Blk=ancientsymbols}', "");
Expect(0, 65935, '\P{^Blk=ancientsymbols}', "");
Expect(1, 65999, '\p{Blk=	-Ancient-Symbols}', "");
Expect(0, 65999, '\p{^Blk=	-Ancient-Symbols}', "");
Expect(0, 65999, '\P{Blk=	-Ancient-Symbols}', "");
Expect(1, 65999, '\P{^Blk=	-Ancient-Symbols}', "");
Expect(0, 65935, '\p{Blk=	-Ancient-Symbols}', "");
Expect(1, 65935, '\p{^Blk=	-Ancient-Symbols}', "");
Expect(1, 65935, '\P{Blk=	-Ancient-Symbols}', "");
Expect(0, 65935, '\P{^Blk=	-Ancient-Symbols}', "");
Error('\p{Is_Block=	_AncientSYMBOLS:=}');
Error('\P{Is_Block=	_AncientSYMBOLS:=}');
Expect(1, 65999, '\p{Is_Block=ancientsymbols}', "");
Expect(0, 65999, '\p{^Is_Block=ancientsymbols}', "");
Expect(0, 65999, '\P{Is_Block=ancientsymbols}', "");
Expect(1, 65999, '\P{^Is_Block=ancientsymbols}', "");
Expect(0, 65935, '\p{Is_Block=ancientsymbols}', "");
Expect(1, 65935, '\p{^Is_Block=ancientsymbols}', "");
Expect(1, 65935, '\P{Is_Block=ancientsymbols}', "");
Expect(0, 65935, '\P{^Is_Block=ancientsymbols}', "");
Expect(1, 65999, '\p{Is_Block=	Ancient_symbols}', "");
Expect(0, 65999, '\p{^Is_Block=	Ancient_symbols}', "");
Expect(0, 65999, '\P{Is_Block=	Ancient_symbols}', "");
Expect(1, 65999, '\P{^Is_Block=	Ancient_symbols}', "");
Expect(0, 65935, '\p{Is_Block=	Ancient_symbols}', "");
Expect(1, 65935, '\p{^Is_Block=	Ancient_symbols}', "");
Expect(1, 65935, '\P{Is_Block=	Ancient_symbols}', "");
Expect(0, 65935, '\P{^Is_Block=	Ancient_symbols}', "");
Error('\p{Is_Blk=/a/_-ANCIENTSymbols}');
Error('\P{Is_Blk=/a/_-ANCIENTSymbols}');
Expect(1, 65999, '\p{Is_Blk=ancientsymbols}', "");
Expect(0, 65999, '\p{^Is_Blk=ancientsymbols}', "");
Expect(0, 65999, '\P{Is_Blk=ancientsymbols}', "");
Expect(1, 65999, '\P{^Is_Blk=ancientsymbols}', "");
Expect(0, 65935, '\p{Is_Blk=ancientsymbols}', "");
Expect(1, 65935, '\p{^Is_Blk=ancientsymbols}', "");
Expect(1, 65935, '\P{Is_Blk=ancientsymbols}', "");
Expect(0, 65935, '\P{^Is_Blk=ancientsymbols}', "");
Expect(1, 65999, '\p{Is_Blk=_ ANCIENTsymbols}', "");
Expect(0, 65999, '\p{^Is_Blk=_ ANCIENTsymbols}', "");
Expect(0, 65999, '\P{Is_Blk=_ ANCIENTsymbols}', "");
Expect(1, 65999, '\P{^Is_Blk=_ ANCIENTsymbols}', "");
Expect(0, 65935, '\p{Is_Blk=_ ANCIENTsymbols}', "");
Expect(1, 65935, '\p{^Is_Blk=_ ANCIENTsymbols}', "");
Expect(1, 65935, '\P{Is_Blk=_ ANCIENTsymbols}', "");
Expect(0, 65935, '\P{^Is_Blk=_ ANCIENTsymbols}', "");
Error('\p{Block=/a/gothic}');
Error('\P{Block=/a/gothic}');
Expect(1, 66383, '\p{Block=gothic}', "");
Expect(0, 66383, '\p{^Block=gothic}', "");
Expect(0, 66383, '\P{Block=gothic}', "");
Expect(1, 66383, '\P{^Block=gothic}', "");
Expect(0, 66351, '\p{Block=gothic}', "");
Expect(1, 66351, '\p{^Block=gothic}', "");
Expect(1, 66351, '\P{Block=gothic}', "");
Expect(0, 66351, '\P{^Block=gothic}', "");
Expect(1, 66383, '\p{Block=	gothic}', "");
Expect(0, 66383, '\p{^Block=	gothic}', "");
Expect(0, 66383, '\P{Block=	gothic}', "");
Expect(1, 66383, '\P{^Block=	gothic}', "");
Expect(0, 66351, '\p{Block=	gothic}', "");
Expect(1, 66351, '\p{^Block=	gothic}', "");
Expect(1, 66351, '\P{Block=	gothic}', "");
Expect(0, 66351, '\P{^Block=	gothic}', "");
Error('\p{Blk:	:= 	GOTHIC}');
Error('\P{Blk:	:= 	GOTHIC}');
Expect(1, 66383, '\p{Blk=gothic}', "");
Expect(0, 66383, '\p{^Blk=gothic}', "");
Expect(0, 66383, '\P{Blk=gothic}', "");
Expect(1, 66383, '\P{^Blk=gothic}', "");
Expect(0, 66351, '\p{Blk=gothic}', "");
Expect(1, 66351, '\p{^Blk=gothic}', "");
Expect(1, 66351, '\P{Blk=gothic}', "");
Expect(0, 66351, '\P{^Blk=gothic}', "");
Expect(1, 66383, '\p{Blk=	Gothic}', "");
Expect(0, 66383, '\p{^Blk=	Gothic}', "");
Expect(0, 66383, '\P{Blk=	Gothic}', "");
Expect(1, 66383, '\P{^Blk=	Gothic}', "");
Expect(0, 66351, '\p{Blk=	Gothic}', "");
Expect(1, 66351, '\p{^Blk=	Gothic}', "");
Expect(1, 66351, '\P{Blk=	Gothic}', "");
Expect(0, 66351, '\P{^Blk=	Gothic}', "");
Error('\p{Is_Block=:=	Gothic}');
Error('\P{Is_Block=:=	Gothic}');
Expect(1, 66383, '\p{Is_Block=gothic}', "");
Expect(0, 66383, '\p{^Is_Block=gothic}', "");
Expect(0, 66383, '\P{Is_Block=gothic}', "");
Expect(1, 66383, '\P{^Is_Block=gothic}', "");
Expect(0, 66351, '\p{Is_Block=gothic}', "");
Expect(1, 66351, '\p{^Is_Block=gothic}', "");
Expect(1, 66351, '\P{Is_Block=gothic}', "");
Expect(0, 66351, '\P{^Is_Block=gothic}', "");
Expect(1, 66383, '\p{Is_Block=	 Gothic}', "");
Expect(0, 66383, '\p{^Is_Block=	 Gothic}', "");
Expect(0, 66383, '\P{Is_Block=	 Gothic}', "");
Expect(1, 66383, '\P{^Is_Block=	 Gothic}', "");
Expect(0, 66351, '\p{Is_Block=	 Gothic}', "");
Expect(1, 66351, '\p{^Is_Block=	 Gothic}', "");
Expect(1, 66351, '\P{Is_Block=	 Gothic}', "");
Expect(0, 66351, '\P{^Is_Block=	 Gothic}', "");
Error('\p{Is_Blk=:=	 Gothic}');
Error('\P{Is_Blk=:=	 Gothic}');
Expect(1, 66383, '\p{Is_Blk=gothic}', "");
Expect(0, 66383, '\p{^Is_Blk=gothic}', "");
Expect(0, 66383, '\P{Is_Blk=gothic}', "");
Expect(1, 66383, '\P{^Is_Blk=gothic}', "");
Expect(0, 66351, '\p{Is_Blk=gothic}', "");
Expect(1, 66351, '\p{^Is_Blk=gothic}', "");
Expect(1, 66351, '\P{Is_Blk=gothic}', "");
Expect(0, 66351, '\P{^Is_Blk=gothic}', "");
Expect(1, 66383, '\p{Is_Blk=	Gothic}', "");
Expect(0, 66383, '\p{^Is_Blk=	Gothic}', "");
Expect(0, 66383, '\P{Is_Blk=	Gothic}', "");
Expect(1, 66383, '\P{^Is_Blk=	Gothic}', "");
Expect(0, 66351, '\p{Is_Blk=	Gothic}', "");
Expect(1, 66351, '\p{^Is_Blk=	Gothic}', "");
Expect(1, 66351, '\P{Is_Blk=	Gothic}', "");
Expect(0, 66351, '\P{^Is_Blk=	Gothic}', "");
Error('\p{Block=	-ETHIOPIC/a/}');
Error('\P{Block=	-ETHIOPIC/a/}');
Expect(1, 4991, '\p{Block=ethiopic}', "");
Expect(0, 4991, '\p{^Block=ethiopic}', "");
Expect(0, 4991, '\P{Block=ethiopic}', "");
Expect(1, 4991, '\P{^Block=ethiopic}', "");
Expect(0, 4607, '\p{Block=ethiopic}', "");
Expect(1, 4607, '\p{^Block=ethiopic}', "");
Expect(1, 4607, '\P{Block=ethiopic}', "");
Expect(0, 4607, '\P{^Block=ethiopic}', "");
Expect(1, 4991, '\p{Block=_-Ethiopic}', "");
Expect(0, 4991, '\p{^Block=_-Ethiopic}', "");
Expect(0, 4991, '\P{Block=_-Ethiopic}', "");
Expect(1, 4991, '\P{^Block=_-Ethiopic}', "");
Expect(0, 4607, '\p{Block=_-Ethiopic}', "");
Expect(1, 4607, '\p{^Block=_-Ethiopic}', "");
Expect(1, 4607, '\P{Block=_-Ethiopic}', "");
Expect(0, 4607, '\P{^Block=_-Ethiopic}', "");
Error('\p{Blk=:=_ETHIOPIC}');
Error('\P{Blk=:=_ETHIOPIC}');
Expect(1, 4991, '\p{Blk=ethiopic}', "");
Expect(0, 4991, '\p{^Blk=ethiopic}', "");
Expect(0, 4991, '\P{Blk=ethiopic}', "");
Expect(1, 4991, '\P{^Blk=ethiopic}', "");
Expect(0, 4607, '\p{Blk=ethiopic}', "");
Expect(1, 4607, '\p{^Blk=ethiopic}', "");
Expect(1, 4607, '\P{Blk=ethiopic}', "");
Expect(0, 4607, '\P{^Blk=ethiopic}', "");
Expect(1, 4991, '\p{Blk=	-Ethiopic}', "");
Expect(0, 4991, '\p{^Blk=	-Ethiopic}', "");
Expect(0, 4991, '\P{Blk=	-Ethiopic}', "");
Expect(1, 4991, '\P{^Blk=	-Ethiopic}', "");
Expect(0, 4607, '\p{Blk=	-Ethiopic}', "");
Expect(1, 4607, '\p{^Blk=	-Ethiopic}', "");
Expect(1, 4607, '\P{Blk=	-Ethiopic}', "");
Expect(0, 4607, '\P{^Blk=	-Ethiopic}', "");
Error('\p{Is_Block= /a/Ethiopic}');
Error('\P{Is_Block= /a/Ethiopic}');
Expect(1, 4991, '\p{Is_Block=ethiopic}', "");
Expect(0, 4991, '\p{^Is_Block=ethiopic}', "");
Expect(0, 4991, '\P{Is_Block=ethiopic}', "");
Expect(1, 4991, '\P{^Is_Block=ethiopic}', "");
Expect(0, 4607, '\p{Is_Block=ethiopic}', "");
Expect(1, 4607, '\p{^Is_Block=ethiopic}', "");
Expect(1, 4607, '\P{Is_Block=ethiopic}', "");
Expect(0, 4607, '\P{^Is_Block=ethiopic}', "");
Expect(1, 4991, '\p{Is_Block=--Ethiopic}', "");
Expect(0, 4991, '\p{^Is_Block=--Ethiopic}', "");
Expect(0, 4991, '\P{Is_Block=--Ethiopic}', "");
Expect(1, 4991, '\P{^Is_Block=--Ethiopic}', "");
Expect(0, 4607, '\p{Is_Block=--Ethiopic}', "");
Expect(1, 4607, '\p{^Is_Block=--Ethiopic}', "");
Expect(1, 4607, '\P{Is_Block=--Ethiopic}', "");
Expect(0, 4607, '\P{^Is_Block=--Ethiopic}', "");
Error('\p{Is_Blk=	 Ethiopic:=}');
Error('\P{Is_Blk=	 Ethiopic:=}');
Expect(1, 4991, '\p{Is_Blk=ethiopic}', "");
Expect(0, 4991, '\p{^Is_Blk=ethiopic}', "");
Expect(0, 4991, '\P{Is_Blk=ethiopic}', "");
Expect(1, 4991, '\P{^Is_Blk=ethiopic}', "");
Expect(0, 4607, '\p{Is_Blk=ethiopic}', "");
Expect(1, 4607, '\p{^Is_Blk=ethiopic}', "");
Expect(1, 4607, '\P{Is_Blk=ethiopic}', "");
Expect(0, 4607, '\P{^Is_Blk=ethiopic}', "");
Expect(1, 4991, '\p{Is_Blk=	ETHIOPIC}', "");
Expect(0, 4991, '\p{^Is_Blk=	ETHIOPIC}', "");
Expect(0, 4991, '\P{Is_Blk=	ETHIOPIC}', "");
Expect(1, 4991, '\P{^Is_Blk=	ETHIOPIC}', "");
Expect(0, 4607, '\p{Is_Blk=	ETHIOPIC}', "");
Expect(1, 4607, '\p{^Is_Blk=	ETHIOPIC}', "");
Expect(1, 4607, '\P{Is_Blk=	ETHIOPIC}', "");
Expect(0, 4607, '\P{^Is_Blk=	ETHIOPIC}', "");
Error('\p{Block=	/a/Buginese}');
Error('\P{Block=	/a/Buginese}');
Expect(1, 6687, '\p{Block=buginese}', "");
Expect(0, 6687, '\p{^Block=buginese}', "");
Expect(0, 6687, '\P{Block=buginese}', "");
Expect(1, 6687, '\P{^Block=buginese}', "");
Expect(0, 6655, '\p{Block=buginese}', "");
Expect(1, 6655, '\p{^Block=buginese}', "");
Expect(1, 6655, '\P{Block=buginese}', "");
Expect(0, 6655, '\P{^Block=buginese}', "");
Expect(1, 6687, '\p{Block=_BUGINESE}', "");
Expect(0, 6687, '\p{^Block=_BUGINESE}', "");
Expect(0, 6687, '\P{Block=_BUGINESE}', "");
Expect(1, 6687, '\P{^Block=_BUGINESE}', "");
Expect(0, 6655, '\p{Block=_BUGINESE}', "");
Expect(1, 6655, '\p{^Block=_BUGINESE}', "");
Expect(1, 6655, '\P{Block=_BUGINESE}', "");
Expect(0, 6655, '\P{^Block=_BUGINESE}', "");
Error('\p{Blk=/a/Buginese}');
Error('\P{Blk=/a/Buginese}');
Expect(1, 6687, '\p{Blk=buginese}', "");
Expect(0, 6687, '\p{^Blk=buginese}', "");
Expect(0, 6687, '\P{Blk=buginese}', "");
Expect(1, 6687, '\P{^Blk=buginese}', "");
Expect(0, 6655, '\p{Blk=buginese}', "");
Expect(1, 6655, '\p{^Blk=buginese}', "");
Expect(1, 6655, '\P{Blk=buginese}', "");
Expect(0, 6655, '\P{^Blk=buginese}', "");
Expect(1, 6687, '\p{Blk=	-BUGINESE}', "");
Expect(0, 6687, '\p{^Blk=	-BUGINESE}', "");
Expect(0, 6687, '\P{Blk=	-BUGINESE}', "");
Expect(1, 6687, '\P{^Blk=	-BUGINESE}', "");
Expect(0, 6655, '\p{Blk=	-BUGINESE}', "");
Expect(1, 6655, '\p{^Blk=	-BUGINESE}', "");
Expect(1, 6655, '\P{Blk=	-BUGINESE}', "");
Expect(0, 6655, '\P{^Blk=	-BUGINESE}', "");
Error('\p{Is_Block=_/a/BUGINESE}');
Error('\P{Is_Block=_/a/BUGINESE}');
Expect(1, 6687, '\p{Is_Block=buginese}', "");
Expect(0, 6687, '\p{^Is_Block=buginese}', "");
Expect(0, 6687, '\P{Is_Block=buginese}', "");
Expect(1, 6687, '\P{^Is_Block=buginese}', "");
Expect(0, 6655, '\p{Is_Block=buginese}', "");
Expect(1, 6655, '\p{^Is_Block=buginese}', "");
Expect(1, 6655, '\P{Is_Block=buginese}', "");
Expect(0, 6655, '\P{^Is_Block=buginese}', "");
Expect(1, 6687, '\p{Is_Block=__Buginese}', "");
Expect(0, 6687, '\p{^Is_Block=__Buginese}', "");
Expect(0, 6687, '\P{Is_Block=__Buginese}', "");
Expect(1, 6687, '\P{^Is_Block=__Buginese}', "");
Expect(0, 6655, '\p{Is_Block=__Buginese}', "");
Expect(1, 6655, '\p{^Is_Block=__Buginese}', "");
Expect(1, 6655, '\P{Is_Block=__Buginese}', "");
Expect(0, 6655, '\P{^Is_Block=__Buginese}', "");
Error('\p{Is_Blk:/a/--buginese}');
Error('\P{Is_Blk:/a/--buginese}');
Expect(1, 6687, '\p{Is_Blk=buginese}', "");
Expect(0, 6687, '\p{^Is_Blk=buginese}', "");
Expect(0, 6687, '\P{Is_Blk=buginese}', "");
Expect(1, 6687, '\P{^Is_Blk=buginese}', "");
Expect(0, 6655, '\p{Is_Blk=buginese}', "");
Expect(1, 6655, '\p{^Is_Blk=buginese}', "");
Expect(1, 6655, '\P{Is_Blk=buginese}', "");
Expect(0, 6655, '\P{^Is_Blk=buginese}', "");
Expect(1, 6687, '\p{Is_Blk=	-Buginese}', "");
Expect(0, 6687, '\p{^Is_Blk=	-Buginese}', "");
Expect(0, 6687, '\P{Is_Blk=	-Buginese}', "");
Expect(1, 6687, '\P{^Is_Blk=	-Buginese}', "");
Expect(0, 6655, '\p{Is_Blk=	-Buginese}', "");
Expect(1, 6655, '\p{^Is_Blk=	-Buginese}', "");
Expect(1, 6655, '\P{Is_Blk=	-Buginese}', "");
Expect(0, 6655, '\P{^Is_Blk=	-Buginese}', "");
Error('\p{Block= mathematicalAlphanumericsymbols:=}');
Error('\P{Block= mathematicalAlphanumericsymbols:=}');
Expect(1, 120831, '\p{Block=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^Block=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{Block=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^Block=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{Block=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^Block=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{Block=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^Block=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{Block=	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(0, 120831, '\p{^Block=	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(0, 120831, '\P{Block=	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(1, 120831, '\P{^Block=	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(0, 119807, '\p{Block=	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(1, 119807, '\p{^Block=	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(1, 119807, '\P{Block=	MathematicalAlphanumeric_SYMBOLS}', "");
Expect(0, 119807, '\P{^Block=	MathematicalAlphanumeric_SYMBOLS}', "");
Error('\p{Blk=:=__Mathematical Alphanumeric_SYMBOLS}');
Error('\P{Blk=:=__Mathematical Alphanumeric_SYMBOLS}');
Expect(1, 120831, '\p{Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{Blk= -mathematicalAlphanumeric symbols}', "");
Expect(0, 120831, '\p{^Blk= -mathematicalAlphanumeric symbols}', "");
Expect(0, 120831, '\P{Blk= -mathematicalAlphanumeric symbols}', "");
Expect(1, 120831, '\P{^Blk= -mathematicalAlphanumeric symbols}', "");
Expect(0, 119807, '\p{Blk= -mathematicalAlphanumeric symbols}', "");
Expect(1, 119807, '\p{^Blk= -mathematicalAlphanumeric symbols}', "");
Expect(1, 119807, '\P{Blk= -mathematicalAlphanumeric symbols}', "");
Expect(0, 119807, '\P{^Blk= -mathematicalAlphanumeric symbols}', "");
Error('\p{Is_Block=/a/-_Mathematical-ALPHANUMERIC SYMBOLS}');
Error('\P{Is_Block=/a/-_Mathematical-ALPHANUMERIC SYMBOLS}');
Expect(1, 120831, '\p{Is_Block=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^Is_Block=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{Is_Block=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^Is_Block=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{Is_Block=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^Is_Block=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{Is_Block=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^Is_Block=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{Is_Block=-_mathematical Alphanumeric-Symbols}', "");
Expect(0, 120831, '\p{^Is_Block=-_mathematical Alphanumeric-Symbols}', "");
Expect(0, 120831, '\P{Is_Block=-_mathematical Alphanumeric-Symbols}', "");
Expect(1, 120831, '\P{^Is_Block=-_mathematical Alphanumeric-Symbols}', "");
Expect(0, 119807, '\p{Is_Block=-_mathematical Alphanumeric-Symbols}', "");
Expect(1, 119807, '\p{^Is_Block=-_mathematical Alphanumeric-Symbols}', "");
Expect(1, 119807, '\P{Is_Block=-_mathematical Alphanumeric-Symbols}', "");
Expect(0, 119807, '\P{^Is_Block=-_mathematical Alphanumeric-Symbols}', "");
Error('\p{Is_Blk=-MATHEMATICAL:=Alphanumeric-SYMBOLS}');
Error('\P{Is_Blk=-MATHEMATICAL:=Alphanumeric-SYMBOLS}');
Expect(1, 120831, '\p{Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^Is_Blk=mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{Is_Blk=_Mathematical	alphanumeric symbols}', "");
Expect(0, 120831, '\p{^Is_Blk=_Mathematical	alphanumeric symbols}', "");
Expect(0, 120831, '\P{Is_Blk=_Mathematical	alphanumeric symbols}', "");
Expect(1, 120831, '\P{^Is_Blk=_Mathematical	alphanumeric symbols}', "");
Expect(0, 119807, '\p{Is_Blk=_Mathematical	alphanumeric symbols}', "");
Expect(1, 119807, '\p{^Is_Blk=_Mathematical	alphanumeric symbols}', "");
Expect(1, 119807, '\P{Is_Blk=_Mathematical	alphanumeric symbols}', "");
Expect(0, 119807, '\P{^Is_Blk=_Mathematical	alphanumeric symbols}', "");
Error('\p{Block=/a/	-INSCRIPTIONAL-Pahlavi}');
Error('\P{Block=/a/	-INSCRIPTIONAL-Pahlavi}');
Expect(1, 68479, '\p{Block:	inscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^Block:	inscriptionalpahlavi}', "");
Expect(0, 68479, '\P{Block:	inscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^Block:	inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Block:	inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Block:	inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Block:	inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Block:	inscriptionalpahlavi}', "");
Expect(1, 68479, '\p{Block= 	INSCRIPTIONAL-PAHLAVI}', "");
Expect(0, 68479, '\p{^Block= 	INSCRIPTIONAL-PAHLAVI}', "");
Expect(0, 68479, '\P{Block= 	INSCRIPTIONAL-PAHLAVI}', "");
Expect(1, 68479, '\P{^Block= 	INSCRIPTIONAL-PAHLAVI}', "");
Expect(0, 68447, '\p{Block= 	INSCRIPTIONAL-PAHLAVI}', "");
Expect(1, 68447, '\p{^Block= 	INSCRIPTIONAL-PAHLAVI}', "");
Expect(1, 68447, '\P{Block= 	INSCRIPTIONAL-PAHLAVI}', "");
Expect(0, 68447, '\P{^Block= 	INSCRIPTIONAL-PAHLAVI}', "");
Error('\p{Blk=/a/_ INSCRIPTIONAL-pahlavi}');
Error('\P{Blk=/a/_ INSCRIPTIONAL-pahlavi}');
Expect(1, 68479, '\p{Blk=inscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^Blk=inscriptionalpahlavi}', "");
Expect(0, 68479, '\P{Blk=inscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^Blk=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Blk=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Blk=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Blk=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Blk=inscriptionalpahlavi}', "");
Expect(1, 68479, '\p{Blk=-_inscriptional-Pahlavi}', "");
Expect(0, 68479, '\p{^Blk=-_inscriptional-Pahlavi}', "");
Expect(0, 68479, '\P{Blk=-_inscriptional-Pahlavi}', "");
Expect(1, 68479, '\P{^Blk=-_inscriptional-Pahlavi}', "");
Expect(0, 68447, '\p{Blk=-_inscriptional-Pahlavi}', "");
Expect(1, 68447, '\p{^Blk=-_inscriptional-Pahlavi}', "");
Expect(1, 68447, '\P{Blk=-_inscriptional-Pahlavi}', "");
Expect(0, 68447, '\P{^Blk=-_inscriptional-Pahlavi}', "");
Error('\p{Is_Block=:=Inscriptional PAHLAVI}');
Error('\P{Is_Block=:=Inscriptional PAHLAVI}');
Expect(1, 68479, '\p{Is_Block: inscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^Is_Block: inscriptionalpahlavi}', "");
Expect(0, 68479, '\P{Is_Block: inscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^Is_Block: inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Is_Block: inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Is_Block: inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Is_Block: inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Is_Block: inscriptionalpahlavi}', "");
Expect(1, 68479, '\p{Is_Block=- Inscriptional_Pahlavi}', "");
Expect(0, 68479, '\p{^Is_Block=- Inscriptional_Pahlavi}', "");
Expect(0, 68479, '\P{Is_Block=- Inscriptional_Pahlavi}', "");
Expect(1, 68479, '\P{^Is_Block=- Inscriptional_Pahlavi}', "");
Expect(0, 68447, '\p{Is_Block=- Inscriptional_Pahlavi}', "");
Expect(1, 68447, '\p{^Is_Block=- Inscriptional_Pahlavi}', "");
Expect(1, 68447, '\P{Is_Block=- Inscriptional_Pahlavi}', "");
Expect(0, 68447, '\P{^Is_Block=- Inscriptional_Pahlavi}', "");
Error('\p{Is_Blk=_-inscriptional-pahlavi:=}');
Error('\P{Is_Blk=_-inscriptional-pahlavi:=}');
Expect(1, 68479, '\p{Is_Blk=inscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^Is_Blk=inscriptionalpahlavi}', "");
Expect(0, 68479, '\P{Is_Blk=inscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^Is_Blk=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Is_Blk=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Is_Blk=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Is_Blk=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Is_Blk=inscriptionalpahlavi}', "");
Expect(1, 68479, '\p{Is_Blk=	 INSCRIPTIONAL_pahlavi}', "");
Expect(0, 68479, '\p{^Is_Blk=	 INSCRIPTIONAL_pahlavi}', "");
Expect(0, 68479, '\P{Is_Blk=	 INSCRIPTIONAL_pahlavi}', "");
Expect(1, 68479, '\P{^Is_Blk=	 INSCRIPTIONAL_pahlavi}', "");
Expect(0, 68447, '\p{Is_Blk=	 INSCRIPTIONAL_pahlavi}', "");
Expect(1, 68447, '\p{^Is_Blk=	 INSCRIPTIONAL_pahlavi}', "");
Expect(1, 68447, '\P{Is_Blk=	 INSCRIPTIONAL_pahlavi}', "");
Expect(0, 68447, '\P{^Is_Blk=	 INSCRIPTIONAL_pahlavi}', "");
Error('\p{Block:	__Unified_Canadian_Aboriginal:=syllabics EXTENDED}');
Error('\P{Block:	__Unified_Canadian_Aboriginal:=syllabics EXTENDED}');
Expect(1, 6399, '\p{Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{Block=__UNIFIED Canadian	ABORIGINAL-syllabics	Extended}', "");
Expect(0, 6399, '\p{^Block=__UNIFIED Canadian	ABORIGINAL-syllabics	Extended}', "");
Expect(0, 6399, '\P{Block=__UNIFIED Canadian	ABORIGINAL-syllabics	Extended}', "");
Expect(1, 6399, '\P{^Block=__UNIFIED Canadian	ABORIGINAL-syllabics	Extended}', "");
Expect(0, 6319, '\p{Block=__UNIFIED Canadian	ABORIGINAL-syllabics	Extended}', "");
Expect(1, 6319, '\p{^Block=__UNIFIED Canadian	ABORIGINAL-syllabics	Extended}', "");
Expect(1, 6319, '\P{Block=__UNIFIED Canadian	ABORIGINAL-syllabics	Extended}', "");
Expect(0, 6319, '\P{^Block=__UNIFIED Canadian	ABORIGINAL-syllabics	Extended}', "");
Error('\p{Blk= 	UnifiedCanadian-ABORIGINAL_Syllabics/a/Extended}');
Error('\P{Blk= 	UnifiedCanadian-ABORIGINAL_Syllabics/a/Extended}');
Expect(1, 6399, '\p{Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^Blk=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{Blk=-unified CANADIAN	Aboriginal-Syllabics-Extended}', "");
Expect(0, 6399, '\p{^Blk=-unified CANADIAN	Aboriginal-Syllabics-Extended}', "");
Expect(0, 6399, '\P{Blk=-unified CANADIAN	Aboriginal-Syllabics-Extended}', "");
Expect(1, 6399, '\P{^Blk=-unified CANADIAN	Aboriginal-Syllabics-Extended}', "");
Expect(0, 6319, '\p{Blk=-unified CANADIAN	Aboriginal-Syllabics-Extended}', "");
Expect(1, 6319, '\p{^Blk=-unified CANADIAN	Aboriginal-Syllabics-Extended}', "");
Expect(1, 6319, '\P{Blk=-unified CANADIAN	Aboriginal-Syllabics-Extended}', "");
Expect(0, 6319, '\P{^Blk=-unified CANADIAN	Aboriginal-Syllabics-Extended}', "");
Error('\p{Is_Block=__unifiedCANADIAN	Aboriginal-SYLLABICS	Extended/a/}');
Error('\P{Is_Block=__unifiedCANADIAN	Aboriginal-SYLLABICS	Extended/a/}');
Expect(1, 6399, '\p{Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^Is_Block=unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{Is_Block:-_Unified_canadian	aboriginal	syllabics	extended}', "");
Expect(0, 6399, '\p{^Is_Block:-_Unified_canadian	aboriginal	syllabics	extended}', "");
Expect(0, 6399, '\P{Is_Block:-_Unified_canadian	aboriginal	syllabics	extended}', "");
Expect(1, 6399, '\P{^Is_Block:-_Unified_canadian	aboriginal	syllabics	extended}', "");
Expect(0, 6319, '\p{Is_Block:-_Unified_canadian	aboriginal	syllabics	extended}', "");
Expect(1, 6319, '\p{^Is_Block:-_Unified_canadian	aboriginal	syllabics	extended}', "");
Expect(1, 6319, '\P{Is_Block:-_Unified_canadian	aboriginal	syllabics	extended}', "");
Expect(0, 6319, '\P{^Is_Block:-_Unified_canadian	aboriginal	syllabics	extended}', "");
Error('\p{Is_Blk=_:=Unifiedcanadianaboriginal	Syllabics	extended}');
Error('\P{Is_Blk=_:=Unifiedcanadianaboriginal	Syllabics	extended}');
Expect(1, 6399, '\p{Is_Blk: unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^Is_Blk: unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{Is_Blk: unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^Is_Blk: unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{Is_Blk: unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^Is_Blk: unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{Is_Blk: unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^Is_Blk: unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{Is_Blk=-	UNIFIED_CANADIAN	ABORIGINALSYLLABICSExtended}', "");
Expect(0, 6399, '\p{^Is_Blk=-	UNIFIED_CANADIAN	ABORIGINALSYLLABICSExtended}', "");
Expect(0, 6399, '\P{Is_Blk=-	UNIFIED_CANADIAN	ABORIGINALSYLLABICSExtended}', "");
Expect(1, 6399, '\P{^Is_Blk=-	UNIFIED_CANADIAN	ABORIGINALSYLLABICSExtended}', "");
Expect(0, 6319, '\p{Is_Blk=-	UNIFIED_CANADIAN	ABORIGINALSYLLABICSExtended}', "");
Expect(1, 6319, '\p{^Is_Blk=-	UNIFIED_CANADIAN	ABORIGINALSYLLABICSExtended}', "");
Expect(1, 6319, '\P{Is_Blk=-	UNIFIED_CANADIAN	ABORIGINALSYLLABICSExtended}', "");
Expect(0, 6319, '\P{^Is_Blk=-	UNIFIED_CANADIAN	ABORIGINALSYLLABICSExtended}', "");
Error('\p{Block:	:=kangxi-Radicals}');
Error('\P{Block:	:=kangxi-Radicals}');
Expect(1, 12255, '\p{Block=kangxiradicals}', "");
Expect(0, 12255, '\p{^Block=kangxiradicals}', "");
Expect(0, 12255, '\P{Block=kangxiradicals}', "");
Expect(1, 12255, '\P{^Block=kangxiradicals}', "");
Expect(0, 12031, '\p{Block=kangxiradicals}', "");
Expect(1, 12031, '\p{^Block=kangxiradicals}', "");
Expect(1, 12031, '\P{Block=kangxiradicals}', "");
Expect(0, 12031, '\P{^Block=kangxiradicals}', "");
Expect(1, 12255, '\p{Block:-kangxi-Radicals}', "");
Expect(0, 12255, '\p{^Block:-kangxi-Radicals}', "");
Expect(0, 12255, '\P{Block:-kangxi-Radicals}', "");
Expect(1, 12255, '\P{^Block:-kangxi-Radicals}', "");
Expect(0, 12031, '\p{Block:-kangxi-Radicals}', "");
Expect(1, 12031, '\p{^Block:-kangxi-Radicals}', "");
Expect(1, 12031, '\P{Block:-kangxi-Radicals}', "");
Expect(0, 12031, '\P{^Block:-kangxi-Radicals}', "");
Error('\p{Blk=_/a/kangxi-RADICALS}');
Error('\P{Blk=_/a/kangxi-RADICALS}');
Expect(1, 12255, '\p{Blk=kangxiradicals}', "");
Expect(0, 12255, '\p{^Blk=kangxiradicals}', "");
Expect(0, 12255, '\P{Blk=kangxiradicals}', "");
Expect(1, 12255, '\P{^Blk=kangxiradicals}', "");
Expect(0, 12031, '\p{Blk=kangxiradicals}', "");
Expect(1, 12031, '\p{^Blk=kangxiradicals}', "");
Expect(1, 12031, '\P{Blk=kangxiradicals}', "");
Expect(0, 12031, '\P{^Blk=kangxiradicals}', "");
Expect(1, 12255, '\p{Blk:		Kangxi	RADICALS}', "");
Expect(0, 12255, '\p{^Blk:		Kangxi	RADICALS}', "");
Expect(0, 12255, '\P{Blk:		Kangxi	RADICALS}', "");
Expect(1, 12255, '\P{^Blk:		Kangxi	RADICALS}', "");
Expect(0, 12031, '\p{Blk:		Kangxi	RADICALS}', "");
Expect(1, 12031, '\p{^Blk:		Kangxi	RADICALS}', "");
Expect(1, 12031, '\P{Blk:		Kangxi	RADICALS}', "");
Expect(0, 12031, '\P{^Blk:		Kangxi	RADICALS}', "");
Error('\p{Is_Block:_/a/KANGXI-radicals}');
Error('\P{Is_Block:_/a/KANGXI-radicals}');
Expect(1, 12255, '\p{Is_Block:   kangxiradicals}', "");
Expect(0, 12255, '\p{^Is_Block:   kangxiradicals}', "");
Expect(0, 12255, '\P{Is_Block:   kangxiradicals}', "");
Expect(1, 12255, '\P{^Is_Block:   kangxiradicals}', "");
Expect(0, 12031, '\p{Is_Block:   kangxiradicals}', "");
Expect(1, 12031, '\p{^Is_Block:   kangxiradicals}', "");
Expect(1, 12031, '\P{Is_Block:   kangxiradicals}', "");
Expect(0, 12031, '\P{^Is_Block:   kangxiradicals}', "");
Expect(1, 12255, '\p{Is_Block=_Kangxi-RADICALS}', "");
Expect(0, 12255, '\p{^Is_Block=_Kangxi-RADICALS}', "");
Expect(0, 12255, '\P{Is_Block=_Kangxi-RADICALS}', "");
Expect(1, 12255, '\P{^Is_Block=_Kangxi-RADICALS}', "");
Expect(0, 12031, '\p{Is_Block=_Kangxi-RADICALS}', "");
Expect(1, 12031, '\p{^Is_Block=_Kangxi-RADICALS}', "");
Expect(1, 12031, '\P{Is_Block=_Kangxi-RADICALS}', "");
Expect(0, 12031, '\P{^Is_Block=_Kangxi-RADICALS}', "");
Error('\p{Is_Blk=	 KANGXI/a/Radicals}');
Error('\P{Is_Blk=	 KANGXI/a/Radicals}');
Expect(1, 12255, '\p{Is_Blk:	kangxiradicals}', "");
Expect(0, 12255, '\p{^Is_Blk:	kangxiradicals}', "");
Expect(0, 12255, '\P{Is_Blk:	kangxiradicals}', "");
Expect(1, 12255, '\P{^Is_Blk:	kangxiradicals}', "");
Expect(0, 12031, '\p{Is_Blk:	kangxiradicals}', "");
Expect(1, 12031, '\p{^Is_Blk:	kangxiradicals}', "");
Expect(1, 12031, '\P{Is_Blk:	kangxiradicals}', "");
Expect(0, 12031, '\P{^Is_Blk:	kangxiradicals}', "");
Expect(1, 12255, '\p{Is_Blk=_-Kangxi_Radicals}', "");
Expect(0, 12255, '\p{^Is_Blk=_-Kangxi_Radicals}', "");
Expect(0, 12255, '\P{Is_Blk=_-Kangxi_Radicals}', "");
Expect(1, 12255, '\P{^Is_Blk=_-Kangxi_Radicals}', "");
Expect(0, 12031, '\p{Is_Blk=_-Kangxi_Radicals}', "");
Expect(1, 12031, '\p{^Is_Blk=_-Kangxi_Radicals}', "");
Expect(1, 12031, '\P{Is_Blk=_-Kangxi_Radicals}', "");
Expect(0, 12031, '\P{^Is_Blk=_-Kangxi_Radicals}', "");
Error('\p{Block=/a/	-arabic_PRESENTATION	Forms B}');
Error('\P{Block=/a/	-arabic_PRESENTATION	Forms B}');
Expect(1, 65279, '\p{Block=arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^Block=arabicpresentationformsb}', "");
Expect(0, 65279, '\P{Block=arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^Block=arabicpresentationformsb}', "");
Expect(0, 65135, '\p{Block=arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^Block=arabicpresentationformsb}', "");
Expect(1, 65135, '\P{Block=arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^Block=arabicpresentationformsb}', "");
Expect(1, 65279, '\p{Block=  ARABIC	Presentation FORMS	B}', "");
Expect(0, 65279, '\p{^Block=  ARABIC	Presentation FORMS	B}', "");
Expect(0, 65279, '\P{Block=  ARABIC	Presentation FORMS	B}', "");
Expect(1, 65279, '\P{^Block=  ARABIC	Presentation FORMS	B}', "");
Expect(0, 65135, '\p{Block=  ARABIC	Presentation FORMS	B}', "");
Expect(1, 65135, '\p{^Block=  ARABIC	Presentation FORMS	B}', "");
Expect(1, 65135, '\P{Block=  ARABIC	Presentation FORMS	B}', "");
Expect(0, 65135, '\P{^Block=  ARABIC	Presentation FORMS	B}', "");
Error('\p{Blk=-:=arabic	PRESENTATION_FORMS-B}');
Error('\P{Blk=-:=arabic	PRESENTATION_FORMS-B}');
Expect(1, 65279, '\p{Blk:arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^Blk:arabicpresentationformsb}', "");
Expect(0, 65279, '\P{Blk:arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^Blk:arabicpresentationformsb}', "");
Expect(0, 65135, '\p{Blk:arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^Blk:arabicpresentationformsb}', "");
Expect(1, 65135, '\P{Blk:arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^Blk:arabicpresentationformsb}', "");
Expect(1, 65279, '\p{Blk= Arabic	PresentationForms-b}', "");
Expect(0, 65279, '\p{^Blk= Arabic	PresentationForms-b}', "");
Expect(0, 65279, '\P{Blk= Arabic	PresentationForms-b}', "");
Expect(1, 65279, '\P{^Blk= Arabic	PresentationForms-b}', "");
Expect(0, 65135, '\p{Blk= Arabic	PresentationForms-b}', "");
Expect(1, 65135, '\p{^Blk= Arabic	PresentationForms-b}', "");
Expect(1, 65135, '\P{Blk= Arabic	PresentationForms-b}', "");
Expect(0, 65135, '\P{^Blk= Arabic	PresentationForms-b}', "");
Error('\p{Is_Block= -Arabic	PRESENTATION/a/FormsB}');
Error('\P{Is_Block= -Arabic	PRESENTATION/a/FormsB}');
Expect(1, 65279, '\p{Is_Block=arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^Is_Block=arabicpresentationformsb}', "");
Expect(0, 65279, '\P{Is_Block=arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^Is_Block=arabicpresentationformsb}', "");
Expect(0, 65135, '\p{Is_Block=arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^Is_Block=arabicpresentationformsb}', "");
Expect(1, 65135, '\P{Is_Block=arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^Is_Block=arabicpresentationformsb}', "");
Expect(1, 65279, '\p{Is_Block=_	Arabic presentation_FORMS	B}', "");
Expect(0, 65279, '\p{^Is_Block=_	Arabic presentation_FORMS	B}', "");
Expect(0, 65279, '\P{Is_Block=_	Arabic presentation_FORMS	B}', "");
Expect(1, 65279, '\P{^Is_Block=_	Arabic presentation_FORMS	B}', "");
Expect(0, 65135, '\p{Is_Block=_	Arabic presentation_FORMS	B}', "");
Expect(1, 65135, '\p{^Is_Block=_	Arabic presentation_FORMS	B}', "");
Expect(1, 65135, '\P{Is_Block=_	Arabic presentation_FORMS	B}', "");
Expect(0, 65135, '\P{^Is_Block=_	Arabic presentation_FORMS	B}', "");
Error('\p{Is_Blk=/a/	 arabic_PRESENTATION_FormsB}');
Error('\P{Is_Blk=/a/	 arabic_PRESENTATION_FormsB}');
Expect(1, 65279, '\p{Is_Blk=arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^Is_Blk=arabicpresentationformsb}', "");
Expect(0, 65279, '\P{Is_Blk=arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^Is_Blk=arabicpresentationformsb}', "");
Expect(0, 65135, '\p{Is_Blk=arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^Is_Blk=arabicpresentationformsb}', "");
Expect(1, 65135, '\P{Is_Blk=arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^Is_Blk=arabicpresentationformsb}', "");
Expect(1, 65279, '\p{Is_Blk=		arabicPresentation_forms B}', "");
Expect(0, 65279, '\p{^Is_Blk=		arabicPresentation_forms B}', "");
Expect(0, 65279, '\P{Is_Blk=		arabicPresentation_forms B}', "");
Expect(1, 65279, '\P{^Is_Blk=		arabicPresentation_forms B}', "");
Expect(0, 65135, '\p{Is_Blk=		arabicPresentation_forms B}', "");
Expect(1, 65135, '\p{^Is_Blk=		arabicPresentation_forms B}', "");
Expect(1, 65135, '\P{Is_Blk=		arabicPresentation_forms B}', "");
Expect(0, 65135, '\P{^Is_Blk=		arabicPresentation_forms B}', "");
Error('\p{Block=/a/-GURMUKHI}');
Error('\P{Block=/a/-GURMUKHI}');
Expect(1, 2687, '\p{Block=gurmukhi}', "");
Expect(0, 2687, '\p{^Block=gurmukhi}', "");
Expect(0, 2687, '\P{Block=gurmukhi}', "");
Expect(1, 2687, '\P{^Block=gurmukhi}', "");
Expect(0, 2559, '\p{Block=gurmukhi}', "");
Expect(1, 2559, '\p{^Block=gurmukhi}', "");
Expect(1, 2559, '\P{Block=gurmukhi}', "");
Expect(0, 2559, '\P{^Block=gurmukhi}', "");
Expect(1, 2687, '\p{Block=		GURMUKHI}', "");
Expect(0, 2687, '\p{^Block=		GURMUKHI}', "");
Expect(0, 2687, '\P{Block=		GURMUKHI}', "");
Expect(1, 2687, '\P{^Block=		GURMUKHI}', "");
Expect(0, 2559, '\p{Block=		GURMUKHI}', "");
Expect(1, 2559, '\p{^Block=		GURMUKHI}', "");
Expect(1, 2559, '\P{Block=		GURMUKHI}', "");
Expect(0, 2559, '\P{^Block=		GURMUKHI}', "");
Error('\p{Blk=:= -GURMUKHI}');
Error('\P{Blk=:= -GURMUKHI}');
Expect(1, 2687, '\p{Blk:   gurmukhi}', "");
Expect(0, 2687, '\p{^Blk:   gurmukhi}', "");
Expect(0, 2687, '\P{Blk:   gurmukhi}', "");
Expect(1, 2687, '\P{^Blk:   gurmukhi}', "");
Expect(0, 2559, '\p{Blk:   gurmukhi}', "");
Expect(1, 2559, '\p{^Blk:   gurmukhi}', "");
Expect(1, 2559, '\P{Blk:   gurmukhi}', "");
Expect(0, 2559, '\P{^Blk:   gurmukhi}', "");
Expect(1, 2687, '\p{Blk:	_GURMUKHI}', "");
Expect(0, 2687, '\p{^Blk:	_GURMUKHI}', "");
Expect(0, 2687, '\P{Blk:	_GURMUKHI}', "");
Expect(1, 2687, '\P{^Blk:	_GURMUKHI}', "");
Expect(0, 2559, '\p{Blk:	_GURMUKHI}', "");
Expect(1, 2559, '\p{^Blk:	_GURMUKHI}', "");
Expect(1, 2559, '\P{Blk:	_GURMUKHI}', "");
Expect(0, 2559, '\P{^Blk:	_GURMUKHI}', "");
Error('\p{Is_Block=	_gurmukhi/a/}');
Error('\P{Is_Block=	_gurmukhi/a/}');
Expect(1, 2687, '\p{Is_Block=gurmukhi}', "");
Expect(0, 2687, '\p{^Is_Block=gurmukhi}', "");
Expect(0, 2687, '\P{Is_Block=gurmukhi}', "");
Expect(1, 2687, '\P{^Is_Block=gurmukhi}', "");
Expect(0, 2559, '\p{Is_Block=gurmukhi}', "");
Expect(1, 2559, '\p{^Is_Block=gurmukhi}', "");
Expect(1, 2559, '\P{Is_Block=gurmukhi}', "");
Expect(0, 2559, '\P{^Is_Block=gurmukhi}', "");
Expect(1, 2687, '\p{Is_Block:   Gurmukhi}', "");
Expect(0, 2687, '\p{^Is_Block:   Gurmukhi}', "");
Expect(0, 2687, '\P{Is_Block:   Gurmukhi}', "");
Expect(1, 2687, '\P{^Is_Block:   Gurmukhi}', "");
Expect(0, 2559, '\p{Is_Block:   Gurmukhi}', "");
Expect(1, 2559, '\p{^Is_Block:   Gurmukhi}', "");
Expect(1, 2559, '\P{Is_Block:   Gurmukhi}', "");
Expect(0, 2559, '\P{^Is_Block:   Gurmukhi}', "");
Error('\p{Is_Blk=:=_gurmukhi}');
Error('\P{Is_Blk=:=_gurmukhi}');
Expect(1, 2687, '\p{Is_Blk=gurmukhi}', "");
Expect(0, 2687, '\p{^Is_Blk=gurmukhi}', "");
Expect(0, 2687, '\P{Is_Blk=gurmukhi}', "");
Expect(1, 2687, '\P{^Is_Blk=gurmukhi}', "");
Expect(0, 2559, '\p{Is_Blk=gurmukhi}', "");
Expect(1, 2559, '\p{^Is_Blk=gurmukhi}', "");
Expect(1, 2559, '\P{Is_Blk=gurmukhi}', "");
Expect(0, 2559, '\P{^Is_Blk=gurmukhi}', "");
Expect(1, 2687, '\p{Is_Blk=__gurmukhi}', "");
Expect(0, 2687, '\p{^Is_Blk=__gurmukhi}', "");
Expect(0, 2687, '\P{Is_Blk=__gurmukhi}', "");
Expect(1, 2687, '\P{^Is_Blk=__gurmukhi}', "");
Expect(0, 2559, '\p{Is_Blk=__gurmukhi}', "");
Expect(1, 2559, '\p{^Is_Blk=__gurmukhi}', "");
Expect(1, 2559, '\P{Is_Blk=__gurmukhi}', "");
Expect(0, 2559, '\P{^Is_Blk=__gurmukhi}', "");
Error('\p{Block=	_Enclosed/a/Ideographic Supplement}');
Error('\P{Block=	_Enclosed/a/Ideographic Supplement}');
Expect(1, 127743, '\p{Block=enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^Block=enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{Block=enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^Block=enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{Block=enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^Block=enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{Block=enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^Block=enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{Block: --enclosed-ideographic	Supplement}', "");
Expect(0, 127743, '\p{^Block: --enclosed-ideographic	Supplement}', "");
Expect(0, 127743, '\P{Block: --enclosed-ideographic	Supplement}', "");
Expect(1, 127743, '\P{^Block: --enclosed-ideographic	Supplement}', "");
Expect(0, 127487, '\p{Block: --enclosed-ideographic	Supplement}', "");
Expect(1, 127487, '\p{^Block: --enclosed-ideographic	Supplement}', "");
Expect(1, 127487, '\P{Block: --enclosed-ideographic	Supplement}', "");
Expect(0, 127487, '\P{^Block: --enclosed-ideographic	Supplement}', "");
Error('\p{Blk=/a/Enclosed_ideographic_SUPPLEMENT}');
Error('\P{Blk=/a/Enclosed_ideographic_SUPPLEMENT}');
Expect(1, 127743, '\p{Blk: enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^Blk: enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{Blk: enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^Blk: enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{Blk: enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^Blk: enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{Blk: enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^Blk: enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{Blk=-EnclosedIDEOGRAPHICsupplement}', "");
Expect(0, 127743, '\p{^Blk=-EnclosedIDEOGRAPHICsupplement}', "");
Expect(0, 127743, '\P{Blk=-EnclosedIDEOGRAPHICsupplement}', "");
Expect(1, 127743, '\P{^Blk=-EnclosedIDEOGRAPHICsupplement}', "");
Expect(0, 127487, '\p{Blk=-EnclosedIDEOGRAPHICsupplement}', "");
Expect(1, 127487, '\p{^Blk=-EnclosedIDEOGRAPHICsupplement}', "");
Expect(1, 127487, '\P{Blk=-EnclosedIDEOGRAPHICsupplement}', "");
Expect(0, 127487, '\P{^Blk=-EnclosedIDEOGRAPHICsupplement}', "");
Error('\p{Is_Block=	/a/ENCLOSED	IDEOGRAPHIC-Supplement}');
Error('\P{Is_Block=	/a/ENCLOSED	IDEOGRAPHIC-Supplement}');
Expect(1, 127743, '\p{Is_Block:   enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^Is_Block:   enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{Is_Block:   enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^Is_Block:   enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{Is_Block:   enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^Is_Block:   enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{Is_Block:   enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^Is_Block:   enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{Is_Block=_Enclosed	Ideographic Supplement}', "");
Expect(0, 127743, '\p{^Is_Block=_Enclosed	Ideographic Supplement}', "");
Expect(0, 127743, '\P{Is_Block=_Enclosed	Ideographic Supplement}', "");
Expect(1, 127743, '\P{^Is_Block=_Enclosed	Ideographic Supplement}', "");
Expect(0, 127487, '\p{Is_Block=_Enclosed	Ideographic Supplement}', "");
Expect(1, 127487, '\p{^Is_Block=_Enclosed	Ideographic Supplement}', "");
Expect(1, 127487, '\P{Is_Block=_Enclosed	Ideographic Supplement}', "");
Expect(0, 127487, '\P{^Is_Block=_Enclosed	Ideographic Supplement}', "");
Error('\p{Is_Blk=_-ENCLOSED:=Ideographic Supplement}');
Error('\P{Is_Blk=_-ENCLOSED:=Ideographic Supplement}');
Expect(1, 127743, '\p{Is_Blk=enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^Is_Blk=enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{Is_Blk=enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^Is_Blk=enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{Is_Blk=enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^Is_Blk=enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{Is_Blk=enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^Is_Blk=enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{Is_Blk=	_ENCLOSED-Ideographic supplement}', "");
Expect(0, 127743, '\p{^Is_Blk=	_ENCLOSED-Ideographic supplement}', "");
Expect(0, 127743, '\P{Is_Blk=	_ENCLOSED-Ideographic supplement}', "");
Expect(1, 127743, '\P{^Is_Blk=	_ENCLOSED-Ideographic supplement}', "");
Expect(0, 127487, '\p{Is_Blk=	_ENCLOSED-Ideographic supplement}', "");
Expect(1, 127487, '\p{^Is_Blk=	_ENCLOSED-Ideographic supplement}', "");
Expect(1, 127487, '\P{Is_Blk=	_ENCLOSED-Ideographic supplement}', "");
Expect(0, 127487, '\P{^Is_Blk=	_ENCLOSED-Ideographic supplement}', "");
Error('\p{Block:   /a/- Phonetic-ExtensionsSUPPLEMENT}');
Error('\P{Block:   /a/- Phonetic-ExtensionsSUPPLEMENT}');
Expect(1, 7615, '\p{Block=phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^Block=phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{Block=phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^Block=phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{Block=phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^Block=phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{Block=phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^Block=phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{Block=	_phonetic	extensionsSupplement}', "");
Expect(0, 7615, '\p{^Block=	_phonetic	extensionsSupplement}', "");
Expect(0, 7615, '\P{Block=	_phonetic	extensionsSupplement}', "");
Expect(1, 7615, '\P{^Block=	_phonetic	extensionsSupplement}', "");
Expect(0, 7551, '\p{Block=	_phonetic	extensionsSupplement}', "");
Expect(1, 7551, '\p{^Block=	_phonetic	extensionsSupplement}', "");
Expect(1, 7551, '\P{Block=	_phonetic	extensionsSupplement}', "");
Expect(0, 7551, '\P{^Block=	_phonetic	extensionsSupplement}', "");
Error('\p{Blk=	phonetic_Extensions-Supplement/a/}');
Error('\P{Blk=	phonetic_Extensions-Supplement/a/}');
Expect(1, 7615, '\p{Blk=phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^Blk=phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{Blk=phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^Blk=phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{Blk=phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^Blk=phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{Blk=phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^Blk=phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{Blk= -Phoneticextensions SUPPLEMENT}', "");
Expect(0, 7615, '\p{^Blk= -Phoneticextensions SUPPLEMENT}', "");
Expect(0, 7615, '\P{Blk= -Phoneticextensions SUPPLEMENT}', "");
Expect(1, 7615, '\P{^Blk= -Phoneticextensions SUPPLEMENT}', "");
Expect(0, 7551, '\p{Blk= -Phoneticextensions SUPPLEMENT}', "");
Expect(1, 7551, '\p{^Blk= -Phoneticextensions SUPPLEMENT}', "");
Expect(1, 7551, '\P{Blk= -Phoneticextensions SUPPLEMENT}', "");
Expect(0, 7551, '\P{^Blk= -Phoneticextensions SUPPLEMENT}', "");
Error('\p{Is_Block=	/a/Phonetic-EXTENSIONS Supplement}');
Error('\P{Is_Block=	/a/Phonetic-EXTENSIONS Supplement}');
Expect(1, 7615, '\p{Is_Block=phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^Is_Block=phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{Is_Block=phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^Is_Block=phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{Is_Block=phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^Is_Block=phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{Is_Block=phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^Is_Block=phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{Is_Block:   Phonetic-Extensions-Supplement}', "");
Expect(0, 7615, '\p{^Is_Block:   Phonetic-Extensions-Supplement}', "");
Expect(0, 7615, '\P{Is_Block:   Phonetic-Extensions-Supplement}', "");
Expect(1, 7615, '\P{^Is_Block:   Phonetic-Extensions-Supplement}', "");
Expect(0, 7551, '\p{Is_Block:   Phonetic-Extensions-Supplement}', "");
Expect(1, 7551, '\p{^Is_Block:   Phonetic-Extensions-Supplement}', "");
Expect(1, 7551, '\P{Is_Block:   Phonetic-Extensions-Supplement}', "");
Expect(0, 7551, '\P{^Is_Block:   Phonetic-Extensions-Supplement}', "");
Error('\p{Is_Blk:   -/a/Phonetic_extensions-Supplement}');
Error('\P{Is_Blk:   -/a/Phonetic_extensions-Supplement}');
Expect(1, 7615, '\p{Is_Blk=phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^Is_Blk=phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{Is_Blk=phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^Is_Blk=phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{Is_Blk=phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^Is_Blk=phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{Is_Blk=phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^Is_Blk=phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{Is_Blk= 	Phonetic	EXTENSIONS SUPPLEMENT}', "");
Expect(0, 7615, '\p{^Is_Blk= 	Phonetic	EXTENSIONS SUPPLEMENT}', "");
Expect(0, 7615, '\P{Is_Blk= 	Phonetic	EXTENSIONS SUPPLEMENT}', "");
Expect(1, 7615, '\P{^Is_Blk= 	Phonetic	EXTENSIONS SUPPLEMENT}', "");
Expect(0, 7551, '\p{Is_Blk= 	Phonetic	EXTENSIONS SUPPLEMENT}', "");
Expect(1, 7551, '\p{^Is_Blk= 	Phonetic	EXTENSIONS SUPPLEMENT}', "");
Expect(1, 7551, '\P{Is_Blk= 	Phonetic	EXTENSIONS SUPPLEMENT}', "");
Expect(0, 7551, '\P{^Is_Blk= 	Phonetic	EXTENSIONS SUPPLEMENT}', "");
Error('\p{Block= /a/greek_Extended}');
Error('\P{Block= /a/greek_Extended}');
Expect(1, 8191, '\p{Block=greekextended}', "");
Expect(0, 8191, '\p{^Block=greekextended}', "");
Expect(0, 8191, '\P{Block=greekextended}', "");
Expect(1, 8191, '\P{^Block=greekextended}', "");
Expect(0, 7935, '\p{Block=greekextended}', "");
Expect(1, 7935, '\p{^Block=greekextended}', "");
Expect(1, 7935, '\P{Block=greekextended}', "");
Expect(0, 7935, '\P{^Block=greekextended}', "");
Expect(1, 8191, '\p{Block=Greek	Extended}', "");
Expect(0, 8191, '\p{^Block=Greek	Extended}', "");
Expect(0, 8191, '\P{Block=Greek	Extended}', "");
Expect(1, 8191, '\P{^Block=Greek	Extended}', "");
Expect(0, 7935, '\p{Block=Greek	Extended}', "");
Expect(1, 7935, '\p{^Block=Greek	Extended}', "");
Expect(1, 7935, '\P{Block=Greek	Extended}', "");
Expect(0, 7935, '\P{^Block=Greek	Extended}', "");
Error('\p{Blk=_ GREEK_EXTENDED/a/}');
Error('\P{Blk=_ GREEK_EXTENDED/a/}');
Expect(1, 8191, '\p{Blk=greekextended}', "");
Expect(0, 8191, '\p{^Blk=greekextended}', "");
Expect(0, 8191, '\P{Blk=greekextended}', "");
Expect(1, 8191, '\P{^Blk=greekextended}', "");
Expect(0, 7935, '\p{Blk=greekextended}', "");
Expect(1, 7935, '\p{^Blk=greekextended}', "");
Expect(1, 7935, '\P{Blk=greekextended}', "");
Expect(0, 7935, '\P{^Blk=greekextended}', "");
Expect(1, 8191, '\p{Blk=_Greek_extended}', "");
Expect(0, 8191, '\p{^Blk=_Greek_extended}', "");
Expect(0, 8191, '\P{Blk=_Greek_extended}', "");
Expect(1, 8191, '\P{^Blk=_Greek_extended}', "");
Expect(0, 7935, '\p{Blk=_Greek_extended}', "");
Expect(1, 7935, '\p{^Blk=_Greek_extended}', "");
Expect(1, 7935, '\P{Blk=_Greek_extended}', "");
Expect(0, 7935, '\P{^Blk=_Greek_extended}', "");
Error('\p{Is_Block=_-greek extended/a/}');
Error('\P{Is_Block=_-greek extended/a/}');
Expect(1, 8191, '\p{Is_Block=greekextended}', "");
Expect(0, 8191, '\p{^Is_Block=greekextended}', "");
Expect(0, 8191, '\P{Is_Block=greekextended}', "");
Expect(1, 8191, '\P{^Is_Block=greekextended}', "");
Expect(0, 7935, '\p{Is_Block=greekextended}', "");
Expect(1, 7935, '\p{^Is_Block=greekextended}', "");
Expect(1, 7935, '\P{Is_Block=greekextended}', "");
Expect(0, 7935, '\P{^Is_Block=greekextended}', "");
Expect(1, 8191, '\p{Is_Block=	-GREEK	Extended}', "");
Expect(0, 8191, '\p{^Is_Block=	-GREEK	Extended}', "");
Expect(0, 8191, '\P{Is_Block=	-GREEK	Extended}', "");
Expect(1, 8191, '\P{^Is_Block=	-GREEK	Extended}', "");
Expect(0, 7935, '\p{Is_Block=	-GREEK	Extended}', "");
Expect(1, 7935, '\p{^Is_Block=	-GREEK	Extended}', "");
Expect(1, 7935, '\P{Is_Block=	-GREEK	Extended}', "");
Expect(0, 7935, '\P{^Is_Block=	-GREEK	Extended}', "");
Error('\p{Is_Blk=-	Greek/a/Extended}');
Error('\P{Is_Blk=-	Greek/a/Extended}');
Expect(1, 8191, '\p{Is_Blk=greekextended}', "");
Expect(0, 8191, '\p{^Is_Blk=greekextended}', "");
Expect(0, 8191, '\P{Is_Blk=greekextended}', "");
Expect(1, 8191, '\P{^Is_Blk=greekextended}', "");
Expect(0, 7935, '\p{Is_Blk=greekextended}', "");
Expect(1, 7935, '\p{^Is_Blk=greekextended}', "");
Expect(1, 7935, '\P{Is_Blk=greekextended}', "");
Expect(0, 7935, '\P{^Is_Blk=greekextended}', "");
Expect(1, 8191, '\p{Is_Blk= greek	extended}', "");
Expect(0, 8191, '\p{^Is_Blk= greek	extended}', "");
Expect(0, 8191, '\P{Is_Blk= greek	extended}', "");
Expect(1, 8191, '\P{^Is_Blk= greek	extended}', "");
Expect(0, 7935, '\p{Is_Blk= greek	extended}', "");
Expect(1, 7935, '\p{^Is_Blk= greek	extended}', "");
Expect(1, 7935, '\P{Is_Blk= greek	extended}', "");
Expect(0, 7935, '\P{^Is_Blk= greek	extended}', "");
Error('\p{Block=-Deseret:=}');
Error('\P{Block=-Deseret:=}');
Expect(1, 66639, '\p{Block=deseret}', "");
Expect(0, 66639, '\p{^Block=deseret}', "");
Expect(0, 66639, '\P{Block=deseret}', "");
Expect(1, 66639, '\P{^Block=deseret}', "");
Expect(0, 66559, '\p{Block=deseret}', "");
Expect(1, 66559, '\p{^Block=deseret}', "");
Expect(1, 66559, '\P{Block=deseret}', "");
Expect(0, 66559, '\P{^Block=deseret}', "");
Expect(1, 66639, '\p{Block: _DESERET}', "");
Expect(0, 66639, '\p{^Block: _DESERET}', "");
Expect(0, 66639, '\P{Block: _DESERET}', "");
Expect(1, 66639, '\P{^Block: _DESERET}', "");
Expect(0, 66559, '\p{Block: _DESERET}', "");
Expect(1, 66559, '\p{^Block: _DESERET}', "");
Expect(1, 66559, '\P{Block: _DESERET}', "");
Expect(0, 66559, '\P{^Block: _DESERET}', "");
Error('\p{Blk=/a/	-DESERET}');
Error('\P{Blk=/a/	-DESERET}');
Expect(1, 66639, '\p{Blk=deseret}', "");
Expect(0, 66639, '\p{^Blk=deseret}', "");
Expect(0, 66639, '\P{Blk=deseret}', "");
Expect(1, 66639, '\P{^Blk=deseret}', "");
Expect(0, 66559, '\p{Blk=deseret}', "");
Expect(1, 66559, '\p{^Blk=deseret}', "");
Expect(1, 66559, '\P{Blk=deseret}', "");
Expect(0, 66559, '\P{^Blk=deseret}', "");
Expect(1, 66639, '\p{Blk=--deseret}', "");
Expect(0, 66639, '\p{^Blk=--deseret}', "");
Expect(0, 66639, '\P{Blk=--deseret}', "");
Expect(1, 66639, '\P{^Blk=--deseret}', "");
Expect(0, 66559, '\p{Blk=--deseret}', "");
Expect(1, 66559, '\p{^Blk=--deseret}', "");
Expect(1, 66559, '\P{Blk=--deseret}', "");
Expect(0, 66559, '\P{^Blk=--deseret}', "");
Error('\p{Is_Block=	-Deseret/a/}');
Error('\P{Is_Block=	-Deseret/a/}');
Expect(1, 66639, '\p{Is_Block=deseret}', "");
Expect(0, 66639, '\p{^Is_Block=deseret}', "");
Expect(0, 66639, '\P{Is_Block=deseret}', "");
Expect(1, 66639, '\P{^Is_Block=deseret}', "");
Expect(0, 66559, '\p{Is_Block=deseret}', "");
Expect(1, 66559, '\p{^Is_Block=deseret}', "");
Expect(1, 66559, '\P{Is_Block=deseret}', "");
Expect(0, 66559, '\P{^Is_Block=deseret}', "");
Expect(1, 66639, '\p{Is_Block= -deseret}', "");
Expect(0, 66639, '\p{^Is_Block= -deseret}', "");
Expect(0, 66639, '\P{Is_Block= -deseret}', "");
Expect(1, 66639, '\P{^Is_Block= -deseret}', "");
Expect(0, 66559, '\p{Is_Block= -deseret}', "");
Expect(1, 66559, '\p{^Is_Block= -deseret}', "");
Expect(1, 66559, '\P{Is_Block= -deseret}', "");
Expect(0, 66559, '\P{^Is_Block= -deseret}', "");
Error('\p{Is_Blk= /a/DESERET}');
Error('\P{Is_Blk= /a/DESERET}');
Expect(1, 66639, '\p{Is_Blk=deseret}', "");
Expect(0, 66639, '\p{^Is_Blk=deseret}', "");
Expect(0, 66639, '\P{Is_Blk=deseret}', "");
Expect(1, 66639, '\P{^Is_Blk=deseret}', "");
Expect(0, 66559, '\p{Is_Blk=deseret}', "");
Expect(1, 66559, '\p{^Is_Blk=deseret}', "");
Expect(1, 66559, '\P{Is_Blk=deseret}', "");
Expect(0, 66559, '\P{^Is_Blk=deseret}', "");
Expect(1, 66639, '\p{Is_Blk=	DESERET}', "");
Expect(0, 66639, '\p{^Is_Blk=	DESERET}', "");
Expect(0, 66639, '\P{Is_Blk=	DESERET}', "");
Expect(1, 66639, '\P{^Is_Blk=	DESERET}', "");
Expect(0, 66559, '\p{Is_Blk=	DESERET}', "");
Expect(1, 66559, '\p{^Is_Blk=	DESERET}', "");
Expect(1, 66559, '\P{Is_Blk=	DESERET}', "");
Expect(0, 66559, '\P{^Is_Blk=	DESERET}', "");
Error('\p{Block=	:=TAI_Tham}');
Error('\P{Block=	:=TAI_Tham}');
Expect(1, 6831, '\p{Block=taitham}', "");
Expect(0, 6831, '\p{^Block=taitham}', "");
Expect(0, 6831, '\P{Block=taitham}', "");
Expect(1, 6831, '\P{^Block=taitham}', "");
Expect(0, 6687, '\p{Block=taitham}', "");
Expect(1, 6687, '\p{^Block=taitham}', "");
Expect(1, 6687, '\P{Block=taitham}', "");
Expect(0, 6687, '\P{^Block=taitham}', "");
Expect(1, 6831, '\p{Block=- Tai_Tham}', "");
Expect(0, 6831, '\p{^Block=- Tai_Tham}', "");
Expect(0, 6831, '\P{Block=- Tai_Tham}', "");
Expect(1, 6831, '\P{^Block=- Tai_Tham}', "");
Expect(0, 6687, '\p{Block=- Tai_Tham}', "");
Expect(1, 6687, '\p{^Block=- Tai_Tham}', "");
Expect(1, 6687, '\P{Block=- Tai_Tham}', "");
Expect(0, 6687, '\P{^Block=- Tai_Tham}', "");
Error('\p{Blk=_/a/tai-THAM}');
Error('\P{Blk=_/a/tai-THAM}');
Expect(1, 6831, '\p{Blk:taitham}', "");
Expect(0, 6831, '\p{^Blk:taitham}', "");
Expect(0, 6831, '\P{Blk:taitham}', "");
Expect(1, 6831, '\P{^Blk:taitham}', "");
Expect(0, 6687, '\p{Blk:taitham}', "");
Expect(1, 6687, '\p{^Blk:taitham}', "");
Expect(1, 6687, '\P{Blk:taitham}', "");
Expect(0, 6687, '\P{^Blk:taitham}', "");
Expect(1, 6831, '\p{Blk=		tai Tham}', "");
Expect(0, 6831, '\p{^Blk=		tai Tham}', "");
Expect(0, 6831, '\P{Blk=		tai Tham}', "");
Expect(1, 6831, '\P{^Blk=		tai Tham}', "");
Expect(0, 6687, '\p{Blk=		tai Tham}', "");
Expect(1, 6687, '\p{^Blk=		tai Tham}', "");
Expect(1, 6687, '\P{Blk=		tai Tham}', "");
Expect(0, 6687, '\P{^Blk=		tai Tham}', "");
Error('\p{Is_Block:	-:=TAItham}');
Error('\P{Is_Block:	-:=TAItham}');
Expect(1, 6831, '\p{Is_Block=taitham}', "");
Expect(0, 6831, '\p{^Is_Block=taitham}', "");
Expect(0, 6831, '\P{Is_Block=taitham}', "");
Expect(1, 6831, '\P{^Is_Block=taitham}', "");
Expect(0, 6687, '\p{Is_Block=taitham}', "");
Expect(1, 6687, '\p{^Is_Block=taitham}', "");
Expect(1, 6687, '\P{Is_Block=taitham}', "");
Expect(0, 6687, '\P{^Is_Block=taitham}', "");
Expect(1, 6831, '\p{Is_Block=-Tai	THAM}', "");
Expect(0, 6831, '\p{^Is_Block=-Tai	THAM}', "");
Expect(0, 6831, '\P{Is_Block=-Tai	THAM}', "");
Expect(1, 6831, '\P{^Is_Block=-Tai	THAM}', "");
Expect(0, 6687, '\p{Is_Block=-Tai	THAM}', "");
Expect(1, 6687, '\p{^Is_Block=-Tai	THAM}', "");
Expect(1, 6687, '\P{Is_Block=-Tai	THAM}', "");
Expect(0, 6687, '\P{^Is_Block=-Tai	THAM}', "");
Error('\p{Is_Blk= /a/TaiTham}');
Error('\P{Is_Blk= /a/TaiTham}');
Expect(1, 6831, '\p{Is_Blk:taitham}', "");
Expect(0, 6831, '\p{^Is_Blk:taitham}', "");
Expect(0, 6831, '\P{Is_Blk:taitham}', "");
Expect(1, 6831, '\P{^Is_Blk:taitham}', "");
Expect(0, 6687, '\p{Is_Blk:taitham}', "");
Expect(1, 6687, '\p{^Is_Blk:taitham}', "");
Expect(1, 6687, '\P{Is_Blk:taitham}', "");
Expect(0, 6687, '\P{^Is_Blk:taitham}', "");
Expect(1, 6831, '\p{Is_Blk:   -Tai-Tham}', "");
Expect(0, 6831, '\p{^Is_Blk:   -Tai-Tham}', "");
Expect(0, 6831, '\P{Is_Blk:   -Tai-Tham}', "");
Expect(1, 6831, '\P{^Is_Blk:   -Tai-Tham}', "");
Expect(0, 6687, '\p{Is_Blk:   -Tai-Tham}', "");
Expect(1, 6687, '\p{^Is_Blk:   -Tai-Tham}', "");
Expect(1, 6687, '\P{Is_Blk:   -Tai-Tham}', "");
Expect(0, 6687, '\P{^Is_Blk:   -Tai-Tham}', "");
Error('\p{Block=:= TAGBANWA}');
Error('\P{Block=:= TAGBANWA}');
Expect(1, 6015, '\p{Block=tagbanwa}', "");
Expect(0, 6015, '\p{^Block=tagbanwa}', "");
Expect(0, 6015, '\P{Block=tagbanwa}', "");
Expect(1, 6015, '\P{^Block=tagbanwa}', "");
Expect(0, 5983, '\p{Block=tagbanwa}', "");
Expect(1, 5983, '\p{^Block=tagbanwa}', "");
Expect(1, 5983, '\P{Block=tagbanwa}', "");
Expect(0, 5983, '\P{^Block=tagbanwa}', "");
Expect(1, 6015, '\p{Block: -	Tagbanwa}', "");
Expect(0, 6015, '\p{^Block: -	Tagbanwa}', "");
Expect(0, 6015, '\P{Block: -	Tagbanwa}', "");
Expect(1, 6015, '\P{^Block: -	Tagbanwa}', "");
Expect(0, 5983, '\p{Block: -	Tagbanwa}', "");
Expect(1, 5983, '\p{^Block: -	Tagbanwa}', "");
Expect(1, 5983, '\P{Block: -	Tagbanwa}', "");
Expect(0, 5983, '\P{^Block: -	Tagbanwa}', "");
Error('\p{Blk= :=tagbanwa}');
Error('\P{Blk= :=tagbanwa}');
Expect(1, 6015, '\p{Blk=tagbanwa}', "");
Expect(0, 6015, '\p{^Blk=tagbanwa}', "");
Expect(0, 6015, '\P{Blk=tagbanwa}', "");
Expect(1, 6015, '\P{^Blk=tagbanwa}', "");
Expect(0, 5983, '\p{Blk=tagbanwa}', "");
Expect(1, 5983, '\p{^Blk=tagbanwa}', "");
Expect(1, 5983, '\P{Blk=tagbanwa}', "");
Expect(0, 5983, '\P{^Blk=tagbanwa}', "");
Expect(1, 6015, '\p{Blk=	Tagbanwa}', "");
Expect(0, 6015, '\p{^Blk=	Tagbanwa}', "");
Expect(0, 6015, '\P{Blk=	Tagbanwa}', "");
Expect(1, 6015, '\P{^Blk=	Tagbanwa}', "");
Expect(0, 5983, '\p{Blk=	Tagbanwa}', "");
Expect(1, 5983, '\p{^Blk=	Tagbanwa}', "");
Expect(1, 5983, '\P{Blk=	Tagbanwa}', "");
Expect(0, 5983, '\P{^Blk=	Tagbanwa}', "");
Error('\p{Is_Block= Tagbanwa:=}');
Error('\P{Is_Block= Tagbanwa:=}');
Expect(1, 6015, '\p{Is_Block:tagbanwa}', "");
Expect(0, 6015, '\p{^Is_Block:tagbanwa}', "");
Expect(0, 6015, '\P{Is_Block:tagbanwa}', "");
Expect(1, 6015, '\P{^Is_Block:tagbanwa}', "");
Expect(0, 5983, '\p{Is_Block:tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Block:tagbanwa}', "");
Expect(1, 5983, '\P{Is_Block:tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Block:tagbanwa}', "");
Expect(1, 6015, '\p{Is_Block=-_TAGBANWA}', "");
Expect(0, 6015, '\p{^Is_Block=-_TAGBANWA}', "");
Expect(0, 6015, '\P{Is_Block=-_TAGBANWA}', "");
Expect(1, 6015, '\P{^Is_Block=-_TAGBANWA}', "");
Expect(0, 5983, '\p{Is_Block=-_TAGBANWA}', "");
Expect(1, 5983, '\p{^Is_Block=-_TAGBANWA}', "");
Expect(1, 5983, '\P{Is_Block=-_TAGBANWA}', "");
Expect(0, 5983, '\P{^Is_Block=-_TAGBANWA}', "");
Error('\p{Is_Blk=/a/Tagbanwa}');
Error('\P{Is_Blk=/a/Tagbanwa}');
Expect(1, 6015, '\p{Is_Blk=tagbanwa}', "");
Expect(0, 6015, '\p{^Is_Blk=tagbanwa}', "");
Expect(0, 6015, '\P{Is_Blk=tagbanwa}', "");
Expect(1, 6015, '\P{^Is_Blk=tagbanwa}', "");
Expect(0, 5983, '\p{Is_Blk=tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Blk=tagbanwa}', "");
Expect(1, 5983, '\P{Is_Blk=tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Blk=tagbanwa}', "");
Expect(1, 6015, '\p{Is_Blk= -tagbanwa}', "");
Expect(0, 6015, '\p{^Is_Blk= -tagbanwa}', "");
Expect(0, 6015, '\P{Is_Blk= -tagbanwa}', "");
Expect(1, 6015, '\P{^Is_Blk= -tagbanwa}', "");
Expect(0, 5983, '\p{Is_Blk= -tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Blk= -tagbanwa}', "");
Expect(1, 5983, '\P{Is_Blk= -tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Blk= -tagbanwa}', "");
Error('\p{Block=:=__ARABIC}');
Error('\P{Block=:=__ARABIC}');
Expect(1, 1791, '\p{Block=arabic}', "");
Expect(0, 1791, '\p{^Block=arabic}', "");
Expect(0, 1791, '\P{Block=arabic}', "");
Expect(1, 1791, '\P{^Block=arabic}', "");
Expect(0, 1535, '\p{Block=arabic}', "");
Expect(1, 1535, '\p{^Block=arabic}', "");
Expect(1, 1535, '\P{Block=arabic}', "");
Expect(0, 1535, '\P{^Block=arabic}', "");
Expect(1, 1791, '\p{Block= arabic}', "");
Expect(0, 1791, '\p{^Block= arabic}', "");
Expect(0, 1791, '\P{Block= arabic}', "");
Expect(1, 1791, '\P{^Block= arabic}', "");
Expect(0, 1535, '\p{Block= arabic}', "");
Expect(1, 1535, '\p{^Block= arabic}', "");
Expect(1, 1535, '\P{Block= arabic}', "");
Expect(0, 1535, '\P{^Block= arabic}', "");
Error('\p{Blk=:=_ arabic}');
Error('\P{Blk=:=_ arabic}');
Expect(1, 1791, '\p{Blk:arabic}', "");
Expect(0, 1791, '\p{^Blk:arabic}', "");
Expect(0, 1791, '\P{Blk:arabic}', "");
Expect(1, 1791, '\P{^Blk:arabic}', "");
Expect(0, 1535, '\p{Blk:arabic}', "");
Expect(1, 1535, '\p{^Blk:arabic}', "");
Expect(1, 1535, '\P{Blk:arabic}', "");
Expect(0, 1535, '\P{^Blk:arabic}', "");
Expect(1, 1791, '\p{Blk=	arabic}', "");
Expect(0, 1791, '\p{^Blk=	arabic}', "");
Expect(0, 1791, '\P{Blk=	arabic}', "");
Expect(1, 1791, '\P{^Blk=	arabic}', "");
Expect(0, 1535, '\p{Blk=	arabic}', "");
Expect(1, 1535, '\p{^Blk=	arabic}', "");
Expect(1, 1535, '\P{Blk=	arabic}', "");
Expect(0, 1535, '\P{^Blk=	arabic}', "");
Error('\p{Is_Block=-/a/Arabic}');
Error('\P{Is_Block=-/a/Arabic}');
Expect(1, 1791, '\p{Is_Block=arabic}', "");
Expect(0, 1791, '\p{^Is_Block=arabic}', "");
Expect(0, 1791, '\P{Is_Block=arabic}', "");
Expect(1, 1791, '\P{^Is_Block=arabic}', "");
Expect(0, 1535, '\p{Is_Block=arabic}', "");
Expect(1, 1535, '\p{^Is_Block=arabic}', "");
Expect(1, 1535, '\P{Is_Block=arabic}', "");
Expect(0, 1535, '\P{^Is_Block=arabic}', "");
Expect(1, 1791, '\p{Is_Block=  ARABIC}', "");
Expect(0, 1791, '\p{^Is_Block=  ARABIC}', "");
Expect(0, 1791, '\P{Is_Block=  ARABIC}', "");
Expect(1, 1791, '\P{^Is_Block=  ARABIC}', "");
Expect(0, 1535, '\p{Is_Block=  ARABIC}', "");
Expect(1, 1535, '\p{^Is_Block=  ARABIC}', "");
Expect(1, 1535, '\P{Is_Block=  ARABIC}', "");
Expect(0, 1535, '\P{^Is_Block=  ARABIC}', "");
Error('\p{Is_Blk=	:=Arabic}');
Error('\P{Is_Blk=	:=Arabic}');
Expect(1, 1791, '\p{Is_Blk=arabic}', "");
Expect(0, 1791, '\p{^Is_Blk=arabic}', "");
Expect(0, 1791, '\P{Is_Blk=arabic}', "");
Expect(1, 1791, '\P{^Is_Blk=arabic}', "");
Expect(0, 1535, '\p{Is_Blk=arabic}', "");
Expect(1, 1535, '\p{^Is_Blk=arabic}', "");
Expect(1, 1535, '\P{Is_Blk=arabic}', "");
Expect(0, 1535, '\P{^Is_Blk=arabic}', "");
Expect(1, 1791, '\p{Is_Blk=	ARABIC}', "");
Expect(0, 1791, '\p{^Is_Blk=	ARABIC}', "");
Expect(0, 1791, '\P{Is_Blk=	ARABIC}', "");
Expect(1, 1791, '\P{^Is_Blk=	ARABIC}', "");
Expect(0, 1535, '\p{Is_Blk=	ARABIC}', "");
Expect(1, 1535, '\p{^Is_Blk=	ARABIC}', "");
Expect(1, 1535, '\P{Is_Blk=	ARABIC}', "");
Expect(0, 1535, '\P{^Is_Blk=	ARABIC}', "");
Error('\p{Block:  /a/KatakanaPhonetic	Extensions}');
Error('\P{Block:  /a/KatakanaPhonetic	Extensions}');
Expect(1, 12799, '\p{Block=katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^Block=katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{Block=katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^Block=katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{Block=katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^Block=katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{Block=katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^Block=katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{Block=	-katakana-PHONETICextensions}', "");
Expect(0, 12799, '\p{^Block=	-katakana-PHONETICextensions}', "");
Expect(0, 12799, '\P{Block=	-katakana-PHONETICextensions}', "");
Expect(1, 12799, '\P{^Block=	-katakana-PHONETICextensions}', "");
Expect(0, 12783, '\p{Block=	-katakana-PHONETICextensions}', "");
Expect(1, 12783, '\p{^Block=	-katakana-PHONETICextensions}', "");
Expect(1, 12783, '\P{Block=	-katakana-PHONETICextensions}', "");
Expect(0, 12783, '\P{^Block=	-katakana-PHONETICextensions}', "");
Error('\p{Blk=-KATAKANA_Phonetic/a/extensions}');
Error('\P{Blk=-KATAKANA_Phonetic/a/extensions}');
Expect(1, 12799, '\p{Blk:   katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^Blk:   katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{Blk:   katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^Blk:   katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{Blk:   katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^Blk:   katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{Blk:   katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^Blk:   katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{Blk= Katakana-PHONETIC_Extensions}', "");
Expect(0, 12799, '\p{^Blk= Katakana-PHONETIC_Extensions}', "");
Expect(0, 12799, '\P{Blk= Katakana-PHONETIC_Extensions}', "");
Expect(1, 12799, '\P{^Blk= Katakana-PHONETIC_Extensions}', "");
Expect(0, 12783, '\p{Blk= Katakana-PHONETIC_Extensions}', "");
Expect(1, 12783, '\p{^Blk= Katakana-PHONETIC_Extensions}', "");
Expect(1, 12783, '\P{Blk= Katakana-PHONETIC_Extensions}', "");
Expect(0, 12783, '\P{^Blk= Katakana-PHONETIC_Extensions}', "");
Error('\p{Is_Block=/a/ -Katakana Phonetic-extensions}');
Error('\P{Is_Block=/a/ -Katakana Phonetic-extensions}');
Expect(1, 12799, '\p{Is_Block=katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^Is_Block=katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{Is_Block=katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^Is_Block=katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{Is_Block=katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^Is_Block=katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{Is_Block=katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^Is_Block=katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{Is_Block=-_Katakana-PHONETIC	Extensions}', "");
Expect(0, 12799, '\p{^Is_Block=-_Katakana-PHONETIC	Extensions}', "");
Expect(0, 12799, '\P{Is_Block=-_Katakana-PHONETIC	Extensions}', "");
Expect(1, 12799, '\P{^Is_Block=-_Katakana-PHONETIC	Extensions}', "");
Expect(0, 12783, '\p{Is_Block=-_Katakana-PHONETIC	Extensions}', "");
Expect(1, 12783, '\p{^Is_Block=-_Katakana-PHONETIC	Extensions}', "");
Expect(1, 12783, '\P{Is_Block=-_Katakana-PHONETIC	Extensions}', "");
Expect(0, 12783, '\P{^Is_Block=-_Katakana-PHONETIC	Extensions}', "");
Error('\p{Is_Blk=--Katakana:=phonetic EXTENSIONS}');
Error('\P{Is_Blk=--Katakana:=phonetic EXTENSIONS}');
Expect(1, 12799, '\p{Is_Blk=katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^Is_Blk=katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{Is_Blk=katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^Is_Blk=katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{Is_Blk=katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^Is_Blk=katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{Is_Blk=katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^Is_Blk=katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{Is_Blk=_katakana-PHONETIC Extensions}', "");
Expect(0, 12799, '\p{^Is_Blk=_katakana-PHONETIC Extensions}', "");
Expect(0, 12799, '\P{Is_Blk=_katakana-PHONETIC Extensions}', "");
Expect(1, 12799, '\P{^Is_Blk=_katakana-PHONETIC Extensions}', "");
Expect(0, 12783, '\p{Is_Blk=_katakana-PHONETIC Extensions}', "");
Expect(1, 12783, '\p{^Is_Blk=_katakana-PHONETIC Extensions}', "");
Expect(1, 12783, '\P{Is_Blk=_katakana-PHONETIC Extensions}', "");
Expect(0, 12783, '\P{^Is_Blk=_katakana-PHONETIC Extensions}', "");
Error('\p{Block=	Letterlike symbols/a/}');
Error('\P{Block=	Letterlike symbols/a/}');
Expect(1, 8527, '\p{Block=letterlikesymbols}', "");
Expect(0, 8527, '\p{^Block=letterlikesymbols}', "");
Expect(0, 8527, '\P{Block=letterlikesymbols}', "");
Expect(1, 8527, '\P{^Block=letterlikesymbols}', "");
Expect(0, 8447, '\p{Block=letterlikesymbols}', "");
Expect(1, 8447, '\p{^Block=letterlikesymbols}', "");
Expect(1, 8447, '\P{Block=letterlikesymbols}', "");
Expect(0, 8447, '\P{^Block=letterlikesymbols}', "");
Expect(1, 8527, '\p{Block= Letterlike	Symbols}', "");
Expect(0, 8527, '\p{^Block= Letterlike	Symbols}', "");
Expect(0, 8527, '\P{Block= Letterlike	Symbols}', "");
Expect(1, 8527, '\P{^Block= Letterlike	Symbols}', "");
Expect(0, 8447, '\p{Block= Letterlike	Symbols}', "");
Expect(1, 8447, '\p{^Block= Letterlike	Symbols}', "");
Expect(1, 8447, '\P{Block= Letterlike	Symbols}', "");
Expect(0, 8447, '\P{^Block= Letterlike	Symbols}', "");
Error('\p{Blk= -Letterlikesymbols/a/}');
Error('\P{Blk= -Letterlikesymbols/a/}');
Expect(1, 8527, '\p{Blk=letterlikesymbols}', "");
Expect(0, 8527, '\p{^Blk=letterlikesymbols}', "");
Expect(0, 8527, '\P{Blk=letterlikesymbols}', "");
Expect(1, 8527, '\P{^Blk=letterlikesymbols}', "");
Expect(0, 8447, '\p{Blk=letterlikesymbols}', "");
Expect(1, 8447, '\p{^Blk=letterlikesymbols}', "");
Expect(1, 8447, '\P{Blk=letterlikesymbols}', "");
Expect(0, 8447, '\P{^Blk=letterlikesymbols}', "");
Expect(1, 8527, '\p{Blk=-_LETTERLIKE SYMBOLS}', "");
Expect(0, 8527, '\p{^Blk=-_LETTERLIKE SYMBOLS}', "");
Expect(0, 8527, '\P{Blk=-_LETTERLIKE SYMBOLS}', "");
Expect(1, 8527, '\P{^Blk=-_LETTERLIKE SYMBOLS}', "");
Expect(0, 8447, '\p{Blk=-_LETTERLIKE SYMBOLS}', "");
Expect(1, 8447, '\p{^Blk=-_LETTERLIKE SYMBOLS}', "");
Expect(1, 8447, '\P{Blk=-_LETTERLIKE SYMBOLS}', "");
Expect(0, 8447, '\P{^Blk=-_LETTERLIKE SYMBOLS}', "");
Error('\p{Is_Block=:= 	LETTERLIKE_SYMBOLS}');
Error('\P{Is_Block=:= 	LETTERLIKE_SYMBOLS}');
Expect(1, 8527, '\p{Is_Block=letterlikesymbols}', "");
Expect(0, 8527, '\p{^Is_Block=letterlikesymbols}', "");
Expect(0, 8527, '\P{Is_Block=letterlikesymbols}', "");
Expect(1, 8527, '\P{^Is_Block=letterlikesymbols}', "");
Expect(0, 8447, '\p{Is_Block=letterlikesymbols}', "");
Expect(1, 8447, '\p{^Is_Block=letterlikesymbols}', "");
Expect(1, 8447, '\P{Is_Block=letterlikesymbols}', "");
Expect(0, 8447, '\P{^Is_Block=letterlikesymbols}', "");
Expect(1, 8527, '\p{Is_Block:	 _Letterlike_Symbols}', "");
Expect(0, 8527, '\p{^Is_Block:	 _Letterlike_Symbols}', "");
Expect(0, 8527, '\P{Is_Block:	 _Letterlike_Symbols}', "");
Expect(1, 8527, '\P{^Is_Block:	 _Letterlike_Symbols}', "");
Expect(0, 8447, '\p{Is_Block:	 _Letterlike_Symbols}', "");
Expect(1, 8447, '\p{^Is_Block:	 _Letterlike_Symbols}', "");
Expect(1, 8447, '\P{Is_Block:	 _Letterlike_Symbols}', "");
Expect(0, 8447, '\P{^Is_Block:	 _Letterlike_Symbols}', "");
Error('\p{Is_Blk:   _	LetterlikeSymbols:=}');
Error('\P{Is_Blk:   _	LetterlikeSymbols:=}');
Expect(1, 8527, '\p{Is_Blk=letterlikesymbols}', "");
Expect(0, 8527, '\p{^Is_Blk=letterlikesymbols}', "");
Expect(0, 8527, '\P{Is_Blk=letterlikesymbols}', "");
Expect(1, 8527, '\P{^Is_Blk=letterlikesymbols}', "");
Expect(0, 8447, '\p{Is_Blk=letterlikesymbols}', "");
Expect(1, 8447, '\p{^Is_Blk=letterlikesymbols}', "");
Expect(1, 8447, '\P{Is_Blk=letterlikesymbols}', "");
Expect(0, 8447, '\P{^Is_Blk=letterlikesymbols}', "");
Expect(1, 8527, '\p{Is_Blk=_ letterlikeSymbols}', "");
Expect(0, 8527, '\p{^Is_Blk=_ letterlikeSymbols}', "");
Expect(0, 8527, '\P{Is_Blk=_ letterlikeSymbols}', "");
Expect(1, 8527, '\P{^Is_Blk=_ letterlikeSymbols}', "");
Expect(0, 8447, '\p{Is_Blk=_ letterlikeSymbols}', "");
Expect(1, 8447, '\p{^Is_Blk=_ letterlikeSymbols}', "");
Expect(1, 8447, '\P{Is_Blk=_ letterlikeSymbols}', "");
Expect(0, 8447, '\P{^Is_Blk=_ letterlikeSymbols}', "");
Error('\p{Block=	latin:=Extended_C}');
Error('\P{Block=	latin:=Extended_C}');
Expect(1, 11391, '\p{Block=latinextendedc}', "");
Expect(0, 11391, '\p{^Block=latinextendedc}', "");
Expect(0, 11391, '\P{Block=latinextendedc}', "");
Expect(1, 11391, '\P{^Block=latinextendedc}', "");
Expect(0, 11359, '\p{Block=latinextendedc}', "");
Expect(1, 11359, '\p{^Block=latinextendedc}', "");
Expect(1, 11359, '\P{Block=latinextendedc}', "");
Expect(0, 11359, '\P{^Block=latinextendedc}', "");
Expect(1, 11391, '\p{Block= -latin	extended_c}', "");
Expect(0, 11391, '\p{^Block= -latin	extended_c}', "");
Expect(0, 11391, '\P{Block= -latin	extended_c}', "");
Expect(1, 11391, '\P{^Block= -latin	extended_c}', "");
Expect(0, 11359, '\p{Block= -latin	extended_c}', "");
Expect(1, 11359, '\p{^Block= -latin	extended_c}', "");
Expect(1, 11359, '\P{Block= -latin	extended_c}', "");
Expect(0, 11359, '\P{^Block= -latin	extended_c}', "");
Error('\p{Blk=latin-extended_C:=}');
Error('\P{Blk=latin-extended_C:=}');
Expect(1, 11391, '\p{Blk=latinextendedc}', "");
Expect(0, 11391, '\p{^Blk=latinextendedc}', "");
Expect(0, 11391, '\P{Blk=latinextendedc}', "");
Expect(1, 11391, '\P{^Blk=latinextendedc}', "");
Expect(0, 11359, '\p{Blk=latinextendedc}', "");
Expect(1, 11359, '\p{^Blk=latinextendedc}', "");
Expect(1, 11359, '\P{Blk=latinextendedc}', "");
Expect(0, 11359, '\P{^Blk=latinextendedc}', "");
Expect(1, 11391, '\p{Blk=_LATINEXTENDED-C}', "");
Expect(0, 11391, '\p{^Blk=_LATINEXTENDED-C}', "");
Expect(0, 11391, '\P{Blk=_LATINEXTENDED-C}', "");
Expect(1, 11391, '\P{^Blk=_LATINEXTENDED-C}', "");
Expect(0, 11359, '\p{Blk=_LATINEXTENDED-C}', "");
Expect(1, 11359, '\p{^Blk=_LATINEXTENDED-C}', "");
Expect(1, 11359, '\P{Blk=_LATINEXTENDED-C}', "");
Expect(0, 11359, '\P{^Blk=_LATINEXTENDED-C}', "");
Error('\p{Is_Block=_ Latin:=Extended_C}');
Error('\P{Is_Block=_ Latin:=Extended_C}');
Expect(1, 11391, '\p{Is_Block=latinextendedc}', "");
Expect(0, 11391, '\p{^Is_Block=latinextendedc}', "");
Expect(0, 11391, '\P{Is_Block=latinextendedc}', "");
Expect(1, 11391, '\P{^Is_Block=latinextendedc}', "");
Expect(0, 11359, '\p{Is_Block=latinextendedc}', "");
Expect(1, 11359, '\p{^Is_Block=latinextendedc}', "");
Expect(1, 11359, '\P{Is_Block=latinextendedc}', "");
Expect(0, 11359, '\P{^Is_Block=latinextendedc}', "");
Expect(1, 11391, '\p{Is_Block=	_LatinextendedC}', "");
Expect(0, 11391, '\p{^Is_Block=	_LatinextendedC}', "");
Expect(0, 11391, '\P{Is_Block=	_LatinextendedC}', "");
Expect(1, 11391, '\P{^Is_Block=	_LatinextendedC}', "");
Expect(0, 11359, '\p{Is_Block=	_LatinextendedC}', "");
Expect(1, 11359, '\p{^Is_Block=	_LatinextendedC}', "");
Expect(1, 11359, '\P{Is_Block=	_LatinextendedC}', "");
Expect(0, 11359, '\P{^Is_Block=	_LatinextendedC}', "");
Error('\p{Is_Blk= :=latin	extendedC}');
Error('\P{Is_Blk= :=latin	extendedC}');
Expect(1, 11391, '\p{Is_Blk=latinextendedc}', "");
Expect(0, 11391, '\p{^Is_Blk=latinextendedc}', "");
Expect(0, 11391, '\P{Is_Blk=latinextendedc}', "");
Expect(1, 11391, '\P{^Is_Blk=latinextendedc}', "");
Expect(0, 11359, '\p{Is_Blk=latinextendedc}', "");
Expect(1, 11359, '\p{^Is_Blk=latinextendedc}', "");
Expect(1, 11359, '\P{Is_Blk=latinextendedc}', "");
Expect(0, 11359, '\P{^Is_Blk=latinextendedc}', "");
Expect(1, 11391, '\p{Is_Blk=-latin extendedC}', "");
Expect(0, 11391, '\p{^Is_Blk=-latin extendedC}', "");
Expect(0, 11391, '\P{Is_Blk=-latin extendedC}', "");
Expect(1, 11391, '\P{^Is_Blk=-latin extendedC}', "");
Expect(0, 11359, '\p{Is_Blk=-latin extendedC}', "");
Expect(1, 11359, '\p{^Is_Blk=-latin extendedC}', "");
Expect(1, 11359, '\P{Is_Blk=-latin extendedC}', "");
Expect(0, 11359, '\P{^Is_Blk=-latin extendedC}', "");
Error('\p{Block=-:=COMMON	Indic	numberFORMS}');
Error('\P{Block=-:=COMMON	Indic	numberFORMS}');
Expect(1, 43071, '\p{Block=commonindicnumberforms}', "");
Expect(0, 43071, '\p{^Block=commonindicnumberforms}', "");
Expect(0, 43071, '\P{Block=commonindicnumberforms}', "");
Expect(1, 43071, '\P{^Block=commonindicnumberforms}', "");
Expect(0, 43055, '\p{Block=commonindicnumberforms}', "");
Expect(1, 43055, '\p{^Block=commonindicnumberforms}', "");
Expect(1, 43055, '\P{Block=commonindicnumberforms}', "");
Expect(0, 43055, '\P{^Block=commonindicnumberforms}', "");
Expect(1, 43071, '\p{Block:   	COMMONINDIC	Number Forms}', "");
Expect(0, 43071, '\p{^Block:   	COMMONINDIC	Number Forms}', "");
Expect(0, 43071, '\P{Block:   	COMMONINDIC	Number Forms}', "");
Expect(1, 43071, '\P{^Block:   	COMMONINDIC	Number Forms}', "");
Expect(0, 43055, '\p{Block:   	COMMONINDIC	Number Forms}', "");
Expect(1, 43055, '\p{^Block:   	COMMONINDIC	Number Forms}', "");
Expect(1, 43055, '\P{Block:   	COMMONINDIC	Number Forms}', "");
Expect(0, 43055, '\P{^Block:   	COMMONINDIC	Number Forms}', "");
Error('\p{Blk=-:=CommonINDIC	Number-Forms}');
Error('\P{Blk=-:=CommonINDIC	Number-Forms}');
Expect(1, 43071, '\p{Blk=commonindicnumberforms}', "");
Expect(0, 43071, '\p{^Blk=commonindicnumberforms}', "");
Expect(0, 43071, '\P{Blk=commonindicnumberforms}', "");
Expect(1, 43071, '\P{^Blk=commonindicnumberforms}', "");
Expect(0, 43055, '\p{Blk=commonindicnumberforms}', "");
Expect(1, 43055, '\p{^Blk=commonindicnumberforms}', "");
Expect(1, 43055, '\P{Blk=commonindicnumberforms}', "");
Expect(0, 43055, '\P{^Blk=commonindicnumberforms}', "");
Expect(1, 43071, '\p{Blk: 	-common_Indic	Number Forms}', "");
Expect(0, 43071, '\p{^Blk: 	-common_Indic	Number Forms}', "");
Expect(0, 43071, '\P{Blk: 	-common_Indic	Number Forms}', "");
Expect(1, 43071, '\P{^Blk: 	-common_Indic	Number Forms}', "");
Expect(0, 43055, '\p{Blk: 	-common_Indic	Number Forms}', "");
Expect(1, 43055, '\p{^Blk: 	-common_Indic	Number Forms}', "");
Expect(1, 43055, '\P{Blk: 	-common_Indic	Number Forms}', "");
Expect(0, 43055, '\P{^Blk: 	-common_Indic	Number Forms}', "");
Error('\p{Is_Block=-common:=Indic number forms}');
Error('\P{Is_Block=-common:=Indic number forms}');
Expect(1, 43071, '\p{Is_Block=commonindicnumberforms}', "");
Expect(0, 43071, '\p{^Is_Block=commonindicnumberforms}', "");
Expect(0, 43071, '\P{Is_Block=commonindicnumberforms}', "");
Expect(1, 43071, '\P{^Is_Block=commonindicnumberforms}', "");
Expect(0, 43055, '\p{Is_Block=commonindicnumberforms}', "");
Expect(1, 43055, '\p{^Is_Block=commonindicnumberforms}', "");
Expect(1, 43055, '\P{Is_Block=commonindicnumberforms}', "");
Expect(0, 43055, '\P{^Is_Block=commonindicnumberforms}', "");
Expect(1, 43071, '\p{Is_Block= _CommonIndic_number Forms}', "");
Expect(0, 43071, '\p{^Is_Block= _CommonIndic_number Forms}', "");
Expect(0, 43071, '\P{Is_Block= _CommonIndic_number Forms}', "");
Expect(1, 43071, '\P{^Is_Block= _CommonIndic_number Forms}', "");
Expect(0, 43055, '\p{Is_Block= _CommonIndic_number Forms}', "");
Expect(1, 43055, '\p{^Is_Block= _CommonIndic_number Forms}', "");
Expect(1, 43055, '\P{Is_Block= _CommonIndic_number Forms}', "");
Expect(0, 43055, '\P{^Is_Block= _CommonIndic_number Forms}', "");
Error('\p{Is_Blk=_Common:=Indic	Number-Forms}');
Error('\P{Is_Blk=_Common:=Indic	Number-Forms}');
Expect(1, 43071, '\p{Is_Blk=commonindicnumberforms}', "");
Expect(0, 43071, '\p{^Is_Blk=commonindicnumberforms}', "");
Expect(0, 43071, '\P{Is_Blk=commonindicnumberforms}', "");
Expect(1, 43071, '\P{^Is_Blk=commonindicnumberforms}', "");
Expect(0, 43055, '\p{Is_Blk=commonindicnumberforms}', "");
Expect(1, 43055, '\p{^Is_Blk=commonindicnumberforms}', "");
Expect(1, 43055, '\P{Is_Blk=commonindicnumberforms}', "");
Expect(0, 43055, '\P{^Is_Blk=commonindicnumberforms}', "");
Expect(1, 43071, '\p{Is_Blk: _COMMON indicNUMBER	Forms}', "");
Expect(0, 43071, '\p{^Is_Blk: _COMMON indicNUMBER	Forms}', "");
Expect(0, 43071, '\P{Is_Blk: _COMMON indicNUMBER	Forms}', "");
Expect(1, 43071, '\P{^Is_Blk: _COMMON indicNUMBER	Forms}', "");
Expect(0, 43055, '\p{Is_Blk: _COMMON indicNUMBER	Forms}', "");
Expect(1, 43055, '\p{^Is_Blk: _COMMON indicNUMBER	Forms}', "");
Expect(1, 43055, '\P{Is_Blk: _COMMON indicNUMBER	Forms}', "");
Expect(0, 43055, '\P{^Is_Blk: _COMMON indicNUMBER	Forms}', "");
Error('\p{Block=:=meeteiMAYEK}');
Error('\P{Block=:=meeteiMAYEK}');
Expect(1, 44031, '\p{Block=meeteimayek}', "");
Expect(0, 44031, '\p{^Block=meeteimayek}', "");
Expect(0, 44031, '\P{Block=meeteimayek}', "");
Expect(1, 44031, '\P{^Block=meeteimayek}', "");
Expect(0, 43967, '\p{Block=meeteimayek}', "");
Expect(1, 43967, '\p{^Block=meeteimayek}', "");
Expect(1, 43967, '\P{Block=meeteimayek}', "");
Expect(0, 43967, '\P{^Block=meeteimayek}', "");
Expect(1, 44031, '\p{Block=_meetei_Mayek}', "");
Expect(0, 44031, '\p{^Block=_meetei_Mayek}', "");
Expect(0, 44031, '\P{Block=_meetei_Mayek}', "");
Expect(1, 44031, '\P{^Block=_meetei_Mayek}', "");
Expect(0, 43967, '\p{Block=_meetei_Mayek}', "");
Expect(1, 43967, '\p{^Block=_meetei_Mayek}', "");
Expect(1, 43967, '\P{Block=_meetei_Mayek}', "");
Expect(0, 43967, '\P{^Block=_meetei_Mayek}', "");
Error('\p{Blk= :=Meetei_MAYEK}');
Error('\P{Blk= :=Meetei_MAYEK}');
Expect(1, 44031, '\p{Blk=meeteimayek}', "");
Expect(0, 44031, '\p{^Blk=meeteimayek}', "");
Expect(0, 44031, '\P{Blk=meeteimayek}', "");
Expect(1, 44031, '\P{^Blk=meeteimayek}', "");
Expect(0, 43967, '\p{Blk=meeteimayek}', "");
Expect(1, 43967, '\p{^Blk=meeteimayek}', "");
Expect(1, 43967, '\P{Blk=meeteimayek}', "");
Expect(0, 43967, '\P{^Blk=meeteimayek}', "");
Expect(1, 44031, '\p{Blk=_MeeteiMayek}', "");
Expect(0, 44031, '\p{^Blk=_MeeteiMayek}', "");
Expect(0, 44031, '\P{Blk=_MeeteiMayek}', "");
Expect(1, 44031, '\P{^Blk=_MeeteiMayek}', "");
Expect(0, 43967, '\p{Blk=_MeeteiMayek}', "");
Expect(1, 43967, '\p{^Blk=_MeeteiMayek}', "");
Expect(1, 43967, '\P{Blk=_MeeteiMayek}', "");
Expect(0, 43967, '\P{^Blk=_MeeteiMayek}', "");
Error('\p{Is_Block=-/a/Meetei-Mayek}');
Error('\P{Is_Block=-/a/Meetei-Mayek}');
Expect(1, 44031, '\p{Is_Block=meeteimayek}', "");
Expect(0, 44031, '\p{^Is_Block=meeteimayek}', "");
Expect(0, 44031, '\P{Is_Block=meeteimayek}', "");
Expect(1, 44031, '\P{^Is_Block=meeteimayek}', "");
Expect(0, 43967, '\p{Is_Block=meeteimayek}', "");
Expect(1, 43967, '\p{^Is_Block=meeteimayek}', "");
Expect(1, 43967, '\P{Is_Block=meeteimayek}', "");
Expect(0, 43967, '\P{^Is_Block=meeteimayek}', "");
Expect(1, 44031, '\p{Is_Block=_ Meeteimayek}', "");
Expect(0, 44031, '\p{^Is_Block=_ Meeteimayek}', "");
Expect(0, 44031, '\P{Is_Block=_ Meeteimayek}', "");
Expect(1, 44031, '\P{^Is_Block=_ Meeteimayek}', "");
Expect(0, 43967, '\p{Is_Block=_ Meeteimayek}', "");
Expect(1, 43967, '\p{^Is_Block=_ Meeteimayek}', "");
Expect(1, 43967, '\P{Is_Block=_ Meeteimayek}', "");
Expect(0, 43967, '\P{^Is_Block=_ Meeteimayek}', "");
Error('\p{Is_Blk=/a/__meetei-MAYEK}');
Error('\P{Is_Blk=/a/__meetei-MAYEK}');
Expect(1, 44031, '\p{Is_Blk=meeteimayek}', "");
Expect(0, 44031, '\p{^Is_Blk=meeteimayek}', "");
Expect(0, 44031, '\P{Is_Blk=meeteimayek}', "");
Expect(1, 44031, '\P{^Is_Blk=meeteimayek}', "");
Expect(0, 43967, '\p{Is_Blk=meeteimayek}', "");
Expect(1, 43967, '\p{^Is_Blk=meeteimayek}', "");
Expect(1, 43967, '\P{Is_Blk=meeteimayek}', "");
Expect(0, 43967, '\P{^Is_Blk=meeteimayek}', "");
Expect(1, 44031, '\p{Is_Blk=-Meetei mayek}', "");
Expect(0, 44031, '\p{^Is_Blk=-Meetei mayek}', "");
Expect(0, 44031, '\P{Is_Blk=-Meetei mayek}', "");
Expect(1, 44031, '\P{^Is_Blk=-Meetei mayek}', "");
Expect(0, 43967, '\p{Is_Blk=-Meetei mayek}', "");
Expect(1, 43967, '\p{^Is_Blk=-Meetei mayek}', "");
Expect(1, 43967, '\P{Is_Blk=-Meetei mayek}', "");
Expect(0, 43967, '\P{^Is_Blk=-Meetei mayek}', "");
Error('\p{Block=__SUPPLEMENTAL-Mathematical_Operators/a/}');
Error('\P{Block=__SUPPLEMENTAL-Mathematical_Operators/a/}');
Expect(1, 11007, '\p{Block=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^Block=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{Block=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^Block=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{Block=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^Block=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{Block=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^Block=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{Block=	 SUPPLEMENTAL Mathematical Operators}', "");
Expect(0, 11007, '\p{^Block=	 SUPPLEMENTAL Mathematical Operators}', "");
Expect(0, 11007, '\P{Block=	 SUPPLEMENTAL Mathematical Operators}', "");
Expect(1, 11007, '\P{^Block=	 SUPPLEMENTAL Mathematical Operators}', "");
Expect(0, 10751, '\p{Block=	 SUPPLEMENTAL Mathematical Operators}', "");
Expect(1, 10751, '\p{^Block=	 SUPPLEMENTAL Mathematical Operators}', "");
Expect(1, 10751, '\P{Block=	 SUPPLEMENTAL Mathematical Operators}', "");
Expect(0, 10751, '\P{^Block=	 SUPPLEMENTAL Mathematical Operators}', "");
Error('\p{Blk=_ SUPPLEMENTAL:=MATHEMATICAL OPERATORS}');
Error('\P{Blk=_ SUPPLEMENTAL:=MATHEMATICAL OPERATORS}');
Expect(1, 11007, '\p{Blk=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^Blk=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{Blk=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^Blk=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{Blk=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^Blk=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{Blk=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^Blk=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{Blk= supplemental-mathematical-operators}', "");
Expect(0, 11007, '\p{^Blk= supplemental-mathematical-operators}', "");
Expect(0, 11007, '\P{Blk= supplemental-mathematical-operators}', "");
Expect(1, 11007, '\P{^Blk= supplemental-mathematical-operators}', "");
Expect(0, 10751, '\p{Blk= supplemental-mathematical-operators}', "");
Expect(1, 10751, '\p{^Blk= supplemental-mathematical-operators}', "");
Expect(1, 10751, '\P{Blk= supplemental-mathematical-operators}', "");
Expect(0, 10751, '\P{^Blk= supplemental-mathematical-operators}', "");
Error('\p{Is_Block= Supplemental:=Mathematical	operators}');
Error('\P{Is_Block= Supplemental:=Mathematical	operators}');
Expect(1, 11007, '\p{Is_Block=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^Is_Block=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{Is_Block=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^Is_Block=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{Is_Block=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^Is_Block=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{Is_Block=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^Is_Block=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{Is_Block=_ SUPPLEMENTALMathematical Operators}', "");
Expect(0, 11007, '\p{^Is_Block=_ SUPPLEMENTALMathematical Operators}', "");
Expect(0, 11007, '\P{Is_Block=_ SUPPLEMENTALMathematical Operators}', "");
Expect(1, 11007, '\P{^Is_Block=_ SUPPLEMENTALMathematical Operators}', "");
Expect(0, 10751, '\p{Is_Block=_ SUPPLEMENTALMathematical Operators}', "");
Expect(1, 10751, '\p{^Is_Block=_ SUPPLEMENTALMathematical Operators}', "");
Expect(1, 10751, '\P{Is_Block=_ SUPPLEMENTALMathematical Operators}', "");
Expect(0, 10751, '\P{^Is_Block=_ SUPPLEMENTALMathematical Operators}', "");
Error('\p{Is_Blk=_:=SUPPLEMENTAL	Mathematical OPERATORS}');
Error('\P{Is_Blk=_:=SUPPLEMENTAL	Mathematical OPERATORS}');
Expect(1, 11007, '\p{Is_Blk=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^Is_Blk=supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{Is_Blk=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^Is_Blk=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{Is_Blk=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^Is_Blk=supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{Is_Blk=supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^Is_Blk=supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{Is_Blk=_-SupplementalMathematicaloperators}', "");
Expect(0, 11007, '\p{^Is_Blk=_-SupplementalMathematicaloperators}', "");
Expect(0, 11007, '\P{Is_Blk=_-SupplementalMathematicaloperators}', "");
Expect(1, 11007, '\P{^Is_Blk=_-SupplementalMathematicaloperators}', "");
Expect(0, 10751, '\p{Is_Blk=_-SupplementalMathematicaloperators}', "");
Expect(1, 10751, '\p{^Is_Blk=_-SupplementalMathematicaloperators}', "");
Expect(1, 10751, '\P{Is_Blk=_-SupplementalMathematicaloperators}', "");
Expect(0, 10751, '\P{^Is_Blk=_-SupplementalMathematicaloperators}', "");
Error('\p{Block= -Shavian/a/}');
Error('\P{Block= -Shavian/a/}');
Expect(1, 66687, '\p{Block=shavian}', "");
Expect(0, 66687, '\p{^Block=shavian}', "");
Expect(0, 66687, '\P{Block=shavian}', "");
Expect(1, 66687, '\P{^Block=shavian}', "");
Expect(0, 66639, '\p{Block=shavian}', "");
Expect(1, 66639, '\p{^Block=shavian}', "");
Expect(1, 66639, '\P{Block=shavian}', "");
Expect(0, 66639, '\P{^Block=shavian}', "");
Expect(1, 66687, '\p{Block=		Shavian}', "");
Expect(0, 66687, '\p{^Block=		Shavian}', "");
Expect(0, 66687, '\P{Block=		Shavian}', "");
Expect(1, 66687, '\P{^Block=		Shavian}', "");
Expect(0, 66639, '\p{Block=		Shavian}', "");
Expect(1, 66639, '\p{^Block=		Shavian}', "");
Expect(1, 66639, '\P{Block=		Shavian}', "");
Expect(0, 66639, '\P{^Block=		Shavian}', "");
Error('\p{Blk=/a/SHAVIAN}');
Error('\P{Blk=/a/SHAVIAN}');
Expect(1, 66687, '\p{Blk=shavian}', "");
Expect(0, 66687, '\p{^Blk=shavian}', "");
Expect(0, 66687, '\P{Blk=shavian}', "");
Expect(1, 66687, '\P{^Blk=shavian}', "");
Expect(0, 66639, '\p{Blk=shavian}', "");
Expect(1, 66639, '\p{^Blk=shavian}', "");
Expect(1, 66639, '\P{Blk=shavian}', "");
Expect(0, 66639, '\P{^Blk=shavian}', "");
Expect(1, 66687, '\p{Blk= shavian}', "");
Expect(0, 66687, '\p{^Blk= shavian}', "");
Expect(0, 66687, '\P{Blk= shavian}', "");
Expect(1, 66687, '\P{^Blk= shavian}', "");
Expect(0, 66639, '\p{Blk= shavian}', "");
Expect(1, 66639, '\p{^Blk= shavian}', "");
Expect(1, 66639, '\P{Blk= shavian}', "");
Expect(0, 66639, '\P{^Blk= shavian}', "");
Error('\p{Is_Block=:=--Shavian}');
Error('\P{Is_Block=:=--Shavian}');
Expect(1, 66687, '\p{Is_Block=shavian}', "");
Expect(0, 66687, '\p{^Is_Block=shavian}', "");
Expect(0, 66687, '\P{Is_Block=shavian}', "");
Expect(1, 66687, '\P{^Is_Block=shavian}', "");
Expect(0, 66639, '\p{Is_Block=shavian}', "");
Expect(1, 66639, '\p{^Is_Block=shavian}', "");
Expect(1, 66639, '\P{Is_Block=shavian}', "");
Expect(0, 66639, '\P{^Is_Block=shavian}', "");
Expect(1, 66687, '\p{Is_Block=Shavian}', "");
Expect(0, 66687, '\p{^Is_Block=Shavian}', "");
Expect(0, 66687, '\P{Is_Block=Shavian}', "");
Expect(1, 66687, '\P{^Is_Block=Shavian}', "");
Expect(0, 66639, '\p{Is_Block=Shavian}', "");
Expect(1, 66639, '\p{^Is_Block=Shavian}', "");
Expect(1, 66639, '\P{Is_Block=Shavian}', "");
Expect(0, 66639, '\P{^Is_Block=Shavian}', "");
Error('\p{Is_Blk=_	shavian/a/}');
Error('\P{Is_Blk=_	shavian/a/}');
Expect(1, 66687, '\p{Is_Blk=shavian}', "");
Expect(0, 66687, '\p{^Is_Blk=shavian}', "");
Expect(0, 66687, '\P{Is_Blk=shavian}', "");
Expect(1, 66687, '\P{^Is_Blk=shavian}', "");
Expect(0, 66639, '\p{Is_Blk=shavian}', "");
Expect(1, 66639, '\p{^Is_Blk=shavian}', "");
Expect(1, 66639, '\P{Is_Blk=shavian}', "");
Expect(0, 66639, '\P{^Is_Blk=shavian}', "");
Expect(1, 66687, '\p{Is_Blk:	--SHAVIAN}', "");
Expect(0, 66687, '\p{^Is_Blk:	--SHAVIAN}', "");
Expect(0, 66687, '\P{Is_Blk:	--SHAVIAN}', "");
Expect(1, 66687, '\P{^Is_Blk:	--SHAVIAN}', "");
Expect(0, 66639, '\p{Is_Blk:	--SHAVIAN}', "");
Expect(1, 66639, '\p{^Is_Blk:	--SHAVIAN}', "");
Expect(1, 66639, '\P{Is_Blk:	--SHAVIAN}', "");
Expect(0, 66639, '\P{^Is_Blk:	--SHAVIAN}', "");
Error('\p{Block= :=Lydian}');
Error('\P{Block= :=Lydian}');
Expect(1, 67903, '\p{Block=lydian}', "");
Expect(0, 67903, '\p{^Block=lydian}', "");
Expect(0, 67903, '\P{Block=lydian}', "");
Expect(1, 67903, '\P{^Block=lydian}', "");
Expect(0, 67871, '\p{Block=lydian}', "");
Expect(1, 67871, '\p{^Block=lydian}', "");
Expect(1, 67871, '\P{Block=lydian}', "");
Expect(0, 67871, '\P{^Block=lydian}', "");
Expect(1, 67903, '\p{Block=_Lydian}', "");
Expect(0, 67903, '\p{^Block=_Lydian}', "");
Expect(0, 67903, '\P{Block=_Lydian}', "");
Expect(1, 67903, '\P{^Block=_Lydian}', "");
Expect(0, 67871, '\p{Block=_Lydian}', "");
Expect(1, 67871, '\p{^Block=_Lydian}', "");
Expect(1, 67871, '\P{Block=_Lydian}', "");
Expect(0, 67871, '\P{^Block=_Lydian}', "");
Error('\p{Blk=:=	-lydian}');
Error('\P{Blk=:=	-lydian}');
Expect(1, 67903, '\p{Blk=lydian}', "");
Expect(0, 67903, '\p{^Blk=lydian}', "");
Expect(0, 67903, '\P{Blk=lydian}', "");
Expect(1, 67903, '\P{^Blk=lydian}', "");
Expect(0, 67871, '\p{Blk=lydian}', "");
Expect(1, 67871, '\p{^Blk=lydian}', "");
Expect(1, 67871, '\P{Blk=lydian}', "");
Expect(0, 67871, '\P{^Blk=lydian}', "");
Expect(1, 67903, '\p{Blk=	_lydian}', "");
Expect(0, 67903, '\p{^Blk=	_lydian}', "");
Expect(0, 67903, '\P{Blk=	_lydian}', "");
Expect(1, 67903, '\P{^Blk=	_lydian}', "");
Expect(0, 67871, '\p{Blk=	_lydian}', "");
Expect(1, 67871, '\p{^Blk=	_lydian}', "");
Expect(1, 67871, '\P{Blk=	_lydian}', "");
Expect(0, 67871, '\P{^Blk=	_lydian}', "");
Error('\p{Is_Block=  Lydian:=}');
Error('\P{Is_Block=  Lydian:=}');
Expect(1, 67903, '\p{Is_Block=lydian}', "");
Expect(0, 67903, '\p{^Is_Block=lydian}', "");
Expect(0, 67903, '\P{Is_Block=lydian}', "");
Expect(1, 67903, '\P{^Is_Block=lydian}', "");
Expect(0, 67871, '\p{Is_Block=lydian}', "");
Expect(1, 67871, '\p{^Is_Block=lydian}', "");
Expect(1, 67871, '\P{Is_Block=lydian}', "");
Expect(0, 67871, '\P{^Is_Block=lydian}', "");
Expect(1, 67903, '\p{Is_Block=-lydian}', "");
Expect(0, 67903, '\p{^Is_Block=-lydian}', "");
Expect(0, 67903, '\P{Is_Block=-lydian}', "");
Expect(1, 67903, '\P{^Is_Block=-lydian}', "");
Expect(0, 67871, '\p{Is_Block=-lydian}', "");
Expect(1, 67871, '\p{^Is_Block=-lydian}', "");
Expect(1, 67871, '\P{Is_Block=-lydian}', "");
Expect(0, 67871, '\P{^Is_Block=-lydian}', "");
Error('\p{Is_Blk:	/a/	_Lydian}');
Error('\P{Is_Blk:	/a/	_Lydian}');
Expect(1, 67903, '\p{Is_Blk=lydian}', "");
Expect(0, 67903, '\p{^Is_Blk=lydian}', "");
Expect(0, 67903, '\P{Is_Blk=lydian}', "");
Expect(1, 67903, '\P{^Is_Blk=lydian}', "");
Expect(0, 67871, '\p{Is_Blk=lydian}', "");
Expect(1, 67871, '\p{^Is_Blk=lydian}', "");
Expect(1, 67871, '\P{Is_Blk=lydian}', "");
Expect(0, 67871, '\P{^Is_Blk=lydian}', "");
Expect(1, 67903, '\p{Is_Blk= LYDIAN}', "");
Expect(0, 67903, '\p{^Is_Blk= LYDIAN}', "");
Expect(0, 67903, '\P{Is_Blk= LYDIAN}', "");
Expect(1, 67903, '\P{^Is_Blk= LYDIAN}', "");
Expect(0, 67871, '\p{Is_Blk= LYDIAN}', "");
Expect(1, 67871, '\p{^Is_Blk= LYDIAN}', "");
Expect(1, 67871, '\P{Is_Blk= LYDIAN}', "");
Expect(0, 67871, '\P{^Is_Blk= LYDIAN}', "");
Error('\p{Block=/a/--cjk	Unified_ideographs-extensionC}');
Error('\P{Block=/a/--cjk	Unified_ideographs-extensionC}');
Expect(1, 177983, '\p{Block=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^Block=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{Block=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^Block=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{Block=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^Block=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{Block=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^Block=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{Block:   --CJK-Unified IdeographsExtension c}', "");
Expect(0, 177983, '\p{^Block:   --CJK-Unified IdeographsExtension c}', "");
Expect(0, 177983, '\P{Block:   --CJK-Unified IdeographsExtension c}', "");
Expect(1, 177983, '\P{^Block:   --CJK-Unified IdeographsExtension c}', "");
Expect(0, 173823, '\p{Block:   --CJK-Unified IdeographsExtension c}', "");
Expect(1, 173823, '\p{^Block:   --CJK-Unified IdeographsExtension c}', "");
Expect(1, 173823, '\P{Block:   --CJK-Unified IdeographsExtension c}', "");
Expect(0, 173823, '\P{^Block:   --CJK-Unified IdeographsExtension c}', "");
Error('\p{Blk=CJK:=Unified ideographs	Extension-c}');
Error('\P{Blk=CJK:=Unified ideographs	Extension-c}');
Expect(1, 177983, '\p{Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{Blk= cjk	Unified Ideographs	ExtensionC}', "");
Expect(0, 177983, '\p{^Blk= cjk	Unified Ideographs	ExtensionC}', "");
Expect(0, 177983, '\P{Blk= cjk	Unified Ideographs	ExtensionC}', "");
Expect(1, 177983, '\P{^Blk= cjk	Unified Ideographs	ExtensionC}', "");
Expect(0, 173823, '\p{Blk= cjk	Unified Ideographs	ExtensionC}', "");
Expect(1, 173823, '\p{^Blk= cjk	Unified Ideographs	ExtensionC}', "");
Expect(1, 173823, '\P{Blk= cjk	Unified Ideographs	ExtensionC}', "");
Expect(0, 173823, '\P{^Blk= cjk	Unified Ideographs	ExtensionC}', "");
Error('\p{Is_Block=CJK_Unified_Ideographs:=Extension	c}');
Error('\P{Is_Block=CJK_Unified_Ideographs:=Extension	c}');
Expect(1, 177983, '\p{Is_Block=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^Is_Block=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{Is_Block=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^Is_Block=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{Is_Block=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^Is_Block=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{Is_Block=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^Is_Block=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{Is_Block:	 cjk	UnifiedIdeographsExtension-c}', "");
Expect(0, 177983, '\p{^Is_Block:	 cjk	UnifiedIdeographsExtension-c}', "");
Expect(0, 177983, '\P{Is_Block:	 cjk	UnifiedIdeographsExtension-c}', "");
Expect(1, 177983, '\P{^Is_Block:	 cjk	UnifiedIdeographsExtension-c}', "");
Expect(0, 173823, '\p{Is_Block:	 cjk	UnifiedIdeographsExtension-c}', "");
Expect(1, 173823, '\p{^Is_Block:	 cjk	UnifiedIdeographsExtension-c}', "");
Expect(1, 173823, '\P{Is_Block:	 cjk	UnifiedIdeographsExtension-c}', "");
Expect(0, 173823, '\P{^Is_Block:	 cjk	UnifiedIdeographsExtension-c}', "");
Error('\p{Is_Blk:/a/-	CJK-UnifiedIdeographs-Extension	C}');
Error('\P{Is_Blk:/a/-	CJK-UnifiedIdeographs-Extension	C}');
Expect(1, 177983, '\p{Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^Is_Blk=cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{Is_Blk:  CJK-UNIFIED IdeographsExtension-c}', "");
Expect(0, 177983, '\p{^Is_Blk:  CJK-UNIFIED IdeographsExtension-c}', "");
Expect(0, 177983, '\P{Is_Blk:  CJK-UNIFIED IdeographsExtension-c}', "");
Expect(1, 177983, '\P{^Is_Blk:  CJK-UNIFIED IdeographsExtension-c}', "");
Expect(0, 173823, '\p{Is_Blk:  CJK-UNIFIED IdeographsExtension-c}', "");
Expect(1, 173823, '\p{^Is_Blk:  CJK-UNIFIED IdeographsExtension-c}', "");
Expect(1, 173823, '\P{Is_Blk:  CJK-UNIFIED IdeographsExtension-c}', "");
Expect(0, 173823, '\P{^Is_Blk:  CJK-UNIFIED IdeographsExtension-c}', "");
Error('\p{Block=_/a/Mongolian}');
Error('\P{Block=_/a/Mongolian}');
Expect(1, 6319, '\p{Block=mongolian}', "");
Expect(0, 6319, '\p{^Block=mongolian}', "");
Expect(0, 6319, '\P{Block=mongolian}', "");
Expect(1, 6319, '\P{^Block=mongolian}', "");
Expect(0, 6143, '\p{Block=mongolian}', "");
Expect(1, 6143, '\p{^Block=mongolian}', "");
Expect(1, 6143, '\P{Block=mongolian}', "");
Expect(0, 6143, '\P{^Block=mongolian}', "");
Expect(1, 6319, '\p{Block=--Mongolian}', "");
Expect(0, 6319, '\p{^Block=--Mongolian}', "");
Expect(0, 6319, '\P{Block=--Mongolian}', "");
Expect(1, 6319, '\P{^Block=--Mongolian}', "");
Expect(0, 6143, '\p{Block=--Mongolian}', "");
Expect(1, 6143, '\p{^Block=--Mongolian}', "");
Expect(1, 6143, '\P{Block=--Mongolian}', "");
Expect(0, 6143, '\P{^Block=--Mongolian}', "");
Error('\p{Blk=	:=mongolian}');
Error('\P{Blk=	:=mongolian}');
Expect(1, 6319, '\p{Blk=mongolian}', "");
Expect(0, 6319, '\p{^Blk=mongolian}', "");
Expect(0, 6319, '\P{Blk=mongolian}', "");
Expect(1, 6319, '\P{^Blk=mongolian}', "");
Expect(0, 6143, '\p{Blk=mongolian}', "");
Expect(1, 6143, '\p{^Blk=mongolian}', "");
Expect(1, 6143, '\P{Blk=mongolian}', "");
Expect(0, 6143, '\P{^Blk=mongolian}', "");
Expect(1, 6319, '\p{Blk=	Mongolian}', "");
Expect(0, 6319, '\p{^Blk=	Mongolian}', "");
Expect(0, 6319, '\P{Blk=	Mongolian}', "");
Expect(1, 6319, '\P{^Blk=	Mongolian}', "");
Expect(0, 6143, '\p{Blk=	Mongolian}', "");
Expect(1, 6143, '\p{^Blk=	Mongolian}', "");
Expect(1, 6143, '\P{Blk=	Mongolian}', "");
Expect(0, 6143, '\P{^Blk=	Mongolian}', "");
Error('\p{Is_Block:	MONGOLIAN/a/}');
Error('\P{Is_Block:	MONGOLIAN/a/}');
Expect(1, 6319, '\p{Is_Block=mongolian}', "");
Expect(0, 6319, '\p{^Is_Block=mongolian}', "");
Expect(0, 6319, '\P{Is_Block=mongolian}', "");
Expect(1, 6319, '\P{^Is_Block=mongolian}', "");
Expect(0, 6143, '\p{Is_Block=mongolian}', "");
Expect(1, 6143, '\p{^Is_Block=mongolian}', "");
Expect(1, 6143, '\P{Is_Block=mongolian}', "");
Expect(0, 6143, '\P{^Is_Block=mongolian}', "");
Expect(1, 6319, '\p{Is_Block: -_Mongolian}', "");
Expect(0, 6319, '\p{^Is_Block: -_Mongolian}', "");
Expect(0, 6319, '\P{Is_Block: -_Mongolian}', "");
Expect(1, 6319, '\P{^Is_Block: -_Mongolian}', "");
Expect(0, 6143, '\p{Is_Block: -_Mongolian}', "");
Expect(1, 6143, '\p{^Is_Block: -_Mongolian}', "");
Expect(1, 6143, '\P{Is_Block: -_Mongolian}', "");
Expect(0, 6143, '\P{^Is_Block: -_Mongolian}', "");
Error('\p{Is_Blk=:=-mongolian}');
Error('\P{Is_Blk=:=-mongolian}');
Expect(1, 6319, '\p{Is_Blk=mongolian}', "");
Expect(0, 6319, '\p{^Is_Blk=mongolian}', "");
Expect(0, 6319, '\P{Is_Blk=mongolian}', "");
Expect(1, 6319, '\P{^Is_Blk=mongolian}', "");
Expect(0, 6143, '\p{Is_Blk=mongolian}', "");
Expect(1, 6143, '\p{^Is_Blk=mongolian}', "");
Expect(1, 6143, '\P{Is_Blk=mongolian}', "");
Expect(0, 6143, '\P{^Is_Blk=mongolian}', "");
Expect(1, 6319, '\p{Is_Blk:  MONGOLIAN}', "");
Expect(0, 6319, '\p{^Is_Blk:  MONGOLIAN}', "");
Expect(0, 6319, '\P{Is_Blk:  MONGOLIAN}', "");
Expect(1, 6319, '\P{^Is_Blk:  MONGOLIAN}', "");
Expect(0, 6143, '\p{Is_Blk:  MONGOLIAN}', "");
Expect(1, 6143, '\p{^Is_Blk:  MONGOLIAN}', "");
Expect(1, 6143, '\P{Is_Blk:  MONGOLIAN}', "");
Expect(0, 6143, '\P{^Is_Blk:  MONGOLIAN}', "");
Error('\p{Block= LAO:=}');
Error('\P{Block= LAO:=}');
Expect(1, 3839, '\p{Block=lao}', "");
Expect(0, 3839, '\p{^Block=lao}', "");
Expect(0, 3839, '\P{Block=lao}', "");
Expect(1, 3839, '\P{^Block=lao}', "");
Expect(0, 3711, '\p{Block=lao}', "");
Expect(1, 3711, '\p{^Block=lao}', "");
Expect(1, 3711, '\P{Block=lao}', "");
Expect(0, 3711, '\P{^Block=lao}', "");
Expect(1, 3839, '\p{Block=_LAO}', "");
Expect(0, 3839, '\p{^Block=_LAO}', "");
Expect(0, 3839, '\P{Block=_LAO}', "");
Expect(1, 3839, '\P{^Block=_LAO}', "");
Expect(0, 3711, '\p{Block=_LAO}', "");
Expect(1, 3711, '\p{^Block=_LAO}', "");
Expect(1, 3711, '\P{Block=_LAO}', "");
Expect(0, 3711, '\P{^Block=_LAO}', "");
Error('\p{Blk=	:=Lao}');
Error('\P{Blk=	:=Lao}');
Expect(1, 3839, '\p{Blk=lao}', "");
Expect(0, 3839, '\p{^Blk=lao}', "");
Expect(0, 3839, '\P{Blk=lao}', "");
Expect(1, 3839, '\P{^Blk=lao}', "");
Expect(0, 3711, '\p{Blk=lao}', "");
Expect(1, 3711, '\p{^Blk=lao}', "");
Expect(1, 3711, '\P{Blk=lao}', "");
Expect(0, 3711, '\P{^Blk=lao}', "");
Expect(1, 3839, '\p{Blk=- Lao}', "");
Expect(0, 3839, '\p{^Blk=- Lao}', "");
Expect(0, 3839, '\P{Blk=- Lao}', "");
Expect(1, 3839, '\P{^Blk=- Lao}', "");
Expect(0, 3711, '\p{Blk=- Lao}', "");
Expect(1, 3711, '\p{^Blk=- Lao}', "");
Expect(1, 3711, '\P{Blk=- Lao}', "");
Expect(0, 3711, '\P{^Blk=- Lao}', "");
Error('\p{Is_Block=/a/--LAO}');
Error('\P{Is_Block=/a/--LAO}');
Expect(1, 3839, '\p{Is_Block=lao}', "");
Expect(0, 3839, '\p{^Is_Block=lao}', "");
Expect(0, 3839, '\P{Is_Block=lao}', "");
Expect(1, 3839, '\P{^Is_Block=lao}', "");
Expect(0, 3711, '\p{Is_Block=lao}', "");
Expect(1, 3711, '\p{^Is_Block=lao}', "");
Expect(1, 3711, '\P{Is_Block=lao}', "");
Expect(0, 3711, '\P{^Is_Block=lao}', "");
Expect(1, 3839, '\p{Is_Block=_Lao}', "");
Expect(0, 3839, '\p{^Is_Block=_Lao}', "");
Expect(0, 3839, '\P{Is_Block=_Lao}', "");
Expect(1, 3839, '\P{^Is_Block=_Lao}', "");
Expect(0, 3711, '\p{Is_Block=_Lao}', "");
Expect(1, 3711, '\p{^Is_Block=_Lao}', "");
Expect(1, 3711, '\P{Is_Block=_Lao}', "");
Expect(0, 3711, '\P{^Is_Block=_Lao}', "");
Error('\p{Is_Blk:_	LAO:=}');
Error('\P{Is_Blk:_	LAO:=}');
Expect(1, 3839, '\p{Is_Blk=lao}', "");
Expect(0, 3839, '\p{^Is_Blk=lao}', "");
Expect(0, 3839, '\P{Is_Blk=lao}', "");
Expect(1, 3839, '\P{^Is_Blk=lao}', "");
Expect(0, 3711, '\p{Is_Blk=lao}', "");
Expect(1, 3711, '\p{^Is_Blk=lao}', "");
Expect(1, 3711, '\P{Is_Blk=lao}', "");
Expect(0, 3711, '\P{^Is_Blk=lao}', "");
Expect(1, 3839, '\p{Is_Blk=-_Lao}', "");
Expect(0, 3839, '\p{^Is_Blk=-_Lao}', "");
Expect(0, 3839, '\P{Is_Blk=-_Lao}', "");
Expect(1, 3839, '\P{^Is_Blk=-_Lao}', "");
Expect(0, 3711, '\p{Is_Blk=-_Lao}', "");
Expect(1, 3711, '\p{^Is_Blk=-_Lao}', "");
Expect(1, 3711, '\P{Is_Blk=-_Lao}', "");
Expect(0, 3711, '\P{^Is_Blk=-_Lao}', "");
Error('\p{Block=_ Hiragana:=}');
Error('\P{Block=_ Hiragana:=}');
Expect(1, 12447, '\p{Block=hiragana}', "");
Expect(0, 12447, '\p{^Block=hiragana}', "");
Expect(0, 12447, '\P{Block=hiragana}', "");
Expect(1, 12447, '\P{^Block=hiragana}', "");
Expect(0, 12351, '\p{Block=hiragana}', "");
Expect(1, 12351, '\p{^Block=hiragana}', "");
Expect(1, 12351, '\P{Block=hiragana}', "");
Expect(0, 12351, '\P{^Block=hiragana}', "");
Expect(1, 12447, '\p{Block=_hiragana}', "");
Expect(0, 12447, '\p{^Block=_hiragana}', "");
Expect(0, 12447, '\P{Block=_hiragana}', "");
Expect(1, 12447, '\P{^Block=_hiragana}', "");
Expect(0, 12351, '\p{Block=_hiragana}', "");
Expect(1, 12351, '\p{^Block=_hiragana}', "");
Expect(1, 12351, '\P{Block=_hiragana}', "");
Expect(0, 12351, '\P{^Block=_hiragana}', "");
Error('\p{Blk=	_Hiragana/a/}');
Error('\P{Blk=	_Hiragana/a/}');
Expect(1, 12447, '\p{Blk=hiragana}', "");
Expect(0, 12447, '\p{^Blk=hiragana}', "");
Expect(0, 12447, '\P{Blk=hiragana}', "");
Expect(1, 12447, '\P{^Blk=hiragana}', "");
Expect(0, 12351, '\p{Blk=hiragana}', "");
Expect(1, 12351, '\p{^Blk=hiragana}', "");
Expect(1, 12351, '\P{Blk=hiragana}', "");
Expect(0, 12351, '\P{^Blk=hiragana}', "");
Expect(1, 12447, '\p{Blk:   -hiragana}', "");
Expect(0, 12447, '\p{^Blk:   -hiragana}', "");
Expect(0, 12447, '\P{Blk:   -hiragana}', "");
Expect(1, 12447, '\P{^Blk:   -hiragana}', "");
Expect(0, 12351, '\p{Blk:   -hiragana}', "");
Expect(1, 12351, '\p{^Blk:   -hiragana}', "");
Expect(1, 12351, '\P{Blk:   -hiragana}', "");
Expect(0, 12351, '\P{^Blk:   -hiragana}', "");
Error('\p{Is_Block=-:=Hiragana}');
Error('\P{Is_Block=-:=Hiragana}');
Expect(1, 12447, '\p{Is_Block:hiragana}', "");
Expect(0, 12447, '\p{^Is_Block:hiragana}', "");
Expect(0, 12447, '\P{Is_Block:hiragana}', "");
Expect(1, 12447, '\P{^Is_Block:hiragana}', "");
Expect(0, 12351, '\p{Is_Block:hiragana}', "");
Expect(1, 12351, '\p{^Is_Block:hiragana}', "");
Expect(1, 12351, '\P{Is_Block:hiragana}', "");
Expect(0, 12351, '\P{^Is_Block:hiragana}', "");
Expect(1, 12447, '\p{Is_Block=-_HIRAGANA}', "");
Expect(0, 12447, '\p{^Is_Block=-_HIRAGANA}', "");
Expect(0, 12447, '\P{Is_Block=-_HIRAGANA}', "");
Expect(1, 12447, '\P{^Is_Block=-_HIRAGANA}', "");
Expect(0, 12351, '\p{Is_Block=-_HIRAGANA}', "");
Expect(1, 12351, '\p{^Is_Block=-_HIRAGANA}', "");
Expect(1, 12351, '\P{Is_Block=-_HIRAGANA}', "");
Expect(0, 12351, '\P{^Is_Block=-_HIRAGANA}', "");
Error('\p{Is_Blk=:= hiragana}');
Error('\P{Is_Blk=:= hiragana}');
Expect(1, 12447, '\p{Is_Blk=hiragana}', "");
Expect(0, 12447, '\p{^Is_Blk=hiragana}', "");
Expect(0, 12447, '\P{Is_Blk=hiragana}', "");
Expect(1, 12447, '\P{^Is_Blk=hiragana}', "");
Expect(0, 12351, '\p{Is_Blk=hiragana}', "");
Expect(1, 12351, '\p{^Is_Blk=hiragana}', "");
Expect(1, 12351, '\P{Is_Blk=hiragana}', "");
Expect(0, 12351, '\P{^Is_Blk=hiragana}', "");
Expect(1, 12447, '\p{Is_Blk=-Hiragana}', "");
Expect(0, 12447, '\p{^Is_Blk=-Hiragana}', "");
Expect(0, 12447, '\P{Is_Blk=-Hiragana}', "");
Expect(1, 12447, '\P{^Is_Blk=-Hiragana}', "");
Expect(0, 12351, '\p{Is_Blk=-Hiragana}', "");
Expect(1, 12351, '\p{^Is_Blk=-Hiragana}', "");
Expect(1, 12351, '\P{Is_Blk=-Hiragana}', "");
Expect(0, 12351, '\P{^Is_Blk=-Hiragana}', "");
Error('\p{Block=-/a/Lepcha}');
Error('\P{Block=-/a/Lepcha}');
Expect(1, 7247, '\p{Block=lepcha}', "");
Expect(0, 7247, '\p{^Block=lepcha}', "");
Expect(0, 7247, '\P{Block=lepcha}', "");
Expect(1, 7247, '\P{^Block=lepcha}', "");
Expect(0, 7167, '\p{Block=lepcha}', "");
Expect(1, 7167, '\p{^Block=lepcha}', "");
Expect(1, 7167, '\P{Block=lepcha}', "");
Expect(0, 7167, '\P{^Block=lepcha}', "");
Expect(1, 7247, '\p{Block= -LEPCHA}', "");
Expect(0, 7247, '\p{^Block= -LEPCHA}', "");
Expect(0, 7247, '\P{Block= -LEPCHA}', "");
Expect(1, 7247, '\P{^Block= -LEPCHA}', "");
Expect(0, 7167, '\p{Block= -LEPCHA}', "");
Expect(1, 7167, '\p{^Block= -LEPCHA}', "");
Expect(1, 7167, '\P{Block= -LEPCHA}', "");
Expect(0, 7167, '\P{^Block= -LEPCHA}', "");
Error('\p{Blk=:=-	LEPCHA}');
Error('\P{Blk=:=-	LEPCHA}');
Expect(1, 7247, '\p{Blk=lepcha}', "");
Expect(0, 7247, '\p{^Blk=lepcha}', "");
Expect(0, 7247, '\P{Blk=lepcha}', "");
Expect(1, 7247, '\P{^Blk=lepcha}', "");
Expect(0, 7167, '\p{Blk=lepcha}', "");
Expect(1, 7167, '\p{^Blk=lepcha}', "");
Expect(1, 7167, '\P{Blk=lepcha}', "");
Expect(0, 7167, '\P{^Blk=lepcha}', "");
Expect(1, 7247, '\p{Blk=-LEPCHA}', "");
Expect(0, 7247, '\p{^Blk=-LEPCHA}', "");
Expect(0, 7247, '\P{Blk=-LEPCHA}', "");
Expect(1, 7247, '\P{^Blk=-LEPCHA}', "");
Expect(0, 7167, '\p{Blk=-LEPCHA}', "");
Expect(1, 7167, '\p{^Blk=-LEPCHA}', "");
Expect(1, 7167, '\P{Blk=-LEPCHA}', "");
Expect(0, 7167, '\P{^Blk=-LEPCHA}', "");
Error('\p{Is_Block: :=__Lepcha}');
Error('\P{Is_Block: :=__Lepcha}');
Expect(1, 7247, '\p{Is_Block=lepcha}', "");
Expect(0, 7247, '\p{^Is_Block=lepcha}', "");
Expect(0, 7247, '\P{Is_Block=lepcha}', "");
Expect(1, 7247, '\P{^Is_Block=lepcha}', "");
Expect(0, 7167, '\p{Is_Block=lepcha}', "");
Expect(1, 7167, '\p{^Is_Block=lepcha}', "");
Expect(1, 7167, '\P{Is_Block=lepcha}', "");
Expect(0, 7167, '\P{^Is_Block=lepcha}', "");
Expect(1, 7247, '\p{Is_Block=LEPCHA}', "");
Expect(0, 7247, '\p{^Is_Block=LEPCHA}', "");
Expect(0, 7247, '\P{Is_Block=LEPCHA}', "");
Expect(1, 7247, '\P{^Is_Block=LEPCHA}', "");
Expect(0, 7167, '\p{Is_Block=LEPCHA}', "");
Expect(1, 7167, '\p{^Is_Block=LEPCHA}', "");
Expect(1, 7167, '\P{Is_Block=LEPCHA}', "");
Expect(0, 7167, '\P{^Is_Block=LEPCHA}', "");
Error('\p{Is_Blk=:=  Lepcha}');
Error('\P{Is_Blk=:=  Lepcha}');
Expect(1, 7247, '\p{Is_Blk=lepcha}', "");
Expect(0, 7247, '\p{^Is_Blk=lepcha}', "");
Expect(0, 7247, '\P{Is_Blk=lepcha}', "");
Expect(1, 7247, '\P{^Is_Blk=lepcha}', "");
Expect(0, 7167, '\p{Is_Blk=lepcha}', "");
Expect(1, 7167, '\p{^Is_Blk=lepcha}', "");
Expect(1, 7167, '\P{Is_Blk=lepcha}', "");
Expect(0, 7167, '\P{^Is_Blk=lepcha}', "");
Expect(1, 7247, '\p{Is_Blk=_Lepcha}', "");
Expect(0, 7247, '\p{^Is_Blk=_Lepcha}', "");
Expect(0, 7247, '\P{Is_Blk=_Lepcha}', "");
Expect(1, 7247, '\P{^Is_Blk=_Lepcha}', "");
Expect(0, 7167, '\p{Is_Blk=_Lepcha}', "");
Expect(1, 7167, '\p{^Is_Blk=_Lepcha}', "");
Expect(1, 7167, '\P{Is_Blk=_Lepcha}', "");
Expect(0, 7167, '\P{^Is_Blk=_Lepcha}', "");
Error('\p{Block=/a/ -syloti nagri}');
Error('\P{Block=/a/ -syloti nagri}');
Expect(1, 43055, '\p{Block=sylotinagri}', "");
Expect(0, 43055, '\p{^Block=sylotinagri}', "");
Expect(0, 43055, '\P{Block=sylotinagri}', "");
Expect(1, 43055, '\P{^Block=sylotinagri}', "");
Expect(0, 43007, '\p{Block=sylotinagri}', "");
Expect(1, 43007, '\p{^Block=sylotinagri}', "");
Expect(1, 43007, '\P{Block=sylotinagri}', "");
Expect(0, 43007, '\P{^Block=sylotinagri}', "");
Expect(1, 43055, '\p{Block=__syloti	Nagri}', "");
Expect(0, 43055, '\p{^Block=__syloti	Nagri}', "");
Expect(0, 43055, '\P{Block=__syloti	Nagri}', "");
Expect(1, 43055, '\P{^Block=__syloti	Nagri}', "");
Expect(0, 43007, '\p{Block=__syloti	Nagri}', "");
Expect(1, 43007, '\p{^Block=__syloti	Nagri}', "");
Expect(1, 43007, '\P{Block=__syloti	Nagri}', "");
Expect(0, 43007, '\P{^Block=__syloti	Nagri}', "");
Error('\p{Blk=	:=Syloti-Nagri}');
Error('\P{Blk=	:=Syloti-Nagri}');
Expect(1, 43055, '\p{Blk=sylotinagri}', "");
Expect(0, 43055, '\p{^Blk=sylotinagri}', "");
Expect(0, 43055, '\P{Blk=sylotinagri}', "");
Expect(1, 43055, '\P{^Blk=sylotinagri}', "");
Expect(0, 43007, '\p{Blk=sylotinagri}', "");
Expect(1, 43007, '\p{^Blk=sylotinagri}', "");
Expect(1, 43007, '\P{Blk=sylotinagri}', "");
Expect(0, 43007, '\P{^Blk=sylotinagri}', "");
Expect(1, 43055, '\p{Blk=	_syloti_Nagri}', "");
Expect(0, 43055, '\p{^Blk=	_syloti_Nagri}', "");
Expect(0, 43055, '\P{Blk=	_syloti_Nagri}', "");
Expect(1, 43055, '\P{^Blk=	_syloti_Nagri}', "");
Expect(0, 43007, '\p{Blk=	_syloti_Nagri}', "");
Expect(1, 43007, '\p{^Blk=	_syloti_Nagri}', "");
Expect(1, 43007, '\P{Blk=	_syloti_Nagri}', "");
Expect(0, 43007, '\P{^Blk=	_syloti_Nagri}', "");
Error('\p{Is_Block=_:=SylotiNagri}');
Error('\P{Is_Block=_:=SylotiNagri}');
Expect(1, 43055, '\p{Is_Block=sylotinagri}', "");
Expect(0, 43055, '\p{^Is_Block=sylotinagri}', "");
Expect(0, 43055, '\P{Is_Block=sylotinagri}', "");
Expect(1, 43055, '\P{^Is_Block=sylotinagri}', "");
Expect(0, 43007, '\p{Is_Block=sylotinagri}', "");
Expect(1, 43007, '\p{^Is_Block=sylotinagri}', "");
Expect(1, 43007, '\P{Is_Block=sylotinagri}', "");
Expect(0, 43007, '\P{^Is_Block=sylotinagri}', "");
Expect(1, 43055, '\p{Is_Block=	_SYLOTINAGRI}', "");
Expect(0, 43055, '\p{^Is_Block=	_SYLOTINAGRI}', "");
Expect(0, 43055, '\P{Is_Block=	_SYLOTINAGRI}', "");
Expect(1, 43055, '\P{^Is_Block=	_SYLOTINAGRI}', "");
Expect(0, 43007, '\p{Is_Block=	_SYLOTINAGRI}', "");
Expect(1, 43007, '\p{^Is_Block=	_SYLOTINAGRI}', "");
Expect(1, 43007, '\P{Is_Block=	_SYLOTINAGRI}', "");
Expect(0, 43007, '\P{^Is_Block=	_SYLOTINAGRI}', "");
Error('\p{Is_Blk=:= Syloti Nagri}');
Error('\P{Is_Blk=:= Syloti Nagri}');
Expect(1, 43055, '\p{Is_Blk=sylotinagri}', "");
Expect(0, 43055, '\p{^Is_Blk=sylotinagri}', "");
Expect(0, 43055, '\P{Is_Blk=sylotinagri}', "");
Expect(1, 43055, '\P{^Is_Blk=sylotinagri}', "");
Expect(0, 43007, '\p{Is_Blk=sylotinagri}', "");
Expect(1, 43007, '\p{^Is_Blk=sylotinagri}', "");
Expect(1, 43007, '\P{Is_Blk=sylotinagri}', "");
Expect(0, 43007, '\P{^Is_Blk=sylotinagri}', "");
Expect(1, 43055, '\p{Is_Blk=_syloti-NAGRI}', "");
Expect(0, 43055, '\p{^Is_Blk=_syloti-NAGRI}', "");
Expect(0, 43055, '\P{Is_Blk=_syloti-NAGRI}', "");
Expect(1, 43055, '\P{^Is_Blk=_syloti-NAGRI}', "");
Expect(0, 43007, '\p{Is_Blk=_syloti-NAGRI}', "");
Expect(1, 43007, '\p{^Is_Blk=_syloti-NAGRI}', "");
Expect(1, 43007, '\P{Is_Blk=_syloti-NAGRI}', "");
Expect(0, 43007, '\P{^Is_Blk=_syloti-NAGRI}', "");
Error('\p{Block=-:=combining Diacritical Marks-ForSymbols}');
Error('\P{Block=-:=combining Diacritical Marks-ForSymbols}');
Expect(1, 8447, '\p{Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{Block=	-CombiningDiacritical-Marks	For	Symbols}', "");
Expect(0, 8447, '\p{^Block=	-CombiningDiacritical-Marks	For	Symbols}', "");
Expect(0, 8447, '\P{Block=	-CombiningDiacritical-Marks	For	Symbols}', "");
Expect(1, 8447, '\P{^Block=	-CombiningDiacritical-Marks	For	Symbols}', "");
Expect(0, 8399, '\p{Block=	-CombiningDiacritical-Marks	For	Symbols}', "");
Expect(1, 8399, '\p{^Block=	-CombiningDiacritical-Marks	For	Symbols}', "");
Expect(1, 8399, '\P{Block=	-CombiningDiacritical-Marks	For	Symbols}', "");
Expect(0, 8399, '\P{^Block=	-CombiningDiacritical-Marks	For	Symbols}', "");
Error('\p{Blk= _COMBINING MARKS FOR	Symbols/a/}');
Error('\P{Blk= _COMBINING MARKS FOR	Symbols/a/}');
Expect(1, 8447, '\p{Blk=combiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^Blk=combiningmarksforsymbols}', "");
Expect(0, 8447, '\P{Blk=combiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^Blk=combiningmarksforsymbols}', "");
Expect(0, 8399, '\p{Blk=combiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^Blk=combiningmarksforsymbols}', "");
Expect(1, 8399, '\P{Blk=combiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^Blk=combiningmarksforsymbols}', "");
Expect(1, 8447, '\p{Blk= Combining-Marks-For_symbols}', "");
Expect(0, 8447, '\p{^Blk= Combining-Marks-For_symbols}', "");
Expect(0, 8447, '\P{Blk= Combining-Marks-For_symbols}', "");
Expect(1, 8447, '\P{^Blk= Combining-Marks-For_symbols}', "");
Expect(0, 8399, '\p{Blk= Combining-Marks-For_symbols}', "");
Expect(1, 8399, '\p{^Blk= Combining-Marks-For_symbols}', "");
Expect(1, 8399, '\P{Blk= Combining-Marks-For_symbols}', "");
Expect(0, 8399, '\P{^Blk= Combining-Marks-For_symbols}', "");
Error('\p{Is_Block=	/a/COMBININGDiacritical_Marks	For SYMBOLS}');
Error('\P{Is_Block=	/a/COMBININGDiacritical_Marks	For SYMBOLS}');
Expect(1, 8447, '\p{Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^Is_Block=combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{Is_Block=	-Combining diacritical MARKS_For_SYMBOLS}', "");
Expect(0, 8447, '\p{^Is_Block=	-Combining diacritical MARKS_For_SYMBOLS}', "");
Expect(0, 8447, '\P{Is_Block=	-Combining diacritical MARKS_For_SYMBOLS}', "");
Expect(1, 8447, '\P{^Is_Block=	-Combining diacritical MARKS_For_SYMBOLS}', "");
Expect(0, 8399, '\p{Is_Block=	-Combining diacritical MARKS_For_SYMBOLS}', "");
Expect(1, 8399, '\p{^Is_Block=	-Combining diacritical MARKS_For_SYMBOLS}', "");
Expect(1, 8399, '\P{Is_Block=	-Combining diacritical MARKS_For_SYMBOLS}', "");
Expect(0, 8399, '\P{^Is_Block=	-Combining diacritical MARKS_For_SYMBOLS}', "");
Error('\p{Is_Blk=_COMBINING	MARKSFor_symbols/a/}');
Error('\P{Is_Blk=_COMBINING	MARKSFor_symbols/a/}');
Expect(1, 8447, '\p{Is_Blk=combiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^Is_Blk=combiningmarksforsymbols}', "");
Expect(0, 8447, '\P{Is_Blk=combiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^Is_Blk=combiningmarksforsymbols}', "");
Expect(0, 8399, '\p{Is_Blk=combiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^Is_Blk=combiningmarksforsymbols}', "");
Expect(1, 8399, '\P{Is_Blk=combiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^Is_Blk=combiningmarksforsymbols}', "");
Expect(1, 8447, '\p{Is_Blk= -Combining-Marks	For_Symbols}', "");
Expect(0, 8447, '\p{^Is_Blk= -Combining-Marks	For_Symbols}', "");
Expect(0, 8447, '\P{Is_Blk= -Combining-Marks	For_Symbols}', "");
Expect(1, 8447, '\P{^Is_Blk= -Combining-Marks	For_Symbols}', "");
Expect(0, 8399, '\p{Is_Blk= -Combining-Marks	For_Symbols}', "");
Expect(1, 8399, '\p{^Is_Blk= -Combining-Marks	For_Symbols}', "");
Expect(1, 8399, '\P{Is_Blk= -Combining-Marks	For_Symbols}', "");
Expect(0, 8399, '\P{^Is_Blk= -Combining-Marks	For_Symbols}', "");
Error('\p{Block= -basic/a/Latin}');
Error('\P{Block= -basic/a/Latin}');
Expect(1, 127, '\p{Block=basiclatin}', "");
Expect(0, 127, '\p{^Block=basiclatin}', "");
Expect(0, 127, '\P{Block=basiclatin}', "");
Expect(1, 127, '\P{^Block=basiclatin}', "");
Expect(0, 128, '\p{Block=basiclatin}', "");
Expect(1, 128, '\p{^Block=basiclatin}', "");
Expect(1, 128, '\P{Block=basiclatin}', "");
Expect(0, 128, '\P{^Block=basiclatin}', "");
Expect(1, 127, '\p{Block=Basic latin}', "");
Expect(0, 127, '\p{^Block=Basic latin}', "");
Expect(0, 127, '\P{Block=Basic latin}', "");
Expect(1, 127, '\P{^Block=Basic latin}', "");
Expect(0, 128, '\p{Block=Basic latin}', "");
Expect(1, 128, '\p{^Block=Basic latin}', "");
Expect(1, 128, '\P{Block=Basic latin}', "");
Expect(0, 128, '\P{^Block=Basic latin}', "");
Error('\p{Blk=	:=ASCII}');
Error('\P{Blk=	:=ASCII}');
Expect(1, 127, '\p{Blk: ascii}', "");
Expect(0, 127, '\p{^Blk: ascii}', "");
Expect(0, 127, '\P{Blk: ascii}', "");
Expect(1, 127, '\P{^Blk: ascii}', "");
Expect(0, 128, '\p{Blk: ascii}', "");
Expect(1, 128, '\p{^Blk: ascii}', "");
Expect(1, 128, '\P{Blk: ascii}', "");
Expect(0, 128, '\P{^Blk: ascii}', "");
Expect(1, 127, '\p{Blk=--ASCII}', "");
Expect(0, 127, '\p{^Blk=--ASCII}', "");
Expect(0, 127, '\P{Blk=--ASCII}', "");
Expect(1, 127, '\P{^Blk=--ASCII}', "");
Expect(0, 128, '\p{Blk=--ASCII}', "");
Expect(1, 128, '\p{^Blk=--ASCII}', "");
Expect(1, 128, '\P{Blk=--ASCII}', "");
Expect(0, 128, '\P{^Blk=--ASCII}', "");
Error('\p{Is_Block=- Basic:=LATIN}');
Error('\P{Is_Block=- Basic:=LATIN}');
Expect(1, 127, '\p{Is_Block=basiclatin}', "");
Expect(0, 127, '\p{^Is_Block=basiclatin}', "");
Expect(0, 127, '\P{Is_Block=basiclatin}', "");
Expect(1, 127, '\P{^Is_Block=basiclatin}', "");
Expect(0, 128, '\p{Is_Block=basiclatin}', "");
Expect(1, 128, '\p{^Is_Block=basiclatin}', "");
Expect(1, 128, '\P{Is_Block=basiclatin}', "");
Expect(0, 128, '\P{^Is_Block=basiclatin}', "");
Expect(1, 127, '\p{Is_Block=_-BASIC Latin}', "");
Expect(0, 127, '\p{^Is_Block=_-BASIC Latin}', "");
Expect(0, 127, '\P{Is_Block=_-BASIC Latin}', "");
Expect(1, 127, '\P{^Is_Block=_-BASIC Latin}', "");
Expect(0, 128, '\p{Is_Block=_-BASIC Latin}', "");
Expect(1, 128, '\p{^Is_Block=_-BASIC Latin}', "");
Expect(1, 128, '\P{Is_Block=_-BASIC Latin}', "");
Expect(0, 128, '\P{^Is_Block=_-BASIC Latin}', "");
Error('\p{Is_Blk=-:=ASCII}');
Error('\P{Is_Blk=-:=ASCII}');
Expect(1, 127, '\p{Is_Blk=ascii}', "");
Expect(0, 127, '\p{^Is_Blk=ascii}', "");
Expect(0, 127, '\P{Is_Blk=ascii}', "");
Expect(1, 127, '\P{^Is_Blk=ascii}', "");
Expect(0, 128, '\p{Is_Blk=ascii}', "");
Expect(1, 128, '\p{^Is_Blk=ascii}', "");
Expect(1, 128, '\P{Is_Blk=ascii}', "");
Expect(0, 128, '\P{^Is_Blk=ascii}', "");
Expect(1, 127, '\p{Is_Blk=-ASCII}', "");
Expect(0, 127, '\p{^Is_Blk=-ASCII}', "");
Expect(0, 127, '\P{Is_Blk=-ASCII}', "");
Expect(1, 127, '\P{^Is_Blk=-ASCII}', "");
Expect(0, 128, '\p{Is_Blk=-ASCII}', "");
Expect(1, 128, '\p{^Is_Blk=-ASCII}', "");
Expect(1, 128, '\P{Is_Blk=-ASCII}', "");
Expect(0, 128, '\P{^Is_Blk=-ASCII}', "");
Error('\p{Block:   /a/-	limbu}');
Error('\P{Block:   /a/-	limbu}');
Expect(1, 6479, '\p{Block=limbu}', "");
Expect(0, 6479, '\p{^Block=limbu}', "");
Expect(0, 6479, '\P{Block=limbu}', "");
Expect(1, 6479, '\P{^Block=limbu}', "");
Expect(0, 6399, '\p{Block=limbu}', "");
Expect(1, 6399, '\p{^Block=limbu}', "");
Expect(1, 6399, '\P{Block=limbu}', "");
Expect(0, 6399, '\P{^Block=limbu}', "");
Expect(1, 6479, '\p{Block=	 Limbu}', "");
Expect(0, 6479, '\p{^Block=	 Limbu}', "");
Expect(0, 6479, '\P{Block=	 Limbu}', "");
Expect(1, 6479, '\P{^Block=	 Limbu}', "");
Expect(0, 6399, '\p{Block=	 Limbu}', "");
Expect(1, 6399, '\p{^Block=	 Limbu}', "");
Expect(1, 6399, '\P{Block=	 Limbu}', "");
Expect(0, 6399, '\P{^Block=	 Limbu}', "");
Error('\p{Blk=__limbu/a/}');
Error('\P{Blk=__limbu/a/}');
Expect(1, 6479, '\p{Blk=limbu}', "");
Expect(0, 6479, '\p{^Blk=limbu}', "");
Expect(0, 6479, '\P{Blk=limbu}', "");
Expect(1, 6479, '\P{^Blk=limbu}', "");
Expect(0, 6399, '\p{Blk=limbu}', "");
Expect(1, 6399, '\p{^Blk=limbu}', "");
Expect(1, 6399, '\P{Blk=limbu}', "");
Expect(0, 6399, '\P{^Blk=limbu}', "");
Expect(1, 6479, '\p{Blk=--LIMBU}', "");
Expect(0, 6479, '\p{^Blk=--LIMBU}', "");
Expect(0, 6479, '\P{Blk=--LIMBU}', "");
Expect(1, 6479, '\P{^Blk=--LIMBU}', "");
Expect(0, 6399, '\p{Blk=--LIMBU}', "");
Expect(1, 6399, '\p{^Blk=--LIMBU}', "");
Expect(1, 6399, '\P{Blk=--LIMBU}', "");
Expect(0, 6399, '\P{^Blk=--LIMBU}', "");
Error('\p{Is_Block=	_limbu/a/}');
Error('\P{Is_Block=	_limbu/a/}');
Expect(1, 6479, '\p{Is_Block=limbu}', "");
Expect(0, 6479, '\p{^Is_Block=limbu}', "");
Expect(0, 6479, '\P{Is_Block=limbu}', "");
Expect(1, 6479, '\P{^Is_Block=limbu}', "");
Expect(0, 6399, '\p{Is_Block=limbu}', "");
Expect(1, 6399, '\p{^Is_Block=limbu}', "");
Expect(1, 6399, '\P{Is_Block=limbu}', "");
Expect(0, 6399, '\P{^Is_Block=limbu}', "");
Expect(1, 6479, '\p{Is_Block=	_Limbu}', "");
Expect(0, 6479, '\p{^Is_Block=	_Limbu}', "");
Expect(0, 6479, '\P{Is_Block=	_Limbu}', "");
Expect(1, 6479, '\P{^Is_Block=	_Limbu}', "");
Expect(0, 6399, '\p{Is_Block=	_Limbu}', "");
Expect(1, 6399, '\p{^Is_Block=	_Limbu}', "");
Expect(1, 6399, '\P{Is_Block=	_Limbu}', "");
Expect(0, 6399, '\P{^Is_Block=	_Limbu}', "");
Error('\p{Is_Blk=LIMBU:=}');
Error('\P{Is_Blk=LIMBU:=}');
Expect(1, 6479, '\p{Is_Blk=limbu}', "");
Expect(0, 6479, '\p{^Is_Blk=limbu}', "");
Expect(0, 6479, '\P{Is_Blk=limbu}', "");
Expect(1, 6479, '\P{^Is_Blk=limbu}', "");
Expect(0, 6399, '\p{Is_Blk=limbu}', "");
Expect(1, 6399, '\p{^Is_Blk=limbu}', "");
Expect(1, 6399, '\P{Is_Blk=limbu}', "");
Expect(0, 6399, '\P{^Is_Blk=limbu}', "");
Expect(1, 6479, '\p{Is_Blk=	_limbu}', "");
Expect(0, 6479, '\p{^Is_Blk=	_limbu}', "");
Expect(0, 6479, '\P{Is_Blk=	_limbu}', "");
Expect(1, 6479, '\P{^Is_Blk=	_limbu}', "");
Expect(0, 6399, '\p{Is_Blk=	_limbu}', "");
Expect(1, 6399, '\p{^Is_Blk=	_limbu}', "");
Expect(1, 6399, '\P{Is_Blk=	_limbu}', "");
Expect(0, 6399, '\P{^Is_Blk=	_limbu}', "");
Error('\p{Block=_/a/Currency-symbols}');
Error('\P{Block=_/a/Currency-symbols}');
Expect(1, 8399, '\p{Block=currencysymbols}', "");
Expect(0, 8399, '\p{^Block=currencysymbols}', "");
Expect(0, 8399, '\P{Block=currencysymbols}', "");
Expect(1, 8399, '\P{^Block=currencysymbols}', "");
Expect(0, 8351, '\p{Block=currencysymbols}', "");
Expect(1, 8351, '\p{^Block=currencysymbols}', "");
Expect(1, 8351, '\P{Block=currencysymbols}', "");
Expect(0, 8351, '\P{^Block=currencysymbols}', "");
Expect(1, 8399, '\p{Block=_currency_Symbols}', "");
Expect(0, 8399, '\p{^Block=_currency_Symbols}', "");
Expect(0, 8399, '\P{Block=_currency_Symbols}', "");
Expect(1, 8399, '\P{^Block=_currency_Symbols}', "");
Expect(0, 8351, '\p{Block=_currency_Symbols}', "");
Expect(1, 8351, '\p{^Block=_currency_Symbols}', "");
Expect(1, 8351, '\P{Block=_currency_Symbols}', "");
Expect(0, 8351, '\P{^Block=_currency_Symbols}', "");
Error('\p{Blk=-currency-symbols/a/}');
Error('\P{Blk=-currency-symbols/a/}');
Expect(1, 8399, '\p{Blk=currencysymbols}', "");
Expect(0, 8399, '\p{^Blk=currencysymbols}', "");
Expect(0, 8399, '\P{Blk=currencysymbols}', "");
Expect(1, 8399, '\P{^Blk=currencysymbols}', "");
Expect(0, 8351, '\p{Blk=currencysymbols}', "");
Expect(1, 8351, '\p{^Blk=currencysymbols}', "");
Expect(1, 8351, '\P{Blk=currencysymbols}', "");
Expect(0, 8351, '\P{^Blk=currencysymbols}', "");
Expect(1, 8399, '\p{Blk=-_CURRENCY-Symbols}', "");
Expect(0, 8399, '\p{^Blk=-_CURRENCY-Symbols}', "");
Expect(0, 8399, '\P{Blk=-_CURRENCY-Symbols}', "");
Expect(1, 8399, '\P{^Blk=-_CURRENCY-Symbols}', "");
Expect(0, 8351, '\p{Blk=-_CURRENCY-Symbols}', "");
Expect(1, 8351, '\p{^Blk=-_CURRENCY-Symbols}', "");
Expect(1, 8351, '\P{Blk=-_CURRENCY-Symbols}', "");
Expect(0, 8351, '\P{^Blk=-_CURRENCY-Symbols}', "");
Error('\p{Is_Block=- CURRENCY:=SYMBOLS}');
Error('\P{Is_Block=- CURRENCY:=SYMBOLS}');
Expect(1, 8399, '\p{Is_Block=currencysymbols}', "");
Expect(0, 8399, '\p{^Is_Block=currencysymbols}', "");
Expect(0, 8399, '\P{Is_Block=currencysymbols}', "");
Expect(1, 8399, '\P{^Is_Block=currencysymbols}', "");
Expect(0, 8351, '\p{Is_Block=currencysymbols}', "");
Expect(1, 8351, '\p{^Is_Block=currencysymbols}', "");
Expect(1, 8351, '\P{Is_Block=currencysymbols}', "");
Expect(0, 8351, '\P{^Is_Block=currencysymbols}', "");
Expect(1, 8399, '\p{Is_Block=- currency_SYMBOLS}', "");
Expect(0, 8399, '\p{^Is_Block=- currency_SYMBOLS}', "");
Expect(0, 8399, '\P{Is_Block=- currency_SYMBOLS}', "");
Expect(1, 8399, '\P{^Is_Block=- currency_SYMBOLS}', "");
Expect(0, 8351, '\p{Is_Block=- currency_SYMBOLS}', "");
Expect(1, 8351, '\p{^Is_Block=- currency_SYMBOLS}', "");
Expect(1, 8351, '\P{Is_Block=- currency_SYMBOLS}', "");
Expect(0, 8351, '\P{^Is_Block=- currency_SYMBOLS}', "");
Error('\p{Is_Blk=-/a/currency-Symbols}');
Error('\P{Is_Blk=-/a/currency-Symbols}');
Expect(1, 8399, '\p{Is_Blk: currencysymbols}', "");
Expect(0, 8399, '\p{^Is_Blk: currencysymbols}', "");
Expect(0, 8399, '\P{Is_Blk: currencysymbols}', "");
Expect(1, 8399, '\P{^Is_Blk: currencysymbols}', "");
Expect(0, 8351, '\p{Is_Blk: currencysymbols}', "");
Expect(1, 8351, '\p{^Is_Blk: currencysymbols}', "");
Expect(1, 8351, '\P{Is_Blk: currencysymbols}', "");
Expect(0, 8351, '\P{^Is_Blk: currencysymbols}', "");
Expect(1, 8399, '\p{Is_Blk=	Currency-Symbols}', "");
Expect(0, 8399, '\p{^Is_Blk=	Currency-Symbols}', "");
Expect(0, 8399, '\P{Is_Blk=	Currency-Symbols}', "");
Expect(1, 8399, '\P{^Is_Blk=	Currency-Symbols}', "");
Expect(0, 8351, '\p{Is_Blk=	Currency-Symbols}', "");
Expect(1, 8351, '\p{^Is_Blk=	Currency-Symbols}', "");
Expect(1, 8351, '\P{Is_Blk=	Currency-Symbols}', "");
Expect(0, 8351, '\P{^Is_Blk=	Currency-Symbols}', "");
Error('\p{Block= Spacing/a/modifier-Letters}');
Error('\P{Block= Spacing/a/modifier-Letters}');
Expect(1, 767, '\p{Block=spacingmodifierletters}', "");
Expect(0, 767, '\p{^Block=spacingmodifierletters}', "");
Expect(0, 767, '\P{Block=spacingmodifierletters}', "");
Expect(1, 767, '\P{^Block=spacingmodifierletters}', "");
Expect(0, 687, '\p{Block=spacingmodifierletters}', "");
Expect(1, 687, '\p{^Block=spacingmodifierletters}', "");
Expect(1, 687, '\P{Block=spacingmodifierletters}', "");
Expect(0, 687, '\P{^Block=spacingmodifierletters}', "");
Expect(1, 767, '\p{Block= Spacing Modifier_letters}', "");
Expect(0, 767, '\p{^Block= Spacing Modifier_letters}', "");
Expect(0, 767, '\P{Block= Spacing Modifier_letters}', "");
Expect(1, 767, '\P{^Block= Spacing Modifier_letters}', "");
Expect(0, 687, '\p{Block= Spacing Modifier_letters}', "");
Expect(1, 687, '\p{^Block= Spacing Modifier_letters}', "");
Expect(1, 687, '\P{Block= Spacing Modifier_letters}', "");
Expect(0, 687, '\P{^Block= Spacing Modifier_letters}', "");
Error('\p{Blk=	spacing-Modifier:=letters}');
Error('\P{Blk=	spacing-Modifier:=letters}');
Expect(1, 767, '\p{Blk=spacingmodifierletters}', "");
Expect(0, 767, '\p{^Blk=spacingmodifierletters}', "");
Expect(0, 767, '\P{Blk=spacingmodifierletters}', "");
Expect(1, 767, '\P{^Blk=spacingmodifierletters}', "");
Expect(0, 687, '\p{Blk=spacingmodifierletters}', "");
Expect(1, 687, '\p{^Blk=spacingmodifierletters}', "");
Expect(1, 687, '\P{Blk=spacingmodifierletters}', "");
Expect(0, 687, '\P{^Blk=spacingmodifierletters}', "");
Expect(1, 767, '\p{Blk=_ Spacing modifierLETTERS}', "");
Expect(0, 767, '\p{^Blk=_ Spacing modifierLETTERS}', "");
Expect(0, 767, '\P{Blk=_ Spacing modifierLETTERS}', "");
Expect(1, 767, '\P{^Blk=_ Spacing modifierLETTERS}', "");
Expect(0, 687, '\p{Blk=_ Spacing modifierLETTERS}', "");
Expect(1, 687, '\p{^Blk=_ Spacing modifierLETTERS}', "");
Expect(1, 687, '\P{Blk=_ Spacing modifierLETTERS}', "");
Expect(0, 687, '\P{^Blk=_ Spacing modifierLETTERS}', "");
Error('\p{Is_Block=-_spacing_Modifier	Letters:=}');
Error('\P{Is_Block=-_spacing_Modifier	Letters:=}');
Expect(1, 767, '\p{Is_Block=spacingmodifierletters}', "");
Expect(0, 767, '\p{^Is_Block=spacingmodifierletters}', "");
Expect(0, 767, '\P{Is_Block=spacingmodifierletters}', "");
Expect(1, 767, '\P{^Is_Block=spacingmodifierletters}', "");
Expect(0, 687, '\p{Is_Block=spacingmodifierletters}', "");
Expect(1, 687, '\p{^Is_Block=spacingmodifierletters}', "");
Expect(1, 687, '\P{Is_Block=spacingmodifierletters}', "");
Expect(0, 687, '\P{^Is_Block=spacingmodifierletters}', "");
Expect(1, 767, '\p{Is_Block=_Spacing	modifier-Letters}', "");
Expect(0, 767, '\p{^Is_Block=_Spacing	modifier-Letters}', "");
Expect(0, 767, '\P{Is_Block=_Spacing	modifier-Letters}', "");
Expect(1, 767, '\P{^Is_Block=_Spacing	modifier-Letters}', "");
Expect(0, 687, '\p{Is_Block=_Spacing	modifier-Letters}', "");
Expect(1, 687, '\p{^Is_Block=_Spacing	modifier-Letters}', "");
Expect(1, 687, '\P{Is_Block=_Spacing	modifier-Letters}', "");
Expect(0, 687, '\P{^Is_Block=_Spacing	modifier-Letters}', "");
Error('\p{Is_Blk=/a/ 	Spacing-Modifier_letters}');
Error('\P{Is_Blk=/a/ 	Spacing-Modifier_letters}');
Expect(1, 767, '\p{Is_Blk:spacingmodifierletters}', "");
Expect(0, 767, '\p{^Is_Blk:spacingmodifierletters}', "");
Expect(0, 767, '\P{Is_Blk:spacingmodifierletters}', "");
Expect(1, 767, '\P{^Is_Blk:spacingmodifierletters}', "");
Expect(0, 687, '\p{Is_Blk:spacingmodifierletters}', "");
Expect(1, 687, '\p{^Is_Blk:spacingmodifierletters}', "");
Expect(1, 687, '\P{Is_Blk:spacingmodifierletters}', "");
Expect(0, 687, '\P{^Is_Blk:spacingmodifierletters}', "");
Expect(1, 767, '\p{Is_Blk= Spacingmodifier letters}', "");
Expect(0, 767, '\p{^Is_Blk= Spacingmodifier letters}', "");
Expect(0, 767, '\P{Is_Blk= Spacingmodifier letters}', "");
Expect(1, 767, '\P{^Is_Blk= Spacingmodifier letters}', "");
Expect(0, 687, '\p{Is_Blk= Spacingmodifier letters}', "");
Expect(1, 687, '\p{^Is_Blk= Spacingmodifier letters}', "");
Expect(1, 687, '\P{Is_Blk= Spacingmodifier letters}', "");
Expect(0, 687, '\P{^Is_Blk= Spacingmodifier letters}', "");
Error('\p{Block=	Box DRAWING/a/}');
Error('\P{Block=	Box DRAWING/a/}');
Expect(1, 9599, '\p{Block=boxdrawing}', "");
Expect(0, 9599, '\p{^Block=boxdrawing}', "");
Expect(0, 9599, '\P{Block=boxdrawing}', "");
Expect(1, 9599, '\P{^Block=boxdrawing}', "");
Expect(0, 9471, '\p{Block=boxdrawing}', "");
Expect(1, 9471, '\p{^Block=boxdrawing}', "");
Expect(1, 9471, '\P{Block=boxdrawing}', "");
Expect(0, 9471, '\P{^Block=boxdrawing}', "");
Expect(1, 9599, '\p{Block=_-Box_drawing}', "");
Expect(0, 9599, '\p{^Block=_-Box_drawing}', "");
Expect(0, 9599, '\P{Block=_-Box_drawing}', "");
Expect(1, 9599, '\P{^Block=_-Box_drawing}', "");
Expect(0, 9471, '\p{Block=_-Box_drawing}', "");
Expect(1, 9471, '\p{^Block=_-Box_drawing}', "");
Expect(1, 9471, '\P{Block=_-Box_drawing}', "");
Expect(0, 9471, '\P{^Block=_-Box_drawing}', "");
Error('\p{Blk= -box	drawing/a/}');
Error('\P{Blk= -box	drawing/a/}');
Expect(1, 9599, '\p{Blk=boxdrawing}', "");
Expect(0, 9599, '\p{^Blk=boxdrawing}', "");
Expect(0, 9599, '\P{Blk=boxdrawing}', "");
Expect(1, 9599, '\P{^Blk=boxdrawing}', "");
Expect(0, 9471, '\p{Blk=boxdrawing}', "");
Expect(1, 9471, '\p{^Blk=boxdrawing}', "");
Expect(1, 9471, '\P{Blk=boxdrawing}', "");
Expect(0, 9471, '\P{^Blk=boxdrawing}', "");
Expect(1, 9599, '\p{Blk: _Box-drawing}', "");
Expect(0, 9599, '\p{^Blk: _Box-drawing}', "");
Expect(0, 9599, '\P{Blk: _Box-drawing}', "");
Expect(1, 9599, '\P{^Blk: _Box-drawing}', "");
Expect(0, 9471, '\p{Blk: _Box-drawing}', "");
Expect(1, 9471, '\p{^Blk: _Box-drawing}', "");
Expect(1, 9471, '\P{Blk: _Box-drawing}', "");
Expect(0, 9471, '\P{^Blk: _Box-drawing}', "");
Error('\p{Is_Block=		Box:=Drawing}');
Error('\P{Is_Block=		Box:=Drawing}');
Expect(1, 9599, '\p{Is_Block:	boxdrawing}', "");
Expect(0, 9599, '\p{^Is_Block:	boxdrawing}', "");
Expect(0, 9599, '\P{Is_Block:	boxdrawing}', "");
Expect(1, 9599, '\P{^Is_Block:	boxdrawing}', "");
Expect(0, 9471, '\p{Is_Block:	boxdrawing}', "");
Expect(1, 9471, '\p{^Is_Block:	boxdrawing}', "");
Expect(1, 9471, '\P{Is_Block:	boxdrawing}', "");
Expect(0, 9471, '\P{^Is_Block:	boxdrawing}', "");
Expect(1, 9599, '\p{Is_Block=Box_Drawing}', "");
Expect(0, 9599, '\p{^Is_Block=Box_Drawing}', "");
Expect(0, 9599, '\P{Is_Block=Box_Drawing}', "");
Expect(1, 9599, '\P{^Is_Block=Box_Drawing}', "");
Expect(0, 9471, '\p{Is_Block=Box_Drawing}', "");
Expect(1, 9471, '\p{^Is_Block=Box_Drawing}', "");
Expect(1, 9471, '\P{Is_Block=Box_Drawing}', "");
Expect(0, 9471, '\P{^Is_Block=Box_Drawing}', "");
Error('\p{Is_Blk=-	BOX:=Drawing}');
Error('\P{Is_Blk=-	BOX:=Drawing}');
Expect(1, 9599, '\p{Is_Blk=boxdrawing}', "");
Expect(0, 9599, '\p{^Is_Blk=boxdrawing}', "");
Expect(0, 9599, '\P{Is_Blk=boxdrawing}', "");
Expect(1, 9599, '\P{^Is_Blk=boxdrawing}', "");
Expect(0, 9471, '\p{Is_Blk=boxdrawing}', "");
Expect(1, 9471, '\p{^Is_Blk=boxdrawing}', "");
Expect(1, 9471, '\P{Is_Blk=boxdrawing}', "");
Expect(0, 9471, '\P{^Is_Blk=boxdrawing}', "");
Expect(1, 9599, '\p{Is_Blk:   --box-Drawing}', "");
Expect(0, 9599, '\p{^Is_Blk:   --box-Drawing}', "");
Expect(0, 9599, '\P{Is_Blk:   --box-Drawing}', "");
Expect(1, 9599, '\P{^Is_Blk:   --box-Drawing}', "");
Expect(0, 9471, '\p{Is_Blk:   --box-Drawing}', "");
Expect(1, 9471, '\p{^Is_Blk:   --box-Drawing}', "");
Expect(1, 9471, '\P{Is_Blk:   --box-Drawing}', "");
Expect(0, 9471, '\P{^Is_Blk:   --box-Drawing}', "");
Error('\p{Block= -superscriptsANDSubscripts/a/}');
Error('\P{Block= -superscriptsANDSubscripts/a/}');
Expect(1, 8351, '\p{Block=superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^Block=superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{Block=superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^Block=superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{Block=superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^Block=superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{Block=superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^Block=superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{Block=		superscripts	And-Subscripts}', "");
Expect(0, 8351, '\p{^Block=		superscripts	And-Subscripts}', "");
Expect(0, 8351, '\P{Block=		superscripts	And-Subscripts}', "");
Expect(1, 8351, '\P{^Block=		superscripts	And-Subscripts}', "");
Expect(0, 8303, '\p{Block=		superscripts	And-Subscripts}', "");
Expect(1, 8303, '\p{^Block=		superscripts	And-Subscripts}', "");
Expect(1, 8303, '\P{Block=		superscripts	And-Subscripts}', "");
Expect(0, 8303, '\P{^Block=		superscripts	And-Subscripts}', "");
Error('\p{Blk=-	Superscripts:=And SUBSCRIPTS}');
Error('\P{Blk=-	Superscripts:=And SUBSCRIPTS}');
Expect(1, 8351, '\p{Blk=superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^Blk=superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{Blk=superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^Blk=superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{Blk=superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^Blk=superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{Blk=superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^Blk=superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{Blk=_Superscripts	AND Subscripts}', "");
Expect(0, 8351, '\p{^Blk=_Superscripts	AND Subscripts}', "");
Expect(0, 8351, '\P{Blk=_Superscripts	AND Subscripts}', "");
Expect(1, 8351, '\P{^Blk=_Superscripts	AND Subscripts}', "");
Expect(0, 8303, '\p{Blk=_Superscripts	AND Subscripts}', "");
Expect(1, 8303, '\p{^Blk=_Superscripts	AND Subscripts}', "");
Expect(1, 8303, '\P{Blk=_Superscripts	AND Subscripts}', "");
Expect(0, 8303, '\P{^Blk=_Superscripts	AND Subscripts}', "");
Error('\p{Is_Block=/a/__SUPERSCRIPTS And	Subscripts}');
Error('\P{Is_Block=/a/__SUPERSCRIPTS And	Subscripts}');
Expect(1, 8351, '\p{Is_Block=superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^Is_Block=superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{Is_Block=superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^Is_Block=superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{Is_Block=superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^Is_Block=superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{Is_Block=superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^Is_Block=superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{Is_Block=	_SuperscriptsAnd	subscripts}', "");
Expect(0, 8351, '\p{^Is_Block=	_SuperscriptsAnd	subscripts}', "");
Expect(0, 8351, '\P{Is_Block=	_SuperscriptsAnd	subscripts}', "");
Expect(1, 8351, '\P{^Is_Block=	_SuperscriptsAnd	subscripts}', "");
Expect(0, 8303, '\p{Is_Block=	_SuperscriptsAnd	subscripts}', "");
Expect(1, 8303, '\p{^Is_Block=	_SuperscriptsAnd	subscripts}', "");
Expect(1, 8303, '\P{Is_Block=	_SuperscriptsAnd	subscripts}', "");
Expect(0, 8303, '\P{^Is_Block=	_SuperscriptsAnd	subscripts}', "");
Error('\p{Is_Blk=	/a/Superscripts	And	Subscripts}');
Error('\P{Is_Blk=	/a/Superscripts	And	Subscripts}');
Expect(1, 8351, '\p{Is_Blk=superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^Is_Blk=superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{Is_Blk=superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^Is_Blk=superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{Is_Blk=superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^Is_Blk=superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{Is_Blk=superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^Is_Blk=superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{Is_Blk=Superscripts-And-Subscripts}', "");
Expect(0, 8351, '\p{^Is_Blk=Superscripts-And-Subscripts}', "");
Expect(0, 8351, '\P{Is_Blk=Superscripts-And-Subscripts}', "");
Expect(1, 8351, '\P{^Is_Blk=Superscripts-And-Subscripts}', "");
Expect(0, 8303, '\p{Is_Blk=Superscripts-And-Subscripts}', "");
Expect(1, 8303, '\p{^Is_Blk=Superscripts-And-Subscripts}', "");
Expect(1, 8303, '\P{Is_Blk=Superscripts-And-Subscripts}', "");
Expect(0, 8303, '\P{^Is_Blk=Superscripts-And-Subscripts}', "");
Error('\p{Block= _Ancient-Greek/a/Numbers}');
Error('\P{Block= _Ancient-Greek/a/Numbers}');
Expect(1, 65935, '\p{Block=ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^Block=ancientgreeknumbers}', "");
Expect(0, 65935, '\P{Block=ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^Block=ancientgreeknumbers}', "");
Expect(0, 65855, '\p{Block=ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^Block=ancientgreeknumbers}', "");
Expect(1, 65855, '\P{Block=ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^Block=ancientgreeknumbers}', "");
Expect(1, 65935, '\p{Block=_Ancient	GREEK-numbers}', "");
Expect(0, 65935, '\p{^Block=_Ancient	GREEK-numbers}', "");
Expect(0, 65935, '\P{Block=_Ancient	GREEK-numbers}', "");
Expect(1, 65935, '\P{^Block=_Ancient	GREEK-numbers}', "");
Expect(0, 65855, '\p{Block=_Ancient	GREEK-numbers}', "");
Expect(1, 65855, '\p{^Block=_Ancient	GREEK-numbers}', "");
Expect(1, 65855, '\P{Block=_Ancient	GREEK-numbers}', "");
Expect(0, 65855, '\P{^Block=_Ancient	GREEK-numbers}', "");
Error('\p{Blk= _ANCIENT/a/Greek	Numbers}');
Error('\P{Blk= _ANCIENT/a/Greek	Numbers}');
Expect(1, 65935, '\p{Blk=ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^Blk=ancientgreeknumbers}', "");
Expect(0, 65935, '\P{Blk=ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^Blk=ancientgreeknumbers}', "");
Expect(0, 65855, '\p{Blk=ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^Blk=ancientgreeknumbers}', "");
Expect(1, 65855, '\P{Blk=ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^Blk=ancientgreeknumbers}', "");
Expect(1, 65935, '\p{Blk=	Ancient	Greeknumbers}', "");
Expect(0, 65935, '\p{^Blk=	Ancient	Greeknumbers}', "");
Expect(0, 65935, '\P{Blk=	Ancient	Greeknumbers}', "");
Expect(1, 65935, '\P{^Blk=	Ancient	Greeknumbers}', "");
Expect(0, 65855, '\p{Blk=	Ancient	Greeknumbers}', "");
Expect(1, 65855, '\p{^Blk=	Ancient	Greeknumbers}', "");
Expect(1, 65855, '\P{Blk=	Ancient	Greeknumbers}', "");
Expect(0, 65855, '\P{^Blk=	Ancient	Greeknumbers}', "");
Error('\p{Is_Block: _Ancient_greek/a/numbers}');
Error('\P{Is_Block: _Ancient_greek/a/numbers}');
Expect(1, 65935, '\p{Is_Block=ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^Is_Block=ancientgreeknumbers}', "");
Expect(0, 65935, '\P{Is_Block=ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^Is_Block=ancientgreeknumbers}', "");
Expect(0, 65855, '\p{Is_Block=ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^Is_Block=ancientgreeknumbers}', "");
Expect(1, 65855, '\P{Is_Block=ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^Is_Block=ancientgreeknumbers}', "");
Expect(1, 65935, '\p{Is_Block=	-ancient_GREEKNUMBERS}', "");
Expect(0, 65935, '\p{^Is_Block=	-ancient_GREEKNUMBERS}', "");
Expect(0, 65935, '\P{Is_Block=	-ancient_GREEKNUMBERS}', "");
Expect(1, 65935, '\P{^Is_Block=	-ancient_GREEKNUMBERS}', "");
Expect(0, 65855, '\p{Is_Block=	-ancient_GREEKNUMBERS}', "");
Expect(1, 65855, '\p{^Is_Block=	-ancient_GREEKNUMBERS}', "");
Expect(1, 65855, '\P{Is_Block=	-ancient_GREEKNUMBERS}', "");
Expect(0, 65855, '\P{^Is_Block=	-ancient_GREEKNUMBERS}', "");
Error('\p{Is_Blk=:=_Ancientgreek-NUMBERS}');
Error('\P{Is_Blk=:=_Ancientgreek-NUMBERS}');
Expect(1, 65935, '\p{Is_Blk=ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^Is_Blk=ancientgreeknumbers}', "");
Expect(0, 65935, '\P{Is_Blk=ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^Is_Blk=ancientgreeknumbers}', "");
Expect(0, 65855, '\p{Is_Blk=ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^Is_Blk=ancientgreeknumbers}', "");
Expect(1, 65855, '\P{Is_Blk=ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^Is_Blk=ancientgreeknumbers}', "");
Expect(1, 65935, '\p{Is_Blk=-ancientGreek_Numbers}', "");
Expect(0, 65935, '\p{^Is_Blk=-ancientGreek_Numbers}', "");
Expect(0, 65935, '\P{Is_Blk=-ancientGreek_Numbers}', "");
Expect(1, 65935, '\P{^Is_Blk=-ancientGreek_Numbers}', "");
Expect(0, 65855, '\p{Is_Blk=-ancientGreek_Numbers}', "");
Expect(1, 65855, '\p{^Is_Blk=-ancientGreek_Numbers}', "");
Expect(1, 65855, '\P{Is_Blk=-ancientGreek_Numbers}', "");
Expect(0, 65855, '\P{^Is_Blk=-ancientGreek_Numbers}', "");
Error('\p{Block=	NKO/a/}');
Error('\P{Block=	NKO/a/}');
Expect(1, 2047, '\p{Block=nko}', "");
Expect(0, 2047, '\p{^Block=nko}', "");
Expect(0, 2047, '\P{Block=nko}', "");
Expect(1, 2047, '\P{^Block=nko}', "");
Expect(0, 1983, '\p{Block=nko}', "");
Expect(1, 1983, '\p{^Block=nko}', "");
Expect(1, 1983, '\P{Block=nko}', "");
Expect(0, 1983, '\P{^Block=nko}', "");
Expect(1, 2047, '\p{Block=_nko}', "");
Expect(0, 2047, '\p{^Block=_nko}', "");
Expect(0, 2047, '\P{Block=_nko}', "");
Expect(1, 2047, '\P{^Block=_nko}', "");
Expect(0, 1983, '\p{Block=_nko}', "");
Expect(1, 1983, '\p{^Block=_nko}', "");
Expect(1, 1983, '\P{Block=_nko}', "");
Expect(0, 1983, '\P{^Block=_nko}', "");
Error('\p{Blk=_:=NKO}');
Error('\P{Blk=_:=NKO}');
Expect(1, 2047, '\p{Blk=nko}', "");
Expect(0, 2047, '\p{^Blk=nko}', "");
Expect(0, 2047, '\P{Blk=nko}', "");
Expect(1, 2047, '\P{^Blk=nko}', "");
Expect(0, 1983, '\p{Blk=nko}', "");
Expect(1, 1983, '\p{^Blk=nko}', "");
Expect(1, 1983, '\P{Blk=nko}', "");
Expect(0, 1983, '\P{^Blk=nko}', "");
Expect(1, 2047, '\p{Blk= NKO}', "");
Expect(0, 2047, '\p{^Blk= NKO}', "");
Expect(0, 2047, '\P{Blk= NKO}', "");
Expect(1, 2047, '\P{^Blk= NKO}', "");
Expect(0, 1983, '\p{Blk= NKO}', "");
Expect(1, 1983, '\p{^Blk= NKO}', "");
Expect(1, 1983, '\P{Blk= NKO}', "");
Expect(0, 1983, '\P{^Blk= NKO}', "");
Error('\p{Is_Block=_NKo/a/}');
Error('\P{Is_Block=_NKo/a/}');
Expect(1, 2047, '\p{Is_Block=nko}', "");
Expect(0, 2047, '\p{^Is_Block=nko}', "");
Expect(0, 2047, '\P{Is_Block=nko}', "");
Expect(1, 2047, '\P{^Is_Block=nko}', "");
Expect(0, 1983, '\p{Is_Block=nko}', "");
Expect(1, 1983, '\p{^Is_Block=nko}', "");
Expect(1, 1983, '\P{Is_Block=nko}', "");
Expect(0, 1983, '\P{^Is_Block=nko}', "");
Expect(1, 2047, '\p{Is_Block=_	NKo}', "");
Expect(0, 2047, '\p{^Is_Block=_	NKo}', "");
Expect(0, 2047, '\P{Is_Block=_	NKo}', "");
Expect(1, 2047, '\P{^Is_Block=_	NKo}', "");
Expect(0, 1983, '\p{Is_Block=_	NKo}', "");
Expect(1, 1983, '\p{^Is_Block=_	NKo}', "");
Expect(1, 1983, '\P{Is_Block=_	NKo}', "");
Expect(0, 1983, '\P{^Is_Block=_	NKo}', "");
Error('\p{Is_Blk: :=-NKO}');
Error('\P{Is_Blk: :=-NKO}');
Expect(1, 2047, '\p{Is_Blk=nko}', "");
Expect(0, 2047, '\p{^Is_Blk=nko}', "");
Expect(0, 2047, '\P{Is_Blk=nko}', "");
Expect(1, 2047, '\P{^Is_Blk=nko}', "");
Expect(0, 1983, '\p{Is_Blk=nko}', "");
Expect(1, 1983, '\p{^Is_Blk=nko}', "");
Expect(1, 1983, '\P{Is_Blk=nko}', "");
Expect(0, 1983, '\P{^Is_Blk=nko}', "");
Expect(1, 2047, '\p{Is_Blk=NKO}', "");
Expect(0, 2047, '\p{^Is_Blk=NKO}', "");
Expect(0, 2047, '\P{Is_Blk=NKO}', "");
Expect(1, 2047, '\P{^Is_Blk=NKO}', "");
Expect(0, 1983, '\p{Is_Blk=NKO}', "");
Expect(1, 1983, '\p{^Is_Blk=NKO}', "");
Expect(1, 1983, '\P{Is_Blk=NKO}', "");
Expect(0, 1983, '\P{^Is_Blk=NKO}', "");
Error('\p{Block=/a/_-Musical Symbols}');
Error('\P{Block=/a/_-Musical Symbols}');
Expect(1, 119295, '\p{Block=musicalsymbols}', "");
Expect(0, 119295, '\p{^Block=musicalsymbols}', "");
Expect(0, 119295, '\P{Block=musicalsymbols}', "");
Expect(1, 119295, '\P{^Block=musicalsymbols}', "");
Expect(0, 119039, '\p{Block=musicalsymbols}', "");
Expect(1, 119039, '\p{^Block=musicalsymbols}', "");
Expect(1, 119039, '\P{Block=musicalsymbols}', "");
Expect(0, 119039, '\P{^Block=musicalsymbols}', "");
Expect(1, 119295, '\p{Block=Musical	Symbols}', "");
Expect(0, 119295, '\p{^Block=Musical	Symbols}', "");
Expect(0, 119295, '\P{Block=Musical	Symbols}', "");
Expect(1, 119295, '\P{^Block=Musical	Symbols}', "");
Expect(0, 119039, '\p{Block=Musical	Symbols}', "");
Expect(1, 119039, '\p{^Block=Musical	Symbols}', "");
Expect(1, 119039, '\P{Block=Musical	Symbols}', "");
Expect(0, 119039, '\P{^Block=Musical	Symbols}', "");
Error('\p{Blk=	:=Musical Symbols}');
Error('\P{Blk=	:=Musical Symbols}');
Expect(1, 119295, '\p{Blk=musicalsymbols}', "");
Expect(0, 119295, '\p{^Blk=musicalsymbols}', "");
Expect(0, 119295, '\P{Blk=musicalsymbols}', "");
Expect(1, 119295, '\P{^Blk=musicalsymbols}', "");
Expect(0, 119039, '\p{Blk=musicalsymbols}', "");
Expect(1, 119039, '\p{^Blk=musicalsymbols}', "");
Expect(1, 119039, '\P{Blk=musicalsymbols}', "");
Expect(0, 119039, '\P{^Blk=musicalsymbols}', "");
Expect(1, 119295, '\p{Blk= _MUSICAL	Symbols}', "");
Expect(0, 119295, '\p{^Blk= _MUSICAL	Symbols}', "");
Expect(0, 119295, '\P{Blk= _MUSICAL	Symbols}', "");
Expect(1, 119295, '\P{^Blk= _MUSICAL	Symbols}', "");
Expect(0, 119039, '\p{Blk= _MUSICAL	Symbols}', "");
Expect(1, 119039, '\p{^Blk= _MUSICAL	Symbols}', "");
Expect(1, 119039, '\P{Blk= _MUSICAL	Symbols}', "");
Expect(0, 119039, '\P{^Blk= _MUSICAL	Symbols}', "");
Error('\p{Is_Block=/a/_ Musical_SYMBOLS}');
Error('\P{Is_Block=/a/_ Musical_SYMBOLS}');
Expect(1, 119295, '\p{Is_Block=musicalsymbols}', "");
Expect(0, 119295, '\p{^Is_Block=musicalsymbols}', "");
Expect(0, 119295, '\P{Is_Block=musicalsymbols}', "");
Expect(1, 119295, '\P{^Is_Block=musicalsymbols}', "");
Expect(0, 119039, '\p{Is_Block=musicalsymbols}', "");
Expect(1, 119039, '\p{^Is_Block=musicalsymbols}', "");
Expect(1, 119039, '\P{Is_Block=musicalsymbols}', "");
Expect(0, 119039, '\P{^Is_Block=musicalsymbols}', "");
Expect(1, 119295, '\p{Is_Block:	-_Musical	Symbols}', "");
Expect(0, 119295, '\p{^Is_Block:	-_Musical	Symbols}', "");
Expect(0, 119295, '\P{Is_Block:	-_Musical	Symbols}', "");
Expect(1, 119295, '\P{^Is_Block:	-_Musical	Symbols}', "");
Expect(0, 119039, '\p{Is_Block:	-_Musical	Symbols}', "");
Expect(1, 119039, '\p{^Is_Block:	-_Musical	Symbols}', "");
Expect(1, 119039, '\P{Is_Block:	-_Musical	Symbols}', "");
Expect(0, 119039, '\P{^Is_Block:	-_Musical	Symbols}', "");
Error('\p{Is_Blk=/a/_ MUSICAL-symbols}');
Error('\P{Is_Blk=/a/_ MUSICAL-symbols}');
Expect(1, 119295, '\p{Is_Blk=musicalsymbols}', "");
Expect(0, 119295, '\p{^Is_Blk=musicalsymbols}', "");
Expect(0, 119295, '\P{Is_Blk=musicalsymbols}', "");
Expect(1, 119295, '\P{^Is_Blk=musicalsymbols}', "");
Expect(0, 119039, '\p{Is_Blk=musicalsymbols}', "");
Expect(1, 119039, '\p{^Is_Blk=musicalsymbols}', "");
Expect(1, 119039, '\P{Is_Blk=musicalsymbols}', "");
Expect(0, 119039, '\P{^Is_Blk=musicalsymbols}', "");
Expect(1, 119295, '\p{Is_Blk=	-Musical_Symbols}', "");
Expect(0, 119295, '\p{^Is_Blk=	-Musical_Symbols}', "");
Expect(0, 119295, '\P{Is_Blk=	-Musical_Symbols}', "");
Expect(1, 119295, '\P{^Is_Blk=	-Musical_Symbols}', "");
Expect(0, 119039, '\p{Is_Blk=	-Musical_Symbols}', "");
Expect(1, 119039, '\p{^Is_Blk=	-Musical_Symbols}', "");
Expect(1, 119039, '\P{Is_Blk=	-Musical_Symbols}', "");
Expect(0, 119039, '\P{^Is_Blk=	-Musical_Symbols}', "");
Error('\p{Block=	:=Miscellaneous Symbols}');
Error('\P{Block=	:=Miscellaneous Symbols}');
Expect(1, 9983, '\p{Block:   miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^Block:   miscellaneoussymbols}', "");
Expect(0, 9983, '\P{Block:   miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^Block:   miscellaneoussymbols}', "");
Expect(0, 9727, '\p{Block:   miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^Block:   miscellaneoussymbols}', "");
Expect(1, 9727, '\P{Block:   miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^Block:   miscellaneoussymbols}', "");
Expect(1, 9983, '\p{Block=_Miscellaneous_SYMBOLS}', "");
Expect(0, 9983, '\p{^Block=_Miscellaneous_SYMBOLS}', "");
Expect(0, 9983, '\P{Block=_Miscellaneous_SYMBOLS}', "");
Expect(1, 9983, '\P{^Block=_Miscellaneous_SYMBOLS}', "");
Expect(0, 9727, '\p{Block=_Miscellaneous_SYMBOLS}', "");
Expect(1, 9727, '\p{^Block=_Miscellaneous_SYMBOLS}', "");
Expect(1, 9727, '\P{Block=_Miscellaneous_SYMBOLS}', "");
Expect(0, 9727, '\P{^Block=_Miscellaneous_SYMBOLS}', "");
Error('\p{Blk=	MISCELLANEOUS/a/symbols}');
Error('\P{Blk=	MISCELLANEOUS/a/symbols}');
Expect(1, 9983, '\p{Blk=miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^Blk=miscellaneoussymbols}', "");
Expect(0, 9983, '\P{Blk=miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^Blk=miscellaneoussymbols}', "");
Expect(0, 9727, '\p{Blk=miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^Blk=miscellaneoussymbols}', "");
Expect(1, 9727, '\P{Blk=miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^Blk=miscellaneoussymbols}', "");
Expect(1, 9983, '\p{Blk=_-Miscellaneous-SYMBOLS}', "");
Expect(0, 9983, '\p{^Blk=_-Miscellaneous-SYMBOLS}', "");
Expect(0, 9983, '\P{Blk=_-Miscellaneous-SYMBOLS}', "");
Expect(1, 9983, '\P{^Blk=_-Miscellaneous-SYMBOLS}', "");
Expect(0, 9727, '\p{Blk=_-Miscellaneous-SYMBOLS}', "");
Expect(1, 9727, '\p{^Blk=_-Miscellaneous-SYMBOLS}', "");
Expect(1, 9727, '\P{Blk=_-Miscellaneous-SYMBOLS}', "");
Expect(0, 9727, '\P{^Blk=_-Miscellaneous-SYMBOLS}', "");
Error('\p{Is_Block= /a/Miscellaneous Symbols}');
Error('\P{Is_Block= /a/Miscellaneous Symbols}');
Expect(1, 9983, '\p{Is_Block=miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^Is_Block=miscellaneoussymbols}', "");
Expect(0, 9983, '\P{Is_Block=miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^Is_Block=miscellaneoussymbols}', "");
Expect(0, 9727, '\p{Is_Block=miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^Is_Block=miscellaneoussymbols}', "");
Expect(1, 9727, '\P{Is_Block=miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^Is_Block=miscellaneoussymbols}', "");
Expect(1, 9983, '\p{Is_Block: -MiscellaneousSymbols}', "");
Expect(0, 9983, '\p{^Is_Block: -MiscellaneousSymbols}', "");
Expect(0, 9983, '\P{Is_Block: -MiscellaneousSymbols}', "");
Expect(1, 9983, '\P{^Is_Block: -MiscellaneousSymbols}', "");
Expect(0, 9727, '\p{Is_Block: -MiscellaneousSymbols}', "");
Expect(1, 9727, '\p{^Is_Block: -MiscellaneousSymbols}', "");
Expect(1, 9727, '\P{Is_Block: -MiscellaneousSymbols}', "");
Expect(0, 9727, '\P{^Is_Block: -MiscellaneousSymbols}', "");
Error('\p{Is_Blk=/a/	MISCELLANEOUSsymbols}');
Error('\P{Is_Blk=/a/	MISCELLANEOUSsymbols}');
Expect(1, 9983, '\p{Is_Blk=miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^Is_Blk=miscellaneoussymbols}', "");
Expect(0, 9983, '\P{Is_Blk=miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^Is_Blk=miscellaneoussymbols}', "");
Expect(0, 9727, '\p{Is_Blk=miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^Is_Blk=miscellaneoussymbols}', "");
Expect(1, 9727, '\P{Is_Blk=miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^Is_Blk=miscellaneoussymbols}', "");
Expect(1, 9983, '\p{Is_Blk:	 MISCELLANEOUSSYMBOLS}', "");
Expect(0, 9983, '\p{^Is_Blk:	 MISCELLANEOUSSYMBOLS}', "");
Expect(0, 9983, '\P{Is_Blk:	 MISCELLANEOUSSYMBOLS}', "");
Expect(1, 9983, '\P{^Is_Blk:	 MISCELLANEOUSSYMBOLS}', "");
Expect(0, 9727, '\p{Is_Blk:	 MISCELLANEOUSSYMBOLS}', "");
Expect(1, 9727, '\p{^Is_Blk:	 MISCELLANEOUSSYMBOLS}', "");
Expect(1, 9727, '\P{Is_Blk:	 MISCELLANEOUSSYMBOLS}', "");
Expect(0, 9727, '\P{^Is_Blk:	 MISCELLANEOUSSYMBOLS}', "");
Error('\p{Block=- Runic/a/}');
Error('\P{Block=- Runic/a/}');
Expect(1, 5887, '\p{Block=runic}', "");
Expect(0, 5887, '\p{^Block=runic}', "");
Expect(0, 5887, '\P{Block=runic}', "");
Expect(1, 5887, '\P{^Block=runic}', "");
Expect(0, 5791, '\p{Block=runic}', "");
Expect(1, 5791, '\p{^Block=runic}', "");
Expect(1, 5791, '\P{Block=runic}', "");
Expect(0, 5791, '\P{^Block=runic}', "");
Expect(1, 5887, '\p{Block= 	RUNIC}', "");
Expect(0, 5887, '\p{^Block= 	RUNIC}', "");
Expect(0, 5887, '\P{Block= 	RUNIC}', "");
Expect(1, 5887, '\P{^Block= 	RUNIC}', "");
Expect(0, 5791, '\p{Block= 	RUNIC}', "");
Expect(1, 5791, '\p{^Block= 	RUNIC}', "");
Expect(1, 5791, '\P{Block= 	RUNIC}', "");
Expect(0, 5791, '\P{^Block= 	RUNIC}', "");
Error('\p{Blk::= _RUNIC}');
Error('\P{Blk::= _RUNIC}');
Expect(1, 5887, '\p{Blk=runic}', "");
Expect(0, 5887, '\p{^Blk=runic}', "");
Expect(0, 5887, '\P{Blk=runic}', "");
Expect(1, 5887, '\P{^Blk=runic}', "");
Expect(0, 5791, '\p{Blk=runic}', "");
Expect(1, 5791, '\p{^Blk=runic}', "");
Expect(1, 5791, '\P{Blk=runic}', "");
Expect(0, 5791, '\P{^Blk=runic}', "");
Expect(1, 5887, '\p{Blk=-RUNIC}', "");
Expect(0, 5887, '\p{^Blk=-RUNIC}', "");
Expect(0, 5887, '\P{Blk=-RUNIC}', "");
Expect(1, 5887, '\P{^Blk=-RUNIC}', "");
Expect(0, 5791, '\p{Blk=-RUNIC}', "");
Expect(1, 5791, '\p{^Blk=-RUNIC}', "");
Expect(1, 5791, '\P{Blk=-RUNIC}', "");
Expect(0, 5791, '\P{^Blk=-RUNIC}', "");
Error('\p{Is_Block= :=Runic}');
Error('\P{Is_Block= :=Runic}');
Expect(1, 5887, '\p{Is_Block=runic}', "");
Expect(0, 5887, '\p{^Is_Block=runic}', "");
Expect(0, 5887, '\P{Is_Block=runic}', "");
Expect(1, 5887, '\P{^Is_Block=runic}', "");
Expect(0, 5791, '\p{Is_Block=runic}', "");
Expect(1, 5791, '\p{^Is_Block=runic}', "");
Expect(1, 5791, '\P{Is_Block=runic}', "");
Expect(0, 5791, '\P{^Is_Block=runic}', "");
Expect(1, 5887, '\p{Is_Block=  Runic}', "");
Expect(0, 5887, '\p{^Is_Block=  Runic}', "");
Expect(0, 5887, '\P{Is_Block=  Runic}', "");
Expect(1, 5887, '\P{^Is_Block=  Runic}', "");
Expect(0, 5791, '\p{Is_Block=  Runic}', "");
Expect(1, 5791, '\p{^Is_Block=  Runic}', "");
Expect(1, 5791, '\P{Is_Block=  Runic}', "");
Expect(0, 5791, '\P{^Is_Block=  Runic}', "");
Error('\p{Is_Blk= -Runic/a/}');
Error('\P{Is_Blk= -Runic/a/}');
Expect(1, 5887, '\p{Is_Blk=runic}', "");
Expect(0, 5887, '\p{^Is_Blk=runic}', "");
Expect(0, 5887, '\P{Is_Blk=runic}', "");
Expect(1, 5887, '\P{^Is_Blk=runic}', "");
Expect(0, 5791, '\p{Is_Blk=runic}', "");
Expect(1, 5791, '\p{^Is_Blk=runic}', "");
Expect(1, 5791, '\P{Is_Blk=runic}', "");
Expect(0, 5791, '\P{^Is_Blk=runic}', "");
Expect(1, 5887, '\p{Is_Blk=	Runic}', "");
Expect(0, 5887, '\p{^Is_Blk=	Runic}', "");
Expect(0, 5887, '\P{Is_Blk=	Runic}', "");
Expect(1, 5887, '\P{^Is_Blk=	Runic}', "");
Expect(0, 5791, '\p{Is_Blk=	Runic}', "");
Expect(1, 5791, '\p{^Is_Blk=	Runic}', "");
Expect(1, 5791, '\P{Is_Blk=	Runic}', "");
Expect(0, 5791, '\P{^Is_Blk=	Runic}', "");
Error('\p{Block=/a/ _LYCIAN}');
Error('\P{Block=/a/ _LYCIAN}');
Expect(1, 66207, '\p{Block=lycian}', "");
Expect(0, 66207, '\p{^Block=lycian}', "");
Expect(0, 66207, '\P{Block=lycian}', "");
Expect(1, 66207, '\P{^Block=lycian}', "");
Expect(0, 66175, '\p{Block=lycian}', "");
Expect(1, 66175, '\p{^Block=lycian}', "");
Expect(1, 66175, '\P{Block=lycian}', "");
Expect(0, 66175, '\P{^Block=lycian}', "");
Expect(1, 66207, '\p{Block:	_-lycian}', "");
Expect(0, 66207, '\p{^Block:	_-lycian}', "");
Expect(0, 66207, '\P{Block:	_-lycian}', "");
Expect(1, 66207, '\P{^Block:	_-lycian}', "");
Expect(0, 66175, '\p{Block:	_-lycian}', "");
Expect(1, 66175, '\p{^Block:	_-lycian}', "");
Expect(1, 66175, '\P{Block:	_-lycian}', "");
Expect(0, 66175, '\P{^Block:	_-lycian}', "");
Error('\p{Blk=-:=Lycian}');
Error('\P{Blk=-:=Lycian}');
Expect(1, 66207, '\p{Blk=lycian}', "");
Expect(0, 66207, '\p{^Blk=lycian}', "");
Expect(0, 66207, '\P{Blk=lycian}', "");
Expect(1, 66207, '\P{^Blk=lycian}', "");
Expect(0, 66175, '\p{Blk=lycian}', "");
Expect(1, 66175, '\p{^Blk=lycian}', "");
Expect(1, 66175, '\P{Blk=lycian}', "");
Expect(0, 66175, '\P{^Blk=lycian}', "");
Expect(1, 66207, '\p{Blk= LYCIAN}', "");
Expect(0, 66207, '\p{^Blk= LYCIAN}', "");
Expect(0, 66207, '\P{Blk= LYCIAN}', "");
Expect(1, 66207, '\P{^Blk= LYCIAN}', "");
Expect(0, 66175, '\p{Blk= LYCIAN}', "");
Expect(1, 66175, '\p{^Blk= LYCIAN}', "");
Expect(1, 66175, '\P{Blk= LYCIAN}', "");
Expect(0, 66175, '\P{^Blk= LYCIAN}', "");
Error('\p{Is_Block=	Lycian:=}');
Error('\P{Is_Block=	Lycian:=}');
Expect(1, 66207, '\p{Is_Block=lycian}', "");
Expect(0, 66207, '\p{^Is_Block=lycian}', "");
Expect(0, 66207, '\P{Is_Block=lycian}', "");
Expect(1, 66207, '\P{^Is_Block=lycian}', "");
Expect(0, 66175, '\p{Is_Block=lycian}', "");
Expect(1, 66175, '\p{^Is_Block=lycian}', "");
Expect(1, 66175, '\P{Is_Block=lycian}', "");
Expect(0, 66175, '\P{^Is_Block=lycian}', "");
Expect(1, 66207, '\p{Is_Block=-	lycian}', "");
Expect(0, 66207, '\p{^Is_Block=-	lycian}', "");
Expect(0, 66207, '\P{Is_Block=-	lycian}', "");
Expect(1, 66207, '\P{^Is_Block=-	lycian}', "");
Expect(0, 66175, '\p{Is_Block=-	lycian}', "");
Expect(1, 66175, '\p{^Is_Block=-	lycian}', "");
Expect(1, 66175, '\P{Is_Block=-	lycian}', "");
Expect(0, 66175, '\P{^Is_Block=-	lycian}', "");
Error('\p{Is_Blk=	/a/LYCIAN}');
Error('\P{Is_Blk=	/a/LYCIAN}');
Expect(1, 66207, '\p{Is_Blk=lycian}', "");
Expect(0, 66207, '\p{^Is_Blk=lycian}', "");
Expect(0, 66207, '\P{Is_Blk=lycian}', "");
Expect(1, 66207, '\P{^Is_Blk=lycian}', "");
Expect(0, 66175, '\p{Is_Blk=lycian}', "");
Expect(1, 66175, '\p{^Is_Blk=lycian}', "");
Expect(1, 66175, '\P{Is_Blk=lycian}', "");
Expect(0, 66175, '\P{^Is_Blk=lycian}', "");
Expect(1, 66207, '\p{Is_Blk= _LYCIAN}', "");
Expect(0, 66207, '\p{^Is_Blk= _LYCIAN}', "");
Expect(0, 66207, '\P{Is_Blk= _LYCIAN}', "");
Expect(1, 66207, '\P{^Is_Blk= _LYCIAN}', "");
Expect(0, 66175, '\p{Is_Blk= _LYCIAN}', "");
Expect(1, 66175, '\p{^Is_Blk= _LYCIAN}', "");
Expect(1, 66175, '\P{Is_Blk= _LYCIAN}', "");
Expect(0, 66175, '\P{^Is_Blk= _LYCIAN}', "");
Error('\p{Block:-Geometric-shapes/a/}');
Error('\P{Block:-Geometric-shapes/a/}');
Expect(1, 9727, '\p{Block=geometricshapes}', "");
Expect(0, 9727, '\p{^Block=geometricshapes}', "");
Expect(0, 9727, '\P{Block=geometricshapes}', "");
Expect(1, 9727, '\P{^Block=geometricshapes}', "");
Expect(0, 9631, '\p{Block=geometricshapes}', "");
Expect(1, 9631, '\p{^Block=geometricshapes}', "");
Expect(1, 9631, '\P{Block=geometricshapes}', "");
Expect(0, 9631, '\P{^Block=geometricshapes}', "");
Expect(1, 9727, '\p{Block=-_geometric-shapes}', "");
Expect(0, 9727, '\p{^Block=-_geometric-shapes}', "");
Expect(0, 9727, '\P{Block=-_geometric-shapes}', "");
Expect(1, 9727, '\P{^Block=-_geometric-shapes}', "");
Expect(0, 9631, '\p{Block=-_geometric-shapes}', "");
Expect(1, 9631, '\p{^Block=-_geometric-shapes}', "");
Expect(1, 9631, '\P{Block=-_geometric-shapes}', "");
Expect(0, 9631, '\P{^Block=-_geometric-shapes}', "");
Error('\p{Blk=/a/ geometric-Shapes}');
Error('\P{Blk=/a/ geometric-Shapes}');
Expect(1, 9727, '\p{Blk=geometricshapes}', "");
Expect(0, 9727, '\p{^Blk=geometricshapes}', "");
Expect(0, 9727, '\P{Blk=geometricshapes}', "");
Expect(1, 9727, '\P{^Blk=geometricshapes}', "");
Expect(0, 9631, '\p{Blk=geometricshapes}', "");
Expect(1, 9631, '\p{^Blk=geometricshapes}', "");
Expect(1, 9631, '\P{Blk=geometricshapes}', "");
Expect(0, 9631, '\P{^Blk=geometricshapes}', "");
Expect(1, 9727, '\p{Blk= _GEOMETRICShapes}', "");
Expect(0, 9727, '\p{^Blk= _GEOMETRICShapes}', "");
Expect(0, 9727, '\P{Blk= _GEOMETRICShapes}', "");
Expect(1, 9727, '\P{^Blk= _GEOMETRICShapes}', "");
Expect(0, 9631, '\p{Blk= _GEOMETRICShapes}', "");
Expect(1, 9631, '\p{^Blk= _GEOMETRICShapes}', "");
Expect(1, 9631, '\P{Blk= _GEOMETRICShapes}', "");
Expect(0, 9631, '\P{^Blk= _GEOMETRICShapes}', "");
Error('\p{Is_Block=- geometric	shapes/a/}');
Error('\P{Is_Block=- geometric	shapes/a/}');
Expect(1, 9727, '\p{Is_Block=geometricshapes}', "");
Expect(0, 9727, '\p{^Is_Block=geometricshapes}', "");
Expect(0, 9727, '\P{Is_Block=geometricshapes}', "");
Expect(1, 9727, '\P{^Is_Block=geometricshapes}', "");
Expect(0, 9631, '\p{Is_Block=geometricshapes}', "");
Expect(1, 9631, '\p{^Is_Block=geometricshapes}', "");
Expect(1, 9631, '\P{Is_Block=geometricshapes}', "");
Expect(0, 9631, '\P{^Is_Block=geometricshapes}', "");
Expect(1, 9727, '\p{Is_Block:  GEOMETRIC	Shapes}', "");
Expect(0, 9727, '\p{^Is_Block:  GEOMETRIC	Shapes}', "");
Expect(0, 9727, '\P{Is_Block:  GEOMETRIC	Shapes}', "");
Expect(1, 9727, '\P{^Is_Block:  GEOMETRIC	Shapes}', "");
Expect(0, 9631, '\p{Is_Block:  GEOMETRIC	Shapes}', "");
Expect(1, 9631, '\p{^Is_Block:  GEOMETRIC	Shapes}', "");
Expect(1, 9631, '\P{Is_Block:  GEOMETRIC	Shapes}', "");
Expect(0, 9631, '\P{^Is_Block:  GEOMETRIC	Shapes}', "");
Error('\p{Is_Blk=-Geometric:=Shapes}');
Error('\P{Is_Blk=-Geometric:=Shapes}');
Expect(1, 9727, '\p{Is_Blk=geometricshapes}', "");
Expect(0, 9727, '\p{^Is_Blk=geometricshapes}', "");
Expect(0, 9727, '\P{Is_Blk=geometricshapes}', "");
Expect(1, 9727, '\P{^Is_Blk=geometricshapes}', "");
Expect(0, 9631, '\p{Is_Blk=geometricshapes}', "");
Expect(1, 9631, '\p{^Is_Blk=geometricshapes}', "");
Expect(1, 9631, '\P{Is_Blk=geometricshapes}', "");
Expect(0, 9631, '\P{^Is_Blk=geometricshapes}', "");
Expect(1, 9727, '\p{Is_Blk= -Geometric SHAPES}', "");
Expect(0, 9727, '\p{^Is_Blk= -Geometric SHAPES}', "");
Expect(0, 9727, '\P{Is_Blk= -Geometric SHAPES}', "");
Expect(1, 9727, '\P{^Is_Blk= -Geometric SHAPES}', "");
Expect(0, 9631, '\p{Is_Blk= -Geometric SHAPES}', "");
Expect(1, 9631, '\p{^Is_Blk= -Geometric SHAPES}', "");
Expect(1, 9631, '\P{Is_Blk= -Geometric SHAPES}', "");
Expect(0, 9631, '\P{^Is_Blk= -Geometric SHAPES}', "");
Error('\p{Block=__AegeanNumbers/a/}');
Error('\P{Block=__AegeanNumbers/a/}');
Expect(1, 65855, '\p{Block=aegeannumbers}', "");
Expect(0, 65855, '\p{^Block=aegeannumbers}', "");
Expect(0, 65855, '\P{Block=aegeannumbers}', "");
Expect(1, 65855, '\P{^Block=aegeannumbers}', "");
Expect(0, 65791, '\p{Block=aegeannumbers}', "");
Expect(1, 65791, '\p{^Block=aegeannumbers}', "");
Expect(1, 65791, '\P{Block=aegeannumbers}', "");
Expect(0, 65791, '\P{^Block=aegeannumbers}', "");
Expect(1, 65855, '\p{Block=	aegean Numbers}', "");
Expect(0, 65855, '\p{^Block=	aegean Numbers}', "");
Expect(0, 65855, '\P{Block=	aegean Numbers}', "");
Expect(1, 65855, '\P{^Block=	aegean Numbers}', "");
Expect(0, 65791, '\p{Block=	aegean Numbers}', "");
Expect(1, 65791, '\p{^Block=	aegean Numbers}', "");
Expect(1, 65791, '\P{Block=	aegean Numbers}', "");
Expect(0, 65791, '\P{^Block=	aegean Numbers}', "");
Error('\p{Blk=-	aegean:=Numbers}');
Error('\P{Blk=-	aegean:=Numbers}');
Expect(1, 65855, '\p{Blk=aegeannumbers}', "");
Expect(0, 65855, '\p{^Blk=aegeannumbers}', "");
Expect(0, 65855, '\P{Blk=aegeannumbers}', "");
Expect(1, 65855, '\P{^Blk=aegeannumbers}', "");
Expect(0, 65791, '\p{Blk=aegeannumbers}', "");
Expect(1, 65791, '\p{^Blk=aegeannumbers}', "");
Expect(1, 65791, '\P{Blk=aegeannumbers}', "");
Expect(0, 65791, '\P{^Blk=aegeannumbers}', "");
Expect(1, 65855, '\p{Blk:    -aegean-Numbers}', "");
Expect(0, 65855, '\p{^Blk:    -aegean-Numbers}', "");
Expect(0, 65855, '\P{Blk:    -aegean-Numbers}', "");
Expect(1, 65855, '\P{^Blk:    -aegean-Numbers}', "");
Expect(0, 65791, '\p{Blk:    -aegean-Numbers}', "");
Expect(1, 65791, '\p{^Blk:    -aegean-Numbers}', "");
Expect(1, 65791, '\P{Blk:    -aegean-Numbers}', "");
Expect(0, 65791, '\P{^Blk:    -aegean-Numbers}', "");
Error('\p{Is_Block=_Aegean/a/numbers}');
Error('\P{Is_Block=_Aegean/a/numbers}');
Expect(1, 65855, '\p{Is_Block=aegeannumbers}', "");
Expect(0, 65855, '\p{^Is_Block=aegeannumbers}', "");
Expect(0, 65855, '\P{Is_Block=aegeannumbers}', "");
Expect(1, 65855, '\P{^Is_Block=aegeannumbers}', "");
Expect(0, 65791, '\p{Is_Block=aegeannumbers}', "");
Expect(1, 65791, '\p{^Is_Block=aegeannumbers}', "");
Expect(1, 65791, '\P{Is_Block=aegeannumbers}', "");
Expect(0, 65791, '\P{^Is_Block=aegeannumbers}', "");
Expect(1, 65855, '\p{Is_Block=- Aegean Numbers}', "");
Expect(0, 65855, '\p{^Is_Block=- Aegean Numbers}', "");
Expect(0, 65855, '\P{Is_Block=- Aegean Numbers}', "");
Expect(1, 65855, '\P{^Is_Block=- Aegean Numbers}', "");
Expect(0, 65791, '\p{Is_Block=- Aegean Numbers}', "");
Expect(1, 65791, '\p{^Is_Block=- Aegean Numbers}', "");
Expect(1, 65791, '\P{Is_Block=- Aegean Numbers}', "");
Expect(0, 65791, '\P{^Is_Block=- Aegean Numbers}', "");
Error('\p{Is_Blk=-AEGEAN NUMBERS/a/}');
Error('\P{Is_Blk=-AEGEAN NUMBERS/a/}');
Expect(1, 65855, '\p{Is_Blk=aegeannumbers}', "");
Expect(0, 65855, '\p{^Is_Blk=aegeannumbers}', "");
Expect(0, 65855, '\P{Is_Blk=aegeannumbers}', "");
Expect(1, 65855, '\P{^Is_Blk=aegeannumbers}', "");
Expect(0, 65791, '\p{Is_Blk=aegeannumbers}', "");
Expect(1, 65791, '\p{^Is_Blk=aegeannumbers}', "");
Expect(1, 65791, '\P{Is_Blk=aegeannumbers}', "");
Expect(0, 65791, '\P{^Is_Blk=aegeannumbers}', "");
Expect(1, 65855, '\p{Is_Blk=-_aegean-numbers}', "");
Expect(0, 65855, '\p{^Is_Blk=-_aegean-numbers}', "");
Expect(0, 65855, '\P{Is_Blk=-_aegean-numbers}', "");
Expect(1, 65855, '\P{^Is_Blk=-_aegean-numbers}', "");
Expect(0, 65791, '\p{Is_Blk=-_aegean-numbers}', "");
Expect(1, 65791, '\p{^Is_Blk=-_aegean-numbers}', "");
Expect(1, 65791, '\P{Is_Blk=-_aegean-numbers}', "");
Expect(0, 65791, '\P{^Is_Blk=-_aegean-numbers}', "");
Error('\p{Block=-	Khmer/a/SYMBOLS}');
Error('\P{Block=-	Khmer/a/SYMBOLS}');
Expect(1, 6655, '\p{Block: khmersymbols}', "");
Expect(0, 6655, '\p{^Block: khmersymbols}', "");
Expect(0, 6655, '\P{Block: khmersymbols}', "");
Expect(1, 6655, '\P{^Block: khmersymbols}', "");
Expect(0, 6623, '\p{Block: khmersymbols}', "");
Expect(1, 6623, '\p{^Block: khmersymbols}', "");
Expect(1, 6623, '\P{Block: khmersymbols}', "");
Expect(0, 6623, '\P{^Block: khmersymbols}', "");
Expect(1, 6655, '\p{Block= -Khmer	SYMBOLS}', "");
Expect(0, 6655, '\p{^Block= -Khmer	SYMBOLS}', "");
Expect(0, 6655, '\P{Block= -Khmer	SYMBOLS}', "");
Expect(1, 6655, '\P{^Block= -Khmer	SYMBOLS}', "");
Expect(0, 6623, '\p{Block= -Khmer	SYMBOLS}', "");
Expect(1, 6623, '\p{^Block= -Khmer	SYMBOLS}', "");
Expect(1, 6623, '\P{Block= -Khmer	SYMBOLS}', "");
Expect(0, 6623, '\P{^Block= -Khmer	SYMBOLS}', "");
Error('\p{Blk= khmer-Symbols/a/}');
Error('\P{Blk= khmer-Symbols/a/}');
Expect(1, 6655, '\p{Blk=khmersymbols}', "");
Expect(0, 6655, '\p{^Blk=khmersymbols}', "");
Expect(0, 6655, '\P{Blk=khmersymbols}', "");
Expect(1, 6655, '\P{^Blk=khmersymbols}', "");
Expect(0, 6623, '\p{Blk=khmersymbols}', "");
Expect(1, 6623, '\p{^Blk=khmersymbols}', "");
Expect(1, 6623, '\P{Blk=khmersymbols}', "");
Expect(0, 6623, '\P{^Blk=khmersymbols}', "");
Expect(1, 6655, '\p{Blk=	 khmer-SYMBOLS}', "");
Expect(0, 6655, '\p{^Blk=	 khmer-SYMBOLS}', "");
Expect(0, 6655, '\P{Blk=	 khmer-SYMBOLS}', "");
Expect(1, 6655, '\P{^Blk=	 khmer-SYMBOLS}', "");
Expect(0, 6623, '\p{Blk=	 khmer-SYMBOLS}', "");
Expect(1, 6623, '\p{^Blk=	 khmer-SYMBOLS}', "");
Expect(1, 6623, '\P{Blk=	 khmer-SYMBOLS}', "");
Expect(0, 6623, '\P{^Blk=	 khmer-SYMBOLS}', "");
Error('\p{Is_Block=-/a/khmerSymbols}');
Error('\P{Is_Block=-/a/khmerSymbols}');
Expect(1, 6655, '\p{Is_Block=khmersymbols}', "");
Expect(0, 6655, '\p{^Is_Block=khmersymbols}', "");
Expect(0, 6655, '\P{Is_Block=khmersymbols}', "");
Expect(1, 6655, '\P{^Is_Block=khmersymbols}', "");
Expect(0, 6623, '\p{Is_Block=khmersymbols}', "");
Expect(1, 6623, '\p{^Is_Block=khmersymbols}', "");
Expect(1, 6623, '\P{Is_Block=khmersymbols}', "");
Expect(0, 6623, '\P{^Is_Block=khmersymbols}', "");
Expect(1, 6655, '\p{Is_Block=  khmer	Symbols}', "");
Expect(0, 6655, '\p{^Is_Block=  khmer	Symbols}', "");
Expect(0, 6655, '\P{Is_Block=  khmer	Symbols}', "");
Expect(1, 6655, '\P{^Is_Block=  khmer	Symbols}', "");
Expect(0, 6623, '\p{Is_Block=  khmer	Symbols}', "");
Expect(1, 6623, '\p{^Is_Block=  khmer	Symbols}', "");
Expect(1, 6623, '\P{Is_Block=  khmer	Symbols}', "");
Expect(0, 6623, '\P{^Is_Block=  khmer	Symbols}', "");
Error('\p{Is_Blk=	:=KHMER-SYMBOLS}');
Error('\P{Is_Blk=	:=KHMER-SYMBOLS}');
Expect(1, 6655, '\p{Is_Blk=khmersymbols}', "");
Expect(0, 6655, '\p{^Is_Blk=khmersymbols}', "");
Expect(0, 6655, '\P{Is_Blk=khmersymbols}', "");
Expect(1, 6655, '\P{^Is_Blk=khmersymbols}', "");
Expect(0, 6623, '\p{Is_Blk=khmersymbols}', "");
Expect(1, 6623, '\p{^Is_Blk=khmersymbols}', "");
Expect(1, 6623, '\P{Is_Blk=khmersymbols}', "");
Expect(0, 6623, '\P{^Is_Blk=khmersymbols}', "");
Expect(1, 6655, '\p{Is_Blk= khmerSymbols}', "");
Expect(0, 6655, '\p{^Is_Blk= khmerSymbols}', "");
Expect(0, 6655, '\P{Is_Blk= khmerSymbols}', "");
Expect(1, 6655, '\P{^Is_Blk= khmerSymbols}', "");
Expect(0, 6623, '\p{Is_Blk= khmerSymbols}', "");
Expect(1, 6623, '\p{^Is_Blk= khmerSymbols}', "");
Expect(1, 6623, '\P{Is_Blk= khmerSymbols}', "");
Expect(0, 6623, '\P{^Is_Blk= khmerSymbols}', "");
Error('\p{Block=	CJKradicals:=supplement}');
Error('\P{Block=	CJKradicals:=supplement}');
Expect(1, 12031, '\p{Block=cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^Block=cjkradicalssupplement}', "");
Expect(0, 12031, '\P{Block=cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^Block=cjkradicalssupplement}', "");
Expect(0, 11903, '\p{Block=cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^Block=cjkradicalssupplement}', "");
Expect(1, 11903, '\P{Block=cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^Block=cjkradicalssupplement}', "");
Expect(1, 12031, '\p{Block=_ cjkradicalsSupplement}', "");
Expect(0, 12031, '\p{^Block=_ cjkradicalsSupplement}', "");
Expect(0, 12031, '\P{Block=_ cjkradicalsSupplement}', "");
Expect(1, 12031, '\P{^Block=_ cjkradicalsSupplement}', "");
Expect(0, 11903, '\p{Block=_ cjkradicalsSupplement}', "");
Expect(1, 11903, '\p{^Block=_ cjkradicalsSupplement}', "");
Expect(1, 11903, '\P{Block=_ cjkradicalsSupplement}', "");
Expect(0, 11903, '\P{^Block=_ cjkradicalsSupplement}', "");
Error('\p{Blk=:=-CJK Radicals-supplement}');
Error('\P{Blk=:=-CJK Radicals-supplement}');
Expect(1, 12031, '\p{Blk=cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^Blk=cjkradicalssupplement}', "");
Expect(0, 12031, '\P{Blk=cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^Blk=cjkradicalssupplement}', "");
Expect(0, 11903, '\p{Blk=cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^Blk=cjkradicalssupplement}', "");
Expect(1, 11903, '\P{Blk=cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^Blk=cjkradicalssupplement}', "");
Expect(1, 12031, '\p{Blk=- cjk_Radicals	SUPPLEMENT}', "");
Expect(0, 12031, '\p{^Blk=- cjk_Radicals	SUPPLEMENT}', "");
Expect(0, 12031, '\P{Blk=- cjk_Radicals	SUPPLEMENT}', "");
Expect(1, 12031, '\P{^Blk=- cjk_Radicals	SUPPLEMENT}', "");
Expect(0, 11903, '\p{Blk=- cjk_Radicals	SUPPLEMENT}', "");
Expect(1, 11903, '\p{^Blk=- cjk_Radicals	SUPPLEMENT}', "");
Expect(1, 11903, '\P{Blk=- cjk_Radicals	SUPPLEMENT}', "");
Expect(0, 11903, '\P{^Blk=- cjk_Radicals	SUPPLEMENT}', "");
Error('\p{Is_Block=	CJK-Radicals	SUPPLEMENT/a/}');
Error('\P{Is_Block=	CJK-Radicals	SUPPLEMENT/a/}');
Expect(1, 12031, '\p{Is_Block=cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^Is_Block=cjkradicalssupplement}', "");
Expect(0, 12031, '\P{Is_Block=cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^Is_Block=cjkradicalssupplement}', "");
Expect(0, 11903, '\p{Is_Block=cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^Is_Block=cjkradicalssupplement}', "");
Expect(1, 11903, '\P{Is_Block=cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^Is_Block=cjkradicalssupplement}', "");
Expect(1, 12031, '\p{Is_Block= -cjk_Radicals-SUPPLEMENT}', "");
Expect(0, 12031, '\p{^Is_Block= -cjk_Radicals-SUPPLEMENT}', "");
Expect(0, 12031, '\P{Is_Block= -cjk_Radicals-SUPPLEMENT}', "");
Expect(1, 12031, '\P{^Is_Block= -cjk_Radicals-SUPPLEMENT}', "");
Expect(0, 11903, '\p{Is_Block= -cjk_Radicals-SUPPLEMENT}', "");
Expect(1, 11903, '\p{^Is_Block= -cjk_Radicals-SUPPLEMENT}', "");
Expect(1, 11903, '\P{Is_Block= -cjk_Radicals-SUPPLEMENT}', "");
Expect(0, 11903, '\P{^Is_Block= -cjk_Radicals-SUPPLEMENT}', "");
Error('\p{Is_Blk= _CJK Radicals-SUPPLEMENT/a/}');
Error('\P{Is_Blk= _CJK Radicals-SUPPLEMENT/a/}');
Expect(1, 12031, '\p{Is_Blk: cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^Is_Blk: cjkradicalssupplement}', "");
Expect(0, 12031, '\P{Is_Blk: cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^Is_Blk: cjkradicalssupplement}', "");
Expect(0, 11903, '\p{Is_Blk: cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^Is_Blk: cjkradicalssupplement}', "");
Expect(1, 11903, '\P{Is_Blk: cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^Is_Blk: cjkradicalssupplement}', "");
Expect(1, 12031, '\p{Is_Blk=-	cjk Radicals supplement}', "");
Expect(0, 12031, '\p{^Is_Blk=-	cjk Radicals supplement}', "");
Expect(0, 12031, '\P{Is_Blk=-	cjk Radicals supplement}', "");
Expect(1, 12031, '\P{^Is_Blk=-	cjk Radicals supplement}', "");
Expect(0, 11903, '\p{Is_Blk=-	cjk Radicals supplement}', "");
Expect(1, 11903, '\p{^Is_Blk=-	cjk Radicals supplement}', "");
Expect(1, 11903, '\P{Is_Blk=-	cjk Radicals supplement}', "");
Expect(0, 11903, '\P{^Is_Blk=-	cjk Radicals supplement}', "");
Error('\p{Block=_imperial:=ARAMAIC}');
Error('\P{Block=_imperial:=ARAMAIC}');
Expect(1, 67679, '\p{Block=imperialaramaic}', "");
Expect(0, 67679, '\p{^Block=imperialaramaic}', "");
Expect(0, 67679, '\P{Block=imperialaramaic}', "");
Expect(1, 67679, '\P{^Block=imperialaramaic}', "");
Expect(0, 67647, '\p{Block=imperialaramaic}', "");
Expect(1, 67647, '\p{^Block=imperialaramaic}', "");
Expect(1, 67647, '\P{Block=imperialaramaic}', "");
Expect(0, 67647, '\P{^Block=imperialaramaic}', "");
Expect(1, 67679, '\p{Block=Imperial_aramaic}', "");
Expect(0, 67679, '\p{^Block=Imperial_aramaic}', "");
Expect(0, 67679, '\P{Block=Imperial_aramaic}', "");
Expect(1, 67679, '\P{^Block=Imperial_aramaic}', "");
Expect(0, 67647, '\p{Block=Imperial_aramaic}', "");
Expect(1, 67647, '\p{^Block=Imperial_aramaic}', "");
Expect(1, 67647, '\P{Block=Imperial_aramaic}', "");
Expect(0, 67647, '\P{^Block=Imperial_aramaic}', "");
Error('\p{Blk: :=_-IMPERIAL-Aramaic}');
Error('\P{Blk: :=_-IMPERIAL-Aramaic}');
Expect(1, 67679, '\p{Blk=imperialaramaic}', "");
Expect(0, 67679, '\p{^Blk=imperialaramaic}', "");
Expect(0, 67679, '\P{Blk=imperialaramaic}', "");
Expect(1, 67679, '\P{^Blk=imperialaramaic}', "");
Expect(0, 67647, '\p{Blk=imperialaramaic}', "");
Expect(1, 67647, '\p{^Blk=imperialaramaic}', "");
Expect(1, 67647, '\P{Blk=imperialaramaic}', "");
Expect(0, 67647, '\P{^Blk=imperialaramaic}', "");
Expect(1, 67679, '\p{Blk=	ImperialAramaic}', "");
Expect(0, 67679, '\p{^Blk=	ImperialAramaic}', "");
Expect(0, 67679, '\P{Blk=	ImperialAramaic}', "");
Expect(1, 67679, '\P{^Blk=	ImperialAramaic}', "");
Expect(0, 67647, '\p{Blk=	ImperialAramaic}', "");
Expect(1, 67647, '\p{^Blk=	ImperialAramaic}', "");
Expect(1, 67647, '\P{Blk=	ImperialAramaic}', "");
Expect(0, 67647, '\P{^Blk=	ImperialAramaic}', "");
Error('\p{Is_Block=-_Imperial:=ARAMAIC}');
Error('\P{Is_Block=-_Imperial:=ARAMAIC}');
Expect(1, 67679, '\p{Is_Block=imperialaramaic}', "");
Expect(0, 67679, '\p{^Is_Block=imperialaramaic}', "");
Expect(0, 67679, '\P{Is_Block=imperialaramaic}', "");
Expect(1, 67679, '\P{^Is_Block=imperialaramaic}', "");
Expect(0, 67647, '\p{Is_Block=imperialaramaic}', "");
Expect(1, 67647, '\p{^Is_Block=imperialaramaic}', "");
Expect(1, 67647, '\P{Is_Block=imperialaramaic}', "");
Expect(0, 67647, '\P{^Is_Block=imperialaramaic}', "");
Expect(1, 67679, '\p{Is_Block:			ImperialAramaic}', "");
Expect(0, 67679, '\p{^Is_Block:			ImperialAramaic}', "");
Expect(0, 67679, '\P{Is_Block:			ImperialAramaic}', "");
Expect(1, 67679, '\P{^Is_Block:			ImperialAramaic}', "");
Expect(0, 67647, '\p{Is_Block:			ImperialAramaic}', "");
Expect(1, 67647, '\p{^Is_Block:			ImperialAramaic}', "");
Expect(1, 67647, '\P{Is_Block:			ImperialAramaic}', "");
Expect(0, 67647, '\P{^Is_Block:			ImperialAramaic}', "");
Error('\p{Is_Blk:   _-IMPERIAL:=ARAMAIC}');
Error('\P{Is_Blk:   _-IMPERIAL:=ARAMAIC}');
Expect(1, 67679, '\p{Is_Blk=imperialaramaic}', "");
Expect(0, 67679, '\p{^Is_Blk=imperialaramaic}', "");
Expect(0, 67679, '\P{Is_Blk=imperialaramaic}', "");
Expect(1, 67679, '\P{^Is_Blk=imperialaramaic}', "");
Expect(0, 67647, '\p{Is_Blk=imperialaramaic}', "");
Expect(1, 67647, '\p{^Is_Blk=imperialaramaic}', "");
Expect(1, 67647, '\P{Is_Blk=imperialaramaic}', "");
Expect(0, 67647, '\P{^Is_Blk=imperialaramaic}', "");
Expect(1, 67679, '\p{Is_Blk=		IMPERIAL_aramaic}', "");
Expect(0, 67679, '\p{^Is_Blk=		IMPERIAL_aramaic}', "");
Expect(0, 67679, '\P{Is_Blk=		IMPERIAL_aramaic}', "");
Expect(1, 67679, '\P{^Is_Blk=		IMPERIAL_aramaic}', "");
Expect(0, 67647, '\p{Is_Blk=		IMPERIAL_aramaic}', "");
Expect(1, 67647, '\p{^Is_Blk=		IMPERIAL_aramaic}', "");
Expect(1, 67647, '\P{Is_Blk=		IMPERIAL_aramaic}', "");
Expect(0, 67647, '\P{^Is_Blk=		IMPERIAL_aramaic}', "");
Error('\p{Block=-/a/Mathematical Operators}');
Error('\P{Block=-/a/Mathematical Operators}');
Expect(1, 8959, '\p{Block=mathematicaloperators}', "");
Expect(0, 8959, '\p{^Block=mathematicaloperators}', "");
Expect(0, 8959, '\P{Block=mathematicaloperators}', "");
Expect(1, 8959, '\P{^Block=mathematicaloperators}', "");
Expect(0, 8703, '\p{Block=mathematicaloperators}', "");
Expect(1, 8703, '\p{^Block=mathematicaloperators}', "");
Expect(1, 8703, '\P{Block=mathematicaloperators}', "");
Expect(0, 8703, '\P{^Block=mathematicaloperators}', "");
Expect(1, 8959, '\p{Block=_	MATHEMATICAL-operators}', "");
Expect(0, 8959, '\p{^Block=_	MATHEMATICAL-operators}', "");
Expect(0, 8959, '\P{Block=_	MATHEMATICAL-operators}', "");
Expect(1, 8959, '\P{^Block=_	MATHEMATICAL-operators}', "");
Expect(0, 8703, '\p{Block=_	MATHEMATICAL-operators}', "");
Expect(1, 8703, '\p{^Block=_	MATHEMATICAL-operators}', "");
Expect(1, 8703, '\P{Block=_	MATHEMATICAL-operators}', "");
Expect(0, 8703, '\P{^Block=_	MATHEMATICAL-operators}', "");
Error('\p{Blk:  Mathematical_Operators:=}');
Error('\P{Blk:  Mathematical_Operators:=}');
Expect(1, 8959, '\p{Blk=mathematicaloperators}', "");
Expect(0, 8959, '\p{^Blk=mathematicaloperators}', "");
Expect(0, 8959, '\P{Blk=mathematicaloperators}', "");
Expect(1, 8959, '\P{^Blk=mathematicaloperators}', "");
Expect(0, 8703, '\p{Blk=mathematicaloperators}', "");
Expect(1, 8703, '\p{^Blk=mathematicaloperators}', "");
Expect(1, 8703, '\P{Blk=mathematicaloperators}', "");
Expect(0, 8703, '\P{^Blk=mathematicaloperators}', "");
Expect(1, 8959, '\p{Blk=	_mathematical	Operators}', "");
Expect(0, 8959, '\p{^Blk=	_mathematical	Operators}', "");
Expect(0, 8959, '\P{Blk=	_mathematical	Operators}', "");
Expect(1, 8959, '\P{^Blk=	_mathematical	Operators}', "");
Expect(0, 8703, '\p{Blk=	_mathematical	Operators}', "");
Expect(1, 8703, '\p{^Blk=	_mathematical	Operators}', "");
Expect(1, 8703, '\P{Blk=	_mathematical	Operators}', "");
Expect(0, 8703, '\P{^Blk=	_mathematical	Operators}', "");
Error('\p{Is_Block=_:=Mathematical-Operators}');
Error('\P{Is_Block=_:=Mathematical-Operators}');
Expect(1, 8959, '\p{Is_Block=mathematicaloperators}', "");
Expect(0, 8959, '\p{^Is_Block=mathematicaloperators}', "");
Expect(0, 8959, '\P{Is_Block=mathematicaloperators}', "");
Expect(1, 8959, '\P{^Is_Block=mathematicaloperators}', "");
Expect(0, 8703, '\p{Is_Block=mathematicaloperators}', "");
Expect(1, 8703, '\p{^Is_Block=mathematicaloperators}', "");
Expect(1, 8703, '\P{Is_Block=mathematicaloperators}', "");
Expect(0, 8703, '\P{^Is_Block=mathematicaloperators}', "");
Expect(1, 8959, '\p{Is_Block=  MATHEMATICAL_Operators}', "");
Expect(0, 8959, '\p{^Is_Block=  MATHEMATICAL_Operators}', "");
Expect(0, 8959, '\P{Is_Block=  MATHEMATICAL_Operators}', "");
Expect(1, 8959, '\P{^Is_Block=  MATHEMATICAL_Operators}', "");
Expect(0, 8703, '\p{Is_Block=  MATHEMATICAL_Operators}', "");
Expect(1, 8703, '\p{^Is_Block=  MATHEMATICAL_Operators}', "");
Expect(1, 8703, '\P{Is_Block=  MATHEMATICAL_Operators}', "");
Expect(0, 8703, '\P{^Is_Block=  MATHEMATICAL_Operators}', "");
Error('\p{Is_Blk= /a/MATHEMATICALOperators}');
Error('\P{Is_Blk= /a/MATHEMATICALOperators}');
Expect(1, 8959, '\p{Is_Blk=mathematicaloperators}', "");
Expect(0, 8959, '\p{^Is_Blk=mathematicaloperators}', "");
Expect(0, 8959, '\P{Is_Blk=mathematicaloperators}', "");
Expect(1, 8959, '\P{^Is_Blk=mathematicaloperators}', "");
Expect(0, 8703, '\p{Is_Blk=mathematicaloperators}', "");
Expect(1, 8703, '\p{^Is_Blk=mathematicaloperators}', "");
Expect(1, 8703, '\P{Is_Blk=mathematicaloperators}', "");
Expect(0, 8703, '\P{^Is_Blk=mathematicaloperators}', "");
Expect(1, 8959, '\p{Is_Blk=	_Mathematical_OPERATORS}', "");
Expect(0, 8959, '\p{^Is_Blk=	_Mathematical_OPERATORS}', "");
Expect(0, 8959, '\P{Is_Blk=	_Mathematical_OPERATORS}', "");
Expect(1, 8959, '\P{^Is_Blk=	_Mathematical_OPERATORS}', "");
Expect(0, 8703, '\p{Is_Blk=	_Mathematical_OPERATORS}', "");
Expect(1, 8703, '\p{^Is_Blk=	_Mathematical_OPERATORS}', "");
Expect(1, 8703, '\P{Is_Blk=	_Mathematical_OPERATORS}', "");
Expect(0, 8703, '\P{^Is_Blk=	_Mathematical_OPERATORS}', "");
Error('\p{Block=_ CJK:=COMPATIBILITY Ideographs SUPPLEMENT}');
Error('\P{Block=_ CJK:=COMPATIBILITY Ideographs SUPPLEMENT}');
Expect(1, 195103, '\p{Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{Block:_	CJKcompatibility Ideographs_SUPPLEMENT}', "");
Expect(0, 195103, '\p{^Block:_	CJKcompatibility Ideographs_SUPPLEMENT}', "");
Expect(0, 195103, '\P{Block:_	CJKcompatibility Ideographs_SUPPLEMENT}', "");
Expect(1, 195103, '\P{^Block:_	CJKcompatibility Ideographs_SUPPLEMENT}', "");
Expect(0, 194559, '\p{Block:_	CJKcompatibility Ideographs_SUPPLEMENT}', "");
Expect(1, 194559, '\p{^Block:_	CJKcompatibility Ideographs_SUPPLEMENT}', "");
Expect(1, 194559, '\P{Block:_	CJKcompatibility Ideographs_SUPPLEMENT}', "");
Expect(0, 194559, '\P{^Block:_	CJKcompatibility Ideographs_SUPPLEMENT}', "");
Error('\p{Blk=_:=CJK-COMPATIBILITYIdeographsSUPPLEMENT}');
Error('\P{Blk=_:=CJK-COMPATIBILITYIdeographsSUPPLEMENT}');
Expect(1, 195103, '\p{Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{Blk=__CJK	Compatibility_Ideographs	supplement}', "");
Expect(0, 195103, '\p{^Blk=__CJK	Compatibility_Ideographs	supplement}', "");
Expect(0, 195103, '\P{Blk=__CJK	Compatibility_Ideographs	supplement}', "");
Expect(1, 195103, '\P{^Blk=__CJK	Compatibility_Ideographs	supplement}', "");
Expect(0, 194559, '\p{Blk=__CJK	Compatibility_Ideographs	supplement}', "");
Expect(1, 194559, '\p{^Blk=__CJK	Compatibility_Ideographs	supplement}', "");
Expect(1, 194559, '\P{Blk=__CJK	Compatibility_Ideographs	supplement}', "");
Expect(0, 194559, '\P{^Blk=__CJK	Compatibility_Ideographs	supplement}', "");
Error('\p{Is_Block=_CJK/a/compatibilityIDEOGRAPHS	supplement}');
Error('\P{Is_Block=_CJK/a/compatibilityIDEOGRAPHS	supplement}');
Expect(1, 195103, '\p{Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^Is_Block=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{Is_Block=_cjk-compatibility-Ideographs_SUPPLEMENT}', "");
Expect(0, 195103, '\p{^Is_Block=_cjk-compatibility-Ideographs_SUPPLEMENT}', "");
Expect(0, 195103, '\P{Is_Block=_cjk-compatibility-Ideographs_SUPPLEMENT}', "");
Expect(1, 195103, '\P{^Is_Block=_cjk-compatibility-Ideographs_SUPPLEMENT}', "");
Expect(0, 194559, '\p{Is_Block=_cjk-compatibility-Ideographs_SUPPLEMENT}', "");
Expect(1, 194559, '\p{^Is_Block=_cjk-compatibility-Ideographs_SUPPLEMENT}', "");
Expect(1, 194559, '\P{Is_Block=_cjk-compatibility-Ideographs_SUPPLEMENT}', "");
Expect(0, 194559, '\P{^Is_Block=_cjk-compatibility-Ideographs_SUPPLEMENT}', "");
Error('\p{Is_Blk:	-/a/cjk Compatibility Ideographs	Supplement}');
Error('\P{Is_Blk:	-/a/cjk Compatibility Ideographs	Supplement}');
Expect(1, 195103, '\p{Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^Is_Blk=cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{Is_Blk=_CJK_COMPATIBILITY-Ideographs supplement}', "");
Expect(0, 195103, '\p{^Is_Blk=_CJK_COMPATIBILITY-Ideographs supplement}', "");
Expect(0, 195103, '\P{Is_Blk=_CJK_COMPATIBILITY-Ideographs supplement}', "");
Expect(1, 195103, '\P{^Is_Blk=_CJK_COMPATIBILITY-Ideographs supplement}', "");
Expect(0, 194559, '\p{Is_Blk=_CJK_COMPATIBILITY-Ideographs supplement}', "");
Expect(1, 194559, '\p{^Is_Blk=_CJK_COMPATIBILITY-Ideographs supplement}', "");
Expect(1, 194559, '\P{Is_Blk=_CJK_COMPATIBILITY-Ideographs supplement}', "");
Expect(0, 194559, '\P{^Is_Blk=_CJK_COMPATIBILITY-Ideographs supplement}', "");
Error('\p{Block:	_/a/IPA-Extensions}');
Error('\P{Block:	_/a/IPA-Extensions}');
Expect(1, 687, '\p{Block=ipaextensions}', "");
Expect(0, 687, '\p{^Block=ipaextensions}', "");
Expect(0, 687, '\P{Block=ipaextensions}', "");
Expect(1, 687, '\P{^Block=ipaextensions}', "");
Expect(0, 591, '\p{Block=ipaextensions}', "");
Expect(1, 591, '\p{^Block=ipaextensions}', "");
Expect(1, 591, '\P{Block=ipaextensions}', "");
Expect(0, 591, '\P{^Block=ipaextensions}', "");
Expect(1, 687, '\p{Block=_ipa	Extensions}', "");
Expect(0, 687, '\p{^Block=_ipa	Extensions}', "");
Expect(0, 687, '\P{Block=_ipa	Extensions}', "");
Expect(1, 687, '\P{^Block=_ipa	Extensions}', "");
Expect(0, 591, '\p{Block=_ipa	Extensions}', "");
Expect(1, 591, '\p{^Block=_ipa	Extensions}', "");
Expect(1, 591, '\P{Block=_ipa	Extensions}', "");
Expect(0, 591, '\P{^Block=_ipa	Extensions}', "");
Error('\p{Blk=	IPA	EXTENSIONS/a/}');
Error('\P{Blk=	IPA	EXTENSIONS/a/}');
Expect(1, 687, '\p{Blk=ipaextensions}', "");
Expect(0, 687, '\p{^Blk=ipaextensions}', "");
Expect(0, 687, '\P{Blk=ipaextensions}', "");
Expect(1, 687, '\P{^Blk=ipaextensions}', "");
Expect(0, 591, '\p{Blk=ipaextensions}', "");
Expect(1, 591, '\p{^Blk=ipaextensions}', "");
Expect(1, 591, '\P{Blk=ipaextensions}', "");
Expect(0, 591, '\P{^Blk=ipaextensions}', "");
Expect(1, 687, '\p{Blk=-IPA	Extensions}', "");
Expect(0, 687, '\p{^Blk=-IPA	Extensions}', "");
Expect(0, 687, '\P{Blk=-IPA	Extensions}', "");
Expect(1, 687, '\P{^Blk=-IPA	Extensions}', "");
Expect(0, 591, '\p{Blk=-IPA	Extensions}', "");
Expect(1, 591, '\p{^Blk=-IPA	Extensions}', "");
Expect(1, 591, '\P{Blk=-IPA	Extensions}', "");
Expect(0, 591, '\P{^Blk=-IPA	Extensions}', "");
Error('\p{Is_Block=__IPA/a/Extensions}');
Error('\P{Is_Block=__IPA/a/Extensions}');
Expect(1, 687, '\p{Is_Block=ipaextensions}', "");
Expect(0, 687, '\p{^Is_Block=ipaextensions}', "");
Expect(0, 687, '\P{Is_Block=ipaextensions}', "");
Expect(1, 687, '\P{^Is_Block=ipaextensions}', "");
Expect(0, 591, '\p{Is_Block=ipaextensions}', "");
Expect(1, 591, '\p{^Is_Block=ipaextensions}', "");
Expect(1, 591, '\P{Is_Block=ipaextensions}', "");
Expect(0, 591, '\P{^Is_Block=ipaextensions}', "");
Expect(1, 687, '\p{Is_Block=-_IPA_extensions}', "");
Expect(0, 687, '\p{^Is_Block=-_IPA_extensions}', "");
Expect(0, 687, '\P{Is_Block=-_IPA_extensions}', "");
Expect(1, 687, '\P{^Is_Block=-_IPA_extensions}', "");
Expect(0, 591, '\p{Is_Block=-_IPA_extensions}', "");
Expect(1, 591, '\p{^Is_Block=-_IPA_extensions}', "");
Expect(1, 591, '\P{Is_Block=-_IPA_extensions}', "");
Expect(0, 591, '\P{^Is_Block=-_IPA_extensions}', "");
Error('\p{Is_Blk=_IPA EXTENSIONS:=}');
Error('\P{Is_Blk=_IPA EXTENSIONS:=}');
Expect(1, 687, '\p{Is_Blk=ipaextensions}', "");
Expect(0, 687, '\p{^Is_Blk=ipaextensions}', "");
Expect(0, 687, '\P{Is_Blk=ipaextensions}', "");
Expect(1, 687, '\P{^Is_Blk=ipaextensions}', "");
Expect(0, 591, '\p{Is_Blk=ipaextensions}', "");
Expect(1, 591, '\p{^Is_Blk=ipaextensions}', "");
Expect(1, 591, '\P{Is_Blk=ipaextensions}', "");
Expect(0, 591, '\P{^Is_Blk=ipaextensions}', "");
Expect(1, 687, '\p{Is_Blk= -ipaExtensions}', "");
Expect(0, 687, '\p{^Is_Blk= -ipaExtensions}', "");
Expect(0, 687, '\P{Is_Blk= -ipaExtensions}', "");
Expect(1, 687, '\P{^Is_Blk= -ipaExtensions}', "");
Expect(0, 591, '\p{Is_Blk= -ipaExtensions}', "");
Expect(1, 591, '\p{^Is_Blk= -ipaExtensions}', "");
Expect(1, 591, '\P{Is_Blk= -ipaExtensions}', "");
Expect(0, 591, '\P{^Is_Blk= -ipaExtensions}', "");
Error('\p{Block=/a/- Kannada}');
Error('\P{Block=/a/- Kannada}');
Expect(1, 3327, '\p{Block=kannada}', "");
Expect(0, 3327, '\p{^Block=kannada}', "");
Expect(0, 3327, '\P{Block=kannada}', "");
Expect(1, 3327, '\P{^Block=kannada}', "");
Expect(0, 3199, '\p{Block=kannada}', "");
Expect(1, 3199, '\p{^Block=kannada}', "");
Expect(1, 3199, '\P{Block=kannada}', "");
Expect(0, 3199, '\P{^Block=kannada}', "");
Expect(1, 3327, '\p{Block= -KANNADA}', "");
Expect(0, 3327, '\p{^Block= -KANNADA}', "");
Expect(0, 3327, '\P{Block= -KANNADA}', "");
Expect(1, 3327, '\P{^Block= -KANNADA}', "");
Expect(0, 3199, '\p{Block= -KANNADA}', "");
Expect(1, 3199, '\p{^Block= -KANNADA}', "");
Expect(1, 3199, '\P{Block= -KANNADA}', "");
Expect(0, 3199, '\P{^Block= -KANNADA}', "");
Error('\p{Blk: /a/  kannada}');
Error('\P{Blk: /a/  kannada}');
Expect(1, 3327, '\p{Blk=kannada}', "");
Expect(0, 3327, '\p{^Blk=kannada}', "");
Expect(0, 3327, '\P{Blk=kannada}', "");
Expect(1, 3327, '\P{^Blk=kannada}', "");
Expect(0, 3199, '\p{Blk=kannada}', "");
Expect(1, 3199, '\p{^Blk=kannada}', "");
Expect(1, 3199, '\P{Blk=kannada}', "");
Expect(0, 3199, '\P{^Blk=kannada}', "");
Expect(1, 3327, '\p{Blk=_	kannada}', "");
Expect(0, 3327, '\p{^Blk=_	kannada}', "");
Expect(0, 3327, '\P{Blk=_	kannada}', "");
Expect(1, 3327, '\P{^Blk=_	kannada}', "");
Expect(0, 3199, '\p{Blk=_	kannada}', "");
Expect(1, 3199, '\p{^Blk=_	kannada}', "");
Expect(1, 3199, '\P{Blk=_	kannada}', "");
Expect(0, 3199, '\P{^Blk=_	kannada}', "");
Error('\p{Is_Block=:=	Kannada}');
Error('\P{Is_Block=:=	Kannada}');
Expect(1, 3327, '\p{Is_Block=kannada}', "");
Expect(0, 3327, '\p{^Is_Block=kannada}', "");
Expect(0, 3327, '\P{Is_Block=kannada}', "");
Expect(1, 3327, '\P{^Is_Block=kannada}', "");
Expect(0, 3199, '\p{Is_Block=kannada}', "");
Expect(1, 3199, '\p{^Is_Block=kannada}', "");
Expect(1, 3199, '\P{Is_Block=kannada}', "");
Expect(0, 3199, '\P{^Is_Block=kannada}', "");
Expect(1, 3327, '\p{Is_Block=	 Kannada}', "");
Expect(0, 3327, '\p{^Is_Block=	 Kannada}', "");
Expect(0, 3327, '\P{Is_Block=	 Kannada}', "");
Expect(1, 3327, '\P{^Is_Block=	 Kannada}', "");
Expect(0, 3199, '\p{Is_Block=	 Kannada}', "");
Expect(1, 3199, '\p{^Is_Block=	 Kannada}', "");
Expect(1, 3199, '\P{Is_Block=	 Kannada}', "");
Expect(0, 3199, '\P{^Is_Block=	 Kannada}', "");
Error('\p{Is_Blk=:=__Kannada}');
Error('\P{Is_Blk=:=__Kannada}');
Expect(1, 3327, '\p{Is_Blk=kannada}', "");
Expect(0, 3327, '\p{^Is_Blk=kannada}', "");
Expect(0, 3327, '\P{Is_Blk=kannada}', "");
Expect(1, 3327, '\P{^Is_Blk=kannada}', "");
Expect(0, 3199, '\p{Is_Blk=kannada}', "");
Expect(1, 3199, '\p{^Is_Blk=kannada}', "");
Expect(1, 3199, '\P{Is_Blk=kannada}', "");
Expect(0, 3199, '\P{^Is_Blk=kannada}', "");
Expect(1, 3327, '\p{Is_Blk:	__kannada}', "");
Expect(0, 3327, '\p{^Is_Blk:	__kannada}', "");
Expect(0, 3327, '\P{Is_Blk:	__kannada}', "");
Expect(1, 3327, '\P{^Is_Blk:	__kannada}', "");
Expect(0, 3199, '\p{Is_Blk:	__kannada}', "");
Expect(1, 3199, '\p{^Is_Blk:	__kannada}', "");
Expect(1, 3199, '\P{Is_Blk:	__kannada}', "");
Expect(0, 3199, '\P{^Is_Blk:	__kannada}', "");
Error('\p{Block=-	Latin	Extended:=ADDITIONAL}');
Error('\P{Block=-	Latin	Extended:=ADDITIONAL}');
Expect(1, 7935, '\p{Block:	latinextendedadditional}', "");
Expect(0, 7935, '\p{^Block:	latinextendedadditional}', "");
Expect(0, 7935, '\P{Block:	latinextendedadditional}', "");
Expect(1, 7935, '\P{^Block:	latinextendedadditional}', "");
Expect(0, 7679, '\p{Block:	latinextendedadditional}', "");
Expect(1, 7679, '\p{^Block:	latinextendedadditional}', "");
Expect(1, 7679, '\P{Block:	latinextendedadditional}', "");
Expect(0, 7679, '\P{^Block:	latinextendedadditional}', "");
Expect(1, 7935, '\p{Block=-LATINextended Additional}', "");
Expect(0, 7935, '\p{^Block=-LATINextended Additional}', "");
Expect(0, 7935, '\P{Block=-LATINextended Additional}', "");
Expect(1, 7935, '\P{^Block=-LATINextended Additional}', "");
Expect(0, 7679, '\p{Block=-LATINextended Additional}', "");
Expect(1, 7679, '\p{^Block=-LATINextended Additional}', "");
Expect(1, 7679, '\P{Block=-LATINextended Additional}', "");
Expect(0, 7679, '\P{^Block=-LATINextended Additional}', "");
Error('\p{Blk=/a/-	latinExtendedAdditional}');
Error('\P{Blk=/a/-	latinExtendedAdditional}');
Expect(1, 7935, '\p{Blk=latinextendedadditional}', "");
Expect(0, 7935, '\p{^Blk=latinextendedadditional}', "");
Expect(0, 7935, '\P{Blk=latinextendedadditional}', "");
Expect(1, 7935, '\P{^Blk=latinextendedadditional}', "");
Expect(0, 7679, '\p{Blk=latinextendedadditional}', "");
Expect(1, 7679, '\p{^Blk=latinextendedadditional}', "");
Expect(1, 7679, '\P{Blk=latinextendedadditional}', "");
Expect(0, 7679, '\P{^Blk=latinextendedadditional}', "");
Expect(1, 7935, '\p{Blk=	-latin extendedAdditional}', "");
Expect(0, 7935, '\p{^Blk=	-latin extendedAdditional}', "");
Expect(0, 7935, '\P{Blk=	-latin extendedAdditional}', "");
Expect(1, 7935, '\P{^Blk=	-latin extendedAdditional}', "");
Expect(0, 7679, '\p{Blk=	-latin extendedAdditional}', "");
Expect(1, 7679, '\p{^Blk=	-latin extendedAdditional}', "");
Expect(1, 7679, '\P{Blk=	-latin extendedAdditional}', "");
Expect(0, 7679, '\P{^Blk=	-latin extendedAdditional}', "");
Error('\p{Is_Block=:= 	Latin_Extended additional}');
Error('\P{Is_Block=:= 	Latin_Extended additional}');
Expect(1, 7935, '\p{Is_Block=latinextendedadditional}', "");
Expect(0, 7935, '\p{^Is_Block=latinextendedadditional}', "");
Expect(0, 7935, '\P{Is_Block=latinextendedadditional}', "");
Expect(1, 7935, '\P{^Is_Block=latinextendedadditional}', "");
Expect(0, 7679, '\p{Is_Block=latinextendedadditional}', "");
Expect(1, 7679, '\p{^Is_Block=latinextendedadditional}', "");
Expect(1, 7679, '\P{Is_Block=latinextendedadditional}', "");
Expect(0, 7679, '\P{^Is_Block=latinextendedadditional}', "");
Expect(1, 7935, '\p{Is_Block=_	Latin EXTENDED	additional}', "");
Expect(0, 7935, '\p{^Is_Block=_	Latin EXTENDED	additional}', "");
Expect(0, 7935, '\P{Is_Block=_	Latin EXTENDED	additional}', "");
Expect(1, 7935, '\P{^Is_Block=_	Latin EXTENDED	additional}', "");
Expect(0, 7679, '\p{Is_Block=_	Latin EXTENDED	additional}', "");
Expect(1, 7679, '\p{^Is_Block=_	Latin EXTENDED	additional}', "");
Expect(1, 7679, '\P{Is_Block=_	Latin EXTENDED	additional}', "");
Expect(0, 7679, '\P{^Is_Block=_	Latin EXTENDED	additional}', "");
Error('\p{Is_Blk:_:=latin	ExtendedADDITIONAL}');
Error('\P{Is_Blk:_:=latin	ExtendedADDITIONAL}');
Expect(1, 7935, '\p{Is_Blk=latinextendedadditional}', "");
Expect(0, 7935, '\p{^Is_Blk=latinextendedadditional}', "");
Expect(0, 7935, '\P{Is_Blk=latinextendedadditional}', "");
Expect(1, 7935, '\P{^Is_Blk=latinextendedadditional}', "");
Expect(0, 7679, '\p{Is_Blk=latinextendedadditional}', "");
Expect(1, 7679, '\p{^Is_Blk=latinextendedadditional}', "");
Expect(1, 7679, '\P{Is_Blk=latinextendedadditional}', "");
Expect(0, 7679, '\P{^Is_Blk=latinextendedadditional}', "");
Expect(1, 7935, '\p{Is_Blk=	-Latin EXTENDED-Additional}', "");
Expect(0, 7935, '\p{^Is_Blk=	-Latin EXTENDED-Additional}', "");
Expect(0, 7935, '\P{Is_Blk=	-Latin EXTENDED-Additional}', "");
Expect(1, 7935, '\P{^Is_Blk=	-Latin EXTENDED-Additional}', "");
Expect(0, 7679, '\p{Is_Blk=	-Latin EXTENDED-Additional}', "");
Expect(1, 7679, '\p{^Is_Blk=	-Latin EXTENDED-Additional}', "");
Expect(1, 7679, '\P{Is_Blk=	-Latin EXTENDED-Additional}', "");
Expect(0, 7679, '\P{^Is_Blk=	-Latin EXTENDED-Additional}', "");
Error('\p{Block= /a/cham}');
Error('\P{Block= /a/cham}');
Expect(1, 43615, '\p{Block=cham}', "");
Expect(0, 43615, '\p{^Block=cham}', "");
Expect(0, 43615, '\P{Block=cham}', "");
Expect(1, 43615, '\P{^Block=cham}', "");
Expect(0, 43519, '\p{Block=cham}', "");
Expect(1, 43519, '\p{^Block=cham}', "");
Expect(1, 43519, '\P{Block=cham}', "");
Expect(0, 43519, '\P{^Block=cham}', "");
Expect(1, 43615, '\p{Block=  CHAM}', "");
Expect(0, 43615, '\p{^Block=  CHAM}', "");
Expect(0, 43615, '\P{Block=  CHAM}', "");
Expect(1, 43615, '\P{^Block=  CHAM}', "");
Expect(0, 43519, '\p{Block=  CHAM}', "");
Expect(1, 43519, '\p{^Block=  CHAM}', "");
Expect(1, 43519, '\P{Block=  CHAM}', "");
Expect(0, 43519, '\P{^Block=  CHAM}', "");
Error('\p{Blk=-Cham:=}');
Error('\P{Blk=-Cham:=}');
Expect(1, 43615, '\p{Blk=cham}', "");
Expect(0, 43615, '\p{^Blk=cham}', "");
Expect(0, 43615, '\P{Blk=cham}', "");
Expect(1, 43615, '\P{^Blk=cham}', "");
Expect(0, 43519, '\p{Blk=cham}', "");
Expect(1, 43519, '\p{^Blk=cham}', "");
Expect(1, 43519, '\P{Blk=cham}', "");
Expect(0, 43519, '\P{^Blk=cham}', "");
Expect(1, 43615, '\p{Blk= CHAM}', "");
Expect(0, 43615, '\p{^Blk= CHAM}', "");
Expect(0, 43615, '\P{Blk= CHAM}', "");
Expect(1, 43615, '\P{^Blk= CHAM}', "");
Expect(0, 43519, '\p{Blk= CHAM}', "");
Expect(1, 43519, '\p{^Blk= CHAM}', "");
Expect(1, 43519, '\P{Blk= CHAM}', "");
Expect(0, 43519, '\P{^Blk= CHAM}', "");
Error('\p{Is_Block=:=  Cham}');
Error('\P{Is_Block=:=  Cham}');
Expect(1, 43615, '\p{Is_Block=cham}', "");
Expect(0, 43615, '\p{^Is_Block=cham}', "");
Expect(0, 43615, '\P{Is_Block=cham}', "");
Expect(1, 43615, '\P{^Is_Block=cham}', "");
Expect(0, 43519, '\p{Is_Block=cham}', "");
Expect(1, 43519, '\p{^Is_Block=cham}', "");
Expect(1, 43519, '\P{Is_Block=cham}', "");
Expect(0, 43519, '\P{^Is_Block=cham}', "");
Expect(1, 43615, '\p{Is_Block=_-cham}', "");
Expect(0, 43615, '\p{^Is_Block=_-cham}', "");
Expect(0, 43615, '\P{Is_Block=_-cham}', "");
Expect(1, 43615, '\P{^Is_Block=_-cham}', "");
Expect(0, 43519, '\p{Is_Block=_-cham}', "");
Expect(1, 43519, '\p{^Is_Block=_-cham}', "");
Expect(1, 43519, '\P{Is_Block=_-cham}', "");
Expect(0, 43519, '\P{^Is_Block=_-cham}', "");
Error('\p{Is_Blk=--cham:=}');
Error('\P{Is_Blk=--cham:=}');
Expect(1, 43615, '\p{Is_Blk=cham}', "");
Expect(0, 43615, '\p{^Is_Blk=cham}', "");
Expect(0, 43615, '\P{Is_Blk=cham}', "");
Expect(1, 43615, '\P{^Is_Blk=cham}', "");
Expect(0, 43519, '\p{Is_Blk=cham}', "");
Expect(1, 43519, '\p{^Is_Blk=cham}', "");
Expect(1, 43519, '\P{Is_Blk=cham}', "");
Expect(0, 43519, '\P{^Is_Blk=cham}', "");
Expect(1, 43615, '\p{Is_Blk=	Cham}', "");
Expect(0, 43615, '\p{^Is_Blk=	Cham}', "");
Expect(0, 43615, '\P{Is_Blk=	Cham}', "");
Expect(1, 43615, '\P{^Is_Blk=	Cham}', "");
Expect(0, 43519, '\p{Is_Blk=	Cham}', "");
Expect(1, 43519, '\p{^Is_Blk=	Cham}', "");
Expect(1, 43519, '\P{Is_Blk=	Cham}', "");
Expect(0, 43519, '\P{^Is_Blk=	Cham}', "");
Error('\p{Block=:=	 CYRILLICsupplement}');
Error('\P{Block=:=	 CYRILLICsupplement}');
Expect(1, 1327, '\p{Block=cyrillicsupplement}', "");
Expect(0, 1327, '\p{^Block=cyrillicsupplement}', "");
Expect(0, 1327, '\P{Block=cyrillicsupplement}', "");
Expect(1, 1327, '\P{^Block=cyrillicsupplement}', "");
Expect(0, 1279, '\p{Block=cyrillicsupplement}', "");
Expect(1, 1279, '\p{^Block=cyrillicsupplement}', "");
Expect(1, 1279, '\P{Block=cyrillicsupplement}', "");
Expect(0, 1279, '\P{^Block=cyrillicsupplement}', "");
Expect(1, 1327, '\p{Block=	Cyrillicsupplement}', "");
Expect(0, 1327, '\p{^Block=	Cyrillicsupplement}', "");
Expect(0, 1327, '\P{Block=	Cyrillicsupplement}', "");
Expect(1, 1327, '\P{^Block=	Cyrillicsupplement}', "");
Expect(0, 1279, '\p{Block=	Cyrillicsupplement}', "");
Expect(1, 1279, '\p{^Block=	Cyrillicsupplement}', "");
Expect(1, 1279, '\P{Block=	Cyrillicsupplement}', "");
Expect(0, 1279, '\P{^Block=	Cyrillicsupplement}', "");
Error('\p{Blk=	/a/Cyrillic-SUPPLEMENTARY}');
Error('\P{Blk=	/a/Cyrillic-SUPPLEMENTARY}');
Expect(1, 1327, '\p{Blk=cyrillicsupplementary}', "");
Expect(0, 1327, '\p{^Blk=cyrillicsupplementary}', "");
Expect(0, 1327, '\P{Blk=cyrillicsupplementary}', "");
Expect(1, 1327, '\P{^Blk=cyrillicsupplementary}', "");
Expect(0, 1279, '\p{Blk=cyrillicsupplementary}', "");
Expect(1, 1279, '\p{^Blk=cyrillicsupplementary}', "");
Expect(1, 1279, '\P{Blk=cyrillicsupplementary}', "");
Expect(0, 1279, '\P{^Blk=cyrillicsupplementary}', "");
Expect(1, 1327, '\p{Blk:    -cyrillic supplementary}', "");
Expect(0, 1327, '\p{^Blk:    -cyrillic supplementary}', "");
Expect(0, 1327, '\P{Blk:    -cyrillic supplementary}', "");
Expect(1, 1327, '\P{^Blk:    -cyrillic supplementary}', "");
Expect(0, 1279, '\p{Blk:    -cyrillic supplementary}', "");
Expect(1, 1279, '\p{^Blk:    -cyrillic supplementary}', "");
Expect(1, 1279, '\P{Blk:    -cyrillic supplementary}', "");
Expect(0, 1279, '\P{^Blk:    -cyrillic supplementary}', "");
Error('\p{Is_Block=	/a/cyrillic	Supplement}');
Error('\P{Is_Block=	/a/cyrillic	Supplement}');
Expect(1, 1327, '\p{Is_Block=cyrillicsupplement}', "");
Expect(0, 1327, '\p{^Is_Block=cyrillicsupplement}', "");
Expect(0, 1327, '\P{Is_Block=cyrillicsupplement}', "");
Expect(1, 1327, '\P{^Is_Block=cyrillicsupplement}', "");
Expect(0, 1279, '\p{Is_Block=cyrillicsupplement}', "");
Expect(1, 1279, '\p{^Is_Block=cyrillicsupplement}', "");
Expect(1, 1279, '\P{Is_Block=cyrillicsupplement}', "");
Expect(0, 1279, '\P{^Is_Block=cyrillicsupplement}', "");
Expect(1, 1327, '\p{Is_Block=	 Cyrillic Supplement}', "");
Expect(0, 1327, '\p{^Is_Block=	 Cyrillic Supplement}', "");
Expect(0, 1327, '\P{Is_Block=	 Cyrillic Supplement}', "");
Expect(1, 1327, '\P{^Is_Block=	 Cyrillic Supplement}', "");
Expect(0, 1279, '\p{Is_Block=	 Cyrillic Supplement}', "");
Expect(1, 1279, '\p{^Is_Block=	 Cyrillic Supplement}', "");
Expect(1, 1279, '\P{Is_Block=	 Cyrillic Supplement}', "");
Expect(0, 1279, '\P{^Is_Block=	 Cyrillic Supplement}', "");
Error('\p{Is_Blk=_/a/Cyrillic-supplementary}');
Error('\P{Is_Blk=_/a/Cyrillic-supplementary}');
Expect(1, 1327, '\p{Is_Blk=cyrillicsupplementary}', "");
Expect(0, 1327, '\p{^Is_Blk=cyrillicsupplementary}', "");
Expect(0, 1327, '\P{Is_Blk=cyrillicsupplementary}', "");
Expect(1, 1327, '\P{^Is_Blk=cyrillicsupplementary}', "");
Expect(0, 1279, '\p{Is_Blk=cyrillicsupplementary}', "");
Expect(1, 1279, '\p{^Is_Blk=cyrillicsupplementary}', "");
Expect(1, 1279, '\P{Is_Blk=cyrillicsupplementary}', "");
Expect(0, 1279, '\P{^Is_Blk=cyrillicsupplementary}', "");
Expect(1, 1327, '\p{Is_Blk= 	CyrillicSupplementary}', "");
Expect(0, 1327, '\p{^Is_Blk= 	CyrillicSupplementary}', "");
Expect(0, 1327, '\P{Is_Blk= 	CyrillicSupplementary}', "");
Expect(1, 1327, '\P{^Is_Blk= 	CyrillicSupplementary}', "");
Expect(0, 1279, '\p{Is_Blk= 	CyrillicSupplementary}', "");
Expect(1, 1279, '\p{^Is_Blk= 	CyrillicSupplementary}', "");
Expect(1, 1279, '\P{Is_Blk= 	CyrillicSupplementary}', "");
Expect(0, 1279, '\P{^Is_Blk= 	CyrillicSupplementary}', "");
Error('\p{Block: 	Greek_And/a/COPTIC}');
Error('\P{Block: 	Greek_And/a/COPTIC}');
Expect(1, 1023, '\p{Block=greekandcoptic}', "");
Expect(0, 1023, '\p{^Block=greekandcoptic}', "");
Expect(0, 1023, '\P{Block=greekandcoptic}', "");
Expect(1, 1023, '\P{^Block=greekandcoptic}', "");
Expect(0, 879, '\p{Block=greekandcoptic}', "");
Expect(1, 879, '\p{^Block=greekandcoptic}', "");
Expect(1, 879, '\P{Block=greekandcoptic}', "");
Expect(0, 879, '\P{^Block=greekandcoptic}', "");
Expect(1, 1023, '\p{Block=	GREEK_and COPTIC}', "");
Expect(0, 1023, '\p{^Block=	GREEK_and COPTIC}', "");
Expect(0, 1023, '\P{Block=	GREEK_and COPTIC}', "");
Expect(1, 1023, '\P{^Block=	GREEK_and COPTIC}', "");
Expect(0, 879, '\p{Block=	GREEK_and COPTIC}', "");
Expect(1, 879, '\p{^Block=	GREEK_and COPTIC}', "");
Expect(1, 879, '\P{Block=	GREEK_and COPTIC}', "");
Expect(0, 879, '\P{^Block=	GREEK_and COPTIC}', "");
Error('\p{Blk=/a/-greek}');
Error('\P{Blk=/a/-greek}');
Expect(1, 1023, '\p{Blk=greek}', "");
Expect(0, 1023, '\p{^Blk=greek}', "");
Expect(0, 1023, '\P{Blk=greek}', "");
Expect(1, 1023, '\P{^Blk=greek}', "");
Expect(0, 879, '\p{Blk=greek}', "");
Expect(1, 879, '\p{^Blk=greek}', "");
Expect(1, 879, '\P{Blk=greek}', "");
Expect(0, 879, '\P{^Blk=greek}', "");
Expect(1, 1023, '\p{Blk=_GREEK}', "");
Expect(0, 1023, '\p{^Blk=_GREEK}', "");
Expect(0, 1023, '\P{Blk=_GREEK}', "");
Expect(1, 1023, '\P{^Blk=_GREEK}', "");
Expect(0, 879, '\p{Blk=_GREEK}', "");
Expect(1, 879, '\p{^Blk=_GREEK}', "");
Expect(1, 879, '\P{Blk=_GREEK}', "");
Expect(0, 879, '\P{^Blk=_GREEK}', "");
Error('\p{Is_Block=	_GREEK AND Coptic:=}');
Error('\P{Is_Block=	_GREEK AND Coptic:=}');
Expect(1, 1023, '\p{Is_Block=greekandcoptic}', "");
Expect(0, 1023, '\p{^Is_Block=greekandcoptic}', "");
Expect(0, 1023, '\P{Is_Block=greekandcoptic}', "");
Expect(1, 1023, '\P{^Is_Block=greekandcoptic}', "");
Expect(0, 879, '\p{Is_Block=greekandcoptic}', "");
Expect(1, 879, '\p{^Is_Block=greekandcoptic}', "");
Expect(1, 879, '\P{Is_Block=greekandcoptic}', "");
Expect(0, 879, '\P{^Is_Block=greekandcoptic}', "");
Expect(1, 1023, '\p{Is_Block:   - Greek_and-coptic}', "");
Expect(0, 1023, '\p{^Is_Block:   - Greek_and-coptic}', "");
Expect(0, 1023, '\P{Is_Block:   - Greek_and-coptic}', "");
Expect(1, 1023, '\P{^Is_Block:   - Greek_and-coptic}', "");
Expect(0, 879, '\p{Is_Block:   - Greek_and-coptic}', "");
Expect(1, 879, '\p{^Is_Block:   - Greek_and-coptic}', "");
Expect(1, 879, '\P{Is_Block:   - Greek_and-coptic}', "");
Expect(0, 879, '\P{^Is_Block:   - Greek_and-coptic}', "");
Error('\p{Is_Blk=:=_GREEK}');
Error('\P{Is_Blk=:=_GREEK}');
Expect(1, 1023, '\p{Is_Blk=greek}', "");
Expect(0, 1023, '\p{^Is_Blk=greek}', "");
Expect(0, 1023, '\P{Is_Blk=greek}', "");
Expect(1, 1023, '\P{^Is_Blk=greek}', "");
Expect(0, 879, '\p{Is_Blk=greek}', "");
Expect(1, 879, '\p{^Is_Blk=greek}', "");
Expect(1, 879, '\P{Is_Blk=greek}', "");
Expect(0, 879, '\P{^Is_Blk=greek}', "");
Expect(1, 1023, '\p{Is_Blk= GREEK}', "");
Expect(0, 1023, '\p{^Is_Blk= GREEK}', "");
Expect(0, 1023, '\P{Is_Blk= GREEK}', "");
Expect(1, 1023, '\P{^Is_Blk= GREEK}', "");
Expect(0, 879, '\p{Is_Blk= GREEK}', "");
Expect(1, 879, '\p{^Is_Blk= GREEK}', "");
Expect(1, 879, '\P{Is_Blk= GREEK}', "");
Expect(0, 879, '\P{^Is_Blk= GREEK}', "");
Error('\p{Block:	_Miscellaneous/a/Mathematical	symbols B}');
Error('\P{Block:	_Miscellaneous/a/Mathematical	symbols B}');
Expect(1, 10751, '\p{Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{Block=_	miscellaneous-Mathematicalsymbols-b}', "");
Expect(0, 10751, '\p{^Block=_	miscellaneous-Mathematicalsymbols-b}', "");
Expect(0, 10751, '\P{Block=_	miscellaneous-Mathematicalsymbols-b}', "");
Expect(1, 10751, '\P{^Block=_	miscellaneous-Mathematicalsymbols-b}', "");
Expect(0, 10623, '\p{Block=_	miscellaneous-Mathematicalsymbols-b}', "");
Expect(1, 10623, '\p{^Block=_	miscellaneous-Mathematicalsymbols-b}', "");
Expect(1, 10623, '\P{Block=_	miscellaneous-Mathematicalsymbols-b}', "");
Expect(0, 10623, '\P{^Block=_	miscellaneous-Mathematicalsymbols-b}', "");
Error('\p{Blk= :=MISCELLANEOUS	Mathematical-symbols-b}');
Error('\P{Blk= :=MISCELLANEOUS	Mathematical-symbols-b}');
Expect(1, 10751, '\p{Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{Blk=_	miscellaneousMathematicalSymbols B}', "");
Expect(0, 10751, '\p{^Blk=_	miscellaneousMathematicalSymbols B}', "");
Expect(0, 10751, '\P{Blk=_	miscellaneousMathematicalSymbols B}', "");
Expect(1, 10751, '\P{^Blk=_	miscellaneousMathematicalSymbols B}', "");
Expect(0, 10623, '\p{Blk=_	miscellaneousMathematicalSymbols B}', "");
Expect(1, 10623, '\p{^Blk=_	miscellaneousMathematicalSymbols B}', "");
Expect(1, 10623, '\P{Blk=_	miscellaneousMathematicalSymbols B}', "");
Expect(0, 10623, '\P{^Blk=_	miscellaneousMathematicalSymbols B}', "");
Error('\p{Is_Block: -Miscellaneous-Mathematical	SymbolsB/a/}');
Error('\P{Is_Block: -Miscellaneous-Mathematical	SymbolsB/a/}');
Expect(1, 10751, '\p{Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^Is_Block=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{Is_Block= -Miscellaneous-mathematicalSymbols B}', "");
Expect(0, 10751, '\p{^Is_Block= -Miscellaneous-mathematicalSymbols B}', "");
Expect(0, 10751, '\P{Is_Block= -Miscellaneous-mathematicalSymbols B}', "");
Expect(1, 10751, '\P{^Is_Block= -Miscellaneous-mathematicalSymbols B}', "");
Expect(0, 10623, '\p{Is_Block= -Miscellaneous-mathematicalSymbols B}', "");
Expect(1, 10623, '\p{^Is_Block= -Miscellaneous-mathematicalSymbols B}', "");
Expect(1, 10623, '\P{Is_Block= -Miscellaneous-mathematicalSymbols B}', "");
Expect(0, 10623, '\P{^Is_Block= -Miscellaneous-mathematicalSymbols B}', "");
Error('\p{Is_Blk=:=miscellaneous MathematicalSymbols_B}');
Error('\P{Is_Blk=:=miscellaneous MathematicalSymbols_B}');
Expect(1, 10751, '\p{Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^Is_Blk=miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{Is_Blk=	miscellaneous_MATHEMATICALsymbols	B}', "");
Expect(0, 10751, '\p{^Is_Blk=	miscellaneous_MATHEMATICALsymbols	B}', "");
Expect(0, 10751, '\P{Is_Blk=	miscellaneous_MATHEMATICALsymbols	B}', "");
Expect(1, 10751, '\P{^Is_Blk=	miscellaneous_MATHEMATICALsymbols	B}', "");
Expect(0, 10623, '\p{Is_Blk=	miscellaneous_MATHEMATICALsymbols	B}', "");
Expect(1, 10623, '\p{^Is_Blk=	miscellaneous_MATHEMATICALsymbols	B}', "");
Expect(1, 10623, '\P{Is_Blk=	miscellaneous_MATHEMATICALsymbols	B}', "");
Expect(0, 10623, '\P{^Is_Blk=	miscellaneous_MATHEMATICALsymbols	B}', "");
Error('\p{Block=_Bengali/a/}');
Error('\P{Block=_Bengali/a/}');
Expect(1, 2559, '\p{Block=bengali}', "");
Expect(0, 2559, '\p{^Block=bengali}', "");
Expect(0, 2559, '\P{Block=bengali}', "");
Expect(1, 2559, '\P{^Block=bengali}', "");
Expect(0, 2431, '\p{Block=bengali}', "");
Expect(1, 2431, '\p{^Block=bengali}', "");
Expect(1, 2431, '\P{Block=bengali}', "");
Expect(0, 2431, '\P{^Block=bengali}', "");
Expect(1, 2559, '\p{Block= Bengali}', "");
Expect(0, 2559, '\p{^Block= Bengali}', "");
Expect(0, 2559, '\P{Block= Bengali}', "");
Expect(1, 2559, '\P{^Block= Bengali}', "");
Expect(0, 2431, '\p{Block= Bengali}', "");
Expect(1, 2431, '\p{^Block= Bengali}', "");
Expect(1, 2431, '\P{Block= Bengali}', "");
Expect(0, 2431, '\P{^Block= Bengali}', "");
Error('\p{Blk= /a/Bengali}');
Error('\P{Blk= /a/Bengali}');
Expect(1, 2559, '\p{Blk=bengali}', "");
Expect(0, 2559, '\p{^Blk=bengali}', "");
Expect(0, 2559, '\P{Blk=bengali}', "");
Expect(1, 2559, '\P{^Blk=bengali}', "");
Expect(0, 2431, '\p{Blk=bengali}', "");
Expect(1, 2431, '\p{^Blk=bengali}', "");
Expect(1, 2431, '\P{Blk=bengali}', "");
Expect(0, 2431, '\P{^Blk=bengali}', "");
Expect(1, 2559, '\p{Blk=  Bengali}', "");
Expect(0, 2559, '\p{^Blk=  Bengali}', "");
Expect(0, 2559, '\P{Blk=  Bengali}', "");
Expect(1, 2559, '\P{^Blk=  Bengali}', "");
Expect(0, 2431, '\p{Blk=  Bengali}', "");
Expect(1, 2431, '\p{^Blk=  Bengali}', "");
Expect(1, 2431, '\P{Blk=  Bengali}', "");
Expect(0, 2431, '\P{^Blk=  Bengali}', "");
Error('\p{Is_Block=- bengali:=}');
Error('\P{Is_Block=- bengali:=}');
Expect(1, 2559, '\p{Is_Block=bengali}', "");
Expect(0, 2559, '\p{^Is_Block=bengali}', "");
Expect(0, 2559, '\P{Is_Block=bengali}', "");
Expect(1, 2559, '\P{^Is_Block=bengali}', "");
Expect(0, 2431, '\p{Is_Block=bengali}', "");
Expect(1, 2431, '\p{^Is_Block=bengali}', "");
Expect(1, 2431, '\P{Is_Block=bengali}', "");
Expect(0, 2431, '\P{^Is_Block=bengali}', "");
Expect(1, 2559, '\p{Is_Block=	_Bengali}', "");
Expect(0, 2559, '\p{^Is_Block=	_Bengali}', "");
Expect(0, 2559, '\P{Is_Block=	_Bengali}', "");
Expect(1, 2559, '\P{^Is_Block=	_Bengali}', "");
Expect(0, 2431, '\p{Is_Block=	_Bengali}', "");
Expect(1, 2431, '\p{^Is_Block=	_Bengali}', "");
Expect(1, 2431, '\P{Is_Block=	_Bengali}', "");
Expect(0, 2431, '\P{^Is_Block=	_Bengali}', "");
Error('\p{Is_Blk=:= 	Bengali}');
Error('\P{Is_Blk=:= 	Bengali}');
Expect(1, 2559, '\p{Is_Blk=bengali}', "");
Expect(0, 2559, '\p{^Is_Blk=bengali}', "");
Expect(0, 2559, '\P{Is_Blk=bengali}', "");
Expect(1, 2559, '\P{^Is_Blk=bengali}', "");
Expect(0, 2431, '\p{Is_Blk=bengali}', "");
Expect(1, 2431, '\p{^Is_Blk=bengali}', "");
Expect(1, 2431, '\P{Is_Blk=bengali}', "");
Expect(0, 2431, '\P{^Is_Blk=bengali}', "");
Expect(1, 2559, '\p{Is_Blk=	Bengali}', "");
Expect(0, 2559, '\p{^Is_Blk=	Bengali}', "");
Expect(0, 2559, '\P{Is_Blk=	Bengali}', "");
Expect(1, 2559, '\P{^Is_Blk=	Bengali}', "");
Expect(0, 2431, '\p{Is_Blk=	Bengali}', "");
Expect(1, 2431, '\p{^Is_Blk=	Bengali}', "");
Expect(1, 2431, '\P{Is_Blk=	Bengali}', "");
Expect(0, 2431, '\P{^Is_Blk=	Bengali}', "");
Error('\p{Block=:=	CYPRIOTsyllabary}');
Error('\P{Block=:=	CYPRIOTsyllabary}');
Expect(1, 67647, '\p{Block=cypriotsyllabary}', "");
Expect(0, 67647, '\p{^Block=cypriotsyllabary}', "");
Expect(0, 67647, '\P{Block=cypriotsyllabary}', "");
Expect(1, 67647, '\P{^Block=cypriotsyllabary}', "");
Expect(0, 67583, '\p{Block=cypriotsyllabary}', "");
Expect(1, 67583, '\p{^Block=cypriotsyllabary}', "");
Expect(1, 67583, '\P{Block=cypriotsyllabary}', "");
Expect(0, 67583, '\P{^Block=cypriotsyllabary}', "");
Expect(1, 67647, '\p{Block:	_	Cypriot_Syllabary}', "");
Expect(0, 67647, '\p{^Block:	_	Cypriot_Syllabary}', "");
Expect(0, 67647, '\P{Block:	_	Cypriot_Syllabary}', "");
Expect(1, 67647, '\P{^Block:	_	Cypriot_Syllabary}', "");
Expect(0, 67583, '\p{Block:	_	Cypriot_Syllabary}', "");
Expect(1, 67583, '\p{^Block:	_	Cypriot_Syllabary}', "");
Expect(1, 67583, '\P{Block:	_	Cypriot_Syllabary}', "");
Expect(0, 67583, '\P{^Block:	_	Cypriot_Syllabary}', "");
Error('\p{Blk=	 cypriot-syllabary:=}');
Error('\P{Blk=	 cypriot-syllabary:=}');
Expect(1, 67647, '\p{Blk=cypriotsyllabary}', "");
Expect(0, 67647, '\p{^Blk=cypriotsyllabary}', "");
Expect(0, 67647, '\P{Blk=cypriotsyllabary}', "");
Expect(1, 67647, '\P{^Blk=cypriotsyllabary}', "");
Expect(0, 67583, '\p{Blk=cypriotsyllabary}', "");
Expect(1, 67583, '\p{^Blk=cypriotsyllabary}', "");
Expect(1, 67583, '\P{Blk=cypriotsyllabary}', "");
Expect(0, 67583, '\P{^Blk=cypriotsyllabary}', "");
Expect(1, 67647, '\p{Blk= cypriot_Syllabary}', "");
Expect(0, 67647, '\p{^Blk= cypriot_Syllabary}', "");
Expect(0, 67647, '\P{Blk= cypriot_Syllabary}', "");
Expect(1, 67647, '\P{^Blk= cypriot_Syllabary}', "");
Expect(0, 67583, '\p{Blk= cypriot_Syllabary}', "");
Expect(1, 67583, '\p{^Blk= cypriot_Syllabary}', "");
Expect(1, 67583, '\P{Blk= cypriot_Syllabary}', "");
Expect(0, 67583, '\P{^Blk= cypriot_Syllabary}', "");
Error('\p{Is_Block=/a/ CYPRIOTSYLLABARY}');
Error('\P{Is_Block=/a/ CYPRIOTSYLLABARY}');
Expect(1, 67647, '\p{Is_Block=cypriotsyllabary}', "");
Expect(0, 67647, '\p{^Is_Block=cypriotsyllabary}', "");
Expect(0, 67647, '\P{Is_Block=cypriotsyllabary}', "");
Expect(1, 67647, '\P{^Is_Block=cypriotsyllabary}', "");
Expect(0, 67583, '\p{Is_Block=cypriotsyllabary}', "");
Expect(1, 67583, '\p{^Is_Block=cypriotsyllabary}', "");
Expect(1, 67583, '\P{Is_Block=cypriotsyllabary}', "");
Expect(0, 67583, '\P{^Is_Block=cypriotsyllabary}', "");
Expect(1, 67647, '\p{Is_Block=-Cypriot SYLLABARY}', "");
Expect(0, 67647, '\p{^Is_Block=-Cypriot SYLLABARY}', "");
Expect(0, 67647, '\P{Is_Block=-Cypriot SYLLABARY}', "");
Expect(1, 67647, '\P{^Is_Block=-Cypriot SYLLABARY}', "");
Expect(0, 67583, '\p{Is_Block=-Cypriot SYLLABARY}', "");
Expect(1, 67583, '\p{^Is_Block=-Cypriot SYLLABARY}', "");
Expect(1, 67583, '\P{Is_Block=-Cypriot SYLLABARY}', "");
Expect(0, 67583, '\P{^Is_Block=-Cypriot SYLLABARY}', "");
Error('\p{Is_Blk=-_cypriot/a/SYLLABARY}');
Error('\P{Is_Blk=-_cypriot/a/SYLLABARY}');
Expect(1, 67647, '\p{Is_Blk=cypriotsyllabary}', "");
Expect(0, 67647, '\p{^Is_Blk=cypriotsyllabary}', "");
Expect(0, 67647, '\P{Is_Blk=cypriotsyllabary}', "");
Expect(1, 67647, '\P{^Is_Blk=cypriotsyllabary}', "");
Expect(0, 67583, '\p{Is_Blk=cypriotsyllabary}', "");
Expect(1, 67583, '\p{^Is_Blk=cypriotsyllabary}', "");
Expect(1, 67583, '\P{Is_Blk=cypriotsyllabary}', "");
Expect(0, 67583, '\P{^Is_Blk=cypriotsyllabary}', "");
Expect(1, 67647, '\p{Is_Blk=-	cypriot_SYLLABARY}', "");
Expect(0, 67647, '\p{^Is_Blk=-	cypriot_SYLLABARY}', "");
Expect(0, 67647, '\P{Is_Blk=-	cypriot_SYLLABARY}', "");
Expect(1, 67647, '\P{^Is_Blk=-	cypriot_SYLLABARY}', "");
Expect(0, 67583, '\p{Is_Blk=-	cypriot_SYLLABARY}', "");
Expect(1, 67583, '\p{^Is_Blk=-	cypriot_SYLLABARY}', "");
Expect(1, 67583, '\P{Is_Blk=-	cypriot_SYLLABARY}', "");
Expect(0, 67583, '\P{^Is_Blk=-	cypriot_SYLLABARY}', "");
Error('\p{Block=:= Supplemental Punctuation}');
Error('\P{Block=:= Supplemental Punctuation}');
Expect(1, 11903, '\p{Block=supplementalpunctuation}', "");
Expect(0, 11903, '\p{^Block=supplementalpunctuation}', "");
Expect(0, 11903, '\P{Block=supplementalpunctuation}', "");
Expect(1, 11903, '\P{^Block=supplementalpunctuation}', "");
Expect(0, 11775, '\p{Block=supplementalpunctuation}', "");
Expect(1, 11775, '\p{^Block=supplementalpunctuation}', "");
Expect(1, 11775, '\P{Block=supplementalpunctuation}', "");
Expect(0, 11775, '\P{^Block=supplementalpunctuation}', "");
Expect(1, 11903, '\p{Block=_ Supplemental_punctuation}', "");
Expect(0, 11903, '\p{^Block=_ Supplemental_punctuation}', "");
Expect(0, 11903, '\P{Block=_ Supplemental_punctuation}', "");
Expect(1, 11903, '\P{^Block=_ Supplemental_punctuation}', "");
Expect(0, 11775, '\p{Block=_ Supplemental_punctuation}', "");
Expect(1, 11775, '\p{^Block=_ Supplemental_punctuation}', "");
Expect(1, 11775, '\P{Block=_ Supplemental_punctuation}', "");
Expect(0, 11775, '\P{^Block=_ Supplemental_punctuation}', "");
Error('\p{Blk=-	SUPPLEMENTAL	PUNCTUATION/a/}');
Error('\P{Blk=-	SUPPLEMENTAL	PUNCTUATION/a/}');
Expect(1, 11903, '\p{Blk=supplementalpunctuation}', "");
Expect(0, 11903, '\p{^Blk=supplementalpunctuation}', "");
Expect(0, 11903, '\P{Blk=supplementalpunctuation}', "");
Expect(1, 11903, '\P{^Blk=supplementalpunctuation}', "");
Expect(0, 11775, '\p{Blk=supplementalpunctuation}', "");
Expect(1, 11775, '\p{^Blk=supplementalpunctuation}', "");
Expect(1, 11775, '\P{Blk=supplementalpunctuation}', "");
Expect(0, 11775, '\P{^Blk=supplementalpunctuation}', "");
Expect(1, 11903, '\p{Blk=	Supplemental_PUNCTUATION}', "");
Expect(0, 11903, '\p{^Blk=	Supplemental_PUNCTUATION}', "");
Expect(0, 11903, '\P{Blk=	Supplemental_PUNCTUATION}', "");
Expect(1, 11903, '\P{^Blk=	Supplemental_PUNCTUATION}', "");
Expect(0, 11775, '\p{Blk=	Supplemental_PUNCTUATION}', "");
Expect(1, 11775, '\p{^Blk=	Supplemental_PUNCTUATION}', "");
Expect(1, 11775, '\P{Blk=	Supplemental_PUNCTUATION}', "");
Expect(0, 11775, '\P{^Blk=	Supplemental_PUNCTUATION}', "");
Error('\p{Is_Block: _:=Supplemental-PUNCTUATION}');
Error('\P{Is_Block: _:=Supplemental-PUNCTUATION}');
Expect(1, 11903, '\p{Is_Block=supplementalpunctuation}', "");
Expect(0, 11903, '\p{^Is_Block=supplementalpunctuation}', "");
Expect(0, 11903, '\P{Is_Block=supplementalpunctuation}', "");
Expect(1, 11903, '\P{^Is_Block=supplementalpunctuation}', "");
Expect(0, 11775, '\p{Is_Block=supplementalpunctuation}', "");
Expect(1, 11775, '\p{^Is_Block=supplementalpunctuation}', "");
Expect(1, 11775, '\P{Is_Block=supplementalpunctuation}', "");
Expect(0, 11775, '\P{^Is_Block=supplementalpunctuation}', "");
Expect(1, 11903, '\p{Is_Block=	_supplementalPUNCTUATION}', "");
Expect(0, 11903, '\p{^Is_Block=	_supplementalPUNCTUATION}', "");
Expect(0, 11903, '\P{Is_Block=	_supplementalPUNCTUATION}', "");
Expect(1, 11903, '\P{^Is_Block=	_supplementalPUNCTUATION}', "");
Expect(0, 11775, '\p{Is_Block=	_supplementalPUNCTUATION}', "");
Expect(1, 11775, '\p{^Is_Block=	_supplementalPUNCTUATION}', "");
Expect(1, 11775, '\P{Is_Block=	_supplementalPUNCTUATION}', "");
Expect(0, 11775, '\P{^Is_Block=	_supplementalPUNCTUATION}', "");
Error('\p{Is_Blk=_/a/Supplemental Punctuation}');
Error('\P{Is_Blk=_/a/Supplemental Punctuation}');
Expect(1, 11903, '\p{Is_Blk=supplementalpunctuation}', "");
Expect(0, 11903, '\p{^Is_Blk=supplementalpunctuation}', "");
Expect(0, 11903, '\P{Is_Blk=supplementalpunctuation}', "");
Expect(1, 11903, '\P{^Is_Blk=supplementalpunctuation}', "");
Expect(0, 11775, '\p{Is_Blk=supplementalpunctuation}', "");
Expect(1, 11775, '\p{^Is_Blk=supplementalpunctuation}', "");
Expect(1, 11775, '\P{Is_Blk=supplementalpunctuation}', "");
Expect(0, 11775, '\P{^Is_Blk=supplementalpunctuation}', "");
Expect(1, 11903, '\p{Is_Blk=-_Supplemental	punctuation}', "");
Expect(0, 11903, '\p{^Is_Blk=-_Supplemental	punctuation}', "");
Expect(0, 11903, '\P{Is_Blk=-_Supplemental	punctuation}', "");
Expect(1, 11903, '\P{^Is_Blk=-_Supplemental	punctuation}', "");
Expect(0, 11775, '\p{Is_Blk=-_Supplemental	punctuation}', "");
Expect(1, 11775, '\p{^Is_Blk=-_Supplemental	punctuation}', "");
Expect(1, 11775, '\P{Is_Blk=-_Supplemental	punctuation}', "");
Expect(0, 11775, '\P{^Is_Blk=-_Supplemental	punctuation}', "");
Error('\p{Block=:=	_Coptic}');
Error('\P{Block=:=	_Coptic}');
Expect(1, 11519, '\p{Block=coptic}', "");
Expect(0, 11519, '\p{^Block=coptic}', "");
Expect(0, 11519, '\P{Block=coptic}', "");
Expect(1, 11519, '\P{^Block=coptic}', "");
Expect(0, 11391, '\p{Block=coptic}', "");
Expect(1, 11391, '\p{^Block=coptic}', "");
Expect(1, 11391, '\P{Block=coptic}', "");
Expect(0, 11391, '\P{^Block=coptic}', "");
Expect(1, 11519, '\p{Block= COPTIC}', "");
Expect(0, 11519, '\p{^Block= COPTIC}', "");
Expect(0, 11519, '\P{Block= COPTIC}', "");
Expect(1, 11519, '\P{^Block= COPTIC}', "");
Expect(0, 11391, '\p{Block= COPTIC}', "");
Expect(1, 11391, '\p{^Block= COPTIC}', "");
Expect(1, 11391, '\P{Block= COPTIC}', "");
Expect(0, 11391, '\P{^Block= COPTIC}', "");
Error('\p{Blk=/a/ coptic}');
Error('\P{Blk=/a/ coptic}');
Expect(1, 11519, '\p{Blk=coptic}', "");
Expect(0, 11519, '\p{^Blk=coptic}', "");
Expect(0, 11519, '\P{Blk=coptic}', "");
Expect(1, 11519, '\P{^Blk=coptic}', "");
Expect(0, 11391, '\p{Blk=coptic}', "");
Expect(1, 11391, '\p{^Blk=coptic}', "");
Expect(1, 11391, '\P{Blk=coptic}', "");
Expect(0, 11391, '\P{^Blk=coptic}', "");
Expect(1, 11519, '\p{Blk= Coptic}', "");
Expect(0, 11519, '\p{^Blk= Coptic}', "");
Expect(0, 11519, '\P{Blk= Coptic}', "");
Expect(1, 11519, '\P{^Blk= Coptic}', "");
Expect(0, 11391, '\p{Blk= Coptic}', "");
Expect(1, 11391, '\p{^Blk= Coptic}', "");
Expect(1, 11391, '\P{Blk= Coptic}', "");
Expect(0, 11391, '\P{^Blk= Coptic}', "");
Error('\p{Is_Block=:=		coptic}');
Error('\P{Is_Block=:=		coptic}');
Expect(1, 11519, '\p{Is_Block=coptic}', "");
Expect(0, 11519, '\p{^Is_Block=coptic}', "");
Expect(0, 11519, '\P{Is_Block=coptic}', "");
Expect(1, 11519, '\P{^Is_Block=coptic}', "");
Expect(0, 11391, '\p{Is_Block=coptic}', "");
Expect(1, 11391, '\p{^Is_Block=coptic}', "");
Expect(1, 11391, '\P{Is_Block=coptic}', "");
Expect(0, 11391, '\P{^Is_Block=coptic}', "");
Expect(1, 11519, '\p{Is_Block=	_coptic}', "");
Expect(0, 11519, '\p{^Is_Block=	_coptic}', "");
Expect(0, 11519, '\P{Is_Block=	_coptic}', "");
Expect(1, 11519, '\P{^Is_Block=	_coptic}', "");
Expect(0, 11391, '\p{Is_Block=	_coptic}', "");
Expect(1, 11391, '\p{^Is_Block=	_coptic}', "");
Expect(1, 11391, '\P{Is_Block=	_coptic}', "");
Expect(0, 11391, '\P{^Is_Block=	_coptic}', "");
Error('\p{Is_Blk= /a/coptic}');
Error('\P{Is_Blk= /a/coptic}');
Expect(1, 11519, '\p{Is_Blk=coptic}', "");
Expect(0, 11519, '\p{^Is_Blk=coptic}', "");
Expect(0, 11519, '\P{Is_Blk=coptic}', "");
Expect(1, 11519, '\P{^Is_Blk=coptic}', "");
Expect(0, 11391, '\p{Is_Blk=coptic}', "");
Expect(1, 11391, '\p{^Is_Blk=coptic}', "");
Expect(1, 11391, '\P{Is_Blk=coptic}', "");
Expect(0, 11391, '\P{^Is_Blk=coptic}', "");
Expect(1, 11519, '\p{Is_Blk=__COPTIC}', "");
Expect(0, 11519, '\p{^Is_Blk=__COPTIC}', "");
Expect(0, 11519, '\P{Is_Blk=__COPTIC}', "");
Expect(1, 11519, '\P{^Is_Blk=__COPTIC}', "");
Expect(0, 11391, '\p{Is_Blk=__COPTIC}', "");
Expect(1, 11391, '\p{^Is_Blk=__COPTIC}', "");
Expect(1, 11391, '\P{Is_Blk=__COPTIC}', "");
Expect(0, 11391, '\P{^Is_Blk=__COPTIC}', "");
Error('\p{Block=/a/ -SUPPLEMENTAL Arrows B}');
Error('\P{Block=/a/ -SUPPLEMENTAL Arrows B}');
Expect(1, 10623, '\p{Block=supplementalarrowsb}', "");
Expect(0, 10623, '\p{^Block=supplementalarrowsb}', "");
Expect(0, 10623, '\P{Block=supplementalarrowsb}', "");
Expect(1, 10623, '\P{^Block=supplementalarrowsb}', "");
Expect(0, 10495, '\p{Block=supplementalarrowsb}', "");
Expect(1, 10495, '\p{^Block=supplementalarrowsb}', "");
Expect(1, 10495, '\P{Block=supplementalarrowsb}', "");
Expect(0, 10495, '\P{^Block=supplementalarrowsb}', "");
Expect(1, 10623, '\p{Block= 	supplemental	Arrows-b}', "");
Expect(0, 10623, '\p{^Block= 	supplemental	Arrows-b}', "");
Expect(0, 10623, '\P{Block= 	supplemental	Arrows-b}', "");
Expect(1, 10623, '\P{^Block= 	supplemental	Arrows-b}', "");
Expect(0, 10495, '\p{Block= 	supplemental	Arrows-b}', "");
Expect(1, 10495, '\p{^Block= 	supplemental	Arrows-b}', "");
Expect(1, 10495, '\P{Block= 	supplemental	Arrows-b}', "");
Expect(0, 10495, '\P{^Block= 	supplemental	Arrows-b}', "");
Error('\p{Blk=- SUPPLEMENTAL-ARROWSb/a/}');
Error('\P{Blk=- SUPPLEMENTAL-ARROWSb/a/}');
Expect(1, 10623, '\p{Blk=supplementalarrowsb}', "");
Expect(0, 10623, '\p{^Blk=supplementalarrowsb}', "");
Expect(0, 10623, '\P{Blk=supplementalarrowsb}', "");
Expect(1, 10623, '\P{^Blk=supplementalarrowsb}', "");
Expect(0, 10495, '\p{Blk=supplementalarrowsb}', "");
Expect(1, 10495, '\p{^Blk=supplementalarrowsb}', "");
Expect(1, 10495, '\P{Blk=supplementalarrowsb}', "");
Expect(0, 10495, '\P{^Blk=supplementalarrowsb}', "");
Expect(1, 10623, '\p{Blk: 	 supplemental-ArrowsB}', "");
Expect(0, 10623, '\p{^Blk: 	 supplemental-ArrowsB}', "");
Expect(0, 10623, '\P{Blk: 	 supplemental-ArrowsB}', "");
Expect(1, 10623, '\P{^Blk: 	 supplemental-ArrowsB}', "");
Expect(0, 10495, '\p{Blk: 	 supplemental-ArrowsB}', "");
Expect(1, 10495, '\p{^Blk: 	 supplemental-ArrowsB}', "");
Expect(1, 10495, '\P{Blk: 	 supplemental-ArrowsB}', "");
Expect(0, 10495, '\P{^Blk: 	 supplemental-ArrowsB}', "");
Error('\p{Is_Block=:=Supplemental_Arrows-B}');
Error('\P{Is_Block=:=Supplemental_Arrows-B}');
Expect(1, 10623, '\p{Is_Block=supplementalarrowsb}', "");
Expect(0, 10623, '\p{^Is_Block=supplementalarrowsb}', "");
Expect(0, 10623, '\P{Is_Block=supplementalarrowsb}', "");
Expect(1, 10623, '\P{^Is_Block=supplementalarrowsb}', "");
Expect(0, 10495, '\p{Is_Block=supplementalarrowsb}', "");
Expect(1, 10495, '\p{^Is_Block=supplementalarrowsb}', "");
Expect(1, 10495, '\P{Is_Block=supplementalarrowsb}', "");
Expect(0, 10495, '\P{^Is_Block=supplementalarrowsb}', "");
Expect(1, 10623, '\p{Is_Block= Supplemental	ARROWS-b}', "");
Expect(0, 10623, '\p{^Is_Block= Supplemental	ARROWS-b}', "");
Expect(0, 10623, '\P{Is_Block= Supplemental	ARROWS-b}', "");
Expect(1, 10623, '\P{^Is_Block= Supplemental	ARROWS-b}', "");
Expect(0, 10495, '\p{Is_Block= Supplemental	ARROWS-b}', "");
Expect(1, 10495, '\p{^Is_Block= Supplemental	ARROWS-b}', "");
Expect(1, 10495, '\P{Is_Block= Supplemental	ARROWS-b}', "");
Expect(0, 10495, '\P{^Is_Block= Supplemental	ARROWS-b}', "");
Error('\p{Is_Blk=/a/  supplementalARROWS	B}');
Error('\P{Is_Blk=/a/  supplementalARROWS	B}');
Expect(1, 10623, '\p{Is_Blk=supplementalarrowsb}', "");
Expect(0, 10623, '\p{^Is_Blk=supplementalarrowsb}', "");
Expect(0, 10623, '\P{Is_Blk=supplementalarrowsb}', "");
Expect(1, 10623, '\P{^Is_Blk=supplementalarrowsb}', "");
Expect(0, 10495, '\p{Is_Blk=supplementalarrowsb}', "");
Expect(1, 10495, '\p{^Is_Blk=supplementalarrowsb}', "");
Expect(1, 10495, '\P{Is_Blk=supplementalarrowsb}', "");
Expect(0, 10495, '\P{^Is_Blk=supplementalarrowsb}', "");
Expect(1, 10623, '\p{Is_Blk=	_Supplemental_ARROWSB}', "");
Expect(0, 10623, '\p{^Is_Blk=	_Supplemental_ARROWSB}', "");
Expect(0, 10623, '\P{Is_Blk=	_Supplemental_ARROWSB}', "");
Expect(1, 10623, '\P{^Is_Blk=	_Supplemental_ARROWSB}', "");
Expect(0, 10495, '\p{Is_Blk=	_Supplemental_ARROWSB}', "");
Expect(1, 10495, '\p{^Is_Blk=	_Supplemental_ARROWSB}', "");
Expect(1, 10495, '\P{Is_Blk=	_Supplemental_ARROWSB}', "");
Expect(0, 10495, '\P{^Is_Blk=	_Supplemental_ARROWSB}', "");
Error('\p{Block=/a/_ tibetan}');
Error('\P{Block=/a/_ tibetan}');
Expect(1, 4095, '\p{Block=tibetan}', "");
Expect(0, 4095, '\p{^Block=tibetan}', "");
Expect(0, 4095, '\P{Block=tibetan}', "");
Expect(1, 4095, '\P{^Block=tibetan}', "");
Expect(0, 3839, '\p{Block=tibetan}', "");
Expect(1, 3839, '\p{^Block=tibetan}', "");
Expect(1, 3839, '\P{Block=tibetan}', "");
Expect(0, 3839, '\P{^Block=tibetan}', "");
Expect(1, 4095, '\p{Block= TIBETAN}', "");
Expect(0, 4095, '\p{^Block= TIBETAN}', "");
Expect(0, 4095, '\P{Block= TIBETAN}', "");
Expect(1, 4095, '\P{^Block= TIBETAN}', "");
Expect(0, 3839, '\p{Block= TIBETAN}', "");
Expect(1, 3839, '\p{^Block= TIBETAN}', "");
Expect(1, 3839, '\P{Block= TIBETAN}', "");
Expect(0, 3839, '\P{^Block= TIBETAN}', "");
Error('\p{Blk=:= -tibetan}');
Error('\P{Blk=:= -tibetan}');
Expect(1, 4095, '\p{Blk=tibetan}', "");
Expect(0, 4095, '\p{^Blk=tibetan}', "");
Expect(0, 4095, '\P{Blk=tibetan}', "");
Expect(1, 4095, '\P{^Blk=tibetan}', "");
Expect(0, 3839, '\p{Blk=tibetan}', "");
Expect(1, 3839, '\p{^Blk=tibetan}', "");
Expect(1, 3839, '\P{Blk=tibetan}', "");
Expect(0, 3839, '\P{^Blk=tibetan}', "");
Expect(1, 4095, '\p{Blk=	 TIBETAN}', "");
Expect(0, 4095, '\p{^Blk=	 TIBETAN}', "");
Expect(0, 4095, '\P{Blk=	 TIBETAN}', "");
Expect(1, 4095, '\P{^Blk=	 TIBETAN}', "");
Expect(0, 3839, '\p{Blk=	 TIBETAN}', "");
Expect(1, 3839, '\p{^Blk=	 TIBETAN}', "");
Expect(1, 3839, '\P{Blk=	 TIBETAN}', "");
Expect(0, 3839, '\P{^Blk=	 TIBETAN}', "");
Error('\p{Is_Block=- TIBETAN:=}');
Error('\P{Is_Block=- TIBETAN:=}');
Expect(1, 4095, '\p{Is_Block=tibetan}', "");
Expect(0, 4095, '\p{^Is_Block=tibetan}', "");
Expect(0, 4095, '\P{Is_Block=tibetan}', "");
Expect(1, 4095, '\P{^Is_Block=tibetan}', "");
Expect(0, 3839, '\p{Is_Block=tibetan}', "");
Expect(1, 3839, '\p{^Is_Block=tibetan}', "");
Expect(1, 3839, '\P{Is_Block=tibetan}', "");
Expect(0, 3839, '\P{^Is_Block=tibetan}', "");
Expect(1, 4095, '\p{Is_Block= 	Tibetan}', "");
Expect(0, 4095, '\p{^Is_Block= 	Tibetan}', "");
Expect(0, 4095, '\P{Is_Block= 	Tibetan}', "");
Expect(1, 4095, '\P{^Is_Block= 	Tibetan}', "");
Expect(0, 3839, '\p{Is_Block= 	Tibetan}', "");
Expect(1, 3839, '\p{^Is_Block= 	Tibetan}', "");
Expect(1, 3839, '\P{Is_Block= 	Tibetan}', "");
Expect(0, 3839, '\P{^Is_Block= 	Tibetan}', "");
Error('\p{Is_Blk=__Tibetan:=}');
Error('\P{Is_Blk=__Tibetan:=}');
Expect(1, 4095, '\p{Is_Blk=tibetan}', "");
Expect(0, 4095, '\p{^Is_Blk=tibetan}', "");
Expect(0, 4095, '\P{Is_Blk=tibetan}', "");
Expect(1, 4095, '\P{^Is_Blk=tibetan}', "");
Expect(0, 3839, '\p{Is_Blk=tibetan}', "");
Expect(1, 3839, '\p{^Is_Blk=tibetan}', "");
Expect(1, 3839, '\P{Is_Blk=tibetan}', "");
Expect(0, 3839, '\P{^Is_Blk=tibetan}', "");
Expect(1, 4095, '\p{Is_Blk= 	Tibetan}', "");
Expect(0, 4095, '\p{^Is_Blk= 	Tibetan}', "");
Expect(0, 4095, '\P{Is_Blk= 	Tibetan}', "");
Expect(1, 4095, '\P{^Is_Blk= 	Tibetan}', "");
Expect(0, 3839, '\p{Is_Blk= 	Tibetan}', "");
Expect(1, 3839, '\p{^Is_Blk= 	Tibetan}', "");
Expect(1, 3839, '\P{Is_Blk= 	Tibetan}', "");
Expect(0, 3839, '\P{^Is_Blk= 	Tibetan}', "");
Error('\p{Block=:=DOMINO Tiles}');
Error('\P{Block=:=DOMINO Tiles}');
Expect(1, 127135, '\p{Block:	dominotiles}', "");
Expect(0, 127135, '\p{^Block:	dominotiles}', "");
Expect(0, 127135, '\P{Block:	dominotiles}', "");
Expect(1, 127135, '\P{^Block:	dominotiles}', "");
Expect(0, 127023, '\p{Block:	dominotiles}', "");
Expect(1, 127023, '\p{^Block:	dominotiles}', "");
Expect(1, 127023, '\P{Block:	dominotiles}', "");
Expect(0, 127023, '\P{^Block:	dominotiles}', "");
Expect(1, 127135, '\p{Block:	-domino_TILES}', "");
Expect(0, 127135, '\p{^Block:	-domino_TILES}', "");
Expect(0, 127135, '\P{Block:	-domino_TILES}', "");
Expect(1, 127135, '\P{^Block:	-domino_TILES}', "");
Expect(0, 127023, '\p{Block:	-domino_TILES}', "");
Expect(1, 127023, '\p{^Block:	-domino_TILES}', "");
Expect(1, 127023, '\P{Block:	-domino_TILES}', "");
Expect(0, 127023, '\P{^Block:	-domino_TILES}', "");
Error('\p{Blk=:=domino_tiles}');
Error('\P{Blk=:=domino_tiles}');
Expect(1, 127135, '\p{Blk=dominotiles}', "");
Expect(0, 127135, '\p{^Blk=dominotiles}', "");
Expect(0, 127135, '\P{Blk=dominotiles}', "");
Expect(1, 127135, '\P{^Blk=dominotiles}', "");
Expect(0, 127023, '\p{Blk=dominotiles}', "");
Expect(1, 127023, '\p{^Blk=dominotiles}', "");
Expect(1, 127023, '\P{Blk=dominotiles}', "");
Expect(0, 127023, '\P{^Blk=dominotiles}', "");
Expect(1, 127135, '\p{Blk=_ domino Tiles}', "");
Expect(0, 127135, '\p{^Blk=_ domino Tiles}', "");
Expect(0, 127135, '\P{Blk=_ domino Tiles}', "");
Expect(1, 127135, '\P{^Blk=_ domino Tiles}', "");
Expect(0, 127023, '\p{Blk=_ domino Tiles}', "");
Expect(1, 127023, '\p{^Blk=_ domino Tiles}', "");
Expect(1, 127023, '\P{Blk=_ domino Tiles}', "");
Expect(0, 127023, '\P{^Blk=_ domino Tiles}', "");
Error('\p{Is_Block:    /a/DominoTiles}');
Error('\P{Is_Block:    /a/DominoTiles}');
Expect(1, 127135, '\p{Is_Block=dominotiles}', "");
Expect(0, 127135, '\p{^Is_Block=dominotiles}', "");
Expect(0, 127135, '\P{Is_Block=dominotiles}', "");
Expect(1, 127135, '\P{^Is_Block=dominotiles}', "");
Expect(0, 127023, '\p{Is_Block=dominotiles}', "");
Expect(1, 127023, '\p{^Is_Block=dominotiles}', "");
Expect(1, 127023, '\P{Is_Block=dominotiles}', "");
Expect(0, 127023, '\P{^Is_Block=dominotiles}', "");
Expect(1, 127135, '\p{Is_Block=_	dominoTiles}', "");
Expect(0, 127135, '\p{^Is_Block=_	dominoTiles}', "");
Expect(0, 127135, '\P{Is_Block=_	dominoTiles}', "");
Expect(1, 127135, '\P{^Is_Block=_	dominoTiles}', "");
Expect(0, 127023, '\p{Is_Block=_	dominoTiles}', "");
Expect(1, 127023, '\p{^Is_Block=_	dominoTiles}', "");
Expect(1, 127023, '\P{Is_Block=_	dominoTiles}', "");
Expect(0, 127023, '\P{^Is_Block=_	dominoTiles}', "");
Error('\p{Is_Blk=:=Domino	tiles}');
Error('\P{Is_Blk=:=Domino	tiles}');
Expect(1, 127135, '\p{Is_Blk=dominotiles}', "");
Expect(0, 127135, '\p{^Is_Blk=dominotiles}', "");
Expect(0, 127135, '\P{Is_Blk=dominotiles}', "");
Expect(1, 127135, '\P{^Is_Blk=dominotiles}', "");
Expect(0, 127023, '\p{Is_Blk=dominotiles}', "");
Expect(1, 127023, '\p{^Is_Blk=dominotiles}', "");
Expect(1, 127023, '\P{Is_Blk=dominotiles}', "");
Expect(0, 127023, '\P{^Is_Blk=dominotiles}', "");
Expect(1, 127135, '\p{Is_Blk=Domino Tiles}', "");
Expect(0, 127135, '\p{^Is_Blk=Domino Tiles}', "");
Expect(0, 127135, '\P{Is_Blk=Domino Tiles}', "");
Expect(1, 127135, '\P{^Is_Blk=Domino Tiles}', "");
Expect(0, 127023, '\p{Is_Blk=Domino Tiles}', "");
Expect(1, 127023, '\p{^Is_Blk=Domino Tiles}', "");
Expect(1, 127023, '\P{Is_Blk=Domino Tiles}', "");
Expect(0, 127023, '\P{^Is_Blk=Domino Tiles}', "");
Error('\p{Block= /a/cjkSymbolsandPunctuation}');
Error('\P{Block= /a/cjkSymbolsandPunctuation}');
Expect(1, 12351, '\p{Block=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^Block=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{Block=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^Block=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{Block=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^Block=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{Block=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^Block=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{Block=- CJK symbols And PUNCTUATION}', "");
Expect(0, 12351, '\p{^Block=- CJK symbols And PUNCTUATION}', "");
Expect(0, 12351, '\P{Block=- CJK symbols And PUNCTUATION}', "");
Expect(1, 12351, '\P{^Block=- CJK symbols And PUNCTUATION}', "");
Expect(0, 12287, '\p{Block=- CJK symbols And PUNCTUATION}', "");
Expect(1, 12287, '\p{^Block=- CJK symbols And PUNCTUATION}', "");
Expect(1, 12287, '\P{Block=- CJK symbols And PUNCTUATION}', "");
Expect(0, 12287, '\P{^Block=- CJK symbols And PUNCTUATION}', "");
Error('\p{Blk=:=	CJKSymbols And PUNCTUATION}');
Error('\P{Blk=:=	CJKSymbols And PUNCTUATION}');
Expect(1, 12351, '\p{Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{Blk=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^Blk=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{Blk=-_CJKSymbols	AND	punctuation}', "");
Expect(0, 12351, '\p{^Blk=-_CJKSymbols	AND	punctuation}', "");
Expect(0, 12351, '\P{Blk=-_CJKSymbols	AND	punctuation}', "");
Expect(1, 12351, '\P{^Blk=-_CJKSymbols	AND	punctuation}', "");
Expect(0, 12287, '\p{Blk=-_CJKSymbols	AND	punctuation}', "");
Expect(1, 12287, '\p{^Blk=-_CJKSymbols	AND	punctuation}', "");
Expect(1, 12287, '\P{Blk=-_CJKSymbols	AND	punctuation}', "");
Expect(0, 12287, '\P{^Blk=-_CJKSymbols	AND	punctuation}', "");
Error('\p{Is_Block:	cjk	Symbols	and:=PUNCTUATION}');
Error('\P{Is_Block:	cjk	Symbols	and:=PUNCTUATION}');
Expect(1, 12351, '\p{Is_Block=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^Is_Block=cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{Is_Block=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^Is_Block=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{Is_Block=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^Is_Block=cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{Is_Block=cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^Is_Block=cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{Is_Block= 	CJK symbols AndPunctuation}', "");
Expect(0, 12351, '\p{^Is_Block= 	CJK symbols AndPunctuation}', "");
Expect(0, 12351, '\P{Is_Block= 	CJK symbols AndPunctuation}', "");
Expect(1, 12351, '\P{^Is_Block= 	CJK symbols AndPunctuation}', "");
Expect(0, 12287, '\p{Is_Block= 	CJK symbols AndPunctuation}', "");
Expect(1, 12287, '\p{^Is_Block= 	CJK symbols AndPunctuation}', "");
Expect(1, 12287, '\P{Is_Block= 	CJK symbols AndPunctuation}', "");
Expect(0, 12287, '\P{^Is_Block= 	CJK symbols AndPunctuation}', "");
Error('\p{Is_Blk=:=	 cjk symbols-And_punctuation}');
Error('\P{Is_Blk=:=	 cjk symbols-And_punctuation}');
Expect(1, 12351, '\p{Is_Blk:	cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^Is_Blk:	cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{Is_Blk:	cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^Is_Blk:	cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{Is_Blk:	cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^Is_Blk:	cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{Is_Blk:	cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^Is_Blk:	cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{Is_Blk=	 CJK	SYMBOLS-And Punctuation}', "");
Expect(0, 12351, '\p{^Is_Blk=	 CJK	SYMBOLS-And Punctuation}', "");
Expect(0, 12351, '\P{Is_Blk=	 CJK	SYMBOLS-And Punctuation}', "");
Expect(1, 12351, '\P{^Is_Blk=	 CJK	SYMBOLS-And Punctuation}', "");
Expect(0, 12287, '\p{Is_Blk=	 CJK	SYMBOLS-And Punctuation}', "");
Expect(1, 12287, '\p{^Is_Blk=	 CJK	SYMBOLS-And Punctuation}', "");
Expect(1, 12287, '\P{Is_Blk=	 CJK	SYMBOLS-And Punctuation}', "");
Expect(0, 12287, '\P{^Is_Blk=	 CJK	SYMBOLS-And Punctuation}', "");
Error('\p{Block: /a/Hangul	compatibility-Jamo}');
Error('\P{Block: /a/Hangul	compatibility-Jamo}');
Expect(1, 12687, '\p{Block=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^Block=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{Block=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^Block=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{Block=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^Block=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{Block=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^Block=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{Block:    _hangul-Compatibility-jamo}', "");
Expect(0, 12687, '\p{^Block:    _hangul-Compatibility-jamo}', "");
Expect(0, 12687, '\P{Block:    _hangul-Compatibility-jamo}', "");
Expect(1, 12687, '\P{^Block:    _hangul-Compatibility-jamo}', "");
Expect(0, 12591, '\p{Block:    _hangul-Compatibility-jamo}', "");
Expect(1, 12591, '\p{^Block:    _hangul-Compatibility-jamo}', "");
Expect(1, 12591, '\P{Block:    _hangul-Compatibility-jamo}', "");
Expect(0, 12591, '\P{^Block:    _hangul-Compatibility-jamo}', "");
Error('\p{Blk=	Hangul compatibility_Jamo/a/}');
Error('\P{Blk=	Hangul compatibility_Jamo/a/}');
Expect(1, 12687, '\p{Blk=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^Blk=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{Blk=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^Blk=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{Blk=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^Blk=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{Blk=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^Blk=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{Blk= _HangulCompatibility	Jamo}', "");
Expect(0, 12687, '\p{^Blk= _HangulCompatibility	Jamo}', "");
Expect(0, 12687, '\P{Blk= _HangulCompatibility	Jamo}', "");
Expect(1, 12687, '\P{^Blk= _HangulCompatibility	Jamo}', "");
Expect(0, 12591, '\p{Blk= _HangulCompatibility	Jamo}', "");
Expect(1, 12591, '\p{^Blk= _HangulCompatibility	Jamo}', "");
Expect(1, 12591, '\P{Blk= _HangulCompatibility	Jamo}', "");
Expect(0, 12591, '\P{^Blk= _HangulCompatibility	Jamo}', "");
Error('\p{Is_Block=	-hangul:=Compatibility Jamo}');
Error('\P{Is_Block=	-hangul:=Compatibility Jamo}');
Expect(1, 12687, '\p{Is_Block=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^Is_Block=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{Is_Block=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^Is_Block=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{Is_Block=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^Is_Block=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{Is_Block=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^Is_Block=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{Is_Block:   __HangulCompatibility_jamo}', "");
Expect(0, 12687, '\p{^Is_Block:   __HangulCompatibility_jamo}', "");
Expect(0, 12687, '\P{Is_Block:   __HangulCompatibility_jamo}', "");
Expect(1, 12687, '\P{^Is_Block:   __HangulCompatibility_jamo}', "");
Expect(0, 12591, '\p{Is_Block:   __HangulCompatibility_jamo}', "");
Expect(1, 12591, '\p{^Is_Block:   __HangulCompatibility_jamo}', "");
Expect(1, 12591, '\P{Is_Block:   __HangulCompatibility_jamo}', "");
Expect(0, 12591, '\P{^Is_Block:   __HangulCompatibility_jamo}', "");
Error('\p{Is_Blk=-/a/hangul-COMPATIBILITYJamo}');
Error('\P{Is_Blk=-/a/hangul-COMPATIBILITYJamo}');
Expect(1, 12687, '\p{Is_Blk=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^Is_Blk=hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{Is_Blk=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^Is_Blk=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{Is_Blk=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^Is_Blk=hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{Is_Blk=hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^Is_Blk=hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{Is_Blk=	hangulCompatibility Jamo}', "");
Expect(0, 12687, '\p{^Is_Blk=	hangulCompatibility Jamo}', "");
Expect(0, 12687, '\P{Is_Blk=	hangulCompatibility Jamo}', "");
Expect(1, 12687, '\P{^Is_Blk=	hangulCompatibility Jamo}', "");
Expect(0, 12591, '\p{Is_Blk=	hangulCompatibility Jamo}', "");
Expect(1, 12591, '\p{^Is_Blk=	hangulCompatibility Jamo}', "");
Expect(1, 12591, '\P{Is_Blk=	hangulCompatibility Jamo}', "");
Expect(0, 12591, '\P{^Is_Blk=	hangulCompatibility Jamo}', "");
Error('\p{Block=:=old	Persian}');
Error('\P{Block=:=old	Persian}');
Expect(1, 66527, '\p{Block=oldpersian}', "");
Expect(0, 66527, '\p{^Block=oldpersian}', "");
Expect(0, 66527, '\P{Block=oldpersian}', "");
Expect(1, 66527, '\P{^Block=oldpersian}', "");
Expect(0, 66463, '\p{Block=oldpersian}', "");
Expect(1, 66463, '\p{^Block=oldpersian}', "");
Expect(1, 66463, '\P{Block=oldpersian}', "");
Expect(0, 66463, '\P{^Block=oldpersian}', "");
Expect(1, 66527, '\p{Block= OLDPersian}', "");
Expect(0, 66527, '\p{^Block= OLDPersian}', "");
Expect(0, 66527, '\P{Block= OLDPersian}', "");
Expect(1, 66527, '\P{^Block= OLDPersian}', "");
Expect(0, 66463, '\p{Block= OLDPersian}', "");
Expect(1, 66463, '\p{^Block= OLDPersian}', "");
Expect(1, 66463, '\P{Block= OLDPersian}', "");
Expect(0, 66463, '\P{^Block= OLDPersian}', "");
Error('\p{Blk=_/a/OLD	persian}');
Error('\P{Blk=_/a/OLD	persian}');
Expect(1, 66527, '\p{Blk=oldpersian}', "");
Expect(0, 66527, '\p{^Blk=oldpersian}', "");
Expect(0, 66527, '\P{Blk=oldpersian}', "");
Expect(1, 66527, '\P{^Blk=oldpersian}', "");
Expect(0, 66463, '\p{Blk=oldpersian}', "");
Expect(1, 66463, '\p{^Blk=oldpersian}', "");
Expect(1, 66463, '\P{Blk=oldpersian}', "");
Expect(0, 66463, '\P{^Blk=oldpersian}', "");
Expect(1, 66527, '\p{Blk=	 old PERSIAN}', "");
Expect(0, 66527, '\p{^Blk=	 old PERSIAN}', "");
Expect(0, 66527, '\P{Blk=	 old PERSIAN}', "");
Expect(1, 66527, '\P{^Blk=	 old PERSIAN}', "");
Expect(0, 66463, '\p{Blk=	 old PERSIAN}', "");
Expect(1, 66463, '\p{^Blk=	 old PERSIAN}', "");
Expect(1, 66463, '\P{Blk=	 old PERSIAN}', "");
Expect(0, 66463, '\P{^Blk=	 old PERSIAN}', "");
Error('\p{Is_Block=:= 	OldPersian}');
Error('\P{Is_Block=:= 	OldPersian}');
Expect(1, 66527, '\p{Is_Block=oldpersian}', "");
Expect(0, 66527, '\p{^Is_Block=oldpersian}', "");
Expect(0, 66527, '\P{Is_Block=oldpersian}', "");
Expect(1, 66527, '\P{^Is_Block=oldpersian}', "");
Expect(0, 66463, '\p{Is_Block=oldpersian}', "");
Expect(1, 66463, '\p{^Is_Block=oldpersian}', "");
Expect(1, 66463, '\P{Is_Block=oldpersian}', "");
Expect(0, 66463, '\P{^Is_Block=oldpersian}', "");
Expect(1, 66527, '\p{Is_Block=	-old_PERSIAN}', "");
Expect(0, 66527, '\p{^Is_Block=	-old_PERSIAN}', "");
Expect(0, 66527, '\P{Is_Block=	-old_PERSIAN}', "");
Expect(1, 66527, '\P{^Is_Block=	-old_PERSIAN}', "");
Expect(0, 66463, '\p{Is_Block=	-old_PERSIAN}', "");
Expect(1, 66463, '\p{^Is_Block=	-old_PERSIAN}', "");
Expect(1, 66463, '\P{Is_Block=	-old_PERSIAN}', "");
Expect(0, 66463, '\P{^Is_Block=	-old_PERSIAN}', "");
Error('\p{Is_Blk=:=OLD PERSIAN}');
Error('\P{Is_Blk=:=OLD PERSIAN}');
Expect(1, 66527, '\p{Is_Blk=oldpersian}', "");
Expect(0, 66527, '\p{^Is_Blk=oldpersian}', "");
Expect(0, 66527, '\P{Is_Blk=oldpersian}', "");
Expect(1, 66527, '\P{^Is_Blk=oldpersian}', "");
Expect(0, 66463, '\p{Is_Blk=oldpersian}', "");
Expect(1, 66463, '\p{^Is_Blk=oldpersian}', "");
Expect(1, 66463, '\P{Is_Blk=oldpersian}', "");
Expect(0, 66463, '\P{^Is_Blk=oldpersian}', "");
Expect(1, 66527, '\p{Is_Blk=_ OldPersian}', "");
Expect(0, 66527, '\p{^Is_Blk=_ OldPersian}', "");
Expect(0, 66527, '\P{Is_Blk=_ OldPersian}', "");
Expect(1, 66527, '\P{^Is_Blk=_ OldPersian}', "");
Expect(0, 66463, '\p{Is_Blk=_ OldPersian}', "");
Expect(1, 66463, '\p{^Is_Blk=_ OldPersian}', "");
Expect(1, 66463, '\P{Is_Blk=_ OldPersian}', "");
Expect(0, 66463, '\P{^Is_Blk=_ OldPersian}', "");
Error('\p{Block=_MODIFIER:=Tone	LETTERS}');
Error('\P{Block=_MODIFIER:=Tone	LETTERS}');
Expect(1, 42783, '\p{Block=modifiertoneletters}', "");
Expect(0, 42783, '\p{^Block=modifiertoneletters}', "");
Expect(0, 42783, '\P{Block=modifiertoneletters}', "");
Expect(1, 42783, '\P{^Block=modifiertoneletters}', "");
Expect(0, 42751, '\p{Block=modifiertoneletters}', "");
Expect(1, 42751, '\p{^Block=modifiertoneletters}', "");
Expect(1, 42751, '\P{Block=modifiertoneletters}', "");
Expect(0, 42751, '\P{^Block=modifiertoneletters}', "");
Expect(1, 42783, '\p{Block:_	Modifier Toneletters}', "");
Expect(0, 42783, '\p{^Block:_	Modifier Toneletters}', "");
Expect(0, 42783, '\P{Block:_	Modifier Toneletters}', "");
Expect(1, 42783, '\P{^Block:_	Modifier Toneletters}', "");
Expect(0, 42751, '\p{Block:_	Modifier Toneletters}', "");
Expect(1, 42751, '\p{^Block:_	Modifier Toneletters}', "");
Expect(1, 42751, '\P{Block:_	Modifier Toneletters}', "");
Expect(0, 42751, '\P{^Block:_	Modifier Toneletters}', "");
Error('\p{Blk=/a/	-Modifier Tone Letters}');
Error('\P{Blk=/a/	-Modifier Tone Letters}');
Expect(1, 42783, '\p{Blk=modifiertoneletters}', "");
Expect(0, 42783, '\p{^Blk=modifiertoneletters}', "");
Expect(0, 42783, '\P{Blk=modifiertoneletters}', "");
Expect(1, 42783, '\P{^Blk=modifiertoneletters}', "");
Expect(0, 42751, '\p{Blk=modifiertoneletters}', "");
Expect(1, 42751, '\p{^Blk=modifiertoneletters}', "");
Expect(1, 42751, '\P{Blk=modifiertoneletters}', "");
Expect(0, 42751, '\P{^Blk=modifiertoneletters}', "");
Expect(1, 42783, '\p{Blk: 	-MODIFIER TONE-letters}', "");
Expect(0, 42783, '\p{^Blk: 	-MODIFIER TONE-letters}', "");
Expect(0, 42783, '\P{Blk: 	-MODIFIER TONE-letters}', "");
Expect(1, 42783, '\P{^Blk: 	-MODIFIER TONE-letters}', "");
Expect(0, 42751, '\p{Blk: 	-MODIFIER TONE-letters}', "");
Expect(1, 42751, '\p{^Blk: 	-MODIFIER TONE-letters}', "");
Expect(1, 42751, '\P{Blk: 	-MODIFIER TONE-letters}', "");
Expect(0, 42751, '\P{^Blk: 	-MODIFIER TONE-letters}', "");
Error('\p{Is_Block=_/a/Modifier	tone letters}');
Error('\P{Is_Block=_/a/Modifier	tone letters}');
Expect(1, 42783, '\p{Is_Block=modifiertoneletters}', "");
Expect(0, 42783, '\p{^Is_Block=modifiertoneletters}', "");
Expect(0, 42783, '\P{Is_Block=modifiertoneletters}', "");
Expect(1, 42783, '\P{^Is_Block=modifiertoneletters}', "");
Expect(0, 42751, '\p{Is_Block=modifiertoneletters}', "");
Expect(1, 42751, '\p{^Is_Block=modifiertoneletters}', "");
Expect(1, 42751, '\P{Is_Block=modifiertoneletters}', "");
Expect(0, 42751, '\P{^Is_Block=modifiertoneletters}', "");
Expect(1, 42783, '\p{Is_Block=	modifiertone-letters}', "");
Expect(0, 42783, '\p{^Is_Block=	modifiertone-letters}', "");
Expect(0, 42783, '\P{Is_Block=	modifiertone-letters}', "");
Expect(1, 42783, '\P{^Is_Block=	modifiertone-letters}', "");
Expect(0, 42751, '\p{Is_Block=	modifiertone-letters}', "");
Expect(1, 42751, '\p{^Is_Block=	modifiertone-letters}', "");
Expect(1, 42751, '\P{Is_Block=	modifiertone-letters}', "");
Expect(0, 42751, '\P{^Is_Block=	modifiertone-letters}', "");
Error('\p{Is_Blk=-MODIFIER_Tone:=Letters}');
Error('\P{Is_Blk=-MODIFIER_Tone:=Letters}');
Expect(1, 42783, '\p{Is_Blk=modifiertoneletters}', "");
Expect(0, 42783, '\p{^Is_Blk=modifiertoneletters}', "");
Expect(0, 42783, '\P{Is_Blk=modifiertoneletters}', "");
Expect(1, 42783, '\P{^Is_Blk=modifiertoneletters}', "");
Expect(0, 42751, '\p{Is_Blk=modifiertoneletters}', "");
Expect(1, 42751, '\p{^Is_Blk=modifiertoneletters}', "");
Expect(1, 42751, '\P{Is_Blk=modifiertoneletters}', "");
Expect(0, 42751, '\P{^Is_Blk=modifiertoneletters}', "");
Expect(1, 42783, '\p{Is_Blk:		Modifier_tone-Letters}', "");
Expect(0, 42783, '\p{^Is_Blk:		Modifier_tone-Letters}', "");
Expect(0, 42783, '\P{Is_Blk:		Modifier_tone-Letters}', "");
Expect(1, 42783, '\P{^Is_Blk:		Modifier_tone-Letters}', "");
Expect(0, 42751, '\p{Is_Blk:		Modifier_tone-Letters}', "");
Expect(1, 42751, '\p{^Is_Blk:		Modifier_tone-Letters}', "");
Expect(1, 42751, '\P{Is_Blk:		Modifier_tone-Letters}', "");
Expect(0, 42751, '\P{^Is_Blk:		Modifier_tone-Letters}', "");
Error('\p{Block=/a/- ETHIOPICsupplement}');
Error('\P{Block=/a/- ETHIOPICsupplement}');
Expect(1, 5023, '\p{Block=ethiopicsupplement}', "");
Expect(0, 5023, '\p{^Block=ethiopicsupplement}', "");
Expect(0, 5023, '\P{Block=ethiopicsupplement}', "");
Expect(1, 5023, '\P{^Block=ethiopicsupplement}', "");
Expect(0, 4991, '\p{Block=ethiopicsupplement}', "");
Expect(1, 4991, '\p{^Block=ethiopicsupplement}', "");
Expect(1, 4991, '\P{Block=ethiopicsupplement}', "");
Expect(0, 4991, '\P{^Block=ethiopicsupplement}', "");
Expect(1, 5023, '\p{Block:__EthiopicSUPPLEMENT}', "");
Expect(0, 5023, '\p{^Block:__EthiopicSUPPLEMENT}', "");
Expect(0, 5023, '\P{Block:__EthiopicSUPPLEMENT}', "");
Expect(1, 5023, '\P{^Block:__EthiopicSUPPLEMENT}', "");
Expect(0, 4991, '\p{Block:__EthiopicSUPPLEMENT}', "");
Expect(1, 4991, '\p{^Block:__EthiopicSUPPLEMENT}', "");
Expect(1, 4991, '\P{Block:__EthiopicSUPPLEMENT}', "");
Expect(0, 4991, '\P{^Block:__EthiopicSUPPLEMENT}', "");
Error('\p{Blk=-:=Ethiopic-Supplement}');
Error('\P{Blk=-:=Ethiopic-Supplement}');
Expect(1, 5023, '\p{Blk=ethiopicsupplement}', "");
Expect(0, 5023, '\p{^Blk=ethiopicsupplement}', "");
Expect(0, 5023, '\P{Blk=ethiopicsupplement}', "");
Expect(1, 5023, '\P{^Blk=ethiopicsupplement}', "");
Expect(0, 4991, '\p{Blk=ethiopicsupplement}', "");
Expect(1, 4991, '\p{^Blk=ethiopicsupplement}', "");
Expect(1, 4991, '\P{Blk=ethiopicsupplement}', "");
Expect(0, 4991, '\P{^Blk=ethiopicsupplement}', "");
Expect(1, 5023, '\p{Blk=-EthiopicSupplement}', "");
Expect(0, 5023, '\p{^Blk=-EthiopicSupplement}', "");
Expect(0, 5023, '\P{Blk=-EthiopicSupplement}', "");
Expect(1, 5023, '\P{^Blk=-EthiopicSupplement}', "");
Expect(0, 4991, '\p{Blk=-EthiopicSupplement}', "");
Expect(1, 4991, '\p{^Blk=-EthiopicSupplement}', "");
Expect(1, 4991, '\P{Blk=-EthiopicSupplement}', "");
Expect(0, 4991, '\P{^Blk=-EthiopicSupplement}', "");
Error('\p{Is_Block=-/a/ETHIOPIC-supplement}');
Error('\P{Is_Block=-/a/ETHIOPIC-supplement}');
Expect(1, 5023, '\p{Is_Block:	ethiopicsupplement}', "");
Expect(0, 5023, '\p{^Is_Block:	ethiopicsupplement}', "");
Expect(0, 5023, '\P{Is_Block:	ethiopicsupplement}', "");
Expect(1, 5023, '\P{^Is_Block:	ethiopicsupplement}', "");
Expect(0, 4991, '\p{Is_Block:	ethiopicsupplement}', "");
Expect(1, 4991, '\p{^Is_Block:	ethiopicsupplement}', "");
Expect(1, 4991, '\P{Is_Block:	ethiopicsupplement}', "");
Expect(0, 4991, '\P{^Is_Block:	ethiopicsupplement}', "");
Expect(1, 5023, '\p{Is_Block=  ETHIOPICSupplement}', "");
Expect(0, 5023, '\p{^Is_Block=  ETHIOPICSupplement}', "");
Expect(0, 5023, '\P{Is_Block=  ETHIOPICSupplement}', "");
Expect(1, 5023, '\P{^Is_Block=  ETHIOPICSupplement}', "");
Expect(0, 4991, '\p{Is_Block=  ETHIOPICSupplement}', "");
Expect(1, 4991, '\p{^Is_Block=  ETHIOPICSupplement}', "");
Expect(1, 4991, '\P{Is_Block=  ETHIOPICSupplement}', "");
Expect(0, 4991, '\P{^Is_Block=  ETHIOPICSupplement}', "");
Error('\p{Is_Blk=_ethiopic:=Supplement}');
Error('\P{Is_Blk=_ethiopic:=Supplement}');
Expect(1, 5023, '\p{Is_Blk=ethiopicsupplement}', "");
Expect(0, 5023, '\p{^Is_Blk=ethiopicsupplement}', "");
Expect(0, 5023, '\P{Is_Blk=ethiopicsupplement}', "");
Expect(1, 5023, '\P{^Is_Blk=ethiopicsupplement}', "");
Expect(0, 4991, '\p{Is_Blk=ethiopicsupplement}', "");
Expect(1, 4991, '\p{^Is_Blk=ethiopicsupplement}', "");
Expect(1, 4991, '\P{Is_Blk=ethiopicsupplement}', "");
Expect(0, 4991, '\P{^Is_Blk=ethiopicsupplement}', "");
Expect(1, 5023, '\p{Is_Blk=	_Ethiopic	Supplement}', "");
Expect(0, 5023, '\p{^Is_Blk=	_Ethiopic	Supplement}', "");
Expect(0, 5023, '\P{Is_Blk=	_Ethiopic	Supplement}', "");
Expect(1, 5023, '\P{^Is_Blk=	_Ethiopic	Supplement}', "");
Expect(0, 4991, '\p{Is_Blk=	_Ethiopic	Supplement}', "");
Expect(1, 4991, '\p{^Is_Blk=	_Ethiopic	Supplement}', "");
Expect(1, 4991, '\P{Is_Blk=	_Ethiopic	Supplement}', "");
Expect(0, 4991, '\P{^Is_Blk=	_Ethiopic	Supplement}', "");
Error('\p{Block=		LINEAR:=B-Syllabary}');
Error('\P{Block=		LINEAR:=B-Syllabary}');
Expect(1, 65663, '\p{Block=linearbsyllabary}', "");
Expect(0, 65663, '\p{^Block=linearbsyllabary}', "");
Expect(0, 65663, '\P{Block=linearbsyllabary}', "");
Expect(1, 65663, '\P{^Block=linearbsyllabary}', "");
Expect(0, 1, '\p{Block=linearbsyllabary}', "");
Expect(1, 1, '\p{^Block=linearbsyllabary}', "");
Expect(1, 1, '\P{Block=linearbsyllabary}', "");
Expect(0, 1, '\P{^Block=linearbsyllabary}', "");
Expect(1, 65663, '\p{Block= _LINEAR B syllabary}', "");
Expect(0, 65663, '\p{^Block= _LINEAR B syllabary}', "");
Expect(0, 65663, '\P{Block= _LINEAR B syllabary}', "");
Expect(1, 65663, '\P{^Block= _LINEAR B syllabary}', "");
Expect(0, 1, '\p{Block= _LINEAR B syllabary}', "");
Expect(1, 1, '\p{^Block= _LINEAR B syllabary}', "");
Expect(1, 1, '\P{Block= _LINEAR B syllabary}', "");
Expect(0, 1, '\P{^Block= _LINEAR B syllabary}', "");
Error('\p{Blk:	 LinearBSyllabary:=}');
Error('\P{Blk:	 LinearBSyllabary:=}');
Expect(1, 65663, '\p{Blk=linearbsyllabary}', "");
Expect(0, 65663, '\p{^Blk=linearbsyllabary}', "");
Expect(0, 65663, '\P{Blk=linearbsyllabary}', "");
Expect(1, 65663, '\P{^Blk=linearbsyllabary}', "");
Expect(0, 1, '\p{Blk=linearbsyllabary}', "");
Expect(1, 1, '\p{^Blk=linearbsyllabary}', "");
Expect(1, 1, '\P{Blk=linearbsyllabary}', "");
Expect(0, 1, '\P{^Blk=linearbsyllabary}', "");
Expect(1, 65663, '\p{Blk=-linear b-Syllabary}', "");
Expect(0, 65663, '\p{^Blk=-linear b-Syllabary}', "");
Expect(0, 65663, '\P{Blk=-linear b-Syllabary}', "");
Expect(1, 65663, '\P{^Blk=-linear b-Syllabary}', "");
Expect(0, 1, '\p{Blk=-linear b-Syllabary}', "");
Expect(1, 1, '\p{^Blk=-linear b-Syllabary}', "");
Expect(1, 1, '\P{Blk=-linear b-Syllabary}', "");
Expect(0, 1, '\P{^Blk=-linear b-Syllabary}', "");
Error('\p{Is_Block:	/a/_ linear	Bsyllabary}');
Error('\P{Is_Block:	/a/_ linear	Bsyllabary}');
Expect(1, 65663, '\p{Is_Block=linearbsyllabary}', "");
Expect(0, 65663, '\p{^Is_Block=linearbsyllabary}', "");
Expect(0, 65663, '\P{Is_Block=linearbsyllabary}', "");
Expect(1, 65663, '\P{^Is_Block=linearbsyllabary}', "");
Expect(0, 1, '\p{Is_Block=linearbsyllabary}', "");
Expect(1, 1, '\p{^Is_Block=linearbsyllabary}', "");
Expect(1, 1, '\P{Is_Block=linearbsyllabary}', "");
Expect(0, 1, '\P{^Is_Block=linearbsyllabary}', "");
Expect(1, 65663, '\p{Is_Block=-_Linear_bSyllabary}', "");
Expect(0, 65663, '\p{^Is_Block=-_Linear_bSyllabary}', "");
Expect(0, 65663, '\P{Is_Block=-_Linear_bSyllabary}', "");
Expect(1, 65663, '\P{^Is_Block=-_Linear_bSyllabary}', "");
Expect(0, 1, '\p{Is_Block=-_Linear_bSyllabary}', "");
Expect(1, 1, '\p{^Is_Block=-_Linear_bSyllabary}', "");
Expect(1, 1, '\P{Is_Block=-_Linear_bSyllabary}', "");
Expect(0, 1, '\P{^Is_Block=-_Linear_bSyllabary}', "");
Error('\p{Is_Blk=-_Linear:=B	Syllabary}');
Error('\P{Is_Blk=-_Linear:=B	Syllabary}');
Expect(1, 65663, '\p{Is_Blk=linearbsyllabary}', "");
Expect(0, 65663, '\p{^Is_Blk=linearbsyllabary}', "");
Expect(0, 65663, '\P{Is_Blk=linearbsyllabary}', "");
Expect(1, 65663, '\P{^Is_Blk=linearbsyllabary}', "");
Expect(0, 1, '\p{Is_Blk=linearbsyllabary}', "");
Expect(1, 1, '\p{^Is_Blk=linearbsyllabary}', "");
Expect(1, 1, '\P{Is_Blk=linearbsyllabary}', "");
Expect(0, 1, '\P{^Is_Blk=linearbsyllabary}', "");
Expect(1, 65663, '\p{Is_Blk= 	Linearb SYLLABARY}', "");
Expect(0, 65663, '\p{^Is_Blk= 	Linearb SYLLABARY}', "");
Expect(0, 65663, '\P{Is_Blk= 	Linearb SYLLABARY}', "");
Expect(1, 65663, '\P{^Is_Blk= 	Linearb SYLLABARY}', "");
Expect(0, 1, '\p{Is_Blk= 	Linearb SYLLABARY}', "");
Expect(1, 1, '\p{^Is_Blk= 	Linearb SYLLABARY}', "");
Expect(1, 1, '\P{Is_Blk= 	Linearb SYLLABARY}', "");
Expect(0, 1, '\P{^Is_Blk= 	Linearb SYLLABARY}', "");
Error('\p{Block=_ Enclosed_CJK:=LETTERS-AND	MONTHS}');
Error('\P{Block=_ Enclosed_CJK:=LETTERS-AND	MONTHS}');
Expect(1, 13055, '\p{Block=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^Block=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{Block=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^Block=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{Block=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^Block=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{Block=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^Block=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{Block=	Enclosed CJK	letters-andMONTHS}', "");
Expect(0, 13055, '\p{^Block=	Enclosed CJK	letters-andMONTHS}', "");
Expect(0, 13055, '\P{Block=	Enclosed CJK	letters-andMONTHS}', "");
Expect(1, 13055, '\P{^Block=	Enclosed CJK	letters-andMONTHS}', "");
Expect(0, 12799, '\p{Block=	Enclosed CJK	letters-andMONTHS}', "");
Expect(1, 12799, '\p{^Block=	Enclosed CJK	letters-andMONTHS}', "");
Expect(1, 12799, '\P{Block=	Enclosed CJK	letters-andMONTHS}', "");
Expect(0, 12799, '\P{^Block=	Enclosed CJK	letters-andMONTHS}', "");
Error('\p{Blk=:=- Enclosed_CJKletters	and Months}');
Error('\P{Blk=:=- Enclosed_CJKletters	and Months}');
Expect(1, 13055, '\p{Blk=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^Blk=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{Blk=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^Blk=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{Blk=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^Blk=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{Blk=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^Blk=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{Blk=- enclosed CJK LettersAND	months}', "");
Expect(0, 13055, '\p{^Blk=- enclosed CJK LettersAND	months}', "");
Expect(0, 13055, '\P{Blk=- enclosed CJK LettersAND	months}', "");
Expect(1, 13055, '\P{^Blk=- enclosed CJK LettersAND	months}', "");
Expect(0, 12799, '\p{Blk=- enclosed CJK LettersAND	months}', "");
Expect(1, 12799, '\p{^Blk=- enclosed CJK LettersAND	months}', "");
Expect(1, 12799, '\P{Blk=- enclosed CJK LettersAND	months}', "");
Expect(0, 12799, '\P{^Blk=- enclosed CJK LettersAND	months}', "");
Error('\p{Is_Block=_/a/ENCLOSED-cjk-LettersAND_Months}');
Error('\P{Is_Block=_/a/ENCLOSED-cjk-LettersAND_Months}');
Expect(1, 13055, '\p{Is_Block=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^Is_Block=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{Is_Block=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^Is_Block=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{Is_Block=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^Is_Block=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{Is_Block=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^Is_Block=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{Is_Block=_ Enclosed	CJK-LETTERS_and-Months}', "");
Expect(0, 13055, '\p{^Is_Block=_ Enclosed	CJK-LETTERS_and-Months}', "");
Expect(0, 13055, '\P{Is_Block=_ Enclosed	CJK-LETTERS_and-Months}', "");
Expect(1, 13055, '\P{^Is_Block=_ Enclosed	CJK-LETTERS_and-Months}', "");
Expect(0, 12799, '\p{Is_Block=_ Enclosed	CJK-LETTERS_and-Months}', "");
Expect(1, 12799, '\p{^Is_Block=_ Enclosed	CJK-LETTERS_and-Months}', "");
Expect(1, 12799, '\P{Is_Block=_ Enclosed	CJK-LETTERS_and-Months}', "");
Expect(0, 12799, '\P{^Is_Block=_ Enclosed	CJK-LETTERS_and-Months}', "");
Error('\p{Is_Blk=-/a/Enclosed	cjk_LettersANDMonths}');
Error('\P{Is_Blk=-/a/Enclosed	cjk_LettersANDMonths}');
Expect(1, 13055, '\p{Is_Blk=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^Is_Blk=enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{Is_Blk=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^Is_Blk=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{Is_Blk=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^Is_Blk=enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{Is_Blk=enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^Is_Blk=enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{Is_Blk=	ENCLOSEDCJKLetters	And-MONTHS}', "");
Expect(0, 13055, '\p{^Is_Blk=	ENCLOSEDCJKLetters	And-MONTHS}', "");
Expect(0, 13055, '\P{Is_Blk=	ENCLOSEDCJKLetters	And-MONTHS}', "");
Expect(1, 13055, '\P{^Is_Blk=	ENCLOSEDCJKLetters	And-MONTHS}', "");
Expect(0, 12799, '\p{Is_Blk=	ENCLOSEDCJKLetters	And-MONTHS}', "");
Expect(1, 12799, '\p{^Is_Blk=	ENCLOSEDCJKLetters	And-MONTHS}', "");
Expect(1, 12799, '\P{Is_Blk=	ENCLOSEDCJKLetters	And-MONTHS}', "");
Expect(0, 12799, '\P{^Is_Blk=	ENCLOSEDCJKLetters	And-MONTHS}', "");
Error('\p{Block=__Combining diacriticalMarks/a/Supplement}');
Error('\P{Block=__Combining diacriticalMarks/a/Supplement}');
Expect(1, 7679, '\p{Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{Block=__combining	DIACRITICAL marks SUPPLEMENT}', "");
Expect(0, 7679, '\p{^Block=__combining	DIACRITICAL marks SUPPLEMENT}', "");
Expect(0, 7679, '\P{Block=__combining	DIACRITICAL marks SUPPLEMENT}', "");
Expect(1, 7679, '\P{^Block=__combining	DIACRITICAL marks SUPPLEMENT}', "");
Expect(0, 7615, '\p{Block=__combining	DIACRITICAL marks SUPPLEMENT}', "");
Expect(1, 7615, '\p{^Block=__combining	DIACRITICAL marks SUPPLEMENT}', "");
Expect(1, 7615, '\P{Block=__combining	DIACRITICAL marks SUPPLEMENT}', "");
Expect(0, 7615, '\P{^Block=__combining	DIACRITICAL marks SUPPLEMENT}', "");
Error('\p{Blk=-COMBINING:=DIACRITICALMARKSSupplement}');
Error('\P{Blk=-COMBINING:=DIACRITICALMARKSSupplement}');
Expect(1, 7679, '\p{Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{Blk=_Combining	Diacritical	MarksSupplement}', "");
Expect(0, 7679, '\p{^Blk=_Combining	Diacritical	MarksSupplement}', "");
Expect(0, 7679, '\P{Blk=_Combining	Diacritical	MarksSupplement}', "");
Expect(1, 7679, '\P{^Blk=_Combining	Diacritical	MarksSupplement}', "");
Expect(0, 7615, '\p{Blk=_Combining	Diacritical	MarksSupplement}', "");
Expect(1, 7615, '\p{^Blk=_Combining	Diacritical	MarksSupplement}', "");
Expect(1, 7615, '\P{Blk=_Combining	Diacritical	MarksSupplement}', "");
Expect(0, 7615, '\P{^Blk=_Combining	Diacritical	MarksSupplement}', "");
Error('\p{Is_Block=_:=COMBINING_Diacritical_Marks_supplement}');
Error('\P{Is_Block=_:=COMBINING_Diacritical_Marks_supplement}');
Expect(1, 7679, '\p{Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^Is_Block=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{Is_Block=_-Combining_Diacritical-marks_Supplement}', "");
Expect(0, 7679, '\p{^Is_Block=_-Combining_Diacritical-marks_Supplement}', "");
Expect(0, 7679, '\P{Is_Block=_-Combining_Diacritical-marks_Supplement}', "");
Expect(1, 7679, '\P{^Is_Block=_-Combining_Diacritical-marks_Supplement}', "");
Expect(0, 7615, '\p{Is_Block=_-Combining_Diacritical-marks_Supplement}', "");
Expect(1, 7615, '\p{^Is_Block=_-Combining_Diacritical-marks_Supplement}', "");
Expect(1, 7615, '\P{Is_Block=_-Combining_Diacritical-marks_Supplement}', "");
Expect(0, 7615, '\P{^Is_Block=_-Combining_Diacritical-marks_Supplement}', "");
Error('\p{Is_Blk=_:=combining DIACRITICAL-MARKSsupplement}');
Error('\P{Is_Blk=_:=combining DIACRITICAL-MARKSsupplement}');
Expect(1, 7679, '\p{Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^Is_Blk=combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{Is_Blk=	 combiningdiacriticalmarks	Supplement}', "");
Expect(0, 7679, '\p{^Is_Blk=	 combiningdiacriticalmarks	Supplement}', "");
Expect(0, 7679, '\P{Is_Blk=	 combiningdiacriticalmarks	Supplement}', "");
Expect(1, 7679, '\P{^Is_Blk=	 combiningdiacriticalmarks	Supplement}', "");
Expect(0, 7615, '\p{Is_Blk=	 combiningdiacriticalmarks	Supplement}', "");
Expect(1, 7615, '\p{^Is_Blk=	 combiningdiacriticalmarks	Supplement}', "");
Expect(1, 7615, '\P{Is_Blk=	 combiningdiacriticalmarks	Supplement}', "");
Expect(0, 7615, '\P{^Is_Blk=	 combiningdiacriticalmarks	Supplement}', "");
Error('\p{Block=/a/ 	BOPOMOFO}');
Error('\P{Block=/a/ 	BOPOMOFO}');
Expect(1, 12591, '\p{Block:bopomofo}', "");
Expect(0, 12591, '\p{^Block:bopomofo}', "");
Expect(0, 12591, '\P{Block:bopomofo}', "");
Expect(1, 12591, '\P{^Block:bopomofo}', "");
Expect(0, 12543, '\p{Block:bopomofo}', "");
Expect(1, 12543, '\p{^Block:bopomofo}', "");
Expect(1, 12543, '\P{Block:bopomofo}', "");
Expect(0, 12543, '\P{^Block:bopomofo}', "");
Expect(1, 12591, '\p{Block=_ bopomofo}', "");
Expect(0, 12591, '\p{^Block=_ bopomofo}', "");
Expect(0, 12591, '\P{Block=_ bopomofo}', "");
Expect(1, 12591, '\P{^Block=_ bopomofo}', "");
Expect(0, 12543, '\p{Block=_ bopomofo}', "");
Expect(1, 12543, '\p{^Block=_ bopomofo}', "");
Expect(1, 12543, '\P{Block=_ bopomofo}', "");
Expect(0, 12543, '\P{^Block=_ bopomofo}', "");
Error('\p{Blk=/a/_-BOPOMOFO}');
Error('\P{Blk=/a/_-BOPOMOFO}');
Expect(1, 12591, '\p{Blk=bopomofo}', "");
Expect(0, 12591, '\p{^Blk=bopomofo}', "");
Expect(0, 12591, '\P{Blk=bopomofo}', "");
Expect(1, 12591, '\P{^Blk=bopomofo}', "");
Expect(0, 12543, '\p{Blk=bopomofo}', "");
Expect(1, 12543, '\p{^Blk=bopomofo}', "");
Expect(1, 12543, '\P{Blk=bopomofo}', "");
Expect(0, 12543, '\P{^Blk=bopomofo}', "");
Expect(1, 12591, '\p{Blk=_-Bopomofo}', "");
Expect(0, 12591, '\p{^Blk=_-Bopomofo}', "");
Expect(0, 12591, '\P{Blk=_-Bopomofo}', "");
Expect(1, 12591, '\P{^Blk=_-Bopomofo}', "");
Expect(0, 12543, '\p{Blk=_-Bopomofo}', "");
Expect(1, 12543, '\p{^Blk=_-Bopomofo}', "");
Expect(1, 12543, '\P{Blk=_-Bopomofo}', "");
Expect(0, 12543, '\P{^Blk=_-Bopomofo}', "");
Error('\p{Is_Block=_bopomofo:=}');
Error('\P{Is_Block=_bopomofo:=}');
Expect(1, 12591, '\p{Is_Block=bopomofo}', "");
Expect(0, 12591, '\p{^Is_Block=bopomofo}', "");
Expect(0, 12591, '\P{Is_Block=bopomofo}', "");
Expect(1, 12591, '\P{^Is_Block=bopomofo}', "");
Expect(0, 12543, '\p{Is_Block=bopomofo}', "");
Expect(1, 12543, '\p{^Is_Block=bopomofo}', "");
Expect(1, 12543, '\P{Is_Block=bopomofo}', "");
Expect(0, 12543, '\P{^Is_Block=bopomofo}', "");
Expect(1, 12591, '\p{Is_Block:   -_BOPOMOFO}', "");
Expect(0, 12591, '\p{^Is_Block:   -_BOPOMOFO}', "");
Expect(0, 12591, '\P{Is_Block:   -_BOPOMOFO}', "");
Expect(1, 12591, '\P{^Is_Block:   -_BOPOMOFO}', "");
Expect(0, 12543, '\p{Is_Block:   -_BOPOMOFO}', "");
Expect(1, 12543, '\p{^Is_Block:   -_BOPOMOFO}', "");
Expect(1, 12543, '\P{Is_Block:   -_BOPOMOFO}', "");
Expect(0, 12543, '\P{^Is_Block:   -_BOPOMOFO}', "");
Error('\p{Is_Blk=_Bopomofo/a/}');
Error('\P{Is_Blk=_Bopomofo/a/}');
Expect(1, 12591, '\p{Is_Blk=bopomofo}', "");
Expect(0, 12591, '\p{^Is_Blk=bopomofo}', "");
Expect(0, 12591, '\P{Is_Blk=bopomofo}', "");
Expect(1, 12591, '\P{^Is_Blk=bopomofo}', "");
Expect(0, 12543, '\p{Is_Blk=bopomofo}', "");
Expect(1, 12543, '\p{^Is_Blk=bopomofo}', "");
Expect(1, 12543, '\P{Is_Blk=bopomofo}', "");
Expect(0, 12543, '\P{^Is_Blk=bopomofo}', "");
Expect(1, 12591, '\p{Is_Blk=- BOPOMOFO}', "");
Expect(0, 12591, '\p{^Is_Blk=- BOPOMOFO}', "");
Expect(0, 12591, '\P{Is_Blk=- BOPOMOFO}', "");
Expect(1, 12591, '\P{^Is_Blk=- BOPOMOFO}', "");
Expect(0, 12543, '\p{Is_Blk=- BOPOMOFO}', "");
Expect(1, 12543, '\p{^Is_Blk=- BOPOMOFO}', "");
Expect(1, 12543, '\P{Is_Blk=- BOPOMOFO}', "");
Expect(0, 12543, '\P{^Is_Blk=- BOPOMOFO}', "");
Error('\p{Block=/a/_ miscellaneous	Technical}');
Error('\P{Block=/a/_ miscellaneous	Technical}');
Expect(1, 9215, '\p{Block=miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^Block=miscellaneoustechnical}', "");
Expect(0, 9215, '\P{Block=miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^Block=miscellaneoustechnical}', "");
Expect(0, 8959, '\p{Block=miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^Block=miscellaneoustechnical}', "");
Expect(1, 8959, '\P{Block=miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^Block=miscellaneoustechnical}', "");
Expect(1, 9215, '\p{Block=_	Miscellaneous	Technical}', "");
Expect(0, 9215, '\p{^Block=_	Miscellaneous	Technical}', "");
Expect(0, 9215, '\P{Block=_	Miscellaneous	Technical}', "");
Expect(1, 9215, '\P{^Block=_	Miscellaneous	Technical}', "");
Expect(0, 8959, '\p{Block=_	Miscellaneous	Technical}', "");
Expect(1, 8959, '\p{^Block=_	Miscellaneous	Technical}', "");
Expect(1, 8959, '\P{Block=_	Miscellaneous	Technical}', "");
Expect(0, 8959, '\P{^Block=_	Miscellaneous	Technical}', "");
Error('\p{Blk=__miscellaneous/a/Technical}');
Error('\P{Blk=__miscellaneous/a/Technical}');
Expect(1, 9215, '\p{Blk=miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^Blk=miscellaneoustechnical}', "");
Expect(0, 9215, '\P{Blk=miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^Blk=miscellaneoustechnical}', "");
Expect(0, 8959, '\p{Blk=miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^Blk=miscellaneoustechnical}', "");
Expect(1, 8959, '\P{Blk=miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^Blk=miscellaneoustechnical}', "");
Expect(1, 9215, '\p{Blk:			miscellaneous-TECHNICAL}', "");
Expect(0, 9215, '\p{^Blk:			miscellaneous-TECHNICAL}', "");
Expect(0, 9215, '\P{Blk:			miscellaneous-TECHNICAL}', "");
Expect(1, 9215, '\P{^Blk:			miscellaneous-TECHNICAL}', "");
Expect(0, 8959, '\p{Blk:			miscellaneous-TECHNICAL}', "");
Expect(1, 8959, '\p{^Blk:			miscellaneous-TECHNICAL}', "");
Expect(1, 8959, '\P{Blk:			miscellaneous-TECHNICAL}', "");
Expect(0, 8959, '\P{^Blk:			miscellaneous-TECHNICAL}', "");
Error('\p{Is_Block=:=-Miscellaneous-Technical}');
Error('\P{Is_Block=:=-Miscellaneous-Technical}');
Expect(1, 9215, '\p{Is_Block=miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^Is_Block=miscellaneoustechnical}', "");
Expect(0, 9215, '\P{Is_Block=miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^Is_Block=miscellaneoustechnical}', "");
Expect(0, 8959, '\p{Is_Block=miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^Is_Block=miscellaneoustechnical}', "");
Expect(1, 8959, '\P{Is_Block=miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^Is_Block=miscellaneoustechnical}', "");
Expect(1, 9215, '\p{Is_Block=_ MiscellaneousTechnical}', "");
Expect(0, 9215, '\p{^Is_Block=_ MiscellaneousTechnical}', "");
Expect(0, 9215, '\P{Is_Block=_ MiscellaneousTechnical}', "");
Expect(1, 9215, '\P{^Is_Block=_ MiscellaneousTechnical}', "");
Expect(0, 8959, '\p{Is_Block=_ MiscellaneousTechnical}', "");
Expect(1, 8959, '\p{^Is_Block=_ MiscellaneousTechnical}', "");
Expect(1, 8959, '\P{Is_Block=_ MiscellaneousTechnical}', "");
Expect(0, 8959, '\P{^Is_Block=_ MiscellaneousTechnical}', "");
Error('\p{Is_Blk=	-Miscellaneous:=TECHNICAL}');
Error('\P{Is_Blk=	-Miscellaneous:=TECHNICAL}');
Expect(1, 9215, '\p{Is_Blk=miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^Is_Blk=miscellaneoustechnical}', "");
Expect(0, 9215, '\P{Is_Blk=miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^Is_Blk=miscellaneoustechnical}', "");
Expect(0, 8959, '\p{Is_Blk=miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^Is_Blk=miscellaneoustechnical}', "");
Expect(1, 8959, '\P{Is_Blk=miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^Is_Blk=miscellaneoustechnical}', "");
Expect(1, 9215, '\p{Is_Blk:_miscellaneous technical}', "");
Expect(0, 9215, '\p{^Is_Blk:_miscellaneous technical}', "");
Expect(0, 9215, '\P{Is_Blk:_miscellaneous technical}', "");
Expect(1, 9215, '\P{^Is_Blk:_miscellaneous technical}', "");
Expect(0, 8959, '\p{Is_Blk:_miscellaneous technical}', "");
Expect(1, 8959, '\p{^Is_Blk:_miscellaneous technical}', "");
Expect(1, 8959, '\P{Is_Blk:_miscellaneous technical}', "");
Expect(0, 8959, '\P{^Is_Blk:_miscellaneous technical}', "");
Error('\p{Block: /a/Osmanya}');
Error('\P{Block: /a/Osmanya}');
Expect(1, 66735, '\p{Block=osmanya}', "");
Expect(0, 66735, '\p{^Block=osmanya}', "");
Expect(0, 66735, '\P{Block=osmanya}', "");
Expect(1, 66735, '\P{^Block=osmanya}', "");
Expect(0, 66687, '\p{Block=osmanya}', "");
Expect(1, 66687, '\p{^Block=osmanya}', "");
Expect(1, 66687, '\P{Block=osmanya}', "");
Expect(0, 66687, '\P{^Block=osmanya}', "");
Expect(1, 66735, '\p{Block=_	Osmanya}', "");
Expect(0, 66735, '\p{^Block=_	Osmanya}', "");
Expect(0, 66735, '\P{Block=_	Osmanya}', "");
Expect(1, 66735, '\P{^Block=_	Osmanya}', "");
Expect(0, 66687, '\p{Block=_	Osmanya}', "");
Expect(1, 66687, '\p{^Block=_	Osmanya}', "");
Expect(1, 66687, '\P{Block=_	Osmanya}', "");
Expect(0, 66687, '\P{^Block=_	Osmanya}', "");
Error('\p{Blk=	:=Osmanya}');
Error('\P{Blk=	:=Osmanya}');
Expect(1, 66735, '\p{Blk=osmanya}', "");
Expect(0, 66735, '\p{^Blk=osmanya}', "");
Expect(0, 66735, '\P{Blk=osmanya}', "");
Expect(1, 66735, '\P{^Blk=osmanya}', "");
Expect(0, 66687, '\p{Blk=osmanya}', "");
Expect(1, 66687, '\p{^Blk=osmanya}', "");
Expect(1, 66687, '\P{Blk=osmanya}', "");
Expect(0, 66687, '\P{^Blk=osmanya}', "");
Expect(1, 66735, '\p{Blk:	_-Osmanya}', "");
Expect(0, 66735, '\p{^Blk:	_-Osmanya}', "");
Expect(0, 66735, '\P{Blk:	_-Osmanya}', "");
Expect(1, 66735, '\P{^Blk:	_-Osmanya}', "");
Expect(0, 66687, '\p{Blk:	_-Osmanya}', "");
Expect(1, 66687, '\p{^Blk:	_-Osmanya}', "");
Expect(1, 66687, '\P{Blk:	_-Osmanya}', "");
Expect(0, 66687, '\P{^Blk:	_-Osmanya}', "");
Error('\p{Is_Block=:=osmanya}');
Error('\P{Is_Block=:=osmanya}');
Expect(1, 66735, '\p{Is_Block=osmanya}', "");
Expect(0, 66735, '\p{^Is_Block=osmanya}', "");
Expect(0, 66735, '\P{Is_Block=osmanya}', "");
Expect(1, 66735, '\P{^Is_Block=osmanya}', "");
Expect(0, 66687, '\p{Is_Block=osmanya}', "");
Expect(1, 66687, '\p{^Is_Block=osmanya}', "");
Expect(1, 66687, '\P{Is_Block=osmanya}', "");
Expect(0, 66687, '\P{^Is_Block=osmanya}', "");
Expect(1, 66735, '\p{Is_Block=		osmanya}', "");
Expect(0, 66735, '\p{^Is_Block=		osmanya}', "");
Expect(0, 66735, '\P{Is_Block=		osmanya}', "");
Expect(1, 66735, '\P{^Is_Block=		osmanya}', "");
Expect(0, 66687, '\p{Is_Block=		osmanya}', "");
Expect(1, 66687, '\p{^Is_Block=		osmanya}', "");
Expect(1, 66687, '\P{Is_Block=		osmanya}', "");
Expect(0, 66687, '\P{^Is_Block=		osmanya}', "");
Error('\p{Is_Blk=_-Osmanya:=}');
Error('\P{Is_Blk=_-Osmanya:=}');
Expect(1, 66735, '\p{Is_Blk=osmanya}', "");
Expect(0, 66735, '\p{^Is_Blk=osmanya}', "");
Expect(0, 66735, '\P{Is_Blk=osmanya}', "");
Expect(1, 66735, '\P{^Is_Blk=osmanya}', "");
Expect(0, 66687, '\p{Is_Blk=osmanya}', "");
Expect(1, 66687, '\p{^Is_Blk=osmanya}', "");
Expect(1, 66687, '\P{Is_Blk=osmanya}', "");
Expect(0, 66687, '\P{^Is_Blk=osmanya}', "");
Expect(1, 66735, '\p{Is_Blk=	Osmanya}', "");
Expect(0, 66735, '\p{^Is_Blk=	Osmanya}', "");
Expect(0, 66735, '\P{Is_Blk=	Osmanya}', "");
Expect(1, 66735, '\P{^Is_Blk=	Osmanya}', "");
Expect(0, 66687, '\p{Is_Blk=	Osmanya}', "");
Expect(1, 66687, '\p{^Is_Blk=	Osmanya}', "");
Expect(1, 66687, '\P{Is_Blk=	Osmanya}', "");
Expect(0, 66687, '\P{^Is_Blk=	Osmanya}', "");
Error('\p{Block=:=	Mahjong_tiles}');
Error('\P{Block=:=	Mahjong_tiles}');
Expect(1, 127023, '\p{Block=mahjongtiles}', "");
Expect(0, 127023, '\p{^Block=mahjongtiles}', "");
Expect(0, 127023, '\P{Block=mahjongtiles}', "");
Expect(1, 127023, '\P{^Block=mahjongtiles}', "");
Expect(0, 126975, '\p{Block=mahjongtiles}', "");
Expect(1, 126975, '\p{^Block=mahjongtiles}', "");
Expect(1, 126975, '\P{Block=mahjongtiles}', "");
Expect(0, 126975, '\P{^Block=mahjongtiles}', "");
Expect(1, 127023, '\p{Block= _mahjong Tiles}', "");
Expect(0, 127023, '\p{^Block= _mahjong Tiles}', "");
Expect(0, 127023, '\P{Block= _mahjong Tiles}', "");
Expect(1, 127023, '\P{^Block= _mahjong Tiles}', "");
Expect(0, 126975, '\p{Block= _mahjong Tiles}', "");
Expect(1, 126975, '\p{^Block= _mahjong Tiles}', "");
Expect(1, 126975, '\P{Block= _mahjong Tiles}', "");
Expect(0, 126975, '\P{^Block= _mahjong Tiles}', "");
Error('\p{Blk=:=	Mahjong	tiles}');
Error('\P{Blk=:=	Mahjong	tiles}');
Expect(1, 127023, '\p{Blk=mahjongtiles}', "");
Expect(0, 127023, '\p{^Blk=mahjongtiles}', "");
Expect(0, 127023, '\P{Blk=mahjongtiles}', "");
Expect(1, 127023, '\P{^Blk=mahjongtiles}', "");
Expect(0, 126975, '\p{Blk=mahjongtiles}', "");
Expect(1, 126975, '\p{^Blk=mahjongtiles}', "");
Expect(1, 126975, '\P{Blk=mahjongtiles}', "");
Expect(0, 126975, '\P{^Blk=mahjongtiles}', "");
Expect(1, 127023, '\p{Blk=_ MAHJONG TILES}', "");
Expect(0, 127023, '\p{^Blk=_ MAHJONG TILES}', "");
Expect(0, 127023, '\P{Blk=_ MAHJONG TILES}', "");
Expect(1, 127023, '\P{^Blk=_ MAHJONG TILES}', "");
Expect(0, 126975, '\p{Blk=_ MAHJONG TILES}', "");
Expect(1, 126975, '\p{^Blk=_ MAHJONG TILES}', "");
Expect(1, 126975, '\P{Blk=_ MAHJONG TILES}', "");
Expect(0, 126975, '\P{^Blk=_ MAHJONG TILES}', "");
Error('\p{Is_Block: -MAHJONG_tiles/a/}');
Error('\P{Is_Block: -MAHJONG_tiles/a/}');
Expect(1, 127023, '\p{Is_Block=mahjongtiles}', "");
Expect(0, 127023, '\p{^Is_Block=mahjongtiles}', "");
Expect(0, 127023, '\P{Is_Block=mahjongtiles}', "");
Expect(1, 127023, '\P{^Is_Block=mahjongtiles}', "");
Expect(0, 126975, '\p{Is_Block=mahjongtiles}', "");
Expect(1, 126975, '\p{^Is_Block=mahjongtiles}', "");
Expect(1, 126975, '\P{Is_Block=mahjongtiles}', "");
Expect(0, 126975, '\P{^Is_Block=mahjongtiles}', "");
Expect(1, 127023, '\p{Is_Block= -Mahjong-TILES}', "");
Expect(0, 127023, '\p{^Is_Block= -Mahjong-TILES}', "");
Expect(0, 127023, '\P{Is_Block= -Mahjong-TILES}', "");
Expect(1, 127023, '\P{^Is_Block= -Mahjong-TILES}', "");
Expect(0, 126975, '\p{Is_Block= -Mahjong-TILES}', "");
Expect(1, 126975, '\p{^Is_Block= -Mahjong-TILES}', "");
Expect(1, 126975, '\P{Is_Block= -Mahjong-TILES}', "");
Expect(0, 126975, '\P{^Is_Block= -Mahjong-TILES}', "");
Error('\p{Is_Blk=/a/	Mahjong	tiles}');
Error('\P{Is_Blk=/a/	Mahjong	tiles}');
Expect(1, 127023, '\p{Is_Blk=mahjongtiles}', "");
Expect(0, 127023, '\p{^Is_Blk=mahjongtiles}', "");
Expect(0, 127023, '\P{Is_Blk=mahjongtiles}', "");
Expect(1, 127023, '\P{^Is_Blk=mahjongtiles}', "");
Expect(0, 126975, '\p{Is_Blk=mahjongtiles}', "");
Expect(1, 126975, '\p{^Is_Blk=mahjongtiles}', "");
Expect(1, 126975, '\P{Is_Blk=mahjongtiles}', "");
Expect(0, 126975, '\P{^Is_Blk=mahjongtiles}', "");
Expect(1, 127023, '\p{Is_Blk=  Mahjong Tiles}', "");
Expect(0, 127023, '\p{^Is_Blk=  Mahjong Tiles}', "");
Expect(0, 127023, '\P{Is_Blk=  Mahjong Tiles}', "");
Expect(1, 127023, '\P{^Is_Blk=  Mahjong Tiles}', "");
Expect(0, 126975, '\p{Is_Blk=  Mahjong Tiles}', "");
Expect(1, 126975, '\p{^Is_Blk=  Mahjong Tiles}', "");
Expect(1, 126975, '\P{Is_Blk=  Mahjong Tiles}', "");
Expect(0, 126975, '\P{^Is_Blk=  Mahjong Tiles}', "");
Error('\p{Block= /a/arrows}');
Error('\P{Block= /a/arrows}');
Expect(1, 8703, '\p{Block:	arrows}', "");
Expect(0, 8703, '\p{^Block:	arrows}', "");
Expect(0, 8703, '\P{Block:	arrows}', "");
Expect(1, 8703, '\P{^Block:	arrows}', "");
Expect(0, 8591, '\p{Block:	arrows}', "");
Expect(1, 8591, '\p{^Block:	arrows}', "");
Expect(1, 8591, '\P{Block:	arrows}', "");
Expect(0, 8591, '\P{^Block:	arrows}', "");
Expect(1, 8703, '\p{Block=- ARROWS}', "");
Expect(0, 8703, '\p{^Block=- ARROWS}', "");
Expect(0, 8703, '\P{Block=- ARROWS}', "");
Expect(1, 8703, '\P{^Block=- ARROWS}', "");
Expect(0, 8591, '\p{Block=- ARROWS}', "");
Expect(1, 8591, '\p{^Block=- ARROWS}', "");
Expect(1, 8591, '\P{Block=- ARROWS}', "");
Expect(0, 8591, '\P{^Block=- ARROWS}', "");
Error('\p{Blk=_:=Arrows}');
Error('\P{Blk=_:=Arrows}');
Expect(1, 8703, '\p{Blk=arrows}', "");
Expect(0, 8703, '\p{^Blk=arrows}', "");
Expect(0, 8703, '\P{Blk=arrows}', "");
Expect(1, 8703, '\P{^Blk=arrows}', "");
Expect(0, 8591, '\p{Blk=arrows}', "");
Expect(1, 8591, '\p{^Blk=arrows}', "");
Expect(1, 8591, '\P{Blk=arrows}', "");
Expect(0, 8591, '\P{^Blk=arrows}', "");
Expect(1, 8703, '\p{Blk=  ARROWS}', "");
Expect(0, 8703, '\p{^Blk=  ARROWS}', "");
Expect(0, 8703, '\P{Blk=  ARROWS}', "");
Expect(1, 8703, '\P{^Blk=  ARROWS}', "");
Expect(0, 8591, '\p{Blk=  ARROWS}', "");
Expect(1, 8591, '\p{^Blk=  ARROWS}', "");
Expect(1, 8591, '\P{Blk=  ARROWS}', "");
Expect(0, 8591, '\P{^Blk=  ARROWS}', "");
Error('\p{Is_Block=	Arrows:=}');
Error('\P{Is_Block=	Arrows:=}');
Expect(1, 8703, '\p{Is_Block=arrows}', "");
Expect(0, 8703, '\p{^Is_Block=arrows}', "");
Expect(0, 8703, '\P{Is_Block=arrows}', "");
Expect(1, 8703, '\P{^Is_Block=arrows}', "");
Expect(0, 8591, '\p{Is_Block=arrows}', "");
Expect(1, 8591, '\p{^Is_Block=arrows}', "");
Expect(1, 8591, '\P{Is_Block=arrows}', "");
Expect(0, 8591, '\P{^Is_Block=arrows}', "");
Expect(1, 8703, '\p{Is_Block=	arrows}', "");
Expect(0, 8703, '\p{^Is_Block=	arrows}', "");
Expect(0, 8703, '\P{Is_Block=	arrows}', "");
Expect(1, 8703, '\P{^Is_Block=	arrows}', "");
Expect(0, 8591, '\p{Is_Block=	arrows}', "");
Expect(1, 8591, '\p{^Is_Block=	arrows}', "");
Expect(1, 8591, '\P{Is_Block=	arrows}', "");
Expect(0, 8591, '\P{^Is_Block=	arrows}', "");
Error('\p{Is_Blk= /a/Arrows}');
Error('\P{Is_Blk= /a/Arrows}');
Expect(1, 8703, '\p{Is_Blk=arrows}', "");
Expect(0, 8703, '\p{^Is_Blk=arrows}', "");
Expect(0, 8703, '\P{Is_Blk=arrows}', "");
Expect(1, 8703, '\P{^Is_Blk=arrows}', "");
Expect(0, 8591, '\p{Is_Blk=arrows}', "");
Expect(1, 8591, '\p{^Is_Blk=arrows}', "");
Expect(1, 8591, '\P{Is_Blk=arrows}', "");
Expect(0, 8591, '\P{^Is_Blk=arrows}', "");
Expect(1, 8703, '\p{Is_Blk= ARROWS}', "");
Expect(0, 8703, '\p{^Is_Blk= ARROWS}', "");
Expect(0, 8703, '\P{Is_Blk= ARROWS}', "");
Expect(1, 8703, '\P{^Is_Blk= ARROWS}', "");
Expect(0, 8591, '\p{Is_Blk= ARROWS}', "");
Expect(1, 8591, '\p{^Is_Blk= ARROWS}', "");
Expect(1, 8591, '\P{Is_Blk= ARROWS}', "");
Expect(0, 8591, '\P{^Is_Blk= ARROWS}', "");
Error('\p{Block=_:=BLOCK Elements}');
Error('\P{Block=_:=BLOCK Elements}');
Expect(1, 9631, '\p{Block=blockelements}', "");
Expect(0, 9631, '\p{^Block=blockelements}', "");
Expect(0, 9631, '\P{Block=blockelements}', "");
Expect(1, 9631, '\P{^Block=blockelements}', "");
Expect(0, 9599, '\p{Block=blockelements}', "");
Expect(1, 9599, '\p{^Block=blockelements}', "");
Expect(1, 9599, '\P{Block=blockelements}', "");
Expect(0, 9599, '\P{^Block=blockelements}', "");
Expect(1, 9631, '\p{Block=		BlockElements}', "");
Expect(0, 9631, '\p{^Block=		BlockElements}', "");
Expect(0, 9631, '\P{Block=		BlockElements}', "");
Expect(1, 9631, '\P{^Block=		BlockElements}', "");
Expect(0, 9599, '\p{Block=		BlockElements}', "");
Expect(1, 9599, '\p{^Block=		BlockElements}', "");
Expect(1, 9599, '\P{Block=		BlockElements}', "");
Expect(0, 9599, '\P{^Block=		BlockElements}', "");
Error('\p{Blk=__block/a/elements}');
Error('\P{Blk=__block/a/elements}');
Expect(1, 9631, '\p{Blk=blockelements}', "");
Expect(0, 9631, '\p{^Blk=blockelements}', "");
Expect(0, 9631, '\P{Blk=blockelements}', "");
Expect(1, 9631, '\P{^Blk=blockelements}', "");
Expect(0, 9599, '\p{Blk=blockelements}', "");
Expect(1, 9599, '\p{^Blk=blockelements}', "");
Expect(1, 9599, '\P{Blk=blockelements}', "");
Expect(0, 9599, '\P{^Blk=blockelements}', "");
Expect(1, 9631, '\p{Blk=--Block-Elements}', "");
Expect(0, 9631, '\p{^Blk=--Block-Elements}', "");
Expect(0, 9631, '\P{Blk=--Block-Elements}', "");
Expect(1, 9631, '\P{^Blk=--Block-Elements}', "");
Expect(0, 9599, '\p{Blk=--Block-Elements}', "");
Expect(1, 9599, '\p{^Blk=--Block-Elements}', "");
Expect(1, 9599, '\P{Blk=--Block-Elements}', "");
Expect(0, 9599, '\P{^Blk=--Block-Elements}', "");
Error('\p{Is_Block=_/a/block elements}');
Error('\P{Is_Block=_/a/block elements}');
Expect(1, 9631, '\p{Is_Block:	blockelements}', "");
Expect(0, 9631, '\p{^Is_Block:	blockelements}', "");
Expect(0, 9631, '\P{Is_Block:	blockelements}', "");
Expect(1, 9631, '\P{^Is_Block:	blockelements}', "");
Expect(0, 9599, '\p{Is_Block:	blockelements}', "");
Expect(1, 9599, '\p{^Is_Block:	blockelements}', "");
Expect(1, 9599, '\P{Is_Block:	blockelements}', "");
Expect(0, 9599, '\P{^Is_Block:	blockelements}', "");
Expect(1, 9631, '\p{Is_Block=	 Block Elements}', "");
Expect(0, 9631, '\p{^Is_Block=	 Block Elements}', "");
Expect(0, 9631, '\P{Is_Block=	 Block Elements}', "");
Expect(1, 9631, '\P{^Is_Block=	 Block Elements}', "");
Expect(0, 9599, '\p{Is_Block=	 Block Elements}', "");
Expect(1, 9599, '\p{^Is_Block=	 Block Elements}', "");
Expect(1, 9599, '\P{Is_Block=	 Block Elements}', "");
Expect(0, 9599, '\P{^Is_Block=	 Block Elements}', "");
Error('\p{Is_Blk= :=Block-elements}');
Error('\P{Is_Blk= :=Block-elements}');
Expect(1, 9631, '\p{Is_Blk=blockelements}', "");
Expect(0, 9631, '\p{^Is_Blk=blockelements}', "");
Expect(0, 9631, '\P{Is_Blk=blockelements}', "");
Expect(1, 9631, '\P{^Is_Blk=blockelements}', "");
Expect(0, 9599, '\p{Is_Blk=blockelements}', "");
Expect(1, 9599, '\p{^Is_Blk=blockelements}', "");
Expect(1, 9599, '\P{Is_Blk=blockelements}', "");
Expect(0, 9599, '\P{^Is_Blk=blockelements}', "");
Expect(1, 9631, '\p{Is_Blk=_	BLOCKELEMENTS}', "");
Expect(0, 9631, '\p{^Is_Blk=_	BLOCKELEMENTS}', "");
Expect(0, 9631, '\P{Is_Blk=_	BLOCKELEMENTS}', "");
Expect(1, 9631, '\P{^Is_Blk=_	BLOCKELEMENTS}', "");
Expect(0, 9599, '\p{Is_Blk=_	BLOCKELEMENTS}', "");
Expect(1, 9599, '\p{^Is_Blk=_	BLOCKELEMENTS}', "");
Expect(1, 9599, '\P{Is_Blk=_	BLOCKELEMENTS}', "");
Expect(0, 9599, '\P{^Is_Blk=_	BLOCKELEMENTS}', "");
Error('\p{Block=:=	_cjk_strokes}');
Error('\P{Block=:=	_cjk_strokes}');
Expect(1, 12783, '\p{Block=cjkstrokes}', "");
Expect(0, 12783, '\p{^Block=cjkstrokes}', "");
Expect(0, 12783, '\P{Block=cjkstrokes}', "");
Expect(1, 12783, '\P{^Block=cjkstrokes}', "");
Expect(0, 12735, '\p{Block=cjkstrokes}', "");
Expect(1, 12735, '\p{^Block=cjkstrokes}', "");
Expect(1, 12735, '\P{Block=cjkstrokes}', "");
Expect(0, 12735, '\P{^Block=cjkstrokes}', "");
Expect(1, 12783, '\p{Block= 	CJK-Strokes}', "");
Expect(0, 12783, '\p{^Block= 	CJK-Strokes}', "");
Expect(0, 12783, '\P{Block= 	CJK-Strokes}', "");
Expect(1, 12783, '\P{^Block= 	CJK-Strokes}', "");
Expect(0, 12735, '\p{Block= 	CJK-Strokes}', "");
Expect(1, 12735, '\p{^Block= 	CJK-Strokes}', "");
Expect(1, 12735, '\P{Block= 	CJK-Strokes}', "");
Expect(0, 12735, '\P{^Block= 	CJK-Strokes}', "");
Error('\p{Blk=	CJKStrokes/a/}');
Error('\P{Blk=	CJKStrokes/a/}');
Expect(1, 12783, '\p{Blk=cjkstrokes}', "");
Expect(0, 12783, '\p{^Blk=cjkstrokes}', "");
Expect(0, 12783, '\P{Blk=cjkstrokes}', "");
Expect(1, 12783, '\P{^Blk=cjkstrokes}', "");
Expect(0, 12735, '\p{Blk=cjkstrokes}', "");
Expect(1, 12735, '\p{^Blk=cjkstrokes}', "");
Expect(1, 12735, '\P{Blk=cjkstrokes}', "");
Expect(0, 12735, '\P{^Blk=cjkstrokes}', "");
Expect(1, 12783, '\p{Blk=	 cjk	Strokes}', "");
Expect(0, 12783, '\p{^Blk=	 cjk	Strokes}', "");
Expect(0, 12783, '\P{Blk=	 cjk	Strokes}', "");
Expect(1, 12783, '\P{^Blk=	 cjk	Strokes}', "");
Expect(0, 12735, '\p{Blk=	 cjk	Strokes}', "");
Expect(1, 12735, '\p{^Blk=	 cjk	Strokes}', "");
Expect(1, 12735, '\P{Blk=	 cjk	Strokes}', "");
Expect(0, 12735, '\P{^Blk=	 cjk	Strokes}', "");
Error('\p{Is_Block=	 CJKStrokes:=}');
Error('\P{Is_Block=	 CJKStrokes:=}');
Expect(1, 12783, '\p{Is_Block=cjkstrokes}', "");
Expect(0, 12783, '\p{^Is_Block=cjkstrokes}', "");
Expect(0, 12783, '\P{Is_Block=cjkstrokes}', "");
Expect(1, 12783, '\P{^Is_Block=cjkstrokes}', "");
Expect(0, 12735, '\p{Is_Block=cjkstrokes}', "");
Expect(1, 12735, '\p{^Is_Block=cjkstrokes}', "");
Expect(1, 12735, '\P{Is_Block=cjkstrokes}', "");
Expect(0, 12735, '\P{^Is_Block=cjkstrokes}', "");
Expect(1, 12783, '\p{Is_Block= CJK_STROKES}', "");
Expect(0, 12783, '\p{^Is_Block= CJK_STROKES}', "");
Expect(0, 12783, '\P{Is_Block= CJK_STROKES}', "");
Expect(1, 12783, '\P{^Is_Block= CJK_STROKES}', "");
Expect(0, 12735, '\p{Is_Block= CJK_STROKES}', "");
Expect(1, 12735, '\p{^Is_Block= CJK_STROKES}', "");
Expect(1, 12735, '\P{Is_Block= CJK_STROKES}', "");
Expect(0, 12735, '\P{^Is_Block= CJK_STROKES}', "");
Error('\p{Is_Blk= _cjk/a/STROKES}');
Error('\P{Is_Blk= _cjk/a/STROKES}');
Expect(1, 12783, '\p{Is_Blk=cjkstrokes}', "");
Expect(0, 12783, '\p{^Is_Blk=cjkstrokes}', "");
Expect(0, 12783, '\P{Is_Blk=cjkstrokes}', "");
Expect(1, 12783, '\P{^Is_Blk=cjkstrokes}', "");
Expect(0, 12735, '\p{Is_Blk=cjkstrokes}', "");
Expect(1, 12735, '\p{^Is_Blk=cjkstrokes}', "");
Expect(1, 12735, '\P{Is_Blk=cjkstrokes}', "");
Expect(0, 12735, '\P{^Is_Blk=cjkstrokes}', "");
Expect(1, 12783, '\p{Is_Blk= -cjkstrokes}', "");
Expect(0, 12783, '\p{^Is_Blk= -cjkstrokes}', "");
Expect(0, 12783, '\P{Is_Blk= -cjkstrokes}', "");
Expect(1, 12783, '\P{^Is_Blk= -cjkstrokes}', "");
Expect(0, 12735, '\p{Is_Blk= -cjkstrokes}', "");
Expect(1, 12735, '\p{^Is_Blk= -cjkstrokes}', "");
Expect(1, 12735, '\P{Is_Blk= -cjkstrokes}', "");
Expect(0, 12735, '\P{^Is_Blk= -cjkstrokes}', "");
Error('\p{Block=/a/ no-block}');
Error('\P{Block=/a/ no-block}');
Expect(1, 2303, '\p{Block=noblock}', "");
Expect(0, 2303, '\p{^Block=noblock}', "");
Expect(0, 2303, '\P{Block=noblock}', "");
Expect(1, 2303, '\P{^Block=noblock}', "");
Expect(0, 2111, '\p{Block=noblock}', "");
Expect(1, 2111, '\p{^Block=noblock}', "");
Expect(1, 2111, '\P{Block=noblock}', "");
Expect(0, 2111, '\P{^Block=noblock}', "");
Expect(1, 2303, '\p{Block=_ NO_BLOCK}', "");
Expect(0, 2303, '\p{^Block=_ NO_BLOCK}', "");
Expect(0, 2303, '\P{Block=_ NO_BLOCK}', "");
Expect(1, 2303, '\P{^Block=_ NO_BLOCK}', "");
Expect(0, 2111, '\p{Block=_ NO_BLOCK}', "");
Expect(1, 2111, '\p{^Block=_ NO_BLOCK}', "");
Expect(1, 2111, '\P{Block=_ NO_BLOCK}', "");
Expect(0, 2111, '\P{^Block=_ NO_BLOCK}', "");
Error('\p{Blk::=	 no block}');
Error('\P{Blk::=	 no block}');
Expect(1, 2303, '\p{Blk=noblock}', "");
Expect(0, 2303, '\p{^Blk=noblock}', "");
Expect(0, 2303, '\P{Blk=noblock}', "");
Expect(1, 2303, '\P{^Blk=noblock}', "");
Expect(0, 2111, '\p{Blk=noblock}', "");
Expect(1, 2111, '\p{^Blk=noblock}', "");
Expect(1, 2111, '\P{Blk=noblock}', "");
Expect(0, 2111, '\P{^Blk=noblock}', "");
Expect(1, 2303, '\p{Blk=	_No_block}', "");
Expect(0, 2303, '\p{^Blk=	_No_block}', "");
Expect(0, 2303, '\P{Blk=	_No_block}', "");
Expect(1, 2303, '\P{^Blk=	_No_block}', "");
Expect(0, 2111, '\p{Blk=	_No_block}', "");
Expect(1, 2111, '\p{^Blk=	_No_block}', "");
Expect(1, 2111, '\P{Blk=	_No_block}', "");
Expect(0, 2111, '\P{^Blk=	_No_block}', "");
Error('\p{Is_Block: /a/no BLOCK}');
Error('\P{Is_Block: /a/no BLOCK}');
Expect(1, 2303, '\p{Is_Block=noblock}', "");
Expect(0, 2303, '\p{^Is_Block=noblock}', "");
Expect(0, 2303, '\P{Is_Block=noblock}', "");
Expect(1, 2303, '\P{^Is_Block=noblock}', "");
Expect(0, 2111, '\p{Is_Block=noblock}', "");
Expect(1, 2111, '\p{^Is_Block=noblock}', "");
Expect(1, 2111, '\P{Is_Block=noblock}', "");
Expect(0, 2111, '\P{^Is_Block=noblock}', "");
Expect(1, 2303, '\p{Is_Block=_No-Block}', "");
Expect(0, 2303, '\p{^Is_Block=_No-Block}', "");
Expect(0, 2303, '\P{Is_Block=_No-Block}', "");
Expect(1, 2303, '\P{^Is_Block=_No-Block}', "");
Expect(0, 2111, '\p{Is_Block=_No-Block}', "");
Expect(1, 2111, '\p{^Is_Block=_No-Block}', "");
Expect(1, 2111, '\P{Is_Block=_No-Block}', "");
Expect(0, 2111, '\P{^Is_Block=_No-Block}', "");
Error('\p{Is_Blk=	:=NOBlock}');
Error('\P{Is_Blk=	:=NOBlock}');
Expect(1, 2303, '\p{Is_Blk=noblock}', "");
Expect(0, 2303, '\p{^Is_Blk=noblock}', "");
Expect(0, 2303, '\P{Is_Blk=noblock}', "");
Expect(1, 2303, '\P{^Is_Blk=noblock}', "");
Expect(0, 2111, '\p{Is_Blk=noblock}', "");
Expect(1, 2111, '\p{^Is_Blk=noblock}', "");
Expect(1, 2111, '\P{Is_Blk=noblock}', "");
Expect(0, 2111, '\P{^Is_Blk=noblock}', "");
Expect(1, 2303, '\p{Is_Blk= _NO	BLOCK}', "");
Expect(0, 2303, '\p{^Is_Blk= _NO	BLOCK}', "");
Expect(0, 2303, '\P{Is_Blk= _NO	BLOCK}', "");
Expect(1, 2303, '\P{^Is_Blk= _NO	BLOCK}', "");
Expect(0, 2111, '\p{Is_Blk= _NO	BLOCK}', "");
Expect(1, 2111, '\p{^Is_Blk= _NO	BLOCK}', "");
Expect(1, 2111, '\P{Is_Blk= _NO	BLOCK}', "");
Expect(0, 2111, '\P{^Is_Blk= _NO	BLOCK}', "");
Error('\p{Block:   /a/ CJK COMPATIBILITY}');
Error('\P{Block:   /a/ CJK COMPATIBILITY}');
Expect(1, 13311, '\p{Block:   cjkcompatibility}', "");
Expect(0, 13311, '\p{^Block:   cjkcompatibility}', "");
Expect(0, 13311, '\P{Block:   cjkcompatibility}', "");
Expect(1, 13311, '\P{^Block:   cjkcompatibility}', "");
Expect(0, 13055, '\p{Block:   cjkcompatibility}', "");
Expect(1, 13055, '\p{^Block:   cjkcompatibility}', "");
Expect(1, 13055, '\P{Block:   cjkcompatibility}', "");
Expect(0, 13055, '\P{^Block:   cjkcompatibility}', "");
Expect(1, 13311, '\p{Block=_cjkCompatibility}', "");
Expect(0, 13311, '\p{^Block=_cjkCompatibility}', "");
Expect(0, 13311, '\P{Block=_cjkCompatibility}', "");
Expect(1, 13311, '\P{^Block=_cjkCompatibility}', "");
Expect(0, 13055, '\p{Block=_cjkCompatibility}', "");
Expect(1, 13055, '\p{^Block=_cjkCompatibility}', "");
Expect(1, 13055, '\P{Block=_cjkCompatibility}', "");
Expect(0, 13055, '\P{^Block=_cjkCompatibility}', "");
Error('\p{Blk:__CJK:=Compatibility}');
Error('\P{Blk:__CJK:=Compatibility}');
Expect(1, 13311, '\p{Blk=cjkcompatibility}', "");
Expect(0, 13311, '\p{^Blk=cjkcompatibility}', "");
Expect(0, 13311, '\P{Blk=cjkcompatibility}', "");
Expect(1, 13311, '\P{^Blk=cjkcompatibility}', "");
Expect(0, 13055, '\p{Blk=cjkcompatibility}', "");
Expect(1, 13055, '\p{^Blk=cjkcompatibility}', "");
Expect(1, 13055, '\P{Blk=cjkcompatibility}', "");
Expect(0, 13055, '\P{^Blk=cjkcompatibility}', "");
Expect(1, 13311, '\p{Blk= 	CJK COMPATIBILITY}', "");
Expect(0, 13311, '\p{^Blk= 	CJK COMPATIBILITY}', "");
Expect(0, 13311, '\P{Blk= 	CJK COMPATIBILITY}', "");
Expect(1, 13311, '\P{^Blk= 	CJK COMPATIBILITY}', "");
Expect(0, 13055, '\p{Blk= 	CJK COMPATIBILITY}', "");
Expect(1, 13055, '\p{^Blk= 	CJK COMPATIBILITY}', "");
Expect(1, 13055, '\P{Blk= 	CJK COMPATIBILITY}', "");
Expect(0, 13055, '\P{^Blk= 	CJK COMPATIBILITY}', "");
Error('\p{Is_Block=-/a/CJK	Compatibility}');
Error('\P{Is_Block=-/a/CJK	Compatibility}');
Expect(1, 13311, '\p{Is_Block=cjkcompatibility}', "");
Expect(0, 13311, '\p{^Is_Block=cjkcompatibility}', "");
Expect(0, 13311, '\P{Is_Block=cjkcompatibility}', "");
Expect(1, 13311, '\P{^Is_Block=cjkcompatibility}', "");
Expect(0, 13055, '\p{Is_Block=cjkcompatibility}', "");
Expect(1, 13055, '\p{^Is_Block=cjkcompatibility}', "");
Expect(1, 13055, '\P{Is_Block=cjkcompatibility}', "");
Expect(0, 13055, '\P{^Is_Block=cjkcompatibility}', "");
Expect(1, 13311, '\p{Is_Block= CJK-COMPATIBILITY}', "");
Expect(0, 13311, '\p{^Is_Block= CJK-COMPATIBILITY}', "");
Expect(0, 13311, '\P{Is_Block= CJK-COMPATIBILITY}', "");
Expect(1, 13311, '\P{^Is_Block= CJK-COMPATIBILITY}', "");
Expect(0, 13055, '\p{Is_Block= CJK-COMPATIBILITY}', "");
Expect(1, 13055, '\p{^Is_Block= CJK-COMPATIBILITY}', "");
Expect(1, 13055, '\P{Is_Block= CJK-COMPATIBILITY}', "");
Expect(0, 13055, '\P{^Is_Block= CJK-COMPATIBILITY}', "");
Error('\p{Is_Blk:	_-cjkCompatibility:=}');
Error('\P{Is_Blk:	_-cjkCompatibility:=}');
Expect(1, 13311, '\p{Is_Blk=cjkcompatibility}', "");
Expect(0, 13311, '\p{^Is_Blk=cjkcompatibility}', "");
Expect(0, 13311, '\P{Is_Blk=cjkcompatibility}', "");
Expect(1, 13311, '\P{^Is_Blk=cjkcompatibility}', "");
Expect(0, 13055, '\p{Is_Blk=cjkcompatibility}', "");
Expect(1, 13055, '\p{^Is_Blk=cjkcompatibility}', "");
Expect(1, 13055, '\P{Is_Blk=cjkcompatibility}', "");
Expect(0, 13055, '\P{^Is_Blk=cjkcompatibility}', "");
Expect(1, 13311, '\p{Is_Blk=--CJKCompatibility}', "");
Expect(0, 13311, '\p{^Is_Blk=--CJKCompatibility}', "");
Expect(0, 13311, '\P{Is_Blk=--CJKCompatibility}', "");
Expect(1, 13311, '\P{^Is_Blk=--CJKCompatibility}', "");
Expect(0, 13055, '\p{Is_Blk=--CJKCompatibility}', "");
Expect(1, 13055, '\p{^Is_Blk=--CJKCompatibility}', "");
Expect(1, 13055, '\P{Is_Blk=--CJKCompatibility}', "");
Expect(0, 13055, '\P{^Is_Blk=--CJKCompatibility}', "");
Error('\p{Block=-_vedic	EXTENSIONS/a/}');
Error('\P{Block=-_vedic	EXTENSIONS/a/}');
Expect(1, 7423, '\p{Block=vedicextensions}', "");
Expect(0, 7423, '\p{^Block=vedicextensions}', "");
Expect(0, 7423, '\P{Block=vedicextensions}', "");
Expect(1, 7423, '\P{^Block=vedicextensions}', "");
Expect(0, 7375, '\p{Block=vedicextensions}', "");
Expect(1, 7375, '\p{^Block=vedicextensions}', "");
Expect(1, 7375, '\P{Block=vedicextensions}', "");
Expect(0, 7375, '\P{^Block=vedicextensions}', "");
Expect(1, 7423, '\p{Block:		_Vedic_Extensions}', "");
Expect(0, 7423, '\p{^Block:		_Vedic_Extensions}', "");
Expect(0, 7423, '\P{Block:		_Vedic_Extensions}', "");
Expect(1, 7423, '\P{^Block:		_Vedic_Extensions}', "");
Expect(0, 7375, '\p{Block:		_Vedic_Extensions}', "");
Expect(1, 7375, '\p{^Block:		_Vedic_Extensions}', "");
Expect(1, 7375, '\P{Block:		_Vedic_Extensions}', "");
Expect(0, 7375, '\P{^Block:		_Vedic_Extensions}', "");
Error('\p{Blk=/a/	-Vedic_EXTENSIONS}');
Error('\P{Blk=/a/	-Vedic_EXTENSIONS}');
Expect(1, 7423, '\p{Blk=vedicextensions}', "");
Expect(0, 7423, '\p{^Blk=vedicextensions}', "");
Expect(0, 7423, '\P{Blk=vedicextensions}', "");
Expect(1, 7423, '\P{^Blk=vedicextensions}', "");
Expect(0, 7375, '\p{Blk=vedicextensions}', "");
Expect(1, 7375, '\p{^Blk=vedicextensions}', "");
Expect(1, 7375, '\P{Blk=vedicextensions}', "");
Expect(0, 7375, '\P{^Blk=vedicextensions}', "");
Expect(1, 7423, '\p{Blk: Vedic_extensions}', "");
Expect(0, 7423, '\p{^Blk: Vedic_extensions}', "");
Expect(0, 7423, '\P{Blk: Vedic_extensions}', "");
Expect(1, 7423, '\P{^Blk: Vedic_extensions}', "");
Expect(0, 7375, '\p{Blk: Vedic_extensions}', "");
Expect(1, 7375, '\p{^Blk: Vedic_extensions}', "");
Expect(1, 7375, '\P{Blk: Vedic_extensions}', "");
Expect(0, 7375, '\P{^Blk: Vedic_extensions}', "");
Error('\p{Is_Block=:=- Vedic-EXTENSIONS}');
Error('\P{Is_Block=:=- Vedic-EXTENSIONS}');
Expect(1, 7423, '\p{Is_Block=vedicextensions}', "");
Expect(0, 7423, '\p{^Is_Block=vedicextensions}', "");
Expect(0, 7423, '\P{Is_Block=vedicextensions}', "");
Expect(1, 7423, '\P{^Is_Block=vedicextensions}', "");
Expect(0, 7375, '\p{Is_Block=vedicextensions}', "");
Expect(1, 7375, '\p{^Is_Block=vedicextensions}', "");
Expect(1, 7375, '\P{Is_Block=vedicextensions}', "");
Expect(0, 7375, '\P{^Is_Block=vedicextensions}', "");
Expect(1, 7423, '\p{Is_Block:   __Vedic-Extensions}', "");
Expect(0, 7423, '\p{^Is_Block:   __Vedic-Extensions}', "");
Expect(0, 7423, '\P{Is_Block:   __Vedic-Extensions}', "");
Expect(1, 7423, '\P{^Is_Block:   __Vedic-Extensions}', "");
Expect(0, 7375, '\p{Is_Block:   __Vedic-Extensions}', "");
Expect(1, 7375, '\p{^Is_Block:   __Vedic-Extensions}', "");
Expect(1, 7375, '\P{Is_Block:   __Vedic-Extensions}', "");
Expect(0, 7375, '\P{^Is_Block:   __Vedic-Extensions}', "");
Error('\p{Is_Blk=		vedic	EXTENSIONS:=}');
Error('\P{Is_Blk=		vedic	EXTENSIONS:=}');
Expect(1, 7423, '\p{Is_Blk=vedicextensions}', "");
Expect(0, 7423, '\p{^Is_Blk=vedicextensions}', "");
Expect(0, 7423, '\P{Is_Blk=vedicextensions}', "");
Expect(1, 7423, '\P{^Is_Blk=vedicextensions}', "");
Expect(0, 7375, '\p{Is_Blk=vedicextensions}', "");
Expect(1, 7375, '\p{^Is_Blk=vedicextensions}', "");
Expect(1, 7375, '\P{Is_Blk=vedicextensions}', "");
Expect(0, 7375, '\P{^Is_Blk=vedicextensions}', "");
Expect(1, 7423, '\p{Is_Blk:   -vedic_Extensions}', "");
Expect(0, 7423, '\p{^Is_Blk:   -vedic_Extensions}', "");
Expect(0, 7423, '\P{Is_Blk:   -vedic_Extensions}', "");
Expect(1, 7423, '\P{^Is_Blk:   -vedic_Extensions}', "");
Expect(0, 7375, '\p{Is_Blk:   -vedic_Extensions}', "");
Expect(1, 7375, '\p{^Is_Blk:   -vedic_Extensions}', "");
Expect(1, 7375, '\P{Is_Blk:   -vedic_Extensions}', "");
Expect(0, 7375, '\P{^Is_Blk:   -vedic_Extensions}', "");
Error('\p{Block=_-Taiviet:=}');
Error('\P{Block=_-Taiviet:=}');
Expect(1, 43743, '\p{Block=taiviet}', "");
Expect(0, 43743, '\p{^Block=taiviet}', "");
Expect(0, 43743, '\P{Block=taiviet}', "");
Expect(1, 43743, '\P{^Block=taiviet}', "");
Expect(0, 43647, '\p{Block=taiviet}', "");
Expect(1, 43647, '\p{^Block=taiviet}', "");
Expect(1, 43647, '\P{Block=taiviet}', "");
Expect(0, 43647, '\P{^Block=taiviet}', "");
Expect(1, 43743, '\p{Block=-_TAI-viet}', "");
Expect(0, 43743, '\p{^Block=-_TAI-viet}', "");
Expect(0, 43743, '\P{Block=-_TAI-viet}', "");
Expect(1, 43743, '\P{^Block=-_TAI-viet}', "");
Expect(0, 43647, '\p{Block=-_TAI-viet}', "");
Expect(1, 43647, '\p{^Block=-_TAI-viet}', "");
Expect(1, 43647, '\P{Block=-_TAI-viet}', "");
Expect(0, 43647, '\P{^Block=-_TAI-viet}', "");
Error('\p{Blk=tai	VIET:=}');
Error('\P{Blk=tai	VIET:=}');
Expect(1, 43743, '\p{Blk=taiviet}', "");
Expect(0, 43743, '\p{^Blk=taiviet}', "");
Expect(0, 43743, '\P{Blk=taiviet}', "");
Expect(1, 43743, '\P{^Blk=taiviet}', "");
Expect(0, 43647, '\p{Blk=taiviet}', "");
Expect(1, 43647, '\p{^Blk=taiviet}', "");
Expect(1, 43647, '\P{Blk=taiviet}', "");
Expect(0, 43647, '\P{^Blk=taiviet}', "");
Expect(1, 43743, '\p{Blk=- tai viet}', "");
Expect(0, 43743, '\p{^Blk=- tai viet}', "");
Expect(0, 43743, '\P{Blk=- tai viet}', "");
Expect(1, 43743, '\P{^Blk=- tai viet}', "");
Expect(0, 43647, '\p{Blk=- tai viet}', "");
Expect(1, 43647, '\p{^Blk=- tai viet}', "");
Expect(1, 43647, '\P{Blk=- tai viet}', "");
Expect(0, 43647, '\P{^Blk=- tai viet}', "");
Error('\p{Is_Block=:=_Tai_Viet}');
Error('\P{Is_Block=:=_Tai_Viet}');
Expect(1, 43743, '\p{Is_Block=taiviet}', "");
Expect(0, 43743, '\p{^Is_Block=taiviet}', "");
Expect(0, 43743, '\P{Is_Block=taiviet}', "");
Expect(1, 43743, '\P{^Is_Block=taiviet}', "");
Expect(0, 43647, '\p{Is_Block=taiviet}', "");
Expect(1, 43647, '\p{^Is_Block=taiviet}', "");
Expect(1, 43647, '\P{Is_Block=taiviet}', "");
Expect(0, 43647, '\P{^Is_Block=taiviet}', "");
Expect(1, 43743, '\p{Is_Block=_	taiVIET}', "");
Expect(0, 43743, '\p{^Is_Block=_	taiVIET}', "");
Expect(0, 43743, '\P{Is_Block=_	taiVIET}', "");
Expect(1, 43743, '\P{^Is_Block=_	taiVIET}', "");
Expect(0, 43647, '\p{Is_Block=_	taiVIET}', "");
Expect(1, 43647, '\p{^Is_Block=_	taiVIET}', "");
Expect(1, 43647, '\P{Is_Block=_	taiVIET}', "");
Expect(0, 43647, '\P{^Is_Block=_	taiVIET}', "");
Error('\p{Is_Blk=/a/-	tai-Viet}');
Error('\P{Is_Blk=/a/-	tai-Viet}');
Expect(1, 43743, '\p{Is_Blk=taiviet}', "");
Expect(0, 43743, '\p{^Is_Blk=taiviet}', "");
Expect(0, 43743, '\P{Is_Blk=taiviet}', "");
Expect(1, 43743, '\P{^Is_Blk=taiviet}', "");
Expect(0, 43647, '\p{Is_Blk=taiviet}', "");
Expect(1, 43647, '\p{^Is_Blk=taiviet}', "");
Expect(1, 43647, '\P{Is_Blk=taiviet}', "");
Expect(0, 43647, '\P{^Is_Blk=taiviet}', "");
Expect(1, 43743, '\p{Is_Blk=_-Tai-Viet}', "");
Expect(0, 43743, '\p{^Is_Blk=_-Tai-Viet}', "");
Expect(0, 43743, '\P{Is_Blk=_-Tai-Viet}', "");
Expect(1, 43743, '\P{^Is_Blk=_-Tai-Viet}', "");
Expect(0, 43647, '\p{Is_Blk=_-Tai-Viet}', "");
Expect(1, 43647, '\p{^Is_Blk=_-Tai-Viet}', "");
Expect(1, 43647, '\P{Is_Blk=_-Tai-Viet}', "");
Expect(0, 43647, '\P{^Is_Blk=_-Tai-Viet}', "");
Error('\p{Block=- Cyrillic	Extended:=B}');
Error('\P{Block=- Cyrillic	Extended:=B}');
Expect(1, 42655, '\p{Block: cyrillicextendedb}', "");
Expect(0, 42655, '\p{^Block: cyrillicextendedb}', "");
Expect(0, 42655, '\P{Block: cyrillicextendedb}', "");
Expect(1, 42655, '\P{^Block: cyrillicextendedb}', "");
Expect(0, 42559, '\p{Block: cyrillicextendedb}', "");
Expect(1, 42559, '\p{^Block: cyrillicextendedb}', "");
Expect(1, 42559, '\P{Block: cyrillicextendedb}', "");
Expect(0, 42559, '\P{^Block: cyrillicextendedb}', "");
Expect(1, 42655, '\p{Block=	-cyrillicextended B}', "");
Expect(0, 42655, '\p{^Block=	-cyrillicextended B}', "");
Expect(0, 42655, '\P{Block=	-cyrillicextended B}', "");
Expect(1, 42655, '\P{^Block=	-cyrillicextended B}', "");
Expect(0, 42559, '\p{Block=	-cyrillicextended B}', "");
Expect(1, 42559, '\p{^Block=	-cyrillicextended B}', "");
Expect(1, 42559, '\P{Block=	-cyrillicextended B}', "");
Expect(0, 42559, '\P{^Block=	-cyrillicextended B}', "");
Error('\p{Blk= _Cyrillic:=Extended	b}');
Error('\P{Blk= _Cyrillic:=Extended	b}');
Expect(1, 42655, '\p{Blk=cyrillicextendedb}', "");
Expect(0, 42655, '\p{^Blk=cyrillicextendedb}', "");
Expect(0, 42655, '\P{Blk=cyrillicextendedb}', "");
Expect(1, 42655, '\P{^Blk=cyrillicextendedb}', "");
Expect(0, 42559, '\p{Blk=cyrillicextendedb}', "");
Expect(1, 42559, '\p{^Blk=cyrillicextendedb}', "");
Expect(1, 42559, '\P{Blk=cyrillicextendedb}', "");
Expect(0, 42559, '\P{^Blk=cyrillicextendedb}', "");
Expect(1, 42655, '\p{Blk=		cyrillicEXTENDED_b}', "");
Expect(0, 42655, '\p{^Blk=		cyrillicEXTENDED_b}', "");
Expect(0, 42655, '\P{Blk=		cyrillicEXTENDED_b}', "");
Expect(1, 42655, '\P{^Blk=		cyrillicEXTENDED_b}', "");
Expect(0, 42559, '\p{Blk=		cyrillicEXTENDED_b}', "");
Expect(1, 42559, '\p{^Blk=		cyrillicEXTENDED_b}', "");
Expect(1, 42559, '\P{Blk=		cyrillicEXTENDED_b}', "");
Expect(0, 42559, '\P{^Blk=		cyrillicEXTENDED_b}', "");
Error('\p{Is_Block=_-cyrillic:=Extended_b}');
Error('\P{Is_Block=_-cyrillic:=Extended_b}');
Expect(1, 42655, '\p{Is_Block=cyrillicextendedb}', "");
Expect(0, 42655, '\p{^Is_Block=cyrillicextendedb}', "");
Expect(0, 42655, '\P{Is_Block=cyrillicextendedb}', "");
Expect(1, 42655, '\P{^Is_Block=cyrillicextendedb}', "");
Expect(0, 42559, '\p{Is_Block=cyrillicextendedb}', "");
Expect(1, 42559, '\p{^Is_Block=cyrillicextendedb}', "");
Expect(1, 42559, '\P{Is_Block=cyrillicextendedb}', "");
Expect(0, 42559, '\P{^Is_Block=cyrillicextendedb}', "");
Expect(1, 42655, '\p{Is_Block=_	Cyrillic_EXTENDED	B}', "");
Expect(0, 42655, '\p{^Is_Block=_	Cyrillic_EXTENDED	B}', "");
Expect(0, 42655, '\P{Is_Block=_	Cyrillic_EXTENDED	B}', "");
Expect(1, 42655, '\P{^Is_Block=_	Cyrillic_EXTENDED	B}', "");
Expect(0, 42559, '\p{Is_Block=_	Cyrillic_EXTENDED	B}', "");
Expect(1, 42559, '\p{^Is_Block=_	Cyrillic_EXTENDED	B}', "");
Expect(1, 42559, '\P{Is_Block=_	Cyrillic_EXTENDED	B}', "");
Expect(0, 42559, '\P{^Is_Block=_	Cyrillic_EXTENDED	B}', "");
Error('\p{Is_Blk=	/a/Cyrillic-EXTENDED_b}');
Error('\P{Is_Blk=	/a/Cyrillic-EXTENDED_b}');
Expect(1, 42655, '\p{Is_Blk:cyrillicextendedb}', "");
Expect(0, 42655, '\p{^Is_Blk:cyrillicextendedb}', "");
Expect(0, 42655, '\P{Is_Blk:cyrillicextendedb}', "");
Expect(1, 42655, '\P{^Is_Blk:cyrillicextendedb}', "");
Expect(0, 42559, '\p{Is_Blk:cyrillicextendedb}', "");
Expect(1, 42559, '\p{^Is_Blk:cyrillicextendedb}', "");
Expect(1, 42559, '\P{Is_Blk:cyrillicextendedb}', "");
Expect(0, 42559, '\P{^Is_Blk:cyrillicextendedb}', "");
Expect(1, 42655, '\p{Is_Blk= -Cyrillic Extendedb}', "");
Expect(0, 42655, '\p{^Is_Blk= -Cyrillic Extendedb}', "");
Expect(0, 42655, '\P{Is_Blk= -Cyrillic Extendedb}', "");
Expect(1, 42655, '\P{^Is_Blk= -Cyrillic Extendedb}', "");
Expect(0, 42559, '\p{Is_Blk= -Cyrillic Extendedb}', "");
Expect(1, 42559, '\p{^Is_Blk= -Cyrillic Extendedb}', "");
Expect(1, 42559, '\P{Is_Blk= -Cyrillic Extendedb}', "");
Expect(0, 42559, '\P{^Is_Blk= -Cyrillic Extendedb}', "");
Error('\p{Block=:=	-Phonetic EXTENSIONS}');
Error('\P{Block=:=	-Phonetic EXTENSIONS}');
Expect(1, 7551, '\p{Block=phoneticextensions}', "");
Expect(0, 7551, '\p{^Block=phoneticextensions}', "");
Expect(0, 7551, '\P{Block=phoneticextensions}', "");
Expect(1, 7551, '\P{^Block=phoneticextensions}', "");
Expect(0, 7423, '\p{Block=phoneticextensions}', "");
Expect(1, 7423, '\p{^Block=phoneticextensions}', "");
Expect(1, 7423, '\P{Block=phoneticextensions}', "");
Expect(0, 7423, '\P{^Block=phoneticextensions}', "");
Expect(1, 7551, '\p{Block=		PHONETICExtensions}', "");
Expect(0, 7551, '\p{^Block=		PHONETICExtensions}', "");
Expect(0, 7551, '\P{Block=		PHONETICExtensions}', "");
Expect(1, 7551, '\P{^Block=		PHONETICExtensions}', "");
Expect(0, 7423, '\p{Block=		PHONETICExtensions}', "");
Expect(1, 7423, '\p{^Block=		PHONETICExtensions}', "");
Expect(1, 7423, '\P{Block=		PHONETICExtensions}', "");
Expect(0, 7423, '\P{^Block=		PHONETICExtensions}', "");
Error('\p{Blk=/a/Phonetic Extensions}');
Error('\P{Blk=/a/Phonetic Extensions}');
Expect(1, 7551, '\p{Blk=phoneticextensions}', "");
Expect(0, 7551, '\p{^Blk=phoneticextensions}', "");
Expect(0, 7551, '\P{Blk=phoneticextensions}', "");
Expect(1, 7551, '\P{^Blk=phoneticextensions}', "");
Expect(0, 7423, '\p{Blk=phoneticextensions}', "");
Expect(1, 7423, '\p{^Blk=phoneticextensions}', "");
Expect(1, 7423, '\P{Blk=phoneticextensions}', "");
Expect(0, 7423, '\P{^Blk=phoneticextensions}', "");
Expect(1, 7551, '\p{Blk= phoneticextensions}', "");
Expect(0, 7551, '\p{^Blk= phoneticextensions}', "");
Expect(0, 7551, '\P{Blk= phoneticextensions}', "");
Expect(1, 7551, '\P{^Blk= phoneticextensions}', "");
Expect(0, 7423, '\p{Blk= phoneticextensions}', "");
Expect(1, 7423, '\p{^Blk= phoneticextensions}', "");
Expect(1, 7423, '\P{Blk= phoneticextensions}', "");
Expect(0, 7423, '\P{^Blk= phoneticextensions}', "");
Error('\p{Is_Block=:=_PHONETIC-Extensions}');
Error('\P{Is_Block=:=_PHONETIC-Extensions}');
Expect(1, 7551, '\p{Is_Block=phoneticextensions}', "");
Expect(0, 7551, '\p{^Is_Block=phoneticextensions}', "");
Expect(0, 7551, '\P{Is_Block=phoneticextensions}', "");
Expect(1, 7551, '\P{^Is_Block=phoneticextensions}', "");
Expect(0, 7423, '\p{Is_Block=phoneticextensions}', "");
Expect(1, 7423, '\p{^Is_Block=phoneticextensions}', "");
Expect(1, 7423, '\P{Is_Block=phoneticextensions}', "");
Expect(0, 7423, '\P{^Is_Block=phoneticextensions}', "");
Expect(1, 7551, '\p{Is_Block=_	phonetic	EXTENSIONS}', "");
Expect(0, 7551, '\p{^Is_Block=_	phonetic	EXTENSIONS}', "");
Expect(0, 7551, '\P{Is_Block=_	phonetic	EXTENSIONS}', "");
Expect(1, 7551, '\P{^Is_Block=_	phonetic	EXTENSIONS}', "");
Expect(0, 7423, '\p{Is_Block=_	phonetic	EXTENSIONS}', "");
Expect(1, 7423, '\p{^Is_Block=_	phonetic	EXTENSIONS}', "");
Expect(1, 7423, '\P{Is_Block=_	phonetic	EXTENSIONS}', "");
Expect(0, 7423, '\P{^Is_Block=_	phonetic	EXTENSIONS}', "");
Error('\p{Is_Blk=Phonetic	Extensions:=}');
Error('\P{Is_Blk=Phonetic	Extensions:=}');
Expect(1, 7551, '\p{Is_Blk=phoneticextensions}', "");
Expect(0, 7551, '\p{^Is_Blk=phoneticextensions}', "");
Expect(0, 7551, '\P{Is_Blk=phoneticextensions}', "");
Expect(1, 7551, '\P{^Is_Blk=phoneticextensions}', "");
Expect(0, 7423, '\p{Is_Blk=phoneticextensions}', "");
Expect(1, 7423, '\p{^Is_Blk=phoneticextensions}', "");
Expect(1, 7423, '\P{Is_Blk=phoneticextensions}', "");
Expect(0, 7423, '\P{^Is_Blk=phoneticextensions}', "");
Expect(1, 7551, '\p{Is_Blk=__Phonetic_Extensions}', "");
Expect(0, 7551, '\p{^Is_Blk=__Phonetic_Extensions}', "");
Expect(0, 7551, '\P{Is_Blk=__Phonetic_Extensions}', "");
Expect(1, 7551, '\P{^Is_Blk=__Phonetic_Extensions}', "");
Expect(0, 7423, '\p{Is_Blk=__Phonetic_Extensions}', "");
Expect(1, 7423, '\p{^Is_Blk=__Phonetic_Extensions}', "");
Expect(1, 7423, '\P{Is_Blk=__Phonetic_Extensions}', "");
Expect(0, 7423, '\P{^Is_Blk=__Phonetic_Extensions}', "");
Error('\p{Block=--Tai Xuan:=Jing_Symbols}');
Error('\P{Block=--Tai Xuan:=Jing_Symbols}');
Expect(1, 119647, '\p{Block=taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^Block=taixuanjingsymbols}', "");
Expect(0, 119647, '\P{Block=taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^Block=taixuanjingsymbols}', "");
Expect(0, 119551, '\p{Block=taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^Block=taixuanjingsymbols}', "");
Expect(1, 119551, '\P{Block=taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^Block=taixuanjingsymbols}', "");
Expect(1, 119647, '\p{Block=_tai_XuanJing	SYMBOLS}', "");
Expect(0, 119647, '\p{^Block=_tai_XuanJing	SYMBOLS}', "");
Expect(0, 119647, '\P{Block=_tai_XuanJing	SYMBOLS}', "");
Expect(1, 119647, '\P{^Block=_tai_XuanJing	SYMBOLS}', "");
Expect(0, 119551, '\p{Block=_tai_XuanJing	SYMBOLS}', "");
Expect(1, 119551, '\p{^Block=_tai_XuanJing	SYMBOLS}', "");
Expect(1, 119551, '\P{Block=_tai_XuanJing	SYMBOLS}', "");
Expect(0, 119551, '\P{^Block=_tai_XuanJing	SYMBOLS}', "");
Error('\p{Blk=_Tai:=Xuan-jing SYMBOLS}');
Error('\P{Blk=_Tai:=Xuan-jing SYMBOLS}');
Expect(1, 119647, '\p{Blk=taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^Blk=taixuanjingsymbols}', "");
Expect(0, 119647, '\P{Blk=taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^Blk=taixuanjingsymbols}', "");
Expect(0, 119551, '\p{Blk=taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^Blk=taixuanjingsymbols}', "");
Expect(1, 119551, '\P{Blk=taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^Blk=taixuanjingsymbols}', "");
Expect(1, 119647, '\p{Blk=	Tai	xuanJING-Symbols}', "");
Expect(0, 119647, '\p{^Blk=	Tai	xuanJING-Symbols}', "");
Expect(0, 119647, '\P{Blk=	Tai	xuanJING-Symbols}', "");
Expect(1, 119647, '\P{^Blk=	Tai	xuanJING-Symbols}', "");
Expect(0, 119551, '\p{Blk=	Tai	xuanJING-Symbols}', "");
Expect(1, 119551, '\p{^Blk=	Tai	xuanJING-Symbols}', "");
Expect(1, 119551, '\P{Blk=	Tai	xuanJING-Symbols}', "");
Expect(0, 119551, '\P{^Blk=	Tai	xuanJING-Symbols}', "");
Error('\p{Is_Block=_:=Tai	XUAN	jing	SYMBOLS}');
Error('\P{Is_Block=_:=Tai	XUAN	jing	SYMBOLS}');
Expect(1, 119647, '\p{Is_Block=taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^Is_Block=taixuanjingsymbols}', "");
Expect(0, 119647, '\P{Is_Block=taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^Is_Block=taixuanjingsymbols}', "");
Expect(0, 119551, '\p{Is_Block=taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^Is_Block=taixuanjingsymbols}', "");
Expect(1, 119551, '\P{Is_Block=taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^Is_Block=taixuanjingsymbols}', "");
Expect(1, 119647, '\p{Is_Block=_	TAI_Xuan_JING	SYMBOLS}', "");
Expect(0, 119647, '\p{^Is_Block=_	TAI_Xuan_JING	SYMBOLS}', "");
Expect(0, 119647, '\P{Is_Block=_	TAI_Xuan_JING	SYMBOLS}', "");
Expect(1, 119647, '\P{^Is_Block=_	TAI_Xuan_JING	SYMBOLS}', "");
Expect(0, 119551, '\p{Is_Block=_	TAI_Xuan_JING	SYMBOLS}', "");
Expect(1, 119551, '\p{^Is_Block=_	TAI_Xuan_JING	SYMBOLS}', "");
Expect(1, 119551, '\P{Is_Block=_	TAI_Xuan_JING	SYMBOLS}', "");
Expect(0, 119551, '\P{^Is_Block=_	TAI_Xuan_JING	SYMBOLS}', "");
Error('\p{Is_Blk= /a/Tai Xuan-JING symbols}');
Error('\P{Is_Blk= /a/Tai Xuan-JING symbols}');
Expect(1, 119647, '\p{Is_Blk=taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^Is_Blk=taixuanjingsymbols}', "");
Expect(0, 119647, '\P{Is_Blk=taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^Is_Blk=taixuanjingsymbols}', "");
Expect(0, 119551, '\p{Is_Blk=taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^Is_Blk=taixuanjingsymbols}', "");
Expect(1, 119551, '\P{Is_Blk=taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^Is_Blk=taixuanjingsymbols}', "");
Expect(1, 119647, '\p{Is_Blk=_Tai XUAN_Jing-symbols}', "");
Expect(0, 119647, '\p{^Is_Blk=_Tai XUAN_Jing-symbols}', "");
Expect(0, 119647, '\P{Is_Blk=_Tai XUAN_Jing-symbols}', "");
Expect(1, 119647, '\P{^Is_Blk=_Tai XUAN_Jing-symbols}', "");
Expect(0, 119551, '\p{Is_Blk=_Tai XUAN_Jing-symbols}', "");
Expect(1, 119551, '\p{^Is_Blk=_Tai XUAN_Jing-symbols}', "");
Expect(1, 119551, '\P{Is_Blk=_Tai XUAN_Jing-symbols}', "");
Expect(0, 119551, '\P{^Is_Blk=_Tai XUAN_Jing-symbols}', "");
Error('\p{Block=:= -Malayalam}');
Error('\P{Block=:= -Malayalam}');
Expect(1, 3455, '\p{Block=malayalam}', "");
Expect(0, 3455, '\p{^Block=malayalam}', "");
Expect(0, 3455, '\P{Block=malayalam}', "");
Expect(1, 3455, '\P{^Block=malayalam}', "");
Expect(0, 3327, '\p{Block=malayalam}', "");
Expect(1, 3327, '\p{^Block=malayalam}', "");
Expect(1, 3327, '\P{Block=malayalam}', "");
Expect(0, 3327, '\P{^Block=malayalam}', "");
Expect(1, 3455, '\p{Block=	MALAYALAM}', "");
Expect(0, 3455, '\p{^Block=	MALAYALAM}', "");
Expect(0, 3455, '\P{Block=	MALAYALAM}', "");
Expect(1, 3455, '\P{^Block=	MALAYALAM}', "");
Expect(0, 3327, '\p{Block=	MALAYALAM}', "");
Expect(1, 3327, '\p{^Block=	MALAYALAM}', "");
Expect(1, 3327, '\P{Block=	MALAYALAM}', "");
Expect(0, 3327, '\P{^Block=	MALAYALAM}', "");
Error('\p{Blk=-_Malayalam/a/}');
Error('\P{Blk=-_Malayalam/a/}');
Expect(1, 3455, '\p{Blk=malayalam}', "");
Expect(0, 3455, '\p{^Blk=malayalam}', "");
Expect(0, 3455, '\P{Blk=malayalam}', "");
Expect(1, 3455, '\P{^Blk=malayalam}', "");
Expect(0, 3327, '\p{Blk=malayalam}', "");
Expect(1, 3327, '\p{^Blk=malayalam}', "");
Expect(1, 3327, '\P{Blk=malayalam}', "");
Expect(0, 3327, '\P{^Blk=malayalam}', "");
Expect(1, 3455, '\p{Blk=--MALAYALAM}', "");
Expect(0, 3455, '\p{^Blk=--MALAYALAM}', "");
Expect(0, 3455, '\P{Blk=--MALAYALAM}', "");
Expect(1, 3455, '\P{^Blk=--MALAYALAM}', "");
Expect(0, 3327, '\p{Blk=--MALAYALAM}', "");
Expect(1, 3327, '\p{^Blk=--MALAYALAM}', "");
Expect(1, 3327, '\P{Blk=--MALAYALAM}', "");
Expect(0, 3327, '\P{^Blk=--MALAYALAM}', "");
Error('\p{Is_Block=-Malayalam/a/}');
Error('\P{Is_Block=-Malayalam/a/}');
Expect(1, 3455, '\p{Is_Block=malayalam}', "");
Expect(0, 3455, '\p{^Is_Block=malayalam}', "");
Expect(0, 3455, '\P{Is_Block=malayalam}', "");
Expect(1, 3455, '\P{^Is_Block=malayalam}', "");
Expect(0, 3327, '\p{Is_Block=malayalam}', "");
Expect(1, 3327, '\p{^Is_Block=malayalam}', "");
Expect(1, 3327, '\P{Is_Block=malayalam}', "");
Expect(0, 3327, '\P{^Is_Block=malayalam}', "");
Expect(1, 3455, '\p{Is_Block:   	-Malayalam}', "");
Expect(0, 3455, '\p{^Is_Block:   	-Malayalam}', "");
Expect(0, 3455, '\P{Is_Block:   	-Malayalam}', "");
Expect(1, 3455, '\P{^Is_Block:   	-Malayalam}', "");
Expect(0, 3327, '\p{Is_Block:   	-Malayalam}', "");
Expect(1, 3327, '\p{^Is_Block:   	-Malayalam}', "");
Expect(1, 3327, '\P{Is_Block:   	-Malayalam}', "");
Expect(0, 3327, '\P{^Is_Block:   	-Malayalam}', "");
Error('\p{Is_Blk=Malayalam/a/}');
Error('\P{Is_Blk=Malayalam/a/}');
Expect(1, 3455, '\p{Is_Blk=malayalam}', "");
Expect(0, 3455, '\p{^Is_Blk=malayalam}', "");
Expect(0, 3455, '\P{Is_Blk=malayalam}', "");
Expect(1, 3455, '\P{^Is_Blk=malayalam}', "");
Expect(0, 3327, '\p{Is_Blk=malayalam}', "");
Expect(1, 3327, '\p{^Is_Blk=malayalam}', "");
Expect(1, 3327, '\P{Is_Blk=malayalam}', "");
Expect(0, 3327, '\P{^Is_Blk=malayalam}', "");
Expect(1, 3455, '\p{Is_Blk=  malayalam}', "");
Expect(0, 3455, '\p{^Is_Blk=  malayalam}', "");
Expect(0, 3455, '\P{Is_Blk=  malayalam}', "");
Expect(1, 3455, '\P{^Is_Blk=  malayalam}', "");
Expect(0, 3327, '\p{Is_Blk=  malayalam}', "");
Expect(1, 3327, '\p{^Is_Blk=  malayalam}', "");
Expect(1, 3327, '\P{Is_Blk=  malayalam}', "");
Expect(0, 3327, '\P{^Is_Blk=  malayalam}', "");
Error('\p{Block=_Lisu:=}');
Error('\P{Block=_Lisu:=}');
Expect(1, 42239, '\p{Block:   lisu}', "");
Expect(0, 42239, '\p{^Block:   lisu}', "");
Expect(0, 42239, '\P{Block:   lisu}', "");
Expect(1, 42239, '\P{^Block:   lisu}', "");
Expect(0, 42191, '\p{Block:   lisu}', "");
Expect(1, 42191, '\p{^Block:   lisu}', "");
Expect(1, 42191, '\P{Block:   lisu}', "");
Expect(0, 42191, '\P{^Block:   lisu}', "");
Expect(1, 42239, '\p{Block=-Lisu}', "");
Expect(0, 42239, '\p{^Block=-Lisu}', "");
Expect(0, 42239, '\P{Block=-Lisu}', "");
Expect(1, 42239, '\P{^Block=-Lisu}', "");
Expect(0, 42191, '\p{Block=-Lisu}', "");
Expect(1, 42191, '\p{^Block=-Lisu}', "");
Expect(1, 42191, '\P{Block=-Lisu}', "");
Expect(0, 42191, '\P{^Block=-Lisu}', "");
Error('\p{Blk=-	Lisu/a/}');
Error('\P{Blk=-	Lisu/a/}');
Expect(1, 42239, '\p{Blk=lisu}', "");
Expect(0, 42239, '\p{^Blk=lisu}', "");
Expect(0, 42239, '\P{Blk=lisu}', "");
Expect(1, 42239, '\P{^Blk=lisu}', "");
Expect(0, 42191, '\p{Blk=lisu}', "");
Expect(1, 42191, '\p{^Blk=lisu}', "");
Expect(1, 42191, '\P{Blk=lisu}', "");
Expect(0, 42191, '\P{^Blk=lisu}', "");
Expect(1, 42239, '\p{Blk= Lisu}', "");
Expect(0, 42239, '\p{^Blk= Lisu}', "");
Expect(0, 42239, '\P{Blk= Lisu}', "");
Expect(1, 42239, '\P{^Blk= Lisu}', "");
Expect(0, 42191, '\p{Blk= Lisu}', "");
Expect(1, 42191, '\p{^Blk= Lisu}', "");
Expect(1, 42191, '\P{Blk= Lisu}', "");
Expect(0, 42191, '\P{^Blk= Lisu}', "");
Error('\p{Is_Block=-	Lisu:=}');
Error('\P{Is_Block=-	Lisu:=}');
Expect(1, 42239, '\p{Is_Block=lisu}', "");
Expect(0, 42239, '\p{^Is_Block=lisu}', "");
Expect(0, 42239, '\P{Is_Block=lisu}', "");
Expect(1, 42239, '\P{^Is_Block=lisu}', "");
Expect(0, 42191, '\p{Is_Block=lisu}', "");
Expect(1, 42191, '\p{^Is_Block=lisu}', "");
Expect(1, 42191, '\P{Is_Block=lisu}', "");
Expect(0, 42191, '\P{^Is_Block=lisu}', "");
Expect(1, 42239, '\p{Is_Block=_-LISU}', "");
Expect(0, 42239, '\p{^Is_Block=_-LISU}', "");
Expect(0, 42239, '\P{Is_Block=_-LISU}', "");
Expect(1, 42239, '\P{^Is_Block=_-LISU}', "");
Expect(0, 42191, '\p{Is_Block=_-LISU}', "");
Expect(1, 42191, '\p{^Is_Block=_-LISU}', "");
Expect(1, 42191, '\P{Is_Block=_-LISU}', "");
Expect(0, 42191, '\P{^Is_Block=_-LISU}', "");
Error('\p{Is_Blk=-Lisu/a/}');
Error('\P{Is_Blk=-Lisu/a/}');
Expect(1, 42239, '\p{Is_Blk=lisu}', "");
Expect(0, 42239, '\p{^Is_Blk=lisu}', "");
Expect(0, 42239, '\P{Is_Blk=lisu}', "");
Expect(1, 42239, '\P{^Is_Blk=lisu}', "");
Expect(0, 42191, '\p{Is_Blk=lisu}', "");
Expect(1, 42191, '\p{^Is_Blk=lisu}', "");
Expect(1, 42191, '\P{Is_Blk=lisu}', "");
Expect(0, 42191, '\P{^Is_Blk=lisu}', "");
Expect(1, 42239, '\p{Is_Blk:    _Lisu}', "");
Expect(0, 42239, '\p{^Is_Blk:    _Lisu}', "");
Expect(0, 42239, '\P{Is_Blk:    _Lisu}', "");
Expect(1, 42239, '\P{^Is_Blk:    _Lisu}', "");
Expect(0, 42191, '\p{Is_Blk:    _Lisu}', "");
Expect(1, 42191, '\p{^Is_Blk:    _Lisu}', "");
Expect(1, 42191, '\P{Is_Blk:    _Lisu}', "");
Expect(0, 42191, '\P{^Is_Blk:    _Lisu}', "");
Error('\p{Block= ARABIC:=Presentation-FORMSA}');
Error('\P{Block= ARABIC:=Presentation-FORMSA}');
Expect(1, 65023, '\p{Block=arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^Block=arabicpresentationformsa}', "");
Expect(0, 65023, '\P{Block=arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^Block=arabicpresentationformsa}', "");
Expect(0, 64335, '\p{Block=arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^Block=arabicpresentationformsa}', "");
Expect(1, 64335, '\P{Block=arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^Block=arabicpresentationformsa}', "");
Expect(1, 65023, '\p{Block:	 ArabicPresentationFORMS	A}', "");
Expect(0, 65023, '\p{^Block:	 ArabicPresentationFORMS	A}', "");
Expect(0, 65023, '\P{Block:	 ArabicPresentationFORMS	A}', "");
Expect(1, 65023, '\P{^Block:	 ArabicPresentationFORMS	A}', "");
Expect(0, 64335, '\p{Block:	 ArabicPresentationFORMS	A}', "");
Expect(1, 64335, '\p{^Block:	 ArabicPresentationFORMS	A}', "");
Expect(1, 64335, '\P{Block:	 ArabicPresentationFORMS	A}', "");
Expect(0, 64335, '\P{^Block:	 ArabicPresentationFORMS	A}', "");
Error('\p{Blk=		Arabic/a/PRESENTATION-FORMSa}');
Error('\P{Blk=		Arabic/a/PRESENTATION-FORMSa}');
Expect(1, 65023, '\p{Blk=arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^Blk=arabicpresentationformsa}', "");
Expect(0, 65023, '\P{Blk=arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^Blk=arabicpresentationformsa}', "");
Expect(0, 64335, '\p{Blk=arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^Blk=arabicpresentationformsa}', "");
Expect(1, 64335, '\P{Blk=arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^Blk=arabicpresentationformsa}', "");
Expect(1, 65023, '\p{Blk=-_ArabicPresentation	forms-A}', "");
Expect(0, 65023, '\p{^Blk=-_ArabicPresentation	forms-A}', "");
Expect(0, 65023, '\P{Blk=-_ArabicPresentation	forms-A}', "");
Expect(1, 65023, '\P{^Blk=-_ArabicPresentation	forms-A}', "");
Expect(0, 64335, '\p{Blk=-_ArabicPresentation	forms-A}', "");
Expect(1, 64335, '\p{^Blk=-_ArabicPresentation	forms-A}', "");
Expect(1, 64335, '\P{Blk=-_ArabicPresentation	forms-A}', "");
Expect(0, 64335, '\P{^Blk=-_ArabicPresentation	forms-A}', "");
Error('\p{Is_Block=-_arabic:=PresentationFORMS_A}');
Error('\P{Is_Block=-_arabic:=PresentationFORMS_A}');
Expect(1, 65023, '\p{Is_Block=arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^Is_Block=arabicpresentationformsa}', "");
Expect(0, 65023, '\P{Is_Block=arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^Is_Block=arabicpresentationformsa}', "");
Expect(0, 64335, '\p{Is_Block=arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^Is_Block=arabicpresentationformsa}', "");
Expect(1, 64335, '\P{Is_Block=arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^Is_Block=arabicpresentationformsa}', "");
Expect(1, 65023, '\p{Is_Block= Arabic presentation_FORMS	a}', "");
Expect(0, 65023, '\p{^Is_Block= Arabic presentation_FORMS	a}', "");
Expect(0, 65023, '\P{Is_Block= Arabic presentation_FORMS	a}', "");
Expect(1, 65023, '\P{^Is_Block= Arabic presentation_FORMS	a}', "");
Expect(0, 64335, '\p{Is_Block= Arabic presentation_FORMS	a}', "");
Expect(1, 64335, '\p{^Is_Block= Arabic presentation_FORMS	a}', "");
Expect(1, 64335, '\P{Is_Block= Arabic presentation_FORMS	a}', "");
Expect(0, 64335, '\P{^Is_Block= Arabic presentation_FORMS	a}', "");
Error('\p{Is_Blk=	 Arabic	presentation/a/forms A}');
Error('\P{Is_Blk=	 Arabic	presentation/a/forms A}');
Expect(1, 65023, '\p{Is_Blk=arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^Is_Blk=arabicpresentationformsa}', "");
Expect(0, 65023, '\P{Is_Blk=arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^Is_Blk=arabicpresentationformsa}', "");
Expect(0, 64335, '\p{Is_Blk=arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^Is_Blk=arabicpresentationformsa}', "");
Expect(1, 64335, '\P{Is_Blk=arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^Is_Blk=arabicpresentationformsa}', "");
Expect(1, 65023, '\p{Is_Blk=	_arabicPRESENTATION Forms A}', "");
Expect(0, 65023, '\p{^Is_Blk=	_arabicPRESENTATION Forms A}', "");
Expect(0, 65023, '\P{Is_Blk=	_arabicPRESENTATION Forms A}', "");
Expect(1, 65023, '\P{^Is_Blk=	_arabicPRESENTATION Forms A}', "");
Expect(0, 64335, '\p{Is_Blk=	_arabicPRESENTATION Forms A}', "");
Expect(1, 64335, '\p{^Is_Blk=	_arabicPRESENTATION Forms A}', "");
Expect(1, 64335, '\P{Is_Blk=	_arabicPRESENTATION Forms A}', "");
Expect(0, 64335, '\P{^Is_Blk=	_arabicPRESENTATION Forms A}', "");
Error('\p{Block=/a/_TAI	le}');
Error('\P{Block=/a/_TAI	le}');
Expect(1, 6527, '\p{Block=taile}', "");
Expect(0, 6527, '\p{^Block=taile}', "");
Expect(0, 6527, '\P{Block=taile}', "");
Expect(1, 6527, '\P{^Block=taile}', "");
Expect(0, 6479, '\p{Block=taile}', "");
Expect(1, 6479, '\p{^Block=taile}', "");
Expect(1, 6479, '\P{Block=taile}', "");
Expect(0, 6479, '\P{^Block=taile}', "");
Expect(1, 6527, '\p{Block= _Tai_le}', "");
Expect(0, 6527, '\p{^Block= _Tai_le}', "");
Expect(0, 6527, '\P{Block= _Tai_le}', "");
Expect(1, 6527, '\P{^Block= _Tai_le}', "");
Expect(0, 6479, '\p{Block= _Tai_le}', "");
Expect(1, 6479, '\p{^Block= _Tai_le}', "");
Expect(1, 6479, '\P{Block= _Tai_le}', "");
Expect(0, 6479, '\P{^Block= _Tai_le}', "");
Error('\p{Blk= -tai/a/le}');
Error('\P{Blk= -tai/a/le}');
Expect(1, 6527, '\p{Blk=taile}', "");
Expect(0, 6527, '\p{^Blk=taile}', "");
Expect(0, 6527, '\P{Blk=taile}', "");
Expect(1, 6527, '\P{^Blk=taile}', "");
Expect(0, 6479, '\p{Blk=taile}', "");
Expect(1, 6479, '\p{^Blk=taile}', "");
Expect(1, 6479, '\P{Blk=taile}', "");
Expect(0, 6479, '\P{^Blk=taile}', "");
Expect(1, 6527, '\p{Blk=_-Tai le}', "");
Expect(0, 6527, '\p{^Blk=_-Tai le}', "");
Expect(0, 6527, '\P{Blk=_-Tai le}', "");
Expect(1, 6527, '\P{^Blk=_-Tai le}', "");
Expect(0, 6479, '\p{Blk=_-Tai le}', "");
Expect(1, 6479, '\p{^Blk=_-Tai le}', "");
Expect(1, 6479, '\P{Blk=_-Tai le}', "");
Expect(0, 6479, '\P{^Blk=_-Tai le}', "");
Error('\p{Is_Block=/a/Tai	LE}');
Error('\P{Is_Block=/a/Tai	LE}');
Expect(1, 6527, '\p{Is_Block=taile}', "");
Expect(0, 6527, '\p{^Is_Block=taile}', "");
Expect(0, 6527, '\P{Is_Block=taile}', "");
Expect(1, 6527, '\P{^Is_Block=taile}', "");
Expect(0, 6479, '\p{Is_Block=taile}', "");
Expect(1, 6479, '\p{^Is_Block=taile}', "");
Expect(1, 6479, '\P{Is_Block=taile}', "");
Expect(0, 6479, '\P{^Is_Block=taile}', "");
Expect(1, 6527, '\p{Is_Block=	_TAI-Le}', "");
Expect(0, 6527, '\p{^Is_Block=	_TAI-Le}', "");
Expect(0, 6527, '\P{Is_Block=	_TAI-Le}', "");
Expect(1, 6527, '\P{^Is_Block=	_TAI-Le}', "");
Expect(0, 6479, '\p{Is_Block=	_TAI-Le}', "");
Expect(1, 6479, '\p{^Is_Block=	_TAI-Le}', "");
Expect(1, 6479, '\P{Is_Block=	_TAI-Le}', "");
Expect(0, 6479, '\P{^Is_Block=	_TAI-Le}', "");
Error('\p{Is_Blk=	Tai le:=}');
Error('\P{Is_Blk=	Tai le:=}');
Expect(1, 6527, '\p{Is_Blk:	taile}', "");
Expect(0, 6527, '\p{^Is_Blk:	taile}', "");
Expect(0, 6527, '\P{Is_Blk:	taile}', "");
Expect(1, 6527, '\P{^Is_Blk:	taile}', "");
Expect(0, 6479, '\p{Is_Blk:	taile}', "");
Expect(1, 6479, '\p{^Is_Blk:	taile}', "");
Expect(1, 6479, '\P{Is_Blk:	taile}', "");
Expect(0, 6479, '\P{^Is_Blk:	taile}', "");
Expect(1, 6527, '\p{Is_Blk=--TAI-le}', "");
Expect(0, 6527, '\p{^Is_Blk=--TAI-le}', "");
Expect(0, 6527, '\P{Is_Blk=--TAI-le}', "");
Expect(1, 6527, '\P{^Is_Blk=--TAI-le}', "");
Expect(0, 6479, '\p{Is_Blk=--TAI-le}', "");
Expect(1, 6479, '\p{^Is_Blk=--TAI-le}', "");
Expect(1, 6479, '\P{Is_Blk=--TAI-le}', "");
Expect(0, 6479, '\P{^Is_Blk=--TAI-le}', "");
Error('\p{Block=:=CombiningDiacriticalmarks}');
Error('\P{Block=:=CombiningDiacriticalmarks}');
Expect(1, 879, '\p{Block=combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^Block=combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{Block=combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^Block=combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{Block=combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^Block=combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{Block=combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^Block=combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{Block=-Combining_DIACRITICALmarks}', "");
Expect(0, 879, '\p{^Block=-Combining_DIACRITICALmarks}', "");
Expect(0, 879, '\P{Block=-Combining_DIACRITICALmarks}', "");
Expect(1, 879, '\P{^Block=-Combining_DIACRITICALmarks}', "");
Expect(0, 767, '\p{Block=-Combining_DIACRITICALmarks}', "");
Expect(1, 767, '\p{^Block=-Combining_DIACRITICALmarks}', "");
Expect(1, 767, '\P{Block=-Combining_DIACRITICALmarks}', "");
Expect(0, 767, '\P{^Block=-Combining_DIACRITICALmarks}', "");
Error('\p{Blk= 	COMBINING Diacritical/a/marks}');
Error('\P{Blk= 	COMBINING Diacritical/a/marks}');
Expect(1, 879, '\p{Blk=combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^Blk=combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{Blk=combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^Blk=combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{Blk=combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^Blk=combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{Blk=combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^Blk=combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{Blk= -combining	Diacritical	Marks}', "");
Expect(0, 879, '\p{^Blk= -combining	Diacritical	Marks}', "");
Expect(0, 879, '\P{Blk= -combining	Diacritical	Marks}', "");
Expect(1, 879, '\P{^Blk= -combining	Diacritical	Marks}', "");
Expect(0, 767, '\p{Blk= -combining	Diacritical	Marks}', "");
Expect(1, 767, '\p{^Blk= -combining	Diacritical	Marks}', "");
Expect(1, 767, '\P{Blk= -combining	Diacritical	Marks}', "");
Expect(0, 767, '\P{^Blk= -combining	Diacritical	Marks}', "");
Error('\p{Is_Block:	- combining:=Diacriticalmarks}');
Error('\P{Is_Block:	- combining:=Diacriticalmarks}');
Expect(1, 879, '\p{Is_Block=combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^Is_Block=combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{Is_Block=combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^Is_Block=combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{Is_Block=combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^Is_Block=combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{Is_Block=combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^Is_Block=combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{Is_Block= _combiningdiacritical Marks}', "");
Expect(0, 879, '\p{^Is_Block= _combiningdiacritical Marks}', "");
Expect(0, 879, '\P{Is_Block= _combiningdiacritical Marks}', "");
Expect(1, 879, '\P{^Is_Block= _combiningdiacritical Marks}', "");
Expect(0, 767, '\p{Is_Block= _combiningdiacritical Marks}', "");
Expect(1, 767, '\p{^Is_Block= _combiningdiacritical Marks}', "");
Expect(1, 767, '\P{Is_Block= _combiningdiacritical Marks}', "");
Expect(0, 767, '\P{^Is_Block= _combiningdiacritical Marks}', "");
Error('\p{Is_Blk=:=	COMBININGDiacritical	Marks}');
Error('\P{Is_Blk=:=	COMBININGDiacritical	Marks}');
Expect(1, 879, '\p{Is_Blk=combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^Is_Blk=combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{Is_Blk=combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^Is_Blk=combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{Is_Blk=combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^Is_Blk=combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{Is_Blk=combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^Is_Blk=combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{Is_Blk= _combining_DIACRITICAL	MARKS}', "");
Expect(0, 879, '\p{^Is_Blk= _combining_DIACRITICAL	MARKS}', "");
Expect(0, 879, '\P{Is_Blk= _combining_DIACRITICAL	MARKS}', "");
Expect(1, 879, '\P{^Is_Blk= _combining_DIACRITICAL	MARKS}', "");
Expect(0, 767, '\p{Is_Blk= _combining_DIACRITICAL	MARKS}', "");
Expect(1, 767, '\p{^Is_Blk= _combining_DIACRITICAL	MARKS}', "");
Expect(1, 767, '\P{Is_Blk= _combining_DIACRITICAL	MARKS}', "");
Expect(0, 767, '\P{^Is_Blk= _combining_DIACRITICAL	MARKS}', "");
Error('\p{Block=/a/_-Latin-Extended	B}');
Error('\P{Block=/a/_-Latin-Extended	B}');
Expect(1, 591, '\p{Block=latinextendedb}', "");
Expect(0, 591, '\p{^Block=latinextendedb}', "");
Expect(0, 591, '\P{Block=latinextendedb}', "");
Expect(1, 591, '\P{^Block=latinextendedb}', "");
Expect(0, 383, '\p{Block=latinextendedb}', "");
Expect(1, 383, '\p{^Block=latinextendedb}', "");
Expect(1, 383, '\P{Block=latinextendedb}', "");
Expect(0, 383, '\P{^Block=latinextendedb}', "");
Expect(1, 591, '\p{Block=_Latin-EXTENDED	B}', "");
Expect(0, 591, '\p{^Block=_Latin-EXTENDED	B}', "");
Expect(0, 591, '\P{Block=_Latin-EXTENDED	B}', "");
Expect(1, 591, '\P{^Block=_Latin-EXTENDED	B}', "");
Expect(0, 383, '\p{Block=_Latin-EXTENDED	B}', "");
Expect(1, 383, '\p{^Block=_Latin-EXTENDED	B}', "");
Expect(1, 383, '\P{Block=_Latin-EXTENDED	B}', "");
Expect(0, 383, '\P{^Block=_Latin-EXTENDED	B}', "");
Error('\p{Blk=-	latin	EXTENDED b/a/}');
Error('\P{Blk=-	latin	EXTENDED b/a/}');
Expect(1, 591, '\p{Blk=latinextendedb}', "");
Expect(0, 591, '\p{^Blk=latinextendedb}', "");
Expect(0, 591, '\P{Blk=latinextendedb}', "");
Expect(1, 591, '\P{^Blk=latinextendedb}', "");
Expect(0, 383, '\p{Blk=latinextendedb}', "");
Expect(1, 383, '\p{^Blk=latinextendedb}', "");
Expect(1, 383, '\P{Blk=latinextendedb}', "");
Expect(0, 383, '\P{^Blk=latinextendedb}', "");
Expect(1, 591, '\p{Blk=_	LatinEXTENDEDB}', "");
Expect(0, 591, '\p{^Blk=_	LatinEXTENDEDB}', "");
Expect(0, 591, '\P{Blk=_	LatinEXTENDEDB}', "");
Expect(1, 591, '\P{^Blk=_	LatinEXTENDEDB}', "");
Expect(0, 383, '\p{Blk=_	LatinEXTENDEDB}', "");
Expect(1, 383, '\p{^Blk=_	LatinEXTENDEDB}', "");
Expect(1, 383, '\P{Blk=_	LatinEXTENDEDB}', "");
Expect(0, 383, '\P{^Blk=_	LatinEXTENDEDB}', "");
Error('\p{Is_Block=:=_-LatinExtended_B}');
Error('\P{Is_Block=:=_-LatinExtended_B}');
Expect(1, 591, '\p{Is_Block=latinextendedb}', "");
Expect(0, 591, '\p{^Is_Block=latinextendedb}', "");
Expect(0, 591, '\P{Is_Block=latinextendedb}', "");
Expect(1, 591, '\P{^Is_Block=latinextendedb}', "");
Expect(0, 383, '\p{Is_Block=latinextendedb}', "");
Expect(1, 383, '\p{^Is_Block=latinextendedb}', "");
Expect(1, 383, '\P{Is_Block=latinextendedb}', "");
Expect(0, 383, '\P{^Is_Block=latinextendedb}', "");
Expect(1, 591, '\p{Is_Block= LatinExtended-b}', "");
Expect(0, 591, '\p{^Is_Block= LatinExtended-b}', "");
Expect(0, 591, '\P{Is_Block= LatinExtended-b}', "");
Expect(1, 591, '\P{^Is_Block= LatinExtended-b}', "");
Expect(0, 383, '\p{Is_Block= LatinExtended-b}', "");
Expect(1, 383, '\p{^Is_Block= LatinExtended-b}', "");
Expect(1, 383, '\P{Is_Block= LatinExtended-b}', "");
Expect(0, 383, '\P{^Is_Block= LatinExtended-b}', "");
Error('\p{Is_Blk=	-LATIN/a/Extended-B}');
Error('\P{Is_Blk=	-LATIN/a/Extended-B}');
Expect(1, 591, '\p{Is_Blk=latinextendedb}', "");
Expect(0, 591, '\p{^Is_Blk=latinextendedb}', "");
Expect(0, 591, '\P{Is_Blk=latinextendedb}', "");
Expect(1, 591, '\P{^Is_Blk=latinextendedb}', "");
Expect(0, 383, '\p{Is_Blk=latinextendedb}', "");
Expect(1, 383, '\p{^Is_Blk=latinextendedb}', "");
Expect(1, 383, '\P{Is_Blk=latinextendedb}', "");
Expect(0, 383, '\P{^Is_Blk=latinextendedb}', "");
Expect(1, 591, '\p{Is_Blk=	latin EXTENDED_B}', "");
Expect(0, 591, '\p{^Is_Blk=	latin EXTENDED_B}', "");
Expect(0, 591, '\P{Is_Blk=	latin EXTENDED_B}', "");
Expect(1, 591, '\P{^Is_Blk=	latin EXTENDED_B}', "");
Expect(0, 383, '\p{Is_Blk=	latin EXTENDED_B}', "");
Expect(1, 383, '\p{^Is_Blk=	latin EXTENDED_B}', "");
Expect(1, 383, '\P{Is_Blk=	latin EXTENDED_B}', "");
Expect(0, 383, '\P{^Is_Blk=	latin EXTENDED_B}', "");
Error('\p{Block=supplemental_Arrows/a/A}');
Error('\P{Block=supplemental_Arrows/a/A}');
Expect(1, 10239, '\p{Block=supplementalarrowsa}', "");
Expect(0, 10239, '\p{^Block=supplementalarrowsa}', "");
Expect(0, 10239, '\P{Block=supplementalarrowsa}', "");
Expect(1, 10239, '\P{^Block=supplementalarrowsa}', "");
Expect(0, 10223, '\p{Block=supplementalarrowsa}', "");
Expect(1, 10223, '\p{^Block=supplementalarrowsa}', "");
Expect(1, 10223, '\P{Block=supplementalarrowsa}', "");
Expect(0, 10223, '\P{^Block=supplementalarrowsa}', "");
Expect(1, 10239, '\p{Block=	_Supplemental-Arrows-A}', "");
Expect(0, 10239, '\p{^Block=	_Supplemental-Arrows-A}', "");
Expect(0, 10239, '\P{Block=	_Supplemental-Arrows-A}', "");
Expect(1, 10239, '\P{^Block=	_Supplemental-Arrows-A}', "");
Expect(0, 10223, '\p{Block=	_Supplemental-Arrows-A}', "");
Expect(1, 10223, '\p{^Block=	_Supplemental-Arrows-A}', "");
Expect(1, 10223, '\P{Block=	_Supplemental-Arrows-A}', "");
Expect(0, 10223, '\P{^Block=	_Supplemental-Arrows-A}', "");
Error('\p{Blk=_Supplemental:=ARROWS_A}');
Error('\P{Blk=_Supplemental:=ARROWS_A}');
Expect(1, 10239, '\p{Blk=supplementalarrowsa}', "");
Expect(0, 10239, '\p{^Blk=supplementalarrowsa}', "");
Expect(0, 10239, '\P{Blk=supplementalarrowsa}', "");
Expect(1, 10239, '\P{^Blk=supplementalarrowsa}', "");
Expect(0, 10223, '\p{Blk=supplementalarrowsa}', "");
Expect(1, 10223, '\p{^Blk=supplementalarrowsa}', "");
Expect(1, 10223, '\P{Blk=supplementalarrowsa}', "");
Expect(0, 10223, '\P{^Blk=supplementalarrowsa}', "");
Expect(1, 10239, '\p{Blk= supplemental	Arrows_A}', "");
Expect(0, 10239, '\p{^Blk= supplemental	Arrows_A}', "");
Expect(0, 10239, '\P{Blk= supplemental	Arrows_A}', "");
Expect(1, 10239, '\P{^Blk= supplemental	Arrows_A}', "");
Expect(0, 10223, '\p{Blk= supplemental	Arrows_A}', "");
Expect(1, 10223, '\p{^Blk= supplemental	Arrows_A}', "");
Expect(1, 10223, '\P{Blk= supplemental	Arrows_A}', "");
Expect(0, 10223, '\P{^Blk= supplemental	Arrows_A}', "");
Error('\p{Is_Block= _supplemental:=arrowsa}');
Error('\P{Is_Block= _supplemental:=arrowsa}');
Expect(1, 10239, '\p{Is_Block=supplementalarrowsa}', "");
Expect(0, 10239, '\p{^Is_Block=supplementalarrowsa}', "");
Expect(0, 10239, '\P{Is_Block=supplementalarrowsa}', "");
Expect(1, 10239, '\P{^Is_Block=supplementalarrowsa}', "");
Expect(0, 10223, '\p{Is_Block=supplementalarrowsa}', "");
Expect(1, 10223, '\p{^Is_Block=supplementalarrowsa}', "");
Expect(1, 10223, '\P{Is_Block=supplementalarrowsa}', "");
Expect(0, 10223, '\P{^Is_Block=supplementalarrowsa}', "");
Expect(1, 10239, '\p{Is_Block=	SUPPLEMENTAL_Arrows-A}', "");
Expect(0, 10239, '\p{^Is_Block=	SUPPLEMENTAL_Arrows-A}', "");
Expect(0, 10239, '\P{Is_Block=	SUPPLEMENTAL_Arrows-A}', "");
Expect(1, 10239, '\P{^Is_Block=	SUPPLEMENTAL_Arrows-A}', "");
Expect(0, 10223, '\p{Is_Block=	SUPPLEMENTAL_Arrows-A}', "");
Expect(1, 10223, '\p{^Is_Block=	SUPPLEMENTAL_Arrows-A}', "");
Expect(1, 10223, '\P{Is_Block=	SUPPLEMENTAL_Arrows-A}', "");
Expect(0, 10223, '\P{^Is_Block=	SUPPLEMENTAL_Arrows-A}', "");
Error('\p{Is_Blk=-	SUPPLEMENTAL:=Arrows_a}');
Error('\P{Is_Blk=-	SUPPLEMENTAL:=Arrows_a}');
Expect(1, 10239, '\p{Is_Blk=supplementalarrowsa}', "");
Expect(0, 10239, '\p{^Is_Blk=supplementalarrowsa}', "");
Expect(0, 10239, '\P{Is_Blk=supplementalarrowsa}', "");
Expect(1, 10239, '\P{^Is_Blk=supplementalarrowsa}', "");
Expect(0, 10223, '\p{Is_Blk=supplementalarrowsa}', "");
Expect(1, 10223, '\p{^Is_Blk=supplementalarrowsa}', "");
Expect(1, 10223, '\P{Is_Blk=supplementalarrowsa}', "");
Expect(0, 10223, '\P{^Is_Blk=supplementalarrowsa}', "");
Expect(1, 10239, '\p{Is_Blk=SUPPLEMENTAL ARROWS-a}', "");
Expect(0, 10239, '\p{^Is_Blk=SUPPLEMENTAL ARROWS-a}', "");
Expect(0, 10239, '\P{Is_Blk=SUPPLEMENTAL ARROWS-a}', "");
Expect(1, 10239, '\P{^Is_Blk=SUPPLEMENTAL ARROWS-a}', "");
Expect(0, 10223, '\p{Is_Blk=SUPPLEMENTAL ARROWS-a}', "");
Expect(1, 10223, '\p{^Is_Blk=SUPPLEMENTAL ARROWS-a}', "");
Expect(1, 10223, '\P{Is_Blk=SUPPLEMENTAL ARROWS-a}', "");
Expect(0, 10223, '\P{^Is_Blk=SUPPLEMENTAL ARROWS-a}', "");
Error('\p{Block= /a/javanese}');
Error('\P{Block= /a/javanese}');
Expect(1, 43487, '\p{Block=javanese}', "");
Expect(0, 43487, '\p{^Block=javanese}', "");
Expect(0, 43487, '\P{Block=javanese}', "");
Expect(1, 43487, '\P{^Block=javanese}', "");
Expect(0, 43391, '\p{Block=javanese}', "");
Expect(1, 43391, '\p{^Block=javanese}', "");
Expect(1, 43391, '\P{Block=javanese}', "");
Expect(0, 43391, '\P{^Block=javanese}', "");
Expect(1, 43487, '\p{Block=-JAVANESE}', "");
Expect(0, 43487, '\p{^Block=-JAVANESE}', "");
Expect(0, 43487, '\P{Block=-JAVANESE}', "");
Expect(1, 43487, '\P{^Block=-JAVANESE}', "");
Expect(0, 43391, '\p{Block=-JAVANESE}', "");
Expect(1, 43391, '\p{^Block=-JAVANESE}', "");
Expect(1, 43391, '\P{Block=-JAVANESE}', "");
Expect(0, 43391, '\P{^Block=-JAVANESE}', "");
Error('\p{Blk= /a/JAVANESE}');
Error('\P{Blk= /a/JAVANESE}');
Expect(1, 43487, '\p{Blk=javanese}', "");
Expect(0, 43487, '\p{^Blk=javanese}', "");
Expect(0, 43487, '\P{Blk=javanese}', "");
Expect(1, 43487, '\P{^Blk=javanese}', "");
Expect(0, 43391, '\p{Blk=javanese}', "");
Expect(1, 43391, '\p{^Blk=javanese}', "");
Expect(1, 43391, '\P{Blk=javanese}', "");
Expect(0, 43391, '\P{^Blk=javanese}', "");
Expect(1, 43487, '\p{Blk=_ Javanese}', "");
Expect(0, 43487, '\p{^Blk=_ Javanese}', "");
Expect(0, 43487, '\P{Blk=_ Javanese}', "");
Expect(1, 43487, '\P{^Blk=_ Javanese}', "");
Expect(0, 43391, '\p{Blk=_ Javanese}', "");
Expect(1, 43391, '\p{^Blk=_ Javanese}', "");
Expect(1, 43391, '\P{Blk=_ Javanese}', "");
Expect(0, 43391, '\P{^Blk=_ Javanese}', "");
Error('\p{Is_Block=:=__javanese}');
Error('\P{Is_Block=:=__javanese}');
Expect(1, 43487, '\p{Is_Block=javanese}', "");
Expect(0, 43487, '\p{^Is_Block=javanese}', "");
Expect(0, 43487, '\P{Is_Block=javanese}', "");
Expect(1, 43487, '\P{^Is_Block=javanese}', "");
Expect(0, 43391, '\p{Is_Block=javanese}', "");
Expect(1, 43391, '\p{^Is_Block=javanese}', "");
Expect(1, 43391, '\P{Is_Block=javanese}', "");
Expect(0, 43391, '\P{^Is_Block=javanese}', "");
Expect(1, 43487, '\p{Is_Block=	_javanese}', "");
Expect(0, 43487, '\p{^Is_Block=	_javanese}', "");
Expect(0, 43487, '\P{Is_Block=	_javanese}', "");
Expect(1, 43487, '\P{^Is_Block=	_javanese}', "");
Expect(0, 43391, '\p{Is_Block=	_javanese}', "");
Expect(1, 43391, '\p{^Is_Block=	_javanese}', "");
Expect(1, 43391, '\P{Is_Block=	_javanese}', "");
Expect(0, 43391, '\P{^Is_Block=	_javanese}', "");
Error('\p{Is_Blk=:=_Javanese}');
Error('\P{Is_Blk=:=_Javanese}');
Expect(1, 43487, '\p{Is_Blk=javanese}', "");
Expect(0, 43487, '\p{^Is_Blk=javanese}', "");
Expect(0, 43487, '\P{Is_Blk=javanese}', "");
Expect(1, 43487, '\P{^Is_Blk=javanese}', "");
Expect(0, 43391, '\p{Is_Blk=javanese}', "");
Expect(1, 43391, '\p{^Is_Blk=javanese}', "");
Expect(1, 43391, '\P{Is_Blk=javanese}', "");
Expect(0, 43391, '\P{^Is_Blk=javanese}', "");
Expect(1, 43487, '\p{Is_Blk=_-Javanese}', "");
Expect(0, 43487, '\p{^Is_Blk=_-Javanese}', "");
Expect(0, 43487, '\P{Is_Blk=_-Javanese}', "");
Expect(1, 43487, '\P{^Is_Blk=_-Javanese}', "");
Expect(0, 43391, '\p{Is_Blk=_-Javanese}', "");
Expect(1, 43391, '\p{^Is_Blk=_-Javanese}', "");
Expect(1, 43391, '\P{Is_Blk=_-Javanese}', "");
Expect(0, 43391, '\P{^Is_Blk=_-Javanese}', "");
Error('\p{Block= /a/Supplementary_Private USE_AREA	A}');
Error('\P{Block= /a/Supplementary_Private USE_AREA	A}');
Expect(1, 983040, '\p{Block=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^Block=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{Block=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^Block=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{Block=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^Block=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{Block=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^Block=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{Block=supplementary	Privateuse AreaA}', "");
Expect(0, 983040, '\p{^Block=supplementary	Privateuse AreaA}', "");
Expect(0, 983040, '\P{Block=supplementary	Privateuse AreaA}', "");
Expect(1, 983040, '\P{^Block=supplementary	Privateuse AreaA}', "");
Expect(0, 1, '\p{Block=supplementary	Privateuse AreaA}', "");
Expect(1, 1, '\p{^Block=supplementary	Privateuse AreaA}', "");
Expect(1, 1, '\P{Block=supplementary	Privateuse AreaA}', "");
Expect(0, 1, '\P{^Block=supplementary	Privateuse AreaA}', "");
Error('\p{Blk= _supplementary_Private_use:=area-A}');
Error('\P{Blk= _supplementary_Private_use:=area-A}');
Expect(1, 983040, '\p{Blk:supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^Blk:supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{Blk:supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^Blk:supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{Blk:supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^Blk:supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{Blk:supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^Blk:supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{Blk:	-supplementaryPRIVATE	Use-Area-a}', "");
Expect(0, 983040, '\p{^Blk:	-supplementaryPRIVATE	Use-Area-a}', "");
Expect(0, 983040, '\P{Blk:	-supplementaryPRIVATE	Use-Area-a}', "");
Expect(1, 983040, '\P{^Blk:	-supplementaryPRIVATE	Use-Area-a}', "");
Expect(0, 1, '\p{Blk:	-supplementaryPRIVATE	Use-Area-a}', "");
Expect(1, 1, '\p{^Blk:	-supplementaryPRIVATE	Use-Area-a}', "");
Expect(1, 1, '\P{Blk:	-supplementaryPRIVATE	Use-Area-a}', "");
Expect(0, 1, '\P{^Blk:	-supplementaryPRIVATE	Use-Area-a}', "");
Error('\p{Is_Block= Supplementary:=PRIVATEUse	AREA_A}');
Error('\P{Is_Block= Supplementary:=PRIVATEUse	AREA_A}');
Expect(1, 983040, '\p{Is_Block=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^Is_Block=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{Is_Block=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^Is_Block=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{Is_Block=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^Is_Block=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{Is_Block=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^Is_Block=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{Is_Block=-Supplementary_PRIVATEUse	AREAA}', "");
Expect(0, 983040, '\p{^Is_Block=-Supplementary_PRIVATEUse	AREAA}', "");
Expect(0, 983040, '\P{Is_Block=-Supplementary_PRIVATEUse	AREAA}', "");
Expect(1, 983040, '\P{^Is_Block=-Supplementary_PRIVATEUse	AREAA}', "");
Expect(0, 1, '\p{Is_Block=-Supplementary_PRIVATEUse	AREAA}', "");
Expect(1, 1, '\p{^Is_Block=-Supplementary_PRIVATEUse	AREAA}', "");
Expect(1, 1, '\P{Is_Block=-Supplementary_PRIVATEUse	AREAA}', "");
Expect(0, 1, '\P{^Is_Block=-Supplementary_PRIVATEUse	AREAA}', "");
Error('\p{Is_Blk=	:=Supplementary_Private Use_AREAa}');
Error('\P{Is_Blk=	:=Supplementary_Private Use_AREAa}');
Expect(1, 983040, '\p{Is_Blk=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^Is_Blk=supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{Is_Blk=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^Is_Blk=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{Is_Blk=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^Is_Blk=supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{Is_Blk=supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^Is_Blk=supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{Is_Blk= SUPPLEMENTARY-private-Use_Area_A}', "");
Expect(0, 983040, '\p{^Is_Blk= SUPPLEMENTARY-private-Use_Area_A}', "");
Expect(0, 983040, '\P{Is_Blk= SUPPLEMENTARY-private-Use_Area_A}', "");
Expect(1, 983040, '\P{^Is_Blk= SUPPLEMENTARY-private-Use_Area_A}', "");
Expect(0, 1, '\p{Is_Blk= SUPPLEMENTARY-private-Use_Area_A}', "");
Expect(1, 1, '\p{^Is_Blk= SUPPLEMENTARY-private-Use_Area_A}', "");
Expect(1, 1, '\P{Is_Blk= SUPPLEMENTARY-private-Use_Area_A}', "");
Expect(0, 1, '\P{^Is_Blk= SUPPLEMENTARY-private-Use_Area_A}', "");
Error('\p{Block: -/a/HANUNOO}');
Error('\P{Block: -/a/HANUNOO}');
Expect(1, 5951, '\p{Block=hanunoo}', "");
Expect(0, 5951, '\p{^Block=hanunoo}', "");
Expect(0, 5951, '\P{Block=hanunoo}', "");
Expect(1, 5951, '\P{^Block=hanunoo}', "");
Expect(0, 5919, '\p{Block=hanunoo}', "");
Expect(1, 5919, '\p{^Block=hanunoo}', "");
Expect(1, 5919, '\P{Block=hanunoo}', "");
Expect(0, 5919, '\P{^Block=hanunoo}', "");
Expect(1, 5951, '\p{Block= hanunoo}', "");
Expect(0, 5951, '\p{^Block= hanunoo}', "");
Expect(0, 5951, '\P{Block= hanunoo}', "");
Expect(1, 5951, '\P{^Block= hanunoo}', "");
Expect(0, 5919, '\p{Block= hanunoo}', "");
Expect(1, 5919, '\p{^Block= hanunoo}', "");
Expect(1, 5919, '\P{Block= hanunoo}', "");
Expect(0, 5919, '\P{^Block= hanunoo}', "");
Error('\p{Blk=	hanunoo:=}');
Error('\P{Blk=	hanunoo:=}');
Expect(1, 5951, '\p{Blk=hanunoo}', "");
Expect(0, 5951, '\p{^Blk=hanunoo}', "");
Expect(0, 5951, '\P{Blk=hanunoo}', "");
Expect(1, 5951, '\P{^Blk=hanunoo}', "");
Expect(0, 5919, '\p{Blk=hanunoo}', "");
Expect(1, 5919, '\p{^Blk=hanunoo}', "");
Expect(1, 5919, '\P{Blk=hanunoo}', "");
Expect(0, 5919, '\P{^Blk=hanunoo}', "");
Expect(1, 5951, '\p{Blk=	_hanunoo}', "");
Expect(0, 5951, '\p{^Blk=	_hanunoo}', "");
Expect(0, 5951, '\P{Blk=	_hanunoo}', "");
Expect(1, 5951, '\P{^Blk=	_hanunoo}', "");
Expect(0, 5919, '\p{Blk=	_hanunoo}', "");
Expect(1, 5919, '\p{^Blk=	_hanunoo}', "");
Expect(1, 5919, '\P{Blk=	_hanunoo}', "");
Expect(0, 5919, '\P{^Blk=	_hanunoo}', "");
Error('\p{Is_Block=	-Hanunoo:=}');
Error('\P{Is_Block=	-Hanunoo:=}');
Expect(1, 5951, '\p{Is_Block=hanunoo}', "");
Expect(0, 5951, '\p{^Is_Block=hanunoo}', "");
Expect(0, 5951, '\P{Is_Block=hanunoo}', "");
Expect(1, 5951, '\P{^Is_Block=hanunoo}', "");
Expect(0, 5919, '\p{Is_Block=hanunoo}', "");
Expect(1, 5919, '\p{^Is_Block=hanunoo}', "");
Expect(1, 5919, '\P{Is_Block=hanunoo}', "");
Expect(0, 5919, '\P{^Is_Block=hanunoo}', "");
Expect(1, 5951, '\p{Is_Block=_-Hanunoo}', "");
Expect(0, 5951, '\p{^Is_Block=_-Hanunoo}', "");
Expect(0, 5951, '\P{Is_Block=_-Hanunoo}', "");
Expect(1, 5951, '\P{^Is_Block=_-Hanunoo}', "");
Expect(0, 5919, '\p{Is_Block=_-Hanunoo}', "");
Expect(1, 5919, '\p{^Is_Block=_-Hanunoo}', "");
Expect(1, 5919, '\P{Is_Block=_-Hanunoo}', "");
Expect(0, 5919, '\P{^Is_Block=_-Hanunoo}', "");
Error('\p{Is_Blk=	-Hanunoo:=}');
Error('\P{Is_Blk=	-Hanunoo:=}');
Expect(1, 5951, '\p{Is_Blk=hanunoo}', "");
Expect(0, 5951, '\p{^Is_Blk=hanunoo}', "");
Expect(0, 5951, '\P{Is_Blk=hanunoo}', "");
Expect(1, 5951, '\P{^Is_Blk=hanunoo}', "");
Expect(0, 5919, '\p{Is_Blk=hanunoo}', "");
Expect(1, 5919, '\p{^Is_Blk=hanunoo}', "");
Expect(1, 5919, '\P{Is_Blk=hanunoo}', "");
Expect(0, 5919, '\P{^Is_Blk=hanunoo}', "");
Expect(1, 5951, '\p{Is_Blk=		Hanunoo}', "");
Expect(0, 5951, '\p{^Is_Blk=		Hanunoo}', "");
Expect(0, 5951, '\P{Is_Blk=		Hanunoo}', "");
Expect(1, 5951, '\P{^Is_Blk=		Hanunoo}', "");
Expect(0, 5919, '\p{Is_Blk=		Hanunoo}', "");
Expect(1, 5919, '\p{^Is_Blk=		Hanunoo}', "");
Expect(1, 5919, '\P{Is_Blk=		Hanunoo}', "");
Expect(0, 5919, '\P{^Is_Blk=		Hanunoo}', "");
Error('\p{Block= -Low:=Surrogates}');
Error('\P{Block= -Low:=Surrogates}');
Expect(0, 1, '\p{Block=lowsurrogates}', "");
Expect(1, 1, '\p{^Block=lowsurrogates}', "");
Expect(1, 1, '\P{Block=lowsurrogates}', "");
Expect(0, 1, '\P{^Block=lowsurrogates}', "");
Expect(0, 1, '\p{Block=__LOW Surrogates}', "");
Expect(1, 1, '\p{^Block=__LOW Surrogates}', "");
Expect(1, 1, '\P{Block=__LOW Surrogates}', "");
Expect(0, 1, '\P{^Block=__LOW Surrogates}', "");
Error('\p{Blk=-Low:=surrogates}');
Error('\P{Blk=-Low:=surrogates}');
Expect(0, 1, '\p{Blk=lowsurrogates}', "");
Expect(1, 1, '\p{^Blk=lowsurrogates}', "");
Expect(1, 1, '\P{Blk=lowsurrogates}', "");
Expect(0, 1, '\P{^Blk=lowsurrogates}', "");
Expect(0, 1, '\p{Blk=-lowSurrogates}', "");
Expect(1, 1, '\p{^Blk=-lowSurrogates}', "");
Expect(1, 1, '\P{Blk=-lowSurrogates}', "");
Expect(0, 1, '\P{^Blk=-lowSurrogates}', "");
Error('\p{Is_Block:   /a/- LOWSurrogates}');
Error('\P{Is_Block:   /a/- LOWSurrogates}');
Expect(0, 1, '\p{Is_Block=lowsurrogates}', "");
Expect(1, 1, '\p{^Is_Block=lowsurrogates}', "");
Expect(1, 1, '\P{Is_Block=lowsurrogates}', "");
Expect(0, 1, '\P{^Is_Block=lowsurrogates}', "");
Expect(0, 1, '\p{Is_Block=-LOW SURROGATES}', "");
Expect(1, 1, '\p{^Is_Block=-LOW SURROGATES}', "");
Expect(1, 1, '\P{Is_Block=-LOW SURROGATES}', "");
Expect(0, 1, '\P{^Is_Block=-LOW SURROGATES}', "");
Error('\p{Is_Blk=_LOWSurrogates:=}');
Error('\P{Is_Blk=_LOWSurrogates:=}');
Expect(0, 1, '\p{Is_Blk=lowsurrogates}', "");
Expect(1, 1, '\p{^Is_Blk=lowsurrogates}', "");
Expect(1, 1, '\P{Is_Blk=lowsurrogates}', "");
Expect(0, 1, '\P{^Is_Blk=lowsurrogates}', "");
Expect(0, 1, '\p{Is_Blk:	-low SURROGATES}', "");
Expect(1, 1, '\p{^Is_Blk:	-low SURROGATES}', "");
Expect(1, 1, '\P{Is_Blk:	-low SURROGATES}', "");
Expect(0, 1, '\P{^Is_Blk:	-low SURROGATES}', "");
Error('\p{Block= /a/Katakana}');
Error('\P{Block= /a/Katakana}');
Expect(1, 12543, '\p{Block=katakana}', "");
Expect(0, 12543, '\p{^Block=katakana}', "");
Expect(0, 12543, '\P{Block=katakana}', "");
Expect(1, 12543, '\P{^Block=katakana}', "");
Expect(0, 12447, '\p{Block=katakana}', "");
Expect(1, 12447, '\p{^Block=katakana}', "");
Expect(1, 12447, '\P{Block=katakana}', "");
Expect(0, 12447, '\P{^Block=katakana}', "");
Expect(1, 12543, '\p{Block=  Katakana}', "");
Expect(0, 12543, '\p{^Block=  Katakana}', "");
Expect(0, 12543, '\P{Block=  Katakana}', "");
Expect(1, 12543, '\P{^Block=  Katakana}', "");
Expect(0, 12447, '\p{Block=  Katakana}', "");
Expect(1, 12447, '\p{^Block=  Katakana}', "");
Expect(1, 12447, '\P{Block=  Katakana}', "");
Expect(0, 12447, '\P{^Block=  Katakana}', "");
Error('\p{Blk=:= _katakana}');
Error('\P{Blk=:= _katakana}');
Expect(1, 12543, '\p{Blk=katakana}', "");
Expect(0, 12543, '\p{^Blk=katakana}', "");
Expect(0, 12543, '\P{Blk=katakana}', "");
Expect(1, 12543, '\P{^Blk=katakana}', "");
Expect(0, 12447, '\p{Blk=katakana}', "");
Expect(1, 12447, '\p{^Blk=katakana}', "");
Expect(1, 12447, '\P{Blk=katakana}', "");
Expect(0, 12447, '\P{^Blk=katakana}', "");
Expect(1, 12543, '\p{Blk=-katakana}', "");
Expect(0, 12543, '\p{^Blk=-katakana}', "");
Expect(0, 12543, '\P{Blk=-katakana}', "");
Expect(1, 12543, '\P{^Blk=-katakana}', "");
Expect(0, 12447, '\p{Blk=-katakana}', "");
Expect(1, 12447, '\p{^Blk=-katakana}', "");
Expect(1, 12447, '\P{Blk=-katakana}', "");
Expect(0, 12447, '\P{^Blk=-katakana}', "");
Error('\p{Is_Block=/a/katakana}');
Error('\P{Is_Block=/a/katakana}');
Expect(1, 12543, '\p{Is_Block=katakana}', "");
Expect(0, 12543, '\p{^Is_Block=katakana}', "");
Expect(0, 12543, '\P{Is_Block=katakana}', "");
Expect(1, 12543, '\P{^Is_Block=katakana}', "");
Expect(0, 12447, '\p{Is_Block=katakana}', "");
Expect(1, 12447, '\p{^Is_Block=katakana}', "");
Expect(1, 12447, '\P{Is_Block=katakana}', "");
Expect(0, 12447, '\P{^Is_Block=katakana}', "");
Expect(1, 12543, '\p{Is_Block=  Katakana}', "");
Expect(0, 12543, '\p{^Is_Block=  Katakana}', "");
Expect(0, 12543, '\P{Is_Block=  Katakana}', "");
Expect(1, 12543, '\P{^Is_Block=  Katakana}', "");
Expect(0, 12447, '\p{Is_Block=  Katakana}', "");
Expect(1, 12447, '\p{^Is_Block=  Katakana}', "");
Expect(1, 12447, '\P{Is_Block=  Katakana}', "");
Expect(0, 12447, '\P{^Is_Block=  Katakana}', "");
Error('\p{Is_Blk=	_katakana/a/}');
Error('\P{Is_Blk=	_katakana/a/}');
Expect(1, 12543, '\p{Is_Blk=katakana}', "");
Expect(0, 12543, '\p{^Is_Blk=katakana}', "");
Expect(0, 12543, '\P{Is_Blk=katakana}', "");
Expect(1, 12543, '\P{^Is_Blk=katakana}', "");
Expect(0, 12447, '\p{Is_Blk=katakana}', "");
Expect(1, 12447, '\p{^Is_Blk=katakana}', "");
Expect(1, 12447, '\P{Is_Blk=katakana}', "");
Expect(0, 12447, '\P{^Is_Blk=katakana}', "");
Expect(1, 12543, '\p{Is_Blk= -Katakana}', "");
Expect(0, 12543, '\p{^Is_Blk= -Katakana}', "");
Expect(0, 12543, '\P{Is_Blk= -Katakana}', "");
Expect(1, 12543, '\P{^Is_Blk= -Katakana}', "");
Expect(0, 12447, '\p{Is_Blk= -Katakana}', "");
Expect(1, 12447, '\p{^Is_Blk= -Katakana}', "");
Expect(1, 12447, '\P{Is_Blk= -Katakana}', "");
Expect(0, 12447, '\P{^Is_Blk= -Katakana}', "");
Error('\p{Block:	:=cuneiform}');
Error('\P{Block:	:=cuneiform}');
Expect(1, 74751, '\p{Block=cuneiform}', "");
Expect(0, 74751, '\p{^Block=cuneiform}', "");
Expect(0, 74751, '\P{Block=cuneiform}', "");
Expect(1, 74751, '\P{^Block=cuneiform}', "");
Expect(0, 73727, '\p{Block=cuneiform}', "");
Expect(1, 73727, '\p{^Block=cuneiform}', "");
Expect(1, 73727, '\P{Block=cuneiform}', "");
Expect(0, 73727, '\P{^Block=cuneiform}', "");
Expect(1, 74751, '\p{Block=_CUNEIFORM}', "");
Expect(0, 74751, '\p{^Block=_CUNEIFORM}', "");
Expect(0, 74751, '\P{Block=_CUNEIFORM}', "");
Expect(1, 74751, '\P{^Block=_CUNEIFORM}', "");
Expect(0, 73727, '\p{Block=_CUNEIFORM}', "");
Expect(1, 73727, '\p{^Block=_CUNEIFORM}', "");
Expect(1, 73727, '\P{Block=_CUNEIFORM}', "");
Expect(0, 73727, '\P{^Block=_CUNEIFORM}', "");
Error('\p{Blk=_ CUNEIFORM:=}');
Error('\P{Blk=_ CUNEIFORM:=}');
Expect(1, 74751, '\p{Blk=cuneiform}', "");
Expect(0, 74751, '\p{^Blk=cuneiform}', "");
Expect(0, 74751, '\P{Blk=cuneiform}', "");
Expect(1, 74751, '\P{^Blk=cuneiform}', "");
Expect(0, 73727, '\p{Blk=cuneiform}', "");
Expect(1, 73727, '\p{^Blk=cuneiform}', "");
Expect(1, 73727, '\P{Blk=cuneiform}', "");
Expect(0, 73727, '\P{^Blk=cuneiform}', "");
Expect(1, 74751, '\p{Blk=-_Cuneiform}', "");
Expect(0, 74751, '\p{^Blk=-_Cuneiform}', "");
Expect(0, 74751, '\P{Blk=-_Cuneiform}', "");
Expect(1, 74751, '\P{^Blk=-_Cuneiform}', "");
Expect(0, 73727, '\p{Blk=-_Cuneiform}', "");
Expect(1, 73727, '\p{^Blk=-_Cuneiform}', "");
Expect(1, 73727, '\P{Blk=-_Cuneiform}', "");
Expect(0, 73727, '\P{^Blk=-_Cuneiform}', "");
Error('\p{Is_Block=	:=Cuneiform}');
Error('\P{Is_Block=	:=Cuneiform}');
Expect(1, 74751, '\p{Is_Block=cuneiform}', "");
Expect(0, 74751, '\p{^Is_Block=cuneiform}', "");
Expect(0, 74751, '\P{Is_Block=cuneiform}', "");
Expect(1, 74751, '\P{^Is_Block=cuneiform}', "");
Expect(0, 73727, '\p{Is_Block=cuneiform}', "");
Expect(1, 73727, '\p{^Is_Block=cuneiform}', "");
Expect(1, 73727, '\P{Is_Block=cuneiform}', "");
Expect(0, 73727, '\P{^Is_Block=cuneiform}', "");
Expect(1, 74751, '\p{Is_Block= cuneiform}', "");
Expect(0, 74751, '\p{^Is_Block= cuneiform}', "");
Expect(0, 74751, '\P{Is_Block= cuneiform}', "");
Expect(1, 74751, '\P{^Is_Block= cuneiform}', "");
Expect(0, 73727, '\p{Is_Block= cuneiform}', "");
Expect(1, 73727, '\p{^Is_Block= cuneiform}', "");
Expect(1, 73727, '\P{Is_Block= cuneiform}', "");
Expect(0, 73727, '\P{^Is_Block= cuneiform}', "");
Error('\p{Is_Blk= 	Cuneiform/a/}');
Error('\P{Is_Blk= 	Cuneiform/a/}');
Expect(1, 74751, '\p{Is_Blk=cuneiform}', "");
Expect(0, 74751, '\p{^Is_Blk=cuneiform}', "");
Expect(0, 74751, '\P{Is_Blk=cuneiform}', "");
Expect(1, 74751, '\P{^Is_Blk=cuneiform}', "");
Expect(0, 73727, '\p{Is_Blk=cuneiform}', "");
Expect(1, 73727, '\p{^Is_Blk=cuneiform}', "");
Expect(1, 73727, '\P{Is_Blk=cuneiform}', "");
Expect(0, 73727, '\P{^Is_Blk=cuneiform}', "");
Expect(1, 74751, '\p{Is_Blk=	cuneiform}', "");
Expect(0, 74751, '\p{^Is_Blk=	cuneiform}', "");
Expect(0, 74751, '\P{Is_Blk=	cuneiform}', "");
Expect(1, 74751, '\P{^Is_Blk=	cuneiform}', "");
Expect(0, 73727, '\p{Is_Blk=	cuneiform}', "");
Expect(1, 73727, '\p{^Is_Blk=	cuneiform}', "");
Expect(1, 73727, '\P{Is_Blk=	cuneiform}', "");
Expect(0, 73727, '\P{^Is_Blk=	cuneiform}', "");
Error('\p{Block:_	high-Surrogates/a/}');
Error('\P{Block:_	high-Surrogates/a/}');
Expect(0, 55295, '\p{Block=highsurrogates}', "");
Expect(1, 55295, '\p{^Block=highsurrogates}', "");
Expect(1, 55295, '\P{Block=highsurrogates}', "");
Expect(0, 55295, '\P{^Block=highsurrogates}', "");
Expect(0, 55295, '\p{Block=--high	Surrogates}', "");
Expect(1, 55295, '\p{^Block=--high	Surrogates}', "");
Expect(1, 55295, '\P{Block=--high	Surrogates}', "");
Expect(0, 55295, '\P{^Block=--high	Surrogates}', "");
Error('\p{Blk:	  High Surrogates:=}');
Error('\P{Blk:	  High Surrogates:=}');
Expect(0, 55295, '\p{Blk=highsurrogates}', "");
Expect(1, 55295, '\p{^Blk=highsurrogates}', "");
Expect(1, 55295, '\P{Blk=highsurrogates}', "");
Expect(0, 55295, '\P{^Blk=highsurrogates}', "");
Expect(0, 55295, '\p{Blk=__High Surrogates}', "");
Expect(1, 55295, '\p{^Blk=__High Surrogates}', "");
Expect(1, 55295, '\P{Blk=__High Surrogates}', "");
Expect(0, 55295, '\P{^Blk=__High Surrogates}', "");
Error('\p{Is_Block=	 high_Surrogates:=}');
Error('\P{Is_Block=	 high_Surrogates:=}');
Expect(0, 55295, '\p{Is_Block=highsurrogates}', "");
Expect(1, 55295, '\p{^Is_Block=highsurrogates}', "");
Expect(1, 55295, '\P{Is_Block=highsurrogates}', "");
Expect(0, 55295, '\P{^Is_Block=highsurrogates}', "");
Expect(0, 55295, '\p{Is_Block=_ High	SURROGATES}', "");
Expect(1, 55295, '\p{^Is_Block=_ High	SURROGATES}', "");
Expect(1, 55295, '\P{Is_Block=_ High	SURROGATES}', "");
Expect(0, 55295, '\P{^Is_Block=_ High	SURROGATES}', "");
Error('\p{Is_Blk=- High_Surrogates:=}');
Error('\P{Is_Blk=- High_Surrogates:=}');
Expect(0, 55295, '\p{Is_Blk=highsurrogates}', "");
Expect(1, 55295, '\p{^Is_Blk=highsurrogates}', "");
Expect(1, 55295, '\P{Is_Blk=highsurrogates}', "");
Expect(0, 55295, '\P{^Is_Blk=highsurrogates}', "");
Expect(0, 55295, '\p{Is_Blk:_-High	SURROGATES}', "");
Expect(1, 55295, '\p{^Is_Blk:_-High	SURROGATES}', "");
Expect(1, 55295, '\P{Is_Blk:_-High	SURROGATES}', "");
Expect(0, 55295, '\P{^Is_Blk:_-High	SURROGATES}', "");
Error('\p{Block=	/a/RumiNumeral-symbols}');
Error('\P{Block=	/a/RumiNumeral-symbols}');
Expect(1, 69247, '\p{Block=ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^Block=ruminumeralsymbols}', "");
Expect(0, 69247, '\P{Block=ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^Block=ruminumeralsymbols}', "");
Expect(0, 69215, '\p{Block=ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^Block=ruminumeralsymbols}', "");
Expect(1, 69215, '\P{Block=ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^Block=ruminumeralsymbols}', "");
Expect(1, 69247, '\p{Block=  rumiNumeral symbols}', "");
Expect(0, 69247, '\p{^Block=  rumiNumeral symbols}', "");
Expect(0, 69247, '\P{Block=  rumiNumeral symbols}', "");
Expect(1, 69247, '\P{^Block=  rumiNumeral symbols}', "");
Expect(0, 69215, '\p{Block=  rumiNumeral symbols}', "");
Expect(1, 69215, '\p{^Block=  rumiNumeral symbols}', "");
Expect(1, 69215, '\P{Block=  rumiNumeral symbols}', "");
Expect(0, 69215, '\P{^Block=  rumiNumeral symbols}', "");
Error('\p{Blk=/a/_rumi-NUMERAL-Symbols}');
Error('\P{Blk=/a/_rumi-NUMERAL-Symbols}');
Expect(1, 69247, '\p{Blk=ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^Blk=ruminumeralsymbols}', "");
Expect(0, 69247, '\P{Blk=ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^Blk=ruminumeralsymbols}', "");
Expect(0, 69215, '\p{Blk=ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^Blk=ruminumeralsymbols}', "");
Expect(1, 69215, '\P{Blk=ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^Blk=ruminumeralsymbols}', "");
Expect(1, 69247, '\p{Blk= -RumiNumeral Symbols}', "");
Expect(0, 69247, '\p{^Blk= -RumiNumeral Symbols}', "");
Expect(0, 69247, '\P{Blk= -RumiNumeral Symbols}', "");
Expect(1, 69247, '\P{^Blk= -RumiNumeral Symbols}', "");
Expect(0, 69215, '\p{Blk= -RumiNumeral Symbols}', "");
Expect(1, 69215, '\p{^Blk= -RumiNumeral Symbols}', "");
Expect(1, 69215, '\P{Blk= -RumiNumeral Symbols}', "");
Expect(0, 69215, '\P{^Blk= -RumiNumeral Symbols}', "");
Error('\p{Is_Block: -	Rumi:=NumeralSymbols}');
Error('\P{Is_Block: -	Rumi:=NumeralSymbols}');
Expect(1, 69247, '\p{Is_Block=ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^Is_Block=ruminumeralsymbols}', "");
Expect(0, 69247, '\P{Is_Block=ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^Is_Block=ruminumeralsymbols}', "");
Expect(0, 69215, '\p{Is_Block=ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^Is_Block=ruminumeralsymbols}', "");
Expect(1, 69215, '\P{Is_Block=ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^Is_Block=ruminumeralsymbols}', "");
Expect(1, 69247, '\p{Is_Block= Rumi-numeral_SYMBOLS}', "");
Expect(0, 69247, '\p{^Is_Block= Rumi-numeral_SYMBOLS}', "");
Expect(0, 69247, '\P{Is_Block= Rumi-numeral_SYMBOLS}', "");
Expect(1, 69247, '\P{^Is_Block= Rumi-numeral_SYMBOLS}', "");
Expect(0, 69215, '\p{Is_Block= Rumi-numeral_SYMBOLS}', "");
Expect(1, 69215, '\p{^Is_Block= Rumi-numeral_SYMBOLS}', "");
Expect(1, 69215, '\P{Is_Block= Rumi-numeral_SYMBOLS}', "");
Expect(0, 69215, '\P{^Is_Block= Rumi-numeral_SYMBOLS}', "");
Error('\p{Is_Blk:		rumi:=Numeral-SYMBOLS}');
Error('\P{Is_Blk:		rumi:=Numeral-SYMBOLS}');
Expect(1, 69247, '\p{Is_Blk=ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^Is_Blk=ruminumeralsymbols}', "");
Expect(0, 69247, '\P{Is_Blk=ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^Is_Blk=ruminumeralsymbols}', "");
Expect(0, 69215, '\p{Is_Blk=ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^Is_Blk=ruminumeralsymbols}', "");
Expect(1, 69215, '\P{Is_Blk=ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^Is_Blk=ruminumeralsymbols}', "");
Expect(1, 69247, '\p{Is_Blk=-	Rumi	numeral-symbols}', "");
Expect(0, 69247, '\p{^Is_Blk=-	Rumi	numeral-symbols}', "");
Expect(0, 69247, '\P{Is_Blk=-	Rumi	numeral-symbols}', "");
Expect(1, 69247, '\P{^Is_Blk=-	Rumi	numeral-symbols}', "");
Expect(0, 69215, '\p{Is_Blk=-	Rumi	numeral-symbols}', "");
Expect(1, 69215, '\p{^Is_Blk=-	Rumi	numeral-symbols}', "");
Expect(1, 69215, '\P{Is_Blk=-	Rumi	numeral-symbols}', "");
Expect(0, 69215, '\P{^Is_Blk=-	Rumi	numeral-symbols}', "");
Error('\p{Block=-Variation:=Selectors-Supplement}');
Error('\P{Block=-Variation:=Selectors-Supplement}');
Expect(1, 917999, '\p{Block=variationselectorssupplement}', "");
Expect(0, 917999, '\p{^Block=variationselectorssupplement}', "");
Expect(0, 917999, '\P{Block=variationselectorssupplement}', "");
Expect(1, 917999, '\P{^Block=variationselectorssupplement}', "");
Expect(0, 917759, '\p{Block=variationselectorssupplement}', "");
Expect(1, 917759, '\p{^Block=variationselectorssupplement}', "");
Expect(1, 917759, '\P{Block=variationselectorssupplement}', "");
Expect(0, 917759, '\P{^Block=variationselectorssupplement}', "");
Expect(1, 917999, '\p{Block=-_Variation_SELECTORS SUPPLEMENT}', "");
Expect(0, 917999, '\p{^Block=-_Variation_SELECTORS SUPPLEMENT}', "");
Expect(0, 917999, '\P{Block=-_Variation_SELECTORS SUPPLEMENT}', "");
Expect(1, 917999, '\P{^Block=-_Variation_SELECTORS SUPPLEMENT}', "");
Expect(0, 917759, '\p{Block=-_Variation_SELECTORS SUPPLEMENT}', "");
Expect(1, 917759, '\p{^Block=-_Variation_SELECTORS SUPPLEMENT}', "");
Expect(1, 917759, '\P{Block=-_Variation_SELECTORS SUPPLEMENT}', "");
Expect(0, 917759, '\P{^Block=-_Variation_SELECTORS SUPPLEMENT}', "");
Error('\p{Blk= _VARIATION:=Selectors-Supplement}');
Error('\P{Blk= _VARIATION:=Selectors-Supplement}');
Expect(1, 917999, '\p{Blk=variationselectorssupplement}', "");
Expect(0, 917999, '\p{^Blk=variationselectorssupplement}', "");
Expect(0, 917999, '\P{Blk=variationselectorssupplement}', "");
Expect(1, 917999, '\P{^Blk=variationselectorssupplement}', "");
Expect(0, 917759, '\p{Blk=variationselectorssupplement}', "");
Expect(1, 917759, '\p{^Blk=variationselectorssupplement}', "");
Expect(1, 917759, '\P{Blk=variationselectorssupplement}', "");
Expect(0, 917759, '\P{^Blk=variationselectorssupplement}', "");
Expect(1, 917999, '\p{Blk=-Variation	SELECTORS-SUPPLEMENT}', "");
Expect(0, 917999, '\p{^Blk=-Variation	SELECTORS-SUPPLEMENT}', "");
Expect(0, 917999, '\P{Blk=-Variation	SELECTORS-SUPPLEMENT}', "");
Expect(1, 917999, '\P{^Blk=-Variation	SELECTORS-SUPPLEMENT}', "");
Expect(0, 917759, '\p{Blk=-Variation	SELECTORS-SUPPLEMENT}', "");
Expect(1, 917759, '\p{^Blk=-Variation	SELECTORS-SUPPLEMENT}', "");
Expect(1, 917759, '\P{Blk=-Variation	SELECTORS-SUPPLEMENT}', "");
Expect(0, 917759, '\P{^Blk=-Variation	SELECTORS-SUPPLEMENT}', "");
Error('\p{Is_Block= :=Variation-SELECTORS-Supplement}');
Error('\P{Is_Block= :=Variation-SELECTORS-Supplement}');
Expect(1, 917999, '\p{Is_Block=variationselectorssupplement}', "");
Expect(0, 917999, '\p{^Is_Block=variationselectorssupplement}', "");
Expect(0, 917999, '\P{Is_Block=variationselectorssupplement}', "");
Expect(1, 917999, '\P{^Is_Block=variationselectorssupplement}', "");
Expect(0, 917759, '\p{Is_Block=variationselectorssupplement}', "");
Expect(1, 917759, '\p{^Is_Block=variationselectorssupplement}', "");
Expect(1, 917759, '\P{Is_Block=variationselectorssupplement}', "");
Expect(0, 917759, '\P{^Is_Block=variationselectorssupplement}', "");
Expect(1, 917999, '\p{Is_Block=-Variationselectors-supplement}', "");
Expect(0, 917999, '\p{^Is_Block=-Variationselectors-supplement}', "");
Expect(0, 917999, '\P{Is_Block=-Variationselectors-supplement}', "");
Expect(1, 917999, '\P{^Is_Block=-Variationselectors-supplement}', "");
Expect(0, 917759, '\p{Is_Block=-Variationselectors-supplement}', "");
Expect(1, 917759, '\p{^Is_Block=-Variationselectors-supplement}', "");
Expect(1, 917759, '\P{Is_Block=-Variationselectors-supplement}', "");
Expect(0, 917759, '\P{^Is_Block=-Variationselectors-supplement}', "");
Error('\p{Is_Blk=	Variation selectors SUPPLEMENT/a/}');
Error('\P{Is_Blk=	Variation selectors SUPPLEMENT/a/}');
Expect(1, 917999, '\p{Is_Blk=variationselectorssupplement}', "");
Expect(0, 917999, '\p{^Is_Blk=variationselectorssupplement}', "");
Expect(0, 917999, '\P{Is_Blk=variationselectorssupplement}', "");
Expect(1, 917999, '\P{^Is_Blk=variationselectorssupplement}', "");
Expect(0, 917759, '\p{Is_Blk=variationselectorssupplement}', "");
Expect(1, 917759, '\p{^Is_Blk=variationselectorssupplement}', "");
Expect(1, 917759, '\P{Is_Blk=variationselectorssupplement}', "");
Expect(0, 917759, '\P{^Is_Blk=variationselectorssupplement}', "");
Expect(1, 917999, '\p{Is_Blk=	_Variation_SELECTORS Supplement}', "");
Expect(0, 917999, '\p{^Is_Blk=	_Variation_SELECTORS Supplement}', "");
Expect(0, 917999, '\P{Is_Blk=	_Variation_SELECTORS Supplement}', "");
Expect(1, 917999, '\P{^Is_Blk=	_Variation_SELECTORS Supplement}', "");
Expect(0, 917759, '\p{Is_Blk=	_Variation_SELECTORS Supplement}', "");
Expect(1, 917759, '\p{^Is_Blk=	_Variation_SELECTORS Supplement}', "");
Expect(1, 917759, '\P{Is_Blk=	_Variation_SELECTORS Supplement}', "");
Expect(0, 917759, '\P{^Is_Blk=	_Variation_SELECTORS Supplement}', "");
Error('\p{Block= Georgian_Supplement/a/}');
Error('\P{Block= Georgian_Supplement/a/}');
Expect(1, 11567, '\p{Block=georgiansupplement}', "");
Expect(0, 11567, '\p{^Block=georgiansupplement}', "");
Expect(0, 11567, '\P{Block=georgiansupplement}', "");
Expect(1, 11567, '\P{^Block=georgiansupplement}', "");
Expect(0, 11519, '\p{Block=georgiansupplement}', "");
Expect(1, 11519, '\p{^Block=georgiansupplement}', "");
Expect(1, 11519, '\P{Block=georgiansupplement}', "");
Expect(0, 11519, '\P{^Block=georgiansupplement}', "");
Expect(1, 11567, '\p{Block=--GEORGIAN Supplement}', "");
Expect(0, 11567, '\p{^Block=--GEORGIAN Supplement}', "");
Expect(0, 11567, '\P{Block=--GEORGIAN Supplement}', "");
Expect(1, 11567, '\P{^Block=--GEORGIAN Supplement}', "");
Expect(0, 11519, '\p{Block=--GEORGIAN Supplement}', "");
Expect(1, 11519, '\p{^Block=--GEORGIAN Supplement}', "");
Expect(1, 11519, '\P{Block=--GEORGIAN Supplement}', "");
Expect(0, 11519, '\P{^Block=--GEORGIAN Supplement}', "");
Error('\p{Blk=  GEORGIAN:=SUPPLEMENT}');
Error('\P{Blk=  GEORGIAN:=SUPPLEMENT}');
Expect(1, 11567, '\p{Blk=georgiansupplement}', "");
Expect(0, 11567, '\p{^Blk=georgiansupplement}', "");
Expect(0, 11567, '\P{Blk=georgiansupplement}', "");
Expect(1, 11567, '\P{^Blk=georgiansupplement}', "");
Expect(0, 11519, '\p{Blk=georgiansupplement}', "");
Expect(1, 11519, '\p{^Blk=georgiansupplement}', "");
Expect(1, 11519, '\P{Blk=georgiansupplement}', "");
Expect(0, 11519, '\P{^Blk=georgiansupplement}', "");
Expect(1, 11567, '\p{Blk=_ Georgian_Supplement}', "");
Expect(0, 11567, '\p{^Blk=_ Georgian_Supplement}', "");
Expect(0, 11567, '\P{Blk=_ Georgian_Supplement}', "");
Expect(1, 11567, '\P{^Blk=_ Georgian_Supplement}', "");
Expect(0, 11519, '\p{Blk=_ Georgian_Supplement}', "");
Expect(1, 11519, '\p{^Blk=_ Georgian_Supplement}', "");
Expect(1, 11519, '\P{Blk=_ Georgian_Supplement}', "");
Expect(0, 11519, '\P{^Blk=_ Georgian_Supplement}', "");
Error('\p{Is_Block:   	Georgian/a/Supplement}');
Error('\P{Is_Block:   	Georgian/a/Supplement}');
Expect(1, 11567, '\p{Is_Block=georgiansupplement}', "");
Expect(0, 11567, '\p{^Is_Block=georgiansupplement}', "");
Expect(0, 11567, '\P{Is_Block=georgiansupplement}', "");
Expect(1, 11567, '\P{^Is_Block=georgiansupplement}', "");
Expect(0, 11519, '\p{Is_Block=georgiansupplement}', "");
Expect(1, 11519, '\p{^Is_Block=georgiansupplement}', "");
Expect(1, 11519, '\P{Is_Block=georgiansupplement}', "");
Expect(0, 11519, '\P{^Is_Block=georgiansupplement}', "");
Expect(1, 11567, '\p{Is_Block:   -_georgian_Supplement}', "");
Expect(0, 11567, '\p{^Is_Block:   -_georgian_Supplement}', "");
Expect(0, 11567, '\P{Is_Block:   -_georgian_Supplement}', "");
Expect(1, 11567, '\P{^Is_Block:   -_georgian_Supplement}', "");
Expect(0, 11519, '\p{Is_Block:   -_georgian_Supplement}', "");
Expect(1, 11519, '\p{^Is_Block:   -_georgian_Supplement}', "");
Expect(1, 11519, '\P{Is_Block:   -_georgian_Supplement}', "");
Expect(0, 11519, '\P{^Is_Block:   -_georgian_Supplement}', "");
Error('\p{Is_Blk=:=georgian-Supplement}');
Error('\P{Is_Blk=:=georgian-Supplement}');
Expect(1, 11567, '\p{Is_Blk=georgiansupplement}', "");
Expect(0, 11567, '\p{^Is_Blk=georgiansupplement}', "");
Expect(0, 11567, '\P{Is_Blk=georgiansupplement}', "");
Expect(1, 11567, '\P{^Is_Blk=georgiansupplement}', "");
Expect(0, 11519, '\p{Is_Blk=georgiansupplement}', "");
Expect(1, 11519, '\p{^Is_Blk=georgiansupplement}', "");
Expect(1, 11519, '\P{Is_Blk=georgiansupplement}', "");
Expect(0, 11519, '\P{^Is_Blk=georgiansupplement}', "");
Expect(1, 11567, '\p{Is_Blk=_ georgian_supplement}', "");
Expect(0, 11567, '\p{^Is_Blk=_ georgian_supplement}', "");
Expect(0, 11567, '\P{Is_Blk=_ georgian_supplement}', "");
Expect(1, 11567, '\P{^Is_Blk=_ georgian_supplement}', "");
Expect(0, 11519, '\p{Is_Blk=_ georgian_supplement}', "");
Expect(1, 11519, '\p{^Is_Blk=_ georgian_supplement}', "");
Expect(1, 11519, '\P{Is_Blk=_ georgian_supplement}', "");
Expect(0, 11519, '\P{^Is_Blk=_ georgian_supplement}', "");
Error('\p{Block=/a/MYANMAR}');
Error('\P{Block=/a/MYANMAR}');
Expect(1, 4255, '\p{Block:   myanmar}', "");
Expect(0, 4255, '\p{^Block:   myanmar}', "");
Expect(0, 4255, '\P{Block:   myanmar}', "");
Expect(1, 4255, '\P{^Block:   myanmar}', "");
Expect(0, 4095, '\p{Block:   myanmar}', "");
Expect(1, 4095, '\p{^Block:   myanmar}', "");
Expect(1, 4095, '\P{Block:   myanmar}', "");
Expect(0, 4095, '\P{^Block:   myanmar}', "");
Expect(1, 4255, '\p{Block=_ Myanmar}', "");
Expect(0, 4255, '\p{^Block=_ Myanmar}', "");
Expect(0, 4255, '\P{Block=_ Myanmar}', "");
Expect(1, 4255, '\P{^Block=_ Myanmar}', "");
Expect(0, 4095, '\p{Block=_ Myanmar}', "");
Expect(1, 4095, '\p{^Block=_ Myanmar}', "");
Expect(1, 4095, '\P{Block=_ Myanmar}', "");
Expect(0, 4095, '\P{^Block=_ Myanmar}', "");
Error('\p{Blk=--Myanmar/a/}');
Error('\P{Blk=--Myanmar/a/}');
Expect(1, 4255, '\p{Blk=myanmar}', "");
Expect(0, 4255, '\p{^Blk=myanmar}', "");
Expect(0, 4255, '\P{Blk=myanmar}', "");
Expect(1, 4255, '\P{^Blk=myanmar}', "");
Expect(0, 4095, '\p{Blk=myanmar}', "");
Expect(1, 4095, '\p{^Blk=myanmar}', "");
Expect(1, 4095, '\P{Blk=myanmar}', "");
Expect(0, 4095, '\P{^Blk=myanmar}', "");
Expect(1, 4255, '\p{Blk=-Myanmar}', "");
Expect(0, 4255, '\p{^Blk=-Myanmar}', "");
Expect(0, 4255, '\P{Blk=-Myanmar}', "");
Expect(1, 4255, '\P{^Blk=-Myanmar}', "");
Expect(0, 4095, '\p{Blk=-Myanmar}', "");
Expect(1, 4095, '\p{^Blk=-Myanmar}', "");
Expect(1, 4095, '\P{Blk=-Myanmar}', "");
Expect(0, 4095, '\P{^Blk=-Myanmar}', "");
Error('\p{Is_Block:_:=Myanmar}');
Error('\P{Is_Block:_:=Myanmar}');
Expect(1, 4255, '\p{Is_Block:   myanmar}', "");
Expect(0, 4255, '\p{^Is_Block:   myanmar}', "");
Expect(0, 4255, '\P{Is_Block:   myanmar}', "");
Expect(1, 4255, '\P{^Is_Block:   myanmar}', "");
Expect(0, 4095, '\p{Is_Block:   myanmar}', "");
Expect(1, 4095, '\p{^Is_Block:   myanmar}', "");
Expect(1, 4095, '\P{Is_Block:   myanmar}', "");
Expect(0, 4095, '\P{^Is_Block:   myanmar}', "");
Expect(1, 4255, '\p{Is_Block=-Myanmar}', "");
Expect(0, 4255, '\p{^Is_Block=-Myanmar}', "");
Expect(0, 4255, '\P{Is_Block=-Myanmar}', "");
Expect(1, 4255, '\P{^Is_Block=-Myanmar}', "");
Expect(0, 4095, '\p{Is_Block=-Myanmar}', "");
Expect(1, 4095, '\p{^Is_Block=-Myanmar}', "");
Expect(1, 4095, '\P{Is_Block=-Myanmar}', "");
Expect(0, 4095, '\P{^Is_Block=-Myanmar}', "");
Error('\p{Is_Blk: _myanmar/a/}');
Error('\P{Is_Blk: _myanmar/a/}');
Expect(1, 4255, '\p{Is_Blk=myanmar}', "");
Expect(0, 4255, '\p{^Is_Blk=myanmar}', "");
Expect(0, 4255, '\P{Is_Blk=myanmar}', "");
Expect(1, 4255, '\P{^Is_Blk=myanmar}', "");
Expect(0, 4095, '\p{Is_Blk=myanmar}', "");
Expect(1, 4095, '\p{^Is_Blk=myanmar}', "");
Expect(1, 4095, '\P{Is_Blk=myanmar}', "");
Expect(0, 4095, '\P{^Is_Blk=myanmar}', "");
Expect(1, 4255, '\p{Is_Blk=	-myanmar}', "");
Expect(0, 4255, '\p{^Is_Blk=	-myanmar}', "");
Expect(0, 4255, '\P{Is_Blk=	-myanmar}', "");
Expect(1, 4255, '\P{^Is_Blk=	-myanmar}', "");
Expect(0, 4095, '\p{Is_Blk=	-myanmar}', "");
Expect(1, 4095, '\p{^Is_Blk=	-myanmar}', "");
Expect(1, 4095, '\P{Is_Blk=	-myanmar}', "");
Expect(0, 4095, '\P{^Is_Blk=	-myanmar}', "");
Error('\p{Block:	--Vertical Forms/a/}');
Error('\P{Block:	--Vertical Forms/a/}');
Expect(1, 65055, '\p{Block=verticalforms}', "");
Expect(0, 65055, '\p{^Block=verticalforms}', "");
Expect(0, 65055, '\P{Block=verticalforms}', "");
Expect(1, 65055, '\P{^Block=verticalforms}', "");
Expect(0, 65039, '\p{Block=verticalforms}', "");
Expect(1, 65039, '\p{^Block=verticalforms}', "");
Expect(1, 65039, '\P{Block=verticalforms}', "");
Expect(0, 65039, '\P{^Block=verticalforms}', "");
Expect(1, 65055, '\p{Block:   -	verticalforms}', "");
Expect(0, 65055, '\p{^Block:   -	verticalforms}', "");
Expect(0, 65055, '\P{Block:   -	verticalforms}', "");
Expect(1, 65055, '\P{^Block:   -	verticalforms}', "");
Expect(0, 65039, '\p{Block:   -	verticalforms}', "");
Expect(1, 65039, '\p{^Block:   -	verticalforms}', "");
Expect(1, 65039, '\P{Block:   -	verticalforms}', "");
Expect(0, 65039, '\P{^Block:   -	verticalforms}', "");
Error('\p{Blk= :=vertical forms}');
Error('\P{Blk= :=vertical forms}');
Expect(1, 65055, '\p{Blk=verticalforms}', "");
Expect(0, 65055, '\p{^Blk=verticalforms}', "");
Expect(0, 65055, '\P{Blk=verticalforms}', "");
Expect(1, 65055, '\P{^Blk=verticalforms}', "");
Expect(0, 65039, '\p{Blk=verticalforms}', "");
Expect(1, 65039, '\p{^Blk=verticalforms}', "");
Expect(1, 65039, '\P{Blk=verticalforms}', "");
Expect(0, 65039, '\P{^Blk=verticalforms}', "");
Expect(1, 65055, '\p{Blk=_	VERTICALforms}', "");
Expect(0, 65055, '\p{^Blk=_	VERTICALforms}', "");
Expect(0, 65055, '\P{Blk=_	VERTICALforms}', "");
Expect(1, 65055, '\P{^Blk=_	VERTICALforms}', "");
Expect(0, 65039, '\p{Blk=_	VERTICALforms}', "");
Expect(1, 65039, '\p{^Blk=_	VERTICALforms}', "");
Expect(1, 65039, '\P{Blk=_	VERTICALforms}', "");
Expect(0, 65039, '\P{^Blk=_	VERTICALforms}', "");
Error('\p{Is_Block=/a/- vertical FORMS}');
Error('\P{Is_Block=/a/- vertical FORMS}');
Expect(1, 65055, '\p{Is_Block=verticalforms}', "");
Expect(0, 65055, '\p{^Is_Block=verticalforms}', "");
Expect(0, 65055, '\P{Is_Block=verticalforms}', "");
Expect(1, 65055, '\P{^Is_Block=verticalforms}', "");
Expect(0, 65039, '\p{Is_Block=verticalforms}', "");
Expect(1, 65039, '\p{^Is_Block=verticalforms}', "");
Expect(1, 65039, '\P{Is_Block=verticalforms}', "");
Expect(0, 65039, '\P{^Is_Block=verticalforms}', "");
Expect(1, 65055, '\p{Is_Block=	-verticalForms}', "");
Expect(0, 65055, '\p{^Is_Block=	-verticalForms}', "");
Expect(0, 65055, '\P{Is_Block=	-verticalForms}', "");
Expect(1, 65055, '\P{^Is_Block=	-verticalForms}', "");
Expect(0, 65039, '\p{Is_Block=	-verticalForms}', "");
Expect(1, 65039, '\p{^Is_Block=	-verticalForms}', "");
Expect(1, 65039, '\P{Is_Block=	-verticalForms}', "");
Expect(0, 65039, '\P{^Is_Block=	-verticalForms}', "");
Error('\p{Is_Blk=_-vertical/a/Forms}');
Error('\P{Is_Blk=_-vertical/a/Forms}');
Expect(1, 65055, '\p{Is_Blk=verticalforms}', "");
Expect(0, 65055, '\p{^Is_Blk=verticalforms}', "");
Expect(0, 65055, '\P{Is_Blk=verticalforms}', "");
Expect(1, 65055, '\P{^Is_Blk=verticalforms}', "");
Expect(0, 65039, '\p{Is_Blk=verticalforms}', "");
Expect(1, 65039, '\p{^Is_Blk=verticalforms}', "");
Expect(1, 65039, '\P{Is_Blk=verticalforms}', "");
Expect(0, 65039, '\P{^Is_Blk=verticalforms}', "");
Expect(1, 65055, '\p{Is_Blk=--vertical forms}', "");
Expect(0, 65055, '\p{^Is_Blk=--vertical forms}', "");
Expect(0, 65055, '\P{Is_Blk=--vertical forms}', "");
Expect(1, 65055, '\P{^Is_Blk=--vertical forms}', "");
Expect(0, 65039, '\p{Is_Blk=--vertical forms}', "");
Expect(1, 65039, '\p{^Is_Blk=--vertical forms}', "");
Expect(1, 65039, '\P{Is_Blk=--vertical forms}', "");
Expect(0, 65039, '\P{^Is_Blk=--vertical forms}', "");
Error('\p{Block=		Kaithi:=}');
Error('\P{Block=		Kaithi:=}');
Expect(1, 69839, '\p{Block:kaithi}', "");
Expect(0, 69839, '\p{^Block:kaithi}', "");
Expect(0, 69839, '\P{Block:kaithi}', "");
Expect(1, 69839, '\P{^Block:kaithi}', "");
Expect(0, 69759, '\p{Block:kaithi}', "");
Expect(1, 69759, '\p{^Block:kaithi}', "");
Expect(1, 69759, '\P{Block:kaithi}', "");
Expect(0, 69759, '\P{^Block:kaithi}', "");
Expect(1, 69839, '\p{Block=	Kaithi}', "");
Expect(0, 69839, '\p{^Block=	Kaithi}', "");
Expect(0, 69839, '\P{Block=	Kaithi}', "");
Expect(1, 69839, '\P{^Block=	Kaithi}', "");
Expect(0, 69759, '\p{Block=	Kaithi}', "");
Expect(1, 69759, '\p{^Block=	Kaithi}', "");
Expect(1, 69759, '\P{Block=	Kaithi}', "");
Expect(0, 69759, '\P{^Block=	Kaithi}', "");
Error('\p{Blk=/a/ _Kaithi}');
Error('\P{Blk=/a/ _Kaithi}');
Expect(1, 69839, '\p{Blk=kaithi}', "");
Expect(0, 69839, '\p{^Blk=kaithi}', "");
Expect(0, 69839, '\P{Blk=kaithi}', "");
Expect(1, 69839, '\P{^Blk=kaithi}', "");
Expect(0, 69759, '\p{Blk=kaithi}', "");
Expect(1, 69759, '\p{^Blk=kaithi}', "");
Expect(1, 69759, '\P{Blk=kaithi}', "");
Expect(0, 69759, '\P{^Blk=kaithi}', "");
Expect(1, 69839, '\p{Blk:   -	Kaithi}', "");
Expect(0, 69839, '\p{^Blk:   -	Kaithi}', "");
Expect(0, 69839, '\P{Blk:   -	Kaithi}', "");
Expect(1, 69839, '\P{^Blk:   -	Kaithi}', "");
Expect(0, 69759, '\p{Blk:   -	Kaithi}', "");
Expect(1, 69759, '\p{^Blk:   -	Kaithi}', "");
Expect(1, 69759, '\P{Blk:   -	Kaithi}', "");
Expect(0, 69759, '\P{^Blk:   -	Kaithi}', "");
Error('\p{Is_Block=/a/	KAITHI}');
Error('\P{Is_Block=/a/	KAITHI}');
Expect(1, 69839, '\p{Is_Block=kaithi}', "");
Expect(0, 69839, '\p{^Is_Block=kaithi}', "");
Expect(0, 69839, '\P{Is_Block=kaithi}', "");
Expect(1, 69839, '\P{^Is_Block=kaithi}', "");
Expect(0, 69759, '\p{Is_Block=kaithi}', "");
Expect(1, 69759, '\p{^Is_Block=kaithi}', "");
Expect(1, 69759, '\P{Is_Block=kaithi}', "");
Expect(0, 69759, '\P{^Is_Block=kaithi}', "");
Expect(1, 69839, '\p{Is_Block=	Kaithi}', "");
Expect(0, 69839, '\p{^Is_Block=	Kaithi}', "");
Expect(0, 69839, '\P{Is_Block=	Kaithi}', "");
Expect(1, 69839, '\P{^Is_Block=	Kaithi}', "");
Expect(0, 69759, '\p{Is_Block=	Kaithi}', "");
Expect(1, 69759, '\p{^Is_Block=	Kaithi}', "");
Expect(1, 69759, '\P{Is_Block=	Kaithi}', "");
Expect(0, 69759, '\P{^Is_Block=	Kaithi}', "");
Error('\p{Is_Blk=	KAITHI:=}');
Error('\P{Is_Blk=	KAITHI:=}');
Expect(1, 69839, '\p{Is_Blk=kaithi}', "");
Expect(0, 69839, '\p{^Is_Blk=kaithi}', "");
Expect(0, 69839, '\P{Is_Blk=kaithi}', "");
Expect(1, 69839, '\P{^Is_Blk=kaithi}', "");
Expect(0, 69759, '\p{Is_Blk=kaithi}', "");
Expect(1, 69759, '\p{^Is_Blk=kaithi}', "");
Expect(1, 69759, '\P{Is_Blk=kaithi}', "");
Expect(0, 69759, '\P{^Is_Blk=kaithi}', "");
Expect(1, 69839, '\p{Is_Blk=_Kaithi}', "");
Expect(0, 69839, '\p{^Is_Blk=_Kaithi}', "");
Expect(0, 69839, '\P{Is_Blk=_Kaithi}', "");
Expect(1, 69839, '\P{^Is_Blk=_Kaithi}', "");
Expect(0, 69759, '\p{Is_Blk=_Kaithi}', "");
Expect(1, 69759, '\p{^Is_Blk=_Kaithi}', "");
Expect(1, 69759, '\P{Is_Blk=_Kaithi}', "");
Expect(0, 69759, '\P{^Is_Blk=_Kaithi}', "");
Error('\p{Block=/a/-	sinhala}');
Error('\P{Block=/a/-	sinhala}');
Expect(1, 3583, '\p{Block=sinhala}', "");
Expect(0, 3583, '\p{^Block=sinhala}', "");
Expect(0, 3583, '\P{Block=sinhala}', "");
Expect(1, 3583, '\P{^Block=sinhala}', "");
Expect(0, 3455, '\p{Block=sinhala}', "");
Expect(1, 3455, '\p{^Block=sinhala}', "");
Expect(1, 3455, '\P{Block=sinhala}', "");
Expect(0, 3455, '\P{^Block=sinhala}', "");
Expect(1, 3583, '\p{Block=		Sinhala}', "");
Expect(0, 3583, '\p{^Block=		Sinhala}', "");
Expect(0, 3583, '\P{Block=		Sinhala}', "");
Expect(1, 3583, '\P{^Block=		Sinhala}', "");
Expect(0, 3455, '\p{Block=		Sinhala}', "");
Expect(1, 3455, '\p{^Block=		Sinhala}', "");
Expect(1, 3455, '\P{Block=		Sinhala}', "");
Expect(0, 3455, '\P{^Block=		Sinhala}', "");
Error('\p{Blk=/a/ _Sinhala}');
Error('\P{Blk=/a/ _Sinhala}');
Expect(1, 3583, '\p{Blk:   sinhala}', "");
Expect(0, 3583, '\p{^Blk:   sinhala}', "");
Expect(0, 3583, '\P{Blk:   sinhala}', "");
Expect(1, 3583, '\P{^Blk:   sinhala}', "");
Expect(0, 3455, '\p{Blk:   sinhala}', "");
Expect(1, 3455, '\p{^Blk:   sinhala}', "");
Expect(1, 3455, '\P{Blk:   sinhala}', "");
Expect(0, 3455, '\P{^Blk:   sinhala}', "");
Expect(1, 3583, '\p{Blk: SINHALA}', "");
Expect(0, 3583, '\p{^Blk: SINHALA}', "");
Expect(0, 3583, '\P{Blk: SINHALA}', "");
Expect(1, 3583, '\P{^Blk: SINHALA}', "");
Expect(0, 3455, '\p{Blk: SINHALA}', "");
Expect(1, 3455, '\p{^Blk: SINHALA}', "");
Expect(1, 3455, '\P{Blk: SINHALA}', "");
Expect(0, 3455, '\P{^Blk: SINHALA}', "");
Error('\p{Is_Block= Sinhala:=}');
Error('\P{Is_Block= Sinhala:=}');
Expect(1, 3583, '\p{Is_Block:   sinhala}', "");
Expect(0, 3583, '\p{^Is_Block:   sinhala}', "");
Expect(0, 3583, '\P{Is_Block:   sinhala}', "");
Expect(1, 3583, '\P{^Is_Block:   sinhala}', "");
Expect(0, 3455, '\p{Is_Block:   sinhala}', "");
Expect(1, 3455, '\p{^Is_Block:   sinhala}', "");
Expect(1, 3455, '\P{Is_Block:   sinhala}', "");
Expect(0, 3455, '\P{^Is_Block:   sinhala}', "");
Expect(1, 3583, '\p{Is_Block= Sinhala}', "");
Expect(0, 3583, '\p{^Is_Block= Sinhala}', "");
Expect(0, 3583, '\P{Is_Block= Sinhala}', "");
Expect(1, 3583, '\P{^Is_Block= Sinhala}', "");
Expect(0, 3455, '\p{Is_Block= Sinhala}', "");
Expect(1, 3455, '\p{^Is_Block= Sinhala}', "");
Expect(1, 3455, '\P{Is_Block= Sinhala}', "");
Expect(0, 3455, '\P{^Is_Block= Sinhala}', "");
Error('\p{Is_Blk=	:=Sinhala}');
Error('\P{Is_Blk=	:=Sinhala}');
Expect(1, 3583, '\p{Is_Blk:sinhala}', "");
Expect(0, 3583, '\p{^Is_Blk:sinhala}', "");
Expect(0, 3583, '\P{Is_Blk:sinhala}', "");
Expect(1, 3583, '\P{^Is_Blk:sinhala}', "");
Expect(0, 3455, '\p{Is_Blk:sinhala}', "");
Expect(1, 3455, '\p{^Is_Blk:sinhala}', "");
Expect(1, 3455, '\P{Is_Blk:sinhala}', "");
Expect(0, 3455, '\P{^Is_Blk:sinhala}', "");
Expect(1, 3583, '\p{Is_Blk:   -SINHALA}', "");
Expect(0, 3583, '\p{^Is_Blk:   -SINHALA}', "");
Expect(0, 3583, '\P{Is_Blk:   -SINHALA}', "");
Expect(1, 3583, '\P{^Is_Blk:   -SINHALA}', "");
Expect(0, 3455, '\p{Is_Blk:   -SINHALA}', "");
Expect(1, 3455, '\p{^Is_Blk:   -SINHALA}', "");
Expect(1, 3455, '\P{Is_Blk:   -SINHALA}', "");
Expect(0, 3455, '\P{^Is_Blk:   -SINHALA}', "");
Error('\p{Block=/a/-	Glagolitic}');
Error('\P{Block=/a/-	Glagolitic}');
Expect(1, 11359, '\p{Block=glagolitic}', "");
Expect(0, 11359, '\p{^Block=glagolitic}', "");
Expect(0, 11359, '\P{Block=glagolitic}', "");
Expect(1, 11359, '\P{^Block=glagolitic}', "");
Expect(0, 11263, '\p{Block=glagolitic}', "");
Expect(1, 11263, '\p{^Block=glagolitic}', "");
Expect(1, 11263, '\P{Block=glagolitic}', "");
Expect(0, 11263, '\P{^Block=glagolitic}', "");
Expect(1, 11359, '\p{Block=	_Glagolitic}', "");
Expect(0, 11359, '\p{^Block=	_Glagolitic}', "");
Expect(0, 11359, '\P{Block=	_Glagolitic}', "");
Expect(1, 11359, '\P{^Block=	_Glagolitic}', "");
Expect(0, 11263, '\p{Block=	_Glagolitic}', "");
Expect(1, 11263, '\p{^Block=	_Glagolitic}', "");
Expect(1, 11263, '\P{Block=	_Glagolitic}', "");
Expect(0, 11263, '\P{^Block=	_Glagolitic}', "");
Error('\p{Blk=/a/GLAGOLITIC}');
Error('\P{Blk=/a/GLAGOLITIC}');
Expect(1, 11359, '\p{Blk=glagolitic}', "");
Expect(0, 11359, '\p{^Blk=glagolitic}', "");
Expect(0, 11359, '\P{Blk=glagolitic}', "");
Expect(1, 11359, '\P{^Blk=glagolitic}', "");
Expect(0, 11263, '\p{Blk=glagolitic}', "");
Expect(1, 11263, '\p{^Blk=glagolitic}', "");
Expect(1, 11263, '\P{Blk=glagolitic}', "");
Expect(0, 11263, '\P{^Blk=glagolitic}', "");
Expect(1, 11359, '\p{Blk:	Glagolitic}', "");
Expect(0, 11359, '\p{^Blk:	Glagolitic}', "");
Expect(0, 11359, '\P{Blk:	Glagolitic}', "");
Expect(1, 11359, '\P{^Blk:	Glagolitic}', "");
Expect(0, 11263, '\p{Blk:	Glagolitic}', "");
Expect(1, 11263, '\p{^Blk:	Glagolitic}', "");
Expect(1, 11263, '\P{Blk:	Glagolitic}', "");
Expect(0, 11263, '\P{^Blk:	Glagolitic}', "");
Error('\p{Is_Block=  Glagolitic:=}');
Error('\P{Is_Block=  Glagolitic:=}');
Expect(1, 11359, '\p{Is_Block=glagolitic}', "");
Expect(0, 11359, '\p{^Is_Block=glagolitic}', "");
Expect(0, 11359, '\P{Is_Block=glagolitic}', "");
Expect(1, 11359, '\P{^Is_Block=glagolitic}', "");
Expect(0, 11263, '\p{Is_Block=glagolitic}', "");
Expect(1, 11263, '\p{^Is_Block=glagolitic}', "");
Expect(1, 11263, '\P{Is_Block=glagolitic}', "");
Expect(0, 11263, '\P{^Is_Block=glagolitic}', "");
Expect(1, 11359, '\p{Is_Block: _ Glagolitic}', "");
Expect(0, 11359, '\p{^Is_Block: _ Glagolitic}', "");
Expect(0, 11359, '\P{Is_Block: _ Glagolitic}', "");
Expect(1, 11359, '\P{^Is_Block: _ Glagolitic}', "");
Expect(0, 11263, '\p{Is_Block: _ Glagolitic}', "");
Expect(1, 11263, '\p{^Is_Block: _ Glagolitic}', "");
Expect(1, 11263, '\P{Is_Block: _ Glagolitic}', "");
Expect(0, 11263, '\P{^Is_Block: _ Glagolitic}', "");
Error('\p{Is_Blk=/a/__Glagolitic}');
Error('\P{Is_Blk=/a/__Glagolitic}');
Expect(1, 11359, '\p{Is_Blk=glagolitic}', "");
Expect(0, 11359, '\p{^Is_Blk=glagolitic}', "");
Expect(0, 11359, '\P{Is_Blk=glagolitic}', "");
Expect(1, 11359, '\P{^Is_Blk=glagolitic}', "");
Expect(0, 11263, '\p{Is_Blk=glagolitic}', "");
Expect(1, 11263, '\p{^Is_Blk=glagolitic}', "");
Expect(1, 11263, '\P{Is_Blk=glagolitic}', "");
Expect(0, 11263, '\P{^Is_Blk=glagolitic}', "");
Expect(1, 11359, '\p{Is_Blk=__Glagolitic}', "");
Expect(0, 11359, '\p{^Is_Blk=__Glagolitic}', "");
Expect(0, 11359, '\P{Is_Blk=__Glagolitic}', "");
Expect(1, 11359, '\P{^Is_Blk=__Glagolitic}', "");
Expect(0, 11263, '\p{Is_Blk=__Glagolitic}', "");
Expect(1, 11263, '\p{^Is_Blk=__Glagolitic}', "");
Expect(1, 11263, '\P{Is_Blk=__Glagolitic}', "");
Expect(0, 11263, '\P{^Is_Blk=__Glagolitic}', "");
Error('\p{Block=:= _Tagalog}');
Error('\P{Block=:= _Tagalog}');
Expect(1, 5919, '\p{Block=tagalog}', "");
Expect(0, 5919, '\p{^Block=tagalog}', "");
Expect(0, 5919, '\P{Block=tagalog}', "");
Expect(1, 5919, '\P{^Block=tagalog}', "");
Expect(0, 5887, '\p{Block=tagalog}', "");
Expect(1, 5887, '\p{^Block=tagalog}', "");
Expect(1, 5887, '\P{Block=tagalog}', "");
Expect(0, 5887, '\P{^Block=tagalog}', "");
Expect(1, 5919, '\p{Block=- tagalog}', "");
Expect(0, 5919, '\p{^Block=- tagalog}', "");
Expect(0, 5919, '\P{Block=- tagalog}', "");
Expect(1, 5919, '\P{^Block=- tagalog}', "");
Expect(0, 5887, '\p{Block=- tagalog}', "");
Expect(1, 5887, '\p{^Block=- tagalog}', "");
Expect(1, 5887, '\P{Block=- tagalog}', "");
Expect(0, 5887, '\P{^Block=- tagalog}', "");
Error('\p{Blk=	/a/Tagalog}');
Error('\P{Blk=	/a/Tagalog}');
Expect(1, 5919, '\p{Blk=tagalog}', "");
Expect(0, 5919, '\p{^Blk=tagalog}', "");
Expect(0, 5919, '\P{Blk=tagalog}', "");
Expect(1, 5919, '\P{^Blk=tagalog}', "");
Expect(0, 5887, '\p{Blk=tagalog}', "");
Expect(1, 5887, '\p{^Blk=tagalog}', "");
Expect(1, 5887, '\P{Blk=tagalog}', "");
Expect(0, 5887, '\P{^Blk=tagalog}', "");
Expect(1, 5919, '\p{Blk=_-Tagalog}', "");
Expect(0, 5919, '\p{^Blk=_-Tagalog}', "");
Expect(0, 5919, '\P{Blk=_-Tagalog}', "");
Expect(1, 5919, '\P{^Blk=_-Tagalog}', "");
Expect(0, 5887, '\p{Blk=_-Tagalog}', "");
Expect(1, 5887, '\p{^Blk=_-Tagalog}', "");
Expect(1, 5887, '\P{Blk=_-Tagalog}', "");
Expect(0, 5887, '\P{^Blk=_-Tagalog}', "");
Error('\p{Is_Block: -/a/Tagalog}');
Error('\P{Is_Block: -/a/Tagalog}');
Expect(1, 5919, '\p{Is_Block=tagalog}', "");
Expect(0, 5919, '\p{^Is_Block=tagalog}', "");
Expect(0, 5919, '\P{Is_Block=tagalog}', "");
Expect(1, 5919, '\P{^Is_Block=tagalog}', "");
Expect(0, 5887, '\p{Is_Block=tagalog}', "");
Expect(1, 5887, '\p{^Is_Block=tagalog}', "");
Expect(1, 5887, '\P{Is_Block=tagalog}', "");
Expect(0, 5887, '\P{^Is_Block=tagalog}', "");
Expect(1, 5919, '\p{Is_Block=_Tagalog}', "");
Expect(0, 5919, '\p{^Is_Block=_Tagalog}', "");
Expect(0, 5919, '\P{Is_Block=_Tagalog}', "");
Expect(1, 5919, '\P{^Is_Block=_Tagalog}', "");
Expect(0, 5887, '\p{Is_Block=_Tagalog}', "");
Expect(1, 5887, '\p{^Is_Block=_Tagalog}', "");
Expect(1, 5887, '\P{Is_Block=_Tagalog}', "");
Expect(0, 5887, '\P{^Is_Block=_Tagalog}', "");
Error('\p{Is_Blk=_ tagalog:=}');
Error('\P{Is_Blk=_ tagalog:=}');
Expect(1, 5919, '\p{Is_Blk=tagalog}', "");
Expect(0, 5919, '\p{^Is_Blk=tagalog}', "");
Expect(0, 5919, '\P{Is_Blk=tagalog}', "");
Expect(1, 5919, '\P{^Is_Blk=tagalog}', "");
Expect(0, 5887, '\p{Is_Blk=tagalog}', "");
Expect(1, 5887, '\p{^Is_Blk=tagalog}', "");
Expect(1, 5887, '\P{Is_Blk=tagalog}', "");
Expect(0, 5887, '\P{^Is_Blk=tagalog}', "");
Expect(1, 5919, '\p{Is_Blk=  Tagalog}', "");
Expect(0, 5919, '\p{^Is_Blk=  Tagalog}', "");
Expect(0, 5919, '\P{Is_Blk=  Tagalog}', "");
Expect(1, 5919, '\P{^Is_Blk=  Tagalog}', "");
Expect(0, 5887, '\p{Is_Blk=  Tagalog}', "");
Expect(1, 5887, '\p{^Is_Blk=  Tagalog}', "");
Expect(1, 5887, '\P{Is_Blk=  Tagalog}', "");
Expect(0, 5887, '\P{^Is_Blk=  Tagalog}', "");
Error('\p{Block=/a/_-kharoshthi}');
Error('\P{Block=/a/_-kharoshthi}');
Expect(1, 68191, '\p{Block=kharoshthi}', "");
Expect(0, 68191, '\p{^Block=kharoshthi}', "");
Expect(0, 68191, '\P{Block=kharoshthi}', "");
Expect(1, 68191, '\P{^Block=kharoshthi}', "");
Expect(0, 68095, '\p{Block=kharoshthi}', "");
Expect(1, 68095, '\p{^Block=kharoshthi}', "");
Expect(1, 68095, '\P{Block=kharoshthi}', "");
Expect(0, 68095, '\P{^Block=kharoshthi}', "");
Expect(1, 68191, '\p{Block=		KHAROSHTHI}', "");
Expect(0, 68191, '\p{^Block=		KHAROSHTHI}', "");
Expect(0, 68191, '\P{Block=		KHAROSHTHI}', "");
Expect(1, 68191, '\P{^Block=		KHAROSHTHI}', "");
Expect(0, 68095, '\p{Block=		KHAROSHTHI}', "");
Expect(1, 68095, '\p{^Block=		KHAROSHTHI}', "");
Expect(1, 68095, '\P{Block=		KHAROSHTHI}', "");
Expect(0, 68095, '\P{^Block=		KHAROSHTHI}', "");
Error('\p{Blk=-/a/kharoshthi}');
Error('\P{Blk=-/a/kharoshthi}');
Expect(1, 68191, '\p{Blk: kharoshthi}', "");
Expect(0, 68191, '\p{^Blk: kharoshthi}', "");
Expect(0, 68191, '\P{Blk: kharoshthi}', "");
Expect(1, 68191, '\P{^Blk: kharoshthi}', "");
Expect(0, 68095, '\p{Blk: kharoshthi}', "");
Expect(1, 68095, '\p{^Blk: kharoshthi}', "");
Expect(1, 68095, '\P{Blk: kharoshthi}', "");
Expect(0, 68095, '\P{^Blk: kharoshthi}', "");
Expect(1, 68191, '\p{Blk=	-kharoshthi}', "");
Expect(0, 68191, '\p{^Blk=	-kharoshthi}', "");
Expect(0, 68191, '\P{Blk=	-kharoshthi}', "");
Expect(1, 68191, '\P{^Blk=	-kharoshthi}', "");
Expect(0, 68095, '\p{Blk=	-kharoshthi}', "");
Expect(1, 68095, '\p{^Blk=	-kharoshthi}', "");
Expect(1, 68095, '\P{Blk=	-kharoshthi}', "");
Expect(0, 68095, '\P{^Blk=	-kharoshthi}', "");
Error('\p{Is_Block=/a/kharoshthi}');
Error('\P{Is_Block=/a/kharoshthi}');
Expect(1, 68191, '\p{Is_Block=kharoshthi}', "");
Expect(0, 68191, '\p{^Is_Block=kharoshthi}', "");
Expect(0, 68191, '\P{Is_Block=kharoshthi}', "");
Expect(1, 68191, '\P{^Is_Block=kharoshthi}', "");
Expect(0, 68095, '\p{Is_Block=kharoshthi}', "");
Expect(1, 68095, '\p{^Is_Block=kharoshthi}', "");
Expect(1, 68095, '\P{Is_Block=kharoshthi}', "");
Expect(0, 68095, '\P{^Is_Block=kharoshthi}', "");
Expect(1, 68191, '\p{Is_Block=  Kharoshthi}', "");
Expect(0, 68191, '\p{^Is_Block=  Kharoshthi}', "");
Expect(0, 68191, '\P{Is_Block=  Kharoshthi}', "");
Expect(1, 68191, '\P{^Is_Block=  Kharoshthi}', "");
Expect(0, 68095, '\p{Is_Block=  Kharoshthi}', "");
Expect(1, 68095, '\p{^Is_Block=  Kharoshthi}', "");
Expect(1, 68095, '\P{Is_Block=  Kharoshthi}', "");
Expect(0, 68095, '\P{^Is_Block=  Kharoshthi}', "");
Error('\p{Is_Blk= /a/kharoshthi}');
Error('\P{Is_Blk= /a/kharoshthi}');
Expect(1, 68191, '\p{Is_Blk=kharoshthi}', "");
Expect(0, 68191, '\p{^Is_Blk=kharoshthi}', "");
Expect(0, 68191, '\P{Is_Blk=kharoshthi}', "");
Expect(1, 68191, '\P{^Is_Blk=kharoshthi}', "");
Expect(0, 68095, '\p{Is_Blk=kharoshthi}', "");
Expect(1, 68095, '\p{^Is_Blk=kharoshthi}', "");
Expect(1, 68095, '\P{Is_Blk=kharoshthi}', "");
Expect(0, 68095, '\P{^Is_Blk=kharoshthi}', "");
Expect(1, 68191, '\p{Is_Blk: _-KHAROSHTHI}', "");
Expect(0, 68191, '\p{^Is_Blk: _-KHAROSHTHI}', "");
Expect(0, 68191, '\P{Is_Blk: _-KHAROSHTHI}', "");
Expect(1, 68191, '\P{^Is_Blk: _-KHAROSHTHI}', "");
Expect(0, 68095, '\p{Is_Blk: _-KHAROSHTHI}', "");
Expect(1, 68095, '\p{^Is_Blk: _-KHAROSHTHI}', "");
Expect(1, 68095, '\P{Is_Blk: _-KHAROSHTHI}', "");
Expect(0, 68095, '\P{^Is_Blk: _-KHAROSHTHI}', "");
Error('\p{Block=:=Arabic Supplement}');
Error('\P{Block=:=Arabic Supplement}');
Expect(1, 1919, '\p{Block=arabicsupplement}', "");
Expect(0, 1919, '\p{^Block=arabicsupplement}', "");
Expect(0, 1919, '\P{Block=arabicsupplement}', "");
Expect(1, 1919, '\P{^Block=arabicsupplement}', "");
Expect(0, 1871, '\p{Block=arabicsupplement}', "");
Expect(1, 1871, '\p{^Block=arabicsupplement}', "");
Expect(1, 1871, '\P{Block=arabicsupplement}', "");
Expect(0, 1871, '\P{^Block=arabicsupplement}', "");
Expect(1, 1919, '\p{Block=_ARABIC Supplement}', "");
Expect(0, 1919, '\p{^Block=_ARABIC Supplement}', "");
Expect(0, 1919, '\P{Block=_ARABIC Supplement}', "");
Expect(1, 1919, '\P{^Block=_ARABIC Supplement}', "");
Expect(0, 1871, '\p{Block=_ARABIC Supplement}', "");
Expect(1, 1871, '\p{^Block=_ARABIC Supplement}', "");
Expect(1, 1871, '\P{Block=_ARABIC Supplement}', "");
Expect(0, 1871, '\P{^Block=_ARABIC Supplement}', "");
Error('\p{Blk:   _/a/arabic	Supplement}');
Error('\P{Blk:   _/a/arabic	Supplement}');
Expect(1, 1919, '\p{Blk=arabicsupplement}', "");
Expect(0, 1919, '\p{^Blk=arabicsupplement}', "");
Expect(0, 1919, '\P{Blk=arabicsupplement}', "");
Expect(1, 1919, '\P{^Blk=arabicsupplement}', "");
Expect(0, 1871, '\p{Blk=arabicsupplement}', "");
Expect(1, 1871, '\p{^Blk=arabicsupplement}', "");
Expect(1, 1871, '\P{Blk=arabicsupplement}', "");
Expect(0, 1871, '\P{^Blk=arabicsupplement}', "");
Expect(1, 1919, '\p{Blk=_ARABIC	Supplement}', "");
Expect(0, 1919, '\p{^Blk=_ARABIC	Supplement}', "");
Expect(0, 1919, '\P{Blk=_ARABIC	Supplement}', "");
Expect(1, 1919, '\P{^Blk=_ARABIC	Supplement}', "");
Expect(0, 1871, '\p{Blk=_ARABIC	Supplement}', "");
Expect(1, 1871, '\p{^Blk=_ARABIC	Supplement}', "");
Expect(1, 1871, '\P{Blk=_ARABIC	Supplement}', "");
Expect(0, 1871, '\P{^Blk=_ARABIC	Supplement}', "");
Error('\p{Is_Block= /a/ARABIC_supplement}');
Error('\P{Is_Block= /a/ARABIC_supplement}');
Expect(1, 1919, '\p{Is_Block=arabicsupplement}', "");
Expect(0, 1919, '\p{^Is_Block=arabicsupplement}', "");
Expect(0, 1919, '\P{Is_Block=arabicsupplement}', "");
Expect(1, 1919, '\P{^Is_Block=arabicsupplement}', "");
Expect(0, 1871, '\p{Is_Block=arabicsupplement}', "");
Expect(1, 1871, '\p{^Is_Block=arabicsupplement}', "");
Expect(1, 1871, '\P{Is_Block=arabicsupplement}', "");
Expect(0, 1871, '\P{^Is_Block=arabicsupplement}', "");
Expect(1, 1919, '\p{Is_Block=_ Arabic	SUPPLEMENT}', "");
Expect(0, 1919, '\p{^Is_Block=_ Arabic	SUPPLEMENT}', "");
Expect(0, 1919, '\P{Is_Block=_ Arabic	SUPPLEMENT}', "");
Expect(1, 1919, '\P{^Is_Block=_ Arabic	SUPPLEMENT}', "");
Expect(0, 1871, '\p{Is_Block=_ Arabic	SUPPLEMENT}', "");
Expect(1, 1871, '\p{^Is_Block=_ Arabic	SUPPLEMENT}', "");
Expect(1, 1871, '\P{Is_Block=_ Arabic	SUPPLEMENT}', "");
Expect(0, 1871, '\P{^Is_Block=_ Arabic	SUPPLEMENT}', "");
Error('\p{Is_Blk=/a/ 	Arabic SUPPLEMENT}');
Error('\P{Is_Blk=/a/ 	Arabic SUPPLEMENT}');
Expect(1, 1919, '\p{Is_Blk=arabicsupplement}', "");
Expect(0, 1919, '\p{^Is_Blk=arabicsupplement}', "");
Expect(0, 1919, '\P{Is_Blk=arabicsupplement}', "");
Expect(1, 1919, '\P{^Is_Blk=arabicsupplement}', "");
Expect(0, 1871, '\p{Is_Blk=arabicsupplement}', "");
Expect(1, 1871, '\p{^Is_Blk=arabicsupplement}', "");
Expect(1, 1871, '\P{Is_Blk=arabicsupplement}', "");
Expect(0, 1871, '\P{^Is_Blk=arabicsupplement}', "");
Expect(1, 1919, '\p{Is_Blk=-	arabic-Supplement}', "");
Expect(0, 1919, '\p{^Is_Blk=-	arabic-Supplement}', "");
Expect(0, 1919, '\P{Is_Blk=-	arabic-Supplement}', "");
Expect(1, 1919, '\P{^Is_Blk=-	arabic-Supplement}', "");
Expect(0, 1871, '\p{Is_Blk=-	arabic-Supplement}', "");
Expect(1, 1871, '\p{^Is_Blk=-	arabic-Supplement}', "");
Expect(1, 1871, '\P{Is_Blk=-	arabic-Supplement}', "");
Expect(0, 1871, '\P{^Is_Blk=-	arabic-Supplement}', "");
Error('\p{Block=	-CUNEIFORM Numbers/a/and	Punctuation}');
Error('\P{Block=	-CUNEIFORM Numbers/a/and	Punctuation}');
Expect(1, 74879, '\p{Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{Block=_-cuneiform	NUMBERS_And_Punctuation}', "");
Expect(0, 74879, '\p{^Block=_-cuneiform	NUMBERS_And_Punctuation}', "");
Expect(0, 74879, '\P{Block=_-cuneiform	NUMBERS_And_Punctuation}', "");
Expect(1, 74879, '\P{^Block=_-cuneiform	NUMBERS_And_Punctuation}', "");
Expect(0, 74751, '\p{Block=_-cuneiform	NUMBERS_And_Punctuation}', "");
Expect(1, 74751, '\p{^Block=_-cuneiform	NUMBERS_And_Punctuation}', "");
Expect(1, 74751, '\P{Block=_-cuneiform	NUMBERS_And_Punctuation}', "");
Expect(0, 74751, '\P{^Block=_-cuneiform	NUMBERS_And_Punctuation}', "");
Error('\p{Blk=-	Cuneiform/a/Numbers And-PUNCTUATION}');
Error('\P{Blk=-	Cuneiform/a/Numbers And-PUNCTUATION}');
Expect(1, 74879, '\p{Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{Blk=_	Cuneiform NUMBERS And Punctuation}', "");
Expect(0, 74879, '\p{^Blk=_	Cuneiform NUMBERS And Punctuation}', "");
Expect(0, 74879, '\P{Blk=_	Cuneiform NUMBERS And Punctuation}', "");
Expect(1, 74879, '\P{^Blk=_	Cuneiform NUMBERS And Punctuation}', "");
Expect(0, 74751, '\p{Blk=_	Cuneiform NUMBERS And Punctuation}', "");
Expect(1, 74751, '\p{^Blk=_	Cuneiform NUMBERS And Punctuation}', "");
Expect(1, 74751, '\P{Blk=_	Cuneiform NUMBERS And Punctuation}', "");
Expect(0, 74751, '\P{^Blk=_	Cuneiform NUMBERS And Punctuation}', "");
Error('\p{Is_Block=-cuneiform/a/NUMBERS And PUNCTUATION}');
Error('\P{Is_Block=-cuneiform/a/NUMBERS And PUNCTUATION}');
Expect(1, 74879, '\p{Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^Is_Block=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{Is_Block=_CuneiformNumbers AND-Punctuation}', "");
Expect(0, 74879, '\p{^Is_Block=_CuneiformNumbers AND-Punctuation}', "");
Expect(0, 74879, '\P{Is_Block=_CuneiformNumbers AND-Punctuation}', "");
Expect(1, 74879, '\P{^Is_Block=_CuneiformNumbers AND-Punctuation}', "");
Expect(0, 74751, '\p{Is_Block=_CuneiformNumbers AND-Punctuation}', "");
Expect(1, 74751, '\p{^Is_Block=_CuneiformNumbers AND-Punctuation}', "");
Expect(1, 74751, '\P{Is_Block=_CuneiformNumbers AND-Punctuation}', "");
Expect(0, 74751, '\P{^Is_Block=_CuneiformNumbers AND-Punctuation}', "");
Error('\p{Is_Blk=	:=cuneiform-Numbersand_Punctuation}');
Error('\P{Is_Blk=	:=cuneiform-Numbersand_Punctuation}');
Expect(1, 74879, '\p{Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^Is_Blk=cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{Is_Blk= _cuneiform	numbersAnd_Punctuation}', "");
Expect(0, 74879, '\p{^Is_Blk= _cuneiform	numbersAnd_Punctuation}', "");
Expect(0, 74879, '\P{Is_Blk= _cuneiform	numbersAnd_Punctuation}', "");
Expect(1, 74879, '\P{^Is_Blk= _cuneiform	numbersAnd_Punctuation}', "");
Expect(0, 74751, '\p{Is_Blk= _cuneiform	numbersAnd_Punctuation}', "");
Expect(1, 74751, '\p{^Is_Blk= _cuneiform	numbersAnd_Punctuation}', "");
Expect(1, 74751, '\P{Is_Blk= _cuneiform	numbersAnd_Punctuation}', "");
Expect(0, 74751, '\P{^Is_Blk= _cuneiform	numbersAnd_Punctuation}', "");
Error('\p{Block=_	DEVANAGARI:=Extended}');
Error('\P{Block=_	DEVANAGARI:=Extended}');
Expect(1, 43263, '\p{Block=devanagariextended}', "");
Expect(0, 43263, '\p{^Block=devanagariextended}', "");
Expect(0, 43263, '\P{Block=devanagariextended}', "");
Expect(1, 43263, '\P{^Block=devanagariextended}', "");
Expect(0, 43231, '\p{Block=devanagariextended}', "");
Expect(1, 43231, '\p{^Block=devanagariextended}', "");
Expect(1, 43231, '\P{Block=devanagariextended}', "");
Expect(0, 43231, '\P{^Block=devanagariextended}', "");
Expect(1, 43263, '\p{Block=		Devanagari_extended}', "");
Expect(0, 43263, '\p{^Block=		Devanagari_extended}', "");
Expect(0, 43263, '\P{Block=		Devanagari_extended}', "");
Expect(1, 43263, '\P{^Block=		Devanagari_extended}', "");
Expect(0, 43231, '\p{Block=		Devanagari_extended}', "");
Expect(1, 43231, '\p{^Block=		Devanagari_extended}', "");
Expect(1, 43231, '\P{Block=		Devanagari_extended}', "");
Expect(0, 43231, '\P{^Block=		Devanagari_extended}', "");
Error('\p{Blk=-Devanagari:=Extended}');
Error('\P{Blk=-Devanagari:=Extended}');
Expect(1, 43263, '\p{Blk:	devanagariextended}', "");
Expect(0, 43263, '\p{^Blk:	devanagariextended}', "");
Expect(0, 43263, '\P{Blk:	devanagariextended}', "");
Expect(1, 43263, '\P{^Blk:	devanagariextended}', "");
Expect(0, 43231, '\p{Blk:	devanagariextended}', "");
Expect(1, 43231, '\p{^Blk:	devanagariextended}', "");
Expect(1, 43231, '\P{Blk:	devanagariextended}', "");
Expect(0, 43231, '\P{^Blk:	devanagariextended}', "");
Expect(1, 43263, '\p{Blk=		DEVANAGARI	Extended}', "");
Expect(0, 43263, '\p{^Blk=		DEVANAGARI	Extended}', "");
Expect(0, 43263, '\P{Blk=		DEVANAGARI	Extended}', "");
Expect(1, 43263, '\P{^Blk=		DEVANAGARI	Extended}', "");
Expect(0, 43231, '\p{Blk=		DEVANAGARI	Extended}', "");
Expect(1, 43231, '\p{^Blk=		DEVANAGARI	Extended}', "");
Expect(1, 43231, '\P{Blk=		DEVANAGARI	Extended}', "");
Expect(0, 43231, '\P{^Blk=		DEVANAGARI	Extended}', "");
Error('\p{Is_Block=:=	devanagari Extended}');
Error('\P{Is_Block=:=	devanagari Extended}');
Expect(1, 43263, '\p{Is_Block: devanagariextended}', "");
Expect(0, 43263, '\p{^Is_Block: devanagariextended}', "");
Expect(0, 43263, '\P{Is_Block: devanagariextended}', "");
Expect(1, 43263, '\P{^Is_Block: devanagariextended}', "");
Expect(0, 43231, '\p{Is_Block: devanagariextended}', "");
Expect(1, 43231, '\p{^Is_Block: devanagariextended}', "");
Expect(1, 43231, '\P{Is_Block: devanagariextended}', "");
Expect(0, 43231, '\P{^Is_Block: devanagariextended}', "");
Expect(1, 43263, '\p{Is_Block=	devanagari Extended}', "");
Expect(0, 43263, '\p{^Is_Block=	devanagari Extended}', "");
Expect(0, 43263, '\P{Is_Block=	devanagari Extended}', "");
Expect(1, 43263, '\P{^Is_Block=	devanagari Extended}', "");
Expect(0, 43231, '\p{Is_Block=	devanagari Extended}', "");
Expect(1, 43231, '\p{^Is_Block=	devanagari Extended}', "");
Expect(1, 43231, '\P{Is_Block=	devanagari Extended}', "");
Expect(0, 43231, '\P{^Is_Block=	devanagari Extended}', "");
Error('\p{Is_Blk=	/a/Devanagari	Extended}');
Error('\P{Is_Blk=	/a/Devanagari	Extended}');
Expect(1, 43263, '\p{Is_Blk=devanagariextended}', "");
Expect(0, 43263, '\p{^Is_Blk=devanagariextended}', "");
Expect(0, 43263, '\P{Is_Blk=devanagariextended}', "");
Expect(1, 43263, '\P{^Is_Blk=devanagariextended}', "");
Expect(0, 43231, '\p{Is_Blk=devanagariextended}', "");
Expect(1, 43231, '\p{^Is_Blk=devanagariextended}', "");
Expect(1, 43231, '\P{Is_Blk=devanagariextended}', "");
Expect(0, 43231, '\P{^Is_Blk=devanagariextended}', "");
Expect(1, 43263, '\p{Is_Blk=-	devanagari-Extended}', "");
Expect(0, 43263, '\p{^Is_Blk=-	devanagari-Extended}', "");
Expect(0, 43263, '\P{Is_Blk=-	devanagari-Extended}', "");
Expect(1, 43263, '\P{^Is_Blk=-	devanagari-Extended}', "");
Expect(0, 43231, '\p{Is_Blk=-	devanagari-Extended}', "");
Expect(1, 43231, '\p{^Is_Blk=-	devanagari-Extended}', "");
Expect(1, 43231, '\P{Is_Blk=-	devanagari-Extended}', "");
Expect(0, 43231, '\P{^Is_Blk=-	devanagari-Extended}', "");
Error('\p{Block=- Yi/a/Syllables}');
Error('\P{Block=- Yi/a/Syllables}');
Expect(1, 42127, '\p{Block=yisyllables}', "");
Expect(0, 42127, '\p{^Block=yisyllables}', "");
Expect(0, 42127, '\P{Block=yisyllables}', "");
Expect(1, 42127, '\P{^Block=yisyllables}', "");
Expect(0, 40959, '\p{Block=yisyllables}', "");
Expect(1, 40959, '\p{^Block=yisyllables}', "");
Expect(1, 40959, '\P{Block=yisyllables}', "");
Expect(0, 40959, '\P{^Block=yisyllables}', "");
Expect(1, 42127, '\p{Block=	YiSyllables}', "");
Expect(0, 42127, '\p{^Block=	YiSyllables}', "");
Expect(0, 42127, '\P{Block=	YiSyllables}', "");
Expect(1, 42127, '\P{^Block=	YiSyllables}', "");
Expect(0, 40959, '\p{Block=	YiSyllables}', "");
Expect(1, 40959, '\p{^Block=	YiSyllables}', "");
Expect(1, 40959, '\P{Block=	YiSyllables}', "");
Expect(0, 40959, '\P{^Block=	YiSyllables}', "");
Error('\p{Blk=__Yi	Syllables/a/}');
Error('\P{Blk=__Yi	Syllables/a/}');
Expect(1, 42127, '\p{Blk=yisyllables}', "");
Expect(0, 42127, '\p{^Blk=yisyllables}', "");
Expect(0, 42127, '\P{Blk=yisyllables}', "");
Expect(1, 42127, '\P{^Blk=yisyllables}', "");
Expect(0, 40959, '\p{Blk=yisyllables}', "");
Expect(1, 40959, '\p{^Blk=yisyllables}', "");
Expect(1, 40959, '\P{Blk=yisyllables}', "");
Expect(0, 40959, '\P{^Blk=yisyllables}', "");
Expect(1, 42127, '\p{Blk=_ Yi	Syllables}', "");
Expect(0, 42127, '\p{^Blk=_ Yi	Syllables}', "");
Expect(0, 42127, '\P{Blk=_ Yi	Syllables}', "");
Expect(1, 42127, '\P{^Blk=_ Yi	Syllables}', "");
Expect(0, 40959, '\p{Blk=_ Yi	Syllables}', "");
Expect(1, 40959, '\p{^Blk=_ Yi	Syllables}', "");
Expect(1, 40959, '\P{Blk=_ Yi	Syllables}', "");
Expect(0, 40959, '\P{^Blk=_ Yi	Syllables}', "");
Error('\p{Is_Block=-Yi:=Syllables}');
Error('\P{Is_Block=-Yi:=Syllables}');
Expect(1, 42127, '\p{Is_Block=yisyllables}', "");
Expect(0, 42127, '\p{^Is_Block=yisyllables}', "");
Expect(0, 42127, '\P{Is_Block=yisyllables}', "");
Expect(1, 42127, '\P{^Is_Block=yisyllables}', "");
Expect(0, 40959, '\p{Is_Block=yisyllables}', "");
Expect(1, 40959, '\p{^Is_Block=yisyllables}', "");
Expect(1, 40959, '\P{Is_Block=yisyllables}', "");
Expect(0, 40959, '\P{^Is_Block=yisyllables}', "");
Expect(1, 42127, '\p{Is_Block=-Yi	Syllables}', "");
Expect(0, 42127, '\p{^Is_Block=-Yi	Syllables}', "");
Expect(0, 42127, '\P{Is_Block=-Yi	Syllables}', "");
Expect(1, 42127, '\P{^Is_Block=-Yi	Syllables}', "");
Expect(0, 40959, '\p{Is_Block=-Yi	Syllables}', "");
Expect(1, 40959, '\p{^Is_Block=-Yi	Syllables}', "");
Expect(1, 40959, '\P{Is_Block=-Yi	Syllables}', "");
Expect(0, 40959, '\P{^Is_Block=-Yi	Syllables}', "");
Error('\p{Is_Blk= /a/yiSyllables}');
Error('\P{Is_Blk= /a/yiSyllables}');
Expect(1, 42127, '\p{Is_Blk=yisyllables}', "");
Expect(0, 42127, '\p{^Is_Blk=yisyllables}', "");
Expect(0, 42127, '\P{Is_Blk=yisyllables}', "");
Expect(1, 42127, '\P{^Is_Blk=yisyllables}', "");
Expect(0, 40959, '\p{Is_Blk=yisyllables}', "");
Expect(1, 40959, '\p{^Is_Blk=yisyllables}', "");
Expect(1, 40959, '\P{Is_Blk=yisyllables}', "");
Expect(0, 40959, '\P{^Is_Blk=yisyllables}', "");
Expect(1, 42127, '\p{Is_Blk=--Yi-syllables}', "");
Expect(0, 42127, '\p{^Is_Blk=--Yi-syllables}', "");
Expect(0, 42127, '\P{Is_Blk=--Yi-syllables}', "");
Expect(1, 42127, '\P{^Is_Blk=--Yi-syllables}', "");
Expect(0, 40959, '\p{Is_Blk=--Yi-syllables}', "");
Expect(1, 40959, '\p{^Is_Blk=--Yi-syllables}', "");
Expect(1, 40959, '\P{Is_Blk=--Yi-syllables}', "");
Expect(0, 40959, '\P{^Is_Blk=--Yi-syllables}', "");
Error('\p{Block= :=combining half	MARKS}');
Error('\P{Block= :=combining half	MARKS}');
Expect(1, 65071, '\p{Block=combininghalfmarks}', "");
Expect(0, 65071, '\p{^Block=combininghalfmarks}', "");
Expect(0, 65071, '\P{Block=combininghalfmarks}', "");
Expect(1, 65071, '\P{^Block=combininghalfmarks}', "");
Expect(0, 65055, '\p{Block=combininghalfmarks}', "");
Expect(1, 65055, '\p{^Block=combininghalfmarks}', "");
Expect(1, 65055, '\P{Block=combininghalfmarks}', "");
Expect(0, 65055, '\P{^Block=combininghalfmarks}', "");
Expect(1, 65071, '\p{Block:    -CombiningHALF-marks}', "");
Expect(0, 65071, '\p{^Block:    -CombiningHALF-marks}', "");
Expect(0, 65071, '\P{Block:    -CombiningHALF-marks}', "");
Expect(1, 65071, '\P{^Block:    -CombiningHALF-marks}', "");
Expect(0, 65055, '\p{Block:    -CombiningHALF-marks}', "");
Expect(1, 65055, '\p{^Block:    -CombiningHALF-marks}', "");
Expect(1, 65055, '\P{Block:    -CombiningHALF-marks}', "");
Expect(0, 65055, '\P{^Block:    -CombiningHALF-marks}', "");
Error('\p{Blk=/a/- Combining	Half	Marks}');
Error('\P{Blk=/a/- Combining	Half	Marks}');
Expect(1, 65071, '\p{Blk=combininghalfmarks}', "");
Expect(0, 65071, '\p{^Blk=combininghalfmarks}', "");
Expect(0, 65071, '\P{Blk=combininghalfmarks}', "");
Expect(1, 65071, '\P{^Blk=combininghalfmarks}', "");
Expect(0, 65055, '\p{Blk=combininghalfmarks}', "");
Expect(1, 65055, '\p{^Blk=combininghalfmarks}', "");
Expect(1, 65055, '\P{Blk=combininghalfmarks}', "");
Expect(0, 65055, '\P{^Blk=combininghalfmarks}', "");
Expect(1, 65071, '\p{Blk=-combining-HALF	Marks}', "");
Expect(0, 65071, '\p{^Blk=-combining-HALF	Marks}', "");
Expect(0, 65071, '\P{Blk=-combining-HALF	Marks}', "");
Expect(1, 65071, '\P{^Blk=-combining-HALF	Marks}', "");
Expect(0, 65055, '\p{Blk=-combining-HALF	Marks}', "");
Expect(1, 65055, '\p{^Blk=-combining-HALF	Marks}', "");
Expect(1, 65055, '\P{Blk=-combining-HALF	Marks}', "");
Expect(0, 65055, '\P{^Blk=-combining-HALF	Marks}', "");
Error('\p{Is_Block=-	COMBINING	half:=Marks}');
Error('\P{Is_Block=-	COMBINING	half:=Marks}');
Expect(1, 65071, '\p{Is_Block=combininghalfmarks}', "");
Expect(0, 65071, '\p{^Is_Block=combininghalfmarks}', "");
Expect(0, 65071, '\P{Is_Block=combininghalfmarks}', "");
Expect(1, 65071, '\P{^Is_Block=combininghalfmarks}', "");
Expect(0, 65055, '\p{Is_Block=combininghalfmarks}', "");
Expect(1, 65055, '\p{^Is_Block=combininghalfmarks}', "");
Expect(1, 65055, '\P{Is_Block=combininghalfmarks}', "");
Expect(0, 65055, '\P{^Is_Block=combininghalfmarks}', "");
Expect(1, 65071, '\p{Is_Block=_Combining_half-Marks}', "");
Expect(0, 65071, '\p{^Is_Block=_Combining_half-Marks}', "");
Expect(0, 65071, '\P{Is_Block=_Combining_half-Marks}', "");
Expect(1, 65071, '\P{^Is_Block=_Combining_half-Marks}', "");
Expect(0, 65055, '\p{Is_Block=_Combining_half-Marks}', "");
Expect(1, 65055, '\p{^Is_Block=_Combining_half-Marks}', "");
Expect(1, 65055, '\P{Is_Block=_Combining_half-Marks}', "");
Expect(0, 65055, '\P{^Is_Block=_Combining_half-Marks}', "");
Error('\p{Is_Blk=	Combining HALF_Marks:=}');
Error('\P{Is_Blk=	Combining HALF_Marks:=}');
Expect(1, 65071, '\p{Is_Blk=combininghalfmarks}', "");
Expect(0, 65071, '\p{^Is_Blk=combininghalfmarks}', "");
Expect(0, 65071, '\P{Is_Blk=combininghalfmarks}', "");
Expect(1, 65071, '\P{^Is_Blk=combininghalfmarks}', "");
Expect(0, 65055, '\p{Is_Blk=combininghalfmarks}', "");
Expect(1, 65055, '\p{^Is_Blk=combininghalfmarks}', "");
Expect(1, 65055, '\P{Is_Blk=combininghalfmarks}', "");
Expect(0, 65055, '\P{^Is_Blk=combininghalfmarks}', "");
Expect(1, 65071, '\p{Is_Blk=__combiningHalf	Marks}', "");
Expect(0, 65071, '\p{^Is_Blk=__combiningHalf	Marks}', "");
Expect(0, 65071, '\P{Is_Blk=__combiningHalf	Marks}', "");
Expect(1, 65071, '\P{^Is_Blk=__combiningHalf	Marks}', "");
Expect(0, 65055, '\p{Is_Blk=__combiningHalf	Marks}', "");
Expect(1, 65055, '\p{^Is_Blk=__combiningHalf	Marks}', "");
Expect(1, 65055, '\P{Is_Blk=__combiningHalf	Marks}', "");
Expect(0, 65055, '\P{^Is_Blk=__combiningHalf	Marks}', "");
Error('\p{Block=:=	Miscellaneous	Symbols-and	Arrows}');
Error('\P{Block=:=	Miscellaneous	Symbols-and	Arrows}');
Expect(1, 11263, '\p{Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{Block:_Miscellaneous Symbols-And-arrows}', "");
Expect(0, 11263, '\p{^Block:_Miscellaneous Symbols-And-arrows}', "");
Expect(0, 11263, '\P{Block:_Miscellaneous Symbols-And-arrows}', "");
Expect(1, 11263, '\P{^Block:_Miscellaneous Symbols-And-arrows}', "");
Expect(0, 11007, '\p{Block:_Miscellaneous Symbols-And-arrows}', "");
Expect(1, 11007, '\p{^Block:_Miscellaneous Symbols-And-arrows}', "");
Expect(1, 11007, '\P{Block:_Miscellaneous Symbols-And-arrows}', "");
Expect(0, 11007, '\P{^Block:_Miscellaneous Symbols-And-arrows}', "");
Error('\p{Blk=_:=Miscellaneous	SYMBOLS-AND-Arrows}');
Error('\P{Blk=_:=Miscellaneous	SYMBOLS-AND-Arrows}');
Expect(1, 11263, '\p{Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{Blk= MISCELLANEOUS-symbols_andArrows}', "");
Expect(0, 11263, '\p{^Blk= MISCELLANEOUS-symbols_andArrows}', "");
Expect(0, 11263, '\P{Blk= MISCELLANEOUS-symbols_andArrows}', "");
Expect(1, 11263, '\P{^Blk= MISCELLANEOUS-symbols_andArrows}', "");
Expect(0, 11007, '\p{Blk= MISCELLANEOUS-symbols_andArrows}', "");
Expect(1, 11007, '\p{^Blk= MISCELLANEOUS-symbols_andArrows}', "");
Expect(1, 11007, '\P{Blk= MISCELLANEOUS-symbols_andArrows}', "");
Expect(0, 11007, '\P{^Blk= MISCELLANEOUS-symbols_andArrows}', "");
Error('\p{Is_Block=  Miscellaneous_SymbolsAnd:=arrows}');
Error('\P{Is_Block=  Miscellaneous_SymbolsAnd:=arrows}');
Expect(1, 11263, '\p{Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^Is_Block=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{Is_Block=	_miscellaneoussymbols-AND-arrows}', "");
Expect(0, 11263, '\p{^Is_Block=	_miscellaneoussymbols-AND-arrows}', "");
Expect(0, 11263, '\P{Is_Block=	_miscellaneoussymbols-AND-arrows}', "");
Expect(1, 11263, '\P{^Is_Block=	_miscellaneoussymbols-AND-arrows}', "");
Expect(0, 11007, '\p{Is_Block=	_miscellaneoussymbols-AND-arrows}', "");
Expect(1, 11007, '\p{^Is_Block=	_miscellaneoussymbols-AND-arrows}', "");
Expect(1, 11007, '\P{Is_Block=	_miscellaneoussymbols-AND-arrows}', "");
Expect(0, 11007, '\P{^Is_Block=	_miscellaneoussymbols-AND-arrows}', "");
Error('\p{Is_Blk=/a/	miscellaneousSymbolsAnd arrows}');
Error('\P{Is_Blk=/a/	miscellaneousSymbolsAnd arrows}');
Expect(1, 11263, '\p{Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^Is_Blk=miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{Is_Blk=-MISCELLANEOUS SymbolsAnd Arrows}', "");
Expect(0, 11263, '\p{^Is_Blk=-MISCELLANEOUS SymbolsAnd Arrows}', "");
Expect(0, 11263, '\P{Is_Blk=-MISCELLANEOUS SymbolsAnd Arrows}', "");
Expect(1, 11263, '\P{^Is_Blk=-MISCELLANEOUS SymbolsAnd Arrows}', "");
Expect(0, 11007, '\p{Is_Blk=-MISCELLANEOUS SymbolsAnd Arrows}', "");
Expect(1, 11007, '\p{^Is_Blk=-MISCELLANEOUS SymbolsAnd Arrows}', "");
Expect(1, 11007, '\P{Is_Blk=-MISCELLANEOUS SymbolsAnd Arrows}', "");
Expect(0, 11007, '\P{^Is_Blk=-MISCELLANEOUS SymbolsAnd Arrows}', "");
Error('\p{Block: _halfwidth-AND Fullwidth-Forms/a/}');
Error('\P{Block: _halfwidth-AND Fullwidth-Forms/a/}');
Expect(1, 65519, '\p{Block:   halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^Block:   halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{Block:   halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^Block:   halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{Block:   halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^Block:   halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{Block:   halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^Block:   halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{Block=-HalfwidthAnd-FullwidthForms}', "");
Expect(0, 65519, '\p{^Block=-HalfwidthAnd-FullwidthForms}', "");
Expect(0, 65519, '\P{Block=-HalfwidthAnd-FullwidthForms}', "");
Expect(1, 65519, '\P{^Block=-HalfwidthAnd-FullwidthForms}', "");
Expect(0, 65279, '\p{Block=-HalfwidthAnd-FullwidthForms}', "");
Expect(1, 65279, '\p{^Block=-HalfwidthAnd-FullwidthForms}', "");
Expect(1, 65279, '\P{Block=-HalfwidthAnd-FullwidthForms}', "");
Expect(0, 65279, '\P{^Block=-HalfwidthAnd-FullwidthForms}', "");
Error('\p{Blk= 	halfwidth_AND/a/fullwidth Forms}');
Error('\P{Blk= 	halfwidth_AND/a/fullwidth Forms}');
Expect(1, 65519, '\p{Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{Blk=_Halfwidth-and fullwidth-Forms}', "");
Expect(0, 65519, '\p{^Blk=_Halfwidth-and fullwidth-Forms}', "");
Expect(0, 65519, '\P{Blk=_Halfwidth-and fullwidth-Forms}', "");
Expect(1, 65519, '\P{^Blk=_Halfwidth-and fullwidth-Forms}', "");
Expect(0, 65279, '\p{Blk=_Halfwidth-and fullwidth-Forms}', "");
Expect(1, 65279, '\p{^Blk=_Halfwidth-and fullwidth-Forms}', "");
Expect(1, 65279, '\P{Blk=_Halfwidth-and fullwidth-Forms}', "");
Expect(0, 65279, '\P{^Blk=_Halfwidth-and fullwidth-Forms}', "");
Error('\p{Is_Block= :=Halfwidth	AndfullwidthForms}');
Error('\P{Is_Block= :=Halfwidth	AndfullwidthForms}');
Expect(1, 65519, '\p{Is_Block=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^Is_Block=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{Is_Block=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^Is_Block=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{Is_Block=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^Is_Block=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{Is_Block=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^Is_Block=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{Is_Block=_Halfwidth And_Fullwidth-Forms}', "");
Expect(0, 65519, '\p{^Is_Block=_Halfwidth And_Fullwidth-Forms}', "");
Expect(0, 65519, '\P{Is_Block=_Halfwidth And_Fullwidth-Forms}', "");
Expect(1, 65519, '\P{^Is_Block=_Halfwidth And_Fullwidth-Forms}', "");
Expect(0, 65279, '\p{Is_Block=_Halfwidth And_Fullwidth-Forms}', "");
Expect(1, 65279, '\p{^Is_Block=_Halfwidth And_Fullwidth-Forms}', "");
Expect(1, 65279, '\P{Is_Block=_Halfwidth And_Fullwidth-Forms}', "");
Expect(0, 65279, '\P{^Is_Block=_Halfwidth And_Fullwidth-Forms}', "");
Error('\p{Is_Blk=:=  HALFWIDTH-And	fullwidth-Forms}');
Error('\P{Is_Blk=:=  HALFWIDTH-And	fullwidth-Forms}');
Expect(1, 65519, '\p{Is_Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^Is_Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{Is_Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^Is_Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{Is_Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^Is_Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{Is_Blk=halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^Is_Blk=halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{Is_Blk=	-Halfwidth AND	FULLWIDTH-Forms}', "");
Expect(0, 65519, '\p{^Is_Blk=	-Halfwidth AND	FULLWIDTH-Forms}', "");
Expect(0, 65519, '\P{Is_Blk=	-Halfwidth AND	FULLWIDTH-Forms}', "");
Expect(1, 65519, '\P{^Is_Blk=	-Halfwidth AND	FULLWIDTH-Forms}', "");
Expect(0, 65279, '\p{Is_Blk=	-Halfwidth AND	FULLWIDTH-Forms}', "");
Expect(1, 65279, '\p{^Is_Blk=	-Halfwidth AND	FULLWIDTH-Forms}', "");
Expect(1, 65279, '\P{Is_Blk=	-Halfwidth AND	FULLWIDTH-Forms}', "");
Expect(0, 65279, '\P{^Is_Blk=	-Halfwidth AND	FULLWIDTH-Forms}', "");
Error('\p{Block= :=SUPPLEMENTARY PRIVATE_USE	AREA	B}');
Error('\P{Block= :=SUPPLEMENTARY PRIVATE_USE	AREA	B}');
Expect(1, 1048576, '\p{Block=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^Block=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{Block=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^Block=supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{Block=supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^Block=supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{Block=supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^Block=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{Block: _supplementary PRIVATE	UseAREA	B}', "");
Expect(0, 1048576, '\p{^Block: _supplementary PRIVATE	UseAREA	B}', "");
Expect(0, 1048576, '\P{Block: _supplementary PRIVATE	UseAREA	B}', "");
Expect(1, 1048576, '\P{^Block: _supplementary PRIVATE	UseAREA	B}', "");
Expect(0, 1, '\p{Block: _supplementary PRIVATE	UseAREA	B}', "");
Expect(1, 1, '\p{^Block: _supplementary PRIVATE	UseAREA	B}', "");
Expect(1, 1, '\P{Block: _supplementary PRIVATE	UseAREA	B}', "");
Expect(0, 1, '\P{^Block: _supplementary PRIVATE	UseAREA	B}', "");
Error('\p{Blk=- Supplementary private:=Use Area-B}');
Error('\P{Blk=- Supplementary private:=Use Area-B}');
Expect(1, 1048576, '\p{Blk=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^Blk=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{Blk=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^Blk=supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{Blk=supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^Blk=supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{Blk=supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^Blk=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{Blk= Supplementary-Privateuse-Area B}', "");
Expect(0, 1048576, '\p{^Blk= Supplementary-Privateuse-Area B}', "");
Expect(0, 1048576, '\P{Blk= Supplementary-Privateuse-Area B}', "");
Expect(1, 1048576, '\P{^Blk= Supplementary-Privateuse-Area B}', "");
Expect(0, 1, '\p{Blk= Supplementary-Privateuse-Area B}', "");
Expect(1, 1, '\p{^Blk= Supplementary-Privateuse-Area B}', "");
Expect(1, 1, '\P{Blk= Supplementary-Privateuse-Area B}', "");
Expect(0, 1, '\P{^Blk= Supplementary-Privateuse-Area B}', "");
Error('\p{Is_Block=-:=Supplementary_private Use-Area	B}');
Error('\P{Is_Block=-:=Supplementary_private Use-Area	B}');
Expect(1, 1048576, '\p{Is_Block=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^Is_Block=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{Is_Block=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^Is_Block=supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{Is_Block=supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^Is_Block=supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{Is_Block=supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^Is_Block=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{Is_Block=-SUPPLEMENTARY Private	useArea	B}', "");
Expect(0, 1048576, '\p{^Is_Block=-SUPPLEMENTARY Private	useArea	B}', "");
Expect(0, 1048576, '\P{Is_Block=-SUPPLEMENTARY Private	useArea	B}', "");
Expect(1, 1048576, '\P{^Is_Block=-SUPPLEMENTARY Private	useArea	B}', "");
Expect(0, 1, '\p{Is_Block=-SUPPLEMENTARY Private	useArea	B}', "");
Expect(1, 1, '\p{^Is_Block=-SUPPLEMENTARY Private	useArea	B}', "");
Expect(1, 1, '\P{Is_Block=-SUPPLEMENTARY Private	useArea	B}', "");
Expect(0, 1, '\P{^Is_Block=-SUPPLEMENTARY Private	useArea	B}', "");
Error('\p{Is_Blk:		-Supplementary-private-use-AREA/a/B}');
Error('\P{Is_Blk:		-Supplementary-private-use-AREA/a/B}');
Expect(1, 1048576, '\p{Is_Blk=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^Is_Blk=supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{Is_Blk=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^Is_Blk=supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{Is_Blk=supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^Is_Blk=supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{Is_Blk=supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^Is_Blk=supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{Is_Blk=	Supplementary_Private	UseArea_B}', "");
Expect(0, 1048576, '\p{^Is_Blk=	Supplementary_Private	UseArea_B}', "");
Expect(0, 1048576, '\P{Is_Blk=	Supplementary_Private	UseArea_B}', "");
Expect(1, 1048576, '\P{^Is_Blk=	Supplementary_Private	UseArea_B}', "");
Expect(0, 1, '\p{Is_Blk=	Supplementary_Private	UseArea_B}', "");
Expect(1, 1, '\p{^Is_Blk=	Supplementary_Private	UseArea_B}', "");
Expect(1, 1, '\P{Is_Blk=	Supplementary_Private	UseArea_B}', "");
Expect(0, 1, '\P{^Is_Blk=	Supplementary_Private	UseArea_B}', "");
Error('\p{Block=:=_Sundanese}');
Error('\P{Block=:=_Sundanese}');
Expect(1, 7103, '\p{Block=sundanese}', "");
Expect(0, 7103, '\p{^Block=sundanese}', "");
Expect(0, 7103, '\P{Block=sundanese}', "");
Expect(1, 7103, '\P{^Block=sundanese}', "");
Expect(0, 7039, '\p{Block=sundanese}', "");
Expect(1, 7039, '\p{^Block=sundanese}', "");
Expect(1, 7039, '\P{Block=sundanese}', "");
Expect(0, 7039, '\P{^Block=sundanese}', "");
Expect(1, 7103, '\p{Block= Sundanese}', "");
Expect(0, 7103, '\p{^Block= Sundanese}', "");
Expect(0, 7103, '\P{Block= Sundanese}', "");
Expect(1, 7103, '\P{^Block= Sundanese}', "");
Expect(0, 7039, '\p{Block= Sundanese}', "");
Expect(1, 7039, '\p{^Block= Sundanese}', "");
Expect(1, 7039, '\P{Block= Sundanese}', "");
Expect(0, 7039, '\P{^Block= Sundanese}', "");
Error('\p{Blk=_:=SUNDANESE}');
Error('\P{Blk=_:=SUNDANESE}');
Expect(1, 7103, '\p{Blk=sundanese}', "");
Expect(0, 7103, '\p{^Blk=sundanese}', "");
Expect(0, 7103, '\P{Blk=sundanese}', "");
Expect(1, 7103, '\P{^Blk=sundanese}', "");
Expect(0, 7039, '\p{Blk=sundanese}', "");
Expect(1, 7039, '\p{^Blk=sundanese}', "");
Expect(1, 7039, '\P{Blk=sundanese}', "");
Expect(0, 7039, '\P{^Blk=sundanese}', "");
Expect(1, 7103, '\p{Blk= Sundanese}', "");
Expect(0, 7103, '\p{^Blk= Sundanese}', "");
Expect(0, 7103, '\P{Blk= Sundanese}', "");
Expect(1, 7103, '\P{^Blk= Sundanese}', "");
Expect(0, 7039, '\p{Blk= Sundanese}', "");
Expect(1, 7039, '\p{^Blk= Sundanese}', "");
Expect(1, 7039, '\P{Blk= Sundanese}', "");
Expect(0, 7039, '\P{^Blk= Sundanese}', "");
Error('\p{Is_Block=:= -Sundanese}');
Error('\P{Is_Block=:= -Sundanese}');
Expect(1, 7103, '\p{Is_Block=sundanese}', "");
Expect(0, 7103, '\p{^Is_Block=sundanese}', "");
Expect(0, 7103, '\P{Is_Block=sundanese}', "");
Expect(1, 7103, '\P{^Is_Block=sundanese}', "");
Expect(0, 7039, '\p{Is_Block=sundanese}', "");
Expect(1, 7039, '\p{^Is_Block=sundanese}', "");
Expect(1, 7039, '\P{Is_Block=sundanese}', "");
Expect(0, 7039, '\P{^Is_Block=sundanese}', "");
Expect(1, 7103, '\p{Is_Block:_SUNDANESE}', "");
Expect(0, 7103, '\p{^Is_Block:_SUNDANESE}', "");
Expect(0, 7103, '\P{Is_Block:_SUNDANESE}', "");
Expect(1, 7103, '\P{^Is_Block:_SUNDANESE}', "");
Expect(0, 7039, '\p{Is_Block:_SUNDANESE}', "");
Expect(1, 7039, '\p{^Is_Block:_SUNDANESE}', "");
Expect(1, 7039, '\P{Is_Block:_SUNDANESE}', "");
Expect(0, 7039, '\P{^Is_Block:_SUNDANESE}', "");
Error('\p{Is_Blk=_:=sundanese}');
Error('\P{Is_Blk=_:=sundanese}');
Expect(1, 7103, '\p{Is_Blk=sundanese}', "");
Expect(0, 7103, '\p{^Is_Blk=sundanese}', "");
Expect(0, 7103, '\P{Is_Blk=sundanese}', "");
Expect(1, 7103, '\P{^Is_Blk=sundanese}', "");
Expect(0, 7039, '\p{Is_Blk=sundanese}', "");
Expect(1, 7039, '\p{^Is_Blk=sundanese}', "");
Expect(1, 7039, '\P{Is_Blk=sundanese}', "");
Expect(0, 7039, '\P{^Is_Blk=sundanese}', "");
Expect(1, 7103, '\p{Is_Blk=- SUNDANESE}', "");
Expect(0, 7103, '\p{^Is_Blk=- SUNDANESE}', "");
Expect(0, 7103, '\P{Is_Blk=- SUNDANESE}', "");
Expect(1, 7103, '\P{^Is_Blk=- SUNDANESE}', "");
Expect(0, 7039, '\p{Is_Blk=- SUNDANESE}', "");
Expect(1, 7039, '\p{^Is_Blk=- SUNDANESE}', "");
Expect(1, 7039, '\P{Is_Blk=- SUNDANESE}', "");
Expect(0, 7039, '\P{^Is_Blk=- SUNDANESE}', "");
Error('\p{Block=/a/  enclosed_alphanumerics}');
Error('\P{Block=/a/  enclosed_alphanumerics}');
Expect(1, 9471, '\p{Block:enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^Block:enclosedalphanumerics}', "");
Expect(0, 9471, '\P{Block:enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^Block:enclosedalphanumerics}', "");
Expect(0, 9311, '\p{Block:enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^Block:enclosedalphanumerics}', "");
Expect(1, 9311, '\P{Block:enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^Block:enclosedalphanumerics}', "");
Expect(1, 9471, '\p{Block=	EnclosedAlphanumerics}', "");
Expect(0, 9471, '\p{^Block=	EnclosedAlphanumerics}', "");
Expect(0, 9471, '\P{Block=	EnclosedAlphanumerics}', "");
Expect(1, 9471, '\P{^Block=	EnclosedAlphanumerics}', "");
Expect(0, 9311, '\p{Block=	EnclosedAlphanumerics}', "");
Expect(1, 9311, '\p{^Block=	EnclosedAlphanumerics}', "");
Expect(1, 9311, '\P{Block=	EnclosedAlphanumerics}', "");
Expect(0, 9311, '\P{^Block=	EnclosedAlphanumerics}', "");
Error('\p{Blk=	 enclosed/a/alphanumerics}');
Error('\P{Blk=	 enclosed/a/alphanumerics}');
Expect(1, 9471, '\p{Blk=enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^Blk=enclosedalphanumerics}', "");
Expect(0, 9471, '\P{Blk=enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^Blk=enclosedalphanumerics}', "");
Expect(0, 9311, '\p{Blk=enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^Blk=enclosedalphanumerics}', "");
Expect(1, 9311, '\P{Blk=enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^Blk=enclosedalphanumerics}', "");
Expect(1, 9471, '\p{Blk=-	Enclosed-Alphanumerics}', "");
Expect(0, 9471, '\p{^Blk=-	Enclosed-Alphanumerics}', "");
Expect(0, 9471, '\P{Blk=-	Enclosed-Alphanumerics}', "");
Expect(1, 9471, '\P{^Blk=-	Enclosed-Alphanumerics}', "");
Expect(0, 9311, '\p{Blk=-	Enclosed-Alphanumerics}', "");
Expect(1, 9311, '\p{^Blk=-	Enclosed-Alphanumerics}', "");
Expect(1, 9311, '\P{Blk=-	Enclosed-Alphanumerics}', "");
Expect(0, 9311, '\P{^Blk=-	Enclosed-Alphanumerics}', "");
Error('\p{Is_Block= -Enclosed/a/Alphanumerics}');
Error('\P{Is_Block= -Enclosed/a/Alphanumerics}');
Expect(1, 9471, '\p{Is_Block=enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^Is_Block=enclosedalphanumerics}', "");
Expect(0, 9471, '\P{Is_Block=enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^Is_Block=enclosedalphanumerics}', "");
Expect(0, 9311, '\p{Is_Block=enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^Is_Block=enclosedalphanumerics}', "");
Expect(1, 9311, '\P{Is_Block=enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^Is_Block=enclosedalphanumerics}', "");
Expect(1, 9471, '\p{Is_Block=_-Enclosed alphanumerics}', "");
Expect(0, 9471, '\p{^Is_Block=_-Enclosed alphanumerics}', "");
Expect(0, 9471, '\P{Is_Block=_-Enclosed alphanumerics}', "");
Expect(1, 9471, '\P{^Is_Block=_-Enclosed alphanumerics}', "");
Expect(0, 9311, '\p{Is_Block=_-Enclosed alphanumerics}', "");
Expect(1, 9311, '\p{^Is_Block=_-Enclosed alphanumerics}', "");
Expect(1, 9311, '\P{Is_Block=_-Enclosed alphanumerics}', "");
Expect(0, 9311, '\P{^Is_Block=_-Enclosed alphanumerics}', "");
Error('\p{Is_Blk=_Enclosed_Alphanumerics/a/}');
Error('\P{Is_Blk=_Enclosed_Alphanumerics/a/}');
Expect(1, 9471, '\p{Is_Blk=enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^Is_Blk=enclosedalphanumerics}', "");
Expect(0, 9471, '\P{Is_Blk=enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^Is_Blk=enclosedalphanumerics}', "");
Expect(0, 9311, '\p{Is_Blk=enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^Is_Blk=enclosedalphanumerics}', "");
Expect(1, 9311, '\P{Is_Blk=enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^Is_Blk=enclosedalphanumerics}', "");
Expect(1, 9471, '\p{Is_Blk=__enclosed-Alphanumerics}', "");
Expect(0, 9471, '\p{^Is_Blk=__enclosed-Alphanumerics}', "");
Expect(0, 9471, '\P{Is_Blk=__enclosed-Alphanumerics}', "");
Expect(1, 9471, '\P{^Is_Blk=__enclosed-Alphanumerics}', "");
Expect(0, 9311, '\p{Is_Blk=__enclosed-Alphanumerics}', "");
Expect(1, 9311, '\p{^Is_Blk=__enclosed-Alphanumerics}', "");
Expect(1, 9311, '\P{Is_Blk=__enclosed-Alphanumerics}', "");
Expect(0, 9311, '\P{^Is_Blk=__enclosed-Alphanumerics}', "");
Error('\p{Block=__old_SOUTHARABIAN:=}');
Error('\P{Block=__old_SOUTHARABIAN:=}');
Expect(1, 68223, '\p{Block=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Block=oldsoutharabian}', "");
Expect(0, 68223, '\P{Block=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Block=oldsoutharabian}', "");
Expect(0, 68191, '\p{Block=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Block=oldsoutharabian}', "");
Expect(1, 68191, '\P{Block=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Block=oldsoutharabian}', "");
Expect(1, 68223, '\p{Block: --Old-SOUTH	Arabian}', "");
Expect(0, 68223, '\p{^Block: --Old-SOUTH	Arabian}', "");
Expect(0, 68223, '\P{Block: --Old-SOUTH	Arabian}', "");
Expect(1, 68223, '\P{^Block: --Old-SOUTH	Arabian}', "");
Expect(0, 68191, '\p{Block: --Old-SOUTH	Arabian}', "");
Expect(1, 68191, '\p{^Block: --Old-SOUTH	Arabian}', "");
Expect(1, 68191, '\P{Block: --Old-SOUTH	Arabian}', "");
Expect(0, 68191, '\P{^Block: --Old-SOUTH	Arabian}', "");
Error('\p{Blk=_/a/Old southarabian}');
Error('\P{Blk=_/a/Old southarabian}');
Expect(1, 68223, '\p{Blk=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Blk=oldsoutharabian}', "");
Expect(0, 68223, '\P{Blk=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Blk=oldsoutharabian}', "");
Expect(0, 68191, '\p{Blk=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Blk=oldsoutharabian}', "");
Expect(1, 68191, '\P{Blk=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Blk=oldsoutharabian}', "");
Expect(1, 68223, '\p{Blk=OLDSouth_ARABIAN}', "");
Expect(0, 68223, '\p{^Blk=OLDSouth_ARABIAN}', "");
Expect(0, 68223, '\P{Blk=OLDSouth_ARABIAN}', "");
Expect(1, 68223, '\P{^Blk=OLDSouth_ARABIAN}', "");
Expect(0, 68191, '\p{Blk=OLDSouth_ARABIAN}', "");
Expect(1, 68191, '\p{^Blk=OLDSouth_ARABIAN}', "");
Expect(1, 68191, '\P{Blk=OLDSouth_ARABIAN}', "");
Expect(0, 68191, '\P{^Blk=OLDSouth_ARABIAN}', "");
Error('\p{Is_Block= -Old-South/a/Arabian}');
Error('\P{Is_Block= -Old-South/a/Arabian}');
Expect(1, 68223, '\p{Is_Block=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Is_Block=oldsoutharabian}', "");
Expect(0, 68223, '\P{Is_Block=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Is_Block=oldsoutharabian}', "");
Expect(0, 68191, '\p{Is_Block=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Is_Block=oldsoutharabian}', "");
Expect(1, 68191, '\P{Is_Block=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Is_Block=oldsoutharabian}', "");
Expect(1, 68223, '\p{Is_Block=OLD SOUTH	Arabian}', "");
Expect(0, 68223, '\p{^Is_Block=OLD SOUTH	Arabian}', "");
Expect(0, 68223, '\P{Is_Block=OLD SOUTH	Arabian}', "");
Expect(1, 68223, '\P{^Is_Block=OLD SOUTH	Arabian}', "");
Expect(0, 68191, '\p{Is_Block=OLD SOUTH	Arabian}', "");
Expect(1, 68191, '\p{^Is_Block=OLD SOUTH	Arabian}', "");
Expect(1, 68191, '\P{Is_Block=OLD SOUTH	Arabian}', "");
Expect(0, 68191, '\P{^Is_Block=OLD SOUTH	Arabian}', "");
Error('\p{Is_Blk=-/a/Old_South_arabian}');
Error('\P{Is_Blk=-/a/Old_South_arabian}');
Expect(1, 68223, '\p{Is_Blk=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Is_Blk=oldsoutharabian}', "");
Expect(0, 68223, '\P{Is_Blk=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Is_Blk=oldsoutharabian}', "");
Expect(0, 68191, '\p{Is_Blk=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Is_Blk=oldsoutharabian}', "");
Expect(1, 68191, '\P{Is_Blk=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Is_Blk=oldsoutharabian}', "");
Expect(1, 68223, '\p{Is_Blk=--Old-southarabian}', "");
Expect(0, 68223, '\p{^Is_Blk=--Old-southarabian}', "");
Expect(0, 68223, '\P{Is_Blk=--Old-southarabian}', "");
Expect(1, 68223, '\P{^Is_Blk=--Old-southarabian}', "");
Expect(0, 68191, '\p{Is_Blk=--Old-southarabian}', "");
Expect(1, 68191, '\p{^Is_Blk=--Old-southarabian}', "");
Expect(1, 68191, '\P{Is_Blk=--Old-southarabian}', "");
Expect(0, 68191, '\P{^Is_Blk=--Old-southarabian}', "");
Error('\p{Block=_ tags:=}');
Error('\P{Block=_ tags:=}');
Expect(1, 917631, '\p{Block:   tags}', "");
Expect(0, 917631, '\p{^Block:   tags}', "");
Expect(0, 917631, '\P{Block:   tags}', "");
Expect(1, 917631, '\P{^Block:   tags}', "");
Expect(0, 1, '\p{Block:   tags}', "");
Expect(1, 1, '\p{^Block:   tags}', "");
Expect(1, 1, '\P{Block:   tags}', "");
Expect(0, 1, '\P{^Block:   tags}', "");
Expect(1, 917631, '\p{Block=	_Tags}', "");
Expect(0, 917631, '\p{^Block=	_Tags}', "");
Expect(0, 917631, '\P{Block=	_Tags}', "");
Expect(1, 917631, '\P{^Block=	_Tags}', "");
Expect(0, 1, '\p{Block=	_Tags}', "");
Expect(1, 1, '\p{^Block=	_Tags}', "");
Expect(1, 1, '\P{Block=	_Tags}', "");
Expect(0, 1, '\P{^Block=	_Tags}', "");
Error('\p{Blk=:= TAGS}');
Error('\P{Blk=:= TAGS}');
Expect(1, 917631, '\p{Blk=tags}', "");
Expect(0, 917631, '\p{^Blk=tags}', "");
Expect(0, 917631, '\P{Blk=tags}', "");
Expect(1, 917631, '\P{^Blk=tags}', "");
Expect(0, 1, '\p{Blk=tags}', "");
Expect(1, 1, '\p{^Blk=tags}', "");
Expect(1, 1, '\P{Blk=tags}', "");
Expect(0, 1, '\P{^Blk=tags}', "");
Expect(1, 917631, '\p{Blk=  Tags}', "");
Expect(0, 917631, '\p{^Blk=  Tags}', "");
Expect(0, 917631, '\P{Blk=  Tags}', "");
Expect(1, 917631, '\P{^Blk=  Tags}', "");
Expect(0, 1, '\p{Blk=  Tags}', "");
Expect(1, 1, '\p{^Blk=  Tags}', "");
Expect(1, 1, '\P{Blk=  Tags}', "");
Expect(0, 1, '\P{^Blk=  Tags}', "");
Error('\p{Is_Block=/a/	 tags}');
Error('\P{Is_Block=/a/	 tags}');
Expect(1, 917631, '\p{Is_Block=tags}', "");
Expect(0, 917631, '\p{^Is_Block=tags}', "");
Expect(0, 917631, '\P{Is_Block=tags}', "");
Expect(1, 917631, '\P{^Is_Block=tags}', "");
Expect(0, 1, '\p{Is_Block=tags}', "");
Expect(1, 1, '\p{^Is_Block=tags}', "");
Expect(1, 1, '\P{Is_Block=tags}', "");
Expect(0, 1, '\P{^Is_Block=tags}', "");
Expect(1, 917631, '\p{Is_Block=	 tags}', "");
Expect(0, 917631, '\p{^Is_Block=	 tags}', "");
Expect(0, 917631, '\P{Is_Block=	 tags}', "");
Expect(1, 917631, '\P{^Is_Block=	 tags}', "");
Expect(0, 1, '\p{Is_Block=	 tags}', "");
Expect(1, 1, '\p{^Is_Block=	 tags}', "");
Expect(1, 1, '\P{Is_Block=	 tags}', "");
Expect(0, 1, '\P{^Is_Block=	 tags}', "");
Error('\p{Is_Blk=/a/TAGS}');
Error('\P{Is_Blk=/a/TAGS}');
Expect(1, 917631, '\p{Is_Blk=tags}', "");
Expect(0, 917631, '\p{^Is_Blk=tags}', "");
Expect(0, 917631, '\P{Is_Blk=tags}', "");
Expect(1, 917631, '\P{^Is_Blk=tags}', "");
Expect(0, 1, '\p{Is_Blk=tags}', "");
Expect(1, 1, '\p{^Is_Blk=tags}', "");
Expect(1, 1, '\P{Is_Blk=tags}', "");
Expect(0, 1, '\P{^Is_Blk=tags}', "");
Expect(1, 917631, '\p{Is_Blk=_ Tags}', "");
Expect(0, 917631, '\p{^Is_Blk=_ Tags}', "");
Expect(0, 917631, '\P{Is_Blk=_ Tags}', "");
Expect(1, 917631, '\P{^Is_Blk=_ Tags}', "");
Expect(0, 1, '\p{Is_Blk=_ Tags}', "");
Expect(1, 1, '\p{^Is_Blk=_ Tags}', "");
Expect(1, 1, '\P{Is_Blk=_ Tags}', "");
Expect(0, 1, '\P{^Is_Blk=_ Tags}', "");
Error('\p{Block:    :=Miscellaneous	mathematicalSymbols_a}');
Error('\P{Block:    :=Miscellaneous	mathematicalSymbols_a}');
Expect(1, 10223, '\p{Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{Block=  Miscellaneous Mathematical_symbolsA}', "");
Expect(0, 10223, '\p{^Block=  Miscellaneous Mathematical_symbolsA}', "");
Expect(0, 10223, '\P{Block=  Miscellaneous Mathematical_symbolsA}', "");
Expect(1, 10223, '\P{^Block=  Miscellaneous Mathematical_symbolsA}', "");
Expect(0, 10175, '\p{Block=  Miscellaneous Mathematical_symbolsA}', "");
Expect(1, 10175, '\p{^Block=  Miscellaneous Mathematical_symbolsA}', "");
Expect(1, 10175, '\P{Block=  Miscellaneous Mathematical_symbolsA}', "");
Expect(0, 10175, '\P{^Block=  Miscellaneous Mathematical_symbolsA}', "");
Error('\p{Blk=:=MISCELLANEOUSMathematical_Symbols-a}');
Error('\P{Blk=:=MISCELLANEOUSMathematical_Symbols-a}');
Expect(1, 10223, '\p{Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{Blk:- Miscellaneous_Mathematical-Symbols	A}', "");
Expect(0, 10223, '\p{^Blk:- Miscellaneous_Mathematical-Symbols	A}', "");
Expect(0, 10223, '\P{Blk:- Miscellaneous_Mathematical-Symbols	A}', "");
Expect(1, 10223, '\P{^Blk:- Miscellaneous_Mathematical-Symbols	A}', "");
Expect(0, 10175, '\p{Blk:- Miscellaneous_Mathematical-Symbols	A}', "");
Expect(1, 10175, '\p{^Blk:- Miscellaneous_Mathematical-Symbols	A}', "");
Expect(1, 10175, '\P{Blk:- Miscellaneous_Mathematical-Symbols	A}', "");
Expect(0, 10175, '\P{^Blk:- Miscellaneous_Mathematical-Symbols	A}', "");
Error('\p{Is_Block:miscellaneous/a/mathematical-symbolsA}');
Error('\P{Is_Block:miscellaneous/a/mathematical-symbolsA}');
Expect(1, 10223, '\p{Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^Is_Block=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{Is_Block=	MISCELLANEOUS_MATHEMATICAL_SYMBOLS	A}', "");
Expect(0, 10223, '\p{^Is_Block=	MISCELLANEOUS_MATHEMATICAL_SYMBOLS	A}', "");
Expect(0, 10223, '\P{Is_Block=	MISCELLANEOUS_MATHEMATICAL_SYMBOLS	A}', "");
Expect(1, 10223, '\P{^Is_Block=	MISCELLANEOUS_MATHEMATICAL_SYMBOLS	A}', "");
Expect(0, 10175, '\p{Is_Block=	MISCELLANEOUS_MATHEMATICAL_SYMBOLS	A}', "");
Expect(1, 10175, '\p{^Is_Block=	MISCELLANEOUS_MATHEMATICAL_SYMBOLS	A}', "");
Expect(1, 10175, '\P{Is_Block=	MISCELLANEOUS_MATHEMATICAL_SYMBOLS	A}', "");
Expect(0, 10175, '\P{^Is_Block=	MISCELLANEOUS_MATHEMATICAL_SYMBOLS	A}', "");
Error('\p{Is_Blk=	/a/Miscellaneousmathematicalsymbols_A}');
Error('\P{Is_Blk=	/a/Miscellaneousmathematicalsymbols_A}');
Expect(1, 10223, '\p{Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^Is_Blk=miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{Is_Blk= _Miscellaneous-MATHEMATICAL	Symbols	A}', "");
Expect(0, 10223, '\p{^Is_Blk= _Miscellaneous-MATHEMATICAL	Symbols	A}', "");
Expect(0, 10223, '\P{Is_Blk= _Miscellaneous-MATHEMATICAL	Symbols	A}', "");
Expect(1, 10223, '\P{^Is_Blk= _Miscellaneous-MATHEMATICAL	Symbols	A}', "");
Expect(0, 10175, '\p{Is_Blk= _Miscellaneous-MATHEMATICAL	Symbols	A}', "");
Expect(1, 10175, '\p{^Is_Blk= _Miscellaneous-MATHEMATICAL	Symbols	A}', "");
Expect(1, 10175, '\P{Is_Blk= _Miscellaneous-MATHEMATICAL	Symbols	A}', "");
Expect(0, 10175, '\P{^Is_Blk= _Miscellaneous-MATHEMATICAL	Symbols	A}', "");
Error('\p{Block=:= -Braille_PATTERNS}');
Error('\P{Block=:= -Braille_PATTERNS}');
Expect(1, 10495, '\p{Block=braillepatterns}', "");
Expect(0, 10495, '\p{^Block=braillepatterns}', "");
Expect(0, 10495, '\P{Block=braillepatterns}', "");
Expect(1, 10495, '\P{^Block=braillepatterns}', "");
Expect(0, 10239, '\p{Block=braillepatterns}', "");
Expect(1, 10239, '\p{^Block=braillepatterns}', "");
Expect(1, 10239, '\P{Block=braillepatterns}', "");
Expect(0, 10239, '\P{^Block=braillepatterns}', "");
Expect(1, 10495, '\p{Block= -braille_PATTERNS}', "");
Expect(0, 10495, '\p{^Block= -braille_PATTERNS}', "");
Expect(0, 10495, '\P{Block= -braille_PATTERNS}', "");
Expect(1, 10495, '\P{^Block= -braille_PATTERNS}', "");
Expect(0, 10239, '\p{Block= -braille_PATTERNS}', "");
Expect(1, 10239, '\p{^Block= -braille_PATTERNS}', "");
Expect(1, 10239, '\P{Block= -braille_PATTERNS}', "");
Expect(0, 10239, '\P{^Block= -braille_PATTERNS}', "");
Error('\p{Blk=Braille/a/patterns}');
Error('\P{Blk=Braille/a/patterns}');
Expect(1, 10495, '\p{Blk:	braillepatterns}', "");
Expect(0, 10495, '\p{^Blk:	braillepatterns}', "");
Expect(0, 10495, '\P{Blk:	braillepatterns}', "");
Expect(1, 10495, '\P{^Blk:	braillepatterns}', "");
Expect(0, 10239, '\p{Blk:	braillepatterns}', "");
Expect(1, 10239, '\p{^Blk:	braillepatterns}', "");
Expect(1, 10239, '\P{Blk:	braillepatterns}', "");
Expect(0, 10239, '\P{^Blk:	braillepatterns}', "");
Expect(1, 10495, '\p{Blk=BRAILLE_Patterns}', "");
Expect(0, 10495, '\p{^Blk=BRAILLE_Patterns}', "");
Expect(0, 10495, '\P{Blk=BRAILLE_Patterns}', "");
Expect(1, 10495, '\P{^Blk=BRAILLE_Patterns}', "");
Expect(0, 10239, '\p{Blk=BRAILLE_Patterns}', "");
Expect(1, 10239, '\p{^Blk=BRAILLE_Patterns}', "");
Expect(1, 10239, '\P{Blk=BRAILLE_Patterns}', "");
Expect(0, 10239, '\P{^Blk=BRAILLE_Patterns}', "");
Error('\p{Is_Block:   -BRAILLE:=Patterns}');
Error('\P{Is_Block:   -BRAILLE:=Patterns}');
Expect(1, 10495, '\p{Is_Block=braillepatterns}', "");
Expect(0, 10495, '\p{^Is_Block=braillepatterns}', "");
Expect(0, 10495, '\P{Is_Block=braillepatterns}', "");
Expect(1, 10495, '\P{^Is_Block=braillepatterns}', "");
Expect(0, 10239, '\p{Is_Block=braillepatterns}', "");
Expect(1, 10239, '\p{^Is_Block=braillepatterns}', "");
Expect(1, 10239, '\P{Is_Block=braillepatterns}', "");
Expect(0, 10239, '\P{^Is_Block=braillepatterns}', "");
Expect(1, 10495, '\p{Is_Block=_braille	Patterns}', "");
Expect(0, 10495, '\p{^Is_Block=_braille	Patterns}', "");
Expect(0, 10495, '\P{Is_Block=_braille	Patterns}', "");
Expect(1, 10495, '\P{^Is_Block=_braille	Patterns}', "");
Expect(0, 10239, '\p{Is_Block=_braille	Patterns}', "");
Expect(1, 10239, '\p{^Is_Block=_braille	Patterns}', "");
Expect(1, 10239, '\P{Is_Block=_braille	Patterns}', "");
Expect(0, 10239, '\P{^Is_Block=_braille	Patterns}', "");
Error('\p{Is_Blk=/a/-_Braille-Patterns}');
Error('\P{Is_Blk=/a/-_Braille-Patterns}');
Expect(1, 10495, '\p{Is_Blk=braillepatterns}', "");
Expect(0, 10495, '\p{^Is_Blk=braillepatterns}', "");
Expect(0, 10495, '\P{Is_Blk=braillepatterns}', "");
Expect(1, 10495, '\P{^Is_Blk=braillepatterns}', "");
Expect(0, 10239, '\p{Is_Blk=braillepatterns}', "");
Expect(1, 10239, '\p{^Is_Blk=braillepatterns}', "");
Expect(1, 10239, '\P{Is_Blk=braillepatterns}', "");
Expect(0, 10239, '\P{^Is_Blk=braillepatterns}', "");
Expect(1, 10495, '\p{Is_Blk=--Braille	Patterns}', "");
Expect(0, 10495, '\p{^Is_Blk=--Braille	Patterns}', "");
Expect(0, 10495, '\P{Is_Blk=--Braille	Patterns}', "");
Expect(1, 10495, '\P{^Is_Blk=--Braille	Patterns}', "");
Expect(0, 10239, '\p{Is_Blk=--Braille	Patterns}', "");
Expect(1, 10239, '\p{^Is_Blk=--Braille	Patterns}', "");
Expect(1, 10239, '\P{Is_Blk=--Braille	Patterns}', "");
Expect(0, 10239, '\P{^Is_Blk=--Braille	Patterns}', "");
Error('\p{Block=	:=Oriya}');
Error('\P{Block=	:=Oriya}');
Expect(1, 2943, '\p{Block=oriya}', "");
Expect(0, 2943, '\p{^Block=oriya}', "");
Expect(0, 2943, '\P{Block=oriya}', "");
Expect(1, 2943, '\P{^Block=oriya}', "");
Expect(0, 2815, '\p{Block=oriya}', "");
Expect(1, 2815, '\p{^Block=oriya}', "");
Expect(1, 2815, '\P{Block=oriya}', "");
Expect(0, 2815, '\P{^Block=oriya}', "");
Expect(1, 2943, '\p{Block=-Oriya}', "");
Expect(0, 2943, '\p{^Block=-Oriya}', "");
Expect(0, 2943, '\P{Block=-Oriya}', "");
Expect(1, 2943, '\P{^Block=-Oriya}', "");
Expect(0, 2815, '\p{Block=-Oriya}', "");
Expect(1, 2815, '\p{^Block=-Oriya}', "");
Expect(1, 2815, '\P{Block=-Oriya}', "");
Expect(0, 2815, '\P{^Block=-Oriya}', "");
Error('\p{Blk=-_oriya:=}');
Error('\P{Blk=-_oriya:=}');
Expect(1, 2943, '\p{Blk=oriya}', "");
Expect(0, 2943, '\p{^Blk=oriya}', "");
Expect(0, 2943, '\P{Blk=oriya}', "");
Expect(1, 2943, '\P{^Blk=oriya}', "");
Expect(0, 2815, '\p{Blk=oriya}', "");
Expect(1, 2815, '\p{^Blk=oriya}', "");
Expect(1, 2815, '\P{Blk=oriya}', "");
Expect(0, 2815, '\P{^Blk=oriya}', "");
Expect(1, 2943, '\p{Blk=- oriya}', "");
Expect(0, 2943, '\p{^Blk=- oriya}', "");
Expect(0, 2943, '\P{Blk=- oriya}', "");
Expect(1, 2943, '\P{^Blk=- oriya}', "");
Expect(0, 2815, '\p{Blk=- oriya}', "");
Expect(1, 2815, '\p{^Blk=- oriya}', "");
Expect(1, 2815, '\P{Blk=- oriya}', "");
Expect(0, 2815, '\P{^Blk=- oriya}', "");
Error('\p{Is_Block=	ORIYA/a/}');
Error('\P{Is_Block=	ORIYA/a/}');
Expect(1, 2943, '\p{Is_Block=oriya}', "");
Expect(0, 2943, '\p{^Is_Block=oriya}', "");
Expect(0, 2943, '\P{Is_Block=oriya}', "");
Expect(1, 2943, '\P{^Is_Block=oriya}', "");
Expect(0, 2815, '\p{Is_Block=oriya}', "");
Expect(1, 2815, '\p{^Is_Block=oriya}', "");
Expect(1, 2815, '\P{Is_Block=oriya}', "");
Expect(0, 2815, '\P{^Is_Block=oriya}', "");
Expect(1, 2943, '\p{Is_Block=	_Oriya}', "");
Expect(0, 2943, '\p{^Is_Block=	_Oriya}', "");
Expect(0, 2943, '\P{Is_Block=	_Oriya}', "");
Expect(1, 2943, '\P{^Is_Block=	_Oriya}', "");
Expect(0, 2815, '\p{Is_Block=	_Oriya}', "");
Expect(1, 2815, '\p{^Is_Block=	_Oriya}', "");
Expect(1, 2815, '\P{Is_Block=	_Oriya}', "");
Expect(0, 2815, '\P{^Is_Block=	_Oriya}', "");
Error('\p{Is_Blk=	/a/Oriya}');
Error('\P{Is_Blk=	/a/Oriya}');
Expect(1, 2943, '\p{Is_Blk=oriya}', "");
Expect(0, 2943, '\p{^Is_Blk=oriya}', "");
Expect(0, 2943, '\P{Is_Blk=oriya}', "");
Expect(1, 2943, '\P{^Is_Blk=oriya}', "");
Expect(0, 2815, '\p{Is_Blk=oriya}', "");
Expect(1, 2815, '\p{^Is_Blk=oriya}', "");
Expect(1, 2815, '\P{Is_Blk=oriya}', "");
Expect(0, 2815, '\P{^Is_Blk=oriya}', "");
Expect(1, 2943, '\p{Is_Blk=-_Oriya}', "");
Expect(0, 2943, '\p{^Is_Blk=-_Oriya}', "");
Expect(0, 2943, '\P{Is_Blk=-_Oriya}', "");
Expect(1, 2943, '\P{^Is_Blk=-_Oriya}', "");
Expect(0, 2815, '\p{Is_Blk=-_Oriya}', "");
Expect(1, 2815, '\p{^Is_Blk=-_Oriya}', "");
Expect(1, 2815, '\P{Is_Blk=-_Oriya}', "");
Expect(0, 2815, '\P{^Is_Blk=-_Oriya}', "");
Error('\p{Block= /a/linearB	Ideograms}');
Error('\P{Block= /a/linearB	Ideograms}');
Expect(1, 65791, '\p{Block=linearbideograms}', "");
Expect(0, 65791, '\p{^Block=linearbideograms}', "");
Expect(0, 65791, '\P{Block=linearbideograms}', "");
Expect(1, 65791, '\P{^Block=linearbideograms}', "");
Expect(0, 65663, '\p{Block=linearbideograms}', "");
Expect(1, 65663, '\p{^Block=linearbideograms}', "");
Expect(1, 65663, '\P{Block=linearbideograms}', "");
Expect(0, 65663, '\P{^Block=linearbideograms}', "");
Expect(1, 65791, '\p{Block= Linear B	Ideograms}', "");
Expect(0, 65791, '\p{^Block= Linear B	Ideograms}', "");
Expect(0, 65791, '\P{Block= Linear B	Ideograms}', "");
Expect(1, 65791, '\P{^Block= Linear B	Ideograms}', "");
Expect(0, 65663, '\p{Block= Linear B	Ideograms}', "");
Expect(1, 65663, '\p{^Block= Linear B	Ideograms}', "");
Expect(1, 65663, '\P{Block= Linear B	Ideograms}', "");
Expect(0, 65663, '\P{^Block= Linear B	Ideograms}', "");
Error('\p{Blk=/a/ Linear-bIdeograms}');
Error('\P{Blk=/a/ Linear-bIdeograms}');
Expect(1, 65791, '\p{Blk=linearbideograms}', "");
Expect(0, 65791, '\p{^Blk=linearbideograms}', "");
Expect(0, 65791, '\P{Blk=linearbideograms}', "");
Expect(1, 65791, '\P{^Blk=linearbideograms}', "");
Expect(0, 65663, '\p{Blk=linearbideograms}', "");
Expect(1, 65663, '\p{^Blk=linearbideograms}', "");
Expect(1, 65663, '\P{Blk=linearbideograms}', "");
Expect(0, 65663, '\P{^Blk=linearbideograms}', "");
Expect(1, 65791, '\p{Blk=_-LinearB ideograms}', "");
Expect(0, 65791, '\p{^Blk=_-LinearB ideograms}', "");
Expect(0, 65791, '\P{Blk=_-LinearB ideograms}', "");
Expect(1, 65791, '\P{^Blk=_-LinearB ideograms}', "");
Expect(0, 65663, '\p{Blk=_-LinearB ideograms}', "");
Expect(1, 65663, '\p{^Blk=_-LinearB ideograms}', "");
Expect(1, 65663, '\P{Blk=_-LinearB ideograms}', "");
Expect(0, 65663, '\P{^Blk=_-LinearB ideograms}', "");
Error('\p{Is_Block=/a/  LINEAR_BIdeograms}');
Error('\P{Is_Block=/a/  LINEAR_BIdeograms}');
Expect(1, 65791, '\p{Is_Block=linearbideograms}', "");
Expect(0, 65791, '\p{^Is_Block=linearbideograms}', "");
Expect(0, 65791, '\P{Is_Block=linearbideograms}', "");
Expect(1, 65791, '\P{^Is_Block=linearbideograms}', "");
Expect(0, 65663, '\p{Is_Block=linearbideograms}', "");
Expect(1, 65663, '\p{^Is_Block=linearbideograms}', "");
Expect(1, 65663, '\P{Is_Block=linearbideograms}', "");
Expect(0, 65663, '\P{^Is_Block=linearbideograms}', "");
Expect(1, 65791, '\p{Is_Block= -Linear Bideograms}', "");
Expect(0, 65791, '\p{^Is_Block= -Linear Bideograms}', "");
Expect(0, 65791, '\P{Is_Block= -Linear Bideograms}', "");
Expect(1, 65791, '\P{^Is_Block= -Linear Bideograms}', "");
Expect(0, 65663, '\p{Is_Block= -Linear Bideograms}', "");
Expect(1, 65663, '\p{^Is_Block= -Linear Bideograms}', "");
Expect(1, 65663, '\P{Is_Block= -Linear Bideograms}', "");
Expect(0, 65663, '\P{^Is_Block= -Linear Bideograms}', "");
Error('\p{Is_Blk=/a/Linear Bideograms}');
Error('\P{Is_Blk=/a/Linear Bideograms}');
Expect(1, 65791, '\p{Is_Blk=linearbideograms}', "");
Expect(0, 65791, '\p{^Is_Blk=linearbideograms}', "");
Expect(0, 65791, '\P{Is_Blk=linearbideograms}', "");
Expect(1, 65791, '\P{^Is_Blk=linearbideograms}', "");
Expect(0, 65663, '\p{Is_Blk=linearbideograms}', "");
Expect(1, 65663, '\p{^Is_Blk=linearbideograms}', "");
Expect(1, 65663, '\P{Is_Blk=linearbideograms}', "");
Expect(0, 65663, '\P{^Is_Blk=linearbideograms}', "");
Expect(1, 65791, '\p{Is_Blk=-_linear	B	Ideograms}', "");
Expect(0, 65791, '\p{^Is_Blk=-_linear	B	Ideograms}', "");
Expect(0, 65791, '\P{Is_Blk=-_linear	B	Ideograms}', "");
Expect(1, 65791, '\P{^Is_Blk=-_linear	B	Ideograms}', "");
Expect(0, 65663, '\p{Is_Blk=-_linear	B	Ideograms}', "");
Expect(1, 65663, '\p{^Is_Blk=-_linear	B	Ideograms}', "");
Expect(1, 65663, '\P{Is_Blk=-_linear	B	Ideograms}', "");
Expect(0, 65663, '\P{^Is_Blk=-_linear	B	Ideograms}', "");
Error('\p{Block=/a/		CHEROKEE}');
Error('\P{Block=/a/		CHEROKEE}');
Expect(1, 5119, '\p{Block=cherokee}', "");
Expect(0, 5119, '\p{^Block=cherokee}', "");
Expect(0, 5119, '\P{Block=cherokee}', "");
Expect(1, 5119, '\P{^Block=cherokee}', "");
Expect(0, 5023, '\p{Block=cherokee}', "");
Expect(1, 5023, '\p{^Block=cherokee}', "");
Expect(1, 5023, '\P{Block=cherokee}', "");
Expect(0, 5023, '\P{^Block=cherokee}', "");
Expect(1, 5119, '\p{Block= 	Cherokee}', "");
Expect(0, 5119, '\p{^Block= 	Cherokee}', "");
Expect(0, 5119, '\P{Block= 	Cherokee}', "");
Expect(1, 5119, '\P{^Block= 	Cherokee}', "");
Expect(0, 5023, '\p{Block= 	Cherokee}', "");
Expect(1, 5023, '\p{^Block= 	Cherokee}', "");
Expect(1, 5023, '\P{Block= 	Cherokee}', "");
Expect(0, 5023, '\P{^Block= 	Cherokee}', "");
Error('\p{Blk=-Cherokee/a/}');
Error('\P{Blk=-Cherokee/a/}');
Expect(1, 5119, '\p{Blk=cherokee}', "");
Expect(0, 5119, '\p{^Blk=cherokee}', "");
Expect(0, 5119, '\P{Blk=cherokee}', "");
Expect(1, 5119, '\P{^Blk=cherokee}', "");
Expect(0, 5023, '\p{Blk=cherokee}', "");
Expect(1, 5023, '\p{^Blk=cherokee}', "");
Expect(1, 5023, '\P{Blk=cherokee}', "");
Expect(0, 5023, '\P{^Blk=cherokee}', "");
Expect(1, 5119, '\p{Blk=	 Cherokee}', "");
Expect(0, 5119, '\p{^Blk=	 Cherokee}', "");
Expect(0, 5119, '\P{Blk=	 Cherokee}', "");
Expect(1, 5119, '\P{^Blk=	 Cherokee}', "");
Expect(0, 5023, '\p{Blk=	 Cherokee}', "");
Expect(1, 5023, '\p{^Blk=	 Cherokee}', "");
Expect(1, 5023, '\P{Blk=	 Cherokee}', "");
Expect(0, 5023, '\P{^Blk=	 Cherokee}', "");
Error('\p{Is_Block= Cherokee:=}');
Error('\P{Is_Block= Cherokee:=}');
Expect(1, 5119, '\p{Is_Block=cherokee}', "");
Expect(0, 5119, '\p{^Is_Block=cherokee}', "");
Expect(0, 5119, '\P{Is_Block=cherokee}', "");
Expect(1, 5119, '\P{^Is_Block=cherokee}', "");
Expect(0, 5023, '\p{Is_Block=cherokee}', "");
Expect(1, 5023, '\p{^Is_Block=cherokee}', "");
Expect(1, 5023, '\P{Is_Block=cherokee}', "");
Expect(0, 5023, '\P{^Is_Block=cherokee}', "");
Expect(1, 5119, '\p{Is_Block= -CHEROKEE}', "");
Expect(0, 5119, '\p{^Is_Block= -CHEROKEE}', "");
Expect(0, 5119, '\P{Is_Block= -CHEROKEE}', "");
Expect(1, 5119, '\P{^Is_Block= -CHEROKEE}', "");
Expect(0, 5023, '\p{Is_Block= -CHEROKEE}', "");
Expect(1, 5023, '\p{^Is_Block= -CHEROKEE}', "");
Expect(1, 5023, '\P{Is_Block= -CHEROKEE}', "");
Expect(0, 5023, '\P{^Is_Block= -CHEROKEE}', "");
Error('\p{Is_Blk=_ cherokee/a/}');
Error('\P{Is_Blk=_ cherokee/a/}');
Expect(1, 5119, '\p{Is_Blk=cherokee}', "");
Expect(0, 5119, '\p{^Is_Blk=cherokee}', "");
Expect(0, 5119, '\P{Is_Blk=cherokee}', "");
Expect(1, 5119, '\P{^Is_Blk=cherokee}', "");
Expect(0, 5023, '\p{Is_Blk=cherokee}', "");
Expect(1, 5023, '\p{^Is_Blk=cherokee}', "");
Expect(1, 5023, '\P{Is_Blk=cherokee}', "");
Expect(0, 5023, '\P{^Is_Blk=cherokee}', "");
Expect(1, 5119, '\p{Is_Blk: 		cherokee}', "");
Expect(0, 5119, '\p{^Is_Blk: 		cherokee}', "");
Expect(0, 5119, '\P{Is_Blk: 		cherokee}', "");
Expect(1, 5119, '\P{^Is_Blk: 		cherokee}', "");
Expect(0, 5023, '\p{Is_Blk: 		cherokee}', "");
Expect(1, 5023, '\p{^Is_Blk: 		cherokee}', "");
Expect(1, 5023, '\P{Is_Blk: 		cherokee}', "");
Expect(0, 5023, '\P{^Is_Blk: 		cherokee}', "");
Error('\p{Block=__BOPOMOFO Extended/a/}');
Error('\P{Block=__BOPOMOFO Extended/a/}');
Expect(1, 12735, '\p{Block=bopomofoextended}', "");
Expect(0, 12735, '\p{^Block=bopomofoextended}', "");
Expect(0, 12735, '\P{Block=bopomofoextended}', "");
Expect(1, 12735, '\P{^Block=bopomofoextended}', "");
Expect(0, 12703, '\p{Block=bopomofoextended}', "");
Expect(1, 12703, '\p{^Block=bopomofoextended}', "");
Expect(1, 12703, '\P{Block=bopomofoextended}', "");
Expect(0, 12703, '\P{^Block=bopomofoextended}', "");
Expect(1, 12735, '\p{Block=__bopomofo extended}', "");
Expect(0, 12735, '\p{^Block=__bopomofo extended}', "");
Expect(0, 12735, '\P{Block=__bopomofo extended}', "");
Expect(1, 12735, '\P{^Block=__bopomofo extended}', "");
Expect(0, 12703, '\p{Block=__bopomofo extended}', "");
Expect(1, 12703, '\p{^Block=__bopomofo extended}', "");
Expect(1, 12703, '\P{Block=__bopomofo extended}', "");
Expect(0, 12703, '\P{^Block=__bopomofo extended}', "");
Error('\p{Blk=	_Bopomofo:=Extended}');
Error('\P{Blk=	_Bopomofo:=Extended}');
Expect(1, 12735, '\p{Blk=bopomofoextended}', "");
Expect(0, 12735, '\p{^Blk=bopomofoextended}', "");
Expect(0, 12735, '\P{Blk=bopomofoextended}', "");
Expect(1, 12735, '\P{^Blk=bopomofoextended}', "");
Expect(0, 12703, '\p{Blk=bopomofoextended}', "");
Expect(1, 12703, '\p{^Blk=bopomofoextended}', "");
Expect(1, 12703, '\P{Blk=bopomofoextended}', "");
Expect(0, 12703, '\P{^Blk=bopomofoextended}', "");
Expect(1, 12735, '\p{Blk: -BOPOMOFOEXTENDED}', "");
Expect(0, 12735, '\p{^Blk: -BOPOMOFOEXTENDED}', "");
Expect(0, 12735, '\P{Blk: -BOPOMOFOEXTENDED}', "");
Expect(1, 12735, '\P{^Blk: -BOPOMOFOEXTENDED}', "");
Expect(0, 12703, '\p{Blk: -BOPOMOFOEXTENDED}', "");
Expect(1, 12703, '\p{^Blk: -BOPOMOFOEXTENDED}', "");
Expect(1, 12703, '\P{Blk: -BOPOMOFOEXTENDED}', "");
Expect(0, 12703, '\P{^Blk: -BOPOMOFOEXTENDED}', "");
Error('\p{Is_Block:		BOPOMOFO:=Extended}');
Error('\P{Is_Block:		BOPOMOFO:=Extended}');
Expect(1, 12735, '\p{Is_Block=bopomofoextended}', "");
Expect(0, 12735, '\p{^Is_Block=bopomofoextended}', "");
Expect(0, 12735, '\P{Is_Block=bopomofoextended}', "");
Expect(1, 12735, '\P{^Is_Block=bopomofoextended}', "");
Expect(0, 12703, '\p{Is_Block=bopomofoextended}', "");
Expect(1, 12703, '\p{^Is_Block=bopomofoextended}', "");
Expect(1, 12703, '\P{Is_Block=bopomofoextended}', "");
Expect(0, 12703, '\P{^Is_Block=bopomofoextended}', "");
Expect(1, 12735, '\p{Is_Block=	 Bopomofoextended}', "");
Expect(0, 12735, '\p{^Is_Block=	 Bopomofoextended}', "");
Expect(0, 12735, '\P{Is_Block=	 Bopomofoextended}', "");
Expect(1, 12735, '\P{^Is_Block=	 Bopomofoextended}', "");
Expect(0, 12703, '\p{Is_Block=	 Bopomofoextended}', "");
Expect(1, 12703, '\p{^Is_Block=	 Bopomofoextended}', "");
Expect(1, 12703, '\P{Is_Block=	 Bopomofoextended}', "");
Expect(0, 12703, '\P{^Is_Block=	 Bopomofoextended}', "");
Error('\p{Is_Blk=:= _bopomofo Extended}');
Error('\P{Is_Blk=:= _bopomofo Extended}');
Expect(1, 12735, '\p{Is_Blk=bopomofoextended}', "");
Expect(0, 12735, '\p{^Is_Blk=bopomofoextended}', "");
Expect(0, 12735, '\P{Is_Blk=bopomofoextended}', "");
Expect(1, 12735, '\P{^Is_Blk=bopomofoextended}', "");
Expect(0, 12703, '\p{Is_Blk=bopomofoextended}', "");
Expect(1, 12703, '\p{^Is_Blk=bopomofoextended}', "");
Expect(1, 12703, '\P{Is_Blk=bopomofoextended}', "");
Expect(0, 12703, '\P{^Is_Blk=bopomofoextended}', "");
Expect(1, 12735, '\p{Is_Blk=_	BOPOMOFO_Extended}', "");
Expect(0, 12735, '\p{^Is_Blk=_	BOPOMOFO_Extended}', "");
Expect(0, 12735, '\P{Is_Blk=_	BOPOMOFO_Extended}', "");
Expect(1, 12735, '\P{^Is_Blk=_	BOPOMOFO_Extended}', "");
Expect(0, 12703, '\p{Is_Blk=_	BOPOMOFO_Extended}', "");
Expect(1, 12703, '\p{^Is_Blk=_	BOPOMOFO_Extended}', "");
Expect(1, 12703, '\P{Is_Blk=_	BOPOMOFO_Extended}', "");
Expect(0, 12703, '\P{^Is_Blk=_	BOPOMOFO_Extended}', "");
Error('\p{Block=/a/		OGHAM}');
Error('\P{Block=/a/		OGHAM}');
Expect(1, 5791, '\p{Block=ogham}', "");
Expect(0, 5791, '\p{^Block=ogham}', "");
Expect(0, 5791, '\P{Block=ogham}', "");
Expect(1, 5791, '\P{^Block=ogham}', "");
Expect(0, 5759, '\p{Block=ogham}', "");
Expect(1, 5759, '\p{^Block=ogham}', "");
Expect(1, 5759, '\P{Block=ogham}', "");
Expect(0, 5759, '\P{^Block=ogham}', "");
Expect(1, 5791, '\p{Block=	_ogham}', "");
Expect(0, 5791, '\p{^Block=	_ogham}', "");
Expect(0, 5791, '\P{Block=	_ogham}', "");
Expect(1, 5791, '\P{^Block=	_ogham}', "");
Expect(0, 5759, '\p{Block=	_ogham}', "");
Expect(1, 5759, '\p{^Block=	_ogham}', "");
Expect(1, 5759, '\P{Block=	_ogham}', "");
Expect(0, 5759, '\P{^Block=	_ogham}', "");
Error('\p{Blk=-/a/ogham}');
Error('\P{Blk=-/a/ogham}');
Expect(1, 5791, '\p{Blk=ogham}', "");
Expect(0, 5791, '\p{^Blk=ogham}', "");
Expect(0, 5791, '\P{Blk=ogham}', "");
Expect(1, 5791, '\P{^Blk=ogham}', "");
Expect(0, 5759, '\p{Blk=ogham}', "");
Expect(1, 5759, '\p{^Blk=ogham}', "");
Expect(1, 5759, '\P{Blk=ogham}', "");
Expect(0, 5759, '\P{^Blk=ogham}', "");
Expect(1, 5791, '\p{Blk= Ogham}', "");
Expect(0, 5791, '\p{^Blk= Ogham}', "");
Expect(0, 5791, '\P{Blk= Ogham}', "");
Expect(1, 5791, '\P{^Blk= Ogham}', "");
Expect(0, 5759, '\p{Blk= Ogham}', "");
Expect(1, 5759, '\p{^Blk= Ogham}', "");
Expect(1, 5759, '\P{Blk= Ogham}', "");
Expect(0, 5759, '\P{^Blk= Ogham}', "");
Error('\p{Is_Block=-:=ogham}');
Error('\P{Is_Block=-:=ogham}');
Expect(1, 5791, '\p{Is_Block=ogham}', "");
Expect(0, 5791, '\p{^Is_Block=ogham}', "");
Expect(0, 5791, '\P{Is_Block=ogham}', "");
Expect(1, 5791, '\P{^Is_Block=ogham}', "");
Expect(0, 5759, '\p{Is_Block=ogham}', "");
Expect(1, 5759, '\p{^Is_Block=ogham}', "");
Expect(1, 5759, '\P{Is_Block=ogham}', "");
Expect(0, 5759, '\P{^Is_Block=ogham}', "");
Expect(1, 5791, '\p{Is_Block=-	OGHAM}', "");
Expect(0, 5791, '\p{^Is_Block=-	OGHAM}', "");
Expect(0, 5791, '\P{Is_Block=-	OGHAM}', "");
Expect(1, 5791, '\P{^Is_Block=-	OGHAM}', "");
Expect(0, 5759, '\p{Is_Block=-	OGHAM}', "");
Expect(1, 5759, '\p{^Is_Block=-	OGHAM}', "");
Expect(1, 5759, '\P{Is_Block=-	OGHAM}', "");
Expect(0, 5759, '\P{^Is_Block=-	OGHAM}', "");
Error('\p{Is_Blk=:=_Ogham}');
Error('\P{Is_Blk=:=_Ogham}');
Expect(1, 5791, '\p{Is_Blk=ogham}', "");
Expect(0, 5791, '\p{^Is_Blk=ogham}', "");
Expect(0, 5791, '\P{Is_Blk=ogham}', "");
Expect(1, 5791, '\P{^Is_Blk=ogham}', "");
Expect(0, 5759, '\p{Is_Blk=ogham}', "");
Expect(1, 5759, '\p{^Is_Blk=ogham}', "");
Expect(1, 5759, '\P{Is_Blk=ogham}', "");
Expect(0, 5759, '\P{^Is_Blk=ogham}', "");
Expect(1, 5791, '\p{Is_Blk=	_Ogham}', "");
Expect(0, 5791, '\p{^Is_Blk=	_Ogham}', "");
Expect(0, 5791, '\P{Is_Blk=	_Ogham}', "");
Expect(1, 5791, '\P{^Is_Blk=	_Ogham}', "");
Expect(0, 5759, '\p{Is_Blk=	_Ogham}', "");
Expect(1, 5759, '\p{^Is_Blk=	_Ogham}', "");
Expect(1, 5759, '\P{Is_Blk=	_Ogham}', "");
Expect(0, 5759, '\P{^Is_Blk=	_Ogham}', "");
Error('\p{Block:   :=_SAMARITAN}');
Error('\P{Block:   :=_SAMARITAN}');
Expect(1, 2111, '\p{Block=samaritan}', "");
Expect(0, 2111, '\p{^Block=samaritan}', "");
Expect(0, 2111, '\P{Block=samaritan}', "");
Expect(1, 2111, '\P{^Block=samaritan}', "");
Expect(0, 2047, '\p{Block=samaritan}', "");
Expect(1, 2047, '\p{^Block=samaritan}', "");
Expect(1, 2047, '\P{Block=samaritan}', "");
Expect(0, 2047, '\P{^Block=samaritan}', "");
Expect(1, 2111, '\p{Block=-	Samaritan}', "");
Expect(0, 2111, '\p{^Block=-	Samaritan}', "");
Expect(0, 2111, '\P{Block=-	Samaritan}', "");
Expect(1, 2111, '\P{^Block=-	Samaritan}', "");
Expect(0, 2047, '\p{Block=-	Samaritan}', "");
Expect(1, 2047, '\p{^Block=-	Samaritan}', "");
Expect(1, 2047, '\P{Block=-	Samaritan}', "");
Expect(0, 2047, '\P{^Block=-	Samaritan}', "");
Error('\p{Blk=/a/--samaritan}');
Error('\P{Blk=/a/--samaritan}');
Expect(1, 2111, '\p{Blk: samaritan}', "");
Expect(0, 2111, '\p{^Blk: samaritan}', "");
Expect(0, 2111, '\P{Blk: samaritan}', "");
Expect(1, 2111, '\P{^Blk: samaritan}', "");
Expect(0, 2047, '\p{Blk: samaritan}', "");
Expect(1, 2047, '\p{^Blk: samaritan}', "");
Expect(1, 2047, '\P{Blk: samaritan}', "");
Expect(0, 2047, '\P{^Blk: samaritan}', "");
Expect(1, 2111, '\p{Blk: Samaritan}', "");
Expect(0, 2111, '\p{^Blk: Samaritan}', "");
Expect(0, 2111, '\P{Blk: Samaritan}', "");
Expect(1, 2111, '\P{^Blk: Samaritan}', "");
Expect(0, 2047, '\p{Blk: Samaritan}', "");
Expect(1, 2047, '\p{^Blk: Samaritan}', "");
Expect(1, 2047, '\P{Blk: Samaritan}', "");
Expect(0, 2047, '\P{^Blk: Samaritan}', "");
Error('\p{Is_Block=/a/- samaritan}');
Error('\P{Is_Block=/a/- samaritan}');
Expect(1, 2111, '\p{Is_Block=samaritan}', "");
Expect(0, 2111, '\p{^Is_Block=samaritan}', "");
Expect(0, 2111, '\P{Is_Block=samaritan}', "");
Expect(1, 2111, '\P{^Is_Block=samaritan}', "");
Expect(0, 2047, '\p{Is_Block=samaritan}', "");
Expect(1, 2047, '\p{^Is_Block=samaritan}', "");
Expect(1, 2047, '\P{Is_Block=samaritan}', "");
Expect(0, 2047, '\P{^Is_Block=samaritan}', "");
Expect(1, 2111, '\p{Is_Block=	Samaritan}', "");
Expect(0, 2111, '\p{^Is_Block=	Samaritan}', "");
Expect(0, 2111, '\P{Is_Block=	Samaritan}', "");
Expect(1, 2111, '\P{^Is_Block=	Samaritan}', "");
Expect(0, 2047, '\p{Is_Block=	Samaritan}', "");
Expect(1, 2047, '\p{^Is_Block=	Samaritan}', "");
Expect(1, 2047, '\P{Is_Block=	Samaritan}', "");
Expect(0, 2047, '\P{^Is_Block=	Samaritan}', "");
Error('\p{Is_Blk=:=	_SAMARITAN}');
Error('\P{Is_Blk=:=	_SAMARITAN}');
Expect(1, 2111, '\p{Is_Blk=samaritan}', "");
Expect(0, 2111, '\p{^Is_Blk=samaritan}', "");
Expect(0, 2111, '\P{Is_Blk=samaritan}', "");
Expect(1, 2111, '\P{^Is_Blk=samaritan}', "");
Expect(0, 2047, '\p{Is_Blk=samaritan}', "");
Expect(1, 2047, '\p{^Is_Blk=samaritan}', "");
Expect(1, 2047, '\P{Is_Blk=samaritan}', "");
Expect(0, 2047, '\P{^Is_Blk=samaritan}', "");
Expect(1, 2111, '\p{Is_Blk=	Samaritan}', "");
Expect(0, 2111, '\p{^Is_Blk=	Samaritan}', "");
Expect(0, 2111, '\P{Is_Blk=	Samaritan}', "");
Expect(1, 2111, '\P{^Is_Blk=	Samaritan}', "");
Expect(0, 2047, '\p{Is_Blk=	Samaritan}', "");
Expect(1, 2047, '\p{^Is_Blk=	Samaritan}', "");
Expect(1, 2047, '\P{Is_Blk=	Samaritan}', "");
Expect(0, 2047, '\P{^Is_Blk=	Samaritan}', "");
Error('\p{Block=-	Vai:=}');
Error('\P{Block=-	Vai:=}');
Expect(1, 42559, '\p{Block: vai}', "");
Expect(0, 42559, '\p{^Block: vai}', "");
Expect(0, 42559, '\P{Block: vai}', "");
Expect(1, 42559, '\P{^Block: vai}', "");
Expect(0, 42239, '\p{Block: vai}', "");
Expect(1, 42239, '\p{^Block: vai}', "");
Expect(1, 42239, '\P{Block: vai}', "");
Expect(0, 42239, '\P{^Block: vai}', "");
Expect(1, 42559, '\p{Block= VAI}', "");
Expect(0, 42559, '\p{^Block= VAI}', "");
Expect(0, 42559, '\P{Block= VAI}', "");
Expect(1, 42559, '\P{^Block= VAI}', "");
Expect(0, 42239, '\p{Block= VAI}', "");
Expect(1, 42239, '\p{^Block= VAI}', "");
Expect(1, 42239, '\P{Block= VAI}', "");
Expect(0, 42239, '\P{^Block= VAI}', "");
Error('\p{Blk=-VAI/a/}');
Error('\P{Blk=-VAI/a/}');
Expect(1, 42559, '\p{Blk=vai}', "");
Expect(0, 42559, '\p{^Blk=vai}', "");
Expect(0, 42559, '\P{Blk=vai}', "");
Expect(1, 42559, '\P{^Blk=vai}', "");
Expect(0, 42239, '\p{Blk=vai}', "");
Expect(1, 42239, '\p{^Blk=vai}', "");
Expect(1, 42239, '\P{Blk=vai}', "");
Expect(0, 42239, '\P{^Blk=vai}', "");
Expect(1, 42559, '\p{Blk: 		vai}', "");
Expect(0, 42559, '\p{^Blk: 		vai}', "");
Expect(0, 42559, '\P{Blk: 		vai}', "");
Expect(1, 42559, '\P{^Blk: 		vai}', "");
Expect(0, 42239, '\p{Blk: 		vai}', "");
Expect(1, 42239, '\p{^Blk: 		vai}', "");
Expect(1, 42239, '\P{Blk: 		vai}', "");
Expect(0, 42239, '\P{^Blk: 		vai}', "");
Error('\p{Is_Block:-Vai/a/}');
Error('\P{Is_Block:-Vai/a/}');
Expect(1, 42559, '\p{Is_Block=vai}', "");
Expect(0, 42559, '\p{^Is_Block=vai}', "");
Expect(0, 42559, '\P{Is_Block=vai}', "");
Expect(1, 42559, '\P{^Is_Block=vai}', "");
Expect(0, 42239, '\p{Is_Block=vai}', "");
Expect(1, 42239, '\p{^Is_Block=vai}', "");
Expect(1, 42239, '\P{Is_Block=vai}', "");
Expect(0, 42239, '\P{^Is_Block=vai}', "");
Error('\p{Is_Blk=	/a/vai}');
Error('\P{Is_Blk=	/a/vai}');
Expect(1, 42559, '\p{Is_Blk=vai}', "");
Expect(0, 42559, '\p{^Is_Blk=vai}', "");
Expect(0, 42559, '\P{Is_Blk=vai}', "");
Expect(1, 42559, '\P{^Is_Blk=vai}', "");
Expect(0, 42239, '\p{Is_Blk=vai}', "");
Expect(1, 42239, '\p{^Is_Blk=vai}', "");
Expect(1, 42239, '\P{Is_Blk=vai}', "");
Expect(0, 42239, '\P{^Is_Blk=vai}', "");
Expect(1, 42559, '\p{Is_Blk=_VAI}', "");
Expect(0, 42559, '\p{^Is_Blk=_VAI}', "");
Expect(0, 42559, '\P{Is_Blk=_VAI}', "");
Expect(1, 42559, '\P{^Is_Blk=_VAI}', "");
Expect(0, 42239, '\p{Is_Blk=_VAI}', "");
Expect(1, 42239, '\p{^Is_Blk=_VAI}', "");
Expect(1, 42239, '\P{Is_Blk=_VAI}', "");
Expect(0, 42239, '\P{^Is_Blk=_VAI}', "");
Error('\p{Block=/a/GENERALPunctuation}');
Error('\P{Block=/a/GENERALPunctuation}');
Expect(1, 8303, '\p{Block=generalpunctuation}', "");
Expect(0, 8303, '\p{^Block=generalpunctuation}', "");
Expect(0, 8303, '\P{Block=generalpunctuation}', "");
Expect(1, 8303, '\P{^Block=generalpunctuation}', "");
Expect(0, 8191, '\p{Block=generalpunctuation}', "");
Expect(1, 8191, '\p{^Block=generalpunctuation}', "");
Expect(1, 8191, '\P{Block=generalpunctuation}', "");
Expect(0, 8191, '\P{^Block=generalpunctuation}', "");
Expect(1, 8303, '\p{Block=--General	PUNCTUATION}', "");
Expect(0, 8303, '\p{^Block=--General	PUNCTUATION}', "");
Expect(0, 8303, '\P{Block=--General	PUNCTUATION}', "");
Expect(1, 8303, '\P{^Block=--General	PUNCTUATION}', "");
Expect(0, 8191, '\p{Block=--General	PUNCTUATION}', "");
Expect(1, 8191, '\p{^Block=--General	PUNCTUATION}', "");
Expect(1, 8191, '\P{Block=--General	PUNCTUATION}', "");
Expect(0, 8191, '\P{^Block=--General	PUNCTUATION}', "");
Error('\p{Blk=_	GeneralPunctuation:=}');
Error('\P{Blk=_	GeneralPunctuation:=}');
Expect(1, 8303, '\p{Blk=generalpunctuation}', "");
Expect(0, 8303, '\p{^Blk=generalpunctuation}', "");
Expect(0, 8303, '\P{Blk=generalpunctuation}', "");
Expect(1, 8303, '\P{^Blk=generalpunctuation}', "");
Expect(0, 8191, '\p{Blk=generalpunctuation}', "");
Expect(1, 8191, '\p{^Blk=generalpunctuation}', "");
Expect(1, 8191, '\P{Blk=generalpunctuation}', "");
Expect(0, 8191, '\P{^Blk=generalpunctuation}', "");
Expect(1, 8303, '\p{Blk=General_Punctuation}', "");
Expect(0, 8303, '\p{^Blk=General_Punctuation}', "");
Expect(0, 8303, '\P{Blk=General_Punctuation}', "");
Expect(1, 8303, '\P{^Blk=General_Punctuation}', "");
Expect(0, 8191, '\p{Blk=General_Punctuation}', "");
Expect(1, 8191, '\p{^Blk=General_Punctuation}', "");
Expect(1, 8191, '\P{Blk=General_Punctuation}', "");
Expect(0, 8191, '\P{^Blk=General_Punctuation}', "");
Error('\p{Is_Block= general_Punctuation:=}');
Error('\P{Is_Block= general_Punctuation:=}');
Expect(1, 8303, '\p{Is_Block=generalpunctuation}', "");
Expect(0, 8303, '\p{^Is_Block=generalpunctuation}', "");
Expect(0, 8303, '\P{Is_Block=generalpunctuation}', "");
Expect(1, 8303, '\P{^Is_Block=generalpunctuation}', "");
Expect(0, 8191, '\p{Is_Block=generalpunctuation}', "");
Expect(1, 8191, '\p{^Is_Block=generalpunctuation}', "");
Expect(1, 8191, '\P{Is_Block=generalpunctuation}', "");
Expect(0, 8191, '\P{^Is_Block=generalpunctuation}', "");
Expect(1, 8303, '\p{Is_Block= 	GENERAL_Punctuation}', "");
Expect(0, 8303, '\p{^Is_Block= 	GENERAL_Punctuation}', "");
Expect(0, 8303, '\P{Is_Block= 	GENERAL_Punctuation}', "");
Expect(1, 8303, '\P{^Is_Block= 	GENERAL_Punctuation}', "");
Expect(0, 8191, '\p{Is_Block= 	GENERAL_Punctuation}', "");
Expect(1, 8191, '\p{^Is_Block= 	GENERAL_Punctuation}', "");
Expect(1, 8191, '\P{Is_Block= 	GENERAL_Punctuation}', "");
Expect(0, 8191, '\P{^Is_Block= 	GENERAL_Punctuation}', "");
Error('\p{Is_Blk=_:=general	punctuation}');
Error('\P{Is_Blk=_:=general	punctuation}');
Expect(1, 8303, '\p{Is_Blk=generalpunctuation}', "");
Expect(0, 8303, '\p{^Is_Blk=generalpunctuation}', "");
Expect(0, 8303, '\P{Is_Blk=generalpunctuation}', "");
Expect(1, 8303, '\P{^Is_Blk=generalpunctuation}', "");
Expect(0, 8191, '\p{Is_Blk=generalpunctuation}', "");
Expect(1, 8191, '\p{^Is_Blk=generalpunctuation}', "");
Expect(1, 8191, '\P{Is_Blk=generalpunctuation}', "");
Expect(0, 8191, '\P{^Is_Blk=generalpunctuation}', "");
Expect(1, 8303, '\p{Is_Blk=_-General	Punctuation}', "");
Expect(0, 8303, '\p{^Is_Blk=_-General	Punctuation}', "");
Expect(0, 8303, '\P{Is_Blk=_-General	Punctuation}', "");
Expect(1, 8303, '\P{^Is_Blk=_-General	Punctuation}', "");
Expect(0, 8191, '\p{Is_Blk=_-General	Punctuation}', "");
Expect(1, 8191, '\p{^Is_Blk=_-General	Punctuation}', "");
Expect(1, 8191, '\P{Is_Blk=_-General	Punctuation}', "");
Expect(0, 8191, '\P{^Is_Blk=_-General	Punctuation}', "");
Error('\p{Block=/a/- rejang}');
Error('\P{Block=/a/- rejang}');
Expect(1, 43359, '\p{Block=rejang}', "");
Expect(0, 43359, '\p{^Block=rejang}', "");
Expect(0, 43359, '\P{Block=rejang}', "");
Expect(1, 43359, '\P{^Block=rejang}', "");
Expect(0, 43311, '\p{Block=rejang}', "");
Expect(1, 43311, '\p{^Block=rejang}', "");
Expect(1, 43311, '\P{Block=rejang}', "");
Expect(0, 43311, '\P{^Block=rejang}', "");
Expect(1, 43359, '\p{Block=- Rejang}', "");
Expect(0, 43359, '\p{^Block=- Rejang}', "");
Expect(0, 43359, '\P{Block=- Rejang}', "");
Expect(1, 43359, '\P{^Block=- Rejang}', "");
Expect(0, 43311, '\p{Block=- Rejang}', "");
Expect(1, 43311, '\p{^Block=- Rejang}', "");
Expect(1, 43311, '\P{Block=- Rejang}', "");
Expect(0, 43311, '\P{^Block=- Rejang}', "");
Error('\p{Blk=:= _Rejang}');
Error('\P{Blk=:= _Rejang}');
Expect(1, 43359, '\p{Blk=rejang}', "");
Expect(0, 43359, '\p{^Blk=rejang}', "");
Expect(0, 43359, '\P{Blk=rejang}', "");
Expect(1, 43359, '\P{^Blk=rejang}', "");
Expect(0, 43311, '\p{Blk=rejang}', "");
Expect(1, 43311, '\p{^Blk=rejang}', "");
Expect(1, 43311, '\P{Blk=rejang}', "");
Expect(0, 43311, '\P{^Blk=rejang}', "");
Expect(1, 43359, '\p{Blk=	_Rejang}', "");
Expect(0, 43359, '\p{^Blk=	_Rejang}', "");
Expect(0, 43359, '\P{Blk=	_Rejang}', "");
Expect(1, 43359, '\P{^Blk=	_Rejang}', "");
Expect(0, 43311, '\p{Blk=	_Rejang}', "");
Expect(1, 43311, '\p{^Blk=	_Rejang}', "");
Expect(1, 43311, '\P{Blk=	_Rejang}', "");
Expect(0, 43311, '\P{^Blk=	_Rejang}', "");
Error('\p{Is_Block=/a/	-Rejang}');
Error('\P{Is_Block=/a/	-Rejang}');
Expect(1, 43359, '\p{Is_Block=rejang}', "");
Expect(0, 43359, '\p{^Is_Block=rejang}', "");
Expect(0, 43359, '\P{Is_Block=rejang}', "");
Expect(1, 43359, '\P{^Is_Block=rejang}', "");
Expect(0, 43311, '\p{Is_Block=rejang}', "");
Expect(1, 43311, '\p{^Is_Block=rejang}', "");
Expect(1, 43311, '\P{Is_Block=rejang}', "");
Expect(0, 43311, '\P{^Is_Block=rejang}', "");
Expect(1, 43359, '\p{Is_Block=	Rejang}', "");
Expect(0, 43359, '\p{^Is_Block=	Rejang}', "");
Expect(0, 43359, '\P{Is_Block=	Rejang}', "");
Expect(1, 43359, '\P{^Is_Block=	Rejang}', "");
Expect(0, 43311, '\p{Is_Block=	Rejang}', "");
Expect(1, 43311, '\p{^Is_Block=	Rejang}', "");
Expect(1, 43311, '\P{Is_Block=	Rejang}', "");
Expect(0, 43311, '\P{^Is_Block=	Rejang}', "");
Error('\p{Is_Blk: := 	rejang}');
Error('\P{Is_Blk: := 	rejang}');
Expect(1, 43359, '\p{Is_Blk=rejang}', "");
Expect(0, 43359, '\p{^Is_Blk=rejang}', "");
Expect(0, 43359, '\P{Is_Blk=rejang}', "");
Expect(1, 43359, '\P{^Is_Blk=rejang}', "");
Expect(0, 43311, '\p{Is_Blk=rejang}', "");
Expect(1, 43311, '\p{^Is_Blk=rejang}', "");
Expect(1, 43311, '\P{Is_Blk=rejang}', "");
Expect(0, 43311, '\P{^Is_Blk=rejang}', "");
Expect(1, 43359, '\p{Is_Blk=	 Rejang}', "");
Expect(0, 43359, '\p{^Is_Blk=	 Rejang}', "");
Expect(0, 43359, '\P{Is_Blk=	 Rejang}', "");
Expect(1, 43359, '\P{^Is_Blk=	 Rejang}', "");
Expect(0, 43311, '\p{Is_Blk=	 Rejang}', "");
Expect(1, 43311, '\p{^Is_Blk=	 Rejang}', "");
Expect(1, 43311, '\P{Is_Blk=	 Rejang}', "");
Expect(0, 43311, '\P{^Is_Blk=	 Rejang}', "");
Error('\p{Block=_/a/Old TURKIC}');
Error('\P{Block=_/a/Old TURKIC}');
Expect(1, 68687, '\p{Block=oldturkic}', "");
Expect(0, 68687, '\p{^Block=oldturkic}', "");
Expect(0, 68687, '\P{Block=oldturkic}', "");
Expect(1, 68687, '\P{^Block=oldturkic}', "");
Expect(0, 68607, '\p{Block=oldturkic}', "");
Expect(1, 68607, '\p{^Block=oldturkic}', "");
Expect(1, 68607, '\P{Block=oldturkic}', "");
Expect(0, 68607, '\P{^Block=oldturkic}', "");
Expect(1, 68687, '\p{Block=_	Old_Turkic}', "");
Expect(0, 68687, '\p{^Block=_	Old_Turkic}', "");
Expect(0, 68687, '\P{Block=_	Old_Turkic}', "");
Expect(1, 68687, '\P{^Block=_	Old_Turkic}', "");
Expect(0, 68607, '\p{Block=_	Old_Turkic}', "");
Expect(1, 68607, '\p{^Block=_	Old_Turkic}', "");
Expect(1, 68607, '\P{Block=_	Old_Turkic}', "");
Expect(0, 68607, '\P{^Block=_	Old_Turkic}', "");
Error('\p{Blk:   /a/-_OLD TURKIC}');
Error('\P{Blk:   /a/-_OLD TURKIC}');
Expect(1, 68687, '\p{Blk:oldturkic}', "");
Expect(0, 68687, '\p{^Blk:oldturkic}', "");
Expect(0, 68687, '\P{Blk:oldturkic}', "");
Expect(1, 68687, '\P{^Blk:oldturkic}', "");
Expect(0, 68607, '\p{Blk:oldturkic}', "");
Expect(1, 68607, '\p{^Blk:oldturkic}', "");
Expect(1, 68607, '\P{Blk:oldturkic}', "");
Expect(0, 68607, '\P{^Blk:oldturkic}', "");
Expect(1, 68687, '\p{Blk=_-old-Turkic}', "");
Expect(0, 68687, '\p{^Blk=_-old-Turkic}', "");
Expect(0, 68687, '\P{Blk=_-old-Turkic}', "");
Expect(1, 68687, '\P{^Blk=_-old-Turkic}', "");
Expect(0, 68607, '\p{Blk=_-old-Turkic}', "");
Expect(1, 68607, '\p{^Blk=_-old-Turkic}', "");
Expect(1, 68607, '\P{Blk=_-old-Turkic}', "");
Expect(0, 68607, '\P{^Blk=_-old-Turkic}', "");
Error('\p{Is_Block=	:=Old-TURKIC}');
Error('\P{Is_Block=	:=Old-TURKIC}');
Expect(1, 68687, '\p{Is_Block=oldturkic}', "");
Expect(0, 68687, '\p{^Is_Block=oldturkic}', "");
Expect(0, 68687, '\P{Is_Block=oldturkic}', "");
Expect(1, 68687, '\P{^Is_Block=oldturkic}', "");
Expect(0, 68607, '\p{Is_Block=oldturkic}', "");
Expect(1, 68607, '\p{^Is_Block=oldturkic}', "");
Expect(1, 68607, '\P{Is_Block=oldturkic}', "");
Expect(0, 68607, '\P{^Is_Block=oldturkic}', "");
Expect(1, 68687, '\p{Is_Block=	Old_Turkic}', "");
Expect(0, 68687, '\p{^Is_Block=	Old_Turkic}', "");
Expect(0, 68687, '\P{Is_Block=	Old_Turkic}', "");
Expect(1, 68687, '\P{^Is_Block=	Old_Turkic}', "");
Expect(0, 68607, '\p{Is_Block=	Old_Turkic}', "");
Expect(1, 68607, '\p{^Is_Block=	Old_Turkic}', "");
Expect(1, 68607, '\P{Is_Block=	Old_Turkic}', "");
Expect(0, 68607, '\P{^Is_Block=	Old_Turkic}', "");
Error('\p{Is_Blk=_-old	TURKIC/a/}');
Error('\P{Is_Blk=_-old	TURKIC/a/}');
Expect(1, 68687, '\p{Is_Blk=oldturkic}', "");
Expect(0, 68687, '\p{^Is_Blk=oldturkic}', "");
Expect(0, 68687, '\P{Is_Blk=oldturkic}', "");
Expect(1, 68687, '\P{^Is_Blk=oldturkic}', "");
Expect(0, 68607, '\p{Is_Blk=oldturkic}', "");
Expect(1, 68607, '\p{^Is_Blk=oldturkic}', "");
Expect(1, 68607, '\P{Is_Blk=oldturkic}', "");
Expect(0, 68607, '\P{^Is_Blk=oldturkic}', "");
Expect(1, 68687, '\p{Is_Blk=	_oldturkic}', "");
Expect(0, 68687, '\p{^Is_Blk=	_oldturkic}', "");
Expect(0, 68687, '\P{Is_Blk=	_oldturkic}', "");
Expect(1, 68687, '\P{^Is_Blk=	_oldturkic}', "");
Expect(0, 68607, '\p{Is_Blk=	_oldturkic}', "");
Expect(1, 68607, '\p{^Is_Blk=	_oldturkic}', "");
Expect(1, 68607, '\P{Is_Blk=	_oldturkic}', "");
Expect(0, 68607, '\P{^Is_Blk=	_oldturkic}', "");
Error('\p{Block= 	Ol_Chiki:=}');
Error('\P{Block= 	Ol_Chiki:=}');
Expect(1, 7295, '\p{Block=olchiki}', "");
Expect(0, 7295, '\p{^Block=olchiki}', "");
Expect(0, 7295, '\P{Block=olchiki}', "");
Expect(1, 7295, '\P{^Block=olchiki}', "");
Expect(0, 7247, '\p{Block=olchiki}', "");
Expect(1, 7247, '\p{^Block=olchiki}', "");
Expect(1, 7247, '\P{Block=olchiki}', "");
Expect(0, 7247, '\P{^Block=olchiki}', "");
Expect(1, 7295, '\p{Block=-Ol chiki}', "");
Expect(0, 7295, '\p{^Block=-Ol chiki}', "");
Expect(0, 7295, '\P{Block=-Ol chiki}', "");
Expect(1, 7295, '\P{^Block=-Ol chiki}', "");
Expect(0, 7247, '\p{Block=-Ol chiki}', "");
Expect(1, 7247, '\p{^Block=-Ol chiki}', "");
Expect(1, 7247, '\P{Block=-Ol chiki}', "");
Expect(0, 7247, '\P{^Block=-Ol chiki}', "");
Error('\p{Blk: _OLChiki:=}');
Error('\P{Blk: _OLChiki:=}');
Expect(1, 7295, '\p{Blk:	olchiki}', "");
Expect(0, 7295, '\p{^Blk:	olchiki}', "");
Expect(0, 7295, '\P{Blk:	olchiki}', "");
Expect(1, 7295, '\P{^Blk:	olchiki}', "");
Expect(0, 7247, '\p{Blk:	olchiki}', "");
Expect(1, 7247, '\p{^Blk:	olchiki}', "");
Expect(1, 7247, '\P{Blk:	olchiki}', "");
Expect(0, 7247, '\P{^Blk:	olchiki}', "");
Expect(1, 7295, '\p{Blk= 	Ol_Chiki}', "");
Expect(0, 7295, '\p{^Blk= 	Ol_Chiki}', "");
Expect(0, 7295, '\P{Blk= 	Ol_Chiki}', "");
Expect(1, 7295, '\P{^Blk= 	Ol_Chiki}', "");
Expect(0, 7247, '\p{Blk= 	Ol_Chiki}', "");
Expect(1, 7247, '\p{^Blk= 	Ol_Chiki}', "");
Expect(1, 7247, '\P{Blk= 	Ol_Chiki}', "");
Expect(0, 7247, '\P{^Blk= 	Ol_Chiki}', "");
Error('\p{Is_Block=-Olchiki/a/}');
Error('\P{Is_Block=-Olchiki/a/}');
Expect(1, 7295, '\p{Is_Block:olchiki}', "");
Expect(0, 7295, '\p{^Is_Block:olchiki}', "");
Expect(0, 7295, '\P{Is_Block:olchiki}', "");
Expect(1, 7295, '\P{^Is_Block:olchiki}', "");
Expect(0, 7247, '\p{Is_Block:olchiki}', "");
Expect(1, 7247, '\p{^Is_Block:olchiki}', "");
Expect(1, 7247, '\P{Is_Block:olchiki}', "");
Expect(0, 7247, '\P{^Is_Block:olchiki}', "");
Expect(1, 7295, '\p{Is_Block=_	Ol	chiki}', "");
Expect(0, 7295, '\p{^Is_Block=_	Ol	chiki}', "");
Expect(0, 7295, '\P{Is_Block=_	Ol	chiki}', "");
Expect(1, 7295, '\P{^Is_Block=_	Ol	chiki}', "");
Expect(0, 7247, '\p{Is_Block=_	Ol	chiki}', "");
Expect(1, 7247, '\p{^Is_Block=_	Ol	chiki}', "");
Expect(1, 7247, '\P{Is_Block=_	Ol	chiki}', "");
Expect(0, 7247, '\P{^Is_Block=_	Ol	chiki}', "");
Error('\p{Is_Blk=_:=ol	CHIKI}');
Error('\P{Is_Blk=_:=ol	CHIKI}');
Expect(1, 7295, '\p{Is_Blk:	olchiki}', "");
Expect(0, 7295, '\p{^Is_Blk:	olchiki}', "");
Expect(0, 7295, '\P{Is_Blk:	olchiki}', "");
Expect(1, 7295, '\P{^Is_Blk:	olchiki}', "");
Expect(0, 7247, '\p{Is_Blk:	olchiki}', "");
Expect(1, 7247, '\p{^Is_Blk:	olchiki}', "");
Expect(1, 7247, '\P{Is_Blk:	olchiki}', "");
Expect(0, 7247, '\P{^Is_Blk:	olchiki}', "");
Expect(1, 7295, '\p{Is_Blk=_Ol CHIKI}', "");
Expect(0, 7295, '\p{^Is_Blk=_Ol CHIKI}', "");
Expect(0, 7295, '\P{Is_Blk=_Ol CHIKI}', "");
Expect(1, 7295, '\P{^Is_Blk=_Ol CHIKI}', "");
Expect(0, 7247, '\p{Is_Blk=_Ol CHIKI}', "");
Expect(1, 7247, '\p{^Is_Blk=_Ol CHIKI}', "");
Expect(1, 7247, '\P{Is_Blk=_Ol CHIKI}', "");
Expect(0, 7247, '\P{^Is_Blk=_Ol CHIKI}', "");
Error('\p{Block= 	Kanbun/a/}');
Error('\P{Block= 	Kanbun/a/}');
Expect(1, 12703, '\p{Block=kanbun}', "");
Expect(0, 12703, '\p{^Block=kanbun}', "");
Expect(0, 12703, '\P{Block=kanbun}', "");
Expect(1, 12703, '\P{^Block=kanbun}', "");
Expect(0, 12687, '\p{Block=kanbun}', "");
Expect(1, 12687, '\p{^Block=kanbun}', "");
Expect(1, 12687, '\P{Block=kanbun}', "");
Expect(0, 12687, '\P{^Block=kanbun}', "");
Expect(1, 12703, '\p{Block=__kanbun}', "");
Expect(0, 12703, '\p{^Block=__kanbun}', "");
Expect(0, 12703, '\P{Block=__kanbun}', "");
Expect(1, 12703, '\P{^Block=__kanbun}', "");
Expect(0, 12687, '\p{Block=__kanbun}', "");
Expect(1, 12687, '\p{^Block=__kanbun}', "");
Expect(1, 12687, '\P{Block=__kanbun}', "");
Expect(0, 12687, '\P{^Block=__kanbun}', "");
Error('\p{Blk=_	Kanbun/a/}');
Error('\P{Blk=_	Kanbun/a/}');
Expect(1, 12703, '\p{Blk=kanbun}', "");
Expect(0, 12703, '\p{^Blk=kanbun}', "");
Expect(0, 12703, '\P{Blk=kanbun}', "");
Expect(1, 12703, '\P{^Blk=kanbun}', "");
Expect(0, 12687, '\p{Blk=kanbun}', "");
Expect(1, 12687, '\p{^Blk=kanbun}', "");
Expect(1, 12687, '\P{Blk=kanbun}', "");
Expect(0, 12687, '\P{^Blk=kanbun}', "");
Expect(1, 12703, '\p{Blk=  KANBUN}', "");
Expect(0, 12703, '\p{^Blk=  KANBUN}', "");
Expect(0, 12703, '\P{Blk=  KANBUN}', "");
Expect(1, 12703, '\P{^Blk=  KANBUN}', "");
Expect(0, 12687, '\p{Blk=  KANBUN}', "");
Expect(1, 12687, '\p{^Blk=  KANBUN}', "");
Expect(1, 12687, '\P{Blk=  KANBUN}', "");
Expect(0, 12687, '\P{^Blk=  KANBUN}', "");
Error('\p{Is_Block=:=_	KANBUN}');
Error('\P{Is_Block=:=_	KANBUN}');
Expect(1, 12703, '\p{Is_Block=kanbun}', "");
Expect(0, 12703, '\p{^Is_Block=kanbun}', "");
Expect(0, 12703, '\P{Is_Block=kanbun}', "");
Expect(1, 12703, '\P{^Is_Block=kanbun}', "");
Expect(0, 12687, '\p{Is_Block=kanbun}', "");
Expect(1, 12687, '\p{^Is_Block=kanbun}', "");
Expect(1, 12687, '\P{Is_Block=kanbun}', "");
Expect(0, 12687, '\P{^Is_Block=kanbun}', "");
Expect(1, 12703, '\p{Is_Block=_Kanbun}', "");
Expect(0, 12703, '\p{^Is_Block=_Kanbun}', "");
Expect(0, 12703, '\P{Is_Block=_Kanbun}', "");
Expect(1, 12703, '\P{^Is_Block=_Kanbun}', "");
Expect(0, 12687, '\p{Is_Block=_Kanbun}', "");
Expect(1, 12687, '\p{^Is_Block=_Kanbun}', "");
Expect(1, 12687, '\P{Is_Block=_Kanbun}', "");
Expect(0, 12687, '\P{^Is_Block=_Kanbun}', "");
Error('\p{Is_Blk=_/a/Kanbun}');
Error('\P{Is_Blk=_/a/Kanbun}');
Expect(1, 12703, '\p{Is_Blk=kanbun}', "");
Expect(0, 12703, '\p{^Is_Blk=kanbun}', "");
Expect(0, 12703, '\P{Is_Blk=kanbun}', "");
Expect(1, 12703, '\P{^Is_Blk=kanbun}', "");
Expect(0, 12687, '\p{Is_Blk=kanbun}', "");
Expect(1, 12687, '\p{^Is_Blk=kanbun}', "");
Expect(1, 12687, '\P{Is_Blk=kanbun}', "");
Expect(0, 12687, '\P{^Is_Blk=kanbun}', "");
Expect(1, 12703, '\p{Is_Blk=	KANBUN}', "");
Expect(0, 12703, '\p{^Is_Blk=	KANBUN}', "");
Expect(0, 12703, '\P{Is_Blk=	KANBUN}', "");
Expect(1, 12703, '\P{^Is_Blk=	KANBUN}', "");
Expect(0, 12687, '\p{Is_Blk=	KANBUN}', "");
Expect(1, 12687, '\p{^Is_Blk=	KANBUN}', "");
Expect(1, 12687, '\P{Is_Blk=	KANBUN}', "");
Expect(0, 12687, '\P{^Is_Blk=	KANBUN}', "");
Error('\p{Block=-CYRILLIC/a/Extended_A}');
Error('\P{Block=-CYRILLIC/a/Extended_A}');
Expect(1, 11775, '\p{Block=cyrillicextendeda}', "");
Expect(0, 11775, '\p{^Block=cyrillicextendeda}', "");
Expect(0, 11775, '\P{Block=cyrillicextendeda}', "");
Expect(1, 11775, '\P{^Block=cyrillicextendeda}', "");
Expect(0, 11743, '\p{Block=cyrillicextendeda}', "");
Expect(1, 11743, '\p{^Block=cyrillicextendeda}', "");
Expect(1, 11743, '\P{Block=cyrillicextendeda}', "");
Expect(0, 11743, '\P{^Block=cyrillicextendeda}', "");
Expect(1, 11775, '\p{Block=cyrillic extended-A}', "");
Expect(0, 11775, '\p{^Block=cyrillic extended-A}', "");
Expect(0, 11775, '\P{Block=cyrillic extended-A}', "");
Expect(1, 11775, '\P{^Block=cyrillic extended-A}', "");
Expect(0, 11743, '\p{Block=cyrillic extended-A}', "");
Expect(1, 11743, '\p{^Block=cyrillic extended-A}', "");
Expect(1, 11743, '\P{Block=cyrillic extended-A}', "");
Expect(0, 11743, '\P{^Block=cyrillic extended-A}', "");
Error('\p{Blk=_cyrillic/a/extended_A}');
Error('\P{Blk=_cyrillic/a/extended_A}');
Expect(1, 11775, '\p{Blk=cyrillicextendeda}', "");
Expect(0, 11775, '\p{^Blk=cyrillicextendeda}', "");
Expect(0, 11775, '\P{Blk=cyrillicextendeda}', "");
Expect(1, 11775, '\P{^Blk=cyrillicextendeda}', "");
Expect(0, 11743, '\p{Blk=cyrillicextendeda}', "");
Expect(1, 11743, '\p{^Blk=cyrillicextendeda}', "");
Expect(1, 11743, '\P{Blk=cyrillicextendeda}', "");
Expect(0, 11743, '\P{^Blk=cyrillicextendeda}', "");
Expect(1, 11775, '\p{Blk=cyrillic_Extended_A}', "");
Expect(0, 11775, '\p{^Blk=cyrillic_Extended_A}', "");
Expect(0, 11775, '\P{Blk=cyrillic_Extended_A}', "");
Expect(1, 11775, '\P{^Blk=cyrillic_Extended_A}', "");
Expect(0, 11743, '\p{Blk=cyrillic_Extended_A}', "");
Expect(1, 11743, '\p{^Blk=cyrillic_Extended_A}', "");
Expect(1, 11743, '\P{Blk=cyrillic_Extended_A}', "");
Expect(0, 11743, '\P{^Blk=cyrillic_Extended_A}', "");
Error('\p{Is_Block=--CyrillicEXTENDED-A:=}');
Error('\P{Is_Block=--CyrillicEXTENDED-A:=}');
Expect(1, 11775, '\p{Is_Block=cyrillicextendeda}', "");
Expect(0, 11775, '\p{^Is_Block=cyrillicextendeda}', "");
Expect(0, 11775, '\P{Is_Block=cyrillicextendeda}', "");
Expect(1, 11775, '\P{^Is_Block=cyrillicextendeda}', "");
Expect(0, 11743, '\p{Is_Block=cyrillicextendeda}', "");
Expect(1, 11743, '\p{^Is_Block=cyrillicextendeda}', "");
Expect(1, 11743, '\P{Is_Block=cyrillicextendeda}', "");
Expect(0, 11743, '\P{^Is_Block=cyrillicextendeda}', "");
Expect(1, 11775, '\p{Is_Block=	-CYRILLIC_ExtendedA}', "");
Expect(0, 11775, '\p{^Is_Block=	-CYRILLIC_ExtendedA}', "");
Expect(0, 11775, '\P{Is_Block=	-CYRILLIC_ExtendedA}', "");
Expect(1, 11775, '\P{^Is_Block=	-CYRILLIC_ExtendedA}', "");
Expect(0, 11743, '\p{Is_Block=	-CYRILLIC_ExtendedA}', "");
Expect(1, 11743, '\p{^Is_Block=	-CYRILLIC_ExtendedA}', "");
Expect(1, 11743, '\P{Is_Block=	-CYRILLIC_ExtendedA}', "");
Expect(0, 11743, '\P{^Is_Block=	-CYRILLIC_ExtendedA}', "");
Error('\p{Is_Blk=_-Cyrillic	extended-A:=}');
Error('\P{Is_Blk=_-Cyrillic	extended-A:=}');
Expect(1, 11775, '\p{Is_Blk=cyrillicextendeda}', "");
Expect(0, 11775, '\p{^Is_Blk=cyrillicextendeda}', "");
Expect(0, 11775, '\P{Is_Blk=cyrillicextendeda}', "");
Expect(1, 11775, '\P{^Is_Blk=cyrillicextendeda}', "");
Expect(0, 11743, '\p{Is_Blk=cyrillicextendeda}', "");
Expect(1, 11743, '\p{^Is_Blk=cyrillicextendeda}', "");
Expect(1, 11743, '\P{Is_Blk=cyrillicextendeda}', "");
Expect(0, 11743, '\P{^Is_Blk=cyrillicextendeda}', "");
Expect(1, 11775, '\p{Is_Blk=-_CyrillicExtendeda}', "");
Expect(0, 11775, '\p{^Is_Blk=-_CyrillicExtendeda}', "");
Expect(0, 11775, '\P{Is_Blk=-_CyrillicExtendeda}', "");
Expect(1, 11775, '\P{^Is_Blk=-_CyrillicExtendeda}', "");
Expect(0, 11743, '\p{Is_Blk=-_CyrillicExtendeda}', "");
Expect(1, 11743, '\p{^Is_Blk=-_CyrillicExtendeda}', "");
Expect(1, 11743, '\P{Is_Blk=-_CyrillicExtendeda}', "");
Expect(0, 11743, '\P{^Is_Blk=-_CyrillicExtendeda}', "");
Error('\p{Block=-:=HEBREW}');
Error('\P{Block=-:=HEBREW}');
Expect(1, 1535, '\p{Block=hebrew}', "");
Expect(0, 1535, '\p{^Block=hebrew}', "");
Expect(0, 1535, '\P{Block=hebrew}', "");
Expect(1, 1535, '\P{^Block=hebrew}', "");
Expect(0, 1423, '\p{Block=hebrew}', "");
Expect(1, 1423, '\p{^Block=hebrew}', "");
Expect(1, 1423, '\P{Block=hebrew}', "");
Expect(0, 1423, '\P{^Block=hebrew}', "");
Expect(1, 1535, '\p{Block= Hebrew}', "");
Expect(0, 1535, '\p{^Block= Hebrew}', "");
Expect(0, 1535, '\P{Block= Hebrew}', "");
Expect(1, 1535, '\P{^Block= Hebrew}', "");
Expect(0, 1423, '\p{Block= Hebrew}', "");
Expect(1, 1423, '\p{^Block= Hebrew}', "");
Expect(1, 1423, '\P{Block= Hebrew}', "");
Expect(0, 1423, '\P{^Block= Hebrew}', "");
Error('\p{Blk=- hebrew:=}');
Error('\P{Blk=- hebrew:=}');
Expect(1, 1535, '\p{Blk:   hebrew}', "");
Expect(0, 1535, '\p{^Blk:   hebrew}', "");
Expect(0, 1535, '\P{Blk:   hebrew}', "");
Expect(1, 1535, '\P{^Blk:   hebrew}', "");
Expect(0, 1423, '\p{Blk:   hebrew}', "");
Expect(1, 1423, '\p{^Blk:   hebrew}', "");
Expect(1, 1423, '\P{Blk:   hebrew}', "");
Expect(0, 1423, '\P{^Blk:   hebrew}', "");
Expect(1, 1535, '\p{Blk=	_HEBREW}', "");
Expect(0, 1535, '\p{^Blk=	_HEBREW}', "");
Expect(0, 1535, '\P{Blk=	_HEBREW}', "");
Expect(1, 1535, '\P{^Blk=	_HEBREW}', "");
Expect(0, 1423, '\p{Blk=	_HEBREW}', "");
Expect(1, 1423, '\p{^Blk=	_HEBREW}', "");
Expect(1, 1423, '\P{Blk=	_HEBREW}', "");
Expect(0, 1423, '\P{^Blk=	_HEBREW}', "");
Error('\p{Is_Block=	:=hebrew}');
Error('\P{Is_Block=	:=hebrew}');
Expect(1, 1535, '\p{Is_Block=hebrew}', "");
Expect(0, 1535, '\p{^Is_Block=hebrew}', "");
Expect(0, 1535, '\P{Is_Block=hebrew}', "");
Expect(1, 1535, '\P{^Is_Block=hebrew}', "");
Expect(0, 1423, '\p{Is_Block=hebrew}', "");
Expect(1, 1423, '\p{^Is_Block=hebrew}', "");
Expect(1, 1423, '\P{Is_Block=hebrew}', "");
Expect(0, 1423, '\P{^Is_Block=hebrew}', "");
Expect(1, 1535, '\p{Is_Block=__Hebrew}', "");
Expect(0, 1535, '\p{^Is_Block=__Hebrew}', "");
Expect(0, 1535, '\P{Is_Block=__Hebrew}', "");
Expect(1, 1535, '\P{^Is_Block=__Hebrew}', "");
Expect(0, 1423, '\p{Is_Block=__Hebrew}', "");
Expect(1, 1423, '\p{^Is_Block=__Hebrew}', "");
Expect(1, 1423, '\P{Is_Block=__Hebrew}', "");
Expect(0, 1423, '\P{^Is_Block=__Hebrew}', "");
Error('\p{Is_Blk=-	HEBREW/a/}');
Error('\P{Is_Blk=-	HEBREW/a/}');
Expect(1, 1535, '\p{Is_Blk=hebrew}', "");
Expect(0, 1535, '\p{^Is_Blk=hebrew}', "");
Expect(0, 1535, '\P{Is_Blk=hebrew}', "");
Expect(1, 1535, '\P{^Is_Blk=hebrew}', "");
Expect(0, 1423, '\p{Is_Blk=hebrew}', "");
Expect(1, 1423, '\p{^Is_Blk=hebrew}', "");
Expect(1, 1423, '\P{Is_Blk=hebrew}', "");
Expect(0, 1423, '\P{^Is_Blk=hebrew}', "");
Expect(1, 1535, '\p{Is_Blk=	 Hebrew}', "");
Expect(0, 1535, '\p{^Is_Blk=	 Hebrew}', "");
Expect(0, 1535, '\P{Is_Blk=	 Hebrew}', "");
Expect(1, 1535, '\P{^Is_Blk=	 Hebrew}', "");
Expect(0, 1423, '\p{Is_Blk=	 Hebrew}', "");
Expect(1, 1423, '\p{^Is_Blk=	 Hebrew}', "");
Expect(1, 1423, '\P{Is_Blk=	 Hebrew}', "");
Expect(0, 1423, '\P{^Is_Blk=	 Hebrew}', "");
Error('\p{Block=:=__cyrillic}');
Error('\P{Block=:=__cyrillic}');
Expect(1, 1279, '\p{Block=cyrillic}', "");
Expect(0, 1279, '\p{^Block=cyrillic}', "");
Expect(0, 1279, '\P{Block=cyrillic}', "");
Expect(1, 1279, '\P{^Block=cyrillic}', "");
Expect(0, 1023, '\p{Block=cyrillic}', "");
Expect(1, 1023, '\p{^Block=cyrillic}', "");
Expect(1, 1023, '\P{Block=cyrillic}', "");
Expect(0, 1023, '\P{^Block=cyrillic}', "");
Expect(1, 1279, '\p{Block=-_Cyrillic}', "");
Expect(0, 1279, '\p{^Block=-_Cyrillic}', "");
Expect(0, 1279, '\P{Block=-_Cyrillic}', "");
Expect(1, 1279, '\P{^Block=-_Cyrillic}', "");
Expect(0, 1023, '\p{Block=-_Cyrillic}', "");
Expect(1, 1023, '\p{^Block=-_Cyrillic}', "");
Expect(1, 1023, '\P{Block=-_Cyrillic}', "");
Expect(0, 1023, '\P{^Block=-_Cyrillic}', "");
Error('\p{Blk=_	Cyrillic/a/}');
Error('\P{Blk=_	Cyrillic/a/}');
Expect(1, 1279, '\p{Blk=cyrillic}', "");
Expect(0, 1279, '\p{^Blk=cyrillic}', "");
Expect(0, 1279, '\P{Blk=cyrillic}', "");
Expect(1, 1279, '\P{^Blk=cyrillic}', "");
Expect(0, 1023, '\p{Blk=cyrillic}', "");
Expect(1, 1023, '\p{^Blk=cyrillic}', "");
Expect(1, 1023, '\P{Blk=cyrillic}', "");
Expect(0, 1023, '\P{^Blk=cyrillic}', "");
Error('\p{Is_Block=:=_ cyrillic}');
Error('\P{Is_Block=:=_ cyrillic}');
Expect(1, 1279, '\p{Is_Block:	cyrillic}', "");
Expect(0, 1279, '\p{^Is_Block:	cyrillic}', "");
Expect(0, 1279, '\P{Is_Block:	cyrillic}', "");
Expect(1, 1279, '\P{^Is_Block:	cyrillic}', "");
Expect(0, 1023, '\p{Is_Block:	cyrillic}', "");
Expect(1, 1023, '\p{^Is_Block:	cyrillic}', "");
Expect(1, 1023, '\P{Is_Block:	cyrillic}', "");
Expect(0, 1023, '\P{^Is_Block:	cyrillic}', "");
Expect(1, 1279, '\p{Is_Block=  cyrillic}', "");
Expect(0, 1279, '\p{^Is_Block=  cyrillic}', "");
Expect(0, 1279, '\P{Is_Block=  cyrillic}', "");
Expect(1, 1279, '\P{^Is_Block=  cyrillic}', "");
Expect(0, 1023, '\p{Is_Block=  cyrillic}', "");
Expect(1, 1023, '\p{^Is_Block=  cyrillic}', "");
Expect(1, 1023, '\P{Is_Block=  cyrillic}', "");
Expect(0, 1023, '\P{^Is_Block=  cyrillic}', "");
Error('\p{Is_Blk=		Cyrillic/a/}');
Error('\P{Is_Blk=		Cyrillic/a/}');
Expect(1, 1279, '\p{Is_Blk=cyrillic}', "");
Expect(0, 1279, '\p{^Is_Blk=cyrillic}', "");
Expect(0, 1279, '\P{Is_Blk=cyrillic}', "");
Expect(1, 1279, '\P{^Is_Blk=cyrillic}', "");
Expect(0, 1023, '\p{Is_Blk=cyrillic}', "");
Expect(1, 1023, '\p{^Is_Blk=cyrillic}', "");
Expect(1, 1023, '\P{Is_Blk=cyrillic}', "");
Expect(0, 1023, '\P{^Is_Blk=cyrillic}', "");
Expect(1, 1279, '\p{Is_Blk=	cyrillic}', "");
Expect(0, 1279, '\p{^Is_Blk=	cyrillic}', "");
Expect(0, 1279, '\P{Is_Blk=	cyrillic}', "");
Expect(1, 1279, '\P{^Is_Blk=	cyrillic}', "");
Expect(0, 1023, '\p{Is_Blk=	cyrillic}', "");
Expect(1, 1023, '\p{^Is_Blk=	cyrillic}', "");
Expect(1, 1023, '\P{Is_Blk=	cyrillic}', "");
Expect(0, 1023, '\P{^Is_Blk=	cyrillic}', "");
Error('\p{Block:   _Latin-extended	A/a/}');
Error('\P{Block:   _Latin-extended	A/a/}');
Expect(1, 383, '\p{Block=latinextendeda}', "");
Expect(0, 383, '\p{^Block=latinextendeda}', "");
Expect(0, 383, '\P{Block=latinextendeda}', "");
Expect(1, 383, '\P{^Block=latinextendeda}', "");
Expect(0, 255, '\p{Block=latinextendeda}', "");
Expect(1, 255, '\p{^Block=latinextendeda}', "");
Expect(1, 255, '\P{Block=latinextendeda}', "");
Expect(0, 255, '\P{^Block=latinextendeda}', "");
Expect(1, 383, '\p{Block=_ Latin extended_A}', "");
Expect(0, 383, '\p{^Block=_ Latin extended_A}', "");
Expect(0, 383, '\P{Block=_ Latin extended_A}', "");
Expect(1, 383, '\P{^Block=_ Latin extended_A}', "");
Expect(0, 255, '\p{Block=_ Latin extended_A}', "");
Expect(1, 255, '\p{^Block=_ Latin extended_A}', "");
Expect(1, 255, '\P{Block=_ Latin extended_A}', "");
Expect(0, 255, '\P{^Block=_ Latin extended_A}', "");
Error('\p{Blk=	/a/latin_EXTENDED_A}');
Error('\P{Blk=	/a/latin_EXTENDED_A}');
Expect(1, 383, '\p{Blk=latinextendeda}', "");
Expect(0, 383, '\p{^Blk=latinextendeda}', "");
Expect(0, 383, '\P{Blk=latinextendeda}', "");
Expect(1, 383, '\P{^Blk=latinextendeda}', "");
Expect(0, 255, '\p{Blk=latinextendeda}', "");
Expect(1, 255, '\p{^Blk=latinextendeda}', "");
Expect(1, 255, '\P{Blk=latinextendeda}', "");
Expect(0, 255, '\P{^Blk=latinextendeda}', "");
Expect(1, 383, '\p{Blk= Latin-Extended-A}', "");
Expect(0, 383, '\p{^Blk= Latin-Extended-A}', "");
Expect(0, 383, '\P{Blk= Latin-Extended-A}', "");
Expect(1, 383, '\P{^Blk= Latin-Extended-A}', "");
Expect(0, 255, '\p{Blk= Latin-Extended-A}', "");
Expect(1, 255, '\p{^Blk= Latin-Extended-A}', "");
Expect(1, 255, '\P{Blk= Latin-Extended-A}', "");
Expect(0, 255, '\P{^Blk= Latin-Extended-A}', "");
Error('\p{Is_Block=-:=latin-extended-a}');
Error('\P{Is_Block=-:=latin-extended-a}');
Expect(1, 383, '\p{Is_Block:latinextendeda}', "");
Expect(0, 383, '\p{^Is_Block:latinextendeda}', "");
Expect(0, 383, '\P{Is_Block:latinextendeda}', "");
Expect(1, 383, '\P{^Is_Block:latinextendeda}', "");
Expect(0, 255, '\p{Is_Block:latinextendeda}', "");
Expect(1, 255, '\p{^Is_Block:latinextendeda}', "");
Expect(1, 255, '\P{Is_Block:latinextendeda}', "");
Expect(0, 255, '\P{^Is_Block:latinextendeda}', "");
Expect(1, 383, '\p{Is_Block=--latin Extended	a}', "");
Expect(0, 383, '\p{^Is_Block=--latin Extended	a}', "");
Expect(0, 383, '\P{Is_Block=--latin Extended	a}', "");
Expect(1, 383, '\P{^Is_Block=--latin Extended	a}', "");
Expect(0, 255, '\p{Is_Block=--latin Extended	a}', "");
Expect(1, 255, '\p{^Is_Block=--latin Extended	a}', "");
Expect(1, 255, '\P{Is_Block=--latin Extended	a}', "");
Expect(0, 255, '\P{^Is_Block=--latin Extended	a}', "");
Error('\p{Is_Blk=_:=Latin_EXTENDED_a}');
Error('\P{Is_Blk=_:=Latin_EXTENDED_a}');
Expect(1, 383, '\p{Is_Blk=latinextendeda}', "");
Expect(0, 383, '\p{^Is_Blk=latinextendeda}', "");
Expect(0, 383, '\P{Is_Blk=latinextendeda}', "");
Expect(1, 383, '\P{^Is_Blk=latinextendeda}', "");
Expect(0, 255, '\p{Is_Blk=latinextendeda}', "");
Expect(1, 255, '\p{^Is_Blk=latinextendeda}', "");
Expect(1, 255, '\P{Is_Blk=latinextendeda}', "");
Expect(0, 255, '\P{^Is_Blk=latinextendeda}', "");
Expect(1, 383, '\p{Is_Blk=_-LatinExtended-A}', "");
Expect(0, 383, '\p{^Is_Blk=_-LatinExtended-A}', "");
Expect(0, 383, '\P{Is_Blk=_-LatinExtended-A}', "");
Expect(1, 383, '\P{^Is_Blk=_-LatinExtended-A}', "");
Expect(0, 255, '\p{Is_Blk=_-LatinExtended-A}', "");
Expect(1, 255, '\p{^Is_Blk=_-LatinExtended-A}', "");
Expect(1, 255, '\P{Is_Blk=_-LatinExtended-A}', "");
Expect(0, 255, '\P{^Is_Blk=_-LatinExtended-A}', "");
Error('\p{Block=_balinese/a/}');
Error('\P{Block=_balinese/a/}');
Expect(1, 7039, '\p{Block=balinese}', "");
Expect(0, 7039, '\p{^Block=balinese}', "");
Expect(0, 7039, '\P{Block=balinese}', "");
Expect(1, 7039, '\P{^Block=balinese}', "");
Expect(0, 6911, '\p{Block=balinese}', "");
Expect(1, 6911, '\p{^Block=balinese}', "");
Expect(1, 6911, '\P{Block=balinese}', "");
Expect(0, 6911, '\P{^Block=balinese}', "");
Expect(1, 7039, '\p{Block=-Balinese}', "");
Expect(0, 7039, '\p{^Block=-Balinese}', "");
Expect(0, 7039, '\P{Block=-Balinese}', "");
Expect(1, 7039, '\P{^Block=-Balinese}', "");
Expect(0, 6911, '\p{Block=-Balinese}', "");
Expect(1, 6911, '\p{^Block=-Balinese}', "");
Expect(1, 6911, '\P{Block=-Balinese}', "");
Expect(0, 6911, '\P{^Block=-Balinese}', "");
Error('\p{Blk=:=-Balinese}');
Error('\P{Blk=:=-Balinese}');
Expect(1, 7039, '\p{Blk=balinese}', "");
Expect(0, 7039, '\p{^Blk=balinese}', "");
Expect(0, 7039, '\P{Blk=balinese}', "");
Expect(1, 7039, '\P{^Blk=balinese}', "");
Expect(0, 6911, '\p{Blk=balinese}', "");
Expect(1, 6911, '\p{^Blk=balinese}', "");
Expect(1, 6911, '\P{Blk=balinese}', "");
Expect(0, 6911, '\P{^Blk=balinese}', "");
Expect(1, 7039, '\p{Blk=--BALINESE}', "");
Expect(0, 7039, '\p{^Blk=--BALINESE}', "");
Expect(0, 7039, '\P{Blk=--BALINESE}', "");
Expect(1, 7039, '\P{^Blk=--BALINESE}', "");
Expect(0, 6911, '\p{Blk=--BALINESE}', "");
Expect(1, 6911, '\p{^Blk=--BALINESE}', "");
Expect(1, 6911, '\P{Blk=--BALINESE}', "");
Expect(0, 6911, '\P{^Blk=--BALINESE}', "");
Error('\p{Is_Block=	_BALINESE/a/}');
Error('\P{Is_Block=	_BALINESE/a/}');
Expect(1, 7039, '\p{Is_Block=balinese}', "");
Expect(0, 7039, '\p{^Is_Block=balinese}', "");
Expect(0, 7039, '\P{Is_Block=balinese}', "");
Expect(1, 7039, '\P{^Is_Block=balinese}', "");
Expect(0, 6911, '\p{Is_Block=balinese}', "");
Expect(1, 6911, '\p{^Is_Block=balinese}', "");
Expect(1, 6911, '\P{Is_Block=balinese}', "");
Expect(0, 6911, '\P{^Is_Block=balinese}', "");
Expect(1, 7039, '\p{Is_Block: 	BALINESE}', "");
Expect(0, 7039, '\p{^Is_Block: 	BALINESE}', "");
Expect(0, 7039, '\P{Is_Block: 	BALINESE}', "");
Expect(1, 7039, '\P{^Is_Block: 	BALINESE}', "");
Expect(0, 6911, '\p{Is_Block: 	BALINESE}', "");
Expect(1, 6911, '\p{^Is_Block: 	BALINESE}', "");
Expect(1, 6911, '\P{Is_Block: 	BALINESE}', "");
Expect(0, 6911, '\P{^Is_Block: 	BALINESE}', "");
Error('\p{Is_Blk:/a/  Balinese}');
Error('\P{Is_Blk:/a/  Balinese}');
Expect(1, 7039, '\p{Is_Blk=balinese}', "");
Expect(0, 7039, '\p{^Is_Blk=balinese}', "");
Expect(0, 7039, '\P{Is_Blk=balinese}', "");
Expect(1, 7039, '\P{^Is_Blk=balinese}', "");
Expect(0, 6911, '\p{Is_Blk=balinese}', "");
Expect(1, 6911, '\p{^Is_Blk=balinese}', "");
Expect(1, 6911, '\P{Is_Blk=balinese}', "");
Expect(0, 6911, '\P{^Is_Blk=balinese}', "");
Expect(1, 7039, '\p{Is_Blk=-BALINESE}', "");
Expect(0, 7039, '\p{^Is_Blk=-BALINESE}', "");
Expect(0, 7039, '\P{Is_Blk=-BALINESE}', "");
Expect(1, 7039, '\P{^Is_Blk=-BALINESE}', "");
Expect(0, 6911, '\p{Is_Blk=-BALINESE}', "");
Expect(1, 6911, '\p{^Is_Blk=-BALINESE}', "");
Expect(1, 6911, '\P{Is_Blk=-BALINESE}', "");
Expect(0, 6911, '\P{^Is_Blk=-BALINESE}', "");
Error('\p{Block=/a/	-Avestan}');
Error('\P{Block=/a/	-Avestan}');
Expect(1, 68415, '\p{Block:	avestan}', "");
Expect(0, 68415, '\p{^Block:	avestan}', "");
Expect(0, 68415, '\P{Block:	avestan}', "");
Expect(1, 68415, '\P{^Block:	avestan}', "");
Expect(0, 68351, '\p{Block:	avestan}', "");
Expect(1, 68351, '\p{^Block:	avestan}', "");
Expect(1, 68351, '\P{Block:	avestan}', "");
Expect(0, 68351, '\P{^Block:	avestan}', "");
Expect(1, 68415, '\p{Block:  Avestan}', "");
Expect(0, 68415, '\p{^Block:  Avestan}', "");
Expect(0, 68415, '\P{Block:  Avestan}', "");
Expect(1, 68415, '\P{^Block:  Avestan}', "");
Expect(0, 68351, '\p{Block:  Avestan}', "");
Expect(1, 68351, '\p{^Block:  Avestan}', "");
Expect(1, 68351, '\P{Block:  Avestan}', "");
Expect(0, 68351, '\P{^Block:  Avestan}', "");
Error('\p{Blk=:=  Avestan}');
Error('\P{Blk=:=  Avestan}');
Expect(1, 68415, '\p{Blk=avestan}', "");
Expect(0, 68415, '\p{^Blk=avestan}', "");
Expect(0, 68415, '\P{Blk=avestan}', "");
Expect(1, 68415, '\P{^Blk=avestan}', "");
Expect(0, 68351, '\p{Blk=avestan}', "");
Expect(1, 68351, '\p{^Blk=avestan}', "");
Expect(1, 68351, '\P{Blk=avestan}', "");
Expect(0, 68351, '\P{^Blk=avestan}', "");
Expect(1, 68415, '\p{Blk=-Avestan}', "");
Expect(0, 68415, '\p{^Blk=-Avestan}', "");
Expect(0, 68415, '\P{Blk=-Avestan}', "");
Expect(1, 68415, '\P{^Blk=-Avestan}', "");
Expect(0, 68351, '\p{Blk=-Avestan}', "");
Expect(1, 68351, '\p{^Blk=-Avestan}', "");
Expect(1, 68351, '\P{Blk=-Avestan}', "");
Expect(0, 68351, '\P{^Blk=-Avestan}', "");
Error('\p{Is_Block=__Avestan:=}');
Error('\P{Is_Block=__Avestan:=}');
Expect(1, 68415, '\p{Is_Block=avestan}', "");
Expect(0, 68415, '\p{^Is_Block=avestan}', "");
Expect(0, 68415, '\P{Is_Block=avestan}', "");
Expect(1, 68415, '\P{^Is_Block=avestan}', "");
Expect(0, 68351, '\p{Is_Block=avestan}', "");
Expect(1, 68351, '\p{^Is_Block=avestan}', "");
Expect(1, 68351, '\P{Is_Block=avestan}', "");
Expect(0, 68351, '\P{^Is_Block=avestan}', "");
Expect(1, 68415, '\p{Is_Block=	 avestan}', "");
Expect(0, 68415, '\p{^Is_Block=	 avestan}', "");
Expect(0, 68415, '\P{Is_Block=	 avestan}', "");
Expect(1, 68415, '\P{^Is_Block=	 avestan}', "");
Expect(0, 68351, '\p{Is_Block=	 avestan}', "");
Expect(1, 68351, '\p{^Is_Block=	 avestan}', "");
Expect(1, 68351, '\P{Is_Block=	 avestan}', "");
Expect(0, 68351, '\P{^Is_Block=	 avestan}', "");
Error('\p{Is_Blk:   _Avestan:=}');
Error('\P{Is_Blk:   _Avestan:=}');
Expect(1, 68415, '\p{Is_Blk=avestan}', "");
Expect(0, 68415, '\p{^Is_Blk=avestan}', "");
Expect(0, 68415, '\P{Is_Blk=avestan}', "");
Expect(1, 68415, '\P{^Is_Blk=avestan}', "");
Expect(0, 68351, '\p{Is_Blk=avestan}', "");
Expect(1, 68351, '\p{^Is_Blk=avestan}', "");
Expect(1, 68351, '\P{Is_Blk=avestan}', "");
Expect(0, 68351, '\P{^Is_Blk=avestan}', "");
Expect(1, 68415, '\p{Is_Blk:	-	AVESTAN}', "");
Expect(0, 68415, '\p{^Is_Blk:	-	AVESTAN}', "");
Expect(0, 68415, '\P{Is_Blk:	-	AVESTAN}', "");
Expect(1, 68415, '\P{^Is_Blk:	-	AVESTAN}', "");
Expect(0, 68351, '\p{Is_Blk:	-	AVESTAN}', "");
Expect(1, 68351, '\p{^Is_Blk:	-	AVESTAN}', "");
Expect(1, 68351, '\P{Is_Blk:	-	AVESTAN}', "");
Expect(0, 68351, '\P{^Is_Blk:	-	AVESTAN}', "");
Error('\p{Block=_:=Myanmar	Extended_a}');
Error('\P{Block=_:=Myanmar	Extended_a}');
Expect(1, 43647, '\p{Block:myanmarextendeda}', "");
Expect(0, 43647, '\p{^Block:myanmarextendeda}', "");
Expect(0, 43647, '\P{Block:myanmarextendeda}', "");
Expect(1, 43647, '\P{^Block:myanmarextendeda}', "");
Expect(0, 43615, '\p{Block:myanmarextendeda}', "");
Expect(1, 43615, '\p{^Block:myanmarextendeda}', "");
Expect(1, 43615, '\P{Block:myanmarextendeda}', "");
Expect(0, 43615, '\P{^Block:myanmarextendeda}', "");
Expect(1, 43647, '\p{Block=	Myanmar_extendeda}', "");
Expect(0, 43647, '\p{^Block=	Myanmar_extendeda}', "");
Expect(0, 43647, '\P{Block=	Myanmar_extendeda}', "");
Expect(1, 43647, '\P{^Block=	Myanmar_extendeda}', "");
Expect(0, 43615, '\p{Block=	Myanmar_extendeda}', "");
Expect(1, 43615, '\p{^Block=	Myanmar_extendeda}', "");
Expect(1, 43615, '\P{Block=	Myanmar_extendeda}', "");
Expect(0, 43615, '\P{^Block=	Myanmar_extendeda}', "");
Error('\p{Blk:	-MYANMAR:=extended-A}');
Error('\P{Blk:	-MYANMAR:=extended-A}');
Expect(1, 43647, '\p{Blk=myanmarextendeda}', "");
Expect(0, 43647, '\p{^Blk=myanmarextendeda}', "");
Expect(0, 43647, '\P{Blk=myanmarextendeda}', "");
Expect(1, 43647, '\P{^Blk=myanmarextendeda}', "");
Expect(0, 43615, '\p{Blk=myanmarextendeda}', "");
Expect(1, 43615, '\p{^Blk=myanmarextendeda}', "");
Expect(1, 43615, '\P{Blk=myanmarextendeda}', "");
Expect(0, 43615, '\P{^Blk=myanmarextendeda}', "");
Expect(1, 43647, '\p{Blk=	Myanmar_EXTENDED_A}', "");
Expect(0, 43647, '\p{^Blk=	Myanmar_EXTENDED_A}', "");
Expect(0, 43647, '\P{Blk=	Myanmar_EXTENDED_A}', "");
Expect(1, 43647, '\P{^Blk=	Myanmar_EXTENDED_A}', "");
Expect(0, 43615, '\p{Blk=	Myanmar_EXTENDED_A}', "");
Expect(1, 43615, '\p{^Blk=	Myanmar_EXTENDED_A}', "");
Expect(1, 43615, '\P{Blk=	Myanmar_EXTENDED_A}', "");
Expect(0, 43615, '\P{^Blk=	Myanmar_EXTENDED_A}', "");
Error('\p{Is_Block=:= myanmar-Extended	a}');
Error('\P{Is_Block=:= myanmar-Extended	a}');
Expect(1, 43647, '\p{Is_Block=myanmarextendeda}', "");
Expect(0, 43647, '\p{^Is_Block=myanmarextendeda}', "");
Expect(0, 43647, '\P{Is_Block=myanmarextendeda}', "");
Expect(1, 43647, '\P{^Is_Block=myanmarextendeda}', "");
Expect(0, 43615, '\p{Is_Block=myanmarextendeda}', "");
Expect(1, 43615, '\p{^Is_Block=myanmarextendeda}', "");
Expect(1, 43615, '\P{Is_Block=myanmarextendeda}', "");
Expect(0, 43615, '\P{^Is_Block=myanmarextendeda}', "");
Expect(1, 43647, '\p{Is_Block=-	Myanmar_Extended	A}', "");
Expect(0, 43647, '\p{^Is_Block=-	Myanmar_Extended	A}', "");
Expect(0, 43647, '\P{Is_Block=-	Myanmar_Extended	A}', "");
Expect(1, 43647, '\P{^Is_Block=-	Myanmar_Extended	A}', "");
Expect(0, 43615, '\p{Is_Block=-	Myanmar_Extended	A}', "");
Expect(1, 43615, '\p{^Is_Block=-	Myanmar_Extended	A}', "");
Expect(1, 43615, '\P{Is_Block=-	Myanmar_Extended	A}', "");
Expect(0, 43615, '\P{^Is_Block=-	Myanmar_Extended	A}', "");
Error('\p{Is_Blk=-/a/MYANMAR	extended_A}');
Error('\P{Is_Blk=-/a/MYANMAR	extended_A}');
Expect(1, 43647, '\p{Is_Blk=myanmarextendeda}', "");
Expect(0, 43647, '\p{^Is_Blk=myanmarextendeda}', "");
Expect(0, 43647, '\P{Is_Blk=myanmarextendeda}', "");
Expect(1, 43647, '\P{^Is_Blk=myanmarextendeda}', "");
Expect(0, 43615, '\p{Is_Blk=myanmarextendeda}', "");
Expect(1, 43615, '\p{^Is_Blk=myanmarextendeda}', "");
Expect(1, 43615, '\P{Is_Blk=myanmarextendeda}', "");
Expect(0, 43615, '\P{^Is_Blk=myanmarextendeda}', "");
Expect(1, 43647, '\p{Is_Blk=-	MYANMAR_Extended A}', "");
Expect(0, 43647, '\p{^Is_Blk=-	MYANMAR_Extended A}', "");
Expect(0, 43647, '\P{Is_Blk=-	MYANMAR_Extended A}', "");
Expect(1, 43647, '\P{^Is_Blk=-	MYANMAR_Extended A}', "");
Expect(0, 43615, '\p{Is_Blk=-	MYANMAR_Extended A}', "");
Expect(1, 43615, '\p{^Is_Blk=-	MYANMAR_Extended A}', "");
Expect(1, 43615, '\P{Is_Blk=-	MYANMAR_Extended A}', "");
Expect(0, 43615, '\P{^Is_Blk=-	MYANMAR_Extended A}', "");
Error('\p{Block=/a/Counting Rod Numerals}');
Error('\P{Block=/a/Counting Rod Numerals}');
Expect(1, 119679, '\p{Block=countingrodnumerals}', "");
Expect(0, 119679, '\p{^Block=countingrodnumerals}', "");
Expect(0, 119679, '\P{Block=countingrodnumerals}', "");
Expect(1, 119679, '\P{^Block=countingrodnumerals}', "");
Expect(0, 119647, '\p{Block=countingrodnumerals}', "");
Expect(1, 119647, '\p{^Block=countingrodnumerals}', "");
Expect(1, 119647, '\P{Block=countingrodnumerals}', "");
Expect(0, 119647, '\P{^Block=countingrodnumerals}', "");
Expect(1, 119679, '\p{Block: __Countingrod-numerals}', "");
Expect(0, 119679, '\p{^Block: __Countingrod-numerals}', "");
Expect(0, 119679, '\P{Block: __Countingrod-numerals}', "");
Expect(1, 119679, '\P{^Block: __Countingrod-numerals}', "");
Expect(0, 119647, '\p{Block: __Countingrod-numerals}', "");
Expect(1, 119647, '\p{^Block: __Countingrod-numerals}', "");
Expect(1, 119647, '\P{Block: __Countingrod-numerals}', "");
Expect(0, 119647, '\P{^Block: __Countingrod-numerals}', "");
Error('\p{Blk::=Counting	ROD-Numerals}');
Error('\P{Blk::=Counting	ROD-Numerals}');
Expect(1, 119679, '\p{Blk=countingrodnumerals}', "");
Expect(0, 119679, '\p{^Blk=countingrodnumerals}', "");
Expect(0, 119679, '\P{Blk=countingrodnumerals}', "");
Expect(1, 119679, '\P{^Blk=countingrodnumerals}', "");
Expect(0, 119647, '\p{Blk=countingrodnumerals}', "");
Expect(1, 119647, '\p{^Blk=countingrodnumerals}', "");
Expect(1, 119647, '\P{Blk=countingrodnumerals}', "");
Expect(0, 119647, '\P{^Blk=countingrodnumerals}', "");
Expect(1, 119679, '\p{Blk:    -Counting-Rod-NUMERALS}', "");
Expect(0, 119679, '\p{^Blk:    -Counting-Rod-NUMERALS}', "");
Expect(0, 119679, '\P{Blk:    -Counting-Rod-NUMERALS}', "");
Expect(1, 119679, '\P{^Blk:    -Counting-Rod-NUMERALS}', "");
Expect(0, 119647, '\p{Blk:    -Counting-Rod-NUMERALS}', "");
Expect(1, 119647, '\p{^Blk:    -Counting-Rod-NUMERALS}', "");
Expect(1, 119647, '\P{Blk:    -Counting-Rod-NUMERALS}', "");
Expect(0, 119647, '\P{^Blk:    -Counting-Rod-NUMERALS}', "");
Error('\p{Is_Block=--Counting/a/RODNumerals}');
Error('\P{Is_Block=--Counting/a/RODNumerals}');
Expect(1, 119679, '\p{Is_Block=countingrodnumerals}', "");
Expect(0, 119679, '\p{^Is_Block=countingrodnumerals}', "");
Expect(0, 119679, '\P{Is_Block=countingrodnumerals}', "");
Expect(1, 119679, '\P{^Is_Block=countingrodnumerals}', "");
Expect(0, 119647, '\p{Is_Block=countingrodnumerals}', "");
Expect(1, 119647, '\p{^Is_Block=countingrodnumerals}', "");
Expect(1, 119647, '\P{Is_Block=countingrodnumerals}', "");
Expect(0, 119647, '\P{^Is_Block=countingrodnumerals}', "");
Expect(1, 119679, '\p{Is_Block=		Counting_rod_numerals}', "");
Expect(0, 119679, '\p{^Is_Block=		Counting_rod_numerals}', "");
Expect(0, 119679, '\P{Is_Block=		Counting_rod_numerals}', "");
Expect(1, 119679, '\P{^Is_Block=		Counting_rod_numerals}', "");
Expect(0, 119647, '\p{Is_Block=		Counting_rod_numerals}', "");
Expect(1, 119647, '\p{^Is_Block=		Counting_rod_numerals}', "");
Expect(1, 119647, '\P{Is_Block=		Counting_rod_numerals}', "");
Expect(0, 119647, '\P{^Is_Block=		Counting_rod_numerals}', "");
Error('\p{Is_Blk=	/a/counting_Rod	NUMERALS}');
Error('\P{Is_Blk=	/a/counting_Rod	NUMERALS}');
Expect(1, 119679, '\p{Is_Blk=countingrodnumerals}', "");
Expect(0, 119679, '\p{^Is_Blk=countingrodnumerals}', "");
Expect(0, 119679, '\P{Is_Blk=countingrodnumerals}', "");
Expect(1, 119679, '\P{^Is_Blk=countingrodnumerals}', "");
Expect(0, 119647, '\p{Is_Blk=countingrodnumerals}', "");
Expect(1, 119647, '\p{^Is_Blk=countingrodnumerals}', "");
Expect(1, 119647, '\P{Is_Blk=countingrodnumerals}', "");
Expect(0, 119647, '\P{^Is_Blk=countingrodnumerals}', "");
Expect(1, 119679, '\p{Is_Blk=	_COUNTING ROD Numerals}', "");
Expect(0, 119679, '\p{^Is_Blk=	_COUNTING ROD Numerals}', "");
Expect(0, 119679, '\P{Is_Blk=	_COUNTING ROD Numerals}', "");
Expect(1, 119679, '\P{^Is_Blk=	_COUNTING ROD Numerals}', "");
Expect(0, 119647, '\p{Is_Blk=	_COUNTING ROD Numerals}', "");
Expect(1, 119647, '\p{^Is_Blk=	_COUNTING ROD Numerals}', "");
Expect(1, 119647, '\P{Is_Blk=	_COUNTING ROD Numerals}', "");
Expect(0, 119647, '\P{^Is_Blk=	_COUNTING ROD Numerals}', "");
Error('\p{Block=BYZANTINE/a/MUSICAL	Symbols}');
Error('\P{Block=BYZANTINE/a/MUSICAL	Symbols}');
Expect(1, 119039, '\p{Block=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^Block=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{Block=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^Block=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{Block=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^Block=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{Block=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^Block=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{Block= _BYZANTINE-musical	SYMBOLS}', "");
Expect(0, 119039, '\p{^Block= _BYZANTINE-musical	SYMBOLS}', "");
Expect(0, 119039, '\P{Block= _BYZANTINE-musical	SYMBOLS}', "");
Expect(1, 119039, '\P{^Block= _BYZANTINE-musical	SYMBOLS}', "");
Expect(0, 118783, '\p{Block= _BYZANTINE-musical	SYMBOLS}', "");
Expect(1, 118783, '\p{^Block= _BYZANTINE-musical	SYMBOLS}', "");
Expect(1, 118783, '\P{Block= _BYZANTINE-musical	SYMBOLS}', "");
Expect(0, 118783, '\P{^Block= _BYZANTINE-musical	SYMBOLS}', "");
Error('\p{Blk=	-byzantine Musical	Symbols:=}');
Error('\P{Blk=	-byzantine Musical	Symbols:=}');
Expect(1, 119039, '\p{Blk=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^Blk=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{Blk=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^Blk=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{Blk=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^Blk=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{Blk=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^Blk=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{Blk=	-byzantine musical Symbols}', "");
Expect(0, 119039, '\p{^Blk=	-byzantine musical Symbols}', "");
Expect(0, 119039, '\P{Blk=	-byzantine musical Symbols}', "");
Expect(1, 119039, '\P{^Blk=	-byzantine musical Symbols}', "");
Expect(0, 118783, '\p{Blk=	-byzantine musical Symbols}', "");
Expect(1, 118783, '\p{^Blk=	-byzantine musical Symbols}', "");
Expect(1, 118783, '\P{Blk=	-byzantine musical Symbols}', "");
Expect(0, 118783, '\P{^Blk=	-byzantine musical Symbols}', "");
Error('\p{Is_Block=-BYZANTINE-Musical-symbols/a/}');
Error('\P{Is_Block=-BYZANTINE-Musical-symbols/a/}');
Expect(1, 119039, '\p{Is_Block=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^Is_Block=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{Is_Block=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^Is_Block=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{Is_Block=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^Is_Block=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{Is_Block=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^Is_Block=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{Is_Block= _byzantine Musical-SYMBOLS}', "");
Expect(0, 119039, '\p{^Is_Block= _byzantine Musical-SYMBOLS}', "");
Expect(0, 119039, '\P{Is_Block= _byzantine Musical-SYMBOLS}', "");
Expect(1, 119039, '\P{^Is_Block= _byzantine Musical-SYMBOLS}', "");
Expect(0, 118783, '\p{Is_Block= _byzantine Musical-SYMBOLS}', "");
Expect(1, 118783, '\p{^Is_Block= _byzantine Musical-SYMBOLS}', "");
Expect(1, 118783, '\P{Is_Block= _byzantine Musical-SYMBOLS}', "");
Expect(0, 118783, '\P{^Is_Block= _byzantine Musical-SYMBOLS}', "");
Error('\p{Is_Blk:   	Byzantine/a/Musical symbols}');
Error('\P{Is_Blk:   	Byzantine/a/Musical symbols}');
Expect(1, 119039, '\p{Is_Blk=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^Is_Blk=byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{Is_Blk=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^Is_Blk=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{Is_Blk=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^Is_Blk=byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{Is_Blk=byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^Is_Blk=byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{Is_Blk=_	ByzantineMusical-Symbols}', "");
Expect(0, 119039, '\p{^Is_Blk=_	ByzantineMusical-Symbols}', "");
Expect(0, 119039, '\P{Is_Blk=_	ByzantineMusical-Symbols}', "");
Expect(1, 119039, '\P{^Is_Blk=_	ByzantineMusical-Symbols}', "");
Expect(0, 118783, '\p{Is_Blk=_	ByzantineMusical-Symbols}', "");
Expect(1, 118783, '\p{^Is_Blk=_	ByzantineMusical-Symbols}', "");
Expect(1, 118783, '\P{Is_Blk=_	ByzantineMusical-Symbols}', "");
Expect(0, 118783, '\P{^Is_Blk=_	ByzantineMusical-Symbols}', "");
Error('\p{Block=-_TAMIL:=}');
Error('\P{Block=-_TAMIL:=}');
Expect(1, 3071, '\p{Block=tamil}', "");
Expect(0, 3071, '\p{^Block=tamil}', "");
Expect(0, 3071, '\P{Block=tamil}', "");
Expect(1, 3071, '\P{^Block=tamil}', "");
Expect(0, 2943, '\p{Block=tamil}', "");
Expect(1, 2943, '\p{^Block=tamil}', "");
Expect(1, 2943, '\P{Block=tamil}', "");
Expect(0, 2943, '\P{^Block=tamil}', "");
Expect(1, 3071, '\p{Block=-Tamil}', "");
Expect(0, 3071, '\p{^Block=-Tamil}', "");
Expect(0, 3071, '\P{Block=-Tamil}', "");
Expect(1, 3071, '\P{^Block=-Tamil}', "");
Expect(0, 2943, '\p{Block=-Tamil}', "");
Expect(1, 2943, '\p{^Block=-Tamil}', "");
Expect(1, 2943, '\P{Block=-Tamil}', "");
Expect(0, 2943, '\P{^Block=-Tamil}', "");
Error('\p{Blk:	- TAMIL/a/}');
Error('\P{Blk:	- TAMIL/a/}');
Expect(1, 3071, '\p{Blk=tamil}', "");
Expect(0, 3071, '\p{^Blk=tamil}', "");
Expect(0, 3071, '\P{Blk=tamil}', "");
Expect(1, 3071, '\P{^Blk=tamil}', "");
Expect(0, 2943, '\p{Blk=tamil}', "");
Expect(1, 2943, '\p{^Blk=tamil}', "");
Expect(1, 2943, '\P{Blk=tamil}', "");
Expect(0, 2943, '\P{^Blk=tamil}', "");
Expect(1, 3071, '\p{Blk=-	Tamil}', "");
Expect(0, 3071, '\p{^Blk=-	Tamil}', "");
Expect(0, 3071, '\P{Blk=-	Tamil}', "");
Expect(1, 3071, '\P{^Blk=-	Tamil}', "");
Expect(0, 2943, '\p{Blk=-	Tamil}', "");
Expect(1, 2943, '\p{^Blk=-	Tamil}', "");
Expect(1, 2943, '\P{Blk=-	Tamil}', "");
Expect(0, 2943, '\P{^Blk=-	Tamil}', "");
Error('\p{Is_Block=:=TAMIL}');
Error('\P{Is_Block=:=TAMIL}');
Expect(1, 3071, '\p{Is_Block=tamil}', "");
Expect(0, 3071, '\p{^Is_Block=tamil}', "");
Expect(0, 3071, '\P{Is_Block=tamil}', "");
Expect(1, 3071, '\P{^Is_Block=tamil}', "");
Expect(0, 2943, '\p{Is_Block=tamil}', "");
Expect(1, 2943, '\p{^Is_Block=tamil}', "");
Expect(1, 2943, '\P{Is_Block=tamil}', "");
Expect(0, 2943, '\P{^Is_Block=tamil}', "");
Expect(1, 3071, '\p{Is_Block=_Tamil}', "");
Expect(0, 3071, '\p{^Is_Block=_Tamil}', "");
Expect(0, 3071, '\P{Is_Block=_Tamil}', "");
Expect(1, 3071, '\P{^Is_Block=_Tamil}', "");
Expect(0, 2943, '\p{Is_Block=_Tamil}', "");
Expect(1, 2943, '\p{^Is_Block=_Tamil}', "");
Expect(1, 2943, '\P{Is_Block=_Tamil}', "");
Expect(0, 2943, '\P{^Is_Block=_Tamil}', "");
Error('\p{Is_Blk=_-Tamil/a/}');
Error('\P{Is_Blk=_-Tamil/a/}');
Expect(1, 3071, '\p{Is_Blk=tamil}', "");
Expect(0, 3071, '\p{^Is_Blk=tamil}', "");
Expect(0, 3071, '\P{Is_Blk=tamil}', "");
Expect(1, 3071, '\P{^Is_Blk=tamil}', "");
Expect(0, 2943, '\p{Is_Blk=tamil}', "");
Expect(1, 2943, '\p{^Is_Blk=tamil}', "");
Expect(1, 2943, '\P{Is_Blk=tamil}', "");
Expect(0, 2943, '\P{^Is_Blk=tamil}', "");
Expect(1, 3071, '\p{Is_Blk=	TAMIL}', "");
Expect(0, 3071, '\p{^Is_Blk=	TAMIL}', "");
Expect(0, 3071, '\P{Is_Blk=	TAMIL}', "");
Expect(1, 3071, '\P{^Is_Blk=	TAMIL}', "");
Expect(0, 2943, '\p{Is_Blk=	TAMIL}', "");
Expect(1, 2943, '\p{^Is_Blk=	TAMIL}', "");
Expect(1, 2943, '\P{Is_Blk=	TAMIL}', "");
Expect(0, 2943, '\P{^Is_Blk=	TAMIL}', "");
Error('\p{Block=--Specials:=}');
Error('\P{Block=--Specials:=}');
Expect(1, 65520, '\p{Block=specials}', "");
Expect(0, 65520, '\p{^Block=specials}', "");
Expect(0, 65520, '\P{Block=specials}', "");
Expect(1, 65520, '\P{^Block=specials}', "");
Expect(0, 65519, '\p{Block=specials}', "");
Expect(1, 65519, '\p{^Block=specials}', "");
Expect(1, 65519, '\P{Block=specials}', "");
Expect(0, 65519, '\P{^Block=specials}', "");
Expect(1, 65520, '\p{Block=Specials}', "");
Expect(0, 65520, '\p{^Block=Specials}', "");
Expect(0, 65520, '\P{Block=Specials}', "");
Expect(1, 65520, '\P{^Block=Specials}', "");
Expect(0, 65519, '\p{Block=Specials}', "");
Expect(1, 65519, '\p{^Block=Specials}', "");
Expect(1, 65519, '\P{Block=Specials}', "");
Expect(0, 65519, '\P{^Block=Specials}', "");
Error('\p{Blk=__Specials/a/}');
Error('\P{Blk=__Specials/a/}');
Expect(1, 65520, '\p{Blk=specials}', "");
Expect(0, 65520, '\p{^Blk=specials}', "");
Expect(0, 65520, '\P{Blk=specials}', "");
Expect(1, 65520, '\P{^Blk=specials}', "");
Expect(0, 65519, '\p{Blk=specials}', "");
Expect(1, 65519, '\p{^Blk=specials}', "");
Expect(1, 65519, '\P{Blk=specials}', "");
Expect(0, 65519, '\P{^Blk=specials}', "");
Expect(1, 65520, '\p{Blk=	_Specials}', "");
Expect(0, 65520, '\p{^Blk=	_Specials}', "");
Expect(0, 65520, '\P{Blk=	_Specials}', "");
Expect(1, 65520, '\P{^Blk=	_Specials}', "");
Expect(0, 65519, '\p{Blk=	_Specials}', "");
Expect(1, 65519, '\p{^Blk=	_Specials}', "");
Expect(1, 65519, '\P{Blk=	_Specials}', "");
Expect(0, 65519, '\P{^Blk=	_Specials}', "");
Error('\p{Is_Block=	specials/a/}');
Error('\P{Is_Block=	specials/a/}');
Expect(1, 65520, '\p{Is_Block=specials}', "");
Expect(0, 65520, '\p{^Is_Block=specials}', "");
Expect(0, 65520, '\P{Is_Block=specials}', "");
Expect(1, 65520, '\P{^Is_Block=specials}', "");
Expect(0, 65519, '\p{Is_Block=specials}', "");
Expect(1, 65519, '\p{^Is_Block=specials}', "");
Expect(1, 65519, '\P{Is_Block=specials}', "");
Expect(0, 65519, '\P{^Is_Block=specials}', "");
Expect(1, 65520, '\p{Is_Block= -specials}', "");
Expect(0, 65520, '\p{^Is_Block= -specials}', "");
Expect(0, 65520, '\P{Is_Block= -specials}', "");
Expect(1, 65520, '\P{^Is_Block= -specials}', "");
Expect(0, 65519, '\p{Is_Block= -specials}', "");
Expect(1, 65519, '\p{^Is_Block= -specials}', "");
Expect(1, 65519, '\P{Is_Block= -specials}', "");
Expect(0, 65519, '\P{^Is_Block= -specials}', "");
Error('\p{Is_Blk=_/a/specials}');
Error('\P{Is_Blk=_/a/specials}');
Expect(1, 65520, '\p{Is_Blk:specials}', "");
Expect(0, 65520, '\p{^Is_Blk:specials}', "");
Expect(0, 65520, '\P{Is_Blk:specials}', "");
Expect(1, 65520, '\P{^Is_Blk:specials}', "");
Expect(0, 65519, '\p{Is_Blk:specials}', "");
Expect(1, 65519, '\p{^Is_Blk:specials}', "");
Expect(1, 65519, '\P{Is_Blk:specials}', "");
Expect(0, 65519, '\P{^Is_Blk:specials}', "");
Expect(1, 65520, '\p{Is_Blk=	Specials}', "");
Expect(0, 65520, '\p{^Is_Blk=	Specials}', "");
Expect(0, 65520, '\P{Is_Blk=	Specials}', "");
Expect(1, 65520, '\P{^Is_Blk=	Specials}', "");
Expect(0, 65519, '\p{Is_Blk=	Specials}', "");
Expect(1, 65519, '\p{^Is_Blk=	Specials}', "");
Expect(1, 65519, '\P{Is_Blk=	Specials}', "");
Expect(0, 65519, '\P{^Is_Blk=	Specials}', "");
Error('\p{Block: /a/georgian}');
Error('\P{Block: /a/georgian}');
Expect(1, 4351, '\p{Block=georgian}', "");
Expect(0, 4351, '\p{^Block=georgian}', "");
Expect(0, 4351, '\P{Block=georgian}', "");
Expect(1, 4351, '\P{^Block=georgian}', "");
Expect(0, 4255, '\p{Block=georgian}', "");
Expect(1, 4255, '\p{^Block=georgian}', "");
Expect(1, 4255, '\P{Block=georgian}', "");
Expect(0, 4255, '\P{^Block=georgian}', "");
Expect(1, 4351, '\p{Block=_Georgian}', "");
Expect(0, 4351, '\p{^Block=_Georgian}', "");
Expect(0, 4351, '\P{Block=_Georgian}', "");
Expect(1, 4351, '\P{^Block=_Georgian}', "");
Expect(0, 4255, '\p{Block=_Georgian}', "");
Expect(1, 4255, '\p{^Block=_Georgian}', "");
Expect(1, 4255, '\P{Block=_Georgian}', "");
Expect(0, 4255, '\P{^Block=_Georgian}', "");
Error('\p{Blk=-Georgian/a/}');
Error('\P{Blk=-Georgian/a/}');
Expect(1, 4351, '\p{Blk:   georgian}', "");
Expect(0, 4351, '\p{^Blk:   georgian}', "");
Expect(0, 4351, '\P{Blk:   georgian}', "");
Expect(1, 4351, '\P{^Blk:   georgian}', "");
Expect(0, 4255, '\p{Blk:   georgian}', "");
Expect(1, 4255, '\p{^Blk:   georgian}', "");
Expect(1, 4255, '\P{Blk:   georgian}', "");
Expect(0, 4255, '\P{^Blk:   georgian}', "");
Expect(1, 4351, '\p{Blk=_ georgian}', "");
Expect(0, 4351, '\p{^Blk=_ georgian}', "");
Expect(0, 4351, '\P{Blk=_ georgian}', "");
Expect(1, 4351, '\P{^Blk=_ georgian}', "");
Expect(0, 4255, '\p{Blk=_ georgian}', "");
Expect(1, 4255, '\p{^Blk=_ georgian}', "");
Expect(1, 4255, '\P{Blk=_ georgian}', "");
Expect(0, 4255, '\P{^Blk=_ georgian}', "");
Error('\p{Is_Block=	/a/Georgian}');
Error('\P{Is_Block=	/a/Georgian}');
Expect(1, 4351, '\p{Is_Block=georgian}', "");
Expect(0, 4351, '\p{^Is_Block=georgian}', "");
Expect(0, 4351, '\P{Is_Block=georgian}', "");
Expect(1, 4351, '\P{^Is_Block=georgian}', "");
Expect(0, 4255, '\p{Is_Block=georgian}', "");
Expect(1, 4255, '\p{^Is_Block=georgian}', "");
Expect(1, 4255, '\P{Is_Block=georgian}', "");
Expect(0, 4255, '\P{^Is_Block=georgian}', "");
Expect(1, 4351, '\p{Is_Block= GEORGIAN}', "");
Expect(0, 4351, '\p{^Is_Block= GEORGIAN}', "");
Expect(0, 4351, '\P{Is_Block= GEORGIAN}', "");
Expect(1, 4351, '\P{^Is_Block= GEORGIAN}', "");
Expect(0, 4255, '\p{Is_Block= GEORGIAN}', "");
Expect(1, 4255, '\p{^Is_Block= GEORGIAN}', "");
Expect(1, 4255, '\P{Is_Block= GEORGIAN}', "");
Expect(0, 4255, '\P{^Is_Block= GEORGIAN}', "");
Error('\p{Is_Blk=Georgian:=}');
Error('\P{Is_Blk=Georgian:=}');
Expect(1, 4351, '\p{Is_Blk=georgian}', "");
Expect(0, 4351, '\p{^Is_Blk=georgian}', "");
Expect(0, 4351, '\P{Is_Blk=georgian}', "");
Expect(1, 4351, '\P{^Is_Blk=georgian}', "");
Expect(0, 4255, '\p{Is_Blk=georgian}', "");
Expect(1, 4255, '\p{^Is_Blk=georgian}', "");
Expect(1, 4255, '\P{Is_Blk=georgian}', "");
Expect(0, 4255, '\P{^Is_Blk=georgian}', "");
Expect(1, 4351, '\p{Is_Blk=		georgian}', "");
Expect(0, 4351, '\p{^Is_Blk=		georgian}', "");
Expect(0, 4351, '\P{Is_Blk=		georgian}', "");
Expect(1, 4351, '\P{^Is_Blk=		georgian}', "");
Expect(0, 4255, '\p{Is_Blk=		georgian}', "");
Expect(1, 4255, '\p{^Is_Blk=		georgian}', "");
Expect(1, 4255, '\P{Is_Blk=		georgian}', "");
Expect(0, 4255, '\P{^Is_Blk=		georgian}', "");
Error('\p{Block=/a/ kayah-li}');
Error('\P{Block=/a/ kayah-li}');
Expect(1, 43311, '\p{Block=kayahli}', "");
Expect(0, 43311, '\p{^Block=kayahli}', "");
Expect(0, 43311, '\P{Block=kayahli}', "");
Expect(1, 43311, '\P{^Block=kayahli}', "");
Expect(0, 43263, '\p{Block=kayahli}', "");
Expect(1, 43263, '\p{^Block=kayahli}', "");
Expect(1, 43263, '\P{Block=kayahli}', "");
Expect(0, 43263, '\P{^Block=kayahli}', "");
Expect(1, 43311, '\p{Block=_Kayah	li}', "");
Expect(0, 43311, '\p{^Block=_Kayah	li}', "");
Expect(0, 43311, '\P{Block=_Kayah	li}', "");
Expect(1, 43311, '\P{^Block=_Kayah	li}', "");
Expect(0, 43263, '\p{Block=_Kayah	li}', "");
Expect(1, 43263, '\p{^Block=_Kayah	li}', "");
Expect(1, 43263, '\P{Block=_Kayah	li}', "");
Expect(0, 43263, '\P{^Block=_Kayah	li}', "");
Error('\p{Blk:		Kayah LI:=}');
Error('\P{Blk:		Kayah LI:=}');
Expect(1, 43311, '\p{Blk:   kayahli}', "");
Expect(0, 43311, '\p{^Blk:   kayahli}', "");
Expect(0, 43311, '\P{Blk:   kayahli}', "");
Expect(1, 43311, '\P{^Blk:   kayahli}', "");
Expect(0, 43263, '\p{Blk:   kayahli}', "");
Expect(1, 43263, '\p{^Blk:   kayahli}', "");
Expect(1, 43263, '\P{Blk:   kayahli}', "");
Expect(0, 43263, '\P{^Blk:   kayahli}', "");
Expect(1, 43311, '\p{Blk=__kayah LI}', "");
Expect(0, 43311, '\p{^Blk=__kayah LI}', "");
Expect(0, 43311, '\P{Blk=__kayah LI}', "");
Expect(1, 43311, '\P{^Blk=__kayah LI}', "");
Expect(0, 43263, '\p{Blk=__kayah LI}', "");
Expect(1, 43263, '\p{^Blk=__kayah LI}', "");
Expect(1, 43263, '\P{Blk=__kayah LI}', "");
Expect(0, 43263, '\P{^Blk=__kayah LI}', "");
Error('\p{Is_Block=_KAYAH/a/Li}');
Error('\P{Is_Block=_KAYAH/a/Li}');
Expect(1, 43311, '\p{Is_Block=kayahli}', "");
Expect(0, 43311, '\p{^Is_Block=kayahli}', "");
Expect(0, 43311, '\P{Is_Block=kayahli}', "");
Expect(1, 43311, '\P{^Is_Block=kayahli}', "");
Expect(0, 43263, '\p{Is_Block=kayahli}', "");
Expect(1, 43263, '\p{^Is_Block=kayahli}', "");
Expect(1, 43263, '\P{Is_Block=kayahli}', "");
Expect(0, 43263, '\P{^Is_Block=kayahli}', "");
Expect(1, 43311, '\p{Is_Block=		KAYAH_LI}', "");
Expect(0, 43311, '\p{^Is_Block=		KAYAH_LI}', "");
Expect(0, 43311, '\P{Is_Block=		KAYAH_LI}', "");
Expect(1, 43311, '\P{^Is_Block=		KAYAH_LI}', "");
Expect(0, 43263, '\p{Is_Block=		KAYAH_LI}', "");
Expect(1, 43263, '\p{^Is_Block=		KAYAH_LI}', "");
Expect(1, 43263, '\P{Is_Block=		KAYAH_LI}', "");
Expect(0, 43263, '\P{^Is_Block=		KAYAH_LI}', "");
Error('\p{Is_Blk= 	Kayah:=li}');
Error('\P{Is_Blk= 	Kayah:=li}');
Expect(1, 43311, '\p{Is_Blk=kayahli}', "");
Expect(0, 43311, '\p{^Is_Blk=kayahli}', "");
Expect(0, 43311, '\P{Is_Blk=kayahli}', "");
Expect(1, 43311, '\P{^Is_Blk=kayahli}', "");
Expect(0, 43263, '\p{Is_Blk=kayahli}', "");
Expect(1, 43263, '\p{^Is_Blk=kayahli}', "");
Expect(1, 43263, '\P{Is_Blk=kayahli}', "");
Expect(0, 43263, '\P{^Is_Blk=kayahli}', "");
Expect(1, 43311, '\p{Is_Blk=_-kayah li}', "");
Expect(0, 43311, '\p{^Is_Blk=_-kayah li}', "");
Expect(0, 43311, '\P{Is_Blk=_-kayah li}', "");
Expect(1, 43311, '\P{^Is_Blk=_-kayah li}', "");
Expect(0, 43263, '\p{Is_Blk=_-kayah li}', "");
Expect(1, 43263, '\p{^Is_Blk=_-kayah li}', "");
Expect(1, 43263, '\P{Is_Blk=_-kayah li}', "");
Expect(0, 43263, '\P{^Is_Blk=_-kayah li}', "");
Error('\p{Block=:=-CJKCompatibility	Forms}');
Error('\P{Block=:=-CJKCompatibility	Forms}');
Expect(1, 65103, '\p{Block=cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^Block=cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{Block=cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^Block=cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{Block=cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^Block=cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{Block=cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^Block=cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{Block=	_CJK-compatibilityFORMS}', "");
Expect(0, 65103, '\p{^Block=	_CJK-compatibilityFORMS}', "");
Expect(0, 65103, '\P{Block=	_CJK-compatibilityFORMS}', "");
Expect(1, 65103, '\P{^Block=	_CJK-compatibilityFORMS}', "");
Expect(0, 65071, '\p{Block=	_CJK-compatibilityFORMS}', "");
Expect(1, 65071, '\p{^Block=	_CJK-compatibilityFORMS}', "");
Expect(1, 65071, '\P{Block=	_CJK-compatibilityFORMS}', "");
Expect(0, 65071, '\P{^Block=	_CJK-compatibilityFORMS}', "");
Error('\p{Blk:	/a/cjk_COMPATIBILITY-Forms}');
Error('\P{Blk:	/a/cjk_COMPATIBILITY-Forms}');
Expect(1, 65103, '\p{Blk=cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^Blk=cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{Blk=cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^Blk=cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{Blk=cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^Blk=cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{Blk=cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^Blk=cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{Blk=-CJK	Compatibility FORMS}', "");
Expect(0, 65103, '\p{^Blk=-CJK	Compatibility FORMS}', "");
Expect(0, 65103, '\P{Blk=-CJK	Compatibility FORMS}', "");
Expect(1, 65103, '\P{^Blk=-CJK	Compatibility FORMS}', "");
Expect(0, 65071, '\p{Blk=-CJK	Compatibility FORMS}', "");
Expect(1, 65071, '\p{^Blk=-CJK	Compatibility FORMS}', "");
Expect(1, 65071, '\P{Blk=-CJK	Compatibility FORMS}', "");
Expect(0, 65071, '\P{^Blk=-CJK	Compatibility FORMS}', "");
Error('\p{Is_Block=_ CJK_Compatibility/a/FORMS}');
Error('\P{Is_Block=_ CJK_Compatibility/a/FORMS}');
Expect(1, 65103, '\p{Is_Block=cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^Is_Block=cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{Is_Block=cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^Is_Block=cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{Is_Block=cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^Is_Block=cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{Is_Block=cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^Is_Block=cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{Is_Block= CJK Compatibility FORMS}', "");
Expect(0, 65103, '\p{^Is_Block= CJK Compatibility FORMS}', "");
Expect(0, 65103, '\P{Is_Block= CJK Compatibility FORMS}', "");
Expect(1, 65103, '\P{^Is_Block= CJK Compatibility FORMS}', "");
Expect(0, 65071, '\p{Is_Block= CJK Compatibility FORMS}', "");
Expect(1, 65071, '\p{^Is_Block= CJK Compatibility FORMS}', "");
Expect(1, 65071, '\P{Is_Block= CJK Compatibility FORMS}', "");
Expect(0, 65071, '\P{^Is_Block= CJK Compatibility FORMS}', "");
Error('\p{Is_Blk=		CJK:=compatibility-FORMS}');
Error('\P{Is_Blk=		CJK:=compatibility-FORMS}');
Expect(1, 65103, '\p{Is_Blk=cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^Is_Blk=cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{Is_Blk=cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^Is_Blk=cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{Is_Blk=cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^Is_Blk=cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{Is_Blk=cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^Is_Blk=cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{Is_Blk=_cjkCompatibilityForms}', "");
Expect(0, 65103, '\p{^Is_Blk=_cjkCompatibilityForms}', "");
Expect(0, 65103, '\P{Is_Blk=_cjkCompatibilityForms}', "");
Expect(1, 65103, '\P{^Is_Blk=_cjkCompatibilityForms}', "");
Expect(0, 65071, '\p{Is_Blk=_cjkCompatibilityForms}', "");
Expect(1, 65071, '\p{^Is_Blk=_cjkCompatibilityForms}', "");
Expect(1, 65071, '\P{Is_Blk=_cjkCompatibilityForms}', "");
Expect(0, 65071, '\P{^Is_Blk=_cjkCompatibilityForms}', "");
Error('\p{Block=/a/ _tifinagh}');
Error('\P{Block=/a/ _tifinagh}');
Expect(1, 11647, '\p{Block:   tifinagh}', "");
Expect(0, 11647, '\p{^Block:   tifinagh}', "");
Expect(0, 11647, '\P{Block:   tifinagh}', "");
Expect(1, 11647, '\P{^Block:   tifinagh}', "");
Expect(0, 11567, '\p{Block:   tifinagh}', "");
Expect(1, 11567, '\p{^Block:   tifinagh}', "");
Expect(1, 11567, '\P{Block:   tifinagh}', "");
Expect(0, 11567, '\P{^Block:   tifinagh}', "");
Expect(1, 11647, '\p{Block=-tifinagh}', "");
Expect(0, 11647, '\p{^Block=-tifinagh}', "");
Expect(0, 11647, '\P{Block=-tifinagh}', "");
Expect(1, 11647, '\P{^Block=-tifinagh}', "");
Expect(0, 11567, '\p{Block=-tifinagh}', "");
Expect(1, 11567, '\p{^Block=-tifinagh}', "");
Expect(1, 11567, '\P{Block=-tifinagh}', "");
Expect(0, 11567, '\P{^Block=-tifinagh}', "");
Error('\p{Blk: /a/-_TIFINAGH}');
Error('\P{Blk: /a/-_TIFINAGH}');
Expect(1, 11647, '\p{Blk=tifinagh}', "");
Expect(0, 11647, '\p{^Blk=tifinagh}', "");
Expect(0, 11647, '\P{Blk=tifinagh}', "");
Expect(1, 11647, '\P{^Blk=tifinagh}', "");
Expect(0, 11567, '\p{Blk=tifinagh}', "");
Expect(1, 11567, '\p{^Blk=tifinagh}', "");
Expect(1, 11567, '\P{Blk=tifinagh}', "");
Expect(0, 11567, '\P{^Blk=tifinagh}', "");
Expect(1, 11647, '\p{Blk=	 tifinagh}', "");
Expect(0, 11647, '\p{^Blk=	 tifinagh}', "");
Expect(0, 11647, '\P{Blk=	 tifinagh}', "");
Expect(1, 11647, '\P{^Blk=	 tifinagh}', "");
Expect(0, 11567, '\p{Blk=	 tifinagh}', "");
Expect(1, 11567, '\p{^Blk=	 tifinagh}', "");
Expect(1, 11567, '\P{Blk=	 tifinagh}', "");
Expect(0, 11567, '\P{^Blk=	 tifinagh}', "");
Error('\p{Is_Block=	/a/TIFINAGH}');
Error('\P{Is_Block=	/a/TIFINAGH}');
Expect(1, 11647, '\p{Is_Block=tifinagh}', "");
Expect(0, 11647, '\p{^Is_Block=tifinagh}', "");
Expect(0, 11647, '\P{Is_Block=tifinagh}', "");
Expect(1, 11647, '\P{^Is_Block=tifinagh}', "");
Expect(0, 11567, '\p{Is_Block=tifinagh}', "");
Expect(1, 11567, '\p{^Is_Block=tifinagh}', "");
Expect(1, 11567, '\P{Is_Block=tifinagh}', "");
Expect(0, 11567, '\P{^Is_Block=tifinagh}', "");
Expect(1, 11647, '\p{Is_Block=-Tifinagh}', "");
Expect(0, 11647, '\p{^Is_Block=-Tifinagh}', "");
Expect(0, 11647, '\P{Is_Block=-Tifinagh}', "");
Expect(1, 11647, '\P{^Is_Block=-Tifinagh}', "");
Expect(0, 11567, '\p{Is_Block=-Tifinagh}', "");
Expect(1, 11567, '\p{^Is_Block=-Tifinagh}', "");
Expect(1, 11567, '\P{Is_Block=-Tifinagh}', "");
Expect(0, 11567, '\P{^Is_Block=-Tifinagh}', "");
Error('\p{Is_Blk=	/a/tifinagh}');
Error('\P{Is_Blk=	/a/tifinagh}');
Expect(1, 11647, '\p{Is_Blk: tifinagh}', "");
Expect(0, 11647, '\p{^Is_Blk: tifinagh}', "");
Expect(0, 11647, '\P{Is_Blk: tifinagh}', "");
Expect(1, 11647, '\P{^Is_Blk: tifinagh}', "");
Expect(0, 11567, '\p{Is_Blk: tifinagh}', "");
Expect(1, 11567, '\p{^Is_Blk: tifinagh}', "");
Expect(1, 11567, '\P{Is_Blk: tifinagh}', "");
Expect(0, 11567, '\P{^Is_Blk: tifinagh}', "");
Expect(1, 11647, '\p{Is_Blk=  Tifinagh}', "");
Expect(0, 11647, '\p{^Is_Blk=  Tifinagh}', "");
Expect(0, 11647, '\P{Is_Blk=  Tifinagh}', "");
Expect(1, 11647, '\P{^Is_Blk=  Tifinagh}', "");
Expect(0, 11567, '\p{Is_Blk=  Tifinagh}', "");
Expect(1, 11567, '\p{^Is_Blk=  Tifinagh}', "");
Expect(1, 11567, '\P{Is_Blk=  Tifinagh}', "");
Expect(0, 11567, '\P{^Is_Blk=  Tifinagh}', "");
Error('\p{Block=	 Hangul/a/jamo	Extended-b}');
Error('\P{Block=	 Hangul/a/jamo	Extended-b}');
Expect(1, 55295, '\p{Block=hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^Block=hanguljamoextendedb}', "");
Expect(0, 55295, '\P{Block=hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^Block=hanguljamoextendedb}', "");
Expect(0, 55215, '\p{Block=hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^Block=hanguljamoextendedb}', "");
Expect(1, 55215, '\P{Block=hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^Block=hanguljamoextendedb}', "");
Expect(1, 55295, '\p{Block= 	HANGUL-jamo-EXTENDED-B}', "");
Expect(0, 55295, '\p{^Block= 	HANGUL-jamo-EXTENDED-B}', "");
Expect(0, 55295, '\P{Block= 	HANGUL-jamo-EXTENDED-B}', "");
Expect(1, 55295, '\P{^Block= 	HANGUL-jamo-EXTENDED-B}', "");
Expect(0, 55215, '\p{Block= 	HANGUL-jamo-EXTENDED-B}', "");
Expect(1, 55215, '\p{^Block= 	HANGUL-jamo-EXTENDED-B}', "");
Expect(1, 55215, '\P{Block= 	HANGUL-jamo-EXTENDED-B}', "");
Expect(0, 55215, '\P{^Block= 	HANGUL-jamo-EXTENDED-B}', "");
Error('\p{Blk=/a/ -hangul JAMOextendedB}');
Error('\P{Blk=/a/ -hangul JAMOextendedB}');
Expect(1, 55295, '\p{Blk=hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^Blk=hanguljamoextendedb}', "");
Expect(0, 55295, '\P{Blk=hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^Blk=hanguljamoextendedb}', "");
Expect(0, 55215, '\p{Blk=hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^Blk=hanguljamoextendedb}', "");
Expect(1, 55215, '\P{Blk=hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^Blk=hanguljamoextendedb}', "");
Expect(1, 55295, '\p{Blk=	Hangul	jamo-Extended-b}', "");
Expect(0, 55295, '\p{^Blk=	Hangul	jamo-Extended-b}', "");
Expect(0, 55295, '\P{Blk=	Hangul	jamo-Extended-b}', "");
Expect(1, 55295, '\P{^Blk=	Hangul	jamo-Extended-b}', "");
Expect(0, 55215, '\p{Blk=	Hangul	jamo-Extended-b}', "");
Expect(1, 55215, '\p{^Blk=	Hangul	jamo-Extended-b}', "");
Expect(1, 55215, '\P{Blk=	Hangul	jamo-Extended-b}', "");
Expect(0, 55215, '\P{^Blk=	Hangul	jamo-Extended-b}', "");
Error('\p{Is_Block=:=-_HangulJamo Extended_B}');
Error('\P{Is_Block=:=-_HangulJamo Extended_B}');
Expect(1, 55295, '\p{Is_Block=hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^Is_Block=hanguljamoextendedb}', "");
Expect(0, 55295, '\P{Is_Block=hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^Is_Block=hanguljamoextendedb}', "");
Expect(0, 55215, '\p{Is_Block=hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^Is_Block=hanguljamoextendedb}', "");
Expect(1, 55215, '\P{Is_Block=hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^Is_Block=hanguljamoextendedb}', "");
Expect(1, 55295, '\p{Is_Block=-_HANGUL JamoExtended-b}', "");
Expect(0, 55295, '\p{^Is_Block=-_HANGUL JamoExtended-b}', "");
Expect(0, 55295, '\P{Is_Block=-_HANGUL JamoExtended-b}', "");
Expect(1, 55295, '\P{^Is_Block=-_HANGUL JamoExtended-b}', "");
Expect(0, 55215, '\p{Is_Block=-_HANGUL JamoExtended-b}', "");
Expect(1, 55215, '\p{^Is_Block=-_HANGUL JamoExtended-b}', "");
Expect(1, 55215, '\P{Is_Block=-_HANGUL JamoExtended-b}', "");
Expect(0, 55215, '\P{^Is_Block=-_HANGUL JamoExtended-b}', "");
Error('\p{Is_Blk=-hangul/a/Jamo	Extended B}');
Error('\P{Is_Blk=-hangul/a/Jamo	Extended B}');
Expect(1, 55295, '\p{Is_Blk=hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^Is_Blk=hanguljamoextendedb}', "");
Expect(0, 55295, '\P{Is_Blk=hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^Is_Blk=hanguljamoextendedb}', "");
Expect(0, 55215, '\p{Is_Blk=hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^Is_Blk=hanguljamoextendedb}', "");
Expect(1, 55215, '\P{Is_Blk=hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^Is_Blk=hanguljamoextendedb}', "");
Expect(1, 55295, '\p{Is_Blk= -Hangul-jamo_EXTENDEDb}', "");
Expect(0, 55295, '\p{^Is_Blk= -Hangul-jamo_EXTENDEDb}', "");
Expect(0, 55295, '\P{Is_Blk= -Hangul-jamo_EXTENDEDb}', "");
Expect(1, 55295, '\P{^Is_Blk= -Hangul-jamo_EXTENDEDb}', "");
Expect(0, 55215, '\p{Is_Blk= -Hangul-jamo_EXTENDEDb}', "");
Expect(1, 55215, '\p{^Is_Blk= -Hangul-jamo_EXTENDEDb}', "");
Expect(1, 55215, '\P{Is_Blk= -Hangul-jamo_EXTENDEDb}', "");
Expect(0, 55215, '\P{^Is_Blk= -Hangul-jamo_EXTENDEDb}', "");
Error('\p{Block:	/a/thai}');
Error('\P{Block:	/a/thai}');
Expect(1, 3711, '\p{Block=thai}', "");
Expect(0, 3711, '\p{^Block=thai}', "");
Expect(0, 3711, '\P{Block=thai}', "");
Expect(1, 3711, '\P{^Block=thai}', "");
Expect(0, 3583, '\p{Block=thai}', "");
Expect(1, 3583, '\p{^Block=thai}', "");
Expect(1, 3583, '\P{Block=thai}', "");
Expect(0, 3583, '\P{^Block=thai}', "");
Expect(1, 3711, '\p{Block=	 THAI}', "");
Expect(0, 3711, '\p{^Block=	 THAI}', "");
Expect(0, 3711, '\P{Block=	 THAI}', "");
Expect(1, 3711, '\P{^Block=	 THAI}', "");
Expect(0, 3583, '\p{Block=	 THAI}', "");
Expect(1, 3583, '\p{^Block=	 THAI}', "");
Expect(1, 3583, '\P{Block=	 THAI}', "");
Expect(0, 3583, '\P{^Block=	 THAI}', "");
Error('\p{Blk=	/a/Thai}');
Error('\P{Blk=	/a/Thai}');
Expect(1, 3711, '\p{Blk=thai}', "");
Expect(0, 3711, '\p{^Blk=thai}', "");
Expect(0, 3711, '\P{Blk=thai}', "");
Expect(1, 3711, '\P{^Blk=thai}', "");
Expect(0, 3583, '\p{Blk=thai}', "");
Expect(1, 3583, '\p{^Blk=thai}', "");
Expect(1, 3583, '\P{Blk=thai}', "");
Expect(0, 3583, '\P{^Blk=thai}', "");
Expect(1, 3711, '\p{Blk= Thai}', "");
Expect(0, 3711, '\p{^Blk= Thai}', "");
Expect(0, 3711, '\P{Blk= Thai}', "");
Expect(1, 3711, '\P{^Blk= Thai}', "");
Expect(0, 3583, '\p{Blk= Thai}', "");
Expect(1, 3583, '\p{^Blk= Thai}', "");
Expect(1, 3583, '\P{Blk= Thai}', "");
Expect(0, 3583, '\P{^Blk= Thai}', "");
Error('\p{Is_Block=	thai/a/}');
Error('\P{Is_Block=	thai/a/}');
Expect(1, 3711, '\p{Is_Block=thai}', "");
Expect(0, 3711, '\p{^Is_Block=thai}', "");
Expect(0, 3711, '\P{Is_Block=thai}', "");
Expect(1, 3711, '\P{^Is_Block=thai}', "");
Expect(0, 3583, '\p{Is_Block=thai}', "");
Expect(1, 3583, '\p{^Is_Block=thai}', "");
Expect(1, 3583, '\P{Is_Block=thai}', "");
Expect(0, 3583, '\P{^Is_Block=thai}', "");
Expect(1, 3711, '\p{Is_Block=		thai}', "");
Expect(0, 3711, '\p{^Is_Block=		thai}', "");
Expect(0, 3711, '\P{Is_Block=		thai}', "");
Expect(1, 3711, '\P{^Is_Block=		thai}', "");
Expect(0, 3583, '\p{Is_Block=		thai}', "");
Expect(1, 3583, '\p{^Is_Block=		thai}', "");
Expect(1, 3583, '\P{Is_Block=		thai}', "");
Expect(0, 3583, '\P{^Is_Block=		thai}', "");
Error('\p{Is_Blk=_THAI:=}');
Error('\P{Is_Blk=_THAI:=}');
Expect(1, 3711, '\p{Is_Blk=thai}', "");
Expect(0, 3711, '\p{^Is_Blk=thai}', "");
Expect(0, 3711, '\P{Is_Blk=thai}', "");
Expect(1, 3711, '\P{^Is_Blk=thai}', "");
Expect(0, 3583, '\p{Is_Blk=thai}', "");
Expect(1, 3583, '\p{^Is_Blk=thai}', "");
Expect(1, 3583, '\P{Is_Blk=thai}', "");
Expect(0, 3583, '\P{^Is_Blk=thai}', "");
Expect(1, 3711, '\p{Is_Blk=	 THAI}', "");
Expect(0, 3711, '\p{^Is_Blk=	 THAI}', "");
Expect(0, 3711, '\P{Is_Blk=	 THAI}', "");
Expect(1, 3711, '\P{^Is_Blk=	 THAI}', "");
Expect(0, 3583, '\p{Is_Blk=	 THAI}', "");
Expect(1, 3583, '\p{^Is_Blk=	 THAI}', "");
Expect(1, 3583, '\P{Is_Blk=	 THAI}', "");
Expect(0, 3583, '\P{^Is_Blk=	 THAI}', "");
Error('\p{Block=	khmer/a/}');
Error('\P{Block=	khmer/a/}');
Expect(1, 6143, '\p{Block=khmer}', "");
Expect(0, 6143, '\p{^Block=khmer}', "");
Expect(0, 6143, '\P{Block=khmer}', "");
Expect(1, 6143, '\P{^Block=khmer}', "");
Expect(0, 6015, '\p{Block=khmer}', "");
Expect(1, 6015, '\p{^Block=khmer}', "");
Expect(1, 6015, '\P{Block=khmer}', "");
Expect(0, 6015, '\P{^Block=khmer}', "");
Expect(1, 6143, '\p{Block=-Khmer}', "");
Expect(0, 6143, '\p{^Block=-Khmer}', "");
Expect(0, 6143, '\P{Block=-Khmer}', "");
Expect(1, 6143, '\P{^Block=-Khmer}', "");
Expect(0, 6015, '\p{Block=-Khmer}', "");
Expect(1, 6015, '\p{^Block=-Khmer}', "");
Expect(1, 6015, '\P{Block=-Khmer}', "");
Expect(0, 6015, '\P{^Block=-Khmer}', "");
Error('\p{Blk= _Khmer:=}');
Error('\P{Blk= _Khmer:=}');
Expect(1, 6143, '\p{Blk=khmer}', "");
Expect(0, 6143, '\p{^Blk=khmer}', "");
Expect(0, 6143, '\P{Blk=khmer}', "");
Expect(1, 6143, '\P{^Blk=khmer}', "");
Expect(0, 6015, '\p{Blk=khmer}', "");
Expect(1, 6015, '\p{^Blk=khmer}', "");
Expect(1, 6015, '\P{Blk=khmer}', "");
Expect(0, 6015, '\P{^Blk=khmer}', "");
Expect(1, 6143, '\p{Blk=_	KHMER}', "");
Expect(0, 6143, '\p{^Blk=_	KHMER}', "");
Expect(0, 6143, '\P{Blk=_	KHMER}', "");
Expect(1, 6143, '\P{^Blk=_	KHMER}', "");
Expect(0, 6015, '\p{Blk=_	KHMER}', "");
Expect(1, 6015, '\p{^Blk=_	KHMER}', "");
Expect(1, 6015, '\P{Blk=_	KHMER}', "");
Expect(0, 6015, '\P{^Blk=_	KHMER}', "");
Error('\p{Is_Block:		KHMER/a/}');
Error('\P{Is_Block:		KHMER/a/}');
Expect(1, 6143, '\p{Is_Block=khmer}', "");
Expect(0, 6143, '\p{^Is_Block=khmer}', "");
Expect(0, 6143, '\P{Is_Block=khmer}', "");
Expect(1, 6143, '\P{^Is_Block=khmer}', "");
Expect(0, 6015, '\p{Is_Block=khmer}', "");
Expect(1, 6015, '\p{^Is_Block=khmer}', "");
Expect(1, 6015, '\P{Is_Block=khmer}', "");
Expect(0, 6015, '\P{^Is_Block=khmer}', "");
Expect(1, 6143, '\p{Is_Block=- Khmer}', "");
Expect(0, 6143, '\p{^Is_Block=- Khmer}', "");
Expect(0, 6143, '\P{Is_Block=- Khmer}', "");
Expect(1, 6143, '\P{^Is_Block=- Khmer}', "");
Expect(0, 6015, '\p{Is_Block=- Khmer}', "");
Expect(1, 6015, '\p{^Is_Block=- Khmer}', "");
Expect(1, 6015, '\P{Is_Block=- Khmer}', "");
Expect(0, 6015, '\P{^Is_Block=- Khmer}', "");
Error('\p{Is_Blk=_-Khmer/a/}');
Error('\P{Is_Blk=_-Khmer/a/}');
Expect(1, 6143, '\p{Is_Blk=khmer}', "");
Expect(0, 6143, '\p{^Is_Blk=khmer}', "");
Expect(0, 6143, '\P{Is_Blk=khmer}', "");
Expect(1, 6143, '\P{^Is_Blk=khmer}', "");
Expect(0, 6015, '\p{Is_Blk=khmer}', "");
Expect(1, 6015, '\p{^Is_Blk=khmer}', "");
Expect(1, 6015, '\P{Is_Blk=khmer}', "");
Expect(0, 6015, '\P{^Is_Blk=khmer}', "");
Expect(1, 6143, '\p{Is_Blk=--khmer}', "");
Expect(0, 6143, '\p{^Is_Blk=--khmer}', "");
Expect(0, 6143, '\P{Is_Blk=--khmer}', "");
Expect(1, 6143, '\P{^Is_Blk=--khmer}', "");
Expect(0, 6015, '\p{Is_Blk=--khmer}', "");
Expect(1, 6015, '\p{^Is_Blk=--khmer}', "");
Expect(1, 6015, '\P{Is_Blk=--khmer}', "");
Expect(0, 6015, '\P{^Is_Blk=--khmer}', "");
Error('\p{Block=  Saurashtra:=}');
Error('\P{Block=  Saurashtra:=}');
Expect(1, 43231, '\p{Block=saurashtra}', "");
Expect(0, 43231, '\p{^Block=saurashtra}', "");
Expect(0, 43231, '\P{Block=saurashtra}', "");
Expect(1, 43231, '\P{^Block=saurashtra}', "");
Expect(0, 43135, '\p{Block=saurashtra}', "");
Expect(1, 43135, '\p{^Block=saurashtra}', "");
Expect(1, 43135, '\P{Block=saurashtra}', "");
Expect(0, 43135, '\P{^Block=saurashtra}', "");
Expect(1, 43231, '\p{Block=-saurashtra}', "");
Expect(0, 43231, '\p{^Block=-saurashtra}', "");
Expect(0, 43231, '\P{Block=-saurashtra}', "");
Expect(1, 43231, '\P{^Block=-saurashtra}', "");
Expect(0, 43135, '\p{Block=-saurashtra}', "");
Expect(1, 43135, '\p{^Block=-saurashtra}', "");
Expect(1, 43135, '\P{Block=-saurashtra}', "");
Expect(0, 43135, '\P{^Block=-saurashtra}', "");
Error('\p{Blk= /a/Saurashtra}');
Error('\P{Blk= /a/Saurashtra}');
Expect(1, 43231, '\p{Blk=saurashtra}', "");
Expect(0, 43231, '\p{^Blk=saurashtra}', "");
Expect(0, 43231, '\P{Blk=saurashtra}', "");
Expect(1, 43231, '\P{^Blk=saurashtra}', "");
Expect(0, 43135, '\p{Blk=saurashtra}', "");
Expect(1, 43135, '\p{^Blk=saurashtra}', "");
Expect(1, 43135, '\P{Blk=saurashtra}', "");
Expect(0, 43135, '\P{^Blk=saurashtra}', "");
Expect(1, 43231, '\p{Blk=	Saurashtra}', "");
Expect(0, 43231, '\p{^Blk=	Saurashtra}', "");
Expect(0, 43231, '\P{Blk=	Saurashtra}', "");
Expect(1, 43231, '\P{^Blk=	Saurashtra}', "");
Expect(0, 43135, '\p{Blk=	Saurashtra}', "");
Expect(1, 43135, '\p{^Blk=	Saurashtra}', "");
Expect(1, 43135, '\P{Blk=	Saurashtra}', "");
Expect(0, 43135, '\P{^Blk=	Saurashtra}', "");
Error('\p{Is_Block=/a/-_Saurashtra}');
Error('\P{Is_Block=/a/-_Saurashtra}');
Expect(1, 43231, '\p{Is_Block=saurashtra}', "");
Expect(0, 43231, '\p{^Is_Block=saurashtra}', "");
Expect(0, 43231, '\P{Is_Block=saurashtra}', "");
Expect(1, 43231, '\P{^Is_Block=saurashtra}', "");
Expect(0, 43135, '\p{Is_Block=saurashtra}', "");
Expect(1, 43135, '\p{^Is_Block=saurashtra}', "");
Expect(1, 43135, '\P{Is_Block=saurashtra}', "");
Expect(0, 43135, '\P{^Is_Block=saurashtra}', "");
Expect(1, 43231, '\p{Is_Block=- Saurashtra}', "");
Expect(0, 43231, '\p{^Is_Block=- Saurashtra}', "");
Expect(0, 43231, '\P{Is_Block=- Saurashtra}', "");
Expect(1, 43231, '\P{^Is_Block=- Saurashtra}', "");
Expect(0, 43135, '\p{Is_Block=- Saurashtra}', "");
Expect(1, 43135, '\p{^Is_Block=- Saurashtra}', "");
Expect(1, 43135, '\P{Is_Block=- Saurashtra}', "");
Expect(0, 43135, '\P{^Is_Block=- Saurashtra}', "");
Error('\p{Is_Blk:   -/a/Saurashtra}');
Error('\P{Is_Blk:   -/a/Saurashtra}');
Expect(1, 43231, '\p{Is_Blk=saurashtra}', "");
Expect(0, 43231, '\p{^Is_Blk=saurashtra}', "");
Expect(0, 43231, '\P{Is_Blk=saurashtra}', "");
Expect(1, 43231, '\P{^Is_Blk=saurashtra}', "");
Expect(0, 43135, '\p{Is_Blk=saurashtra}', "");
Expect(1, 43135, '\p{^Is_Blk=saurashtra}', "");
Expect(1, 43135, '\P{Is_Blk=saurashtra}', "");
Expect(0, 43135, '\P{^Is_Blk=saurashtra}', "");
Expect(1, 43231, '\p{Is_Blk=	_Saurashtra}', "");
Expect(0, 43231, '\p{^Is_Blk=	_Saurashtra}', "");
Expect(0, 43231, '\P{Is_Blk=	_Saurashtra}', "");
Expect(1, 43231, '\P{^Is_Blk=	_Saurashtra}', "");
Expect(0, 43135, '\p{Is_Blk=	_Saurashtra}', "");
Expect(1, 43135, '\p{^Is_Blk=	_Saurashtra}', "");
Expect(1, 43135, '\P{Is_Blk=	_Saurashtra}', "");
Expect(0, 43135, '\P{^Is_Blk=	_Saurashtra}', "");
Error('\p{Block:-:=gujarati}');
Error('\P{Block:-:=gujarati}');
Expect(1, 2815, '\p{Block=gujarati}', "");
Expect(0, 2815, '\p{^Block=gujarati}', "");
Expect(0, 2815, '\P{Block=gujarati}', "");
Expect(1, 2815, '\P{^Block=gujarati}', "");
Expect(0, 2687, '\p{Block=gujarati}', "");
Expect(1, 2687, '\p{^Block=gujarati}', "");
Expect(1, 2687, '\P{Block=gujarati}', "");
Expect(0, 2687, '\P{^Block=gujarati}', "");
Expect(1, 2815, '\p{Block=	 GUJARATI}', "");
Expect(0, 2815, '\p{^Block=	 GUJARATI}', "");
Expect(0, 2815, '\P{Block=	 GUJARATI}', "");
Expect(1, 2815, '\P{^Block=	 GUJARATI}', "");
Expect(0, 2687, '\p{Block=	 GUJARATI}', "");
Expect(1, 2687, '\p{^Block=	 GUJARATI}', "");
Expect(1, 2687, '\P{Block=	 GUJARATI}', "");
Expect(0, 2687, '\P{^Block=	 GUJARATI}', "");
Error('\p{Blk= /a/GUJARATI}');
Error('\P{Blk= /a/GUJARATI}');
Expect(1, 2815, '\p{Blk=gujarati}', "");
Expect(0, 2815, '\p{^Blk=gujarati}', "");
Expect(0, 2815, '\P{Blk=gujarati}', "");
Expect(1, 2815, '\P{^Blk=gujarati}', "");
Expect(0, 2687, '\p{Blk=gujarati}', "");
Expect(1, 2687, '\p{^Blk=gujarati}', "");
Expect(1, 2687, '\P{Blk=gujarati}', "");
Expect(0, 2687, '\P{^Blk=gujarati}', "");
Expect(1, 2815, '\p{Blk=	 gujarati}', "");
Expect(0, 2815, '\p{^Blk=	 gujarati}', "");
Expect(0, 2815, '\P{Blk=	 gujarati}', "");
Expect(1, 2815, '\P{^Blk=	 gujarati}', "");
Expect(0, 2687, '\p{Blk=	 gujarati}', "");
Expect(1, 2687, '\p{^Blk=	 gujarati}', "");
Expect(1, 2687, '\P{Blk=	 gujarati}', "");
Expect(0, 2687, '\P{^Blk=	 gujarati}', "");
Error('\p{Is_Block: :=gujarati}');
Error('\P{Is_Block: :=gujarati}');
Expect(1, 2815, '\p{Is_Block=gujarati}', "");
Expect(0, 2815, '\p{^Is_Block=gujarati}', "");
Expect(0, 2815, '\P{Is_Block=gujarati}', "");
Expect(1, 2815, '\P{^Is_Block=gujarati}', "");
Expect(0, 2687, '\p{Is_Block=gujarati}', "");
Expect(1, 2687, '\p{^Is_Block=gujarati}', "");
Expect(1, 2687, '\P{Is_Block=gujarati}', "");
Expect(0, 2687, '\P{^Is_Block=gujarati}', "");
Expect(1, 2815, '\p{Is_Block=_gujarati}', "");
Expect(0, 2815, '\p{^Is_Block=_gujarati}', "");
Expect(0, 2815, '\P{Is_Block=_gujarati}', "");
Expect(1, 2815, '\P{^Is_Block=_gujarati}', "");
Expect(0, 2687, '\p{Is_Block=_gujarati}', "");
Expect(1, 2687, '\p{^Is_Block=_gujarati}', "");
Expect(1, 2687, '\P{Is_Block=_gujarati}', "");
Expect(0, 2687, '\P{^Is_Block=_gujarati}', "");
Error('\p{Is_Blk=:= Gujarati}');
Error('\P{Is_Blk=:= Gujarati}');
Expect(1, 2815, '\p{Is_Blk=gujarati}', "");
Expect(0, 2815, '\p{^Is_Blk=gujarati}', "");
Expect(0, 2815, '\P{Is_Blk=gujarati}', "");
Expect(1, 2815, '\P{^Is_Blk=gujarati}', "");
Expect(0, 2687, '\p{Is_Blk=gujarati}', "");
Expect(1, 2687, '\p{^Is_Blk=gujarati}', "");
Expect(1, 2687, '\P{Is_Blk=gujarati}', "");
Expect(0, 2687, '\P{^Is_Blk=gujarati}', "");
Expect(1, 2815, '\p{Is_Blk=_-Gujarati}', "");
Expect(0, 2815, '\p{^Is_Blk=_-Gujarati}', "");
Expect(0, 2815, '\P{Is_Blk=_-Gujarati}', "");
Expect(1, 2815, '\P{^Is_Blk=_-Gujarati}', "");
Expect(0, 2687, '\p{Is_Blk=_-Gujarati}', "");
Expect(1, 2687, '\p{^Is_Blk=_-Gujarati}', "");
Expect(1, 2687, '\P{Is_Blk=_-Gujarati}', "");
Expect(0, 2687, '\P{^Is_Blk=_-Gujarati}', "");
Error('\p{Block=_:=telugu}');
Error('\P{Block=_:=telugu}');
Expect(1, 3199, '\p{Block=telugu}', "");
Expect(0, 3199, '\p{^Block=telugu}', "");
Expect(0, 3199, '\P{Block=telugu}', "");
Expect(1, 3199, '\P{^Block=telugu}', "");
Expect(0, 3071, '\p{Block=telugu}', "");
Expect(1, 3071, '\p{^Block=telugu}', "");
Expect(1, 3071, '\P{Block=telugu}', "");
Expect(0, 3071, '\P{^Block=telugu}', "");
Expect(1, 3199, '\p{Block=	telugu}', "");
Expect(0, 3199, '\p{^Block=	telugu}', "");
Expect(0, 3199, '\P{Block=	telugu}', "");
Expect(1, 3199, '\P{^Block=	telugu}', "");
Expect(0, 3071, '\p{Block=	telugu}', "");
Expect(1, 3071, '\p{^Block=	telugu}', "");
Expect(1, 3071, '\P{Block=	telugu}', "");
Expect(0, 3071, '\P{^Block=	telugu}', "");
Error('\p{Blk=/a/TELUGU}');
Error('\P{Blk=/a/TELUGU}');
Expect(1, 3199, '\p{Blk=telugu}', "");
Expect(0, 3199, '\p{^Blk=telugu}', "");
Expect(0, 3199, '\P{Blk=telugu}', "");
Expect(1, 3199, '\P{^Blk=telugu}', "");
Expect(0, 3071, '\p{Blk=telugu}', "");
Expect(1, 3071, '\p{^Blk=telugu}', "");
Expect(1, 3071, '\P{Blk=telugu}', "");
Expect(0, 3071, '\P{^Blk=telugu}', "");
Expect(1, 3199, '\p{Blk=  telugu}', "");
Expect(0, 3199, '\p{^Blk=  telugu}', "");
Expect(0, 3199, '\P{Blk=  telugu}', "");
Expect(1, 3199, '\P{^Blk=  telugu}', "");
Expect(0, 3071, '\p{Blk=  telugu}', "");
Expect(1, 3071, '\p{^Blk=  telugu}', "");
Expect(1, 3071, '\P{Blk=  telugu}', "");
Expect(0, 3071, '\P{^Blk=  telugu}', "");
Error('\p{Is_Block=:=-	Telugu}');
Error('\P{Is_Block=:=-	Telugu}');
Expect(1, 3199, '\p{Is_Block=telugu}', "");
Expect(0, 3199, '\p{^Is_Block=telugu}', "");
Expect(0, 3199, '\P{Is_Block=telugu}', "");
Expect(1, 3199, '\P{^Is_Block=telugu}', "");
Expect(0, 3071, '\p{Is_Block=telugu}', "");
Expect(1, 3071, '\p{^Is_Block=telugu}', "");
Expect(1, 3071, '\P{Is_Block=telugu}', "");
Expect(0, 3071, '\P{^Is_Block=telugu}', "");
Expect(1, 3199, '\p{Is_Block=_Telugu}', "");
Expect(0, 3199, '\p{^Is_Block=_Telugu}', "");
Expect(0, 3199, '\P{Is_Block=_Telugu}', "");
Expect(1, 3199, '\P{^Is_Block=_Telugu}', "");
Expect(0, 3071, '\p{Is_Block=_Telugu}', "");
Expect(1, 3071, '\p{^Is_Block=_Telugu}', "");
Expect(1, 3071, '\P{Is_Block=_Telugu}', "");
Expect(0, 3071, '\P{^Is_Block=_Telugu}', "");
Error('\p{Is_Blk= /a/Telugu}');
Error('\P{Is_Blk= /a/Telugu}');
Expect(1, 3199, '\p{Is_Blk=telugu}', "");
Expect(0, 3199, '\p{^Is_Blk=telugu}', "");
Expect(0, 3199, '\P{Is_Blk=telugu}', "");
Expect(1, 3199, '\P{^Is_Blk=telugu}', "");
Expect(0, 3071, '\p{Is_Blk=telugu}', "");
Expect(1, 3071, '\p{^Is_Blk=telugu}', "");
Expect(1, 3071, '\P{Is_Blk=telugu}', "");
Expect(0, 3071, '\P{^Is_Blk=telugu}', "");
Expect(1, 3199, '\p{Is_Blk=_Telugu}', "");
Expect(0, 3199, '\p{^Is_Blk=_Telugu}', "");
Expect(0, 3199, '\P{Is_Blk=_Telugu}', "");
Expect(1, 3199, '\P{^Is_Blk=_Telugu}', "");
Expect(0, 3071, '\p{Is_Blk=_Telugu}', "");
Expect(1, 3071, '\p{^Is_Blk=_Telugu}', "");
Expect(1, 3071, '\P{Is_Blk=_Telugu}', "");
Expect(0, 3071, '\P{^Is_Blk=_Telugu}', "");
Error('\p{Block= yi:=radicals}');
Error('\P{Block= yi:=radicals}');
Expect(1, 42191, '\p{Block=yiradicals}', "");
Expect(0, 42191, '\p{^Block=yiradicals}', "");
Expect(0, 42191, '\P{Block=yiradicals}', "");
Expect(1, 42191, '\P{^Block=yiradicals}', "");
Expect(0, 42127, '\p{Block=yiradicals}', "");
Expect(1, 42127, '\p{^Block=yiradicals}', "");
Expect(1, 42127, '\P{Block=yiradicals}', "");
Expect(0, 42127, '\P{^Block=yiradicals}', "");
Expect(1, 42191, '\p{Block=		Yi_radicals}', "");
Expect(0, 42191, '\p{^Block=		Yi_radicals}', "");
Expect(0, 42191, '\P{Block=		Yi_radicals}', "");
Expect(1, 42191, '\P{^Block=		Yi_radicals}', "");
Expect(0, 42127, '\p{Block=		Yi_radicals}', "");
Expect(1, 42127, '\p{^Block=		Yi_radicals}', "");
Expect(1, 42127, '\P{Block=		Yi_radicals}', "");
Expect(0, 42127, '\P{^Block=		Yi_radicals}', "");
Error('\p{Blk:   := YIradicals}');
Error('\P{Blk:   := YIradicals}');
Expect(1, 42191, '\p{Blk=yiradicals}', "");
Expect(0, 42191, '\p{^Blk=yiradicals}', "");
Expect(0, 42191, '\P{Blk=yiradicals}', "");
Expect(1, 42191, '\P{^Blk=yiradicals}', "");
Expect(0, 42127, '\p{Blk=yiradicals}', "");
Expect(1, 42127, '\p{^Blk=yiradicals}', "");
Expect(1, 42127, '\P{Blk=yiradicals}', "");
Expect(0, 42127, '\P{^Blk=yiradicals}', "");
Expect(1, 42191, '\p{Blk=	-YI radicals}', "");
Expect(0, 42191, '\p{^Blk=	-YI radicals}', "");
Expect(0, 42191, '\P{Blk=	-YI radicals}', "");
Expect(1, 42191, '\P{^Blk=	-YI radicals}', "");
Expect(0, 42127, '\p{Blk=	-YI radicals}', "");
Expect(1, 42127, '\p{^Blk=	-YI radicals}', "");
Expect(1, 42127, '\P{Blk=	-YI radicals}', "");
Expect(0, 42127, '\P{^Blk=	-YI radicals}', "");
Error('\p{Is_Block=:=Yi Radicals}');
Error('\P{Is_Block=:=Yi Radicals}');
Expect(1, 42191, '\p{Is_Block=yiradicals}', "");
Expect(0, 42191, '\p{^Is_Block=yiradicals}', "");
Expect(0, 42191, '\P{Is_Block=yiradicals}', "");
Expect(1, 42191, '\P{^Is_Block=yiradicals}', "");
Expect(0, 42127, '\p{Is_Block=yiradicals}', "");
Expect(1, 42127, '\p{^Is_Block=yiradicals}', "");
Expect(1, 42127, '\P{Is_Block=yiradicals}', "");
Expect(0, 42127, '\P{^Is_Block=yiradicals}', "");
Expect(1, 42191, '\p{Is_Block=	yi	RADICALS}', "");
Expect(0, 42191, '\p{^Is_Block=	yi	RADICALS}', "");
Expect(0, 42191, '\P{Is_Block=	yi	RADICALS}', "");
Expect(1, 42191, '\P{^Is_Block=	yi	RADICALS}', "");
Expect(0, 42127, '\p{Is_Block=	yi	RADICALS}', "");
Expect(1, 42127, '\p{^Is_Block=	yi	RADICALS}', "");
Expect(1, 42127, '\P{Is_Block=	yi	RADICALS}', "");
Expect(0, 42127, '\P{^Is_Block=	yi	RADICALS}', "");
Error('\p{Is_Blk=/a/yi-radicals}');
Error('\P{Is_Blk=/a/yi-radicals}');
Expect(1, 42191, '\p{Is_Blk=yiradicals}', "");
Expect(0, 42191, '\p{^Is_Blk=yiradicals}', "");
Expect(0, 42191, '\P{Is_Blk=yiradicals}', "");
Expect(1, 42191, '\P{^Is_Blk=yiradicals}', "");
Expect(0, 42127, '\p{Is_Blk=yiradicals}', "");
Expect(1, 42127, '\p{^Is_Blk=yiradicals}', "");
Expect(1, 42127, '\P{Is_Blk=yiradicals}', "");
Expect(0, 42127, '\P{^Is_Blk=yiradicals}', "");
Expect(1, 42191, '\p{Is_Blk:  -yi radicals}', "");
Expect(0, 42191, '\p{^Is_Blk:  -yi radicals}', "");
Expect(0, 42191, '\P{Is_Blk:  -yi radicals}', "");
Expect(1, 42191, '\P{^Is_Blk:  -yi radicals}', "");
Expect(0, 42127, '\p{Is_Blk:  -yi radicals}', "");
Expect(1, 42127, '\p{^Is_Blk:  -yi radicals}', "");
Expect(1, 42127, '\P{Is_Blk:  -yi radicals}', "");
Expect(0, 42127, '\P{^Is_Blk:  -yi radicals}', "");
Error('\p{East_Asian_Width=	/a/wide}');
Error('\P{East_Asian_Width=	/a/wide}');
Expect(1, 4447, '\p{East_Asian_Width:wide}', "");
Expect(0, 4447, '\p{^East_Asian_Width:wide}', "");
Expect(0, 4447, '\P{East_Asian_Width:wide}', "");
Expect(1, 4447, '\P{^East_Asian_Width:wide}', "");
Expect(0, 4351, '\p{East_Asian_Width:wide}', "");
Expect(1, 4351, '\p{^East_Asian_Width:wide}', "");
Expect(1, 4351, '\P{East_Asian_Width:wide}', "");
Expect(0, 4351, '\P{^East_Asian_Width:wide}', "");
Expect(1, 4447, '\p{East_Asian_Width=	 WIDE}', "");
Expect(0, 4447, '\p{^East_Asian_Width=	 WIDE}', "");
Expect(0, 4447, '\P{East_Asian_Width=	 WIDE}', "");
Expect(1, 4447, '\P{^East_Asian_Width=	 WIDE}', "");
Expect(0, 4351, '\p{East_Asian_Width=	 WIDE}', "");
Expect(1, 4351, '\p{^East_Asian_Width=	 WIDE}', "");
Expect(1, 4351, '\P{East_Asian_Width=	 WIDE}', "");
Expect(0, 4351, '\P{^East_Asian_Width=	 WIDE}', "");
Error('\p{Ea:/a/  W}');
Error('\P{Ea:/a/  W}');
Expect(1, 4447, '\p{Ea=w}', "");
Expect(0, 4447, '\p{^Ea=w}', "");
Expect(0, 4447, '\P{Ea=w}', "");
Expect(1, 4447, '\P{^Ea=w}', "");
Expect(0, 4351, '\p{Ea=w}', "");
Expect(1, 4351, '\p{^Ea=w}', "");
Expect(1, 4351, '\P{Ea=w}', "");
Expect(0, 4351, '\P{^Ea=w}', "");
Expect(1, 4447, '\p{Ea=  W}', "");
Expect(0, 4447, '\p{^Ea=  W}', "");
Expect(0, 4447, '\P{Ea=  W}', "");
Expect(1, 4447, '\P{^Ea=  W}', "");
Expect(0, 4351, '\p{Ea=  W}', "");
Expect(1, 4351, '\p{^Ea=  W}', "");
Expect(1, 4351, '\P{Ea=  W}', "");
Expect(0, 4351, '\P{^Ea=  W}', "");
Error('\p{Is_East_Asian_Width=:=	Wide}');
Error('\P{Is_East_Asian_Width=:=	Wide}');
Expect(1, 4447, '\p{Is_East_Asian_Width=wide}', "");
Expect(0, 4447, '\p{^Is_East_Asian_Width=wide}', "");
Expect(0, 4447, '\P{Is_East_Asian_Width=wide}', "");
Expect(1, 4447, '\P{^Is_East_Asian_Width=wide}', "");
Expect(0, 4351, '\p{Is_East_Asian_Width=wide}', "");
Expect(1, 4351, '\p{^Is_East_Asian_Width=wide}', "");
Expect(1, 4351, '\P{Is_East_Asian_Width=wide}', "");
Expect(0, 4351, '\P{^Is_East_Asian_Width=wide}', "");
Expect(1, 4447, '\p{Is_East_Asian_Width:	 Wide}', "");
Expect(0, 4447, '\p{^Is_East_Asian_Width:	 Wide}', "");
Expect(0, 4447, '\P{Is_East_Asian_Width:	 Wide}', "");
Expect(1, 4447, '\P{^Is_East_Asian_Width:	 Wide}', "");
Expect(0, 4351, '\p{Is_East_Asian_Width:	 Wide}', "");
Expect(1, 4351, '\p{^Is_East_Asian_Width:	 Wide}', "");
Expect(1, 4351, '\P{Is_East_Asian_Width:	 Wide}', "");
Expect(0, 4351, '\P{^Is_East_Asian_Width:	 Wide}', "");
Error('\p{Is_Ea=/a/w}');
Error('\P{Is_Ea=/a/w}');
Expect(1, 4447, '\p{Is_Ea: w}', "");
Expect(0, 4447, '\p{^Is_Ea: w}', "");
Expect(0, 4447, '\P{Is_Ea: w}', "");
Expect(1, 4447, '\P{^Is_Ea: w}', "");
Expect(0, 4351, '\p{Is_Ea: w}', "");
Expect(1, 4351, '\p{^Is_Ea: w}', "");
Expect(1, 4351, '\P{Is_Ea: w}', "");
Expect(0, 4351, '\P{^Is_Ea: w}', "");
Expect(1, 4447, '\p{Is_Ea=_-W}', "");
Expect(0, 4447, '\p{^Is_Ea=_-W}', "");
Expect(0, 4447, '\P{Is_Ea=_-W}', "");
Expect(1, 4447, '\P{^Is_Ea=_-W}', "");
Expect(0, 4351, '\p{Is_Ea=_-W}', "");
Expect(1, 4351, '\p{^Is_Ea=_-W}', "");
Expect(1, 4351, '\P{Is_Ea=_-W}', "");
Expect(0, 4351, '\P{^Is_Ea=_-W}', "");
Error('\p{East_Asian_Width=-FULLWIDTH:=}');
Error('\P{East_Asian_Width=-FULLWIDTH:=}');
Expect(1, 12288, '\p{East_Asian_Width=fullwidth}', "");
Expect(0, 12288, '\p{^East_Asian_Width=fullwidth}', "");
Expect(0, 12288, '\P{East_Asian_Width=fullwidth}', "");
Expect(1, 12288, '\P{^East_Asian_Width=fullwidth}', "");
Expect(0, 12287, '\p{East_Asian_Width=fullwidth}', "");
Expect(1, 12287, '\p{^East_Asian_Width=fullwidth}', "");
Expect(1, 12287, '\P{East_Asian_Width=fullwidth}', "");
Expect(0, 12287, '\P{^East_Asian_Width=fullwidth}', "");
Expect(1, 12288, '\p{East_Asian_Width= Fullwidth}', "");
Expect(0, 12288, '\p{^East_Asian_Width= Fullwidth}', "");
Expect(0, 12288, '\P{East_Asian_Width= Fullwidth}', "");
Expect(1, 12288, '\P{^East_Asian_Width= Fullwidth}', "");
Expect(0, 12287, '\p{East_Asian_Width= Fullwidth}', "");
Expect(1, 12287, '\p{^East_Asian_Width= Fullwidth}', "");
Expect(1, 12287, '\P{East_Asian_Width= Fullwidth}', "");
Expect(0, 12287, '\P{^East_Asian_Width= Fullwidth}', "");
Error('\p{Ea:/a/F}');
Error('\P{Ea:/a/F}');
Expect(1, 12288, '\p{Ea: f}', "");
Expect(0, 12288, '\p{^Ea: f}', "");
Expect(0, 12288, '\P{Ea: f}', "");
Expect(1, 12288, '\P{^Ea: f}', "");
Expect(0, 12287, '\p{Ea: f}', "");
Expect(1, 12287, '\p{^Ea: f}', "");
Expect(1, 12287, '\P{Ea: f}', "");
Expect(0, 12287, '\P{^Ea: f}', "");
Expect(1, 12288, '\p{Ea=	_F}', "");
Expect(0, 12288, '\p{^Ea=	_F}', "");
Expect(0, 12288, '\P{Ea=	_F}', "");
Expect(1, 12288, '\P{^Ea=	_F}', "");
Expect(0, 12287, '\p{Ea=	_F}', "");
Expect(1, 12287, '\p{^Ea=	_F}', "");
Expect(1, 12287, '\P{Ea=	_F}', "");
Expect(0, 12287, '\P{^Ea=	_F}', "");
Error('\p{Is_East_Asian_Width=  Fullwidth/a/}');
Error('\P{Is_East_Asian_Width=  Fullwidth/a/}');
Expect(1, 12288, '\p{Is_East_Asian_Width=fullwidth}', "");
Expect(0, 12288, '\p{^Is_East_Asian_Width=fullwidth}', "");
Expect(0, 12288, '\P{Is_East_Asian_Width=fullwidth}', "");
Expect(1, 12288, '\P{^Is_East_Asian_Width=fullwidth}', "");
Expect(0, 12287, '\p{Is_East_Asian_Width=fullwidth}', "");
Expect(1, 12287, '\p{^Is_East_Asian_Width=fullwidth}', "");
Expect(1, 12287, '\P{Is_East_Asian_Width=fullwidth}', "");
Expect(0, 12287, '\P{^Is_East_Asian_Width=fullwidth}', "");
Expect(1, 12288, '\p{Is_East_Asian_Width=	Fullwidth}', "");
Expect(0, 12288, '\p{^Is_East_Asian_Width=	Fullwidth}', "");
Expect(0, 12288, '\P{Is_East_Asian_Width=	Fullwidth}', "");
Expect(1, 12288, '\P{^Is_East_Asian_Width=	Fullwidth}', "");
Expect(0, 12287, '\p{Is_East_Asian_Width=	Fullwidth}', "");
Expect(1, 12287, '\p{^Is_East_Asian_Width=	Fullwidth}', "");
Expect(1, 12287, '\P{Is_East_Asian_Width=	Fullwidth}', "");
Expect(0, 12287, '\P{^Is_East_Asian_Width=	Fullwidth}', "");
Error('\p{Is_Ea=- f:=}');
Error('\P{Is_Ea=- f:=}');
Expect(1, 12288, '\p{Is_Ea=f}', "");
Expect(0, 12288, '\p{^Is_Ea=f}', "");
Expect(0, 12288, '\P{Is_Ea=f}', "");
Expect(1, 12288, '\P{^Is_Ea=f}', "");
Expect(0, 12287, '\p{Is_Ea=f}', "");
Expect(1, 12287, '\p{^Is_Ea=f}', "");
Expect(1, 12287, '\P{Is_Ea=f}', "");
Expect(0, 12287, '\P{^Is_Ea=f}', "");
Expect(1, 12288, '\p{Is_Ea=--F}', "");
Expect(0, 12288, '\p{^Is_Ea=--F}', "");
Expect(0, 12288, '\P{Is_Ea=--F}', "");
Expect(1, 12288, '\P{^Is_Ea=--F}', "");
Expect(0, 12287, '\p{Is_Ea=--F}', "");
Expect(1, 12287, '\p{^Is_Ea=--F}', "");
Expect(1, 12287, '\P{Is_Ea=--F}', "");
Expect(0, 12287, '\P{^Is_Ea=--F}', "");
Error('\p{East_Asian_Width=		Ambiguous:=}');
Error('\P{East_Asian_Width=		Ambiguous:=}');
Expect(1, 161, '\p{East_Asian_Width=ambiguous}', "");
Expect(0, 161, '\p{^East_Asian_Width=ambiguous}', "");
Expect(0, 161, '\P{East_Asian_Width=ambiguous}', "");
Expect(1, 161, '\P{^East_Asian_Width=ambiguous}', "");
Expect(0, 160, '\p{East_Asian_Width=ambiguous}', "");
Expect(1, 160, '\p{^East_Asian_Width=ambiguous}', "");
Expect(1, 160, '\P{East_Asian_Width=ambiguous}', "");
Expect(0, 160, '\P{^East_Asian_Width=ambiguous}', "");
Expect(1, 161, '\p{East_Asian_Width=	-ambiguous}', "");
Expect(0, 161, '\p{^East_Asian_Width=	-ambiguous}', "");
Expect(0, 161, '\P{East_Asian_Width=	-ambiguous}', "");
Expect(1, 161, '\P{^East_Asian_Width=	-ambiguous}', "");
Expect(0, 160, '\p{East_Asian_Width=	-ambiguous}', "");
Expect(1, 160, '\p{^East_Asian_Width=	-ambiguous}', "");
Expect(1, 160, '\P{East_Asian_Width=	-ambiguous}', "");
Expect(0, 160, '\P{^East_Asian_Width=	-ambiguous}', "");
Error('\p{Ea=	_A/a/}');
Error('\P{Ea=	_A/a/}');
Expect(1, 161, '\p{Ea=a}', "");
Expect(0, 161, '\p{^Ea=a}', "");
Expect(0, 161, '\P{Ea=a}', "");
Expect(1, 161, '\P{^Ea=a}', "");
Expect(0, 160, '\p{Ea=a}', "");
Expect(1, 160, '\p{^Ea=a}', "");
Expect(1, 160, '\P{Ea=a}', "");
Expect(0, 160, '\P{^Ea=a}', "");
Expect(1, 161, '\p{Ea= A}', "");
Expect(0, 161, '\p{^Ea= A}', "");
Expect(0, 161, '\P{Ea= A}', "");
Expect(1, 161, '\P{^Ea= A}', "");
Expect(0, 160, '\p{Ea= A}', "");
Expect(1, 160, '\p{^Ea= A}', "");
Expect(1, 160, '\P{Ea= A}', "");
Expect(0, 160, '\P{^Ea= A}', "");
Error('\p{Is_East_Asian_Width:	 _ambiguous:=}');
Error('\P{Is_East_Asian_Width:	 _ambiguous:=}');
Expect(1, 161, '\p{Is_East_Asian_Width=ambiguous}', "");
Expect(0, 161, '\p{^Is_East_Asian_Width=ambiguous}', "");
Expect(0, 161, '\P{Is_East_Asian_Width=ambiguous}', "");
Expect(1, 161, '\P{^Is_East_Asian_Width=ambiguous}', "");
Expect(0, 160, '\p{Is_East_Asian_Width=ambiguous}', "");
Expect(1, 160, '\p{^Is_East_Asian_Width=ambiguous}', "");
Expect(1, 160, '\P{Is_East_Asian_Width=ambiguous}', "");
Expect(0, 160, '\P{^Is_East_Asian_Width=ambiguous}', "");
Expect(1, 161, '\p{Is_East_Asian_Width=	ambiguous}', "");
Expect(0, 161, '\p{^Is_East_Asian_Width=	ambiguous}', "");
Expect(0, 161, '\P{Is_East_Asian_Width=	ambiguous}', "");
Expect(1, 161, '\P{^Is_East_Asian_Width=	ambiguous}', "");
Expect(0, 160, '\p{Is_East_Asian_Width=	ambiguous}', "");
Expect(1, 160, '\p{^Is_East_Asian_Width=	ambiguous}', "");
Expect(1, 160, '\P{Is_East_Asian_Width=	ambiguous}', "");
Expect(0, 160, '\P{^Is_East_Asian_Width=	ambiguous}', "");
Error('\p{Is_Ea=_:=A}');
Error('\P{Is_Ea=_:=A}');
Expect(1, 161, '\p{Is_Ea=a}', "");
Expect(0, 161, '\p{^Is_Ea=a}', "");
Expect(0, 161, '\P{Is_Ea=a}', "");
Expect(1, 161, '\P{^Is_Ea=a}', "");
Expect(0, 160, '\p{Is_Ea=a}', "");
Expect(1, 160, '\p{^Is_Ea=a}', "");
Expect(1, 160, '\P{Is_Ea=a}', "");
Expect(0, 160, '\P{^Is_Ea=a}', "");
Expect(1, 161, '\p{Is_Ea=--a}', "");
Expect(0, 161, '\p{^Is_Ea=--a}', "");
Expect(0, 161, '\P{Is_Ea=--a}', "");
Expect(1, 161, '\P{^Is_Ea=--a}', "");
Expect(0, 160, '\p{Is_Ea=--a}', "");
Expect(1, 160, '\p{^Is_Ea=--a}', "");
Expect(1, 160, '\P{Is_Ea=--a}', "");
Expect(0, 160, '\P{^Is_Ea=--a}', "");
Error('\p{East_Asian_Width=	:=narrow}');
Error('\P{East_Asian_Width=	:=narrow}');
Expect(1, 126, '\p{East_Asian_Width=narrow}', "");
Expect(0, 126, '\p{^East_Asian_Width=narrow}', "");
Expect(0, 126, '\P{East_Asian_Width=narrow}', "");
Expect(1, 126, '\P{^East_Asian_Width=narrow}', "");
Expect(0, 31, '\p{East_Asian_Width=narrow}', "");
Expect(1, 31, '\p{^East_Asian_Width=narrow}', "");
Expect(1, 31, '\P{East_Asian_Width=narrow}', "");
Expect(0, 31, '\P{^East_Asian_Width=narrow}', "");
Expect(1, 126, '\p{East_Asian_Width=_	narrow}', "");
Expect(0, 126, '\p{^East_Asian_Width=_	narrow}', "");
Expect(0, 126, '\P{East_Asian_Width=_	narrow}', "");
Expect(1, 126, '\P{^East_Asian_Width=_	narrow}', "");
Expect(0, 31, '\p{East_Asian_Width=_	narrow}', "");
Expect(1, 31, '\p{^East_Asian_Width=_	narrow}', "");
Expect(1, 31, '\P{East_Asian_Width=_	narrow}', "");
Expect(0, 31, '\P{^East_Asian_Width=_	narrow}', "");
Error('\p{Ea=/a/-	na}');
Error('\P{Ea=/a/-	na}');
Expect(1, 126, '\p{Ea=na}', "");
Expect(0, 126, '\p{^Ea=na}', "");
Expect(0, 126, '\P{Ea=na}', "");
Expect(1, 126, '\P{^Ea=na}', "");
Expect(0, 31, '\p{Ea=na}', "");
Expect(1, 31, '\p{^Ea=na}', "");
Expect(1, 31, '\P{Ea=na}', "");
Expect(0, 31, '\P{^Ea=na}', "");
Expect(1, 126, '\p{Ea=  Na}', "");
Expect(0, 126, '\p{^Ea=  Na}', "");
Expect(0, 126, '\P{Ea=  Na}', "");
Expect(1, 126, '\P{^Ea=  Na}', "");
Expect(0, 31, '\p{Ea=  Na}', "");
Expect(1, 31, '\p{^Ea=  Na}', "");
Expect(1, 31, '\P{Ea=  Na}', "");
Expect(0, 31, '\P{^Ea=  Na}', "");
Error('\p{Is_East_Asian_Width=--narrow/a/}');
Error('\P{Is_East_Asian_Width=--narrow/a/}');
Expect(1, 126, '\p{Is_East_Asian_Width=narrow}', "");
Expect(0, 126, '\p{^Is_East_Asian_Width=narrow}', "");
Expect(0, 126, '\P{Is_East_Asian_Width=narrow}', "");
Expect(1, 126, '\P{^Is_East_Asian_Width=narrow}', "");
Expect(0, 31, '\p{Is_East_Asian_Width=narrow}', "");
Expect(1, 31, '\p{^Is_East_Asian_Width=narrow}', "");
Expect(1, 31, '\P{Is_East_Asian_Width=narrow}', "");
Expect(0, 31, '\P{^Is_East_Asian_Width=narrow}', "");
Expect(1, 126, '\p{Is_East_Asian_Width=	 Narrow}', "");
Expect(0, 126, '\p{^Is_East_Asian_Width=	 Narrow}', "");
Expect(0, 126, '\P{Is_East_Asian_Width=	 Narrow}', "");
Expect(1, 126, '\P{^Is_East_Asian_Width=	 Narrow}', "");
Expect(0, 31, '\p{Is_East_Asian_Width=	 Narrow}', "");
Expect(1, 31, '\p{^Is_East_Asian_Width=	 Narrow}', "");
Expect(1, 31, '\P{Is_East_Asian_Width=	 Narrow}', "");
Expect(0, 31, '\P{^Is_East_Asian_Width=	 Narrow}', "");
Error('\p{Is_Ea:   :=-	Na}');
Error('\P{Is_Ea:   :=-	Na}');
Expect(1, 126, '\p{Is_Ea=na}', "");
Expect(0, 126, '\p{^Is_Ea=na}', "");
Expect(0, 126, '\P{Is_Ea=na}', "");
Expect(1, 126, '\P{^Is_Ea=na}', "");
Expect(0, 31, '\p{Is_Ea=na}', "");
Expect(1, 31, '\p{^Is_Ea=na}', "");
Expect(1, 31, '\P{Is_Ea=na}', "");
Expect(0, 31, '\P{^Is_Ea=na}', "");
Expect(1, 126, '\p{Is_Ea= 	na}', "");
Expect(0, 126, '\p{^Is_Ea= 	na}', "");
Expect(0, 126, '\P{Is_Ea= 	na}', "");
Expect(1, 126, '\P{^Is_Ea= 	na}', "");
Expect(0, 31, '\p{Is_Ea= 	na}', "");
Expect(1, 31, '\p{^Is_Ea= 	na}', "");
Expect(1, 31, '\P{Is_Ea= 	na}', "");
Expect(0, 31, '\P{^Is_Ea= 	na}', "");
Error('\p{East_Asian_Width=_:=neutral}');
Error('\P{East_Asian_Width=_:=neutral}');
Expect(1, 31, '\p{East_Asian_Width:	neutral}', "");
Expect(0, 31, '\p{^East_Asian_Width:	neutral}', "");
Expect(0, 31, '\P{East_Asian_Width:	neutral}', "");
Expect(1, 31, '\P{^East_Asian_Width:	neutral}', "");
Expect(0, 126, '\p{East_Asian_Width:	neutral}', "");
Expect(1, 126, '\p{^East_Asian_Width:	neutral}', "");
Expect(1, 126, '\P{East_Asian_Width:	neutral}', "");
Expect(0, 126, '\P{^East_Asian_Width:	neutral}', "");
Expect(1, 31, '\p{East_Asian_Width=-	NEUTRAL}', "");
Expect(0, 31, '\p{^East_Asian_Width=-	NEUTRAL}', "");
Expect(0, 31, '\P{East_Asian_Width=-	NEUTRAL}', "");
Expect(1, 31, '\P{^East_Asian_Width=-	NEUTRAL}', "");
Expect(0, 126, '\p{East_Asian_Width=-	NEUTRAL}', "");
Expect(1, 126, '\p{^East_Asian_Width=-	NEUTRAL}', "");
Expect(1, 126, '\P{East_Asian_Width=-	NEUTRAL}', "");
Expect(0, 126, '\P{^East_Asian_Width=-	NEUTRAL}', "");
Error('\p{Ea=:=		N}');
Error('\P{Ea=:=		N}');
Expect(1, 31, '\p{Ea=n}', "");
Expect(0, 31, '\p{^Ea=n}', "");
Expect(0, 31, '\P{Ea=n}', "");
Expect(1, 31, '\P{^Ea=n}', "");
Expect(0, 126, '\p{Ea=n}', "");
Expect(1, 126, '\p{^Ea=n}', "");
Expect(1, 126, '\P{Ea=n}', "");
Expect(0, 126, '\P{^Ea=n}', "");
Expect(1, 31, '\p{Ea=	_N}', "");
Expect(0, 31, '\p{^Ea=	_N}', "");
Expect(0, 31, '\P{Ea=	_N}', "");
Expect(1, 31, '\P{^Ea=	_N}', "");
Expect(0, 126, '\p{Ea=	_N}', "");
Expect(1, 126, '\p{^Ea=	_N}', "");
Expect(1, 126, '\P{Ea=	_N}', "");
Expect(0, 126, '\P{^Ea=	_N}', "");
Error('\p{Is_East_Asian_Width=_Neutral:=}');
Error('\P{Is_East_Asian_Width=_Neutral:=}');
Expect(1, 31, '\p{Is_East_Asian_Width:	neutral}', "");
Expect(0, 31, '\p{^Is_East_Asian_Width:	neutral}', "");
Expect(0, 31, '\P{Is_East_Asian_Width:	neutral}', "");
Expect(1, 31, '\P{^Is_East_Asian_Width:	neutral}', "");
Expect(0, 126, '\p{Is_East_Asian_Width:	neutral}', "");
Expect(1, 126, '\p{^Is_East_Asian_Width:	neutral}', "");
Expect(1, 126, '\P{Is_East_Asian_Width:	neutral}', "");
Expect(0, 126, '\P{^Is_East_Asian_Width:	neutral}', "");
Expect(1, 31, '\p{Is_East_Asian_Width=--NEUTRAL}', "");
Expect(0, 31, '\p{^Is_East_Asian_Width=--NEUTRAL}', "");
Expect(0, 31, '\P{Is_East_Asian_Width=--NEUTRAL}', "");
Expect(1, 31, '\P{^Is_East_Asian_Width=--NEUTRAL}', "");
Expect(0, 126, '\p{Is_East_Asian_Width=--NEUTRAL}', "");
Expect(1, 126, '\p{^Is_East_Asian_Width=--NEUTRAL}', "");
Expect(1, 126, '\P{Is_East_Asian_Width=--NEUTRAL}', "");
Expect(0, 126, '\P{^Is_East_Asian_Width=--NEUTRAL}', "");
Error('\p{Is_Ea=_-n:=}');
Error('\P{Is_Ea=_-n:=}');
Expect(1, 31, '\p{Is_Ea=n}', "");
Expect(0, 31, '\p{^Is_Ea=n}', "");
Expect(0, 31, '\P{Is_Ea=n}', "");
Expect(1, 31, '\P{^Is_Ea=n}', "");
Expect(0, 126, '\p{Is_Ea=n}', "");
Expect(1, 126, '\p{^Is_Ea=n}', "");
Expect(1, 126, '\P{Is_Ea=n}', "");
Expect(0, 126, '\P{^Is_Ea=n}', "");
Expect(1, 31, '\p{Is_Ea=_-n}', "");
Expect(0, 31, '\p{^Is_Ea=_-n}', "");
Expect(0, 31, '\P{Is_Ea=_-n}', "");
Expect(1, 31, '\P{^Is_Ea=_-n}', "");
Expect(0, 126, '\p{Is_Ea=_-n}', "");
Expect(1, 126, '\p{^Is_Ea=_-n}', "");
Expect(1, 126, '\P{Is_Ea=_-n}', "");
Expect(0, 126, '\P{^Is_Ea=_-n}', "");
Error('\p{East_Asian_Width=__Halfwidth/a/}');
Error('\P{East_Asian_Width=__Halfwidth/a/}');
Expect(1, 8361, '\p{East_Asian_Width=halfwidth}', "");
Expect(0, 8361, '\p{^East_Asian_Width=halfwidth}', "");
Expect(0, 8361, '\P{East_Asian_Width=halfwidth}', "");
Expect(1, 8361, '\P{^East_Asian_Width=halfwidth}', "");
Expect(0, 8360, '\p{East_Asian_Width=halfwidth}', "");
Expect(1, 8360, '\p{^East_Asian_Width=halfwidth}', "");
Expect(1, 8360, '\P{East_Asian_Width=halfwidth}', "");
Expect(0, 8360, '\P{^East_Asian_Width=halfwidth}', "");
Expect(1, 8361, '\p{East_Asian_Width= Halfwidth}', "");
Expect(0, 8361, '\p{^East_Asian_Width= Halfwidth}', "");
Expect(0, 8361, '\P{East_Asian_Width= Halfwidth}', "");
Expect(1, 8361, '\P{^East_Asian_Width= Halfwidth}', "");
Expect(0, 8360, '\p{East_Asian_Width= Halfwidth}', "");
Expect(1, 8360, '\p{^East_Asian_Width= Halfwidth}', "");
Expect(1, 8360, '\P{East_Asian_Width= Halfwidth}', "");
Expect(0, 8360, '\P{^East_Asian_Width= Halfwidth}', "");
Error('\p{Ea=/a/--h}');
Error('\P{Ea=/a/--h}');
Expect(1, 8361, '\p{Ea=h}', "");
Expect(0, 8361, '\p{^Ea=h}', "");
Expect(0, 8361, '\P{Ea=h}', "");
Expect(1, 8361, '\P{^Ea=h}', "");
Expect(0, 8360, '\p{Ea=h}', "");
Expect(1, 8360, '\p{^Ea=h}', "");
Expect(1, 8360, '\P{Ea=h}', "");
Expect(0, 8360, '\P{^Ea=h}', "");
Expect(1, 8361, '\p{Ea=_H}', "");
Expect(0, 8361, '\p{^Ea=_H}', "");
Expect(0, 8361, '\P{Ea=_H}', "");
Expect(1, 8361, '\P{^Ea=_H}', "");
Expect(0, 8360, '\p{Ea=_H}', "");
Expect(1, 8360, '\p{^Ea=_H}', "");
Expect(1, 8360, '\P{Ea=_H}', "");
Expect(0, 8360, '\P{^Ea=_H}', "");
Error('\p{Is_East_Asian_Width=/a/ -Halfwidth}');
Error('\P{Is_East_Asian_Width=/a/ -Halfwidth}');
Expect(1, 8361, '\p{Is_East_Asian_Width=halfwidth}', "");
Expect(0, 8361, '\p{^Is_East_Asian_Width=halfwidth}', "");
Expect(0, 8361, '\P{Is_East_Asian_Width=halfwidth}', "");
Expect(1, 8361, '\P{^Is_East_Asian_Width=halfwidth}', "");
Expect(0, 8360, '\p{Is_East_Asian_Width=halfwidth}', "");
Expect(1, 8360, '\p{^Is_East_Asian_Width=halfwidth}', "");
Expect(1, 8360, '\P{Is_East_Asian_Width=halfwidth}', "");
Expect(0, 8360, '\P{^Is_East_Asian_Width=halfwidth}', "");
Expect(1, 8361, '\p{Is_East_Asian_Width=_	Halfwidth}', "");
Expect(0, 8361, '\p{^Is_East_Asian_Width=_	Halfwidth}', "");
Expect(0, 8361, '\P{Is_East_Asian_Width=_	Halfwidth}', "");
Expect(1, 8361, '\P{^Is_East_Asian_Width=_	Halfwidth}', "");
Expect(0, 8360, '\p{Is_East_Asian_Width=_	Halfwidth}', "");
Expect(1, 8360, '\p{^Is_East_Asian_Width=_	Halfwidth}', "");
Expect(1, 8360, '\P{Is_East_Asian_Width=_	Halfwidth}', "");
Expect(0, 8360, '\P{^Is_East_Asian_Width=_	Halfwidth}', "");
Error('\p{Is_Ea=/a/-h}');
Error('\P{Is_Ea=/a/-h}');
Expect(1, 8361, '\p{Is_Ea=h}', "");
Expect(0, 8361, '\p{^Is_Ea=h}', "");
Expect(0, 8361, '\P{Is_Ea=h}', "");
Expect(1, 8361, '\P{^Is_Ea=h}', "");
Expect(0, 8360, '\p{Is_Ea=h}', "");
Expect(1, 8360, '\p{^Is_Ea=h}', "");
Expect(1, 8360, '\P{Is_Ea=h}', "");
Expect(0, 8360, '\P{^Is_Ea=h}', "");
Expect(1, 8361, '\p{Is_Ea=	 h}', "");
Expect(0, 8361, '\p{^Is_Ea=	 h}', "");
Expect(0, 8361, '\P{Is_Ea=	 h}', "");
Expect(1, 8361, '\P{^Is_Ea=	 h}', "");
Expect(0, 8360, '\p{Is_Ea=	 h}', "");
Expect(1, 8360, '\p{^Is_Ea=	 h}', "");
Expect(1, 8360, '\P{Is_Ea=	 h}', "");
Expect(0, 8360, '\P{^Is_Ea=	 h}', "");
Error('\p{ASCII_Hex_Digit=--YES/a/}');
Error('\P{ASCII_Hex_Digit=--YES/a/}');
Expect(1, 57, '\p{ASCII_Hex_Digit=yes}', "");
Expect(0, 57, '\p{^ASCII_Hex_Digit=yes}', "");
Expect(0, 57, '\P{ASCII_Hex_Digit=yes}', "");
Expect(1, 57, '\P{^ASCII_Hex_Digit=yes}', "");
Expect(0, 47, '\p{ASCII_Hex_Digit=yes}', "");
Expect(1, 47, '\p{^ASCII_Hex_Digit=yes}', "");
Expect(1, 47, '\P{ASCII_Hex_Digit=yes}', "");
Expect(0, 47, '\P{^ASCII_Hex_Digit=yes}', "");
Expect(1, 57, '\p{ASCII_Hex_Digit=-_Yes}', "");
Expect(0, 57, '\p{^ASCII_Hex_Digit=-_Yes}', "");
Expect(0, 57, '\P{ASCII_Hex_Digit=-_Yes}', "");
Expect(1, 57, '\P{^ASCII_Hex_Digit=-_Yes}', "");
Expect(0, 47, '\p{ASCII_Hex_Digit=-_Yes}', "");
Expect(1, 47, '\p{^ASCII_Hex_Digit=-_Yes}', "");
Expect(1, 47, '\P{ASCII_Hex_Digit=-_Yes}', "");
Expect(0, 47, '\P{^ASCII_Hex_Digit=-_Yes}', "");
Error('\p{AHex=- Y/a/}');
Error('\P{AHex=- Y/a/}');
Expect(1, 57, '\p{AHex=y}', "");
Expect(0, 57, '\p{^AHex=y}', "");
Expect(0, 57, '\P{AHex=y}', "");
Expect(1, 57, '\P{^AHex=y}', "");
Expect(0, 47, '\p{AHex=y}', "");
Expect(1, 47, '\p{^AHex=y}', "");
Expect(1, 47, '\P{AHex=y}', "");
Expect(0, 47, '\P{^AHex=y}', "");
Expect(1, 57, '\p{AHex=- Y}', "");
Expect(0, 57, '\p{^AHex=- Y}', "");
Expect(0, 57, '\P{AHex=- Y}', "");
Expect(1, 57, '\P{^AHex=- Y}', "");
Expect(0, 47, '\p{AHex=- Y}', "");
Expect(1, 47, '\p{^AHex=- Y}', "");
Expect(1, 47, '\P{AHex=- Y}', "");
Expect(0, 47, '\P{^AHex=- Y}', "");
Error('\p{Is_ASCII_Hex_Digit= /a/T}');
Error('\P{Is_ASCII_Hex_Digit= /a/T}');
Expect(1, 57, '\p{Is_ASCII_Hex_Digit:	t}', "");
Expect(0, 57, '\p{^Is_ASCII_Hex_Digit:	t}', "");
Expect(0, 57, '\P{Is_ASCII_Hex_Digit:	t}', "");
Expect(1, 57, '\P{^Is_ASCII_Hex_Digit:	t}', "");
Expect(0, 47, '\p{Is_ASCII_Hex_Digit:	t}', "");
Expect(1, 47, '\p{^Is_ASCII_Hex_Digit:	t}', "");
Expect(1, 47, '\P{Is_ASCII_Hex_Digit:	t}', "");
Expect(0, 47, '\P{^Is_ASCII_Hex_Digit:	t}', "");
Expect(1, 57, '\p{Is_ASCII_Hex_Digit=		T}', "");
Expect(0, 57, '\p{^Is_ASCII_Hex_Digit=		T}', "");
Expect(0, 57, '\P{Is_ASCII_Hex_Digit=		T}', "");
Expect(1, 57, '\P{^Is_ASCII_Hex_Digit=		T}', "");
Expect(0, 47, '\p{Is_ASCII_Hex_Digit=		T}', "");
Expect(1, 47, '\p{^Is_ASCII_Hex_Digit=		T}', "");
Expect(1, 47, '\P{Is_ASCII_Hex_Digit=		T}', "");
Expect(0, 47, '\P{^Is_ASCII_Hex_Digit=		T}', "");
Error('\p{Is_AHex=__True/a/}');
Error('\P{Is_AHex=__True/a/}');
Expect(1, 57, '\p{Is_AHex=true}', "");
Expect(0, 57, '\p{^Is_AHex=true}', "");
Expect(0, 57, '\P{Is_AHex=true}', "");
Expect(1, 57, '\P{^Is_AHex=true}', "");
Expect(0, 47, '\p{Is_AHex=true}', "");
Expect(1, 47, '\p{^Is_AHex=true}', "");
Expect(1, 47, '\P{Is_AHex=true}', "");
Expect(0, 47, '\P{^Is_AHex=true}', "");
Expect(1, 57, '\p{Is_AHex=	True}', "");
Expect(0, 57, '\p{^Is_AHex=	True}', "");
Expect(0, 57, '\P{Is_AHex=	True}', "");
Expect(1, 57, '\P{^Is_AHex=	True}', "");
Expect(0, 47, '\p{Is_AHex=	True}', "");
Expect(1, 47, '\p{^Is_AHex=	True}', "");
Expect(1, 47, '\P{Is_AHex=	True}', "");
Expect(0, 47, '\P{^Is_AHex=	True}', "");
Error('\p{ASCII_Hex_Digit=-:=no}');
Error('\P{ASCII_Hex_Digit=-:=no}');
Expect(1, 47, '\p{ASCII_Hex_Digit=no}', "");
Expect(0, 47, '\p{^ASCII_Hex_Digit=no}', "");
Expect(0, 47, '\P{ASCII_Hex_Digit=no}', "");
Expect(1, 47, '\P{^ASCII_Hex_Digit=no}', "");
Expect(0, 57, '\p{ASCII_Hex_Digit=no}', "");
Expect(1, 57, '\p{^ASCII_Hex_Digit=no}', "");
Expect(1, 57, '\P{ASCII_Hex_Digit=no}', "");
Expect(0, 57, '\P{^ASCII_Hex_Digit=no}', "");
Expect(1, 47, '\p{ASCII_Hex_Digit:  _No}', "");
Expect(0, 47, '\p{^ASCII_Hex_Digit:  _No}', "");
Expect(0, 47, '\P{ASCII_Hex_Digit:  _No}', "");
Expect(1, 47, '\P{^ASCII_Hex_Digit:  _No}', "");
Expect(0, 57, '\p{ASCII_Hex_Digit:  _No}', "");
Expect(1, 57, '\p{^ASCII_Hex_Digit:  _No}', "");
Expect(1, 57, '\P{ASCII_Hex_Digit:  _No}', "");
Expect(0, 57, '\P{^ASCII_Hex_Digit:  _No}', "");
Error('\p{AHex=-_n/a/}');
Error('\P{AHex=-_n/a/}');
Expect(1, 47, '\p{AHex=n}', "");
Expect(0, 47, '\p{^AHex=n}', "");
Expect(0, 47, '\P{AHex=n}', "");
Expect(1, 47, '\P{^AHex=n}', "");
Expect(0, 57, '\p{AHex=n}', "");
Expect(1, 57, '\p{^AHex=n}', "");
Expect(1, 57, '\P{AHex=n}', "");
Expect(0, 57, '\P{^AHex=n}', "");
Expect(1, 47, '\p{AHex=-_N}', "");
Expect(0, 47, '\p{^AHex=-_N}', "");
Expect(0, 47, '\P{AHex=-_N}', "");
Expect(1, 47, '\P{^AHex=-_N}', "");
Expect(0, 57, '\p{AHex=-_N}', "");
Expect(1, 57, '\p{^AHex=-_N}', "");
Expect(1, 57, '\P{AHex=-_N}', "");
Expect(0, 57, '\P{^AHex=-_N}', "");
Error('\p{Is_ASCII_Hex_Digit=/a/_F}');
Error('\P{Is_ASCII_Hex_Digit=/a/_F}');
Expect(1, 47, '\p{Is_ASCII_Hex_Digit=f}', "");
Expect(0, 47, '\p{^Is_ASCII_Hex_Digit=f}', "");
Expect(0, 47, '\P{Is_ASCII_Hex_Digit=f}', "");
Expect(1, 47, '\P{^Is_ASCII_Hex_Digit=f}', "");
Expect(0, 57, '\p{Is_ASCII_Hex_Digit=f}', "");
Expect(1, 57, '\p{^Is_ASCII_Hex_Digit=f}', "");
Expect(1, 57, '\P{Is_ASCII_Hex_Digit=f}', "");
Expect(0, 57, '\P{^Is_ASCII_Hex_Digit=f}', "");
Expect(1, 47, '\p{Is_ASCII_Hex_Digit=_-F}', "");
Expect(0, 47, '\p{^Is_ASCII_Hex_Digit=_-F}', "");
Expect(0, 47, '\P{Is_ASCII_Hex_Digit=_-F}', "");
Expect(1, 47, '\P{^Is_ASCII_Hex_Digit=_-F}', "");
Expect(0, 57, '\p{Is_ASCII_Hex_Digit=_-F}', "");
Expect(1, 57, '\p{^Is_ASCII_Hex_Digit=_-F}', "");
Expect(1, 57, '\P{Is_ASCII_Hex_Digit=_-F}', "");
Expect(0, 57, '\P{^Is_ASCII_Hex_Digit=_-F}', "");
Error('\p{Is_AHex=:=- False}');
Error('\P{Is_AHex=:=- False}');
Expect(1, 47, '\p{Is_AHex: false}', "");
Expect(0, 47, '\p{^Is_AHex: false}', "");
Expect(0, 47, '\P{Is_AHex: false}', "");
Expect(1, 47, '\P{^Is_AHex: false}', "");
Expect(0, 57, '\p{Is_AHex: false}', "");
Expect(1, 57, '\p{^Is_AHex: false}', "");
Expect(1, 57, '\P{Is_AHex: false}', "");
Expect(0, 57, '\P{^Is_AHex: false}', "");
Expect(1, 47, '\p{Is_AHex=_FALSE}', "");
Expect(0, 47, '\p{^Is_AHex=_FALSE}', "");
Expect(0, 47, '\P{Is_AHex=_FALSE}', "");
Expect(1, 47, '\P{^Is_AHex=_FALSE}', "");
Expect(0, 57, '\p{Is_AHex=_FALSE}', "");
Expect(1, 57, '\p{^Is_AHex=_FALSE}', "");
Expect(1, 57, '\P{Is_AHex=_FALSE}', "");
Expect(0, 57, '\P{^Is_AHex=_FALSE}', "");
Error('\p{Present_In= :=00	3.2}');
Error('\P{Present_In= :=00	3.2}');
Expect(1, 544, '\p{Present_In=0_3.2}', "");
Expect(0, 544, '\p{^Present_In=0_3.2}', "");
Expect(0, 544, '\P{Present_In=0_3.2}', "");
Expect(1, 544, '\P{^Present_In=0_3.2}', "");
Expect(0, 545, '\p{Present_In=0_3.2}', "");
Expect(1, 545, '\p{^Present_In=0_3.2}', "");
Expect(1, 545, '\P{Present_In=0_3.2}', "");
Expect(0, 545, '\P{^Present_In=0_3.2}', "");
Error('\p{In=00000003.2/a/}');
Error('\P{In=00000003.2/a/}');
Expect(1, 544, '\p{In:   00_3.2}', "");
Expect(0, 544, '\p{^In:   00_3.2}', "");
Expect(0, 544, '\P{In:   00_3.2}', "");
Expect(1, 544, '\P{^In:   00_3.2}', "");
Expect(0, 545, '\p{In:   00_3.2}', "");
Expect(1, 545, '\p{^In:   00_3.2}', "");
Expect(1, 545, '\P{In:   00_3.2}', "");
Expect(0, 545, '\P{^In:   00_3.2}', "");
Error('\p{Present_In=	-+0000002.0/a/}');
Error('\P{Present_In=	-+0000002.0/a/}');
Expect(1, 501, '\p{Present_In=+0000000002.0}', "");
Expect(0, 501, '\p{^Present_In=+0000000002.0}', "");
Expect(0, 501, '\P{Present_In=+0000000002.0}', "");
Expect(1, 501, '\P{^Present_In=+0000000002.0}', "");
Expect(0, 505, '\p{Present_In=+0000000002.0}', "");
Expect(1, 505, '\p{^Present_In=+0000000002.0}', "");
Expect(1, 505, '\P{Present_In=+0000000002.0}', "");
Expect(0, 505, '\P{^Present_In=+0000000002.0}', "");
Error('\p{In= :=+0-0	0	0 0-0-0002.0}');
Error('\P{In= :=+0-0	0	0 0-0-0002.0}');
Expect(1, 501, '\p{In=00_00_00_00_02.0}', "");
Expect(0, 501, '\p{^In=00_00_00_00_02.0}', "");
Expect(0, 501, '\P{In=00_00_00_00_02.0}', "");
Expect(1, 501, '\P{^In=00_00_00_00_02.0}', "");
Expect(0, 505, '\p{In=00_00_00_00_02.0}', "");
Expect(1, 505, '\p{^In=00_00_00_00_02.0}', "");
Expect(1, 505, '\P{In=00_00_00_00_02.0}', "");
Expect(0, 505, '\P{^In=00_00_00_00_02.0}', "");
Error('\p{Present_In=/a/		+0000001.1}');
Error('\P{Present_In=/a/		+0000001.1}');
Expect(1, 501, '\p{Present_In=000000_1.1}', "");
Expect(0, 501, '\p{^Present_In=000000_1.1}', "");
Expect(0, 501, '\P{Present_In=000000_1.1}', "");
Expect(1, 501, '\P{^Present_In=000000_1.1}', "");
Expect(0, 505, '\p{Present_In=000000_1.1}', "");
Expect(1, 505, '\p{^Present_In=000000_1.1}', "");
Expect(1, 505, '\P{Present_In=000000_1.1}', "");
Expect(0, 505, '\P{^Present_In=000000_1.1}', "");
Error('\p{In= 0000/a/1.1}');
Error('\P{In= 0000/a/1.1}');
Expect(1, 501, '\p{In=001.1}', "");
Expect(0, 501, '\p{^In=001.1}', "");
Expect(0, 501, '\P{In=001.1}', "");
Expect(1, 501, '\P{^In=001.1}', "");
Expect(0, 505, '\p{In=001.1}', "");
Expect(1, 505, '\p{^In=001.1}', "");
Expect(1, 505, '\P{In=001.1}', "");
Expect(0, 505, '\P{^In=001.1}', "");
Error('\p{Present_In=/a/5.0}');
Error('\P{Present_In=/a/5.0}');
Expect(1, 879, '\p{Present_In=005.0}', "");
Expect(0, 879, '\p{^Present_In=005.0}', "");
Expect(0, 879, '\P{Present_In=005.0}', "");
Expect(1, 879, '\P{^Present_In=005.0}', "");
Expect(0, 883, '\p{Present_In=005.0}', "");
Expect(1, 883, '\p{^Present_In=005.0}', "");
Expect(1, 883, '\P{Present_In=005.0}', "");
Expect(0, 883, '\P{^Present_In=005.0}', "");
Error('\p{In=_ 00_00 5.0/a/}');
Error('\P{In=_ 00_00 5.0/a/}');
Expect(1, 879, '\p{In=05.0}', "");
Expect(0, 879, '\p{^In=05.0}', "");
Expect(0, 879, '\P{In=05.0}', "");
Expect(1, 879, '\P{^In=05.0}', "");
Expect(0, 883, '\p{In=05.0}', "");
Expect(1, 883, '\p{^In=05.0}', "");
Expect(1, 883, '\P{In=05.0}', "");
Expect(0, 883, '\P{^In=05.0}', "");
Error('\p{Present_In=-:=00-00-00_00_03.0}');
Error('\P{Present_In=-:=00-00-00_00_03.0}');
Expect(1, 543, '\p{Present_In=0000_0000_03.0}', "");
Expect(0, 543, '\p{^Present_In=0000_0000_03.0}', "");
Expect(0, 543, '\P{Present_In=0000_0000_03.0}', "");
Expect(1, 543, '\P{^Present_In=0000_0000_03.0}', "");
Expect(0, 545, '\p{Present_In=0000_0000_03.0}', "");
Expect(1, 545, '\p{^Present_In=0000_0000_03.0}', "");
Expect(1, 545, '\P{Present_In=0000_0000_03.0}', "");
Expect(0, 545, '\P{^Present_In=0000_0000_03.0}', "");
Error('\p{In=  +0/a/3.0}');
Error('\P{In=  +0/a/3.0}');
Expect(1, 543, '\p{In=0_0_0_003.0}', "");
Expect(0, 543, '\p{^In=0_0_0_003.0}', "");
Expect(0, 543, '\P{In=0_0_0_003.0}', "");
Expect(1, 543, '\P{^In=0_0_0_003.0}', "");
Expect(0, 545, '\p{In=0_0_0_003.0}', "");
Expect(1, 545, '\p{^In=0_0_0_003.0}', "");
Expect(1, 545, '\P{In=0_0_0_003.0}', "");
Expect(0, 545, '\P{^In=0_0_0_003.0}', "");
Error('\p{Present_In=_UNASSIGNED:=}');
Error('\P{Present_In=_UNASSIGNED:=}');
Expect(1, 889, '\p{Present_In=unassigned}', "");
Expect(0, 889, '\p{^Present_In=unassigned}', "");
Expect(0, 889, '\P{Present_In=unassigned}', "");
Expect(1, 889, '\P{^Present_In=unassigned}', "");
Expect(0, 887, '\p{Present_In=unassigned}', "");
Expect(1, 887, '\p{^Present_In=unassigned}', "");
Expect(1, 887, '\P{Present_In=unassigned}', "");
Expect(0, 887, '\P{^Present_In=unassigned}', "");
Expect(1, 889, '\p{Present_In=_-Unassigned}', "");
Expect(0, 889, '\p{^Present_In=_-Unassigned}', "");
Expect(0, 889, '\P{Present_In=_-Unassigned}', "");
Expect(1, 889, '\P{^Present_In=_-Unassigned}', "");
Expect(0, 887, '\p{Present_In=_-Unassigned}', "");
Expect(1, 887, '\p{^Present_In=_-Unassigned}', "");
Expect(1, 887, '\P{Present_In=_-Unassigned}', "");
Expect(0, 887, '\P{^Present_In=_-Unassigned}', "");
Error('\p{In=:=-	Unassigned}');
Error('\P{In=:=-	Unassigned}');
Expect(1, 889, '\p{In=unassigned}', "");
Expect(0, 889, '\p{^In=unassigned}', "");
Expect(0, 889, '\P{In=unassigned}', "");
Expect(1, 889, '\P{^In=unassigned}', "");
Expect(0, 887, '\p{In=unassigned}', "");
Expect(1, 887, '\p{^In=unassigned}', "");
Expect(1, 887, '\P{In=unassigned}', "");
Expect(0, 887, '\P{^In=unassigned}', "");
Expect(1, 889, '\p{In=-Unassigned}', "");
Expect(0, 889, '\p{^In=-Unassigned}', "");
Expect(0, 889, '\P{In=-Unassigned}', "");
Expect(1, 889, '\P{^In=-Unassigned}', "");
Expect(0, 887, '\p{In=-Unassigned}', "");
Expect(1, 887, '\p{^In=-Unassigned}', "");
Expect(1, 887, '\P{In=-Unassigned}', "");
Expect(0, 887, '\P{^In=-Unassigned}', "");
Error('\p{Present_In=/a/-_+5.1}');
Error('\P{Present_In=/a/-_+5.1}');
Expect(1, 887, '\p{Present_In=+05.1}', "");
Expect(0, 887, '\p{^Present_In=+05.1}', "");
Expect(0, 887, '\P{Present_In=+05.1}', "");
Expect(1, 887, '\P{^Present_In=+05.1}', "");
Expect(0, 889, '\p{Present_In=+05.1}', "");
Expect(1, 889, '\p{^Present_In=+05.1}', "");
Expect(1, 889, '\P{Present_In=+05.1}', "");
Expect(0, 889, '\P{^Present_In=+05.1}', "");
Error('\p{In=	_0	0	0	0/a/0	05.1}');
Error('\P{In=	_0	0	0	0/a/0	05.1}');
Expect(1, 887, '\p{In=0_0_0_0_0_0_005.1}', "");
Expect(0, 887, '\p{^In=0_0_0_0_0_0_005.1}', "");
Expect(0, 887, '\P{In=0_0_0_0_0_0_005.1}', "");
Expect(1, 887, '\P{^In=0_0_0_0_0_0_005.1}', "");
Expect(0, 889, '\p{In=0_0_0_0_0_0_005.1}', "");
Expect(1, 889, '\p{^In=0_0_0_0_0_0_005.1}', "");
Expect(1, 889, '\P{In=0_0_0_0_0_0_005.1}', "");
Expect(0, 889, '\P{^In=0_0_0_0_0_0_005.1}', "");
Error('\p{Present_In=_ 0-0-04.0:=}');
Error('\P{Present_In=_ 0-0-04.0:=}');
Expect(1, 566, '\p{Present_In: 0_0_0_04.0}', "");
Expect(0, 566, '\p{^Present_In: 0_0_0_04.0}', "");
Expect(0, 566, '\P{Present_In: 0_0_0_04.0}', "");
Expect(1, 566, '\P{^Present_In: 0_0_0_04.0}', "");
Expect(0, 591, '\p{Present_In: 0_0_0_04.0}', "");
Expect(1, 591, '\p{^Present_In: 0_0_0_04.0}', "");
Expect(1, 591, '\P{Present_In: 0_0_0_04.0}', "");
Expect(0, 591, '\P{^Present_In: 0_0_0_04.0}', "");
Error('\p{In= _4.0:=}');
Error('\P{In= _4.0:=}');
Expect(1, 566, '\p{In=000_000_000_4.0}', "");
Expect(0, 566, '\p{^In=000_000_000_4.0}', "");
Expect(0, 566, '\P{In=000_000_000_4.0}', "");
Expect(1, 566, '\P{^In=000_000_000_4.0}', "");
Expect(0, 591, '\p{In=000_000_000_4.0}', "");
Expect(1, 591, '\p{^In=000_000_000_4.0}', "");
Expect(1, 591, '\P{In=000_000_000_4.0}', "");
Expect(0, 591, '\P{^In=000_000_000_4.0}', "");
Error('\p{Present_In=-:=+00	00	00 5.2}');
Error('\P{Present_In=-:=+00	00	00 5.2}');
Expect(1, 887, '\p{Present_In=000000005.2}', "");
Expect(0, 887, '\p{^Present_In=000000005.2}', "");
Expect(0, 887, '\P{Present_In=000000005.2}', "");
Expect(1, 887, '\P{^Present_In=000000005.2}', "");
Expect(0, 889, '\p{Present_In=000000005.2}', "");
Expect(1, 889, '\p{^Present_In=000000005.2}', "");
Expect(1, 889, '\P{Present_In=000000005.2}', "");
Expect(0, 889, '\P{^Present_In=000000005.2}', "");
Error('\p{In=:=_	+005.2}');
Error('\P{In=:=_	+005.2}');
Expect(1, 887, '\p{In=+0000000_5.2}', "");
Expect(0, 887, '\p{^In=+0000000_5.2}', "");
Expect(0, 887, '\P{In=+0000000_5.2}', "");
Expect(1, 887, '\P{^In=+0000000_5.2}', "");
Expect(0, 889, '\p{In=+0000000_5.2}', "");
Expect(1, 889, '\p{^In=+0000000_5.2}', "");
Expect(1, 889, '\P{In=+0000000_5.2}', "");
Expect(0, 889, '\P{^In=+0000000_5.2}', "");
Error('\p{Present_In=__0/a/0-0 0	0003.1}');
Error('\P{Present_In=__0/a/0-0 0	0003.1}');
Expect(1, 543, '\p{Present_In=0000_0000_3.1}', "");
Expect(0, 543, '\p{^Present_In=0000_0000_3.1}', "");
Expect(0, 543, '\P{Present_In=0000_0000_3.1}', "");
Expect(1, 543, '\P{^Present_In=0000_0000_3.1}', "");
Expect(0, 545, '\p{Present_In=0000_0000_3.1}', "");
Expect(1, 545, '\p{^Present_In=0000_0000_3.1}', "");
Expect(1, 545, '\P{Present_In=0000_0000_3.1}', "");
Expect(0, 545, '\P{^Present_In=0000_0000_3.1}', "");
Error('\p{In=/a/- 00003.1}');
Error('\P{In=/a/- 00003.1}');
Expect(1, 543, '\p{In=+00003.1}', "");
Expect(0, 543, '\p{^In=+00003.1}', "");
Expect(0, 543, '\P{In=+00003.1}', "");
Expect(1, 543, '\P{^In=+00003.1}', "");
Expect(0, 545, '\p{In=+00003.1}', "");
Expect(1, 545, '\p{^In=+00003.1}', "");
Expect(1, 545, '\P{In=+00003.1}', "");
Expect(0, 545, '\P{^In=+00003.1}', "");
Error('\p{Present_In=--0-00:=0	0 0	02.1}');
Error('\P{Present_In=--0-00:=0	0 0	02.1}');
Expect(1, 501, '\p{Present_In:02.1}', "");
Expect(0, 501, '\p{^Present_In:02.1}', "");
Expect(0, 501, '\P{Present_In:02.1}', "");
Expect(1, 501, '\P{^Present_In:02.1}', "");
Expect(0, 505, '\p{Present_In:02.1}', "");
Expect(1, 505, '\p{^Present_In:02.1}', "");
Expect(1, 505, '\P{Present_In:02.1}', "");
Expect(0, 505, '\P{^Present_In:02.1}', "");
Error('\p{In=--00002.1:=}');
Error('\P{In=--00002.1:=}');
Expect(1, 501, '\p{In=000002.1}', "");
Expect(0, 501, '\p{^In=000002.1}', "");
Expect(0, 501, '\P{In=000002.1}', "");
Expect(1, 501, '\P{^In=000002.1}', "");
Expect(0, 505, '\p{In=000002.1}', "");
Expect(1, 505, '\p{^In=000002.1}', "");
Expect(1, 505, '\P{In=000002.1}', "");
Expect(0, 505, '\P{^In=000002.1}', "");
Error('\p{Present_In= 00/a/4.1}');
Error('\P{Present_In= 00/a/4.1}');
Expect(1, 577, '\p{Present_In=0_4.1}', "");
Expect(0, 577, '\p{^Present_In=0_4.1}', "");
Expect(0, 577, '\P{Present_In=0_4.1}', "");
Expect(1, 577, '\P{^Present_In=0_4.1}', "");
Expect(0, 591, '\p{Present_In=0_4.1}', "");
Expect(1, 591, '\p{^Present_In=0_4.1}', "");
Expect(1, 591, '\P{Present_In=0_4.1}', "");
Expect(0, 591, '\P{^Present_In=0_4.1}', "");
Error('\p{In=:=_-00004.1}');
Error('\P{In=:=_-00004.1}');
Expect(1, 577, '\p{In:	004.1}', "");
Expect(0, 577, '\p{^In:	004.1}', "");
Expect(0, 577, '\P{In:	004.1}', "");
Expect(1, 577, '\P{^In:	004.1}', "");
Expect(0, 591, '\p{In:	004.1}', "");
Expect(1, 591, '\p{^In:	004.1}', "");
Expect(1, 591, '\P{In:	004.1}', "");
Expect(0, 591, '\P{^In:	004.1}', "");
Error('\p{Extender= /a/yes}');
Error('\P{Extender= /a/yes}');
Expect(1, 183, '\p{Extender=yes}', "");
Expect(0, 183, '\p{^Extender=yes}', "");
Expect(0, 183, '\P{Extender=yes}', "");
Expect(1, 183, '\P{^Extender=yes}', "");
Expect(0, 182, '\p{Extender=yes}', "");
Expect(1, 182, '\p{^Extender=yes}', "");
Expect(1, 182, '\P{Extender=yes}', "");
Expect(0, 182, '\P{^Extender=yes}', "");
Expect(1, 183, '\p{Extender=_Yes}', "");
Expect(0, 183, '\p{^Extender=_Yes}', "");
Expect(0, 183, '\P{Extender=_Yes}', "");
Expect(1, 183, '\P{^Extender=_Yes}', "");
Expect(0, 182, '\p{Extender=_Yes}', "");
Expect(1, 182, '\p{^Extender=_Yes}', "");
Expect(1, 182, '\P{Extender=_Yes}', "");
Expect(0, 182, '\P{^Extender=_Yes}', "");
Error('\p{Ext=:=	_y}');
Error('\P{Ext=:=	_y}');
Expect(1, 183, '\p{Ext=y}', "");
Expect(0, 183, '\p{^Ext=y}', "");
Expect(0, 183, '\P{Ext=y}', "");
Expect(1, 183, '\P{^Ext=y}', "");
Expect(0, 182, '\p{Ext=y}', "");
Expect(1, 182, '\p{^Ext=y}', "");
Expect(1, 182, '\P{Ext=y}', "");
Expect(0, 182, '\P{^Ext=y}', "");
Expect(1, 183, '\p{Ext= _Y}', "");
Expect(0, 183, '\p{^Ext= _Y}', "");
Expect(0, 183, '\P{Ext= _Y}', "");
Expect(1, 183, '\P{^Ext= _Y}', "");
Expect(0, 182, '\p{Ext= _Y}', "");
Expect(1, 182, '\p{^Ext= _Y}', "");
Expect(1, 182, '\P{Ext= _Y}', "");
Expect(0, 182, '\P{^Ext= _Y}', "");
Error('\p{Is_Extender= 	T/a/}');
Error('\P{Is_Extender= 	T/a/}');
Expect(1, 183, '\p{Is_Extender=t}', "");
Expect(0, 183, '\p{^Is_Extender=t}', "");
Expect(0, 183, '\P{Is_Extender=t}', "");
Expect(1, 183, '\P{^Is_Extender=t}', "");
Expect(0, 182, '\p{Is_Extender=t}', "");
Expect(1, 182, '\p{^Is_Extender=t}', "");
Expect(1, 182, '\P{Is_Extender=t}', "");
Expect(0, 182, '\P{^Is_Extender=t}', "");
Expect(1, 183, '\p{Is_Extender=_T}', "");
Expect(0, 183, '\p{^Is_Extender=_T}', "");
Expect(0, 183, '\P{Is_Extender=_T}', "");
Expect(1, 183, '\P{^Is_Extender=_T}', "");
Expect(0, 182, '\p{Is_Extender=_T}', "");
Expect(1, 182, '\p{^Is_Extender=_T}', "");
Expect(1, 182, '\P{Is_Extender=_T}', "");
Expect(0, 182, '\P{^Is_Extender=_T}', "");
Error('\p{Is_Ext=/a/ -True}');
Error('\P{Is_Ext=/a/ -True}');
Expect(1, 183, '\p{Is_Ext=true}', "");
Expect(0, 183, '\p{^Is_Ext=true}', "");
Expect(0, 183, '\P{Is_Ext=true}', "");
Expect(1, 183, '\P{^Is_Ext=true}', "");
Expect(0, 182, '\p{Is_Ext=true}', "");
Expect(1, 182, '\p{^Is_Ext=true}', "");
Expect(1, 182, '\P{Is_Ext=true}', "");
Expect(0, 182, '\P{^Is_Ext=true}', "");
Expect(1, 183, '\p{Is_Ext=-TRUE}', "");
Expect(0, 183, '\p{^Is_Ext=-TRUE}', "");
Expect(0, 183, '\P{Is_Ext=-TRUE}', "");
Expect(1, 183, '\P{^Is_Ext=-TRUE}', "");
Expect(0, 182, '\p{Is_Ext=-TRUE}', "");
Expect(1, 182, '\p{^Is_Ext=-TRUE}', "");
Expect(1, 182, '\P{Is_Ext=-TRUE}', "");
Expect(0, 182, '\P{^Is_Ext=-TRUE}', "");
Error('\p{Extender=NO:=}');
Error('\P{Extender=NO:=}');
Expect(1, 182, '\p{Extender=no}', "");
Expect(0, 182, '\p{^Extender=no}', "");
Expect(0, 182, '\P{Extender=no}', "");
Expect(1, 182, '\P{^Extender=no}', "");
Expect(0, 183, '\p{Extender=no}', "");
Expect(1, 183, '\p{^Extender=no}', "");
Expect(1, 183, '\P{Extender=no}', "");
Expect(0, 183, '\P{^Extender=no}', "");
Expect(1, 182, '\p{Extender=		No}', "");
Expect(0, 182, '\p{^Extender=		No}', "");
Expect(0, 182, '\P{Extender=		No}', "");
Expect(1, 182, '\P{^Extender=		No}', "");
Expect(0, 183, '\p{Extender=		No}', "");
Expect(1, 183, '\p{^Extender=		No}', "");
Expect(1, 183, '\P{Extender=		No}', "");
Expect(0, 183, '\P{^Extender=		No}', "");
Error('\p{Ext=/a/_	N}');
Error('\P{Ext=/a/_	N}');
Expect(1, 182, '\p{Ext=n}', "");
Expect(0, 182, '\p{^Ext=n}', "");
Expect(0, 182, '\P{Ext=n}', "");
Expect(1, 182, '\P{^Ext=n}', "");
Expect(0, 183, '\p{Ext=n}', "");
Expect(1, 183, '\p{^Ext=n}', "");
Expect(1, 183, '\P{Ext=n}', "");
Expect(0, 183, '\P{^Ext=n}', "");
Expect(1, 182, '\p{Ext:  N}', "");
Expect(0, 182, '\p{^Ext:  N}', "");
Expect(0, 182, '\P{Ext:  N}', "");
Expect(1, 182, '\P{^Ext:  N}', "");
Expect(0, 183, '\p{Ext:  N}', "");
Expect(1, 183, '\p{^Ext:  N}', "");
Expect(1, 183, '\P{Ext:  N}', "");
Expect(0, 183, '\P{^Ext:  N}', "");
Error('\p{Is_Extender=-_F:=}');
Error('\P{Is_Extender=-_F:=}');
Expect(1, 182, '\p{Is_Extender=f}', "");
Expect(0, 182, '\p{^Is_Extender=f}', "");
Expect(0, 182, '\P{Is_Extender=f}', "");
Expect(1, 182, '\P{^Is_Extender=f}', "");
Expect(0, 183, '\p{Is_Extender=f}', "");
Expect(1, 183, '\p{^Is_Extender=f}', "");
Expect(1, 183, '\P{Is_Extender=f}', "");
Expect(0, 183, '\P{^Is_Extender=f}', "");
Expect(1, 182, '\p{Is_Extender= -F}', "");
Expect(0, 182, '\p{^Is_Extender= -F}', "");
Expect(0, 182, '\P{Is_Extender= -F}', "");
Expect(1, 182, '\P{^Is_Extender= -F}', "");
Expect(0, 183, '\p{Is_Extender= -F}', "");
Expect(1, 183, '\p{^Is_Extender= -F}', "");
Expect(1, 183, '\P{Is_Extender= -F}', "");
Expect(0, 183, '\P{^Is_Extender= -F}', "");
Error('\p{Is_Ext=:=_false}');
Error('\P{Is_Ext=:=_false}');
Expect(1, 182, '\p{Is_Ext=false}', "");
Expect(0, 182, '\p{^Is_Ext=false}', "");
Expect(0, 182, '\P{Is_Ext=false}', "");
Expect(1, 182, '\P{^Is_Ext=false}', "");
Expect(0, 183, '\p{Is_Ext=false}', "");
Expect(1, 183, '\p{^Is_Ext=false}', "");
Expect(1, 183, '\P{Is_Ext=false}', "");
Expect(0, 183, '\P{^Is_Ext=false}', "");
Expect(1, 182, '\p{Is_Ext=_FALSE}', "");
Expect(0, 182, '\p{^Is_Ext=_FALSE}', "");
Expect(0, 182, '\P{Is_Ext=_FALSE}', "");
Expect(1, 182, '\P{^Is_Ext=_FALSE}', "");
Expect(0, 183, '\p{Is_Ext=_FALSE}', "");
Expect(1, 183, '\p{^Is_Ext=_FALSE}', "");
Expect(1, 183, '\P{Is_Ext=_FALSE}', "");
Expect(0, 183, '\P{^Is_Ext=_FALSE}', "");
Error('\p{IDS_Trinary_Operator=	yes:=}');
Error('\P{IDS_Trinary_Operator=	yes:=}');
Expect(1, 12275, '\p{IDS_Trinary_Operator=yes}', "");
Expect(0, 12275, '\p{^IDS_Trinary_Operator=yes}', "");
Expect(0, 12275, '\P{IDS_Trinary_Operator=yes}', "");
Expect(1, 12275, '\P{^IDS_Trinary_Operator=yes}', "");
Expect(0, 12273, '\p{IDS_Trinary_Operator=yes}', "");
Expect(1, 12273, '\p{^IDS_Trinary_Operator=yes}', "");
Expect(1, 12273, '\P{IDS_Trinary_Operator=yes}', "");
Expect(0, 12273, '\P{^IDS_Trinary_Operator=yes}', "");
Expect(1, 12275, '\p{IDS_Trinary_Operator=__YES}', "");
Expect(0, 12275, '\p{^IDS_Trinary_Operator=__YES}', "");
Expect(0, 12275, '\P{IDS_Trinary_Operator=__YES}', "");
Expect(1, 12275, '\P{^IDS_Trinary_Operator=__YES}', "");
Expect(0, 12273, '\p{IDS_Trinary_Operator=__YES}', "");
Expect(1, 12273, '\p{^IDS_Trinary_Operator=__YES}', "");
Expect(1, 12273, '\P{IDS_Trinary_Operator=__YES}', "");
Expect(0, 12273, '\P{^IDS_Trinary_Operator=__YES}', "");
Error('\p{IDST=:= Y}');
Error('\P{IDST=:= Y}');
Expect(1, 12275, '\p{IDST=y}', "");
Expect(0, 12275, '\p{^IDST=y}', "");
Expect(0, 12275, '\P{IDST=y}', "");
Expect(1, 12275, '\P{^IDST=y}', "");
Expect(0, 12273, '\p{IDST=y}', "");
Expect(1, 12273, '\p{^IDST=y}', "");
Expect(1, 12273, '\P{IDST=y}', "");
Expect(0, 12273, '\P{^IDST=y}', "");
Expect(1, 12275, '\p{IDST= 	Y}', "");
Expect(0, 12275, '\p{^IDST= 	Y}', "");
Expect(0, 12275, '\P{IDST= 	Y}', "");
Expect(1, 12275, '\P{^IDST= 	Y}', "");
Expect(0, 12273, '\p{IDST= 	Y}', "");
Expect(1, 12273, '\p{^IDST= 	Y}', "");
Expect(1, 12273, '\P{IDST= 	Y}', "");
Expect(0, 12273, '\P{^IDST= 	Y}', "");
Error('\p{Is_IDS_Trinary_Operator=:=	T}');
Error('\P{Is_IDS_Trinary_Operator=:=	T}');
Expect(1, 12275, '\p{Is_IDS_Trinary_Operator=t}', "");
Expect(0, 12275, '\p{^Is_IDS_Trinary_Operator=t}', "");
Expect(0, 12275, '\P{Is_IDS_Trinary_Operator=t}', "");
Expect(1, 12275, '\P{^Is_IDS_Trinary_Operator=t}', "");
Expect(0, 12273, '\p{Is_IDS_Trinary_Operator=t}', "");
Expect(1, 12273, '\p{^Is_IDS_Trinary_Operator=t}', "");
Expect(1, 12273, '\P{Is_IDS_Trinary_Operator=t}', "");
Expect(0, 12273, '\P{^Is_IDS_Trinary_Operator=t}', "");
Expect(1, 12275, '\p{Is_IDS_Trinary_Operator=-T}', "");
Expect(0, 12275, '\p{^Is_IDS_Trinary_Operator=-T}', "");
Expect(0, 12275, '\P{Is_IDS_Trinary_Operator=-T}', "");
Expect(1, 12275, '\P{^Is_IDS_Trinary_Operator=-T}', "");
Expect(0, 12273, '\p{Is_IDS_Trinary_Operator=-T}', "");
Expect(1, 12273, '\p{^Is_IDS_Trinary_Operator=-T}', "");
Expect(1, 12273, '\P{Is_IDS_Trinary_Operator=-T}', "");
Expect(0, 12273, '\P{^Is_IDS_Trinary_Operator=-T}', "");
Error('\p{Is_IDST=/a/_ True}');
Error('\P{Is_IDST=/a/_ True}');
Expect(1, 12275, '\p{Is_IDST: true}', "");
Expect(0, 12275, '\p{^Is_IDST: true}', "");
Expect(0, 12275, '\P{Is_IDST: true}', "");
Expect(1, 12275, '\P{^Is_IDST: true}', "");
Expect(0, 12273, '\p{Is_IDST: true}', "");
Expect(1, 12273, '\p{^Is_IDST: true}', "");
Expect(1, 12273, '\P{Is_IDST: true}', "");
Expect(0, 12273, '\P{^Is_IDST: true}', "");
Expect(1, 12275, '\p{Is_IDST= -true}', "");
Expect(0, 12275, '\p{^Is_IDST= -true}', "");
Expect(0, 12275, '\P{Is_IDST= -true}', "");
Expect(1, 12275, '\P{^Is_IDST= -true}', "");
Expect(0, 12273, '\p{Is_IDST= -true}', "");
Expect(1, 12273, '\p{^Is_IDST= -true}', "");
Expect(1, 12273, '\P{Is_IDST= -true}', "");
Expect(0, 12273, '\P{^Is_IDST= -true}', "");
Error('\p{IDS_Trinary_Operator=/a/	_NO}');
Error('\P{IDS_Trinary_Operator=/a/	_NO}');
Expect(1, 12273, '\p{IDS_Trinary_Operator=no}', "");
Expect(0, 12273, '\p{^IDS_Trinary_Operator=no}', "");
Expect(0, 12273, '\P{IDS_Trinary_Operator=no}', "");
Expect(1, 12273, '\P{^IDS_Trinary_Operator=no}', "");
Expect(0, 12275, '\p{IDS_Trinary_Operator=no}', "");
Expect(1, 12275, '\p{^IDS_Trinary_Operator=no}', "");
Expect(1, 12275, '\P{IDS_Trinary_Operator=no}', "");
Expect(0, 12275, '\P{^IDS_Trinary_Operator=no}', "");
Expect(1, 12273, '\p{IDS_Trinary_Operator= -no}', "");
Expect(0, 12273, '\p{^IDS_Trinary_Operator= -no}', "");
Expect(0, 12273, '\P{IDS_Trinary_Operator= -no}', "");
Expect(1, 12273, '\P{^IDS_Trinary_Operator= -no}', "");
Expect(0, 12275, '\p{IDS_Trinary_Operator= -no}', "");
Expect(1, 12275, '\p{^IDS_Trinary_Operator= -no}', "");
Expect(1, 12275, '\P{IDS_Trinary_Operator= -no}', "");
Expect(0, 12275, '\P{^IDS_Trinary_Operator= -no}', "");
Error('\p{IDST=:=	-N}');
Error('\P{IDST=:=	-N}');
Expect(1, 12273, '\p{IDST=n}', "");
Expect(0, 12273, '\p{^IDST=n}', "");
Expect(0, 12273, '\P{IDST=n}', "");
Expect(1, 12273, '\P{^IDST=n}', "");
Expect(0, 12275, '\p{IDST=n}', "");
Expect(1, 12275, '\p{^IDST=n}', "");
Expect(1, 12275, '\P{IDST=n}', "");
Expect(0, 12275, '\P{^IDST=n}', "");
Expect(1, 12273, '\p{IDST=	-N}', "");
Expect(0, 12273, '\p{^IDST=	-N}', "");
Expect(0, 12273, '\P{IDST=	-N}', "");
Expect(1, 12273, '\P{^IDST=	-N}', "");
Expect(0, 12275, '\p{IDST=	-N}', "");
Expect(1, 12275, '\p{^IDST=	-N}', "");
Expect(1, 12275, '\P{IDST=	-N}', "");
Expect(0, 12275, '\P{^IDST=	-N}', "");
Error('\p{Is_IDS_Trinary_Operator=/a/-	F}');
Error('\P{Is_IDS_Trinary_Operator=/a/-	F}');
Expect(1, 12273, '\p{Is_IDS_Trinary_Operator=f}', "");
Expect(0, 12273, '\p{^Is_IDS_Trinary_Operator=f}', "");
Expect(0, 12273, '\P{Is_IDS_Trinary_Operator=f}', "");
Expect(1, 12273, '\P{^Is_IDS_Trinary_Operator=f}', "");
Expect(0, 12275, '\p{Is_IDS_Trinary_Operator=f}', "");
Expect(1, 12275, '\p{^Is_IDS_Trinary_Operator=f}', "");
Expect(1, 12275, '\P{Is_IDS_Trinary_Operator=f}', "");
Expect(0, 12275, '\P{^Is_IDS_Trinary_Operator=f}', "");
Expect(1, 12273, '\p{Is_IDS_Trinary_Operator=  F}', "");
Expect(0, 12273, '\p{^Is_IDS_Trinary_Operator=  F}', "");
Expect(0, 12273, '\P{Is_IDS_Trinary_Operator=  F}', "");
Expect(1, 12273, '\P{^Is_IDS_Trinary_Operator=  F}', "");
Expect(0, 12275, '\p{Is_IDS_Trinary_Operator=  F}', "");
Expect(1, 12275, '\p{^Is_IDS_Trinary_Operator=  F}', "");
Expect(1, 12275, '\P{Is_IDS_Trinary_Operator=  F}', "");
Expect(0, 12275, '\P{^Is_IDS_Trinary_Operator=  F}', "");
Error('\p{Is_IDST=/a/-	False}');
Error('\P{Is_IDST=/a/-	False}');
Expect(1, 12273, '\p{Is_IDST=false}', "");
Expect(0, 12273, '\p{^Is_IDST=false}', "");
Expect(0, 12273, '\P{Is_IDST=false}', "");
Expect(1, 12273, '\P{^Is_IDST=false}', "");
Expect(0, 12275, '\p{Is_IDST=false}', "");
Expect(1, 12275, '\p{^Is_IDST=false}', "");
Expect(1, 12275, '\P{Is_IDST=false}', "");
Expect(0, 12275, '\P{^Is_IDST=false}', "");
Expect(1, 12273, '\p{Is_IDST=	 FALSE}', "");
Expect(0, 12273, '\p{^Is_IDST=	 FALSE}', "");
Expect(0, 12273, '\P{Is_IDST=	 FALSE}', "");
Expect(1, 12273, '\P{^Is_IDST=	 FALSE}', "");
Expect(0, 12275, '\p{Is_IDST=	 FALSE}', "");
Expect(1, 12275, '\p{^Is_IDST=	 FALSE}', "");
Expect(1, 12275, '\P{Is_IDST=	 FALSE}', "");
Expect(0, 12275, '\P{^Is_IDST=	 FALSE}', "");
Error('\p{Composition_Exclusion=	YES:=}');
Error('\P{Composition_Exclusion=	YES:=}');
Expect(1, 2399, '\p{Composition_Exclusion=yes}', "");
Expect(0, 2399, '\p{^Composition_Exclusion=yes}', "");
Expect(0, 2399, '\P{Composition_Exclusion=yes}', "");
Expect(1, 2399, '\P{^Composition_Exclusion=yes}', "");
Expect(0, 2391, '\p{Composition_Exclusion=yes}', "");
Expect(1, 2391, '\p{^Composition_Exclusion=yes}', "");
Expect(1, 2391, '\P{Composition_Exclusion=yes}', "");
Expect(0, 2391, '\P{^Composition_Exclusion=yes}', "");
Expect(1, 2399, '\p{Composition_Exclusion=-Yes}', "");
Expect(0, 2399, '\p{^Composition_Exclusion=-Yes}', "");
Expect(0, 2399, '\P{Composition_Exclusion=-Yes}', "");
Expect(1, 2399, '\P{^Composition_Exclusion=-Yes}', "");
Expect(0, 2391, '\p{Composition_Exclusion=-Yes}', "");
Expect(1, 2391, '\p{^Composition_Exclusion=-Yes}', "");
Expect(1, 2391, '\P{Composition_Exclusion=-Yes}', "");
Expect(0, 2391, '\P{^Composition_Exclusion=-Yes}', "");
Error('\p{CE=/a/ -Y}');
Error('\P{CE=/a/ -Y}');
Expect(1, 2399, '\p{CE=y}', "");
Expect(0, 2399, '\p{^CE=y}', "");
Expect(0, 2399, '\P{CE=y}', "");
Expect(1, 2399, '\P{^CE=y}', "");
Expect(0, 2391, '\p{CE=y}', "");
Expect(1, 2391, '\p{^CE=y}', "");
Expect(1, 2391, '\P{CE=y}', "");
Expect(0, 2391, '\P{^CE=y}', "");
Expect(1, 2399, '\p{CE=--Y}', "");
Expect(0, 2399, '\p{^CE=--Y}', "");
Expect(0, 2399, '\P{CE=--Y}', "");
Expect(1, 2399, '\P{^CE=--Y}', "");
Expect(0, 2391, '\p{CE=--Y}', "");
Expect(1, 2391, '\p{^CE=--Y}', "");
Expect(1, 2391, '\P{CE=--Y}', "");
Expect(0, 2391, '\P{^CE=--Y}', "");
Error('\p{Is_Composition_Exclusion=:= -T}');
Error('\P{Is_Composition_Exclusion=:= -T}');
Expect(1, 2399, '\p{Is_Composition_Exclusion=t}', "");
Expect(0, 2399, '\p{^Is_Composition_Exclusion=t}', "");
Expect(0, 2399, '\P{Is_Composition_Exclusion=t}', "");
Expect(1, 2399, '\P{^Is_Composition_Exclusion=t}', "");
Expect(0, 2391, '\p{Is_Composition_Exclusion=t}', "");
Expect(1, 2391, '\p{^Is_Composition_Exclusion=t}', "");
Expect(1, 2391, '\P{Is_Composition_Exclusion=t}', "");
Expect(0, 2391, '\P{^Is_Composition_Exclusion=t}', "");
Expect(1, 2399, '\p{Is_Composition_Exclusion=  t}', "");
Expect(0, 2399, '\p{^Is_Composition_Exclusion=  t}', "");
Expect(0, 2399, '\P{Is_Composition_Exclusion=  t}', "");
Expect(1, 2399, '\P{^Is_Composition_Exclusion=  t}', "");
Expect(0, 2391, '\p{Is_Composition_Exclusion=  t}', "");
Expect(1, 2391, '\p{^Is_Composition_Exclusion=  t}', "");
Expect(1, 2391, '\P{Is_Composition_Exclusion=  t}', "");
Expect(0, 2391, '\P{^Is_Composition_Exclusion=  t}', "");
Error('\p{Is_CE=/a/_TRUE}');
Error('\P{Is_CE=/a/_TRUE}');
Expect(1, 2399, '\p{Is_CE=true}', "");
Expect(0, 2399, '\p{^Is_CE=true}', "");
Expect(0, 2399, '\P{Is_CE=true}', "");
Expect(1, 2399, '\P{^Is_CE=true}', "");
Expect(0, 2391, '\p{Is_CE=true}', "");
Expect(1, 2391, '\p{^Is_CE=true}', "");
Expect(1, 2391, '\P{Is_CE=true}', "");
Expect(0, 2391, '\P{^Is_CE=true}', "");
Expect(1, 2399, '\p{Is_CE=-TRUE}', "");
Expect(0, 2399, '\p{^Is_CE=-TRUE}', "");
Expect(0, 2399, '\P{Is_CE=-TRUE}', "");
Expect(1, 2399, '\P{^Is_CE=-TRUE}', "");
Expect(0, 2391, '\p{Is_CE=-TRUE}', "");
Expect(1, 2391, '\p{^Is_CE=-TRUE}', "");
Expect(1, 2391, '\P{Is_CE=-TRUE}', "");
Expect(0, 2391, '\P{^Is_CE=-TRUE}', "");
Error('\p{Composition_Exclusion=:= No}');
Error('\P{Composition_Exclusion=:= No}');
Expect(1, 2391, '\p{Composition_Exclusion=no}', "");
Expect(0, 2391, '\p{^Composition_Exclusion=no}', "");
Expect(0, 2391, '\P{Composition_Exclusion=no}', "");
Expect(1, 2391, '\P{^Composition_Exclusion=no}', "");
Expect(0, 2399, '\p{Composition_Exclusion=no}', "");
Expect(1, 2399, '\p{^Composition_Exclusion=no}', "");
Expect(1, 2399, '\P{Composition_Exclusion=no}', "");
Expect(0, 2399, '\P{^Composition_Exclusion=no}', "");
Expect(1, 2391, '\p{Composition_Exclusion=_No}', "");
Expect(0, 2391, '\p{^Composition_Exclusion=_No}', "");
Expect(0, 2391, '\P{Composition_Exclusion=_No}', "");
Expect(1, 2391, '\P{^Composition_Exclusion=_No}', "");
Expect(0, 2399, '\p{Composition_Exclusion=_No}', "");
Expect(1, 2399, '\p{^Composition_Exclusion=_No}', "");
Expect(1, 2399, '\P{Composition_Exclusion=_No}', "");
Expect(0, 2399, '\P{^Composition_Exclusion=_No}', "");
Error('\p{CE=:=N}');
Error('\P{CE=:=N}');
Expect(1, 2391, '\p{CE:n}', "");
Expect(0, 2391, '\p{^CE:n}', "");
Expect(0, 2391, '\P{CE:n}', "");
Expect(1, 2391, '\P{^CE:n}', "");
Expect(0, 2399, '\p{CE:n}', "");
Expect(1, 2399, '\p{^CE:n}', "");
Expect(1, 2399, '\P{CE:n}', "");
Expect(0, 2399, '\P{^CE:n}', "");
Expect(1, 2391, '\p{CE=	 n}', "");
Expect(0, 2391, '\p{^CE=	 n}', "");
Expect(0, 2391, '\P{CE=	 n}', "");
Expect(1, 2391, '\P{^CE=	 n}', "");
Expect(0, 2399, '\p{CE=	 n}', "");
Expect(1, 2399, '\p{^CE=	 n}', "");
Expect(1, 2399, '\P{CE=	 n}', "");
Expect(0, 2399, '\P{^CE=	 n}', "");
Error('\p{Is_Composition_Exclusion=:=	_F}');
Error('\P{Is_Composition_Exclusion=:=	_F}');
Expect(1, 2391, '\p{Is_Composition_Exclusion=f}', "");
Expect(0, 2391, '\p{^Is_Composition_Exclusion=f}', "");
Expect(0, 2391, '\P{Is_Composition_Exclusion=f}', "");
Expect(1, 2391, '\P{^Is_Composition_Exclusion=f}', "");
Expect(0, 2399, '\p{Is_Composition_Exclusion=f}', "");
Expect(1, 2399, '\p{^Is_Composition_Exclusion=f}', "");
Expect(1, 2399, '\P{Is_Composition_Exclusion=f}', "");
Expect(0, 2399, '\P{^Is_Composition_Exclusion=f}', "");
Expect(1, 2391, '\p{Is_Composition_Exclusion=	F}', "");
Expect(0, 2391, '\p{^Is_Composition_Exclusion=	F}', "");
Expect(0, 2391, '\P{Is_Composition_Exclusion=	F}', "");
Expect(1, 2391, '\P{^Is_Composition_Exclusion=	F}', "");
Expect(0, 2399, '\p{Is_Composition_Exclusion=	F}', "");
Expect(1, 2399, '\p{^Is_Composition_Exclusion=	F}', "");
Expect(1, 2399, '\P{Is_Composition_Exclusion=	F}', "");
Expect(0, 2399, '\P{^Is_Composition_Exclusion=	F}', "");
Error('\p{Is_CE=	False/a/}');
Error('\P{Is_CE=	False/a/}');
Expect(1, 2391, '\p{Is_CE=false}', "");
Expect(0, 2391, '\p{^Is_CE=false}', "");
Expect(0, 2391, '\P{Is_CE=false}', "");
Expect(1, 2391, '\P{^Is_CE=false}', "");
Expect(0, 2399, '\p{Is_CE=false}', "");
Expect(1, 2399, '\p{^Is_CE=false}', "");
Expect(1, 2399, '\P{Is_CE=false}', "");
Expect(0, 2399, '\P{^Is_CE=false}', "");
Expect(1, 2391, '\p{Is_CE=  false}', "");
Expect(0, 2391, '\p{^Is_CE=  false}', "");
Expect(0, 2391, '\P{Is_CE=  false}', "");
Expect(1, 2391, '\P{^Is_CE=  false}', "");
Expect(0, 2399, '\p{Is_CE=  false}', "");
Expect(1, 2399, '\p{^Is_CE=  false}', "");
Expect(1, 2399, '\P{Is_CE=  false}', "");
Expect(0, 2399, '\P{^Is_CE=  false}', "");
Error('\p{STerm=	_yes/a/}');
Error('\P{STerm=	_yes/a/}');
Expect(1, 33, '\p{STerm=yes}', "");
Expect(0, 33, '\p{^STerm=yes}', "");
Expect(0, 33, '\P{STerm=yes}', "");
Expect(1, 33, '\P{^STerm=yes}', "");
Expect(0, 32, '\p{STerm=yes}', "");
Expect(1, 32, '\p{^STerm=yes}', "");
Expect(1, 32, '\P{STerm=yes}', "");
Expect(0, 32, '\P{^STerm=yes}', "");
Expect(1, 33, '\p{STerm:_-Yes}', "");
Expect(0, 33, '\p{^STerm:_-Yes}', "");
Expect(0, 33, '\P{STerm:_-Yes}', "");
Expect(1, 33, '\P{^STerm:_-Yes}', "");
Expect(0, 32, '\p{STerm:_-Yes}', "");
Expect(1, 32, '\p{^STerm:_-Yes}', "");
Expect(1, 32, '\P{STerm:_-Yes}', "");
Expect(0, 32, '\P{^STerm:_-Yes}', "");
Error('\p{Is_STerm=-:=y}');
Error('\P{Is_STerm=-:=y}');
Expect(1, 33, '\p{Is_STerm=y}', "");
Expect(0, 33, '\p{^Is_STerm=y}', "");
Expect(0, 33, '\P{Is_STerm=y}', "");
Expect(1, 33, '\P{^Is_STerm=y}', "");
Expect(0, 32, '\p{Is_STerm=y}', "");
Expect(1, 32, '\p{^Is_STerm=y}', "");
Expect(1, 32, '\P{Is_STerm=y}', "");
Expect(0, 32, '\P{^Is_STerm=y}', "");
Expect(1, 33, '\p{Is_STerm=_-y}', "");
Expect(0, 33, '\p{^Is_STerm=_-y}', "");
Expect(0, 33, '\P{Is_STerm=_-y}', "");
Expect(1, 33, '\P{^Is_STerm=_-y}', "");
Expect(0, 32, '\p{Is_STerm=_-y}', "");
Expect(1, 32, '\p{^Is_STerm=_-y}', "");
Expect(1, 32, '\P{Is_STerm=_-y}', "");
Expect(0, 32, '\P{^Is_STerm=_-y}', "");
Error('\p{STerm=/a/T}');
Error('\P{STerm=/a/T}');
Expect(1, 33, '\p{STerm=t}', "");
Expect(0, 33, '\p{^STerm=t}', "");
Expect(0, 33, '\P{STerm=t}', "");
Expect(1, 33, '\P{^STerm=t}', "");
Expect(0, 32, '\p{STerm=t}', "");
Expect(1, 32, '\p{^STerm=t}', "");
Expect(1, 32, '\P{STerm=t}', "");
Expect(0, 32, '\P{^STerm=t}', "");
Expect(1, 33, '\p{STerm=-	t}', "");
Expect(0, 33, '\p{^STerm=-	t}', "");
Expect(0, 33, '\P{STerm=-	t}', "");
Expect(1, 33, '\P{^STerm=-	t}', "");
Expect(0, 32, '\p{STerm=-	t}', "");
Expect(1, 32, '\p{^STerm=-	t}', "");
Expect(1, 32, '\P{STerm=-	t}', "");
Expect(0, 32, '\P{^STerm=-	t}', "");
Error('\p{Is_STerm=/a/True}');
Error('\P{Is_STerm=/a/True}');
Expect(1, 33, '\p{Is_STerm=true}', "");
Expect(0, 33, '\p{^Is_STerm=true}', "");
Expect(0, 33, '\P{Is_STerm=true}', "");
Expect(1, 33, '\P{^Is_STerm=true}', "");
Expect(0, 32, '\p{Is_STerm=true}', "");
Expect(1, 32, '\p{^Is_STerm=true}', "");
Expect(1, 32, '\P{Is_STerm=true}', "");
Expect(0, 32, '\P{^Is_STerm=true}', "");
Expect(1, 33, '\p{Is_STerm=-True}', "");
Expect(0, 33, '\p{^Is_STerm=-True}', "");
Expect(0, 33, '\P{Is_STerm=-True}', "");
Expect(1, 33, '\P{^Is_STerm=-True}', "");
Expect(0, 32, '\p{Is_STerm=-True}', "");
Expect(1, 32, '\p{^Is_STerm=-True}', "");
Expect(1, 32, '\P{Is_STerm=-True}', "");
Expect(0, 32, '\P{^Is_STerm=-True}', "");
Error('\p{STerm=:= _NO}');
Error('\P{STerm=:= _NO}');
Expect(1, 32, '\p{STerm=no}', "");
Expect(0, 32, '\p{^STerm=no}', "");
Expect(0, 32, '\P{STerm=no}', "");
Expect(1, 32, '\P{^STerm=no}', "");
Expect(0, 33, '\p{STerm=no}', "");
Expect(1, 33, '\p{^STerm=no}', "");
Expect(1, 33, '\P{STerm=no}', "");
Expect(0, 33, '\P{^STerm=no}', "");
Expect(1, 32, '\p{STerm=No}', "");
Expect(0, 32, '\p{^STerm=No}', "");
Expect(0, 32, '\P{STerm=No}', "");
Expect(1, 32, '\P{^STerm=No}', "");
Expect(0, 33, '\p{STerm=No}', "");
Expect(1, 33, '\p{^STerm=No}', "");
Expect(1, 33, '\P{STerm=No}', "");
Expect(0, 33, '\P{^STerm=No}', "");
Error('\p{Is_STerm=	_N:=}');
Error('\P{Is_STerm=	_N:=}');
Expect(1, 32, '\p{Is_STerm=n}', "");
Expect(0, 32, '\p{^Is_STerm=n}', "");
Expect(0, 32, '\P{Is_STerm=n}', "");
Expect(1, 32, '\P{^Is_STerm=n}', "");
Expect(0, 33, '\p{Is_STerm=n}', "");
Expect(1, 33, '\p{^Is_STerm=n}', "");
Expect(1, 33, '\P{Is_STerm=n}', "");
Expect(0, 33, '\P{^Is_STerm=n}', "");
Expect(1, 32, '\p{Is_STerm=  n}', "");
Expect(0, 32, '\p{^Is_STerm=  n}', "");
Expect(0, 32, '\P{Is_STerm=  n}', "");
Expect(1, 32, '\P{^Is_STerm=  n}', "");
Expect(0, 33, '\p{Is_STerm=  n}', "");
Expect(1, 33, '\p{^Is_STerm=  n}', "");
Expect(1, 33, '\P{Is_STerm=  n}', "");
Expect(0, 33, '\P{^Is_STerm=  n}', "");
Error('\p{STerm=	F:=}');
Error('\P{STerm=	F:=}');
Expect(1, 32, '\p{STerm=f}', "");
Expect(0, 32, '\p{^STerm=f}', "");
Expect(0, 32, '\P{STerm=f}', "");
Expect(1, 32, '\P{^STerm=f}', "");
Expect(0, 33, '\p{STerm=f}', "");
Expect(1, 33, '\p{^STerm=f}', "");
Expect(1, 33, '\P{STerm=f}', "");
Expect(0, 33, '\P{^STerm=f}', "");
Expect(1, 32, '\p{STerm=_ F}', "");
Expect(0, 32, '\p{^STerm=_ F}', "");
Expect(0, 32, '\P{STerm=_ F}', "");
Expect(1, 32, '\P{^STerm=_ F}', "");
Expect(0, 33, '\p{STerm=_ F}', "");
Expect(1, 33, '\p{^STerm=_ F}', "");
Expect(1, 33, '\P{STerm=_ F}', "");
Expect(0, 33, '\P{^STerm=_ F}', "");
Error('\p{Is_STerm=:=-	false}');
Error('\P{Is_STerm=:=-	false}');
Expect(1, 32, '\p{Is_STerm=false}', "");
Expect(0, 32, '\p{^Is_STerm=false}', "");
Expect(0, 32, '\P{Is_STerm=false}', "");
Expect(1, 32, '\P{^Is_STerm=false}', "");
Expect(0, 33, '\p{Is_STerm=false}', "");
Expect(1, 33, '\p{^Is_STerm=false}', "");
Expect(1, 33, '\P{Is_STerm=false}', "");
Expect(0, 33, '\P{^Is_STerm=false}', "");
Expect(1, 32, '\p{Is_STerm=-False}', "");
Expect(0, 32, '\p{^Is_STerm=-False}', "");
Expect(0, 32, '\P{Is_STerm=-False}', "");
Expect(1, 32, '\P{^Is_STerm=-False}', "");
Expect(0, 33, '\p{Is_STerm=-False}', "");
Expect(1, 33, '\p{^Is_STerm=-False}', "");
Expect(1, 33, '\P{Is_STerm=-False}', "");
Expect(0, 33, '\P{^Is_STerm=-False}', "");
Error('\p{Decomposition_Type=_ Fraction:=}');
Error('\P{Decomposition_Type=_ Fraction:=}');
Expect(1, 190, '\p{Decomposition_Type=fraction}', "");
Expect(0, 190, '\p{^Decomposition_Type=fraction}', "");
Expect(0, 190, '\P{Decomposition_Type=fraction}', "");
Expect(1, 190, '\P{^Decomposition_Type=fraction}', "");
Expect(0, 187, '\p{Decomposition_Type=fraction}', "");
Expect(1, 187, '\p{^Decomposition_Type=fraction}', "");
Expect(1, 187, '\P{Decomposition_Type=fraction}', "");
Expect(0, 187, '\P{^Decomposition_Type=fraction}', "");
Expect(1, 190, '\p{Decomposition_Type=  Fraction}', "");
Expect(0, 190, '\p{^Decomposition_Type=  Fraction}', "");
Expect(0, 190, '\P{Decomposition_Type=  Fraction}', "");
Expect(1, 190, '\P{^Decomposition_Type=  Fraction}', "");
Expect(0, 187, '\p{Decomposition_Type=  Fraction}', "");
Expect(1, 187, '\p{^Decomposition_Type=  Fraction}', "");
Expect(1, 187, '\P{Decomposition_Type=  Fraction}', "");
Expect(0, 187, '\P{^Decomposition_Type=  Fraction}', "");
Error('\p{Dt:_	Fra/a/}');
Error('\P{Dt:_	Fra/a/}');
Expect(1, 190, '\p{Dt=fra}', "");
Expect(0, 190, '\p{^Dt=fra}', "");
Expect(0, 190, '\P{Dt=fra}', "");
Expect(1, 190, '\P{^Dt=fra}', "");
Expect(0, 187, '\p{Dt=fra}', "");
Expect(1, 187, '\p{^Dt=fra}', "");
Expect(1, 187, '\P{Dt=fra}', "");
Expect(0, 187, '\P{^Dt=fra}', "");
Expect(1, 190, '\p{Dt=		Fra}', "");
Expect(0, 190, '\p{^Dt=		Fra}', "");
Expect(0, 190, '\P{Dt=		Fra}', "");
Expect(1, 190, '\P{^Dt=		Fra}', "");
Expect(0, 187, '\p{Dt=		Fra}', "");
Expect(1, 187, '\p{^Dt=		Fra}', "");
Expect(1, 187, '\P{Dt=		Fra}', "");
Expect(0, 187, '\P{^Dt=		Fra}', "");
Error('\p{Is_Decomposition_Type=/a/	_FRACTION}');
Error('\P{Is_Decomposition_Type=/a/	_FRACTION}');
Expect(1, 190, '\p{Is_Decomposition_Type:	fraction}', "");
Expect(0, 190, '\p{^Is_Decomposition_Type:	fraction}', "");
Expect(0, 190, '\P{Is_Decomposition_Type:	fraction}', "");
Expect(1, 190, '\P{^Is_Decomposition_Type:	fraction}', "");
Expect(0, 187, '\p{Is_Decomposition_Type:	fraction}', "");
Expect(1, 187, '\p{^Is_Decomposition_Type:	fraction}', "");
Expect(1, 187, '\P{Is_Decomposition_Type:	fraction}', "");
Expect(0, 187, '\P{^Is_Decomposition_Type:	fraction}', "");
Expect(1, 190, '\p{Is_Decomposition_Type= 	fraction}', "");
Expect(0, 190, '\p{^Is_Decomposition_Type= 	fraction}', "");
Expect(0, 190, '\P{Is_Decomposition_Type= 	fraction}', "");
Expect(1, 190, '\P{^Is_Decomposition_Type= 	fraction}', "");
Expect(0, 187, '\p{Is_Decomposition_Type= 	fraction}', "");
Expect(1, 187, '\p{^Is_Decomposition_Type= 	fraction}', "");
Expect(1, 187, '\P{Is_Decomposition_Type= 	fraction}', "");
Expect(0, 187, '\P{^Is_Decomposition_Type= 	fraction}', "");
Error('\p{Is_Dt= FRA/a/}');
Error('\P{Is_Dt= FRA/a/}');
Expect(1, 190, '\p{Is_Dt=fra}', "");
Expect(0, 190, '\p{^Is_Dt=fra}', "");
Expect(0, 190, '\P{Is_Dt=fra}', "");
Expect(1, 190, '\P{^Is_Dt=fra}', "");
Expect(0, 187, '\p{Is_Dt=fra}', "");
Expect(1, 187, '\p{^Is_Dt=fra}', "");
Expect(1, 187, '\P{Is_Dt=fra}', "");
Expect(0, 187, '\P{^Is_Dt=fra}', "");
Expect(1, 190, '\p{Is_Dt=  Fra}', "");
Expect(0, 190, '\p{^Is_Dt=  Fra}', "");
Expect(0, 190, '\P{Is_Dt=  Fra}', "");
Expect(1, 190, '\P{^Is_Dt=  Fra}', "");
Expect(0, 187, '\p{Is_Dt=  Fra}', "");
Expect(1, 187, '\p{^Is_Dt=  Fra}', "");
Expect(1, 187, '\P{Is_Dt=  Fra}', "");
Expect(0, 187, '\P{^Is_Dt=  Fra}', "");
Error('\p{Decomposition_Type=circle/a/}');
Error('\P{Decomposition_Type=circle/a/}');
Expect(1, 9331, '\p{Decomposition_Type=circle}', "");
Expect(0, 9331, '\p{^Decomposition_Type=circle}', "");
Expect(0, 9331, '\P{Decomposition_Type=circle}', "");
Expect(1, 9331, '\P{^Decomposition_Type=circle}', "");
Expect(0, 9311, '\p{Decomposition_Type=circle}', "");
Expect(1, 9311, '\p{^Decomposition_Type=circle}', "");
Expect(1, 9311, '\P{Decomposition_Type=circle}', "");
Expect(0, 9311, '\P{^Decomposition_Type=circle}', "");
Expect(1, 9331, '\p{Decomposition_Type= Circle}', "");
Expect(0, 9331, '\p{^Decomposition_Type= Circle}', "");
Expect(0, 9331, '\P{Decomposition_Type= Circle}', "");
Expect(1, 9331, '\P{^Decomposition_Type= Circle}', "");
Expect(0, 9311, '\p{Decomposition_Type= Circle}', "");
Expect(1, 9311, '\p{^Decomposition_Type= Circle}', "");
Expect(1, 9311, '\P{Decomposition_Type= Circle}', "");
Expect(0, 9311, '\P{^Decomposition_Type= Circle}', "");
Error('\p{Dt= 	ENC/a/}');
Error('\P{Dt= 	ENC/a/}');
Expect(1, 9331, '\p{Dt:enc}', "");
Expect(0, 9331, '\p{^Dt:enc}', "");
Expect(0, 9331, '\P{Dt:enc}', "");
Expect(1, 9331, '\P{^Dt:enc}', "");
Expect(0, 9311, '\p{Dt:enc}', "");
Expect(1, 9311, '\p{^Dt:enc}', "");
Expect(1, 9311, '\P{Dt:enc}', "");
Expect(0, 9311, '\P{^Dt:enc}', "");
Expect(1, 9331, '\p{Dt=-_Enc}', "");
Expect(0, 9331, '\p{^Dt=-_Enc}', "");
Expect(0, 9331, '\P{Dt=-_Enc}', "");
Expect(1, 9331, '\P{^Dt=-_Enc}', "");
Expect(0, 9311, '\p{Dt=-_Enc}', "");
Expect(1, 9311, '\p{^Dt=-_Enc}', "");
Expect(1, 9311, '\P{Dt=-_Enc}', "");
Expect(0, 9311, '\P{^Dt=-_Enc}', "");
Error('\p{Is_Decomposition_Type=	/a/Circle}');
Error('\P{Is_Decomposition_Type=	/a/Circle}');
Expect(1, 9331, '\p{Is_Decomposition_Type=circle}', "");
Expect(0, 9331, '\p{^Is_Decomposition_Type=circle}', "");
Expect(0, 9331, '\P{Is_Decomposition_Type=circle}', "");
Expect(1, 9331, '\P{^Is_Decomposition_Type=circle}', "");
Expect(0, 9311, '\p{Is_Decomposition_Type=circle}', "");
Expect(1, 9311, '\p{^Is_Decomposition_Type=circle}', "");
Expect(1, 9311, '\P{Is_Decomposition_Type=circle}', "");
Expect(0, 9311, '\P{^Is_Decomposition_Type=circle}', "");
Expect(1, 9331, '\p{Is_Decomposition_Type=-CIRCLE}', "");
Expect(0, 9331, '\p{^Is_Decomposition_Type=-CIRCLE}', "");
Expect(0, 9331, '\P{Is_Decomposition_Type=-CIRCLE}', "");
Expect(1, 9331, '\P{^Is_Decomposition_Type=-CIRCLE}', "");
Expect(0, 9311, '\p{Is_Decomposition_Type=-CIRCLE}', "");
Expect(1, 9311, '\p{^Is_Decomposition_Type=-CIRCLE}', "");
Expect(1, 9311, '\P{Is_Decomposition_Type=-CIRCLE}', "");
Expect(0, 9311, '\P{^Is_Decomposition_Type=-CIRCLE}', "");
Error('\p{Is_Dt=/a/_-Enc}');
Error('\P{Is_Dt=/a/_-Enc}');
Expect(1, 9331, '\p{Is_Dt=enc}', "");
Expect(0, 9331, '\p{^Is_Dt=enc}', "");
Expect(0, 9331, '\P{Is_Dt=enc}', "");
Expect(1, 9331, '\P{^Is_Dt=enc}', "");
Expect(0, 9311, '\p{Is_Dt=enc}', "");
Expect(1, 9311, '\p{^Is_Dt=enc}', "");
Expect(1, 9311, '\P{Is_Dt=enc}', "");
Expect(0, 9311, '\P{^Is_Dt=enc}', "");
Expect(1, 9331, '\p{Is_Dt:    -Enc}', "");
Expect(0, 9331, '\p{^Is_Dt:    -Enc}', "");
Expect(0, 9331, '\P{Is_Dt:    -Enc}', "");
Expect(1, 9331, '\P{^Is_Dt:    -Enc}', "");
Expect(0, 9311, '\p{Is_Dt:    -Enc}', "");
Expect(1, 9311, '\p{^Is_Dt:    -Enc}', "");
Expect(1, 9311, '\P{Is_Dt:    -Enc}', "");
Expect(0, 9311, '\P{^Is_Dt:    -Enc}', "");
Error('\p{Decomposition_Type=:=-_initial}');
Error('\P{Decomposition_Type=:=-_initial}');
Expect(1, 64340, '\p{Decomposition_Type=initial}', "");
Expect(0, 64340, '\p{^Decomposition_Type=initial}', "");
Expect(0, 64340, '\P{Decomposition_Type=initial}', "");
Expect(1, 64340, '\P{^Decomposition_Type=initial}', "");
Expect(0, 64339, '\p{Decomposition_Type=initial}', "");
Expect(1, 64339, '\p{^Decomposition_Type=initial}', "");
Expect(1, 64339, '\P{Decomposition_Type=initial}', "");
Expect(0, 64339, '\P{^Decomposition_Type=initial}', "");
Error('\p{Dt=:=_ INIT}');
Error('\P{Dt=:=_ INIT}');
Expect(1, 64340, '\p{Dt=init}', "");
Expect(0, 64340, '\p{^Dt=init}', "");
Expect(0, 64340, '\P{Dt=init}', "");
Expect(1, 64340, '\P{^Dt=init}', "");
Expect(0, 64339, '\p{Dt=init}', "");
Expect(1, 64339, '\p{^Dt=init}', "");
Expect(1, 64339, '\P{Dt=init}', "");
Expect(0, 64339, '\P{^Dt=init}', "");
Expect(1, 64340, '\p{Dt=_-init}', "");
Expect(0, 64340, '\p{^Dt=_-init}', "");
Expect(0, 64340, '\P{Dt=_-init}', "");
Expect(1, 64340, '\P{^Dt=_-init}', "");
Expect(0, 64339, '\p{Dt=_-init}', "");
Expect(1, 64339, '\p{^Dt=_-init}', "");
Expect(1, 64339, '\P{Dt=_-init}', "");
Expect(0, 64339, '\P{^Dt=_-init}', "");
Error('\p{Is_Decomposition_Type=/a/ Initial}');
Error('\P{Is_Decomposition_Type=/a/ Initial}');
Expect(1, 64340, '\p{Is_Decomposition_Type=initial}', "");
Expect(0, 64340, '\p{^Is_Decomposition_Type=initial}', "");
Expect(0, 64340, '\P{Is_Decomposition_Type=initial}', "");
Expect(1, 64340, '\P{^Is_Decomposition_Type=initial}', "");
Expect(0, 64339, '\p{Is_Decomposition_Type=initial}', "");
Expect(1, 64339, '\p{^Is_Decomposition_Type=initial}', "");
Expect(1, 64339, '\P{Is_Decomposition_Type=initial}', "");
Expect(0, 64339, '\P{^Is_Decomposition_Type=initial}', "");
Expect(1, 64340, '\p{Is_Decomposition_Type= _initial}', "");
Expect(0, 64340, '\p{^Is_Decomposition_Type= _initial}', "");
Expect(0, 64340, '\P{Is_Decomposition_Type= _initial}', "");
Expect(1, 64340, '\P{^Is_Decomposition_Type= _initial}', "");
Expect(0, 64339, '\p{Is_Decomposition_Type= _initial}', "");
Expect(1, 64339, '\p{^Is_Decomposition_Type= _initial}', "");
Expect(1, 64339, '\P{Is_Decomposition_Type= _initial}', "");
Expect(0, 64339, '\P{^Is_Decomposition_Type= _initial}', "");
Error('\p{Is_Dt=-init/a/}');
Error('\P{Is_Dt=-init/a/}');
Expect(1, 64340, '\p{Is_Dt=init}', "");
Expect(0, 64340, '\p{^Is_Dt=init}', "");
Expect(0, 64340, '\P{Is_Dt=init}', "");
Expect(1, 64340, '\P{^Is_Dt=init}', "");
Expect(0, 64339, '\p{Is_Dt=init}', "");
Expect(1, 64339, '\p{^Is_Dt=init}', "");
Expect(1, 64339, '\P{Is_Dt=init}', "");
Expect(0, 64339, '\P{^Is_Dt=init}', "");
Expect(1, 64340, '\p{Is_Dt= 	Init}', "");
Expect(0, 64340, '\p{^Is_Dt= 	Init}', "");
Expect(0, 64340, '\P{Is_Dt= 	Init}', "");
Expect(1, 64340, '\P{^Is_Dt= 	Init}', "");
Expect(0, 64339, '\p{Is_Dt= 	Init}', "");
Expect(1, 64339, '\p{^Is_Dt= 	Init}', "");
Expect(1, 64339, '\P{Is_Dt= 	Init}', "");
Expect(0, 64339, '\P{^Is_Dt= 	Init}', "");
Error('\p{Decomposition_Type:_:=font}');
Error('\P{Decomposition_Type:_:=font}');
Expect(1, 8450, '\p{Decomposition_Type:	font}', "");
Expect(0, 8450, '\p{^Decomposition_Type:	font}', "");
Expect(0, 8450, '\P{Decomposition_Type:	font}', "");
Expect(1, 8450, '\P{^Decomposition_Type:	font}', "");
Expect(0, 8449, '\p{Decomposition_Type:	font}', "");
Expect(1, 8449, '\p{^Decomposition_Type:	font}', "");
Expect(1, 8449, '\P{Decomposition_Type:	font}', "");
Expect(0, 8449, '\P{^Decomposition_Type:	font}', "");
Expect(1, 8450, '\p{Decomposition_Type=	-Font}', "");
Expect(0, 8450, '\p{^Decomposition_Type=	-Font}', "");
Expect(0, 8450, '\P{Decomposition_Type=	-Font}', "");
Expect(1, 8450, '\P{^Decomposition_Type=	-Font}', "");
Expect(0, 8449, '\p{Decomposition_Type=	-Font}', "");
Expect(1, 8449, '\p{^Decomposition_Type=	-Font}', "");
Expect(1, 8449, '\P{Decomposition_Type=	-Font}', "");
Expect(0, 8449, '\P{^Decomposition_Type=	-Font}', "");
Error('\p{Dt=	/a/Font}');
Error('\P{Dt=	/a/Font}');
Expect(1, 8450, '\p{Dt=font}', "");
Expect(0, 8450, '\p{^Dt=font}', "");
Expect(0, 8450, '\P{Dt=font}', "");
Expect(1, 8450, '\P{^Dt=font}', "");
Expect(0, 8449, '\p{Dt=font}', "");
Expect(1, 8449, '\p{^Dt=font}', "");
Expect(1, 8449, '\P{Dt=font}', "");
Expect(0, 8449, '\P{^Dt=font}', "");
Expect(1, 8450, '\p{Dt=-	FONT}', "");
Expect(0, 8450, '\p{^Dt=-	FONT}', "");
Expect(0, 8450, '\P{Dt=-	FONT}', "");
Expect(1, 8450, '\P{^Dt=-	FONT}', "");
Expect(0, 8449, '\p{Dt=-	FONT}', "");
Expect(1, 8449, '\p{^Dt=-	FONT}', "");
Expect(1, 8449, '\P{Dt=-	FONT}', "");
Expect(0, 8449, '\P{^Dt=-	FONT}', "");
Error('\p{Is_Decomposition_Type=	 FONT:=}');
Error('\P{Is_Decomposition_Type=	 FONT:=}');
Expect(1, 8450, '\p{Is_Decomposition_Type=font}', "");
Expect(0, 8450, '\p{^Is_Decomposition_Type=font}', "");
Expect(0, 8450, '\P{Is_Decomposition_Type=font}', "");
Expect(1, 8450, '\P{^Is_Decomposition_Type=font}', "");
Expect(0, 8449, '\p{Is_Decomposition_Type=font}', "");
Expect(1, 8449, '\p{^Is_Decomposition_Type=font}', "");
Expect(1, 8449, '\P{Is_Decomposition_Type=font}', "");
Expect(0, 8449, '\P{^Is_Decomposition_Type=font}', "");
Expect(1, 8450, '\p{Is_Decomposition_Type=_	FONT}', "");
Expect(0, 8450, '\p{^Is_Decomposition_Type=_	FONT}', "");
Expect(0, 8450, '\P{Is_Decomposition_Type=_	FONT}', "");
Expect(1, 8450, '\P{^Is_Decomposition_Type=_	FONT}', "");
Expect(0, 8449, '\p{Is_Decomposition_Type=_	FONT}', "");
Expect(1, 8449, '\p{^Is_Decomposition_Type=_	FONT}', "");
Expect(1, 8449, '\P{Is_Decomposition_Type=_	FONT}', "");
Expect(0, 8449, '\P{^Is_Decomposition_Type=_	FONT}', "");
Error('\p{Is_Dt=:=FONT}');
Error('\P{Is_Dt=:=FONT}');
Expect(1, 8450, '\p{Is_Dt=font}', "");
Expect(0, 8450, '\p{^Is_Dt=font}', "");
Expect(0, 8450, '\P{Is_Dt=font}', "");
Expect(1, 8450, '\P{^Is_Dt=font}', "");
Expect(0, 8449, '\p{Is_Dt=font}', "");
Expect(1, 8449, '\p{^Is_Dt=font}', "");
Expect(1, 8449, '\P{Is_Dt=font}', "");
Expect(0, 8449, '\P{^Is_Dt=font}', "");
Expect(1, 8450, '\p{Is_Dt= 	font}', "");
Expect(0, 8450, '\p{^Is_Dt= 	font}', "");
Expect(0, 8450, '\P{Is_Dt= 	font}', "");
Expect(1, 8450, '\P{^Is_Dt= 	font}', "");
Expect(0, 8449, '\p{Is_Dt= 	font}', "");
Expect(1, 8449, '\p{^Is_Dt= 	font}', "");
Expect(1, 8449, '\P{Is_Dt= 	font}', "");
Expect(0, 8449, '\P{^Is_Dt= 	font}', "");
Error('\p{Decomposition_Type=_:=Nobreak}');
Error('\P{Decomposition_Type=_:=Nobreak}');
Expect(1, 160, '\p{Decomposition_Type:   nobreak}', "");
Expect(0, 160, '\p{^Decomposition_Type:   nobreak}', "");
Expect(0, 160, '\P{Decomposition_Type:   nobreak}', "");
Expect(1, 160, '\P{^Decomposition_Type:   nobreak}', "");
Expect(0, 159, '\p{Decomposition_Type:   nobreak}', "");
Expect(1, 159, '\p{^Decomposition_Type:   nobreak}', "");
Expect(1, 159, '\P{Decomposition_Type:   nobreak}', "");
Expect(0, 159, '\P{^Decomposition_Type:   nobreak}', "");
Expect(1, 160, '\p{Decomposition_Type=--NOBREAK}', "");
Expect(0, 160, '\p{^Decomposition_Type=--NOBREAK}', "");
Expect(0, 160, '\P{Decomposition_Type=--NOBREAK}', "");
Expect(1, 160, '\P{^Decomposition_Type=--NOBREAK}', "");
Expect(0, 159, '\p{Decomposition_Type=--NOBREAK}', "");
Expect(1, 159, '\p{^Decomposition_Type=--NOBREAK}', "");
Expect(1, 159, '\P{Decomposition_Type=--NOBREAK}', "");
Expect(0, 159, '\P{^Decomposition_Type=--NOBREAK}', "");
Error('\p{Dt=  Nb/a/}');
Error('\P{Dt=  Nb/a/}');
Expect(1, 160, '\p{Dt=nb}', "");
Expect(0, 160, '\p{^Dt=nb}', "");
Expect(0, 160, '\P{Dt=nb}', "");
Expect(1, 160, '\P{^Dt=nb}', "");
Expect(0, 159, '\p{Dt=nb}', "");
Expect(1, 159, '\p{^Dt=nb}', "");
Expect(1, 159, '\P{Dt=nb}', "");
Expect(0, 159, '\P{^Dt=nb}', "");
Expect(1, 160, '\p{Dt:   _-nb}', "");
Expect(0, 160, '\p{^Dt:   _-nb}', "");
Expect(0, 160, '\P{Dt:   _-nb}', "");
Expect(1, 160, '\P{^Dt:   _-nb}', "");
Expect(0, 159, '\p{Dt:   _-nb}', "");
Expect(1, 159, '\p{^Dt:   _-nb}', "");
Expect(1, 159, '\P{Dt:   _-nb}', "");
Expect(0, 159, '\P{^Dt:   _-nb}', "");
Error('\p{Is_Decomposition_Type=-/a/NOBREAK}');
Error('\P{Is_Decomposition_Type=-/a/NOBREAK}');
Expect(1, 160, '\p{Is_Decomposition_Type=nobreak}', "");
Expect(0, 160, '\p{^Is_Decomposition_Type=nobreak}', "");
Expect(0, 160, '\P{Is_Decomposition_Type=nobreak}', "");
Expect(1, 160, '\P{^Is_Decomposition_Type=nobreak}', "");
Expect(0, 159, '\p{Is_Decomposition_Type=nobreak}', "");
Expect(1, 159, '\p{^Is_Decomposition_Type=nobreak}', "");
Expect(1, 159, '\P{Is_Decomposition_Type=nobreak}', "");
Expect(0, 159, '\P{^Is_Decomposition_Type=nobreak}', "");
Expect(1, 160, '\p{Is_Decomposition_Type= nobreak}', "");
Expect(0, 160, '\p{^Is_Decomposition_Type= nobreak}', "");
Expect(0, 160, '\P{Is_Decomposition_Type= nobreak}', "");
Expect(1, 160, '\P{^Is_Decomposition_Type= nobreak}', "");
Expect(0, 159, '\p{Is_Decomposition_Type= nobreak}', "");
Expect(1, 159, '\p{^Is_Decomposition_Type= nobreak}', "");
Expect(1, 159, '\P{Is_Decomposition_Type= nobreak}', "");
Expect(0, 159, '\P{^Is_Decomposition_Type= nobreak}', "");
Error('\p{Is_Dt=/a/	 NB}');
Error('\P{Is_Dt=/a/	 NB}');
Expect(1, 160, '\p{Is_Dt=nb}', "");
Expect(0, 160, '\p{^Is_Dt=nb}', "");
Expect(0, 160, '\P{Is_Dt=nb}', "");
Expect(1, 160, '\P{^Is_Dt=nb}', "");
Expect(0, 159, '\p{Is_Dt=nb}', "");
Expect(1, 159, '\p{^Is_Dt=nb}', "");
Expect(1, 159, '\P{Is_Dt=nb}', "");
Expect(0, 159, '\P{^Is_Dt=nb}', "");
Expect(1, 160, '\p{Is_Dt=	_Nb}', "");
Expect(0, 160, '\p{^Is_Dt=	_Nb}', "");
Expect(0, 160, '\P{Is_Dt=	_Nb}', "");
Expect(1, 160, '\P{^Is_Dt=	_Nb}', "");
Expect(0, 159, '\p{Is_Dt=	_Nb}', "");
Expect(1, 159, '\p{^Is_Dt=	_Nb}', "");
Expect(1, 159, '\P{Is_Dt=	_Nb}', "");
Expect(0, 159, '\P{^Is_Dt=	_Nb}', "");
Error('\p{Decomposition_Type=/a/-NonCANONICAL}');
Error('\P{Decomposition_Type=/a/-NonCANONICAL}');
Expect(1, 160, '\p{Decomposition_Type=noncanonical}', "");
Expect(0, 160, '\p{^Decomposition_Type=noncanonical}', "");
Expect(0, 160, '\P{Decomposition_Type=noncanonical}', "");
Expect(1, 160, '\P{^Decomposition_Type=noncanonical}', "");
Expect(0, 159, '\p{Decomposition_Type=noncanonical}', "");
Expect(1, 159, '\p{^Decomposition_Type=noncanonical}', "");
Expect(1, 159, '\P{Decomposition_Type=noncanonical}', "");
Expect(0, 159, '\P{^Decomposition_Type=noncanonical}', "");
Expect(1, 160, '\p{Decomposition_Type= NON_Canonical}', "");
Expect(0, 160, '\p{^Decomposition_Type= NON_Canonical}', "");
Expect(0, 160, '\P{Decomposition_Type= NON_Canonical}', "");
Expect(1, 160, '\P{^Decomposition_Type= NON_Canonical}', "");
Expect(0, 159, '\p{Decomposition_Type= NON_Canonical}', "");
Expect(1, 159, '\p{^Decomposition_Type= NON_Canonical}', "");
Expect(1, 159, '\P{Decomposition_Type= NON_Canonical}', "");
Expect(0, 159, '\P{^Decomposition_Type= NON_Canonical}', "");
Error('\p{Dt= -non	Canon/a/}');
Error('\P{Dt= -non	Canon/a/}');
Expect(1, 160, '\p{Dt=noncanon}', "");
Expect(0, 160, '\p{^Dt=noncanon}', "");
Expect(0, 160, '\P{Dt=noncanon}', "");
Expect(1, 160, '\P{^Dt=noncanon}', "");
Expect(0, 159, '\p{Dt=noncanon}', "");
Expect(1, 159, '\p{^Dt=noncanon}', "");
Expect(1, 159, '\P{Dt=noncanon}', "");
Expect(0, 159, '\P{^Dt=noncanon}', "");
Expect(1, 160, '\p{Dt=_non-CANON}', "");
Expect(0, 160, '\p{^Dt=_non-CANON}', "");
Expect(0, 160, '\P{Dt=_non-CANON}', "");
Expect(1, 160, '\P{^Dt=_non-CANON}', "");
Expect(0, 159, '\p{Dt=_non-CANON}', "");
Expect(1, 159, '\p{^Dt=_non-CANON}', "");
Expect(1, 159, '\P{Dt=_non-CANON}', "");
Expect(0, 159, '\P{^Dt=_non-CANON}', "");
Error('\p{Is_Decomposition_Type=/a/Non_canonical}');
Error('\P{Is_Decomposition_Type=/a/Non_canonical}');
Expect(1, 160, '\p{Is_Decomposition_Type: noncanonical}', "");
Expect(0, 160, '\p{^Is_Decomposition_Type: noncanonical}', "");
Expect(0, 160, '\P{Is_Decomposition_Type: noncanonical}', "");
Expect(1, 160, '\P{^Is_Decomposition_Type: noncanonical}', "");
Expect(0, 159, '\p{Is_Decomposition_Type: noncanonical}', "");
Expect(1, 159, '\p{^Is_Decomposition_Type: noncanonical}', "");
Expect(1, 159, '\P{Is_Decomposition_Type: noncanonical}', "");
Expect(0, 159, '\P{^Is_Decomposition_Type: noncanonical}', "");
Expect(1, 160, '\p{Is_Decomposition_Type: NonCanonical}', "");
Expect(0, 160, '\p{^Is_Decomposition_Type: NonCanonical}', "");
Expect(0, 160, '\P{Is_Decomposition_Type: NonCanonical}', "");
Expect(1, 160, '\P{^Is_Decomposition_Type: NonCanonical}', "");
Expect(0, 159, '\p{Is_Decomposition_Type: NonCanonical}', "");
Expect(1, 159, '\p{^Is_Decomposition_Type: NonCanonical}', "");
Expect(1, 159, '\P{Is_Decomposition_Type: NonCanonical}', "");
Expect(0, 159, '\P{^Is_Decomposition_Type: NonCanonical}', "");
Error('\p{Is_Dt=-/a/NON CANON}');
Error('\P{Is_Dt=-/a/NON CANON}');
Expect(1, 160, '\p{Is_Dt=noncanon}', "");
Expect(0, 160, '\p{^Is_Dt=noncanon}', "");
Expect(0, 160, '\P{Is_Dt=noncanon}', "");
Expect(1, 160, '\P{^Is_Dt=noncanon}', "");
Expect(0, 159, '\p{Is_Dt=noncanon}', "");
Expect(1, 159, '\p{^Is_Dt=noncanon}', "");
Expect(1, 159, '\P{Is_Dt=noncanon}', "");
Expect(0, 159, '\P{^Is_Dt=noncanon}', "");
Expect(1, 160, '\p{Is_Dt=  NON_canon}', "");
Expect(0, 160, '\p{^Is_Dt=  NON_canon}', "");
Expect(0, 160, '\P{Is_Dt=  NON_canon}', "");
Expect(1, 160, '\P{^Is_Dt=  NON_canon}', "");
Expect(0, 159, '\p{Is_Dt=  NON_canon}', "");
Expect(1, 159, '\p{^Is_Dt=  NON_canon}', "");
Expect(1, 159, '\P{Is_Dt=  NON_canon}', "");
Expect(0, 159, '\P{^Is_Dt=  NON_canon}', "");
Error('\p{Decomposition_Type=	/a/Final}');
Error('\P{Decomposition_Type=	/a/Final}');
Expect(1, 64337, '\p{Decomposition_Type=final}', "");
Expect(0, 64337, '\p{^Decomposition_Type=final}', "");
Expect(0, 64337, '\P{Decomposition_Type=final}', "");
Expect(1, 64337, '\P{^Decomposition_Type=final}', "");
Expect(0, 64336, '\p{Decomposition_Type=final}', "");
Expect(1, 64336, '\p{^Decomposition_Type=final}', "");
Expect(1, 64336, '\P{Decomposition_Type=final}', "");
Expect(0, 64336, '\P{^Decomposition_Type=final}', "");
Expect(1, 64337, '\p{Decomposition_Type=__FINAL}', "");
Expect(0, 64337, '\p{^Decomposition_Type=__FINAL}', "");
Expect(0, 64337, '\P{Decomposition_Type=__FINAL}', "");
Expect(1, 64337, '\P{^Decomposition_Type=__FINAL}', "");
Expect(0, 64336, '\p{Decomposition_Type=__FINAL}', "");
Expect(1, 64336, '\p{^Decomposition_Type=__FINAL}', "");
Expect(1, 64336, '\P{Decomposition_Type=__FINAL}', "");
Expect(0, 64336, '\P{^Decomposition_Type=__FINAL}', "");
Error('\p{Dt=:=	 FIN}');
Error('\P{Dt=:=	 FIN}');
Expect(1, 64337, '\p{Dt=fin}', "");
Expect(0, 64337, '\p{^Dt=fin}', "");
Expect(0, 64337, '\P{Dt=fin}', "");
Expect(1, 64337, '\P{^Dt=fin}', "");
Expect(0, 64336, '\p{Dt=fin}', "");
Expect(1, 64336, '\p{^Dt=fin}', "");
Expect(1, 64336, '\P{Dt=fin}', "");
Expect(0, 64336, '\P{^Dt=fin}', "");
Expect(1, 64337, '\p{Dt=_-Fin}', "");
Expect(0, 64337, '\p{^Dt=_-Fin}', "");
Expect(0, 64337, '\P{Dt=_-Fin}', "");
Expect(1, 64337, '\P{^Dt=_-Fin}', "");
Expect(0, 64336, '\p{Dt=_-Fin}', "");
Expect(1, 64336, '\p{^Dt=_-Fin}', "");
Expect(1, 64336, '\P{Dt=_-Fin}', "");
Expect(0, 64336, '\P{^Dt=_-Fin}', "");
Error('\p{Is_Decomposition_Type:-:=FINAL}');
Error('\P{Is_Decomposition_Type:-:=FINAL}');
Expect(1, 64337, '\p{Is_Decomposition_Type=final}', "");
Expect(0, 64337, '\p{^Is_Decomposition_Type=final}', "");
Expect(0, 64337, '\P{Is_Decomposition_Type=final}', "");
Expect(1, 64337, '\P{^Is_Decomposition_Type=final}', "");
Expect(0, 64336, '\p{Is_Decomposition_Type=final}', "");
Expect(1, 64336, '\p{^Is_Decomposition_Type=final}', "");
Expect(1, 64336, '\P{Is_Decomposition_Type=final}', "");
Expect(0, 64336, '\P{^Is_Decomposition_Type=final}', "");
Expect(1, 64337, '\p{Is_Decomposition_Type=_-FINAL}', "");
Expect(0, 64337, '\p{^Is_Decomposition_Type=_-FINAL}', "");
Expect(0, 64337, '\P{Is_Decomposition_Type=_-FINAL}', "");
Expect(1, 64337, '\P{^Is_Decomposition_Type=_-FINAL}', "");
Expect(0, 64336, '\p{Is_Decomposition_Type=_-FINAL}', "");
Expect(1, 64336, '\p{^Is_Decomposition_Type=_-FINAL}', "");
Expect(1, 64336, '\P{Is_Decomposition_Type=_-FINAL}', "");
Expect(0, 64336, '\P{^Is_Decomposition_Type=_-FINAL}', "");
Error('\p{Is_Dt=/a/-	Fin}');
Error('\P{Is_Dt=/a/-	Fin}');
Expect(1, 64337, '\p{Is_Dt=fin}', "");
Expect(0, 64337, '\p{^Is_Dt=fin}', "");
Expect(0, 64337, '\P{Is_Dt=fin}', "");
Expect(1, 64337, '\P{^Is_Dt=fin}', "");
Expect(0, 64336, '\p{Is_Dt=fin}', "");
Expect(1, 64336, '\p{^Is_Dt=fin}', "");
Expect(1, 64336, '\P{Is_Dt=fin}', "");
Expect(0, 64336, '\P{^Is_Dt=fin}', "");
Expect(1, 64337, '\p{Is_Dt=		Fin}', "");
Expect(0, 64337, '\p{^Is_Dt=		Fin}', "");
Expect(0, 64337, '\P{Is_Dt=		Fin}', "");
Expect(1, 64337, '\P{^Is_Dt=		Fin}', "");
Expect(0, 64336, '\p{Is_Dt=		Fin}', "");
Expect(1, 64336, '\p{^Is_Dt=		Fin}', "");
Expect(1, 64336, '\P{Is_Dt=		Fin}', "");
Expect(0, 64336, '\P{^Is_Dt=		Fin}', "");
Error('\p{Decomposition_Type=/a/_ Wide}');
Error('\P{Decomposition_Type=/a/_ Wide}');
Expect(1, 12288, '\p{Decomposition_Type=wide}', "");
Expect(0, 12288, '\p{^Decomposition_Type=wide}', "");
Expect(0, 12288, '\P{Decomposition_Type=wide}', "");
Expect(1, 12288, '\P{^Decomposition_Type=wide}', "");
Expect(0, 12287, '\p{Decomposition_Type=wide}', "");
Expect(1, 12287, '\p{^Decomposition_Type=wide}', "");
Expect(1, 12287, '\P{Decomposition_Type=wide}', "");
Expect(0, 12287, '\P{^Decomposition_Type=wide}', "");
Expect(1, 12288, '\p{Decomposition_Type=-	Wide}', "");
Expect(0, 12288, '\p{^Decomposition_Type=-	Wide}', "");
Expect(0, 12288, '\P{Decomposition_Type=-	Wide}', "");
Expect(1, 12288, '\P{^Decomposition_Type=-	Wide}', "");
Expect(0, 12287, '\p{Decomposition_Type=-	Wide}', "");
Expect(1, 12287, '\p{^Decomposition_Type=-	Wide}', "");
Expect(1, 12287, '\P{Decomposition_Type=-	Wide}', "");
Expect(0, 12287, '\P{^Decomposition_Type=-	Wide}', "");
Error('\p{Dt=	/a/wide}');
Error('\P{Dt=	/a/wide}');
Expect(1, 12288, '\p{Dt=wide}', "");
Expect(0, 12288, '\p{^Dt=wide}', "");
Expect(0, 12288, '\P{Dt=wide}', "");
Expect(1, 12288, '\P{^Dt=wide}', "");
Expect(0, 12287, '\p{Dt=wide}', "");
Expect(1, 12287, '\p{^Dt=wide}', "");
Expect(1, 12287, '\P{Dt=wide}', "");
Expect(0, 12287, '\P{^Dt=wide}', "");
Expect(1, 12288, '\p{Dt=	wide}', "");
Expect(0, 12288, '\p{^Dt=	wide}', "");
Expect(0, 12288, '\P{Dt=	wide}', "");
Expect(1, 12288, '\P{^Dt=	wide}', "");
Expect(0, 12287, '\p{Dt=	wide}', "");
Expect(1, 12287, '\p{^Dt=	wide}', "");
Expect(1, 12287, '\P{Dt=	wide}', "");
Expect(0, 12287, '\P{^Dt=	wide}', "");
Error('\p{Is_Decomposition_Type= /a/Wide}');
Error('\P{Is_Decomposition_Type= /a/Wide}');
Expect(1, 12288, '\p{Is_Decomposition_Type=wide}', "");
Expect(0, 12288, '\p{^Is_Decomposition_Type=wide}', "");
Expect(0, 12288, '\P{Is_Decomposition_Type=wide}', "");
Expect(1, 12288, '\P{^Is_Decomposition_Type=wide}', "");
Expect(0, 12287, '\p{Is_Decomposition_Type=wide}', "");
Expect(1, 12287, '\p{^Is_Decomposition_Type=wide}', "");
Expect(1, 12287, '\P{Is_Decomposition_Type=wide}', "");
Expect(0, 12287, '\P{^Is_Decomposition_Type=wide}', "");
Expect(1, 12288, '\p{Is_Decomposition_Type=	 Wide}', "");
Expect(0, 12288, '\p{^Is_Decomposition_Type=	 Wide}', "");
Expect(0, 12288, '\P{Is_Decomposition_Type=	 Wide}', "");
Expect(1, 12288, '\P{^Is_Decomposition_Type=	 Wide}', "");
Expect(0, 12287, '\p{Is_Decomposition_Type=	 Wide}', "");
Expect(1, 12287, '\p{^Is_Decomposition_Type=	 Wide}', "");
Expect(1, 12287, '\P{Is_Decomposition_Type=	 Wide}', "");
Expect(0, 12287, '\P{^Is_Decomposition_Type=	 Wide}', "");
Error('\p{Is_Dt= -Wide:=}');
Error('\P{Is_Dt= -Wide:=}');
Expect(1, 12288, '\p{Is_Dt=wide}', "");
Expect(0, 12288, '\p{^Is_Dt=wide}', "");
Expect(0, 12288, '\P{Is_Dt=wide}', "");
Expect(1, 12288, '\P{^Is_Dt=wide}', "");
Expect(0, 12287, '\p{Is_Dt=wide}', "");
Expect(1, 12287, '\p{^Is_Dt=wide}', "");
Expect(1, 12287, '\P{Is_Dt=wide}', "");
Expect(0, 12287, '\P{^Is_Dt=wide}', "");
Expect(1, 12288, '\p{Is_Dt:	 WIDE}', "");
Expect(0, 12288, '\p{^Is_Dt:	 WIDE}', "");
Expect(0, 12288, '\P{Is_Dt:	 WIDE}', "");
Expect(1, 12288, '\P{^Is_Dt:	 WIDE}', "");
Expect(0, 12287, '\p{Is_Dt:	 WIDE}', "");
Expect(1, 12287, '\p{^Is_Dt:	 WIDE}', "");
Expect(1, 12287, '\P{Is_Dt:	 WIDE}', "");
Expect(0, 12287, '\P{^Is_Dt:	 WIDE}', "");
Error('\p{Decomposition_Type= :=Canonical}');
Error('\P{Decomposition_Type= :=Canonical}');
Expect(1, 197, '\p{Decomposition_Type=canonical}', "");
Expect(0, 197, '\p{^Decomposition_Type=canonical}', "");
Expect(0, 197, '\P{Decomposition_Type=canonical}', "");
Expect(1, 197, '\P{^Decomposition_Type=canonical}', "");
Expect(0, 191, '\p{Decomposition_Type=canonical}', "");
Expect(1, 191, '\p{^Decomposition_Type=canonical}', "");
Expect(1, 191, '\P{Decomposition_Type=canonical}', "");
Expect(0, 191, '\P{^Decomposition_Type=canonical}', "");
Expect(1, 197, '\p{Decomposition_Type= Canonical}', "");
Expect(0, 197, '\p{^Decomposition_Type= Canonical}', "");
Expect(0, 197, '\P{Decomposition_Type= Canonical}', "");
Expect(1, 197, '\P{^Decomposition_Type= Canonical}', "");
Expect(0, 191, '\p{Decomposition_Type= Canonical}', "");
Expect(1, 191, '\p{^Decomposition_Type= Canonical}', "");
Expect(1, 191, '\P{Decomposition_Type= Canonical}', "");
Expect(0, 191, '\P{^Decomposition_Type= Canonical}', "");
Error('\p{Dt=:=	can}');
Error('\P{Dt=:=	can}');
Expect(1, 197, '\p{Dt=can}', "");
Expect(0, 197, '\p{^Dt=can}', "");
Expect(0, 197, '\P{Dt=can}', "");
Expect(1, 197, '\P{^Dt=can}', "");
Expect(0, 191, '\p{Dt=can}', "");
Expect(1, 191, '\p{^Dt=can}', "");
Expect(1, 191, '\P{Dt=can}', "");
Expect(0, 191, '\P{^Dt=can}', "");
Expect(1, 197, '\p{Dt=_-can}', "");
Expect(0, 197, '\p{^Dt=_-can}', "");
Expect(0, 197, '\P{Dt=_-can}', "");
Expect(1, 197, '\P{^Dt=_-can}', "");
Expect(0, 191, '\p{Dt=_-can}', "");
Expect(1, 191, '\p{^Dt=_-can}', "");
Expect(1, 191, '\P{Dt=_-can}', "");
Expect(0, 191, '\P{^Dt=_-can}', "");
Error('\p{Is_Decomposition_Type=_Canonical:=}');
Error('\P{Is_Decomposition_Type=_Canonical:=}');
Expect(1, 197, '\p{Is_Decomposition_Type=canonical}', "");
Expect(0, 197, '\p{^Is_Decomposition_Type=canonical}', "");
Expect(0, 197, '\P{Is_Decomposition_Type=canonical}', "");
Expect(1, 197, '\P{^Is_Decomposition_Type=canonical}', "");
Expect(0, 191, '\p{Is_Decomposition_Type=canonical}', "");
Expect(1, 191, '\p{^Is_Decomposition_Type=canonical}', "");
Expect(1, 191, '\P{Is_Decomposition_Type=canonical}', "");
Expect(0, 191, '\P{^Is_Decomposition_Type=canonical}', "");
Expect(1, 197, '\p{Is_Decomposition_Type=Canonical}', "");
Expect(0, 197, '\p{^Is_Decomposition_Type=Canonical}', "");
Expect(0, 197, '\P{Is_Decomposition_Type=Canonical}', "");
Expect(1, 197, '\P{^Is_Decomposition_Type=Canonical}', "");
Expect(0, 191, '\p{Is_Decomposition_Type=Canonical}', "");
Expect(1, 191, '\p{^Is_Decomposition_Type=Canonical}', "");
Expect(1, 191, '\P{Is_Decomposition_Type=Canonical}', "");
Expect(0, 191, '\P{^Is_Decomposition_Type=Canonical}', "");
Error('\p{Is_Dt= 	CAN/a/}');
Error('\P{Is_Dt= 	CAN/a/}');
Expect(1, 197, '\p{Is_Dt: can}', "");
Expect(0, 197, '\p{^Is_Dt: can}', "");
Expect(0, 197, '\P{Is_Dt: can}', "");
Expect(1, 197, '\P{^Is_Dt: can}', "");
Expect(0, 191, '\p{Is_Dt: can}', "");
Expect(1, 191, '\p{^Is_Dt: can}', "");
Expect(1, 191, '\P{Is_Dt: can}', "");
Expect(0, 191, '\P{^Is_Dt: can}', "");
Expect(1, 197, '\p{Is_Dt=- Can}', "");
Expect(0, 197, '\p{^Is_Dt=- Can}', "");
Expect(0, 197, '\P{Is_Dt=- Can}', "");
Expect(1, 197, '\P{^Is_Dt=- Can}', "");
Expect(0, 191, '\p{Is_Dt=- Can}', "");
Expect(1, 191, '\p{^Is_Dt=- Can}', "");
Expect(1, 191, '\P{Is_Dt=- Can}', "");
Expect(0, 191, '\P{^Is_Dt=- Can}', "");
Error('\p{Decomposition_Type=:=Vertical}');
Error('\P{Decomposition_Type=:=Vertical}');
Expect(1, 12447, '\p{Decomposition_Type=vertical}', "");
Expect(0, 12447, '\p{^Decomposition_Type=vertical}', "");
Expect(0, 12447, '\P{Decomposition_Type=vertical}', "");
Expect(1, 12447, '\P{^Decomposition_Type=vertical}', "");
Expect(0, 12446, '\p{Decomposition_Type=vertical}', "");
Expect(1, 12446, '\p{^Decomposition_Type=vertical}', "");
Expect(1, 12446, '\P{Decomposition_Type=vertical}', "");
Expect(0, 12446, '\P{^Decomposition_Type=vertical}', "");
Expect(1, 12447, '\p{Decomposition_Type=	VERTICAL}', "");
Expect(0, 12447, '\p{^Decomposition_Type=	VERTICAL}', "");
Expect(0, 12447, '\P{Decomposition_Type=	VERTICAL}', "");
Expect(1, 12447, '\P{^Decomposition_Type=	VERTICAL}', "");
Expect(0, 12446, '\p{Decomposition_Type=	VERTICAL}', "");
Expect(1, 12446, '\p{^Decomposition_Type=	VERTICAL}', "");
Expect(1, 12446, '\P{Decomposition_Type=	VERTICAL}', "");
Expect(0, 12446, '\P{^Decomposition_Type=	VERTICAL}', "");
Error('\p{Dt=/a/ _vert}');
Error('\P{Dt=/a/ _vert}');
Expect(1, 12447, '\p{Dt:   vert}', "");
Expect(0, 12447, '\p{^Dt:   vert}', "");
Expect(0, 12447, '\P{Dt:   vert}', "");
Expect(1, 12447, '\P{^Dt:   vert}', "");
Expect(0, 12446, '\p{Dt:   vert}', "");
Expect(1, 12446, '\p{^Dt:   vert}', "");
Expect(1, 12446, '\P{Dt:   vert}', "");
Expect(0, 12446, '\P{^Dt:   vert}', "");
Expect(1, 12447, '\p{Dt= 	vert}', "");
Expect(0, 12447, '\p{^Dt= 	vert}', "");
Expect(0, 12447, '\P{Dt= 	vert}', "");
Expect(1, 12447, '\P{^Dt= 	vert}', "");
Expect(0, 12446, '\p{Dt= 	vert}', "");
Expect(1, 12446, '\p{^Dt= 	vert}', "");
Expect(1, 12446, '\P{Dt= 	vert}', "");
Expect(0, 12446, '\P{^Dt= 	vert}', "");
Error('\p{Is_Decomposition_Type= -vertical:=}');
Error('\P{Is_Decomposition_Type= -vertical:=}');
Expect(1, 12447, '\p{Is_Decomposition_Type=vertical}', "");
Expect(0, 12447, '\p{^Is_Decomposition_Type=vertical}', "");
Expect(0, 12447, '\P{Is_Decomposition_Type=vertical}', "");
Expect(1, 12447, '\P{^Is_Decomposition_Type=vertical}', "");
Expect(0, 12446, '\p{Is_Decomposition_Type=vertical}', "");
Expect(1, 12446, '\p{^Is_Decomposition_Type=vertical}', "");
Expect(1, 12446, '\P{Is_Decomposition_Type=vertical}', "");
Expect(0, 12446, '\P{^Is_Decomposition_Type=vertical}', "");
Expect(1, 12447, '\p{Is_Decomposition_Type=-	Vertical}', "");
Expect(0, 12447, '\p{^Is_Decomposition_Type=-	Vertical}', "");
Expect(0, 12447, '\P{Is_Decomposition_Type=-	Vertical}', "");
Expect(1, 12447, '\P{^Is_Decomposition_Type=-	Vertical}', "");
Expect(0, 12446, '\p{Is_Decomposition_Type=-	Vertical}', "");
Expect(1, 12446, '\p{^Is_Decomposition_Type=-	Vertical}', "");
Expect(1, 12446, '\P{Is_Decomposition_Type=-	Vertical}', "");
Expect(0, 12446, '\P{^Is_Decomposition_Type=-	Vertical}', "");
Error('\p{Is_Dt:   /a/--Vert}');
Error('\P{Is_Dt:   /a/--Vert}');
Expect(1, 12447, '\p{Is_Dt=vert}', "");
Expect(0, 12447, '\p{^Is_Dt=vert}', "");
Expect(0, 12447, '\P{Is_Dt=vert}', "");
Expect(1, 12447, '\P{^Is_Dt=vert}', "");
Expect(0, 12446, '\p{Is_Dt=vert}', "");
Expect(1, 12446, '\p{^Is_Dt=vert}', "");
Expect(1, 12446, '\P{Is_Dt=vert}', "");
Expect(0, 12446, '\P{^Is_Dt=vert}', "");
Expect(1, 12447, '\p{Is_Dt=--vert}', "");
Expect(0, 12447, '\p{^Is_Dt=--vert}', "");
Expect(0, 12447, '\P{Is_Dt=--vert}', "");
Expect(1, 12447, '\P{^Is_Dt=--vert}', "");
Expect(0, 12446, '\p{Is_Dt=--vert}', "");
Expect(1, 12446, '\p{^Is_Dt=--vert}', "");
Expect(1, 12446, '\P{Is_Dt=--vert}', "");
Expect(0, 12446, '\P{^Is_Dt=--vert}', "");
Error('\p{Decomposition_Type=__MEDIAL/a/}');
Error('\P{Decomposition_Type=__MEDIAL/a/}');
Expect(1, 64341, '\p{Decomposition_Type=medial}', "");
Expect(0, 64341, '\p{^Decomposition_Type=medial}', "");
Expect(0, 64341, '\P{Decomposition_Type=medial}', "");
Expect(1, 64341, '\P{^Decomposition_Type=medial}', "");
Expect(0, 64340, '\p{Decomposition_Type=medial}', "");
Expect(1, 64340, '\p{^Decomposition_Type=medial}', "");
Expect(1, 64340, '\P{Decomposition_Type=medial}', "");
Expect(0, 64340, '\P{^Decomposition_Type=medial}', "");
Expect(1, 64341, '\p{Decomposition_Type=	-Medial}', "");
Expect(0, 64341, '\p{^Decomposition_Type=	-Medial}', "");
Expect(0, 64341, '\P{Decomposition_Type=	-Medial}', "");
Expect(1, 64341, '\P{^Decomposition_Type=	-Medial}', "");
Expect(0, 64340, '\p{Decomposition_Type=	-Medial}', "");
Expect(1, 64340, '\p{^Decomposition_Type=	-Medial}', "");
Expect(1, 64340, '\P{Decomposition_Type=	-Medial}', "");
Expect(0, 64340, '\P{^Decomposition_Type=	-Medial}', "");
Error('\p{Dt= /a/MED}');
Error('\P{Dt= /a/MED}');
Expect(1, 64341, '\p{Dt=med}', "");
Expect(0, 64341, '\p{^Dt=med}', "");
Expect(0, 64341, '\P{Dt=med}', "");
Expect(1, 64341, '\P{^Dt=med}', "");
Expect(0, 64340, '\p{Dt=med}', "");
Expect(1, 64340, '\p{^Dt=med}', "");
Expect(1, 64340, '\P{Dt=med}', "");
Expect(0, 64340, '\P{^Dt=med}', "");
Expect(1, 64341, '\p{Dt:    Med}', "");
Expect(0, 64341, '\p{^Dt:    Med}', "");
Expect(0, 64341, '\P{Dt:    Med}', "");
Expect(1, 64341, '\P{^Dt:    Med}', "");
Expect(0, 64340, '\p{Dt:    Med}', "");
Expect(1, 64340, '\p{^Dt:    Med}', "");
Expect(1, 64340, '\P{Dt:    Med}', "");
Expect(0, 64340, '\P{^Dt:    Med}', "");
Error('\p{Is_Decomposition_Type=_	Medial:=}');
Error('\P{Is_Decomposition_Type=_	Medial:=}');
Expect(1, 64341, '\p{Is_Decomposition_Type:medial}', "");
Expect(0, 64341, '\p{^Is_Decomposition_Type:medial}', "");
Expect(0, 64341, '\P{Is_Decomposition_Type:medial}', "");
Expect(1, 64341, '\P{^Is_Decomposition_Type:medial}', "");
Expect(0, 64340, '\p{Is_Decomposition_Type:medial}', "");
Expect(1, 64340, '\p{^Is_Decomposition_Type:medial}', "");
Expect(1, 64340, '\P{Is_Decomposition_Type:medial}', "");
Expect(0, 64340, '\P{^Is_Decomposition_Type:medial}', "");
Expect(1, 64341, '\p{Is_Decomposition_Type= medial}', "");
Expect(0, 64341, '\p{^Is_Decomposition_Type= medial}', "");
Expect(0, 64341, '\P{Is_Decomposition_Type= medial}', "");
Expect(1, 64341, '\P{^Is_Decomposition_Type= medial}', "");
Expect(0, 64340, '\p{Is_Decomposition_Type= medial}', "");
Expect(1, 64340, '\p{^Is_Decomposition_Type= medial}', "");
Expect(1, 64340, '\P{Is_Decomposition_Type= medial}', "");
Expect(0, 64340, '\P{^Is_Decomposition_Type= medial}', "");
Error('\p{Is_Dt=	:=Med}');
Error('\P{Is_Dt=	:=Med}');
Expect(1, 64341, '\p{Is_Dt=med}', "");
Expect(0, 64341, '\p{^Is_Dt=med}', "");
Expect(0, 64341, '\P{Is_Dt=med}', "");
Expect(1, 64341, '\P{^Is_Dt=med}', "");
Expect(0, 64340, '\p{Is_Dt=med}', "");
Expect(1, 64340, '\p{^Is_Dt=med}', "");
Expect(1, 64340, '\P{Is_Dt=med}', "");
Expect(0, 64340, '\P{^Is_Dt=med}', "");
Expect(1, 64341, '\p{Is_Dt=	med}', "");
Expect(0, 64341, '\p{^Is_Dt=	med}', "");
Expect(0, 64341, '\P{Is_Dt=	med}', "");
Expect(1, 64341, '\P{^Is_Dt=	med}', "");
Expect(0, 64340, '\p{Is_Dt=	med}', "");
Expect(1, 64340, '\p{^Is_Dt=	med}', "");
Expect(1, 64340, '\P{Is_Dt=	med}', "");
Expect(0, 64340, '\P{^Is_Dt=	med}', "");
Error('\p{Decomposition_Type=/a/__narrow}');
Error('\P{Decomposition_Type=/a/__narrow}');
Expect(1, 65470, '\p{Decomposition_Type=narrow}', "");
Expect(0, 65470, '\p{^Decomposition_Type=narrow}', "");
Expect(0, 65470, '\P{Decomposition_Type=narrow}', "");
Expect(1, 65470, '\P{^Decomposition_Type=narrow}', "");
Expect(0, 65376, '\p{Decomposition_Type=narrow}', "");
Expect(1, 65376, '\p{^Decomposition_Type=narrow}', "");
Expect(1, 65376, '\P{Decomposition_Type=narrow}', "");
Expect(0, 65376, '\P{^Decomposition_Type=narrow}', "");
Expect(1, 65470, '\p{Decomposition_Type= Narrow}', "");
Expect(0, 65470, '\p{^Decomposition_Type= Narrow}', "");
Expect(0, 65470, '\P{Decomposition_Type= Narrow}', "");
Expect(1, 65470, '\P{^Decomposition_Type= Narrow}', "");
Expect(0, 65376, '\p{Decomposition_Type= Narrow}', "");
Expect(1, 65376, '\p{^Decomposition_Type= Narrow}', "");
Expect(1, 65376, '\P{Decomposition_Type= Narrow}', "");
Expect(0, 65376, '\P{^Decomposition_Type= Narrow}', "");
Error('\p{Dt=/a/NAR}');
Error('\P{Dt=/a/NAR}');
Expect(1, 65470, '\p{Dt=nar}', "");
Expect(0, 65470, '\p{^Dt=nar}', "");
Expect(0, 65470, '\P{Dt=nar}', "");
Expect(1, 65470, '\P{^Dt=nar}', "");
Expect(0, 65376, '\p{Dt=nar}', "");
Expect(1, 65376, '\p{^Dt=nar}', "");
Expect(1, 65376, '\P{Dt=nar}', "");
Expect(0, 65376, '\P{^Dt=nar}', "");
Expect(1, 65470, '\p{Dt=__NAR}', "");
Expect(0, 65470, '\p{^Dt=__NAR}', "");
Expect(0, 65470, '\P{Dt=__NAR}', "");
Expect(1, 65470, '\P{^Dt=__NAR}', "");
Expect(0, 65376, '\p{Dt=__NAR}', "");
Expect(1, 65376, '\p{^Dt=__NAR}', "");
Expect(1, 65376, '\P{Dt=__NAR}', "");
Expect(0, 65376, '\P{^Dt=__NAR}', "");
Error('\p{Is_Decomposition_Type=_ NARROW:=}');
Error('\P{Is_Decomposition_Type=_ NARROW:=}');
Expect(1, 65470, '\p{Is_Decomposition_Type=narrow}', "");
Expect(0, 65470, '\p{^Is_Decomposition_Type=narrow}', "");
Expect(0, 65470, '\P{Is_Decomposition_Type=narrow}', "");
Expect(1, 65470, '\P{^Is_Decomposition_Type=narrow}', "");
Expect(0, 65376, '\p{Is_Decomposition_Type=narrow}', "");
Expect(1, 65376, '\p{^Is_Decomposition_Type=narrow}', "");
Expect(1, 65376, '\P{Is_Decomposition_Type=narrow}', "");
Expect(0, 65376, '\P{^Is_Decomposition_Type=narrow}', "");
Expect(1, 65470, '\p{Is_Decomposition_Type=	Narrow}', "");
Expect(0, 65470, '\p{^Is_Decomposition_Type=	Narrow}', "");
Expect(0, 65470, '\P{Is_Decomposition_Type=	Narrow}', "");
Expect(1, 65470, '\P{^Is_Decomposition_Type=	Narrow}', "");
Expect(0, 65376, '\p{Is_Decomposition_Type=	Narrow}', "");
Expect(1, 65376, '\p{^Is_Decomposition_Type=	Narrow}', "");
Expect(1, 65376, '\P{Is_Decomposition_Type=	Narrow}', "");
Expect(0, 65376, '\P{^Is_Decomposition_Type=	Narrow}', "");
Error('\p{Is_Dt=/a/NAR}');
Error('\P{Is_Dt=/a/NAR}');
Expect(1, 65470, '\p{Is_Dt=nar}', "");
Expect(0, 65470, '\p{^Is_Dt=nar}', "");
Expect(0, 65470, '\P{Is_Dt=nar}', "");
Expect(1, 65470, '\P{^Is_Dt=nar}', "");
Expect(0, 65376, '\p{Is_Dt=nar}', "");
Expect(1, 65376, '\p{^Is_Dt=nar}', "");
Expect(1, 65376, '\P{Is_Dt=nar}', "");
Expect(0, 65376, '\P{^Is_Dt=nar}', "");
Expect(1, 65470, '\p{Is_Dt=-Nar}', "");
Expect(0, 65470, '\p{^Is_Dt=-Nar}', "");
Expect(0, 65470, '\P{Is_Dt=-Nar}', "");
Expect(1, 65470, '\P{^Is_Dt=-Nar}', "");
Expect(0, 65376, '\p{Is_Dt=-Nar}', "");
Expect(1, 65376, '\p{^Is_Dt=-Nar}', "");
Expect(1, 65376, '\P{Is_Dt=-Nar}', "");
Expect(0, 65376, '\P{^Is_Dt=-Nar}', "");
Error('\p{Decomposition_Type=:=--sub}');
Error('\P{Decomposition_Type=:=--sub}');
Expect(1, 7530, '\p{Decomposition_Type=sub}', "");
Expect(0, 7530, '\p{^Decomposition_Type=sub}', "");
Expect(0, 7530, '\P{Decomposition_Type=sub}', "");
Expect(1, 7530, '\P{^Decomposition_Type=sub}', "");
Expect(0, 7521, '\p{Decomposition_Type=sub}', "");
Expect(1, 7521, '\p{^Decomposition_Type=sub}', "");
Expect(1, 7521, '\P{Decomposition_Type=sub}', "");
Expect(0, 7521, '\P{^Decomposition_Type=sub}', "");
Expect(1, 7530, '\p{Decomposition_Type= _sub}', "");
Expect(0, 7530, '\p{^Decomposition_Type= _sub}', "");
Expect(0, 7530, '\P{Decomposition_Type= _sub}', "");
Expect(1, 7530, '\P{^Decomposition_Type= _sub}', "");
Expect(0, 7521, '\p{Decomposition_Type= _sub}', "");
Expect(1, 7521, '\p{^Decomposition_Type= _sub}', "");
Expect(1, 7521, '\P{Decomposition_Type= _sub}', "");
Expect(0, 7521, '\P{^Decomposition_Type= _sub}', "");
Error('\p{Dt=-sub:=}');
Error('\P{Dt=-sub:=}');
Expect(1, 7530, '\p{Dt=sub}', "");
Expect(0, 7530, '\p{^Dt=sub}', "");
Expect(0, 7530, '\P{Dt=sub}', "");
Expect(1, 7530, '\P{^Dt=sub}', "");
Expect(0, 7521, '\p{Dt=sub}', "");
Expect(1, 7521, '\p{^Dt=sub}', "");
Expect(1, 7521, '\P{Dt=sub}', "");
Expect(0, 7521, '\P{^Dt=sub}', "");
Expect(1, 7530, '\p{Dt=	sub}', "");
Expect(0, 7530, '\p{^Dt=	sub}', "");
Expect(0, 7530, '\P{Dt=	sub}', "");
Expect(1, 7530, '\P{^Dt=	sub}', "");
Expect(0, 7521, '\p{Dt=	sub}', "");
Expect(1, 7521, '\p{^Dt=	sub}', "");
Expect(1, 7521, '\P{Dt=	sub}', "");
Expect(0, 7521, '\P{^Dt=	sub}', "");
Error('\p{Is_Decomposition_Type= 	Sub/a/}');
Error('\P{Is_Decomposition_Type= 	Sub/a/}');
Expect(1, 7530, '\p{Is_Decomposition_Type=sub}', "");
Expect(0, 7530, '\p{^Is_Decomposition_Type=sub}', "");
Expect(0, 7530, '\P{Is_Decomposition_Type=sub}', "");
Expect(1, 7530, '\P{^Is_Decomposition_Type=sub}', "");
Expect(0, 7521, '\p{Is_Decomposition_Type=sub}', "");
Expect(1, 7521, '\p{^Is_Decomposition_Type=sub}', "");
Expect(1, 7521, '\P{Is_Decomposition_Type=sub}', "");
Expect(0, 7521, '\P{^Is_Decomposition_Type=sub}', "");
Expect(1, 7530, '\p{Is_Decomposition_Type=_Sub}', "");
Expect(0, 7530, '\p{^Is_Decomposition_Type=_Sub}', "");
Expect(0, 7530, '\P{Is_Decomposition_Type=_Sub}', "");
Expect(1, 7530, '\P{^Is_Decomposition_Type=_Sub}', "");
Expect(0, 7521, '\p{Is_Decomposition_Type=_Sub}', "");
Expect(1, 7521, '\p{^Is_Decomposition_Type=_Sub}', "");
Expect(1, 7521, '\P{Is_Decomposition_Type=_Sub}', "");
Expect(0, 7521, '\P{^Is_Decomposition_Type=_Sub}', "");
Error('\p{Is_Dt: _/a/SUB}');
Error('\P{Is_Dt: _/a/SUB}');
Expect(1, 7530, '\p{Is_Dt=sub}', "");
Expect(0, 7530, '\p{^Is_Dt=sub}', "");
Expect(0, 7530, '\P{Is_Dt=sub}', "");
Expect(1, 7530, '\P{^Is_Dt=sub}', "");
Expect(0, 7521, '\p{Is_Dt=sub}', "");
Expect(1, 7521, '\p{^Is_Dt=sub}', "");
Expect(1, 7521, '\P{Is_Dt=sub}', "");
Expect(0, 7521, '\P{^Is_Dt=sub}', "");
Expect(1, 7530, '\p{Is_Dt=- Sub}', "");
Expect(0, 7530, '\p{^Is_Dt=- Sub}', "");
Expect(0, 7530, '\P{Is_Dt=- Sub}', "");
Expect(1, 7530, '\P{^Is_Dt=- Sub}', "");
Expect(0, 7521, '\p{Is_Dt=- Sub}', "");
Expect(1, 7521, '\p{^Is_Dt=- Sub}', "");
Expect(1, 7521, '\P{Is_Dt=- Sub}', "");
Expect(0, 7521, '\P{^Is_Dt=- Sub}', "");
Error('\p{Decomposition_Type=-	SQUARE:=}');
Error('\P{Decomposition_Type=-	SQUARE:=}');
Expect(1, 12880, '\p{Decomposition_Type=square}', "");
Expect(0, 12880, '\p{^Decomposition_Type=square}', "");
Expect(0, 12880, '\P{Decomposition_Type=square}', "");
Expect(1, 12880, '\P{^Decomposition_Type=square}', "");
Expect(0, 12879, '\p{Decomposition_Type=square}', "");
Expect(1, 12879, '\p{^Decomposition_Type=square}', "");
Expect(1, 12879, '\P{Decomposition_Type=square}', "");
Expect(0, 12879, '\P{^Decomposition_Type=square}', "");
Expect(1, 12880, '\p{Decomposition_Type=		Square}', "");
Expect(0, 12880, '\p{^Decomposition_Type=		Square}', "");
Expect(0, 12880, '\P{Decomposition_Type=		Square}', "");
Expect(1, 12880, '\P{^Decomposition_Type=		Square}', "");
Expect(0, 12879, '\p{Decomposition_Type=		Square}', "");
Expect(1, 12879, '\p{^Decomposition_Type=		Square}', "");
Expect(1, 12879, '\P{Decomposition_Type=		Square}', "");
Expect(0, 12879, '\P{^Decomposition_Type=		Square}', "");
Error('\p{Dt=-Sqr/a/}');
Error('\P{Dt=-Sqr/a/}');
Expect(1, 12880, '\p{Dt=sqr}', "");
Expect(0, 12880, '\p{^Dt=sqr}', "");
Expect(0, 12880, '\P{Dt=sqr}', "");
Expect(1, 12880, '\P{^Dt=sqr}', "");
Expect(0, 12879, '\p{Dt=sqr}', "");
Expect(1, 12879, '\p{^Dt=sqr}', "");
Expect(1, 12879, '\P{Dt=sqr}', "");
Expect(0, 12879, '\P{^Dt=sqr}', "");
Expect(1, 12880, '\p{Dt=--Sqr}', "");
Expect(0, 12880, '\p{^Dt=--Sqr}', "");
Expect(0, 12880, '\P{Dt=--Sqr}', "");
Expect(1, 12880, '\P{^Dt=--Sqr}', "");
Expect(0, 12879, '\p{Dt=--Sqr}', "");
Expect(1, 12879, '\p{^Dt=--Sqr}', "");
Expect(1, 12879, '\P{Dt=--Sqr}', "");
Expect(0, 12879, '\P{^Dt=--Sqr}', "");
Error('\p{Is_Decomposition_Type=/a/	 square}');
Error('\P{Is_Decomposition_Type=/a/	 square}');
Expect(1, 12880, '\p{Is_Decomposition_Type=square}', "");
Expect(0, 12880, '\p{^Is_Decomposition_Type=square}', "");
Expect(0, 12880, '\P{Is_Decomposition_Type=square}', "");
Expect(1, 12880, '\P{^Is_Decomposition_Type=square}', "");
Expect(0, 12879, '\p{Is_Decomposition_Type=square}', "");
Expect(1, 12879, '\p{^Is_Decomposition_Type=square}', "");
Expect(1, 12879, '\P{Is_Decomposition_Type=square}', "");
Expect(0, 12879, '\P{^Is_Decomposition_Type=square}', "");
Expect(1, 12880, '\p{Is_Decomposition_Type= Square}', "");
Expect(0, 12880, '\p{^Is_Decomposition_Type= Square}', "");
Expect(0, 12880, '\P{Is_Decomposition_Type= Square}', "");
Expect(1, 12880, '\P{^Is_Decomposition_Type= Square}', "");
Expect(0, 12879, '\p{Is_Decomposition_Type= Square}', "");
Expect(1, 12879, '\p{^Is_Decomposition_Type= Square}', "");
Expect(1, 12879, '\P{Is_Decomposition_Type= Square}', "");
Expect(0, 12879, '\P{^Is_Decomposition_Type= Square}', "");
Error('\p{Is_Dt=/a/ -SQR}');
Error('\P{Is_Dt=/a/ -SQR}');
Expect(1, 12880, '\p{Is_Dt=sqr}', "");
Expect(0, 12880, '\p{^Is_Dt=sqr}', "");
Expect(0, 12880, '\P{Is_Dt=sqr}', "");
Expect(1, 12880, '\P{^Is_Dt=sqr}', "");
Expect(0, 12879, '\p{Is_Dt=sqr}', "");
Expect(1, 12879, '\p{^Is_Dt=sqr}', "");
Expect(1, 12879, '\P{Is_Dt=sqr}', "");
Expect(0, 12879, '\P{^Is_Dt=sqr}', "");
Expect(1, 12880, '\p{Is_Dt=		Sqr}', "");
Expect(0, 12880, '\p{^Is_Dt=		Sqr}', "");
Expect(0, 12880, '\P{Is_Dt=		Sqr}', "");
Expect(1, 12880, '\P{^Is_Dt=		Sqr}', "");
Expect(0, 12879, '\p{Is_Dt=		Sqr}', "");
Expect(1, 12879, '\p{^Is_Dt=		Sqr}', "");
Expect(1, 12879, '\P{Is_Dt=		Sqr}', "");
Expect(0, 12879, '\P{^Is_Dt=		Sqr}', "");
Error('\p{Decomposition_Type=	/a/SMALL}');
Error('\P{Decomposition_Type=	/a/SMALL}');
Expect(1, 65106, '\p{Decomposition_Type=small}', "");
Expect(0, 65106, '\p{^Decomposition_Type=small}', "");
Expect(0, 65106, '\P{Decomposition_Type=small}', "");
Expect(1, 65106, '\P{^Decomposition_Type=small}', "");
Expect(0, 65103, '\p{Decomposition_Type=small}', "");
Expect(1, 65103, '\p{^Decomposition_Type=small}', "");
Expect(1, 65103, '\P{Decomposition_Type=small}', "");
Expect(0, 65103, '\P{^Decomposition_Type=small}', "");
Expect(1, 65106, '\p{Decomposition_Type=--Small}', "");
Expect(0, 65106, '\p{^Decomposition_Type=--Small}', "");
Expect(0, 65106, '\P{Decomposition_Type=--Small}', "");
Expect(1, 65106, '\P{^Decomposition_Type=--Small}', "");
Expect(0, 65103, '\p{Decomposition_Type=--Small}', "");
Expect(1, 65103, '\p{^Decomposition_Type=--Small}', "");
Expect(1, 65103, '\P{Decomposition_Type=--Small}', "");
Expect(0, 65103, '\P{^Decomposition_Type=--Small}', "");
Error('\p{Dt= Sml/a/}');
Error('\P{Dt= Sml/a/}');
Expect(1, 65106, '\p{Dt=sml}', "");
Expect(0, 65106, '\p{^Dt=sml}', "");
Expect(0, 65106, '\P{Dt=sml}', "");
Expect(1, 65106, '\P{^Dt=sml}', "");
Expect(0, 65103, '\p{Dt=sml}', "");
Expect(1, 65103, '\p{^Dt=sml}', "");
Expect(1, 65103, '\P{Dt=sml}', "");
Expect(0, 65103, '\P{^Dt=sml}', "");
Expect(1, 65106, '\p{Dt=- SML}', "");
Expect(0, 65106, '\p{^Dt=- SML}', "");
Expect(0, 65106, '\P{Dt=- SML}', "");
Expect(1, 65106, '\P{^Dt=- SML}', "");
Expect(0, 65103, '\p{Dt=- SML}', "");
Expect(1, 65103, '\p{^Dt=- SML}', "");
Expect(1, 65103, '\P{Dt=- SML}', "");
Expect(0, 65103, '\P{^Dt=- SML}', "");
Error('\p{Is_Decomposition_Type=  Small/a/}');
Error('\P{Is_Decomposition_Type=  Small/a/}');
Expect(1, 65106, '\p{Is_Decomposition_Type=small}', "");
Expect(0, 65106, '\p{^Is_Decomposition_Type=small}', "");
Expect(0, 65106, '\P{Is_Decomposition_Type=small}', "");
Expect(1, 65106, '\P{^Is_Decomposition_Type=small}', "");
Expect(0, 65103, '\p{Is_Decomposition_Type=small}', "");
Expect(1, 65103, '\p{^Is_Decomposition_Type=small}', "");
Expect(1, 65103, '\P{Is_Decomposition_Type=small}', "");
Expect(0, 65103, '\P{^Is_Decomposition_Type=small}', "");
Expect(1, 65106, '\p{Is_Decomposition_Type=_ Small}', "");
Expect(0, 65106, '\p{^Is_Decomposition_Type=_ Small}', "");
Expect(0, 65106, '\P{Is_Decomposition_Type=_ Small}', "");
Expect(1, 65106, '\P{^Is_Decomposition_Type=_ Small}', "");
Expect(0, 65103, '\p{Is_Decomposition_Type=_ Small}', "");
Expect(1, 65103, '\p{^Is_Decomposition_Type=_ Small}', "");
Expect(1, 65103, '\P{Is_Decomposition_Type=_ Small}', "");
Expect(0, 65103, '\P{^Is_Decomposition_Type=_ Small}', "");
Error('\p{Is_Dt=/a/-	Sml}');
Error('\P{Is_Dt=/a/-	Sml}');
Expect(1, 65106, '\p{Is_Dt:	sml}', "");
Expect(0, 65106, '\p{^Is_Dt:	sml}', "");
Expect(0, 65106, '\P{Is_Dt:	sml}', "");
Expect(1, 65106, '\P{^Is_Dt:	sml}', "");
Expect(0, 65103, '\p{Is_Dt:	sml}', "");
Expect(1, 65103, '\p{^Is_Dt:	sml}', "");
Expect(1, 65103, '\P{Is_Dt:	sml}', "");
Expect(0, 65103, '\P{^Is_Dt:	sml}', "");
Expect(1, 65106, '\p{Is_Dt= 	SML}', "");
Expect(0, 65106, '\p{^Is_Dt= 	SML}', "");
Expect(0, 65106, '\P{Is_Dt= 	SML}', "");
Expect(1, 65106, '\P{^Is_Dt= 	SML}', "");
Expect(0, 65103, '\p{Is_Dt= 	SML}', "");
Expect(1, 65103, '\p{^Is_Dt= 	SML}', "");
Expect(1, 65103, '\P{Is_Dt= 	SML}', "");
Expect(0, 65103, '\P{^Is_Dt= 	SML}', "");
Error('\p{Decomposition_Type=_/a/NONE}');
Error('\P{Decomposition_Type=_/a/NONE}');
Expect(1, 159, '\p{Decomposition_Type=none}', "");
Expect(0, 159, '\p{^Decomposition_Type=none}', "");
Expect(0, 159, '\P{Decomposition_Type=none}', "");
Expect(1, 159, '\P{^Decomposition_Type=none}', "");
Expect(0, 160, '\p{Decomposition_Type=none}', "");
Expect(1, 160, '\p{^Decomposition_Type=none}', "");
Expect(1, 160, '\P{Decomposition_Type=none}', "");
Expect(0, 160, '\P{^Decomposition_Type=none}', "");
Expect(1, 159, '\p{Decomposition_Type=--None}', "");
Expect(0, 159, '\p{^Decomposition_Type=--None}', "");
Expect(0, 159, '\P{Decomposition_Type=--None}', "");
Expect(1, 159, '\P{^Decomposition_Type=--None}', "");
Expect(0, 160, '\p{Decomposition_Type=--None}', "");
Expect(1, 160, '\p{^Decomposition_Type=--None}', "");
Expect(1, 160, '\P{Decomposition_Type=--None}', "");
Expect(0, 160, '\P{^Decomposition_Type=--None}', "");
Error('\p{Dt=/a/	None}');
Error('\P{Dt=/a/	None}');
Expect(1, 159, '\p{Dt=none}', "");
Expect(0, 159, '\p{^Dt=none}', "");
Expect(0, 159, '\P{Dt=none}', "");
Expect(1, 159, '\P{^Dt=none}', "");
Expect(0, 160, '\p{Dt=none}', "");
Expect(1, 160, '\p{^Dt=none}', "");
Expect(1, 160, '\P{Dt=none}', "");
Expect(0, 160, '\P{^Dt=none}', "");
Expect(1, 159, '\p{Dt=  none}', "");
Expect(0, 159, '\p{^Dt=  none}', "");
Expect(0, 159, '\P{Dt=  none}', "");
Expect(1, 159, '\P{^Dt=  none}', "");
Expect(0, 160, '\p{Dt=  none}', "");
Expect(1, 160, '\p{^Dt=  none}', "");
Expect(1, 160, '\P{Dt=  none}', "");
Expect(0, 160, '\P{^Dt=  none}', "");
Error('\p{Is_Decomposition_Type=:=-	NONE}');
Error('\P{Is_Decomposition_Type=:=-	NONE}');
Expect(1, 159, '\p{Is_Decomposition_Type=none}', "");
Expect(0, 159, '\p{^Is_Decomposition_Type=none}', "");
Expect(0, 159, '\P{Is_Decomposition_Type=none}', "");
Expect(1, 159, '\P{^Is_Decomposition_Type=none}', "");
Expect(0, 160, '\p{Is_Decomposition_Type=none}', "");
Expect(1, 160, '\p{^Is_Decomposition_Type=none}', "");
Expect(1, 160, '\P{Is_Decomposition_Type=none}', "");
Expect(0, 160, '\P{^Is_Decomposition_Type=none}', "");
Expect(1, 159, '\p{Is_Decomposition_Type=		None}', "");
Expect(0, 159, '\p{^Is_Decomposition_Type=		None}', "");
Expect(0, 159, '\P{Is_Decomposition_Type=		None}', "");
Expect(1, 159, '\P{^Is_Decomposition_Type=		None}', "");
Expect(0, 160, '\p{Is_Decomposition_Type=		None}', "");
Expect(1, 160, '\p{^Is_Decomposition_Type=		None}', "");
Expect(1, 160, '\P{Is_Decomposition_Type=		None}', "");
Expect(0, 160, '\P{^Is_Decomposition_Type=		None}', "");
Error('\p{Is_Dt= None/a/}');
Error('\P{Is_Dt= None/a/}');
Expect(1, 159, '\p{Is_Dt=none}', "");
Expect(0, 159, '\p{^Is_Dt=none}', "");
Expect(0, 159, '\P{Is_Dt=none}', "");
Expect(1, 159, '\P{^Is_Dt=none}', "");
Expect(0, 160, '\p{Is_Dt=none}', "");
Expect(1, 160, '\p{^Is_Dt=none}', "");
Expect(1, 160, '\P{Is_Dt=none}', "");
Expect(0, 160, '\P{^Is_Dt=none}', "");
Expect(1, 159, '\p{Is_Dt=None}', "");
Expect(0, 159, '\p{^Is_Dt=None}', "");
Expect(0, 159, '\P{Is_Dt=None}', "");
Expect(1, 159, '\P{^Is_Dt=None}', "");
Expect(0, 160, '\p{Is_Dt=None}', "");
Expect(1, 160, '\p{^Is_Dt=None}', "");
Expect(1, 160, '\P{Is_Dt=None}', "");
Expect(0, 160, '\P{^Is_Dt=None}', "");
Error('\p{Decomposition_Type= /a/Isolated}');
Error('\P{Decomposition_Type= /a/Isolated}');
Expect(1, 64336, '\p{Decomposition_Type=isolated}', "");
Expect(0, 64336, '\p{^Decomposition_Type=isolated}', "");
Expect(0, 64336, '\P{Decomposition_Type=isolated}', "");
Expect(1, 64336, '\P{^Decomposition_Type=isolated}', "");
Expect(0, 64335, '\p{Decomposition_Type=isolated}', "");
Expect(1, 64335, '\p{^Decomposition_Type=isolated}', "");
Expect(1, 64335, '\P{Decomposition_Type=isolated}', "");
Expect(0, 64335, '\P{^Decomposition_Type=isolated}', "");
Expect(1, 64336, '\p{Decomposition_Type= -Isolated}', "");
Expect(0, 64336, '\p{^Decomposition_Type= -Isolated}', "");
Expect(0, 64336, '\P{Decomposition_Type= -Isolated}', "");
Expect(1, 64336, '\P{^Decomposition_Type= -Isolated}', "");
Expect(0, 64335, '\p{Decomposition_Type= -Isolated}', "");
Expect(1, 64335, '\p{^Decomposition_Type= -Isolated}', "");
Expect(1, 64335, '\P{Decomposition_Type= -Isolated}', "");
Expect(0, 64335, '\P{^Decomposition_Type= -Isolated}', "");
Error('\p{Dt=:=	ISO}');
Error('\P{Dt=:=	ISO}');
Expect(1, 64336, '\p{Dt=iso}', "");
Expect(0, 64336, '\p{^Dt=iso}', "");
Expect(0, 64336, '\P{Dt=iso}', "");
Expect(1, 64336, '\P{^Dt=iso}', "");
Expect(0, 64335, '\p{Dt=iso}', "");
Expect(1, 64335, '\p{^Dt=iso}', "");
Expect(1, 64335, '\P{Dt=iso}', "");
Expect(0, 64335, '\P{^Dt=iso}', "");
Expect(1, 64336, '\p{Dt=_ iso}', "");
Expect(0, 64336, '\p{^Dt=_ iso}', "");
Expect(0, 64336, '\P{Dt=_ iso}', "");
Expect(1, 64336, '\P{^Dt=_ iso}', "");
Expect(0, 64335, '\p{Dt=_ iso}', "");
Expect(1, 64335, '\p{^Dt=_ iso}', "");
Expect(1, 64335, '\P{Dt=_ iso}', "");
Expect(0, 64335, '\P{^Dt=_ iso}', "");
Error('\p{Is_Decomposition_Type=_-Isolated/a/}');
Error('\P{Is_Decomposition_Type=_-Isolated/a/}');
Expect(1, 64336, '\p{Is_Decomposition_Type=isolated}', "");
Expect(0, 64336, '\p{^Is_Decomposition_Type=isolated}', "");
Expect(0, 64336, '\P{Is_Decomposition_Type=isolated}', "");
Expect(1, 64336, '\P{^Is_Decomposition_Type=isolated}', "");
Expect(0, 64335, '\p{Is_Decomposition_Type=isolated}', "");
Expect(1, 64335, '\p{^Is_Decomposition_Type=isolated}', "");
Expect(1, 64335, '\P{Is_Decomposition_Type=isolated}', "");
Expect(0, 64335, '\P{^Is_Decomposition_Type=isolated}', "");
Expect(1, 64336, '\p{Is_Decomposition_Type=-	Isolated}', "");
Expect(0, 64336, '\p{^Is_Decomposition_Type=-	Isolated}', "");
Expect(0, 64336, '\P{Is_Decomposition_Type=-	Isolated}', "");
Expect(1, 64336, '\P{^Is_Decomposition_Type=-	Isolated}', "");
Expect(0, 64335, '\p{Is_Decomposition_Type=-	Isolated}', "");
Expect(1, 64335, '\p{^Is_Decomposition_Type=-	Isolated}', "");
Expect(1, 64335, '\P{Is_Decomposition_Type=-	Isolated}', "");
Expect(0, 64335, '\P{^Is_Decomposition_Type=-	Isolated}', "");
Error('\p{Is_Dt:  	iso:=}');
Error('\P{Is_Dt:  	iso:=}');
Expect(1, 64336, '\p{Is_Dt=iso}', "");
Expect(0, 64336, '\p{^Is_Dt=iso}', "");
Expect(0, 64336, '\P{Is_Dt=iso}', "");
Expect(1, 64336, '\P{^Is_Dt=iso}', "");
Expect(0, 64335, '\p{Is_Dt=iso}', "");
Expect(1, 64335, '\p{^Is_Dt=iso}', "");
Expect(1, 64335, '\P{Is_Dt=iso}', "");
Expect(0, 64335, '\P{^Is_Dt=iso}', "");
Expect(1, 64336, '\p{Is_Dt=		iso}', "");
Expect(0, 64336, '\p{^Is_Dt=		iso}', "");
Expect(0, 64336, '\P{Is_Dt=		iso}', "");
Expect(1, 64336, '\P{^Is_Dt=		iso}', "");
Expect(0, 64335, '\p{Is_Dt=		iso}', "");
Expect(1, 64335, '\p{^Is_Dt=		iso}', "");
Expect(1, 64335, '\P{Is_Dt=		iso}', "");
Expect(0, 64335, '\P{^Is_Dt=		iso}', "");
Error('\p{Decomposition_Type=:=_	Compat}');
Error('\P{Decomposition_Type=:=_	Compat}');
Expect(1, 168, '\p{Decomposition_Type=compat}', "");
Expect(0, 168, '\p{^Decomposition_Type=compat}', "");
Expect(0, 168, '\P{Decomposition_Type=compat}', "");
Expect(1, 168, '\P{^Decomposition_Type=compat}', "");
Expect(0, 167, '\p{Decomposition_Type=compat}', "");
Expect(1, 167, '\p{^Decomposition_Type=compat}', "");
Expect(1, 167, '\P{Decomposition_Type=compat}', "");
Expect(0, 167, '\P{^Decomposition_Type=compat}', "");
Expect(1, 168, '\p{Decomposition_Type=	-compat}', "");
Expect(0, 168, '\p{^Decomposition_Type=	-compat}', "");
Expect(0, 168, '\P{Decomposition_Type=	-compat}', "");
Expect(1, 168, '\P{^Decomposition_Type=	-compat}', "");
Expect(0, 167, '\p{Decomposition_Type=	-compat}', "");
Expect(1, 167, '\p{^Decomposition_Type=	-compat}', "");
Expect(1, 167, '\P{Decomposition_Type=	-compat}', "");
Expect(0, 167, '\P{^Decomposition_Type=	-compat}', "");
Error('\p{Dt=com/a/}');
Error('\P{Dt=com/a/}');
Expect(1, 168, '\p{Dt:   com}', "");
Expect(0, 168, '\p{^Dt:   com}', "");
Expect(0, 168, '\P{Dt:   com}', "");
Expect(1, 168, '\P{^Dt:   com}', "");
Expect(0, 167, '\p{Dt:   com}', "");
Expect(1, 167, '\p{^Dt:   com}', "");
Expect(1, 167, '\P{Dt:   com}', "");
Expect(0, 167, '\P{^Dt:   com}', "");
Expect(1, 168, '\p{Dt=_-Com}', "");
Expect(0, 168, '\p{^Dt=_-Com}', "");
Expect(0, 168, '\P{Dt=_-Com}', "");
Expect(1, 168, '\P{^Dt=_-Com}', "");
Expect(0, 167, '\p{Dt=_-Com}', "");
Expect(1, 167, '\p{^Dt=_-Com}', "");
Expect(1, 167, '\P{Dt=_-Com}', "");
Expect(0, 167, '\P{^Dt=_-Com}', "");
Error('\p{Is_Decomposition_Type=_COMPAT:=}');
Error('\P{Is_Decomposition_Type=_COMPAT:=}');
Expect(1, 168, '\p{Is_Decomposition_Type=compat}', "");
Expect(0, 168, '\p{^Is_Decomposition_Type=compat}', "");
Expect(0, 168, '\P{Is_Decomposition_Type=compat}', "");
Expect(1, 168, '\P{^Is_Decomposition_Type=compat}', "");
Expect(0, 167, '\p{Is_Decomposition_Type=compat}', "");
Expect(1, 167, '\p{^Is_Decomposition_Type=compat}', "");
Expect(1, 167, '\P{Is_Decomposition_Type=compat}', "");
Expect(0, 167, '\P{^Is_Decomposition_Type=compat}', "");
Expect(1, 168, '\p{Is_Decomposition_Type=		compat}', "");
Expect(0, 168, '\p{^Is_Decomposition_Type=		compat}', "");
Expect(0, 168, '\P{Is_Decomposition_Type=		compat}', "");
Expect(1, 168, '\P{^Is_Decomposition_Type=		compat}', "");
Expect(0, 167, '\p{Is_Decomposition_Type=		compat}', "");
Expect(1, 167, '\p{^Is_Decomposition_Type=		compat}', "");
Expect(1, 167, '\P{Is_Decomposition_Type=		compat}', "");
Expect(0, 167, '\P{^Is_Decomposition_Type=		compat}', "");
Error('\p{Is_Dt=_/a/Com}');
Error('\P{Is_Dt=_/a/Com}');
Expect(1, 168, '\p{Is_Dt=com}', "");
Expect(0, 168, '\p{^Is_Dt=com}', "");
Expect(0, 168, '\P{Is_Dt=com}', "");
Expect(1, 168, '\P{^Is_Dt=com}', "");
Expect(0, 167, '\p{Is_Dt=com}', "");
Expect(1, 167, '\p{^Is_Dt=com}', "");
Expect(1, 167, '\P{Is_Dt=com}', "");
Expect(0, 167, '\P{^Is_Dt=com}', "");
Expect(1, 168, '\p{Is_Dt= 	com}', "");
Expect(0, 168, '\p{^Is_Dt= 	com}', "");
Expect(0, 168, '\P{Is_Dt= 	com}', "");
Expect(1, 168, '\P{^Is_Dt= 	com}', "");
Expect(0, 167, '\p{Is_Dt= 	com}', "");
Expect(1, 167, '\p{^Is_Dt= 	com}', "");
Expect(1, 167, '\P{Is_Dt= 	com}', "");
Expect(0, 167, '\P{^Is_Dt= 	com}', "");
Error('\p{Decomposition_Type=_/a/super}');
Error('\P{Decomposition_Type=_/a/super}');
Expect(1, 170, '\p{Decomposition_Type=super}', "");
Expect(0, 170, '\p{^Decomposition_Type=super}', "");
Expect(0, 170, '\P{Decomposition_Type=super}', "");
Expect(1, 170, '\P{^Decomposition_Type=super}', "");
Expect(0, 169, '\p{Decomposition_Type=super}', "");
Expect(1, 169, '\p{^Decomposition_Type=super}', "");
Expect(1, 169, '\P{Decomposition_Type=super}', "");
Expect(0, 169, '\P{^Decomposition_Type=super}', "");
Expect(1, 170, '\p{Decomposition_Type=  Super}', "");
Expect(0, 170, '\p{^Decomposition_Type=  Super}', "");
Expect(0, 170, '\P{Decomposition_Type=  Super}', "");
Expect(1, 170, '\P{^Decomposition_Type=  Super}', "");
Expect(0, 169, '\p{Decomposition_Type=  Super}', "");
Expect(1, 169, '\p{^Decomposition_Type=  Super}', "");
Expect(1, 169, '\P{Decomposition_Type=  Super}', "");
Expect(0, 169, '\P{^Decomposition_Type=  Super}', "");
Error('\p{Dt=	:=Sup}');
Error('\P{Dt=	:=Sup}');
Expect(1, 170, '\p{Dt=sup}', "");
Expect(0, 170, '\p{^Dt=sup}', "");
Expect(0, 170, '\P{Dt=sup}', "");
Expect(1, 170, '\P{^Dt=sup}', "");
Expect(0, 169, '\p{Dt=sup}', "");
Expect(1, 169, '\p{^Dt=sup}', "");
Expect(1, 169, '\P{Dt=sup}', "");
Expect(0, 169, '\P{^Dt=sup}', "");
Expect(1, 170, '\p{Dt=-_SUP}', "");
Expect(0, 170, '\p{^Dt=-_SUP}', "");
Expect(0, 170, '\P{Dt=-_SUP}', "");
Expect(1, 170, '\P{^Dt=-_SUP}', "");
Expect(0, 169, '\p{Dt=-_SUP}', "");
Expect(1, 169, '\p{^Dt=-_SUP}', "");
Expect(1, 169, '\P{Dt=-_SUP}', "");
Expect(0, 169, '\P{^Dt=-_SUP}', "");
Error('\p{Is_Decomposition_Type=_ super/a/}');
Error('\P{Is_Decomposition_Type=_ super/a/}');
Expect(1, 170, '\p{Is_Decomposition_Type=super}', "");
Expect(0, 170, '\p{^Is_Decomposition_Type=super}', "");
Expect(0, 170, '\P{Is_Decomposition_Type=super}', "");
Expect(1, 170, '\P{^Is_Decomposition_Type=super}', "");
Expect(0, 169, '\p{Is_Decomposition_Type=super}', "");
Expect(1, 169, '\p{^Is_Decomposition_Type=super}', "");
Expect(1, 169, '\P{Is_Decomposition_Type=super}', "");
Expect(0, 169, '\P{^Is_Decomposition_Type=super}', "");
Expect(1, 170, '\p{Is_Decomposition_Type:	_Super}', "");
Expect(0, 170, '\p{^Is_Decomposition_Type:	_Super}', "");
Expect(0, 170, '\P{Is_Decomposition_Type:	_Super}', "");
Expect(1, 170, '\P{^Is_Decomposition_Type:	_Super}', "");
Expect(0, 169, '\p{Is_Decomposition_Type:	_Super}', "");
Expect(1, 169, '\p{^Is_Decomposition_Type:	_Super}', "");
Expect(1, 169, '\P{Is_Decomposition_Type:	_Super}', "");
Expect(0, 169, '\P{^Is_Decomposition_Type:	_Super}', "");
Error('\p{Is_Dt=:=		sup}');
Error('\P{Is_Dt=:=		sup}');
Expect(1, 170, '\p{Is_Dt=sup}', "");
Expect(0, 170, '\p{^Is_Dt=sup}', "");
Expect(0, 170, '\P{Is_Dt=sup}', "");
Expect(1, 170, '\P{^Is_Dt=sup}', "");
Expect(0, 169, '\p{Is_Dt=sup}', "");
Expect(1, 169, '\p{^Is_Dt=sup}', "");
Expect(1, 169, '\P{Is_Dt=sup}', "");
Expect(0, 169, '\P{^Is_Dt=sup}', "");
Expect(1, 170, '\p{Is_Dt=	sup}', "");
Expect(0, 170, '\p{^Is_Dt=	sup}', "");
Expect(0, 170, '\P{Is_Dt=	sup}', "");
Expect(1, 170, '\P{^Is_Dt=	sup}', "");
Expect(0, 169, '\p{Is_Dt=	sup}', "");
Expect(1, 169, '\p{^Is_Dt=	sup}', "");
Expect(1, 169, '\P{Is_Dt=	sup}', "");
Expect(0, 169, '\P{^Is_Dt=	sup}', "");
Error('\p{Other_Math=/a/ yes}');
Error('\P{Other_Math=/a/ yes}');
Expect(1, 94, '\p{Other_Math=yes}', 'deprecated');
Expect(0, 94, '\p{^Other_Math=yes}', 'deprecated');
Expect(0, 94, '\P{Other_Math=yes}', 'deprecated');
Expect(1, 94, '\P{^Other_Math=yes}', 'deprecated');
Expect(0, 93, '\p{Other_Math=yes}', 'deprecated');
Expect(1, 93, '\p{^Other_Math=yes}', 'deprecated');
Expect(1, 93, '\P{Other_Math=yes}', 'deprecated');
Expect(0, 93, '\P{^Other_Math=yes}', 'deprecated');
Expect(1, 94, '\p{Other_Math= 	Yes}', 'deprecated');
Expect(0, 94, '\p{^Other_Math= 	Yes}', 'deprecated');
Expect(0, 94, '\P{Other_Math= 	Yes}', 'deprecated');
Expect(1, 94, '\P{^Other_Math= 	Yes}', 'deprecated');
Expect(0, 93, '\p{Other_Math= 	Yes}', 'deprecated');
Expect(1, 93, '\p{^Other_Math= 	Yes}', 'deprecated');
Expect(1, 93, '\P{Other_Math= 	Yes}', 'deprecated');
Expect(0, 93, '\P{^Other_Math= 	Yes}', 'deprecated');
Error('\p{OMath=	_Y/a/}');
Error('\P{OMath=	_Y/a/}');
Expect(1, 94, '\p{OMath:   y}', 'deprecated');
Expect(0, 94, '\p{^OMath:   y}', 'deprecated');
Expect(0, 94, '\P{OMath:   y}', 'deprecated');
Expect(1, 94, '\P{^OMath:   y}', 'deprecated');
Expect(0, 93, '\p{OMath:   y}', 'deprecated');
Expect(1, 93, '\p{^OMath:   y}', 'deprecated');
Expect(1, 93, '\P{OMath:   y}', 'deprecated');
Expect(0, 93, '\P{^OMath:   y}', 'deprecated');
Expect(1, 94, '\p{OMath=	 Y}', 'deprecated');
Expect(0, 94, '\p{^OMath=	 Y}', 'deprecated');
Expect(0, 94, '\P{OMath=	 Y}', 'deprecated');
Expect(1, 94, '\P{^OMath=	 Y}', 'deprecated');
Expect(0, 93, '\p{OMath=	 Y}', 'deprecated');
Expect(1, 93, '\p{^OMath=	 Y}', 'deprecated');
Expect(1, 93, '\P{OMath=	 Y}', 'deprecated');
Expect(0, 93, '\P{^OMath=	 Y}', 'deprecated');
Error('\p{Is_Other_Math=_:=T}');
Error('\P{Is_Other_Math=_:=T}');
Expect(1, 94, '\p{Is_Other_Math=t}', 'deprecated');
Expect(0, 94, '\p{^Is_Other_Math=t}', 'deprecated');
Expect(0, 94, '\P{Is_Other_Math=t}', 'deprecated');
Expect(1, 94, '\P{^Is_Other_Math=t}', 'deprecated');
Expect(0, 93, '\p{Is_Other_Math=t}', 'deprecated');
Expect(1, 93, '\p{^Is_Other_Math=t}', 'deprecated');
Expect(1, 93, '\P{Is_Other_Math=t}', 'deprecated');
Expect(0, 93, '\P{^Is_Other_Math=t}', 'deprecated');
Expect(1, 94, '\p{Is_Other_Math=	-T}', 'deprecated');
Expect(0, 94, '\p{^Is_Other_Math=	-T}', 'deprecated');
Expect(0, 94, '\P{Is_Other_Math=	-T}', 'deprecated');
Expect(1, 94, '\P{^Is_Other_Math=	-T}', 'deprecated');
Expect(0, 93, '\p{Is_Other_Math=	-T}', 'deprecated');
Expect(1, 93, '\p{^Is_Other_Math=	-T}', 'deprecated');
Expect(1, 93, '\P{Is_Other_Math=	-T}', 'deprecated');
Expect(0, 93, '\P{^Is_Other_Math=	-T}', 'deprecated');
Error('\p{Is_OMath=_	true/a/}');
Error('\P{Is_OMath=_	true/a/}');
Expect(1, 94, '\p{Is_OMath=true}', 'deprecated');
Expect(0, 94, '\p{^Is_OMath=true}', 'deprecated');
Expect(0, 94, '\P{Is_OMath=true}', 'deprecated');
Expect(1, 94, '\P{^Is_OMath=true}', 'deprecated');
Expect(0, 93, '\p{Is_OMath=true}', 'deprecated');
Expect(1, 93, '\p{^Is_OMath=true}', 'deprecated');
Expect(1, 93, '\P{Is_OMath=true}', 'deprecated');
Expect(0, 93, '\P{^Is_OMath=true}', 'deprecated');
Expect(1, 94, '\p{Is_OMath=--True}', 'deprecated');
Expect(0, 94, '\p{^Is_OMath=--True}', 'deprecated');
Expect(0, 94, '\P{Is_OMath=--True}', 'deprecated');
Expect(1, 94, '\P{^Is_OMath=--True}', 'deprecated');
Expect(0, 93, '\p{Is_OMath=--True}', 'deprecated');
Expect(1, 93, '\p{^Is_OMath=--True}', 'deprecated');
Expect(1, 93, '\P{Is_OMath=--True}', 'deprecated');
Expect(0, 93, '\P{^Is_OMath=--True}', 'deprecated');
Error('\p{Other_Math=:=No}');
Error('\P{Other_Math=:=No}');
Expect(1, 93, '\p{Other_Math:   no}', 'deprecated');
Expect(0, 93, '\p{^Other_Math:   no}', 'deprecated');
Expect(0, 93, '\P{Other_Math:   no}', 'deprecated');
Expect(1, 93, '\P{^Other_Math:   no}', 'deprecated');
Expect(0, 94, '\p{Other_Math:   no}', 'deprecated');
Expect(1, 94, '\p{^Other_Math:   no}', 'deprecated');
Expect(1, 94, '\P{Other_Math:   no}', 'deprecated');
Expect(0, 94, '\P{^Other_Math:   no}', 'deprecated');
Expect(1, 93, '\p{Other_Math=	NO}', 'deprecated');
Expect(0, 93, '\p{^Other_Math=	NO}', 'deprecated');
Expect(0, 93, '\P{Other_Math=	NO}', 'deprecated');
Expect(1, 93, '\P{^Other_Math=	NO}', 'deprecated');
Expect(0, 94, '\p{Other_Math=	NO}', 'deprecated');
Expect(1, 94, '\p{^Other_Math=	NO}', 'deprecated');
Expect(1, 94, '\P{Other_Math=	NO}', 'deprecated');
Expect(0, 94, '\P{^Other_Math=	NO}', 'deprecated');
Error('\p{OMath=		N/a/}');
Error('\P{OMath=		N/a/}');
Expect(1, 93, '\p{OMath=n}', 'deprecated');
Expect(0, 93, '\p{^OMath=n}', 'deprecated');
Expect(0, 93, '\P{OMath=n}', 'deprecated');
Expect(1, 93, '\P{^OMath=n}', 'deprecated');
Expect(0, 94, '\p{OMath=n}', 'deprecated');
Expect(1, 94, '\p{^OMath=n}', 'deprecated');
Expect(1, 94, '\P{OMath=n}', 'deprecated');
Expect(0, 94, '\P{^OMath=n}', 'deprecated');
Expect(1, 93, '\p{OMath=--N}', 'deprecated');
Expect(0, 93, '\p{^OMath=--N}', 'deprecated');
Expect(0, 93, '\P{OMath=--N}', 'deprecated');
Expect(1, 93, '\P{^OMath=--N}', 'deprecated');
Expect(0, 94, '\p{OMath=--N}', 'deprecated');
Expect(1, 94, '\p{^OMath=--N}', 'deprecated');
Expect(1, 94, '\P{OMath=--N}', 'deprecated');
Expect(0, 94, '\P{^OMath=--N}', 'deprecated');
Error('\p{Is_Other_Math:   --F/a/}');
Error('\P{Is_Other_Math:   --F/a/}');
Expect(1, 93, '\p{Is_Other_Math=f}', 'deprecated');
Expect(0, 93, '\p{^Is_Other_Math=f}', 'deprecated');
Expect(0, 93, '\P{Is_Other_Math=f}', 'deprecated');
Expect(1, 93, '\P{^Is_Other_Math=f}', 'deprecated');
Expect(0, 94, '\p{Is_Other_Math=f}', 'deprecated');
Expect(1, 94, '\p{^Is_Other_Math=f}', 'deprecated');
Expect(1, 94, '\P{Is_Other_Math=f}', 'deprecated');
Expect(0, 94, '\P{^Is_Other_Math=f}', 'deprecated');
Expect(1, 93, '\p{Is_Other_Math=_-f}', 'deprecated');
Expect(0, 93, '\p{^Is_Other_Math=_-f}', 'deprecated');
Expect(0, 93, '\P{Is_Other_Math=_-f}', 'deprecated');
Expect(1, 93, '\P{^Is_Other_Math=_-f}', 'deprecated');
Expect(0, 94, '\p{Is_Other_Math=_-f}', 'deprecated');
Expect(1, 94, '\p{^Is_Other_Math=_-f}', 'deprecated');
Expect(1, 94, '\P{Is_Other_Math=_-f}', 'deprecated');
Expect(0, 94, '\P{^Is_Other_Math=_-f}', 'deprecated');
Error('\p{Is_OMath=:=-_FALSE}');
Error('\P{Is_OMath=:=-_FALSE}');
Expect(1, 93, '\p{Is_OMath=false}', 'deprecated');
Expect(0, 93, '\p{^Is_OMath=false}', 'deprecated');
Expect(0, 93, '\P{Is_OMath=false}', 'deprecated');
Expect(1, 93, '\P{^Is_OMath=false}', 'deprecated');
Expect(0, 94, '\p{Is_OMath=false}', 'deprecated');
Expect(1, 94, '\p{^Is_OMath=false}', 'deprecated');
Expect(1, 94, '\P{Is_OMath=false}', 'deprecated');
Expect(0, 94, '\P{^Is_OMath=false}', 'deprecated');
Expect(1, 93, '\p{Is_OMath=	_False}', 'deprecated');
Expect(0, 93, '\p{^Is_OMath=	_False}', 'deprecated');
Expect(0, 93, '\P{Is_OMath=	_False}', 'deprecated');
Expect(1, 93, '\P{^Is_OMath=	_False}', 'deprecated');
Expect(0, 94, '\p{Is_OMath=	_False}', 'deprecated');
Expect(1, 94, '\p{^Is_OMath=	_False}', 'deprecated');
Expect(1, 94, '\P{Is_OMath=	_False}', 'deprecated');
Expect(0, 94, '\P{^Is_OMath=	_False}', 'deprecated');
Error('\p{Hyphen=:=-_YES}');
Error('\P{Hyphen=:=-_YES}');
Expect(1, 45, '\p{Hyphen=yes}', "");
Expect(0, 45, '\p{^Hyphen=yes}', "");
Expect(0, 45, '\P{Hyphen=yes}', "");
Expect(1, 45, '\P{^Hyphen=yes}', "");
Expect(0, 44, '\p{Hyphen=yes}', "");
Expect(1, 44, '\p{^Hyphen=yes}', "");
Expect(1, 44, '\P{Hyphen=yes}', "");
Expect(0, 44, '\P{^Hyphen=yes}', "");
Expect(1, 45, '\p{Hyphen=-_YES}', "");
Expect(0, 45, '\p{^Hyphen=-_YES}', "");
Expect(0, 45, '\P{Hyphen=-_YES}', "");
Expect(1, 45, '\P{^Hyphen=-_YES}', "");
Expect(0, 44, '\p{Hyphen=-_YES}', "");
Expect(1, 44, '\p{^Hyphen=-_YES}', "");
Expect(1, 44, '\P{Hyphen=-_YES}', "");
Expect(0, 44, '\P{^Hyphen=-_YES}', "");
Error('\p{Is_Hyphen=:=	 Y}');
Error('\P{Is_Hyphen=:=	 Y}');
Expect(1, 45, '\p{Is_Hyphen=y}', "");
Expect(0, 45, '\p{^Is_Hyphen=y}', "");
Expect(0, 45, '\P{Is_Hyphen=y}', "");
Expect(1, 45, '\P{^Is_Hyphen=y}', "");
Expect(0, 44, '\p{Is_Hyphen=y}', "");
Expect(1, 44, '\p{^Is_Hyphen=y}', "");
Expect(1, 44, '\P{Is_Hyphen=y}', "");
Expect(0, 44, '\P{^Is_Hyphen=y}', "");
Error('\p{Hyphen= :=t}');
Error('\P{Hyphen= :=t}');
Expect(1, 45, '\p{Hyphen=t}', "");
Expect(0, 45, '\p{^Hyphen=t}', "");
Expect(0, 45, '\P{Hyphen=t}', "");
Expect(1, 45, '\P{^Hyphen=t}', "");
Expect(0, 44, '\p{Hyphen=t}', "");
Expect(1, 44, '\p{^Hyphen=t}', "");
Expect(1, 44, '\P{Hyphen=t}', "");
Expect(0, 44, '\P{^Hyphen=t}', "");
Expect(1, 45, '\p{Hyphen=-T}', "");
Expect(0, 45, '\p{^Hyphen=-T}', "");
Expect(0, 45, '\P{Hyphen=-T}', "");
Expect(1, 45, '\P{^Hyphen=-T}', "");
Expect(0, 44, '\p{Hyphen=-T}', "");
Expect(1, 44, '\p{^Hyphen=-T}', "");
Expect(1, 44, '\P{Hyphen=-T}', "");
Expect(0, 44, '\P{^Hyphen=-T}', "");
Error('\p{Is_Hyphen=_TRUE/a/}');
Error('\P{Is_Hyphen=_TRUE/a/}');
Expect(1, 45, '\p{Is_Hyphen:true}', "");
Expect(0, 45, '\p{^Is_Hyphen:true}', "");
Expect(0, 45, '\P{Is_Hyphen:true}', "");
Expect(1, 45, '\P{^Is_Hyphen:true}', "");
Expect(0, 44, '\p{Is_Hyphen:true}', "");
Expect(1, 44, '\p{^Is_Hyphen:true}', "");
Expect(1, 44, '\P{Is_Hyphen:true}', "");
Expect(0, 44, '\P{^Is_Hyphen:true}', "");
Expect(1, 45, '\p{Is_Hyphen=  True}', "");
Expect(0, 45, '\p{^Is_Hyphen=  True}', "");
Expect(0, 45, '\P{Is_Hyphen=  True}', "");
Expect(1, 45, '\P{^Is_Hyphen=  True}', "");
Expect(0, 44, '\p{Is_Hyphen=  True}', "");
Expect(1, 44, '\p{^Is_Hyphen=  True}', "");
Expect(1, 44, '\P{Is_Hyphen=  True}', "");
Expect(0, 44, '\P{^Is_Hyphen=  True}', "");
Error('\p{Hyphen= -No/a/}');
Error('\P{Hyphen= -No/a/}');
Expect(1, 44, '\p{Hyphen=no}', "");
Expect(0, 44, '\p{^Hyphen=no}', "");
Expect(0, 44, '\P{Hyphen=no}', "");
Expect(1, 44, '\P{^Hyphen=no}', "");
Expect(0, 45, '\p{Hyphen=no}', "");
Expect(1, 45, '\p{^Hyphen=no}', "");
Expect(1, 45, '\P{Hyphen=no}', "");
Expect(0, 45, '\P{^Hyphen=no}', "");
Expect(1, 44, '\p{Hyphen=	 No}', "");
Expect(0, 44, '\p{^Hyphen=	 No}', "");
Expect(0, 44, '\P{Hyphen=	 No}', "");
Expect(1, 44, '\P{^Hyphen=	 No}', "");
Expect(0, 45, '\p{Hyphen=	 No}', "");
Expect(1, 45, '\p{^Hyphen=	 No}', "");
Expect(1, 45, '\P{Hyphen=	 No}', "");
Expect(0, 45, '\P{^Hyphen=	 No}', "");
Error('\p{Is_Hyphen=/a/ 	N}');
Error('\P{Is_Hyphen=/a/ 	N}');
Expect(1, 44, '\p{Is_Hyphen: n}', "");
Expect(0, 44, '\p{^Is_Hyphen: n}', "");
Expect(0, 44, '\P{Is_Hyphen: n}', "");
Expect(1, 44, '\P{^Is_Hyphen: n}', "");
Expect(0, 45, '\p{Is_Hyphen: n}', "");
Expect(1, 45, '\p{^Is_Hyphen: n}', "");
Expect(1, 45, '\P{Is_Hyphen: n}', "");
Expect(0, 45, '\P{^Is_Hyphen: n}', "");
Expect(1, 44, '\p{Is_Hyphen=-n}', "");
Expect(0, 44, '\p{^Is_Hyphen=-n}', "");
Expect(0, 44, '\P{Is_Hyphen=-n}', "");
Expect(1, 44, '\P{^Is_Hyphen=-n}', "");
Expect(0, 45, '\p{Is_Hyphen=-n}', "");
Expect(1, 45, '\p{^Is_Hyphen=-n}', "");
Expect(1, 45, '\P{Is_Hyphen=-n}', "");
Expect(0, 45, '\P{^Is_Hyphen=-n}', "");
Error('\p{Hyphen= f:=}');
Error('\P{Hyphen= f:=}');
Expect(1, 44, '\p{Hyphen=f}', "");
Expect(0, 44, '\p{^Hyphen=f}', "");
Expect(0, 44, '\P{Hyphen=f}', "");
Expect(1, 44, '\P{^Hyphen=f}', "");
Expect(0, 45, '\p{Hyphen=f}', "");
Expect(1, 45, '\p{^Hyphen=f}', "");
Expect(1, 45, '\P{Hyphen=f}', "");
Expect(0, 45, '\P{^Hyphen=f}', "");
Expect(1, 44, '\p{Hyphen= f}', "");
Expect(0, 44, '\p{^Hyphen= f}', "");
Expect(0, 44, '\P{Hyphen= f}', "");
Expect(1, 44, '\P{^Hyphen= f}', "");
Expect(0, 45, '\p{Hyphen= f}', "");
Expect(1, 45, '\p{^Hyphen= f}', "");
Expect(1, 45, '\P{Hyphen= f}', "");
Expect(0, 45, '\P{^Hyphen= f}', "");
Error('\p{Is_Hyphen= /a/false}');
Error('\P{Is_Hyphen= /a/false}');
Expect(1, 44, '\p{Is_Hyphen:false}', "");
Expect(0, 44, '\p{^Is_Hyphen:false}', "");
Expect(0, 44, '\P{Is_Hyphen:false}', "");
Expect(1, 44, '\P{^Is_Hyphen:false}', "");
Expect(0, 45, '\p{Is_Hyphen:false}', "");
Expect(1, 45, '\p{^Is_Hyphen:false}', "");
Expect(1, 45, '\P{Is_Hyphen:false}', "");
Expect(0, 45, '\P{^Is_Hyphen:false}', "");
Expect(1, 44, '\p{Is_Hyphen=_FALSE}', "");
Expect(0, 44, '\p{^Is_Hyphen=_FALSE}', "");
Expect(0, 44, '\P{Is_Hyphen=_FALSE}', "");
Expect(1, 44, '\P{^Is_Hyphen=_FALSE}', "");
Expect(0, 45, '\p{Is_Hyphen=_FALSE}', "");
Expect(1, 45, '\p{^Is_Hyphen=_FALSE}', "");
Expect(1, 45, '\P{Is_Hyphen=_FALSE}', "");
Expect(0, 45, '\P{^Is_Hyphen=_FALSE}', "");
Error('\p{White_Space=	 Yes/a/}');
Error('\P{White_Space=	 Yes/a/}');
Expect(1, 13, '\p{White_Space: yes}', "");
Expect(0, 13, '\p{^White_Space: yes}', "");
Expect(0, 13, '\P{White_Space: yes}', "");
Expect(1, 13, '\P{^White_Space: yes}', "");
Expect(0, 8, '\p{White_Space: yes}', "");
Expect(1, 8, '\p{^White_Space: yes}', "");
Expect(1, 8, '\P{White_Space: yes}', "");
Expect(0, 8, '\P{^White_Space: yes}', "");
Expect(1, 13, '\p{White_Space=Yes}', "");
Expect(0, 13, '\p{^White_Space=Yes}', "");
Expect(0, 13, '\P{White_Space=Yes}', "");
Expect(1, 13, '\P{^White_Space=Yes}', "");
Expect(0, 8, '\p{White_Space=Yes}', "");
Expect(1, 8, '\p{^White_Space=Yes}', "");
Expect(1, 8, '\P{White_Space=Yes}', "");
Expect(0, 8, '\P{^White_Space=Yes}', "");
Error('\p{WSpace=:=--Y}');
Error('\P{WSpace=:=--Y}');
Expect(1, 13, '\p{WSpace=y}', "");
Expect(0, 13, '\p{^WSpace=y}', "");
Expect(0, 13, '\P{WSpace=y}', "");
Expect(1, 13, '\P{^WSpace=y}', "");
Expect(0, 8, '\p{WSpace=y}', "");
Expect(1, 8, '\p{^WSpace=y}', "");
Expect(1, 8, '\P{WSpace=y}', "");
Expect(0, 8, '\P{^WSpace=y}', "");
Expect(1, 13, '\p{WSpace=	Y}', "");
Expect(0, 13, '\p{^WSpace=	Y}', "");
Expect(0, 13, '\P{WSpace=	Y}', "");
Expect(1, 13, '\P{^WSpace=	Y}', "");
Expect(0, 8, '\p{WSpace=	Y}', "");
Expect(1, 8, '\p{^WSpace=	Y}', "");
Expect(1, 8, '\P{WSpace=	Y}', "");
Expect(0, 8, '\P{^WSpace=	Y}', "");
Error('\p{Space=:=	 t}');
Error('\P{Space=:=	 t}');
Expect(1, 13, '\p{Space=t}', "");
Expect(0, 13, '\p{^Space=t}', "");
Expect(0, 13, '\P{Space=t}', "");
Expect(1, 13, '\P{^Space=t}', "");
Expect(0, 8, '\p{Space=t}', "");
Expect(1, 8, '\p{^Space=t}', "");
Expect(1, 8, '\P{Space=t}', "");
Expect(0, 8, '\P{^Space=t}', "");
Expect(1, 13, '\p{Space=- T}', "");
Expect(0, 13, '\p{^Space=- T}', "");
Expect(0, 13, '\P{Space=- T}', "");
Expect(1, 13, '\P{^Space=- T}', "");
Expect(0, 8, '\p{Space=- T}', "");
Expect(1, 8, '\p{^Space=- T}', "");
Expect(1, 8, '\P{Space=- T}', "");
Expect(0, 8, '\P{^Space=- T}', "");
Error('\p{Is_White_Space=:= _True}');
Error('\P{Is_White_Space=:= _True}');
Expect(1, 13, '\p{Is_White_Space=true}', "");
Expect(0, 13, '\p{^Is_White_Space=true}', "");
Expect(0, 13, '\P{Is_White_Space=true}', "");
Expect(1, 13, '\P{^Is_White_Space=true}', "");
Expect(0, 8, '\p{Is_White_Space=true}', "");
Expect(1, 8, '\p{^Is_White_Space=true}', "");
Expect(1, 8, '\P{Is_White_Space=true}', "");
Expect(0, 8, '\P{^Is_White_Space=true}', "");
Expect(1, 13, '\p{Is_White_Space=--True}', "");
Expect(0, 13, '\p{^Is_White_Space=--True}', "");
Expect(0, 13, '\P{Is_White_Space=--True}', "");
Expect(1, 13, '\P{^Is_White_Space=--True}', "");
Expect(0, 8, '\p{Is_White_Space=--True}', "");
Expect(1, 8, '\p{^Is_White_Space=--True}', "");
Expect(1, 8, '\P{Is_White_Space=--True}', "");
Expect(0, 8, '\P{^Is_White_Space=--True}', "");
Error('\p{Is_WSpace=-YES/a/}');
Error('\P{Is_WSpace=-YES/a/}');
Expect(1, 13, '\p{Is_WSpace=yes}', "");
Expect(0, 13, '\p{^Is_WSpace=yes}', "");
Expect(0, 13, '\P{Is_WSpace=yes}', "");
Expect(1, 13, '\P{^Is_WSpace=yes}', "");
Expect(0, 8, '\p{Is_WSpace=yes}', "");
Expect(1, 8, '\p{^Is_WSpace=yes}', "");
Expect(1, 8, '\P{Is_WSpace=yes}', "");
Expect(0, 8, '\P{^Is_WSpace=yes}', "");
Expect(1, 13, '\p{Is_WSpace=	-YES}', "");
Expect(0, 13, '\p{^Is_WSpace=	-YES}', "");
Expect(0, 13, '\P{Is_WSpace=	-YES}', "");
Expect(1, 13, '\P{^Is_WSpace=	-YES}', "");
Expect(0, 8, '\p{Is_WSpace=	-YES}', "");
Expect(1, 8, '\p{^Is_WSpace=	-YES}', "");
Expect(1, 8, '\P{Is_WSpace=	-YES}', "");
Expect(0, 8, '\P{^Is_WSpace=	-YES}', "");
Error('\p{Is_Space=:=-Y}');
Error('\P{Is_Space=:=-Y}');
Expect(1, 13, '\p{Is_Space=y}', "");
Expect(0, 13, '\p{^Is_Space=y}', "");
Expect(0, 13, '\P{Is_Space=y}', "");
Expect(1, 13, '\P{^Is_Space=y}', "");
Expect(0, 8, '\p{Is_Space=y}', "");
Expect(1, 8, '\p{^Is_Space=y}', "");
Expect(1, 8, '\P{Is_Space=y}', "");
Expect(0, 8, '\P{^Is_Space=y}', "");
Expect(1, 13, '\p{Is_Space=_ Y}', "");
Expect(0, 13, '\p{^Is_Space=_ Y}', "");
Expect(0, 13, '\P{Is_Space=_ Y}', "");
Expect(1, 13, '\P{^Is_Space=_ Y}', "");
Expect(0, 8, '\p{Is_Space=_ Y}', "");
Expect(1, 8, '\p{^Is_Space=_ Y}', "");
Expect(1, 8, '\P{Is_Space=_ Y}', "");
Expect(0, 8, '\P{^Is_Space=_ Y}', "");
Error('\p{White_Space=/a/-No}');
Error('\P{White_Space=/a/-No}');
Expect(1, 8, '\p{White_Space:	no}', "");
Expect(0, 8, '\p{^White_Space:	no}', "");
Expect(0, 8, '\P{White_Space:	no}', "");
Expect(1, 8, '\P{^White_Space:	no}', "");
Expect(0, 13, '\p{White_Space:	no}', "");
Expect(1, 13, '\p{^White_Space:	no}', "");
Expect(1, 13, '\P{White_Space:	no}', "");
Expect(0, 13, '\P{^White_Space:	no}', "");
Expect(1, 8, '\p{White_Space=_	No}', "");
Expect(0, 8, '\p{^White_Space=_	No}', "");
Expect(0, 8, '\P{White_Space=_	No}', "");
Expect(1, 8, '\P{^White_Space=_	No}', "");
Expect(0, 13, '\p{White_Space=_	No}', "");
Expect(1, 13, '\p{^White_Space=_	No}', "");
Expect(1, 13, '\P{White_Space=_	No}', "");
Expect(0, 13, '\P{^White_Space=_	No}', "");
Error('\p{WSpace=/a/_N}');
Error('\P{WSpace=/a/_N}');
Expect(1, 8, '\p{WSpace:   n}', "");
Expect(0, 8, '\p{^WSpace:   n}', "");
Expect(0, 8, '\P{WSpace:   n}', "");
Expect(1, 8, '\P{^WSpace:   n}', "");
Expect(0, 13, '\p{WSpace:   n}', "");
Expect(1, 13, '\p{^WSpace:   n}', "");
Expect(1, 13, '\P{WSpace:   n}', "");
Expect(0, 13, '\P{^WSpace:   n}', "");
Expect(1, 8, '\p{WSpace=N}', "");
Expect(0, 8, '\p{^WSpace=N}', "");
Expect(0, 8, '\P{WSpace=N}', "");
Expect(1, 8, '\P{^WSpace=N}', "");
Expect(0, 13, '\p{WSpace=N}', "");
Expect(1, 13, '\p{^WSpace=N}', "");
Expect(1, 13, '\P{WSpace=N}', "");
Expect(0, 13, '\P{^WSpace=N}', "");
Error('\p{Space=	/a/F}');
Error('\P{Space=	/a/F}');
Expect(1, 8, '\p{Space=f}', "");
Expect(0, 8, '\p{^Space=f}', "");
Expect(0, 8, '\P{Space=f}', "");
Expect(1, 8, '\P{^Space=f}', "");
Expect(0, 13, '\p{Space=f}', "");
Expect(1, 13, '\p{^Space=f}', "");
Expect(1, 13, '\P{Space=f}', "");
Expect(0, 13, '\P{^Space=f}', "");
Expect(1, 8, '\p{Space=	 F}', "");
Expect(0, 8, '\p{^Space=	 F}', "");
Expect(0, 8, '\P{Space=	 F}', "");
Expect(1, 8, '\P{^Space=	 F}', "");
Expect(0, 13, '\p{Space=	 F}', "");
Expect(1, 13, '\p{^Space=	 F}', "");
Expect(1, 13, '\P{Space=	 F}', "");
Expect(0, 13, '\P{^Space=	 F}', "");
Error('\p{Is_White_Space=:=	_false}');
Error('\P{Is_White_Space=:=	_false}');
Expect(1, 8, '\p{Is_White_Space:false}', "");
Expect(0, 8, '\p{^Is_White_Space:false}', "");
Expect(0, 8, '\P{Is_White_Space:false}', "");
Expect(1, 8, '\P{^Is_White_Space:false}', "");
Expect(0, 13, '\p{Is_White_Space:false}', "");
Expect(1, 13, '\p{^Is_White_Space:false}', "");
Expect(1, 13, '\P{Is_White_Space:false}', "");
Expect(0, 13, '\P{^Is_White_Space:false}', "");
Expect(1, 8, '\p{Is_White_Space=-	false}', "");
Expect(0, 8, '\p{^Is_White_Space=-	false}', "");
Expect(0, 8, '\P{Is_White_Space=-	false}', "");
Expect(1, 8, '\P{^Is_White_Space=-	false}', "");
Expect(0, 13, '\p{Is_White_Space=-	false}', "");
Expect(1, 13, '\p{^Is_White_Space=-	false}', "");
Expect(1, 13, '\P{Is_White_Space=-	false}', "");
Expect(0, 13, '\P{^Is_White_Space=-	false}', "");
Error('\p{Is_WSpace=:=_ No}');
Error('\P{Is_WSpace=:=_ No}');
Expect(1, 8, '\p{Is_WSpace=no}', "");
Expect(0, 8, '\p{^Is_WSpace=no}', "");
Expect(0, 8, '\P{Is_WSpace=no}', "");
Expect(1, 8, '\P{^Is_WSpace=no}', "");
Expect(0, 13, '\p{Is_WSpace=no}', "");
Expect(1, 13, '\p{^Is_WSpace=no}', "");
Expect(1, 13, '\P{Is_WSpace=no}', "");
Expect(0, 13, '\P{^Is_WSpace=no}', "");
Expect(1, 8, '\p{Is_WSpace= NO}', "");
Expect(0, 8, '\p{^Is_WSpace= NO}', "");
Expect(0, 8, '\P{Is_WSpace= NO}', "");
Expect(1, 8, '\P{^Is_WSpace= NO}', "");
Expect(0, 13, '\p{Is_WSpace= NO}', "");
Expect(1, 13, '\p{^Is_WSpace= NO}', "");
Expect(1, 13, '\P{Is_WSpace= NO}', "");
Expect(0, 13, '\P{^Is_WSpace= NO}', "");
Error('\p{Is_Space=	:=N}');
Error('\P{Is_Space=	:=N}');
Expect(1, 8, '\p{Is_Space=n}', "");
Expect(0, 8, '\p{^Is_Space=n}', "");
Expect(0, 8, '\P{Is_Space=n}', "");
Expect(1, 8, '\P{^Is_Space=n}', "");
Expect(0, 13, '\p{Is_Space=n}', "");
Expect(1, 13, '\p{^Is_Space=n}', "");
Expect(1, 13, '\P{Is_Space=n}', "");
Expect(0, 13, '\P{^Is_Space=n}', "");
Expect(1, 8, '\p{Is_Space=_N}', "");
Expect(0, 8, '\p{^Is_Space=_N}', "");
Expect(0, 8, '\P{Is_Space=_N}', "");
Expect(1, 8, '\P{^Is_Space=_N}', "");
Expect(0, 13, '\p{Is_Space=_N}', "");
Expect(1, 13, '\p{^Is_Space=_N}', "");
Expect(1, 13, '\P{Is_Space=_N}', "");
Expect(0, 13, '\P{^Is_Space=_N}', "");
Error('\p{XID_Continue:   -:=YES}');
Error('\P{XID_Continue:   -:=YES}');
Expect(1, 57, '\p{XID_Continue=yes}', "");
Expect(0, 57, '\p{^XID_Continue=yes}', "");
Expect(0, 57, '\P{XID_Continue=yes}', "");
Expect(1, 57, '\P{^XID_Continue=yes}', "");
Expect(0, 47, '\p{XID_Continue=yes}', "");
Expect(1, 47, '\p{^XID_Continue=yes}', "");
Expect(1, 47, '\P{XID_Continue=yes}', "");
Expect(0, 47, '\P{^XID_Continue=yes}', "");
Expect(1, 57, '\p{XID_Continue: _Yes}', "");
Expect(0, 57, '\p{^XID_Continue: _Yes}', "");
Expect(0, 57, '\P{XID_Continue: _Yes}', "");
Expect(1, 57, '\P{^XID_Continue: _Yes}', "");
Expect(0, 47, '\p{XID_Continue: _Yes}', "");
Expect(1, 47, '\p{^XID_Continue: _Yes}', "");
Expect(1, 47, '\P{XID_Continue: _Yes}', "");
Expect(0, 47, '\P{^XID_Continue: _Yes}', "");
Error('\p{XIDC= :=Y}');
Error('\P{XIDC= :=Y}');
Expect(1, 57, '\p{XIDC:	y}', "");
Expect(0, 57, '\p{^XIDC:	y}', "");
Expect(0, 57, '\P{XIDC:	y}', "");
Expect(1, 57, '\P{^XIDC:	y}', "");
Expect(0, 47, '\p{XIDC:	y}', "");
Expect(1, 47, '\p{^XIDC:	y}', "");
Expect(1, 47, '\P{XIDC:	y}', "");
Expect(0, 47, '\P{^XIDC:	y}', "");
Expect(1, 57, '\p{XIDC= 	Y}', "");
Expect(0, 57, '\p{^XIDC= 	Y}', "");
Expect(0, 57, '\P{XIDC= 	Y}', "");
Expect(1, 57, '\P{^XIDC= 	Y}', "");
Expect(0, 47, '\p{XIDC= 	Y}', "");
Expect(1, 47, '\p{^XIDC= 	Y}', "");
Expect(1, 47, '\P{XIDC= 	Y}', "");
Expect(0, 47, '\P{^XIDC= 	Y}', "");
Error('\p{Is_XID_Continue=/a/_t}');
Error('\P{Is_XID_Continue=/a/_t}');
Expect(1, 57, '\p{Is_XID_Continue:   t}', "");
Expect(0, 57, '\p{^Is_XID_Continue:   t}', "");
Expect(0, 57, '\P{Is_XID_Continue:   t}', "");
Expect(1, 57, '\P{^Is_XID_Continue:   t}', "");
Expect(0, 47, '\p{Is_XID_Continue:   t}', "");
Expect(1, 47, '\p{^Is_XID_Continue:   t}', "");
Expect(1, 47, '\P{Is_XID_Continue:   t}', "");
Expect(0, 47, '\P{^Is_XID_Continue:   t}', "");
Expect(1, 57, '\p{Is_XID_Continue= t}', "");
Expect(0, 57, '\p{^Is_XID_Continue= t}', "");
Expect(0, 57, '\P{Is_XID_Continue= t}', "");
Expect(1, 57, '\P{^Is_XID_Continue= t}', "");
Expect(0, 47, '\p{Is_XID_Continue= t}', "");
Expect(1, 47, '\p{^Is_XID_Continue= t}', "");
Expect(1, 47, '\P{Is_XID_Continue= t}', "");
Expect(0, 47, '\P{^Is_XID_Continue= t}', "");
Error('\p{Is_XIDC=/a/	 true}');
Error('\P{Is_XIDC=/a/	 true}');
Expect(1, 57, '\p{Is_XIDC=true}', "");
Expect(0, 57, '\p{^Is_XIDC=true}', "");
Expect(0, 57, '\P{Is_XIDC=true}', "");
Expect(1, 57, '\P{^Is_XIDC=true}', "");
Expect(0, 47, '\p{Is_XIDC=true}', "");
Expect(1, 47, '\p{^Is_XIDC=true}', "");
Expect(1, 47, '\P{Is_XIDC=true}', "");
Expect(0, 47, '\P{^Is_XIDC=true}', "");
Expect(1, 57, '\p{Is_XIDC=_-True}', "");
Expect(0, 57, '\p{^Is_XIDC=_-True}', "");
Expect(0, 57, '\P{Is_XIDC=_-True}', "");
Expect(1, 57, '\P{^Is_XIDC=_-True}', "");
Expect(0, 47, '\p{Is_XIDC=_-True}', "");
Expect(1, 47, '\p{^Is_XIDC=_-True}', "");
Expect(1, 47, '\P{Is_XIDC=_-True}', "");
Expect(0, 47, '\P{^Is_XIDC=_-True}', "");
Error('\p{XID_Continue=--no/a/}');
Error('\P{XID_Continue=--no/a/}');
Expect(1, 47, '\p{XID_Continue=no}', "");
Expect(0, 47, '\p{^XID_Continue=no}', "");
Expect(0, 47, '\P{XID_Continue=no}', "");
Expect(1, 47, '\P{^XID_Continue=no}', "");
Expect(0, 57, '\p{XID_Continue=no}', "");
Expect(1, 57, '\p{^XID_Continue=no}', "");
Expect(1, 57, '\P{XID_Continue=no}', "");
Expect(0, 57, '\P{^XID_Continue=no}', "");
Expect(1, 47, '\p{XID_Continue=  No}', "");
Expect(0, 47, '\p{^XID_Continue=  No}', "");
Expect(0, 47, '\P{XID_Continue=  No}', "");
Expect(1, 47, '\P{^XID_Continue=  No}', "");
Expect(0, 57, '\p{XID_Continue=  No}', "");
Expect(1, 57, '\p{^XID_Continue=  No}', "");
Expect(1, 57, '\P{XID_Continue=  No}', "");
Expect(0, 57, '\P{^XID_Continue=  No}', "");
Error('\p{XIDC=	:=N}');
Error('\P{XIDC=	:=N}');
Expect(1, 47, '\p{XIDC=n}', "");
Expect(0, 47, '\p{^XIDC=n}', "");
Expect(0, 47, '\P{XIDC=n}', "");
Expect(1, 47, '\P{^XIDC=n}', "");
Expect(0, 57, '\p{XIDC=n}', "");
Expect(1, 57, '\p{^XIDC=n}', "");
Expect(1, 57, '\P{XIDC=n}', "");
Expect(0, 57, '\P{^XIDC=n}', "");
Expect(1, 47, '\p{XIDC= -N}', "");
Expect(0, 47, '\p{^XIDC= -N}', "");
Expect(0, 47, '\P{XIDC= -N}', "");
Expect(1, 47, '\P{^XIDC= -N}', "");
Expect(0, 57, '\p{XIDC= -N}', "");
Expect(1, 57, '\p{^XIDC= -N}', "");
Expect(1, 57, '\P{XIDC= -N}', "");
Expect(0, 57, '\P{^XIDC= -N}', "");
Error('\p{Is_XID_Continue=/a/	 F}');
Error('\P{Is_XID_Continue=/a/	 F}');
Expect(1, 47, '\p{Is_XID_Continue=f}', "");
Expect(0, 47, '\p{^Is_XID_Continue=f}', "");
Expect(0, 47, '\P{Is_XID_Continue=f}', "");
Expect(1, 47, '\P{^Is_XID_Continue=f}', "");
Expect(0, 57, '\p{Is_XID_Continue=f}', "");
Expect(1, 57, '\p{^Is_XID_Continue=f}', "");
Expect(1, 57, '\P{Is_XID_Continue=f}', "");
Expect(0, 57, '\P{^Is_XID_Continue=f}', "");
Expect(1, 47, '\p{Is_XID_Continue=	_f}', "");
Expect(0, 47, '\p{^Is_XID_Continue=	_f}', "");
Expect(0, 47, '\P{Is_XID_Continue=	_f}', "");
Expect(1, 47, '\P{^Is_XID_Continue=	_f}', "");
Expect(0, 57, '\p{Is_XID_Continue=	_f}', "");
Expect(1, 57, '\p{^Is_XID_Continue=	_f}', "");
Expect(1, 57, '\P{Is_XID_Continue=	_f}', "");
Expect(0, 57, '\P{^Is_XID_Continue=	_f}', "");
Error('\p{Is_XIDC=/a/ False}');
Error('\P{Is_XIDC=/a/ False}');
Expect(1, 47, '\p{Is_XIDC=false}', "");
Expect(0, 47, '\p{^Is_XIDC=false}', "");
Expect(0, 47, '\P{Is_XIDC=false}', "");
Expect(1, 47, '\P{^Is_XIDC=false}', "");
Expect(0, 57, '\p{Is_XIDC=false}', "");
Expect(1, 57, '\p{^Is_XIDC=false}', "");
Expect(1, 57, '\P{Is_XIDC=false}', "");
Expect(0, 57, '\P{^Is_XIDC=false}', "");
Expect(1, 47, '\p{Is_XIDC=--false}', "");
Expect(0, 47, '\p{^Is_XIDC=--false}', "");
Expect(0, 47, '\P{Is_XIDC=--false}', "");
Expect(1, 47, '\P{^Is_XIDC=--false}', "");
Expect(0, 57, '\p{Is_XIDC=--false}', "");
Expect(1, 57, '\p{^Is_XIDC=--false}', "");
Expect(1, 57, '\P{Is_XIDC=--false}', "");
Expect(0, 57, '\P{^Is_XIDC=--false}', "");
Error('\p{XID_Start= /a/Yes}');
Error('\P{XID_Start= /a/Yes}');
Expect(1, 90, '\p{XID_Start=yes}', "");
Expect(0, 90, '\p{^XID_Start=yes}', "");
Expect(0, 90, '\P{XID_Start=yes}', "");
Expect(1, 90, '\P{^XID_Start=yes}', "");
Expect(0, 64, '\p{XID_Start=yes}', "");
Expect(1, 64, '\p{^XID_Start=yes}', "");
Expect(1, 64, '\P{XID_Start=yes}', "");
Expect(0, 64, '\P{^XID_Start=yes}', "");
Expect(1, 90, '\p{XID_Start=	-YES}', "");
Expect(0, 90, '\p{^XID_Start=	-YES}', "");
Expect(0, 90, '\P{XID_Start=	-YES}', "");
Expect(1, 90, '\P{^XID_Start=	-YES}', "");
Expect(0, 64, '\p{XID_Start=	-YES}', "");
Expect(1, 64, '\p{^XID_Start=	-YES}', "");
Expect(1, 64, '\P{XID_Start=	-YES}', "");
Expect(0, 64, '\P{^XID_Start=	-YES}', "");
Error('\p{XIDS=:=	_y}');
Error('\P{XIDS=:=	_y}');
Expect(1, 90, '\p{XIDS:   y}', "");
Expect(0, 90, '\p{^XIDS:   y}', "");
Expect(0, 90, '\P{XIDS:   y}', "");
Expect(1, 90, '\P{^XIDS:   y}', "");
Expect(0, 64, '\p{XIDS:   y}', "");
Expect(1, 64, '\p{^XIDS:   y}', "");
Expect(1, 64, '\P{XIDS:   y}', "");
Expect(0, 64, '\P{^XIDS:   y}', "");
Expect(1, 90, '\p{XIDS=	Y}', "");
Expect(0, 90, '\p{^XIDS=	Y}', "");
Expect(0, 90, '\P{XIDS=	Y}', "");
Expect(1, 90, '\P{^XIDS=	Y}', "");
Expect(0, 64, '\p{XIDS=	Y}', "");
Expect(1, 64, '\p{^XIDS=	Y}', "");
Expect(1, 64, '\P{XIDS=	Y}', "");
Expect(0, 64, '\P{^XIDS=	Y}', "");
Error('\p{Is_XID_Start=	 t:=}');
Error('\P{Is_XID_Start=	 t:=}');
Expect(1, 90, '\p{Is_XID_Start: t}', "");
Expect(0, 90, '\p{^Is_XID_Start: t}', "");
Expect(0, 90, '\P{Is_XID_Start: t}', "");
Expect(1, 90, '\P{^Is_XID_Start: t}', "");
Expect(0, 64, '\p{Is_XID_Start: t}', "");
Expect(1, 64, '\p{^Is_XID_Start: t}', "");
Expect(1, 64, '\P{Is_XID_Start: t}', "");
Expect(0, 64, '\P{^Is_XID_Start: t}', "");
Expect(1, 90, '\p{Is_XID_Start=  T}', "");
Expect(0, 90, '\p{^Is_XID_Start=  T}', "");
Expect(0, 90, '\P{Is_XID_Start=  T}', "");
Expect(1, 90, '\P{^Is_XID_Start=  T}', "");
Expect(0, 64, '\p{Is_XID_Start=  T}', "");
Expect(1, 64, '\p{^Is_XID_Start=  T}', "");
Expect(1, 64, '\P{Is_XID_Start=  T}', "");
Expect(0, 64, '\P{^Is_XID_Start=  T}', "");
Error('\p{Is_XIDS=	True/a/}');
Error('\P{Is_XIDS=	True/a/}');
Expect(1, 90, '\p{Is_XIDS=true}', "");
Expect(0, 90, '\p{^Is_XIDS=true}', "");
Expect(0, 90, '\P{Is_XIDS=true}', "");
Expect(1, 90, '\P{^Is_XIDS=true}', "");
Expect(0, 64, '\p{Is_XIDS=true}', "");
Expect(1, 64, '\p{^Is_XIDS=true}', "");
Expect(1, 64, '\P{Is_XIDS=true}', "");
Expect(0, 64, '\P{^Is_XIDS=true}', "");
Expect(1, 90, '\p{Is_XIDS=  TRUE}', "");
Expect(0, 90, '\p{^Is_XIDS=  TRUE}', "");
Expect(0, 90, '\P{Is_XIDS=  TRUE}', "");
Expect(1, 90, '\P{^Is_XIDS=  TRUE}', "");
Expect(0, 64, '\p{Is_XIDS=  TRUE}', "");
Expect(1, 64, '\p{^Is_XIDS=  TRUE}', "");
Expect(1, 64, '\P{Is_XIDS=  TRUE}', "");
Expect(0, 64, '\P{^Is_XIDS=  TRUE}', "");
Error('\p{XID_Start:	_/a/No}');
Error('\P{XID_Start:	_/a/No}');
Expect(1, 64, '\p{XID_Start=no}', "");
Expect(0, 64, '\p{^XID_Start=no}', "");
Expect(0, 64, '\P{XID_Start=no}', "");
Expect(1, 64, '\P{^XID_Start=no}', "");
Expect(0, 90, '\p{XID_Start=no}', "");
Expect(1, 90, '\p{^XID_Start=no}', "");
Expect(1, 90, '\P{XID_Start=no}', "");
Expect(0, 90, '\P{^XID_Start=no}', "");
Expect(1, 64, '\p{XID_Start=	No}', "");
Expect(0, 64, '\p{^XID_Start=	No}', "");
Expect(0, 64, '\P{XID_Start=	No}', "");
Expect(1, 64, '\P{^XID_Start=	No}', "");
Expect(0, 90, '\p{XID_Start=	No}', "");
Expect(1, 90, '\p{^XID_Start=	No}', "");
Expect(1, 90, '\P{XID_Start=	No}', "");
Expect(0, 90, '\P{^XID_Start=	No}', "");
Error('\p{XIDS: :=-N}');
Error('\P{XIDS: :=-N}');
Expect(1, 64, '\p{XIDS=n}', "");
Expect(0, 64, '\p{^XIDS=n}', "");
Expect(0, 64, '\P{XIDS=n}', "");
Expect(1, 64, '\P{^XIDS=n}', "");
Expect(0, 90, '\p{XIDS=n}', "");
Expect(1, 90, '\p{^XIDS=n}', "");
Expect(1, 90, '\P{XIDS=n}', "");
Expect(0, 90, '\P{^XIDS=n}', "");
Expect(1, 64, '\p{XIDS=		n}', "");
Expect(0, 64, '\p{^XIDS=		n}', "");
Expect(0, 64, '\P{XIDS=		n}', "");
Expect(1, 64, '\P{^XIDS=		n}', "");
Expect(0, 90, '\p{XIDS=		n}', "");
Expect(1, 90, '\p{^XIDS=		n}', "");
Expect(1, 90, '\P{XIDS=		n}', "");
Expect(0, 90, '\P{^XIDS=		n}', "");
Error('\p{Is_XID_Start=-:=F}');
Error('\P{Is_XID_Start=-:=F}');
Expect(1, 64, '\p{Is_XID_Start=f}', "");
Expect(0, 64, '\p{^Is_XID_Start=f}', "");
Expect(0, 64, '\P{Is_XID_Start=f}', "");
Expect(1, 64, '\P{^Is_XID_Start=f}', "");
Expect(0, 90, '\p{Is_XID_Start=f}', "");
Expect(1, 90, '\p{^Is_XID_Start=f}', "");
Expect(1, 90, '\P{Is_XID_Start=f}', "");
Expect(0, 90, '\P{^Is_XID_Start=f}', "");
Expect(1, 64, '\p{Is_XID_Start=	F}', "");
Expect(0, 64, '\p{^Is_XID_Start=	F}', "");
Expect(0, 64, '\P{Is_XID_Start=	F}', "");
Expect(1, 64, '\P{^Is_XID_Start=	F}', "");
Expect(0, 90, '\p{Is_XID_Start=	F}', "");
Expect(1, 90, '\p{^Is_XID_Start=	F}', "");
Expect(1, 90, '\P{Is_XID_Start=	F}', "");
Expect(0, 90, '\P{^Is_XID_Start=	F}', "");
Error('\p{Is_XIDS=:=-False}');
Error('\P{Is_XIDS=:=-False}');
Expect(1, 64, '\p{Is_XIDS=false}', "");
Expect(0, 64, '\p{^Is_XIDS=false}', "");
Expect(0, 64, '\P{Is_XIDS=false}', "");
Expect(1, 64, '\P{^Is_XIDS=false}', "");
Expect(0, 90, '\p{Is_XIDS=false}', "");
Expect(1, 90, '\p{^Is_XIDS=false}', "");
Expect(1, 90, '\P{Is_XIDS=false}', "");
Expect(0, 90, '\P{^Is_XIDS=false}', "");
Expect(1, 64, '\p{Is_XIDS=	_False}', "");
Expect(0, 64, '\p{^Is_XIDS=	_False}', "");
Expect(0, 64, '\P{Is_XIDS=	_False}', "");
Expect(1, 64, '\P{^Is_XIDS=	_False}', "");
Expect(0, 90, '\p{Is_XIDS=	_False}', "");
Expect(1, 90, '\p{^Is_XIDS=	_False}', "");
Expect(1, 90, '\P{Is_XIDS=	_False}', "");
Expect(0, 90, '\P{^Is_XIDS=	_False}', "");
Error('\p{Script= -New:=tai-Lue}');
Error('\P{Script= -New:=tai-Lue}');
Expect(1, 6571, '\p{Script=newtailue}', "");
Expect(0, 6571, '\p{^Script=newtailue}', "");
Expect(0, 6571, '\P{Script=newtailue}', "");
Expect(1, 6571, '\P{^Script=newtailue}', "");
Expect(0, 6527, '\p{Script=newtailue}', "");
Expect(1, 6527, '\p{^Script=newtailue}', "");
Expect(1, 6527, '\P{Script=newtailue}', "");
Expect(0, 6527, '\P{^Script=newtailue}', "");
Expect(1, 6571, '\p{Script=_	NEW tai-LUE}', "");
Expect(0, 6571, '\p{^Script=_	NEW tai-LUE}', "");
Expect(0, 6571, '\P{Script=_	NEW tai-LUE}', "");
Expect(1, 6571, '\P{^Script=_	NEW tai-LUE}', "");
Expect(0, 6527, '\p{Script=_	NEW tai-LUE}', "");
Expect(1, 6527, '\p{^Script=_	NEW tai-LUE}', "");
Expect(1, 6527, '\P{Script=_	NEW tai-LUE}', "");
Expect(0, 6527, '\P{^Script=_	NEW tai-LUE}', "");
Error('\p{Sc= -Talu/a/}');
Error('\P{Sc= -Talu/a/}');
Expect(1, 6571, '\p{Sc=talu}', "");
Expect(0, 6571, '\p{^Sc=talu}', "");
Expect(0, 6571, '\P{Sc=talu}', "");
Expect(1, 6571, '\P{^Sc=talu}', "");
Expect(0, 6527, '\p{Sc=talu}', "");
Expect(1, 6527, '\p{^Sc=talu}', "");
Expect(1, 6527, '\P{Sc=talu}', "");
Expect(0, 6527, '\P{^Sc=talu}', "");
Expect(1, 6571, '\p{Sc=- talu}', "");
Expect(0, 6571, '\p{^Sc=- talu}', "");
Expect(0, 6571, '\P{Sc=- talu}', "");
Expect(1, 6571, '\P{^Sc=- talu}', "");
Expect(0, 6527, '\p{Sc=- talu}', "");
Expect(1, 6527, '\p{^Sc=- talu}', "");
Expect(1, 6527, '\P{Sc=- talu}', "");
Expect(0, 6527, '\P{^Sc=- talu}', "");
Error('\p{Is_Script=:=_	Newtai-lue}');
Error('\P{Is_Script=:=_	Newtai-lue}');
Expect(1, 6571, '\p{Is_Script=newtailue}', "");
Expect(0, 6571, '\p{^Is_Script=newtailue}', "");
Expect(0, 6571, '\P{Is_Script=newtailue}', "");
Expect(1, 6571, '\P{^Is_Script=newtailue}', "");
Expect(0, 6527, '\p{Is_Script=newtailue}', "");
Expect(1, 6527, '\p{^Is_Script=newtailue}', "");
Expect(1, 6527, '\P{Is_Script=newtailue}', "");
Expect(0, 6527, '\P{^Is_Script=newtailue}', "");
Expect(1, 6571, '\p{Is_Script= _New Tai-Lue}', "");
Expect(0, 6571, '\p{^Is_Script= _New Tai-Lue}', "");
Expect(0, 6571, '\P{Is_Script= _New Tai-Lue}', "");
Expect(1, 6571, '\P{^Is_Script= _New Tai-Lue}', "");
Expect(0, 6527, '\p{Is_Script= _New Tai-Lue}', "");
Expect(1, 6527, '\p{^Is_Script= _New Tai-Lue}', "");
Expect(1, 6527, '\P{Is_Script= _New Tai-Lue}', "");
Expect(0, 6527, '\P{^Is_Script= _New Tai-Lue}', "");
Error('\p{Is_Sc:/a/__TALU}');
Error('\P{Is_Sc:/a/__TALU}');
Expect(1, 6571, '\p{Is_Sc=talu}', "");
Expect(0, 6571, '\p{^Is_Sc=talu}', "");
Expect(0, 6571, '\P{Is_Sc=talu}', "");
Expect(1, 6571, '\P{^Is_Sc=talu}', "");
Expect(0, 6527, '\p{Is_Sc=talu}', "");
Expect(1, 6527, '\p{^Is_Sc=talu}', "");
Expect(1, 6527, '\P{Is_Sc=talu}', "");
Expect(0, 6527, '\P{^Is_Sc=talu}', "");
Expect(1, 6571, '\p{Is_Sc=-_talu}', "");
Expect(0, 6571, '\p{^Is_Sc=-_talu}', "");
Expect(0, 6571, '\P{Is_Sc=-_talu}', "");
Expect(1, 6571, '\P{^Is_Sc=-_talu}', "");
Expect(0, 6527, '\p{Is_Sc=-_talu}', "");
Expect(1, 6527, '\p{^Is_Sc=-_talu}', "");
Expect(1, 6527, '\P{Is_Sc=-_talu}', "");
Expect(0, 6527, '\P{^Is_Sc=-_talu}', "");
Error('\p{Script=:=-	Gothic}');
Error('\P{Script=:=-	Gothic}');
Expect(1, 66378, '\p{Script=gothic}', "");
Expect(0, 66378, '\p{^Script=gothic}', "");
Expect(0, 66378, '\P{Script=gothic}', "");
Expect(1, 66378, '\P{^Script=gothic}', "");
Expect(0, 66351, '\p{Script=gothic}', "");
Expect(1, 66351, '\p{^Script=gothic}', "");
Expect(1, 66351, '\P{Script=gothic}', "");
Expect(0, 66351, '\P{^Script=gothic}', "");
Expect(1, 66378, '\p{Script=	-GOTHIC}', "");
Expect(0, 66378, '\p{^Script=	-GOTHIC}', "");
Expect(0, 66378, '\P{Script=	-GOTHIC}', "");
Expect(1, 66378, '\P{^Script=	-GOTHIC}', "");
Expect(0, 66351, '\p{Script=	-GOTHIC}', "");
Expect(1, 66351, '\p{^Script=	-GOTHIC}', "");
Expect(1, 66351, '\P{Script=	-GOTHIC}', "");
Expect(0, 66351, '\P{^Script=	-GOTHIC}', "");
Error('\p{Sc=	-goth/a/}');
Error('\P{Sc=	-goth/a/}');
Expect(1, 66378, '\p{Sc=goth}', "");
Expect(0, 66378, '\p{^Sc=goth}', "");
Expect(0, 66378, '\P{Sc=goth}', "");
Expect(1, 66378, '\P{^Sc=goth}', "");
Expect(0, 66351, '\p{Sc=goth}', "");
Expect(1, 66351, '\p{^Sc=goth}', "");
Expect(1, 66351, '\P{Sc=goth}', "");
Expect(0, 66351, '\P{^Sc=goth}', "");
Expect(1, 66378, '\p{Sc: - Goth}', "");
Expect(0, 66378, '\p{^Sc: - Goth}', "");
Expect(0, 66378, '\P{Sc: - Goth}', "");
Expect(1, 66378, '\P{^Sc: - Goth}', "");
Expect(0, 66351, '\p{Sc: - Goth}', "");
Expect(1, 66351, '\p{^Sc: - Goth}', "");
Expect(1, 66351, '\P{Sc: - Goth}', "");
Expect(0, 66351, '\P{^Sc: - Goth}', "");
Error('\p{Is_Script=:=- Gothic}');
Error('\P{Is_Script=:=- Gothic}');
Expect(1, 66378, '\p{Is_Script=gothic}', "");
Expect(0, 66378, '\p{^Is_Script=gothic}', "");
Expect(0, 66378, '\P{Is_Script=gothic}', "");
Expect(1, 66378, '\P{^Is_Script=gothic}', "");
Expect(0, 66351, '\p{Is_Script=gothic}', "");
Expect(1, 66351, '\p{^Is_Script=gothic}', "");
Expect(1, 66351, '\P{Is_Script=gothic}', "");
Expect(0, 66351, '\P{^Is_Script=gothic}', "");
Expect(1, 66378, '\p{Is_Script=_gothic}', "");
Expect(0, 66378, '\p{^Is_Script=_gothic}', "");
Expect(0, 66378, '\P{Is_Script=_gothic}', "");
Expect(1, 66378, '\P{^Is_Script=_gothic}', "");
Expect(0, 66351, '\p{Is_Script=_gothic}', "");
Expect(1, 66351, '\p{^Is_Script=_gothic}', "");
Expect(1, 66351, '\P{Is_Script=_gothic}', "");
Expect(0, 66351, '\P{^Is_Script=_gothic}', "");
Error('\p{Is_Sc=	 Goth/a/}');
Error('\P{Is_Sc=	 Goth/a/}');
Expect(1, 66378, '\p{Is_Sc=goth}', "");
Expect(0, 66378, '\p{^Is_Sc=goth}', "");
Expect(0, 66378, '\P{Is_Sc=goth}', "");
Expect(1, 66378, '\P{^Is_Sc=goth}', "");
Expect(0, 66351, '\p{Is_Sc=goth}', "");
Expect(1, 66351, '\p{^Is_Sc=goth}', "");
Expect(1, 66351, '\P{Is_Sc=goth}', "");
Expect(0, 66351, '\P{^Is_Sc=goth}', "");
Expect(1, 66378, '\p{Is_Sc=-Goth}', "");
Expect(0, 66378, '\p{^Is_Sc=-Goth}', "");
Expect(0, 66378, '\P{Is_Sc=-Goth}', "");
Expect(1, 66378, '\P{^Is_Sc=-Goth}', "");
Expect(0, 66351, '\p{Is_Sc=-Goth}', "");
Expect(1, 66351, '\p{^Is_Sc=-Goth}', "");
Expect(1, 66351, '\P{Is_Sc=-Goth}', "");
Expect(0, 66351, '\P{^Is_Sc=-Goth}', "");
Error('\p{Script=OLD-italic/a/}');
Error('\P{Script=OLD-italic/a/}');
Expect(1, 66334, '\p{Script=olditalic}', "");
Expect(0, 66334, '\p{^Script=olditalic}', "");
Expect(0, 66334, '\P{Script=olditalic}', "");
Expect(1, 66334, '\P{^Script=olditalic}', "");
Expect(0, 66303, '\p{Script=olditalic}', "");
Expect(1, 66303, '\p{^Script=olditalic}', "");
Expect(1, 66303, '\P{Script=olditalic}', "");
Expect(0, 66303, '\P{^Script=olditalic}', "");
Expect(1, 66334, '\p{Script=	_oldItalic}', "");
Expect(0, 66334, '\p{^Script=	_oldItalic}', "");
Expect(0, 66334, '\P{Script=	_oldItalic}', "");
Expect(1, 66334, '\P{^Script=	_oldItalic}', "");
Expect(0, 66303, '\p{Script=	_oldItalic}', "");
Expect(1, 66303, '\p{^Script=	_oldItalic}', "");
Expect(1, 66303, '\P{Script=	_oldItalic}', "");
Expect(0, 66303, '\P{^Script=	_oldItalic}', "");
Error('\p{Sc=	-ital:=}');
Error('\P{Sc=	-ital:=}');
Expect(1, 66334, '\p{Sc:   ital}', "");
Expect(0, 66334, '\p{^Sc:   ital}', "");
Expect(0, 66334, '\P{Sc:   ital}', "");
Expect(1, 66334, '\P{^Sc:   ital}', "");
Expect(0, 66303, '\p{Sc:   ital}', "");
Expect(1, 66303, '\p{^Sc:   ital}', "");
Expect(1, 66303, '\P{Sc:   ital}', "");
Expect(0, 66303, '\P{^Sc:   ital}', "");
Expect(1, 66334, '\p{Sc=	 ITAL}', "");
Expect(0, 66334, '\p{^Sc=	 ITAL}', "");
Expect(0, 66334, '\P{Sc=	 ITAL}', "");
Expect(1, 66334, '\P{^Sc=	 ITAL}', "");
Expect(0, 66303, '\p{Sc=	 ITAL}', "");
Expect(1, 66303, '\p{^Sc=	 ITAL}', "");
Expect(1, 66303, '\P{Sc=	 ITAL}', "");
Expect(0, 66303, '\P{^Sc=	 ITAL}', "");
Error('\p{Is_Script:_Old	Italic/a/}');
Error('\P{Is_Script:_Old	Italic/a/}');
Expect(1, 66334, '\p{Is_Script=olditalic}', "");
Expect(0, 66334, '\p{^Is_Script=olditalic}', "");
Expect(0, 66334, '\P{Is_Script=olditalic}', "");
Expect(1, 66334, '\P{^Is_Script=olditalic}', "");
Expect(0, 66303, '\p{Is_Script=olditalic}', "");
Expect(1, 66303, '\p{^Is_Script=olditalic}', "");
Expect(1, 66303, '\P{Is_Script=olditalic}', "");
Expect(0, 66303, '\P{^Is_Script=olditalic}', "");
Expect(1, 66334, '\p{Is_Script=	-OLD_Italic}', "");
Expect(0, 66334, '\p{^Is_Script=	-OLD_Italic}', "");
Expect(0, 66334, '\P{Is_Script=	-OLD_Italic}', "");
Expect(1, 66334, '\P{^Is_Script=	-OLD_Italic}', "");
Expect(0, 66303, '\p{Is_Script=	-OLD_Italic}', "");
Expect(1, 66303, '\p{^Is_Script=	-OLD_Italic}', "");
Expect(1, 66303, '\P{Is_Script=	-OLD_Italic}', "");
Expect(0, 66303, '\P{^Is_Script=	-OLD_Italic}', "");
Error('\p{Is_Sc:   -:=ital}');
Error('\P{Is_Sc:   -:=ital}');
Expect(1, 66334, '\p{Is_Sc=ital}', "");
Expect(0, 66334, '\p{^Is_Sc=ital}', "");
Expect(0, 66334, '\P{Is_Sc=ital}', "");
Expect(1, 66334, '\P{^Is_Sc=ital}', "");
Expect(0, 66303, '\p{Is_Sc=ital}', "");
Expect(1, 66303, '\p{^Is_Sc=ital}', "");
Expect(1, 66303, '\P{Is_Sc=ital}', "");
Expect(0, 66303, '\P{^Is_Sc=ital}', "");
Expect(1, 66334, '\p{Is_Sc=-_Ital}', "");
Expect(0, 66334, '\p{^Is_Sc=-_Ital}', "");
Expect(0, 66334, '\P{Is_Sc=-_Ital}', "");
Expect(1, 66334, '\P{^Is_Sc=-_Ital}', "");
Expect(0, 66303, '\p{Is_Sc=-_Ital}', "");
Expect(1, 66303, '\p{^Is_Sc=-_Ital}', "");
Expect(1, 66303, '\P{Is_Sc=-_Ital}', "");
Expect(0, 66303, '\P{^Is_Sc=-_Ital}', "");
Error('\p{Script=_bamum:=}');
Error('\P{Script=_bamum:=}');
Expect(1, 42743, '\p{Script=bamum}', "");
Expect(0, 42743, '\p{^Script=bamum}', "");
Expect(0, 42743, '\P{Script=bamum}', "");
Expect(1, 42743, '\P{^Script=bamum}', "");
Expect(0, 42655, '\p{Script=bamum}', "");
Expect(1, 42655, '\p{^Script=bamum}', "");
Expect(1, 42655, '\P{Script=bamum}', "");
Expect(0, 42655, '\P{^Script=bamum}', "");
Expect(1, 42743, '\p{Script=_Bamum}', "");
Expect(0, 42743, '\p{^Script=_Bamum}', "");
Expect(0, 42743, '\P{Script=_Bamum}', "");
Expect(1, 42743, '\P{^Script=_Bamum}', "");
Expect(0, 42655, '\p{Script=_Bamum}', "");
Expect(1, 42655, '\p{^Script=_Bamum}', "");
Expect(1, 42655, '\P{Script=_Bamum}', "");
Expect(0, 42655, '\P{^Script=_Bamum}', "");
Error('\p{Sc=__BAMU/a/}');
Error('\P{Sc=__BAMU/a/}');
Expect(1, 42743, '\p{Sc=bamu}', "");
Expect(0, 42743, '\p{^Sc=bamu}', "");
Expect(0, 42743, '\P{Sc=bamu}', "");
Expect(1, 42743, '\P{^Sc=bamu}', "");
Expect(0, 42655, '\p{Sc=bamu}', "");
Expect(1, 42655, '\p{^Sc=bamu}', "");
Expect(1, 42655, '\P{Sc=bamu}', "");
Expect(0, 42655, '\P{^Sc=bamu}', "");
Expect(1, 42743, '\p{Sc=-	Bamu}', "");
Expect(0, 42743, '\p{^Sc=-	Bamu}', "");
Expect(0, 42743, '\P{Sc=-	Bamu}', "");
Expect(1, 42743, '\P{^Sc=-	Bamu}', "");
Expect(0, 42655, '\p{Sc=-	Bamu}', "");
Expect(1, 42655, '\p{^Sc=-	Bamu}', "");
Expect(1, 42655, '\P{Sc=-	Bamu}', "");
Expect(0, 42655, '\P{^Sc=-	Bamu}', "");
Error('\p{Is_Script=:=_-bamum}');
Error('\P{Is_Script=:=_-bamum}');
Expect(1, 42743, '\p{Is_Script=bamum}', "");
Expect(0, 42743, '\p{^Is_Script=bamum}', "");
Expect(0, 42743, '\P{Is_Script=bamum}', "");
Expect(1, 42743, '\P{^Is_Script=bamum}', "");
Expect(0, 42655, '\p{Is_Script=bamum}', "");
Expect(1, 42655, '\p{^Is_Script=bamum}', "");
Expect(1, 42655, '\P{Is_Script=bamum}', "");
Expect(0, 42655, '\P{^Is_Script=bamum}', "");
Expect(1, 42743, '\p{Is_Script=_bamum}', "");
Expect(0, 42743, '\p{^Is_Script=_bamum}', "");
Expect(0, 42743, '\P{Is_Script=_bamum}', "");
Expect(1, 42743, '\P{^Is_Script=_bamum}', "");
Expect(0, 42655, '\p{Is_Script=_bamum}', "");
Expect(1, 42655, '\p{^Is_Script=_bamum}', "");
Expect(1, 42655, '\P{Is_Script=_bamum}', "");
Expect(0, 42655, '\P{^Is_Script=_bamum}', "");
Error('\p{Is_Sc=	 bamu:=}');
Error('\P{Is_Sc=	 bamu:=}');
Expect(1, 42743, '\p{Is_Sc=bamu}', "");
Expect(0, 42743, '\p{^Is_Sc=bamu}', "");
Expect(0, 42743, '\P{Is_Sc=bamu}', "");
Expect(1, 42743, '\P{^Is_Sc=bamu}', "");
Expect(0, 42655, '\p{Is_Sc=bamu}', "");
Expect(1, 42655, '\p{^Is_Sc=bamu}', "");
Expect(1, 42655, '\P{Is_Sc=bamu}', "");
Expect(0, 42655, '\P{^Is_Sc=bamu}', "");
Expect(1, 42743, '\p{Is_Sc=	_BAMU}', "");
Expect(0, 42743, '\p{^Is_Sc=	_BAMU}', "");
Expect(0, 42743, '\P{Is_Sc=	_BAMU}', "");
Expect(1, 42743, '\P{^Is_Sc=	_BAMU}', "");
Expect(0, 42655, '\p{Is_Sc=	_BAMU}', "");
Expect(1, 42655, '\p{^Is_Sc=	_BAMU}', "");
Expect(1, 42655, '\P{Is_Sc=	_BAMU}', "");
Expect(0, 42655, '\P{^Is_Sc=	_BAMU}', "");
Error('\p{Script=:=VAI}');
Error('\P{Script=:=VAI}');
Expect(1, 42539, '\p{Script=vai}', "");
Expect(0, 42539, '\p{^Script=vai}', "");
Expect(0, 42539, '\P{Script=vai}', "");
Expect(1, 42539, '\P{^Script=vai}', "");
Expect(0, 42239, '\p{Script=vai}', "");
Expect(1, 42239, '\p{^Script=vai}', "");
Expect(1, 42239, '\P{Script=vai}', "");
Expect(0, 42239, '\P{^Script=vai}', "");
Expect(1, 42539, '\p{Script=__vai}', "");
Expect(0, 42539, '\p{^Script=__vai}', "");
Expect(0, 42539, '\P{Script=__vai}', "");
Expect(1, 42539, '\P{^Script=__vai}', "");
Expect(0, 42239, '\p{Script=__vai}', "");
Expect(1, 42239, '\p{^Script=__vai}', "");
Expect(1, 42239, '\P{Script=__vai}', "");
Expect(0, 42239, '\P{^Script=__vai}', "");
Error('\p{Sc=/a/ 	VAII}');
Error('\P{Sc=/a/ 	VAII}');
Expect(1, 42539, '\p{Sc=vaii}', "");
Expect(0, 42539, '\p{^Sc=vaii}', "");
Expect(0, 42539, '\P{Sc=vaii}', "");
Expect(1, 42539, '\P{^Sc=vaii}', "");
Expect(0, 42239, '\p{Sc=vaii}', "");
Expect(1, 42239, '\p{^Sc=vaii}', "");
Expect(1, 42239, '\P{Sc=vaii}', "");
Expect(0, 42239, '\P{^Sc=vaii}', "");
Expect(1, 42539, '\p{Sc=  vaii}', "");
Expect(0, 42539, '\p{^Sc=  vaii}', "");
Expect(0, 42539, '\P{Sc=  vaii}', "");
Expect(1, 42539, '\P{^Sc=  vaii}', "");
Expect(0, 42239, '\p{Sc=  vaii}', "");
Expect(1, 42239, '\p{^Sc=  vaii}', "");
Expect(1, 42239, '\P{Sc=  vaii}', "");
Expect(0, 42239, '\P{^Sc=  vaii}', "");
Error('\p{Is_Script=_Vai:=}');
Error('\P{Is_Script=_Vai:=}');
Expect(1, 42539, '\p{Is_Script:vai}', "");
Expect(0, 42539, '\p{^Is_Script:vai}', "");
Expect(0, 42539, '\P{Is_Script:vai}', "");
Expect(1, 42539, '\P{^Is_Script:vai}', "");
Expect(0, 42239, '\p{Is_Script:vai}', "");
Expect(1, 42239, '\p{^Is_Script:vai}', "");
Expect(1, 42239, '\P{Is_Script:vai}', "");
Expect(0, 42239, '\P{^Is_Script:vai}', "");
Expect(1, 42539, '\p{Is_Script=--VAI}', "");
Expect(0, 42539, '\p{^Is_Script=--VAI}', "");
Expect(0, 42539, '\P{Is_Script=--VAI}', "");
Expect(1, 42539, '\P{^Is_Script=--VAI}', "");
Expect(0, 42239, '\p{Is_Script=--VAI}', "");
Expect(1, 42239, '\p{^Is_Script=--VAI}', "");
Expect(1, 42239, '\P{Is_Script=--VAI}', "");
Expect(0, 42239, '\P{^Is_Script=--VAI}', "");
Error('\p{Is_Sc= /a/VAII}');
Error('\P{Is_Sc= /a/VAII}');
Expect(1, 42539, '\p{Is_Sc=vaii}', "");
Expect(0, 42539, '\p{^Is_Sc=vaii}', "");
Expect(0, 42539, '\P{Is_Sc=vaii}', "");
Expect(1, 42539, '\P{^Is_Sc=vaii}', "");
Expect(0, 42239, '\p{Is_Sc=vaii}', "");
Expect(1, 42239, '\p{^Is_Sc=vaii}', "");
Expect(1, 42239, '\P{Is_Sc=vaii}', "");
Expect(0, 42239, '\P{^Is_Sc=vaii}', "");
Expect(1, 42539, '\p{Is_Sc:   -vaii}', "");
Expect(0, 42539, '\p{^Is_Sc:   -vaii}', "");
Expect(0, 42539, '\P{Is_Sc:   -vaii}', "");
Expect(1, 42539, '\P{^Is_Sc:   -vaii}', "");
Expect(0, 42239, '\p{Is_Sc:   -vaii}', "");
Expect(1, 42239, '\p{^Is_Sc:   -vaii}', "");
Expect(1, 42239, '\P{Is_Sc:   -vaii}', "");
Expect(0, 42239, '\P{^Is_Sc:   -vaii}', "");
Error('\p{Script=/a/-_Inscriptional-parthian}');
Error('\P{Script=/a/-_Inscriptional-parthian}');
Expect(1, 68437, '\p{Script=inscriptionalparthian}', "");
Expect(0, 68437, '\p{^Script=inscriptionalparthian}', "");
Expect(0, 68437, '\P{Script=inscriptionalparthian}', "");
Expect(1, 68437, '\P{^Script=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Script=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Script=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Script=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Script=inscriptionalparthian}', "");
Expect(1, 68437, '\p{Script=	-inscriptional-Parthian}', "");
Expect(0, 68437, '\p{^Script=	-inscriptional-Parthian}', "");
Expect(0, 68437, '\P{Script=	-inscriptional-Parthian}', "");
Expect(1, 68437, '\P{^Script=	-inscriptional-Parthian}', "");
Expect(0, 68415, '\p{Script=	-inscriptional-Parthian}', "");
Expect(1, 68415, '\p{^Script=	-inscriptional-Parthian}', "");
Expect(1, 68415, '\P{Script=	-inscriptional-Parthian}', "");
Expect(0, 68415, '\P{^Script=	-inscriptional-Parthian}', "");
Error('\p{Sc=		PRTI/a/}');
Error('\P{Sc=		PRTI/a/}');
Expect(1, 68437, '\p{Sc=prti}', "");
Expect(0, 68437, '\p{^Sc=prti}', "");
Expect(0, 68437, '\P{Sc=prti}', "");
Expect(1, 68437, '\P{^Sc=prti}', "");
Expect(0, 68415, '\p{Sc=prti}', "");
Expect(1, 68415, '\p{^Sc=prti}', "");
Expect(1, 68415, '\P{Sc=prti}', "");
Expect(0, 68415, '\P{^Sc=prti}', "");
Expect(1, 68437, '\p{Sc=_PRTI}', "");
Expect(0, 68437, '\p{^Sc=_PRTI}', "");
Expect(0, 68437, '\P{Sc=_PRTI}', "");
Expect(1, 68437, '\P{^Sc=_PRTI}', "");
Expect(0, 68415, '\p{Sc=_PRTI}', "");
Expect(1, 68415, '\p{^Sc=_PRTI}', "");
Expect(1, 68415, '\P{Sc=_PRTI}', "");
Expect(0, 68415, '\P{^Sc=_PRTI}', "");
Error('\p{Is_Script=/a/	 Inscriptional	Parthian}');
Error('\P{Is_Script=/a/	 Inscriptional	Parthian}');
Expect(1, 68437, '\p{Is_Script=inscriptionalparthian}', "");
Expect(0, 68437, '\p{^Is_Script=inscriptionalparthian}', "");
Expect(0, 68437, '\P{Is_Script=inscriptionalparthian}', "");
Expect(1, 68437, '\P{^Is_Script=inscriptionalparthian}', "");
Expect(0, 68415, '\p{Is_Script=inscriptionalparthian}', "");
Expect(1, 68415, '\p{^Is_Script=inscriptionalparthian}', "");
Expect(1, 68415, '\P{Is_Script=inscriptionalparthian}', "");
Expect(0, 68415, '\P{^Is_Script=inscriptionalparthian}', "");
Expect(1, 68437, '\p{Is_Script=	Inscriptional PARTHIAN}', "");
Expect(0, 68437, '\p{^Is_Script=	Inscriptional PARTHIAN}', "");
Expect(0, 68437, '\P{Is_Script=	Inscriptional PARTHIAN}', "");
Expect(1, 68437, '\P{^Is_Script=	Inscriptional PARTHIAN}', "");
Expect(0, 68415, '\p{Is_Script=	Inscriptional PARTHIAN}', "");
Expect(1, 68415, '\p{^Is_Script=	Inscriptional PARTHIAN}', "");
Expect(1, 68415, '\P{Is_Script=	Inscriptional PARTHIAN}', "");
Expect(0, 68415, '\P{^Is_Script=	Inscriptional PARTHIAN}', "");
Error('\p{Is_Sc:	:=Prti}');
Error('\P{Is_Sc:	:=Prti}');
Expect(1, 68437, '\p{Is_Sc=prti}', "");
Expect(0, 68437, '\p{^Is_Sc=prti}', "");
Expect(0, 68437, '\P{Is_Sc=prti}', "");
Expect(1, 68437, '\P{^Is_Sc=prti}', "");
Expect(0, 68415, '\p{Is_Sc=prti}', "");
Expect(1, 68415, '\p{^Is_Sc=prti}', "");
Expect(1, 68415, '\P{Is_Sc=prti}', "");
Expect(0, 68415, '\P{^Is_Sc=prti}', "");
Expect(1, 68437, '\p{Is_Sc=_Prti}', "");
Expect(0, 68437, '\p{^Is_Sc=_Prti}', "");
Expect(0, 68437, '\P{Is_Sc=_Prti}', "");
Expect(1, 68437, '\P{^Is_Sc=_Prti}', "");
Expect(0, 68415, '\p{Is_Sc=_Prti}', "");
Expect(1, 68415, '\p{^Is_Sc=_Prti}', "");
Expect(1, 68415, '\P{Is_Sc=_Prti}', "");
Expect(0, 68415, '\P{^Is_Sc=_Prti}', "");
Error('\p{Script=_/a/Runic}');
Error('\P{Script=_/a/Runic}');
Expect(1, 5866, '\p{Script=runic}', "");
Expect(0, 5866, '\p{^Script=runic}', "");
Expect(0, 5866, '\P{Script=runic}', "");
Expect(1, 5866, '\P{^Script=runic}', "");
Expect(0, 5791, '\p{Script=runic}', "");
Expect(1, 5791, '\p{^Script=runic}', "");
Expect(1, 5791, '\P{Script=runic}', "");
Expect(0, 5791, '\P{^Script=runic}', "");
Expect(1, 5866, '\p{Script:   _ runic}', "");
Expect(0, 5866, '\p{^Script:   _ runic}', "");
Expect(0, 5866, '\P{Script:   _ runic}', "");
Expect(1, 5866, '\P{^Script:   _ runic}', "");
Expect(0, 5791, '\p{Script:   _ runic}', "");
Expect(1, 5791, '\p{^Script:   _ runic}', "");
Expect(1, 5791, '\P{Script:   _ runic}', "");
Expect(0, 5791, '\P{^Script:   _ runic}', "");
Error('\p{Sc=	_Runr:=}');
Error('\P{Sc=	_Runr:=}');
Expect(1, 5866, '\p{Sc=runr}', "");
Expect(0, 5866, '\p{^Sc=runr}', "");
Expect(0, 5866, '\P{Sc=runr}', "");
Expect(1, 5866, '\P{^Sc=runr}', "");
Expect(0, 5791, '\p{Sc=runr}', "");
Expect(1, 5791, '\p{^Sc=runr}', "");
Expect(1, 5791, '\P{Sc=runr}', "");
Expect(0, 5791, '\P{^Sc=runr}', "");
Expect(1, 5866, '\p{Sc=_Runr}', "");
Expect(0, 5866, '\p{^Sc=_Runr}', "");
Expect(0, 5866, '\P{Sc=_Runr}', "");
Expect(1, 5866, '\P{^Sc=_Runr}', "");
Expect(0, 5791, '\p{Sc=_Runr}', "");
Expect(1, 5791, '\p{^Sc=_Runr}', "");
Expect(1, 5791, '\P{Sc=_Runr}', "");
Expect(0, 5791, '\P{^Sc=_Runr}', "");
Error('\p{Is_Script=/a/runic}');
Error('\P{Is_Script=/a/runic}');
Expect(1, 5866, '\p{Is_Script=runic}', "");
Expect(0, 5866, '\p{^Is_Script=runic}', "");
Expect(0, 5866, '\P{Is_Script=runic}', "");
Expect(1, 5866, '\P{^Is_Script=runic}', "");
Expect(0, 5791, '\p{Is_Script=runic}', "");
Expect(1, 5791, '\p{^Is_Script=runic}', "");
Expect(1, 5791, '\P{Is_Script=runic}', "");
Expect(0, 5791, '\P{^Is_Script=runic}', "");
Expect(1, 5866, '\p{Is_Script=_Runic}', "");
Expect(0, 5866, '\p{^Is_Script=_Runic}', "");
Expect(0, 5866, '\P{Is_Script=_Runic}', "");
Expect(1, 5866, '\P{^Is_Script=_Runic}', "");
Expect(0, 5791, '\p{Is_Script=_Runic}', "");
Expect(1, 5791, '\p{^Is_Script=_Runic}', "");
Expect(1, 5791, '\P{Is_Script=_Runic}', "");
Expect(0, 5791, '\P{^Is_Script=_Runic}', "");
Error('\p{Is_Sc=:= Runr}');
Error('\P{Is_Sc=:= Runr}');
Expect(1, 5866, '\p{Is_Sc:runr}', "");
Expect(0, 5866, '\p{^Is_Sc:runr}', "");
Expect(0, 5866, '\P{Is_Sc:runr}', "");
Expect(1, 5866, '\P{^Is_Sc:runr}', "");
Expect(0, 5791, '\p{Is_Sc:runr}', "");
Expect(1, 5791, '\p{^Is_Sc:runr}', "");
Expect(1, 5791, '\P{Is_Sc:runr}', "");
Expect(0, 5791, '\P{^Is_Sc:runr}', "");
Expect(1, 5866, '\p{Is_Sc:  runr}', "");
Expect(0, 5866, '\p{^Is_Sc:  runr}', "");
Expect(0, 5866, '\P{Is_Sc:  runr}', "");
Expect(1, 5866, '\P{^Is_Sc:  runr}', "");
Expect(0, 5791, '\p{Is_Sc:  runr}', "");
Expect(1, 5791, '\p{^Is_Sc:  runr}', "");
Expect(1, 5791, '\P{Is_Sc:  runr}', "");
Expect(0, 5791, '\P{^Is_Sc:  runr}', "");
Error('\p{Script:	 _CHEROKEE/a/}');
Error('\P{Script:	 _CHEROKEE/a/}');
Expect(1, 5108, '\p{Script=cherokee}', "");
Expect(0, 5108, '\p{^Script=cherokee}', "");
Expect(0, 5108, '\P{Script=cherokee}', "");
Expect(1, 5108, '\P{^Script=cherokee}', "");
Expect(0, 5023, '\p{Script=cherokee}', "");
Expect(1, 5023, '\p{^Script=cherokee}', "");
Expect(1, 5023, '\P{Script=cherokee}', "");
Expect(0, 5023, '\P{^Script=cherokee}', "");
Expect(1, 5108, '\p{Script=_ Cherokee}', "");
Expect(0, 5108, '\p{^Script=_ Cherokee}', "");
Expect(0, 5108, '\P{Script=_ Cherokee}', "");
Expect(1, 5108, '\P{^Script=_ Cherokee}', "");
Expect(0, 5023, '\p{Script=_ Cherokee}', "");
Expect(1, 5023, '\p{^Script=_ Cherokee}', "");
Expect(1, 5023, '\P{Script=_ Cherokee}', "");
Expect(0, 5023, '\P{^Script=_ Cherokee}', "");
Error('\p{Sc=/a/_Cher}');
Error('\P{Sc=/a/_Cher}');
Expect(1, 5108, '\p{Sc=cher}', "");
Expect(0, 5108, '\p{^Sc=cher}', "");
Expect(0, 5108, '\P{Sc=cher}', "");
Expect(1, 5108, '\P{^Sc=cher}', "");
Expect(0, 5023, '\p{Sc=cher}', "");
Expect(1, 5023, '\p{^Sc=cher}', "");
Expect(1, 5023, '\P{Sc=cher}', "");
Expect(0, 5023, '\P{^Sc=cher}', "");
Expect(1, 5108, '\p{Sc=	-cher}', "");
Expect(0, 5108, '\p{^Sc=	-cher}', "");
Expect(0, 5108, '\P{Sc=	-cher}', "");
Expect(1, 5108, '\P{^Sc=	-cher}', "");
Expect(0, 5023, '\p{Sc=	-cher}', "");
Expect(1, 5023, '\p{^Sc=	-cher}', "");
Expect(1, 5023, '\P{Sc=	-cher}', "");
Expect(0, 5023, '\P{^Sc=	-cher}', "");
Error('\p{Is_Script=/a/-Cherokee}');
Error('\P{Is_Script=/a/-Cherokee}');
Expect(1, 5108, '\p{Is_Script=cherokee}', "");
Expect(0, 5108, '\p{^Is_Script=cherokee}', "");
Expect(0, 5108, '\P{Is_Script=cherokee}', "");
Expect(1, 5108, '\P{^Is_Script=cherokee}', "");
Expect(0, 5023, '\p{Is_Script=cherokee}', "");
Expect(1, 5023, '\p{^Is_Script=cherokee}', "");
Expect(1, 5023, '\P{Is_Script=cherokee}', "");
Expect(0, 5023, '\P{^Is_Script=cherokee}', "");
Expect(1, 5108, '\p{Is_Script=-	Cherokee}', "");
Expect(0, 5108, '\p{^Is_Script=-	Cherokee}', "");
Expect(0, 5108, '\P{Is_Script=-	Cherokee}', "");
Expect(1, 5108, '\P{^Is_Script=-	Cherokee}', "");
Expect(0, 5023, '\p{Is_Script=-	Cherokee}', "");
Expect(1, 5023, '\p{^Is_Script=-	Cherokee}', "");
Expect(1, 5023, '\P{Is_Script=-	Cherokee}', "");
Expect(0, 5023, '\P{^Is_Script=-	Cherokee}', "");
Error('\p{Is_Sc=Cher/a/}');
Error('\P{Is_Sc=Cher/a/}');
Expect(1, 5108, '\p{Is_Sc=cher}', "");
Expect(0, 5108, '\p{^Is_Sc=cher}', "");
Expect(0, 5108, '\P{Is_Sc=cher}', "");
Expect(1, 5108, '\P{^Is_Sc=cher}', "");
Expect(0, 5023, '\p{Is_Sc=cher}', "");
Expect(1, 5023, '\p{^Is_Sc=cher}', "");
Expect(1, 5023, '\P{Is_Sc=cher}', "");
Expect(0, 5023, '\P{^Is_Sc=cher}', "");
Expect(1, 5108, '\p{Is_Sc=		cher}', "");
Expect(0, 5108, '\p{^Is_Sc=		cher}', "");
Expect(0, 5108, '\P{Is_Sc=		cher}', "");
Expect(1, 5108, '\P{^Is_Sc=		cher}', "");
Expect(0, 5023, '\p{Is_Sc=		cher}', "");
Expect(1, 5023, '\p{^Is_Sc=		cher}', "");
Expect(1, 5023, '\P{Is_Sc=		cher}', "");
Expect(0, 5023, '\P{^Is_Sc=		cher}', "");
Error('\p{Script=/a/ _ol	Chiki}');
Error('\P{Script=/a/ _ol	Chiki}');
Expect(1, 7295, '\p{Script=olchiki}', "");
Expect(0, 7295, '\p{^Script=olchiki}', "");
Expect(0, 7295, '\P{Script=olchiki}', "");
Expect(1, 7295, '\P{^Script=olchiki}', "");
Expect(0, 7247, '\p{Script=olchiki}', "");
Expect(1, 7247, '\p{^Script=olchiki}', "");
Expect(1, 7247, '\P{Script=olchiki}', "");
Expect(0, 7247, '\P{^Script=olchiki}', "");
Expect(1, 7295, '\p{Script:   _ ol-Chiki}', "");
Expect(0, 7295, '\p{^Script:   _ ol-Chiki}', "");
Expect(0, 7295, '\P{Script:   _ ol-Chiki}', "");
Expect(1, 7295, '\P{^Script:   _ ol-Chiki}', "");
Expect(0, 7247, '\p{Script:   _ ol-Chiki}', "");
Expect(1, 7247, '\p{^Script:   _ ol-Chiki}', "");
Expect(1, 7247, '\P{Script:   _ ol-Chiki}', "");
Expect(0, 7247, '\P{^Script:   _ ol-Chiki}', "");
Error('\p{Sc=:=	olck}');
Error('\P{Sc=:=	olck}');
Expect(1, 7295, '\p{Sc=olck}', "");
Expect(0, 7295, '\p{^Sc=olck}', "");
Expect(0, 7295, '\P{Sc=olck}', "");
Expect(1, 7295, '\P{^Sc=olck}', "");
Expect(0, 7247, '\p{Sc=olck}', "");
Expect(1, 7247, '\p{^Sc=olck}', "");
Expect(1, 7247, '\P{Sc=olck}', "");
Expect(0, 7247, '\P{^Sc=olck}', "");
Expect(1, 7295, '\p{Sc: 	OLCK}', "");
Expect(0, 7295, '\p{^Sc: 	OLCK}', "");
Expect(0, 7295, '\P{Sc: 	OLCK}', "");
Expect(1, 7295, '\P{^Sc: 	OLCK}', "");
Expect(0, 7247, '\p{Sc: 	OLCK}', "");
Expect(1, 7247, '\p{^Sc: 	OLCK}', "");
Expect(1, 7247, '\P{Sc: 	OLCK}', "");
Expect(0, 7247, '\P{^Sc: 	OLCK}', "");
Error('\p{Is_Script= /a/OL_chiki}');
Error('\P{Is_Script= /a/OL_chiki}');
Expect(1, 7295, '\p{Is_Script=olchiki}', "");
Expect(0, 7295, '\p{^Is_Script=olchiki}', "");
Expect(0, 7295, '\P{Is_Script=olchiki}', "");
Expect(1, 7295, '\P{^Is_Script=olchiki}', "");
Expect(0, 7247, '\p{Is_Script=olchiki}', "");
Expect(1, 7247, '\p{^Is_Script=olchiki}', "");
Expect(1, 7247, '\P{Is_Script=olchiki}', "");
Expect(0, 7247, '\P{^Is_Script=olchiki}', "");
Expect(1, 7295, '\p{Is_Script=_Ol-chiki}', "");
Expect(0, 7295, '\p{^Is_Script=_Ol-chiki}', "");
Expect(0, 7295, '\P{Is_Script=_Ol-chiki}', "");
Expect(1, 7295, '\P{^Is_Script=_Ol-chiki}', "");
Expect(0, 7247, '\p{Is_Script=_Ol-chiki}', "");
Expect(1, 7247, '\p{^Is_Script=_Ol-chiki}', "");
Expect(1, 7247, '\P{Is_Script=_Ol-chiki}', "");
Expect(0, 7247, '\P{^Is_Script=_Ol-chiki}', "");
Error('\p{Is_Sc:		/a/OLCK}');
Error('\P{Is_Sc:		/a/OLCK}');
Expect(1, 7295, '\p{Is_Sc=olck}', "");
Expect(0, 7295, '\p{^Is_Sc=olck}', "");
Expect(0, 7295, '\P{Is_Sc=olck}', "");
Expect(1, 7295, '\P{^Is_Sc=olck}', "");
Expect(0, 7247, '\p{Is_Sc=olck}', "");
Expect(1, 7247, '\p{^Is_Sc=olck}', "");
Expect(1, 7247, '\P{Is_Sc=olck}', "");
Expect(0, 7247, '\P{^Is_Sc=olck}', "");
Expect(1, 7295, '\p{Is_Sc=  Olck}', "");
Expect(0, 7295, '\p{^Is_Sc=  Olck}', "");
Expect(0, 7295, '\P{Is_Sc=  Olck}', "");
Expect(1, 7295, '\P{^Is_Sc=  Olck}', "");
Expect(0, 7247, '\p{Is_Sc=  Olck}', "");
Expect(1, 7247, '\p{^Is_Sc=  Olck}', "");
Expect(1, 7247, '\P{Is_Sc=  Olck}', "");
Expect(0, 7247, '\P{^Is_Sc=  Olck}', "");
Error('\p{Script=--Ugaritic/a/}');
Error('\P{Script=--Ugaritic/a/}');
Expect(1, 66461, '\p{Script=ugaritic}', "");
Expect(0, 66461, '\p{^Script=ugaritic}', "");
Expect(0, 66461, '\P{Script=ugaritic}', "");
Expect(1, 66461, '\P{^Script=ugaritic}', "");
Expect(0, 66431, '\p{Script=ugaritic}', "");
Expect(1, 66431, '\p{^Script=ugaritic}', "");
Expect(1, 66431, '\P{Script=ugaritic}', "");
Expect(0, 66431, '\P{^Script=ugaritic}', "");
Expect(1, 66461, '\p{Script=	_Ugaritic}', "");
Expect(0, 66461, '\p{^Script=	_Ugaritic}', "");
Expect(0, 66461, '\P{Script=	_Ugaritic}', "");
Expect(1, 66461, '\P{^Script=	_Ugaritic}', "");
Expect(0, 66431, '\p{Script=	_Ugaritic}', "");
Expect(1, 66431, '\p{^Script=	_Ugaritic}', "");
Expect(1, 66431, '\P{Script=	_Ugaritic}', "");
Expect(0, 66431, '\P{^Script=	_Ugaritic}', "");
Error('\p{Sc=/a/ugar}');
Error('\P{Sc=/a/ugar}');
Expect(1, 66461, '\p{Sc=ugar}', "");
Expect(0, 66461, '\p{^Sc=ugar}', "");
Expect(0, 66461, '\P{Sc=ugar}', "");
Expect(1, 66461, '\P{^Sc=ugar}', "");
Expect(0, 66431, '\p{Sc=ugar}', "");
Expect(1, 66431, '\p{^Sc=ugar}', "");
Expect(1, 66431, '\P{Sc=ugar}', "");
Expect(0, 66431, '\P{^Sc=ugar}', "");
Error('\p{Is_Script=:=	_ugaritic}');
Error('\P{Is_Script=:=	_ugaritic}');
Expect(1, 66461, '\p{Is_Script=ugaritic}', "");
Expect(0, 66461, '\p{^Is_Script=ugaritic}', "");
Expect(0, 66461, '\P{Is_Script=ugaritic}', "");
Expect(1, 66461, '\P{^Is_Script=ugaritic}', "");
Expect(0, 66431, '\p{Is_Script=ugaritic}', "");
Expect(1, 66431, '\p{^Is_Script=ugaritic}', "");
Expect(1, 66431, '\P{Is_Script=ugaritic}', "");
Expect(0, 66431, '\P{^Is_Script=ugaritic}', "");
Expect(1, 66461, '\p{Is_Script=		UGARITIC}', "");
Expect(0, 66461, '\p{^Is_Script=		UGARITIC}', "");
Expect(0, 66461, '\P{Is_Script=		UGARITIC}', "");
Expect(1, 66461, '\P{^Is_Script=		UGARITIC}', "");
Expect(0, 66431, '\p{Is_Script=		UGARITIC}', "");
Expect(1, 66431, '\p{^Is_Script=		UGARITIC}', "");
Expect(1, 66431, '\P{Is_Script=		UGARITIC}', "");
Expect(0, 66431, '\P{^Is_Script=		UGARITIC}', "");
Error('\p{Is_Sc=-	Ugar:=}');
Error('\P{Is_Sc=-	Ugar:=}');
Expect(1, 66461, '\p{Is_Sc:ugar}', "");
Expect(0, 66461, '\p{^Is_Sc:ugar}', "");
Expect(0, 66461, '\P{Is_Sc:ugar}', "");
Expect(1, 66461, '\P{^Is_Sc:ugar}', "");
Expect(0, 66431, '\p{Is_Sc:ugar}', "");
Expect(1, 66431, '\p{^Is_Sc:ugar}', "");
Expect(1, 66431, '\P{Is_Sc:ugar}', "");
Expect(0, 66431, '\P{^Is_Sc:ugar}', "");
Expect(1, 66461, '\p{Is_Sc=	-Ugar}', "");
Expect(0, 66461, '\p{^Is_Sc=	-Ugar}', "");
Expect(0, 66461, '\P{Is_Sc=	-Ugar}', "");
Expect(1, 66461, '\P{^Is_Sc=	-Ugar}', "");
Expect(0, 66431, '\p{Is_Sc=	-Ugar}', "");
Expect(1, 66431, '\p{^Is_Sc=	-Ugar}', "");
Expect(1, 66431, '\P{Is_Sc=	-Ugar}', "");
Expect(0, 66431, '\P{^Is_Sc=	-Ugar}', "");
Error('\p{Script=_ Phags/a/Pa}');
Error('\P{Script=_ Phags/a/Pa}');
Expect(1, 43127, '\p{Script=phagspa}', "");
Expect(0, 43127, '\p{^Script=phagspa}', "");
Expect(0, 43127, '\P{Script=phagspa}', "");
Expect(1, 43127, '\P{^Script=phagspa}', "");
Expect(0, 43071, '\p{Script=phagspa}', "");
Expect(1, 43071, '\p{^Script=phagspa}', "");
Expect(1, 43071, '\P{Script=phagspa}', "");
Expect(0, 43071, '\P{^Script=phagspa}', "");
Expect(1, 43127, '\p{Script=__PHAGS	Pa}', "");
Expect(0, 43127, '\p{^Script=__PHAGS	Pa}', "");
Expect(0, 43127, '\P{Script=__PHAGS	Pa}', "");
Expect(1, 43127, '\P{^Script=__PHAGS	Pa}', "");
Expect(0, 43071, '\p{Script=__PHAGS	Pa}', "");
Expect(1, 43071, '\p{^Script=__PHAGS	Pa}', "");
Expect(1, 43071, '\P{Script=__PHAGS	Pa}', "");
Expect(0, 43071, '\P{^Script=__PHAGS	Pa}', "");
Error('\p{Sc=/a/ 	Phag}');
Error('\P{Sc=/a/ 	Phag}');
Expect(1, 43127, '\p{Sc=phag}', "");
Expect(0, 43127, '\p{^Sc=phag}', "");
Expect(0, 43127, '\P{Sc=phag}', "");
Expect(1, 43127, '\P{^Sc=phag}', "");
Expect(0, 43071, '\p{Sc=phag}', "");
Expect(1, 43071, '\p{^Sc=phag}', "");
Expect(1, 43071, '\P{Sc=phag}', "");
Expect(0, 43071, '\P{^Sc=phag}', "");
Expect(1, 43127, '\p{Sc=_ PHAG}', "");
Expect(0, 43127, '\p{^Sc=_ PHAG}', "");
Expect(0, 43127, '\P{Sc=_ PHAG}', "");
Expect(1, 43127, '\P{^Sc=_ PHAG}', "");
Expect(0, 43071, '\p{Sc=_ PHAG}', "");
Expect(1, 43071, '\p{^Sc=_ PHAG}', "");
Expect(1, 43071, '\P{Sc=_ PHAG}', "");
Expect(0, 43071, '\P{^Sc=_ PHAG}', "");
Error('\p{Is_Script=:=	_PhagsPA}');
Error('\P{Is_Script=:=	_PhagsPA}');
Expect(1, 43127, '\p{Is_Script=phagspa}', "");
Expect(0, 43127, '\p{^Is_Script=phagspa}', "");
Expect(0, 43127, '\P{Is_Script=phagspa}', "");
Expect(1, 43127, '\P{^Is_Script=phagspa}', "");
Expect(0, 43071, '\p{Is_Script=phagspa}', "");
Expect(1, 43071, '\p{^Is_Script=phagspa}', "");
Expect(1, 43071, '\P{Is_Script=phagspa}', "");
Expect(0, 43071, '\P{^Is_Script=phagspa}', "");
Expect(1, 43127, '\p{Is_Script=	_Phags PA}', "");
Expect(0, 43127, '\p{^Is_Script=	_Phags PA}', "");
Expect(0, 43127, '\P{Is_Script=	_Phags PA}', "");
Expect(1, 43127, '\P{^Is_Script=	_Phags PA}', "");
Expect(0, 43071, '\p{Is_Script=	_Phags PA}', "");
Expect(1, 43071, '\p{^Is_Script=	_Phags PA}', "");
Expect(1, 43071, '\P{Is_Script=	_Phags PA}', "");
Expect(0, 43071, '\P{^Is_Script=	_Phags PA}', "");
Error('\p{Is_Sc=:=	-PHAG}');
Error('\P{Is_Sc=:=	-PHAG}');
Expect(1, 43127, '\p{Is_Sc=phag}', "");
Expect(0, 43127, '\p{^Is_Sc=phag}', "");
Expect(0, 43127, '\P{Is_Sc=phag}', "");
Expect(1, 43127, '\P{^Is_Sc=phag}', "");
Expect(0, 43071, '\p{Is_Sc=phag}', "");
Expect(1, 43071, '\p{^Is_Sc=phag}', "");
Expect(1, 43071, '\P{Is_Sc=phag}', "");
Expect(0, 43071, '\P{^Is_Sc=phag}', "");
Expect(1, 43127, '\p{Is_Sc:	__Phag}', "");
Expect(0, 43127, '\p{^Is_Sc:	__Phag}', "");
Expect(0, 43127, '\P{Is_Sc:	__Phag}', "");
Expect(1, 43127, '\P{^Is_Sc:	__Phag}', "");
Expect(0, 43071, '\p{Is_Sc:	__Phag}', "");
Expect(1, 43071, '\p{^Is_Sc:	__Phag}', "");
Expect(1, 43071, '\P{Is_Sc:	__Phag}', "");
Expect(0, 43071, '\P{^Is_Sc:	__Phag}', "");
Error('\p{Script=	:=ARMENIAN}');
Error('\P{Script=	:=ARMENIAN}');
Expect(1, 1366, '\p{Script=armenian}', "");
Expect(0, 1366, '\p{^Script=armenian}', "");
Expect(0, 1366, '\P{Script=armenian}', "");
Expect(1, 1366, '\P{^Script=armenian}', "");
Expect(0, 1328, '\p{Script=armenian}', "");
Expect(1, 1328, '\p{^Script=armenian}', "");
Expect(1, 1328, '\P{Script=armenian}', "");
Expect(0, 1328, '\P{^Script=armenian}', "");
Error('\p{Sc=/a/-_Armn}');
Error('\P{Sc=/a/-_Armn}');
Expect(1, 1366, '\p{Sc=armn}', "");
Expect(0, 1366, '\p{^Sc=armn}', "");
Expect(0, 1366, '\P{Sc=armn}', "");
Expect(1, 1366, '\P{^Sc=armn}', "");
Expect(0, 1328, '\p{Sc=armn}', "");
Expect(1, 1328, '\p{^Sc=armn}', "");
Expect(1, 1328, '\P{Sc=armn}', "");
Expect(0, 1328, '\P{^Sc=armn}', "");
Expect(1, 1366, '\p{Sc= ARMN}', "");
Expect(0, 1366, '\p{^Sc= ARMN}', "");
Expect(0, 1366, '\P{Sc= ARMN}', "");
Expect(1, 1366, '\P{^Sc= ARMN}', "");
Expect(0, 1328, '\p{Sc= ARMN}', "");
Expect(1, 1328, '\p{^Sc= ARMN}', "");
Expect(1, 1328, '\P{Sc= ARMN}', "");
Expect(0, 1328, '\P{^Sc= ARMN}', "");
Error('\p{Is_Script= -ARMENIAN:=}');
Error('\P{Is_Script= -ARMENIAN:=}');
Expect(1, 1366, '\p{Is_Script=armenian}', "");
Expect(0, 1366, '\p{^Is_Script=armenian}', "");
Expect(0, 1366, '\P{Is_Script=armenian}', "");
Expect(1, 1366, '\P{^Is_Script=armenian}', "");
Expect(0, 1328, '\p{Is_Script=armenian}', "");
Expect(1, 1328, '\p{^Is_Script=armenian}', "");
Expect(1, 1328, '\P{Is_Script=armenian}', "");
Expect(0, 1328, '\P{^Is_Script=armenian}', "");
Expect(1, 1366, '\p{Is_Script=- Armenian}', "");
Expect(0, 1366, '\p{^Is_Script=- Armenian}', "");
Expect(0, 1366, '\P{Is_Script=- Armenian}', "");
Expect(1, 1366, '\P{^Is_Script=- Armenian}', "");
Expect(0, 1328, '\p{Is_Script=- Armenian}', "");
Expect(1, 1328, '\p{^Is_Script=- Armenian}', "");
Expect(1, 1328, '\P{Is_Script=- Armenian}', "");
Expect(0, 1328, '\P{^Is_Script=- Armenian}', "");
Error('\p{Is_Sc=	_Armn:=}');
Error('\P{Is_Sc=	_Armn:=}');
Expect(1, 1366, '\p{Is_Sc=armn}', "");
Expect(0, 1366, '\p{^Is_Sc=armn}', "");
Expect(0, 1366, '\P{Is_Sc=armn}', "");
Expect(1, 1366, '\P{^Is_Sc=armn}', "");
Expect(0, 1328, '\p{Is_Sc=armn}', "");
Expect(1, 1328, '\p{^Is_Sc=armn}', "");
Expect(1, 1328, '\P{Is_Sc=armn}', "");
Expect(0, 1328, '\P{^Is_Sc=armn}', "");
Expect(1, 1366, '\p{Is_Sc=--Armn}', "");
Expect(0, 1366, '\p{^Is_Sc=--Armn}', "");
Expect(0, 1366, '\P{Is_Sc=--Armn}', "");
Expect(1, 1366, '\P{^Is_Sc=--Armn}', "");
Expect(0, 1328, '\p{Is_Sc=--Armn}', "");
Expect(1, 1328, '\p{^Is_Sc=--Armn}', "");
Expect(1, 1328, '\P{Is_Sc=--Armn}', "");
Expect(0, 1328, '\P{^Is_Sc=--Armn}', "");
Error('\p{Script=/a/  Syriac}');
Error('\P{Script=/a/  Syriac}');
Expect(1, 1805, '\p{Script:syriac}', "");
Expect(0, 1805, '\p{^Script:syriac}', "");
Expect(0, 1805, '\P{Script:syriac}', "");
Expect(1, 1805, '\P{^Script:syriac}', "");
Expect(0, 1791, '\p{Script:syriac}', "");
Expect(1, 1791, '\p{^Script:syriac}', "");
Expect(1, 1791, '\P{Script:syriac}', "");
Expect(0, 1791, '\P{^Script:syriac}', "");
Expect(1, 1805, '\p{Script=SYRIAC}', "");
Expect(0, 1805, '\p{^Script=SYRIAC}', "");
Expect(0, 1805, '\P{Script=SYRIAC}', "");
Expect(1, 1805, '\P{^Script=SYRIAC}', "");
Expect(0, 1791, '\p{Script=SYRIAC}', "");
Expect(1, 1791, '\p{^Script=SYRIAC}', "");
Expect(1, 1791, '\P{Script=SYRIAC}', "");
Expect(0, 1791, '\P{^Script=SYRIAC}', "");
Error('\p{Sc=-_SYRC:=}');
Error('\P{Sc=-_SYRC:=}');
Expect(1, 1805, '\p{Sc=syrc}', "");
Expect(0, 1805, '\p{^Sc=syrc}', "");
Expect(0, 1805, '\P{Sc=syrc}', "");
Expect(1, 1805, '\P{^Sc=syrc}', "");
Expect(0, 1791, '\p{Sc=syrc}', "");
Expect(1, 1791, '\p{^Sc=syrc}', "");
Expect(1, 1791, '\P{Sc=syrc}', "");
Expect(0, 1791, '\P{^Sc=syrc}', "");
Expect(1, 1805, '\p{Sc= -Syrc}', "");
Expect(0, 1805, '\p{^Sc= -Syrc}', "");
Expect(0, 1805, '\P{Sc= -Syrc}', "");
Expect(1, 1805, '\P{^Sc= -Syrc}', "");
Expect(0, 1791, '\p{Sc= -Syrc}', "");
Expect(1, 1791, '\p{^Sc= -Syrc}', "");
Expect(1, 1791, '\P{Sc= -Syrc}', "");
Expect(0, 1791, '\P{^Sc= -Syrc}', "");
Error('\p{Is_Script=:=		SYRIAC}');
Error('\P{Is_Script=:=		SYRIAC}');
Expect(1, 1805, '\p{Is_Script=syriac}', "");
Expect(0, 1805, '\p{^Is_Script=syriac}', "");
Expect(0, 1805, '\P{Is_Script=syriac}', "");
Expect(1, 1805, '\P{^Is_Script=syriac}', "");
Expect(0, 1791, '\p{Is_Script=syriac}', "");
Expect(1, 1791, '\p{^Is_Script=syriac}', "");
Expect(1, 1791, '\P{Is_Script=syriac}', "");
Expect(0, 1791, '\P{^Is_Script=syriac}', "");
Expect(1, 1805, '\p{Is_Script=		SYRIAC}', "");
Expect(0, 1805, '\p{^Is_Script=		SYRIAC}', "");
Expect(0, 1805, '\P{Is_Script=		SYRIAC}', "");
Expect(1, 1805, '\P{^Is_Script=		SYRIAC}', "");
Expect(0, 1791, '\p{Is_Script=		SYRIAC}', "");
Expect(1, 1791, '\p{^Is_Script=		SYRIAC}', "");
Expect(1, 1791, '\P{Is_Script=		SYRIAC}', "");
Expect(0, 1791, '\P{^Is_Script=		SYRIAC}', "");
Error('\p{Is_Sc=-/a/Syrc}');
Error('\P{Is_Sc=-/a/Syrc}');
Expect(1, 1805, '\p{Is_Sc:	syrc}', "");
Expect(0, 1805, '\p{^Is_Sc:	syrc}', "");
Expect(0, 1805, '\P{Is_Sc:	syrc}', "");
Expect(1, 1805, '\P{^Is_Sc:	syrc}', "");
Expect(0, 1791, '\p{Is_Sc:	syrc}', "");
Expect(1, 1791, '\p{^Is_Sc:	syrc}', "");
Expect(1, 1791, '\P{Is_Sc:	syrc}', "");
Expect(0, 1791, '\P{^Is_Sc:	syrc}', "");
Expect(1, 1805, '\p{Is_Sc=	-syrc}', "");
Expect(0, 1805, '\p{^Is_Sc=	-syrc}', "");
Expect(0, 1805, '\P{Is_Sc=	-syrc}', "");
Expect(1, 1805, '\P{^Is_Sc=	-syrc}', "");
Expect(0, 1791, '\p{Is_Sc=	-syrc}', "");
Expect(1, 1791, '\p{^Is_Sc=	-syrc}', "");
Expect(1, 1791, '\P{Is_Sc=	-syrc}', "");
Expect(0, 1791, '\P{^Is_Sc=	-syrc}', "");
Error('\p{Script= :=yi}');
Error('\P{Script= :=yi}');
Expect(1, 42124, '\p{Script=yi}', "");
Expect(0, 42124, '\p{^Script=yi}', "");
Expect(0, 42124, '\P{Script=yi}', "");
Expect(1, 42124, '\P{^Script=yi}', "");
Expect(0, 40959, '\p{Script=yi}', "");
Expect(1, 40959, '\p{^Script=yi}', "");
Expect(1, 40959, '\P{Script=yi}', "");
Expect(0, 40959, '\P{^Script=yi}', "");
Expect(1, 42124, '\p{Script= yi}', "");
Expect(0, 42124, '\p{^Script= yi}', "");
Expect(0, 42124, '\P{Script= yi}', "");
Expect(1, 42124, '\P{^Script= yi}', "");
Expect(0, 40959, '\p{Script= yi}', "");
Expect(1, 40959, '\p{^Script= yi}', "");
Expect(1, 40959, '\P{Script= yi}', "");
Expect(0, 40959, '\P{^Script= yi}', "");
Error('\p{Sc=	/a/Yiii}');
Error('\P{Sc=	/a/Yiii}');
Expect(1, 42124, '\p{Sc=yiii}', "");
Expect(0, 42124, '\p{^Sc=yiii}', "");
Expect(0, 42124, '\P{Sc=yiii}', "");
Expect(1, 42124, '\P{^Sc=yiii}', "");
Expect(0, 40959, '\p{Sc=yiii}', "");
Expect(1, 40959, '\p{^Sc=yiii}', "");
Expect(1, 40959, '\P{Sc=yiii}', "");
Expect(0, 40959, '\P{^Sc=yiii}', "");
Expect(1, 42124, '\p{Sc=-Yiii}', "");
Expect(0, 42124, '\p{^Sc=-Yiii}', "");
Expect(0, 42124, '\P{Sc=-Yiii}', "");
Expect(1, 42124, '\P{^Sc=-Yiii}', "");
Expect(0, 40959, '\p{Sc=-Yiii}', "");
Expect(1, 40959, '\p{^Sc=-Yiii}', "");
Expect(1, 40959, '\P{Sc=-Yiii}', "");
Expect(0, 40959, '\P{^Sc=-Yiii}', "");
Error('\p{Is_Script=/a/  Yi}');
Error('\P{Is_Script=/a/  Yi}');
Expect(1, 42124, '\p{Is_Script=yi}', "");
Expect(0, 42124, '\p{^Is_Script=yi}', "");
Expect(0, 42124, '\P{Is_Script=yi}', "");
Expect(1, 42124, '\P{^Is_Script=yi}', "");
Expect(0, 40959, '\p{Is_Script=yi}', "");
Expect(1, 40959, '\p{^Is_Script=yi}', "");
Expect(1, 40959, '\P{Is_Script=yi}', "");
Expect(0, 40959, '\P{^Is_Script=yi}', "");
Expect(1, 42124, '\p{Is_Script=Yi}', "");
Expect(0, 42124, '\p{^Is_Script=Yi}', "");
Expect(0, 42124, '\P{Is_Script=Yi}', "");
Expect(1, 42124, '\P{^Is_Script=Yi}', "");
Expect(0, 40959, '\p{Is_Script=Yi}', "");
Expect(1, 40959, '\p{^Is_Script=Yi}', "");
Expect(1, 40959, '\P{Is_Script=Yi}', "");
Expect(0, 40959, '\P{^Is_Script=Yi}', "");
Error('\p{Is_Sc=/a/	Yiii}');
Error('\P{Is_Sc=/a/	Yiii}');
Expect(1, 42124, '\p{Is_Sc=yiii}', "");
Expect(0, 42124, '\p{^Is_Sc=yiii}', "");
Expect(0, 42124, '\P{Is_Sc=yiii}', "");
Expect(1, 42124, '\P{^Is_Sc=yiii}', "");
Expect(0, 40959, '\p{Is_Sc=yiii}', "");
Expect(1, 40959, '\p{^Is_Sc=yiii}', "");
Expect(1, 40959, '\P{Is_Sc=yiii}', "");
Expect(0, 40959, '\P{^Is_Sc=yiii}', "");
Expect(1, 42124, '\p{Is_Sc=	yiii}', "");
Expect(0, 42124, '\p{^Is_Sc=	yiii}', "");
Expect(0, 42124, '\P{Is_Sc=	yiii}', "");
Expect(1, 42124, '\P{^Is_Sc=	yiii}', "");
Expect(0, 40959, '\p{Is_Sc=	yiii}', "");
Expect(1, 40959, '\p{^Is_Sc=	yiii}', "");
Expect(1, 40959, '\P{Is_Sc=	yiii}', "");
Expect(0, 40959, '\P{^Is_Sc=	yiii}', "");
Error('\p{Script=_Katakana/a/}');
Error('\P{Script=_Katakana/a/}');
Expect(1, 12538, '\p{Script=katakana}', "");
Expect(0, 12538, '\p{^Script=katakana}', "");
Expect(0, 12538, '\P{Script=katakana}', "");
Expect(1, 12538, '\P{^Script=katakana}', "");
Expect(0, 12448, '\p{Script=katakana}', "");
Expect(1, 12448, '\p{^Script=katakana}', "");
Expect(1, 12448, '\P{Script=katakana}', "");
Expect(0, 12448, '\P{^Script=katakana}', "");
Expect(1, 12538, '\p{Script=	KATAKANA}', "");
Expect(0, 12538, '\p{^Script=	KATAKANA}', "");
Expect(0, 12538, '\P{Script=	KATAKANA}', "");
Expect(1, 12538, '\P{^Script=	KATAKANA}', "");
Expect(0, 12448, '\p{Script=	KATAKANA}', "");
Expect(1, 12448, '\p{^Script=	KATAKANA}', "");
Expect(1, 12448, '\P{Script=	KATAKANA}', "");
Expect(0, 12448, '\P{^Script=	KATAKANA}', "");
Error('\p{Sc= KANA/a/}');
Error('\P{Sc= KANA/a/}');
Expect(1, 12538, '\p{Sc=kana}', "");
Expect(0, 12538, '\p{^Sc=kana}', "");
Expect(0, 12538, '\P{Sc=kana}', "");
Expect(1, 12538, '\P{^Sc=kana}', "");
Expect(0, 12448, '\p{Sc=kana}', "");
Expect(1, 12448, '\p{^Sc=kana}', "");
Expect(1, 12448, '\P{Sc=kana}', "");
Expect(0, 12448, '\P{^Sc=kana}', "");
Expect(1, 12538, '\p{Sc:   	Kana}', "");
Expect(0, 12538, '\p{^Sc:   	Kana}', "");
Expect(0, 12538, '\P{Sc:   	Kana}', "");
Expect(1, 12538, '\P{^Sc:   	Kana}', "");
Expect(0, 12448, '\p{Sc:   	Kana}', "");
Expect(1, 12448, '\p{^Sc:   	Kana}', "");
Expect(1, 12448, '\P{Sc:   	Kana}', "");
Expect(0, 12448, '\P{^Sc:   	Kana}', "");
Error('\p{Is_Script=:=_KATAKANA}');
Error('\P{Is_Script=:=_KATAKANA}');
Expect(1, 12538, '\p{Is_Script=katakana}', "");
Expect(0, 12538, '\p{^Is_Script=katakana}', "");
Expect(0, 12538, '\P{Is_Script=katakana}', "");
Expect(1, 12538, '\P{^Is_Script=katakana}', "");
Expect(0, 12448, '\p{Is_Script=katakana}', "");
Expect(1, 12448, '\p{^Is_Script=katakana}', "");
Expect(1, 12448, '\P{Is_Script=katakana}', "");
Expect(0, 12448, '\P{^Is_Script=katakana}', "");
Expect(1, 12538, '\p{Is_Script=	_KATAKANA}', "");
Expect(0, 12538, '\p{^Is_Script=	_KATAKANA}', "");
Expect(0, 12538, '\P{Is_Script=	_KATAKANA}', "");
Expect(1, 12538, '\P{^Is_Script=	_KATAKANA}', "");
Expect(0, 12448, '\p{Is_Script=	_KATAKANA}', "");
Expect(1, 12448, '\p{^Is_Script=	_KATAKANA}', "");
Expect(1, 12448, '\P{Is_Script=	_KATAKANA}', "");
Expect(0, 12448, '\P{^Is_Script=	_KATAKANA}', "");
Error('\p{Is_Sc=:=_Kana}');
Error('\P{Is_Sc=:=_Kana}');
Expect(1, 12538, '\p{Is_Sc=kana}', "");
Expect(0, 12538, '\p{^Is_Sc=kana}', "");
Expect(0, 12538, '\P{Is_Sc=kana}', "");
Expect(1, 12538, '\P{^Is_Sc=kana}', "");
Expect(0, 12448, '\p{Is_Sc=kana}', "");
Expect(1, 12448, '\p{^Is_Sc=kana}', "");
Expect(1, 12448, '\P{Is_Sc=kana}', "");
Expect(0, 12448, '\P{^Is_Sc=kana}', "");
Expect(1, 12538, '\p{Is_Sc=_ Kana}', "");
Expect(0, 12538, '\p{^Is_Sc=_ Kana}', "");
Expect(0, 12538, '\P{Is_Sc=_ Kana}', "");
Expect(1, 12538, '\P{^Is_Sc=_ Kana}', "");
Expect(0, 12448, '\p{Is_Sc=_ Kana}', "");
Expect(1, 12448, '\p{^Is_Sc=_ Kana}', "");
Expect(1, 12448, '\P{Is_Sc=_ Kana}', "");
Expect(0, 12448, '\P{^Is_Sc=_ Kana}', "");
Error('\p{Script=:=Glagolitic}');
Error('\P{Script=:=Glagolitic}');
Expect(1, 11310, '\p{Script=glagolitic}', "");
Expect(0, 11310, '\p{^Script=glagolitic}', "");
Expect(0, 11310, '\P{Script=glagolitic}', "");
Expect(1, 11310, '\P{^Script=glagolitic}', "");
Expect(0, 11263, '\p{Script=glagolitic}', "");
Expect(1, 11263, '\p{^Script=glagolitic}', "");
Expect(1, 11263, '\P{Script=glagolitic}', "");
Expect(0, 11263, '\P{^Script=glagolitic}', "");
Expect(1, 11310, '\p{Script=	 Glagolitic}', "");
Expect(0, 11310, '\p{^Script=	 Glagolitic}', "");
Expect(0, 11310, '\P{Script=	 Glagolitic}', "");
Expect(1, 11310, '\P{^Script=	 Glagolitic}', "");
Expect(0, 11263, '\p{Script=	 Glagolitic}', "");
Expect(1, 11263, '\p{^Script=	 Glagolitic}', "");
Expect(1, 11263, '\P{Script=	 Glagolitic}', "");
Expect(0, 11263, '\P{^Script=	 Glagolitic}', "");
Error('\p{Sc= 	GLAG:=}');
Error('\P{Sc= 	GLAG:=}');
Expect(1, 11310, '\p{Sc=glag}', "");
Expect(0, 11310, '\p{^Sc=glag}', "");
Expect(0, 11310, '\P{Sc=glag}', "");
Expect(1, 11310, '\P{^Sc=glag}', "");
Expect(0, 11263, '\p{Sc=glag}', "");
Expect(1, 11263, '\p{^Sc=glag}', "");
Expect(1, 11263, '\P{Sc=glag}', "");
Expect(0, 11263, '\P{^Sc=glag}', "");
Expect(1, 11310, '\p{Sc=-glag}', "");
Expect(0, 11310, '\p{^Sc=-glag}', "");
Expect(0, 11310, '\P{Sc=-glag}', "");
Expect(1, 11310, '\P{^Sc=-glag}', "");
Expect(0, 11263, '\p{Sc=-glag}', "");
Expect(1, 11263, '\p{^Sc=-glag}', "");
Expect(1, 11263, '\P{Sc=-glag}', "");
Expect(0, 11263, '\P{^Sc=-glag}', "");
Error('\p{Is_Script= Glagolitic/a/}');
Error('\P{Is_Script= Glagolitic/a/}');
Expect(1, 11310, '\p{Is_Script=glagolitic}', "");
Expect(0, 11310, '\p{^Is_Script=glagolitic}', "");
Expect(0, 11310, '\P{Is_Script=glagolitic}', "");
Expect(1, 11310, '\P{^Is_Script=glagolitic}', "");
Expect(0, 11263, '\p{Is_Script=glagolitic}', "");
Expect(1, 11263, '\p{^Is_Script=glagolitic}', "");
Expect(1, 11263, '\P{Is_Script=glagolitic}', "");
Expect(0, 11263, '\P{^Is_Script=glagolitic}', "");
Expect(1, 11310, '\p{Is_Script=-GLAGOLITIC}', "");
Expect(0, 11310, '\p{^Is_Script=-GLAGOLITIC}', "");
Expect(0, 11310, '\P{Is_Script=-GLAGOLITIC}', "");
Expect(1, 11310, '\P{^Is_Script=-GLAGOLITIC}', "");
Expect(0, 11263, '\p{Is_Script=-GLAGOLITIC}', "");
Expect(1, 11263, '\p{^Is_Script=-GLAGOLITIC}', "");
Expect(1, 11263, '\P{Is_Script=-GLAGOLITIC}', "");
Expect(0, 11263, '\P{^Is_Script=-GLAGOLITIC}', "");
Error('\p{Is_Sc=:=_ GLAG}');
Error('\P{Is_Sc=:=_ GLAG}');
Expect(1, 11310, '\p{Is_Sc:glag}', "");
Expect(0, 11310, '\p{^Is_Sc:glag}', "");
Expect(0, 11310, '\P{Is_Sc:glag}', "");
Expect(1, 11310, '\P{^Is_Sc:glag}', "");
Expect(0, 11263, '\p{Is_Sc:glag}', "");
Expect(1, 11263, '\p{^Is_Sc:glag}', "");
Expect(1, 11263, '\P{Is_Sc:glag}', "");
Expect(0, 11263, '\P{^Is_Sc:glag}', "");
Expect(1, 11310, '\p{Is_Sc=	Glag}', "");
Expect(0, 11310, '\p{^Is_Sc=	Glag}', "");
Expect(0, 11310, '\P{Is_Sc=	Glag}', "");
Expect(1, 11310, '\P{^Is_Sc=	Glag}', "");
Expect(0, 11263, '\p{Is_Sc=	Glag}', "");
Expect(1, 11263, '\p{^Is_Sc=	Glag}', "");
Expect(1, 11263, '\P{Is_Sc=	Glag}', "");
Expect(0, 11263, '\P{^Is_Sc=	Glag}', "");
Error('\p{Script=-/a/Thaana}');
Error('\P{Script=-/a/Thaana}');
Expect(1, 1969, '\p{Script=thaana}', "");
Expect(0, 1969, '\p{^Script=thaana}', "");
Expect(0, 1969, '\P{Script=thaana}', "");
Expect(1, 1969, '\P{^Script=thaana}', "");
Expect(0, 1919, '\p{Script=thaana}', "");
Expect(1, 1919, '\p{^Script=thaana}', "");
Expect(1, 1919, '\P{Script=thaana}', "");
Expect(0, 1919, '\P{^Script=thaana}', "");
Expect(1, 1969, '\p{Script= thaana}', "");
Expect(0, 1969, '\p{^Script= thaana}', "");
Expect(0, 1969, '\P{Script= thaana}', "");
Expect(1, 1969, '\P{^Script= thaana}', "");
Expect(0, 1919, '\p{Script= thaana}', "");
Expect(1, 1919, '\p{^Script= thaana}', "");
Expect(1, 1919, '\P{Script= thaana}', "");
Expect(0, 1919, '\P{^Script= thaana}', "");
Error('\p{Sc=:=- thaa}');
Error('\P{Sc=:=- thaa}');
Expect(1, 1969, '\p{Sc=thaa}', "");
Expect(0, 1969, '\p{^Sc=thaa}', "");
Expect(0, 1969, '\P{Sc=thaa}', "");
Expect(1, 1969, '\P{^Sc=thaa}', "");
Expect(0, 1919, '\p{Sc=thaa}', "");
Expect(1, 1919, '\p{^Sc=thaa}', "");
Expect(1, 1919, '\P{Sc=thaa}', "");
Expect(0, 1919, '\P{^Sc=thaa}', "");
Expect(1, 1969, '\p{Sc:   	 Thaa}', "");
Expect(0, 1969, '\p{^Sc:   	 Thaa}', "");
Expect(0, 1969, '\P{Sc:   	 Thaa}', "");
Expect(1, 1969, '\P{^Sc:   	 Thaa}', "");
Expect(0, 1919, '\p{Sc:   	 Thaa}', "");
Expect(1, 1919, '\p{^Sc:   	 Thaa}', "");
Expect(1, 1919, '\P{Sc:   	 Thaa}', "");
Expect(0, 1919, '\P{^Sc:   	 Thaa}', "");
Error('\p{Is_Script=_/a/THAANA}');
Error('\P{Is_Script=_/a/THAANA}');
Expect(1, 1969, '\p{Is_Script=thaana}', "");
Expect(0, 1969, '\p{^Is_Script=thaana}', "");
Expect(0, 1969, '\P{Is_Script=thaana}', "");
Expect(1, 1969, '\P{^Is_Script=thaana}', "");
Expect(0, 1919, '\p{Is_Script=thaana}', "");
Expect(1, 1919, '\p{^Is_Script=thaana}', "");
Expect(1, 1919, '\P{Is_Script=thaana}', "");
Expect(0, 1919, '\P{^Is_Script=thaana}', "");
Expect(1, 1969, '\p{Is_Script=- Thaana}', "");
Expect(0, 1969, '\p{^Is_Script=- Thaana}', "");
Expect(0, 1969, '\P{Is_Script=- Thaana}', "");
Expect(1, 1969, '\P{^Is_Script=- Thaana}', "");
Expect(0, 1919, '\p{Is_Script=- Thaana}', "");
Expect(1, 1919, '\p{^Is_Script=- Thaana}', "");
Expect(1, 1919, '\P{Is_Script=- Thaana}', "");
Expect(0, 1919, '\P{^Is_Script=- Thaana}', "");
Error('\p{Is_Sc=:= Thaa}');
Error('\P{Is_Sc=:= Thaa}');
Expect(1, 1969, '\p{Is_Sc=thaa}', "");
Expect(0, 1969, '\p{^Is_Sc=thaa}', "");
Expect(0, 1969, '\P{Is_Sc=thaa}', "");
Expect(1, 1969, '\P{^Is_Sc=thaa}', "");
Expect(0, 1919, '\p{Is_Sc=thaa}', "");
Expect(1, 1919, '\p{^Is_Sc=thaa}', "");
Expect(1, 1919, '\P{Is_Sc=thaa}', "");
Expect(0, 1919, '\P{^Is_Sc=thaa}', "");
Expect(1, 1969, '\p{Is_Sc=_thaa}', "");
Expect(0, 1969, '\p{^Is_Sc=_thaa}', "");
Expect(0, 1969, '\P{Is_Sc=_thaa}', "");
Expect(1, 1969, '\P{^Is_Sc=_thaa}', "");
Expect(0, 1919, '\p{Is_Sc=_thaa}', "");
Expect(1, 1919, '\p{^Is_Sc=_thaa}', "");
Expect(1, 1919, '\P{Is_Sc=_thaa}', "");
Expect(0, 1919, '\P{^Is_Sc=_thaa}', "");
Error('\p{Script=/a/  LEPCHA}');
Error('\P{Script=/a/  LEPCHA}');
Expect(1, 7223, '\p{Script=lepcha}', "");
Expect(0, 7223, '\p{^Script=lepcha}', "");
Expect(0, 7223, '\P{Script=lepcha}', "");
Expect(1, 7223, '\P{^Script=lepcha}', "");
Expect(0, 7167, '\p{Script=lepcha}', "");
Expect(1, 7167, '\p{^Script=lepcha}', "");
Expect(1, 7167, '\P{Script=lepcha}', "");
Expect(0, 7167, '\P{^Script=lepcha}', "");
Expect(1, 7223, '\p{Script=-lepcha}', "");
Expect(0, 7223, '\p{^Script=-lepcha}', "");
Expect(0, 7223, '\P{Script=-lepcha}', "");
Expect(1, 7223, '\P{^Script=-lepcha}', "");
Expect(0, 7167, '\p{Script=-lepcha}', "");
Expect(1, 7167, '\p{^Script=-lepcha}', "");
Expect(1, 7167, '\P{Script=-lepcha}', "");
Expect(0, 7167, '\P{^Script=-lepcha}', "");
Error('\p{Sc=/a/ Lepc}');
Error('\P{Sc=/a/ Lepc}');
Expect(1, 7223, '\p{Sc=lepc}', "");
Expect(0, 7223, '\p{^Sc=lepc}', "");
Expect(0, 7223, '\P{Sc=lepc}', "");
Expect(1, 7223, '\P{^Sc=lepc}', "");
Expect(0, 7167, '\p{Sc=lepc}', "");
Expect(1, 7167, '\p{^Sc=lepc}', "");
Expect(1, 7167, '\P{Sc=lepc}', "");
Expect(0, 7167, '\P{^Sc=lepc}', "");
Expect(1, 7223, '\p{Sc= -Lepc}', "");
Expect(0, 7223, '\p{^Sc= -Lepc}', "");
Expect(0, 7223, '\P{Sc= -Lepc}', "");
Expect(1, 7223, '\P{^Sc= -Lepc}', "");
Expect(0, 7167, '\p{Sc= -Lepc}', "");
Expect(1, 7167, '\p{^Sc= -Lepc}', "");
Expect(1, 7167, '\P{Sc= -Lepc}', "");
Expect(0, 7167, '\P{^Sc= -Lepc}', "");
Error('\p{Is_Script=_:=lepcha}');
Error('\P{Is_Script=_:=lepcha}');
Expect(1, 7223, '\p{Is_Script=lepcha}', "");
Expect(0, 7223, '\p{^Is_Script=lepcha}', "");
Expect(0, 7223, '\P{Is_Script=lepcha}', "");
Expect(1, 7223, '\P{^Is_Script=lepcha}', "");
Expect(0, 7167, '\p{Is_Script=lepcha}', "");
Expect(1, 7167, '\p{^Is_Script=lepcha}', "");
Expect(1, 7167, '\P{Is_Script=lepcha}', "");
Expect(0, 7167, '\P{^Is_Script=lepcha}', "");
Expect(1, 7223, '\p{Is_Script:   -Lepcha}', "");
Expect(0, 7223, '\p{^Is_Script:   -Lepcha}', "");
Expect(0, 7223, '\P{Is_Script:   -Lepcha}', "");
Expect(1, 7223, '\P{^Is_Script:   -Lepcha}', "");
Expect(0, 7167, '\p{Is_Script:   -Lepcha}', "");
Expect(1, 7167, '\p{^Is_Script:   -Lepcha}', "");
Expect(1, 7167, '\P{Is_Script:   -Lepcha}', "");
Expect(0, 7167, '\P{^Is_Script:   -Lepcha}', "");
Error('\p{Is_Sc= /a/Lepc}');
Error('\P{Is_Sc= /a/Lepc}');
Expect(1, 7223, '\p{Is_Sc=lepc}', "");
Expect(0, 7223, '\p{^Is_Sc=lepc}', "");
Expect(0, 7223, '\P{Is_Sc=lepc}', "");
Expect(1, 7223, '\P{^Is_Sc=lepc}', "");
Expect(0, 7167, '\p{Is_Sc=lepc}', "");
Expect(1, 7167, '\p{^Is_Sc=lepc}', "");
Expect(1, 7167, '\P{Is_Sc=lepc}', "");
Expect(0, 7167, '\P{^Is_Sc=lepc}', "");
Expect(1, 7223, '\p{Is_Sc=--LEPC}', "");
Expect(0, 7223, '\p{^Is_Sc=--LEPC}', "");
Expect(0, 7223, '\P{Is_Sc=--LEPC}', "");
Expect(1, 7223, '\P{^Is_Sc=--LEPC}', "");
Expect(0, 7167, '\p{Is_Sc=--LEPC}', "");
Expect(1, 7167, '\p{^Is_Sc=--LEPC}', "");
Expect(1, 7167, '\P{Is_Sc=--LEPC}', "");
Expect(0, 7167, '\P{^Is_Sc=--LEPC}', "");
Error('\p{Script=	:=Coptic}');
Error('\P{Script=	:=Coptic}');
Expect(1, 1007, '\p{Script=coptic}', "");
Expect(0, 1007, '\p{^Script=coptic}', "");
Expect(0, 1007, '\P{Script=coptic}', "");
Expect(1, 1007, '\P{^Script=coptic}', "");
Expect(0, 993, '\p{Script=coptic}', "");
Expect(1, 993, '\p{^Script=coptic}', "");
Expect(1, 993, '\P{Script=coptic}', "");
Expect(0, 993, '\P{^Script=coptic}', "");
Expect(1, 1007, '\p{Script=	_coptic}', "");
Expect(0, 1007, '\p{^Script=	_coptic}', "");
Expect(0, 1007, '\P{Script=	_coptic}', "");
Expect(1, 1007, '\P{^Script=	_coptic}', "");
Expect(0, 993, '\p{Script=	_coptic}', "");
Expect(1, 993, '\p{^Script=	_coptic}', "");
Expect(1, 993, '\P{Script=	_coptic}', "");
Expect(0, 993, '\P{^Script=	_coptic}', "");
Error('\p{Sc=/a/_ Copt}');
Error('\P{Sc=/a/_ Copt}');
Expect(1, 1007, '\p{Sc=copt}', "");
Expect(0, 1007, '\p{^Sc=copt}', "");
Expect(0, 1007, '\P{Sc=copt}', "");
Expect(1, 1007, '\P{^Sc=copt}', "");
Expect(0, 993, '\p{Sc=copt}', "");
Expect(1, 993, '\p{^Sc=copt}', "");
Expect(1, 993, '\P{Sc=copt}', "");
Expect(0, 993, '\P{^Sc=copt}', "");
Expect(1, 1007, '\p{Sc=-copt}', "");
Expect(0, 1007, '\p{^Sc=-copt}', "");
Expect(0, 1007, '\P{Sc=-copt}', "");
Expect(1, 1007, '\P{^Sc=-copt}', "");
Expect(0, 993, '\p{Sc=-copt}', "");
Expect(1, 993, '\p{^Sc=-copt}', "");
Expect(1, 993, '\P{Sc=-copt}', "");
Expect(0, 993, '\P{^Sc=-copt}', "");
Error('\p{Is_Script:	_/a/QAAC}');
Error('\P{Is_Script:	_/a/QAAC}');
Expect(1, 1007, '\p{Is_Script:   qaac}', "");
Expect(0, 1007, '\p{^Is_Script:   qaac}', "");
Expect(0, 1007, '\P{Is_Script:   qaac}', "");
Expect(1, 1007, '\P{^Is_Script:   qaac}', "");
Expect(0, 993, '\p{Is_Script:   qaac}', "");
Expect(1, 993, '\p{^Is_Script:   qaac}', "");
Expect(1, 993, '\P{Is_Script:   qaac}', "");
Expect(0, 993, '\P{^Is_Script:   qaac}', "");
Expect(1, 1007, '\p{Is_Script= qaac}', "");
Expect(0, 1007, '\p{^Is_Script= qaac}', "");
Expect(0, 1007, '\P{Is_Script= qaac}', "");
Expect(1, 1007, '\P{^Is_Script= qaac}', "");
Expect(0, 993, '\p{Is_Script= qaac}', "");
Expect(1, 993, '\p{^Is_Script= qaac}', "");
Expect(1, 993, '\P{Is_Script= qaac}', "");
Expect(0, 993, '\P{^Is_Script= qaac}', "");
Error('\p{Is_Sc=:=Coptic}');
Error('\P{Is_Sc=:=Coptic}');
Expect(1, 1007, '\p{Is_Sc=coptic}', "");
Expect(0, 1007, '\p{^Is_Sc=coptic}', "");
Expect(0, 1007, '\P{Is_Sc=coptic}', "");
Expect(1, 1007, '\P{^Is_Sc=coptic}', "");
Expect(0, 993, '\p{Is_Sc=coptic}', "");
Expect(1, 993, '\p{^Is_Sc=coptic}', "");
Expect(1, 993, '\P{Is_Sc=coptic}', "");
Expect(0, 993, '\P{^Is_Sc=coptic}', "");
Expect(1, 1007, '\p{Is_Sc=_	Coptic}', "");
Expect(0, 1007, '\p{^Is_Sc=_	Coptic}', "");
Expect(0, 1007, '\P{Is_Sc=_	Coptic}', "");
Expect(1, 1007, '\P{^Is_Sc=_	Coptic}', "");
Expect(0, 993, '\p{Is_Sc=_	Coptic}', "");
Expect(1, 993, '\p{^Is_Sc=_	Coptic}', "");
Expect(1, 993, '\P{Is_Sc=_	Coptic}', "");
Expect(0, 993, '\P{^Is_Sc=_	Coptic}', "");
Error('\p{Script=Katakana_Or_Hiragana}');
Error('\P{Script=Katakana_Or_Hiragana}');
Error('\p{Sc=Hrkt}');
Error('\P{Sc=Hrkt}');
Error('\p{Is_Script=Katakana_Or_Hiragana}');
Error('\P{Is_Script=Katakana_Or_Hiragana}');
Error('\p{Is_Sc=Hrkt}');
Error('\P{Is_Sc=Hrkt}');
Error('\p{Script=/a/balinese}');
Error('\P{Script=/a/balinese}');
Expect(1, 6987, '\p{Script=balinese}', "");
Expect(0, 6987, '\p{^Script=balinese}', "");
Expect(0, 6987, '\P{Script=balinese}', "");
Expect(1, 6987, '\P{^Script=balinese}', "");
Expect(0, 6911, '\p{Script=balinese}', "");
Expect(1, 6911, '\p{^Script=balinese}', "");
Expect(1, 6911, '\P{Script=balinese}', "");
Expect(0, 6911, '\P{^Script=balinese}', "");
Expect(1, 6987, '\p{Script:		Balinese}', "");
Expect(0, 6987, '\p{^Script:		Balinese}', "");
Expect(0, 6987, '\P{Script:		Balinese}', "");
Expect(1, 6987, '\P{^Script:		Balinese}', "");
Expect(0, 6911, '\p{Script:		Balinese}', "");
Expect(1, 6911, '\p{^Script:		Balinese}', "");
Expect(1, 6911, '\P{Script:		Balinese}', "");
Expect(0, 6911, '\P{^Script:		Balinese}', "");
Error('\p{Sc:		:=bali}');
Error('\P{Sc:		:=bali}');
Expect(1, 6987, '\p{Sc=bali}', "");
Expect(0, 6987, '\p{^Sc=bali}', "");
Expect(0, 6987, '\P{Sc=bali}', "");
Expect(1, 6987, '\P{^Sc=bali}', "");
Expect(0, 6911, '\p{Sc=bali}', "");
Expect(1, 6911, '\p{^Sc=bali}', "");
Expect(1, 6911, '\P{Sc=bali}', "");
Expect(0, 6911, '\P{^Sc=bali}', "");
Expect(1, 6987, '\p{Sc=	_Bali}', "");
Expect(0, 6987, '\p{^Sc=	_Bali}', "");
Expect(0, 6987, '\P{Sc=	_Bali}', "");
Expect(1, 6987, '\P{^Sc=	_Bali}', "");
Expect(0, 6911, '\p{Sc=	_Bali}', "");
Expect(1, 6911, '\p{^Sc=	_Bali}', "");
Expect(1, 6911, '\P{Sc=	_Bali}', "");
Expect(0, 6911, '\P{^Sc=	_Bali}', "");
Error('\p{Is_Script:  /a/Balinese}');
Error('\P{Is_Script:  /a/Balinese}');
Expect(1, 6987, '\p{Is_Script:   balinese}', "");
Expect(0, 6987, '\p{^Is_Script:   balinese}', "");
Expect(0, 6987, '\P{Is_Script:   balinese}', "");
Expect(1, 6987, '\P{^Is_Script:   balinese}', "");
Expect(0, 6911, '\p{Is_Script:   balinese}', "");
Expect(1, 6911, '\p{^Is_Script:   balinese}', "");
Expect(1, 6911, '\P{Is_Script:   balinese}', "");
Expect(0, 6911, '\P{^Is_Script:   balinese}', "");
Expect(1, 6987, '\p{Is_Script= _balinese}', "");
Expect(0, 6987, '\p{^Is_Script= _balinese}', "");
Expect(0, 6987, '\P{Is_Script= _balinese}', "");
Expect(1, 6987, '\P{^Is_Script= _balinese}', "");
Expect(0, 6911, '\p{Is_Script= _balinese}', "");
Expect(1, 6911, '\p{^Is_Script= _balinese}', "");
Expect(1, 6911, '\P{Is_Script= _balinese}', "");
Expect(0, 6911, '\P{^Is_Script= _balinese}', "");
Error('\p{Is_Sc=/a/__Bali}');
Error('\P{Is_Sc=/a/__Bali}');
Expect(1, 6987, '\p{Is_Sc=bali}', "");
Expect(0, 6987, '\p{^Is_Sc=bali}', "");
Expect(0, 6987, '\P{Is_Sc=bali}', "");
Expect(1, 6987, '\P{^Is_Sc=bali}', "");
Expect(0, 6911, '\p{Is_Sc=bali}', "");
Expect(1, 6911, '\p{^Is_Sc=bali}', "");
Expect(1, 6911, '\P{Is_Sc=bali}', "");
Expect(0, 6911, '\P{^Is_Sc=bali}', "");
Expect(1, 6987, '\p{Is_Sc=-	BALI}', "");
Expect(0, 6987, '\p{^Is_Sc=-	BALI}', "");
Expect(0, 6987, '\P{Is_Sc=-	BALI}', "");
Expect(1, 6987, '\P{^Is_Sc=-	BALI}', "");
Expect(0, 6911, '\p{Is_Sc=-	BALI}', "");
Expect(1, 6911, '\p{^Is_Sc=-	BALI}', "");
Expect(1, 6911, '\P{Is_Sc=-	BALI}', "");
Expect(0, 6911, '\P{^Is_Sc=-	BALI}', "");
Error('\p{Script=:=		TAGBANWA}');
Error('\P{Script=:=		TAGBANWA}');
Expect(1, 5996, '\p{Script=tagbanwa}', "");
Expect(0, 5996, '\p{^Script=tagbanwa}', "");
Expect(0, 5996, '\P{Script=tagbanwa}', "");
Expect(1, 5996, '\P{^Script=tagbanwa}', "");
Expect(0, 5983, '\p{Script=tagbanwa}', "");
Expect(1, 5983, '\p{^Script=tagbanwa}', "");
Expect(1, 5983, '\P{Script=tagbanwa}', "");
Expect(0, 5983, '\P{^Script=tagbanwa}', "");
Expect(1, 5996, '\p{Script=_ Tagbanwa}', "");
Expect(0, 5996, '\p{^Script=_ Tagbanwa}', "");
Expect(0, 5996, '\P{Script=_ Tagbanwa}', "");
Expect(1, 5996, '\P{^Script=_ Tagbanwa}', "");
Expect(0, 5983, '\p{Script=_ Tagbanwa}', "");
Expect(1, 5983, '\p{^Script=_ Tagbanwa}', "");
Expect(1, 5983, '\P{Script=_ Tagbanwa}', "");
Expect(0, 5983, '\P{^Script=_ Tagbanwa}', "");
Error('\p{Sc=:=-Tagb}');
Error('\P{Sc=:=-Tagb}');
Expect(1, 5996, '\p{Sc=tagb}', "");
Expect(0, 5996, '\p{^Sc=tagb}', "");
Expect(0, 5996, '\P{Sc=tagb}', "");
Expect(1, 5996, '\P{^Sc=tagb}', "");
Expect(0, 5983, '\p{Sc=tagb}', "");
Expect(1, 5983, '\p{^Sc=tagb}', "");
Expect(1, 5983, '\P{Sc=tagb}', "");
Expect(0, 5983, '\P{^Sc=tagb}', "");
Expect(1, 5996, '\p{Sc=-	Tagb}', "");
Expect(0, 5996, '\p{^Sc=-	Tagb}', "");
Expect(0, 5996, '\P{Sc=-	Tagb}', "");
Expect(1, 5996, '\P{^Sc=-	Tagb}', "");
Expect(0, 5983, '\p{Sc=-	Tagb}', "");
Expect(1, 5983, '\p{^Sc=-	Tagb}', "");
Expect(1, 5983, '\P{Sc=-	Tagb}', "");
Expect(0, 5983, '\P{^Sc=-	Tagb}', "");
Error('\p{Is_Script:	TAGBANWA:=}');
Error('\P{Is_Script:	TAGBANWA:=}');
Expect(1, 5996, '\p{Is_Script=tagbanwa}', "");
Expect(0, 5996, '\p{^Is_Script=tagbanwa}', "");
Expect(0, 5996, '\P{Is_Script=tagbanwa}', "");
Expect(1, 5996, '\P{^Is_Script=tagbanwa}', "");
Expect(0, 5983, '\p{Is_Script=tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Script=tagbanwa}', "");
Expect(1, 5983, '\P{Is_Script=tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Script=tagbanwa}', "");
Expect(1, 5996, '\p{Is_Script:   - Tagbanwa}', "");
Expect(0, 5996, '\p{^Is_Script:   - Tagbanwa}', "");
Expect(0, 5996, '\P{Is_Script:   - Tagbanwa}', "");
Expect(1, 5996, '\P{^Is_Script:   - Tagbanwa}', "");
Expect(0, 5983, '\p{Is_Script:   - Tagbanwa}', "");
Expect(1, 5983, '\p{^Is_Script:   - Tagbanwa}', "");
Expect(1, 5983, '\P{Is_Script:   - Tagbanwa}', "");
Expect(0, 5983, '\P{^Is_Script:   - Tagbanwa}', "");
Error('\p{Is_Sc=-:=tagb}');
Error('\P{Is_Sc=-:=tagb}');
Expect(1, 5996, '\p{Is_Sc=tagb}', "");
Expect(0, 5996, '\p{^Is_Sc=tagb}', "");
Expect(0, 5996, '\P{Is_Sc=tagb}', "");
Expect(1, 5996, '\P{^Is_Sc=tagb}', "");
Expect(0, 5983, '\p{Is_Sc=tagb}', "");
Expect(1, 5983, '\p{^Is_Sc=tagb}', "");
Expect(1, 5983, '\P{Is_Sc=tagb}', "");
Expect(0, 5983, '\P{^Is_Sc=tagb}', "");
Expect(1, 5996, '\p{Is_Sc=	 Tagb}', "");
Expect(0, 5996, '\p{^Is_Sc=	 Tagb}', "");
Expect(0, 5996, '\P{Is_Sc=	 Tagb}', "");
Expect(1, 5996, '\P{^Is_Sc=	 Tagb}', "");
Expect(0, 5983, '\p{Is_Sc=	 Tagb}', "");
Expect(1, 5983, '\p{^Is_Sc=	 Tagb}', "");
Expect(1, 5983, '\P{Is_Sc=	 Tagb}', "");
Expect(0, 5983, '\P{^Is_Sc=	 Tagb}', "");
Error('\p{Script=_Syloti-nagri:=}');
Error('\P{Script=_Syloti-nagri:=}');
Expect(1, 43051, '\p{Script=sylotinagri}', "");
Expect(0, 43051, '\p{^Script=sylotinagri}', "");
Expect(0, 43051, '\P{Script=sylotinagri}', "");
Expect(1, 43051, '\P{^Script=sylotinagri}', "");
Expect(0, 43007, '\p{Script=sylotinagri}', "");
Expect(1, 43007, '\p{^Script=sylotinagri}', "");
Expect(1, 43007, '\P{Script=sylotinagri}', "");
Expect(0, 43007, '\P{^Script=sylotinagri}', "");
Expect(1, 43051, '\p{Script= SYLOTInagri}', "");
Expect(0, 43051, '\p{^Script= SYLOTInagri}', "");
Expect(0, 43051, '\P{Script= SYLOTInagri}', "");
Expect(1, 43051, '\P{^Script= SYLOTInagri}', "");
Expect(0, 43007, '\p{Script= SYLOTInagri}', "");
Expect(1, 43007, '\p{^Script= SYLOTInagri}', "");
Expect(1, 43007, '\P{Script= SYLOTInagri}', "");
Expect(0, 43007, '\P{^Script= SYLOTInagri}', "");
Error('\p{Sc=/a/_sylo}');
Error('\P{Sc=/a/_sylo}');
Expect(1, 43051, '\p{Sc=sylo}', "");
Expect(0, 43051, '\p{^Sc=sylo}', "");
Expect(0, 43051, '\P{Sc=sylo}', "");
Expect(1, 43051, '\P{^Sc=sylo}', "");
Expect(0, 43007, '\p{Sc=sylo}', "");
Expect(1, 43007, '\p{^Sc=sylo}', "");
Expect(1, 43007, '\P{Sc=sylo}', "");
Expect(0, 43007, '\P{^Sc=sylo}', "");
Expect(1, 43051, '\p{Sc= -Sylo}', "");
Expect(0, 43051, '\p{^Sc= -Sylo}', "");
Expect(0, 43051, '\P{Sc= -Sylo}', "");
Expect(1, 43051, '\P{^Sc= -Sylo}', "");
Expect(0, 43007, '\p{Sc= -Sylo}', "");
Expect(1, 43007, '\p{^Sc= -Sylo}', "");
Expect(1, 43007, '\P{Sc= -Sylo}', "");
Expect(0, 43007, '\P{^Sc= -Sylo}', "");
Error('\p{Is_Script=	SYLOTI:=Nagri}');
Error('\P{Is_Script=	SYLOTI:=Nagri}');
Expect(1, 43051, '\p{Is_Script=sylotinagri}', "");
Expect(0, 43051, '\p{^Is_Script=sylotinagri}', "");
Expect(0, 43051, '\P{Is_Script=sylotinagri}', "");
Expect(1, 43051, '\P{^Is_Script=sylotinagri}', "");
Expect(0, 43007, '\p{Is_Script=sylotinagri}', "");
Expect(1, 43007, '\p{^Is_Script=sylotinagri}', "");
Expect(1, 43007, '\P{Is_Script=sylotinagri}', "");
Expect(0, 43007, '\P{^Is_Script=sylotinagri}', "");
Expect(1, 43051, '\p{Is_Script:	_-sylotiNagri}', "");
Expect(0, 43051, '\p{^Is_Script:	_-sylotiNagri}', "");
Expect(0, 43051, '\P{Is_Script:	_-sylotiNagri}', "");
Expect(1, 43051, '\P{^Is_Script:	_-sylotiNagri}', "");
Expect(0, 43007, '\p{Is_Script:	_-sylotiNagri}', "");
Expect(1, 43007, '\p{^Is_Script:	_-sylotiNagri}', "");
Expect(1, 43007, '\P{Is_Script:	_-sylotiNagri}', "");
Expect(0, 43007, '\P{^Is_Script:	_-sylotiNagri}', "");
Error('\p{Is_Sc=		sylo:=}');
Error('\P{Is_Sc=		sylo:=}');
Expect(1, 43051, '\p{Is_Sc=sylo}', "");
Expect(0, 43051, '\p{^Is_Sc=sylo}', "");
Expect(0, 43051, '\P{Is_Sc=sylo}', "");
Expect(1, 43051, '\P{^Is_Sc=sylo}', "");
Expect(0, 43007, '\p{Is_Sc=sylo}', "");
Expect(1, 43007, '\p{^Is_Sc=sylo}', "");
Expect(1, 43007, '\P{Is_Sc=sylo}', "");
Expect(0, 43007, '\P{^Is_Sc=sylo}', "");
Expect(1, 43051, '\p{Is_Sc= -SYLO}', "");
Expect(0, 43051, '\p{^Is_Sc= -SYLO}', "");
Expect(0, 43051, '\P{Is_Sc= -SYLO}', "");
Expect(1, 43051, '\P{^Is_Sc= -SYLO}', "");
Expect(0, 43007, '\p{Is_Sc= -SYLO}', "");
Expect(1, 43007, '\p{^Is_Sc= -SYLO}', "");
Expect(1, 43007, '\P{Is_Sc= -SYLO}', "");
Expect(0, 43007, '\P{^Is_Sc= -SYLO}', "");
Error('\p{Script=_meetei/a/Mayek}');
Error('\P{Script=_meetei/a/Mayek}');
Expect(1, 44013, '\p{Script:meeteimayek}', "");
Expect(0, 44013, '\p{^Script:meeteimayek}', "");
Expect(0, 44013, '\P{Script:meeteimayek}', "");
Expect(1, 44013, '\P{^Script:meeteimayek}', "");
Expect(0, 43967, '\p{Script:meeteimayek}', "");
Expect(1, 43967, '\p{^Script:meeteimayek}', "");
Expect(1, 43967, '\P{Script:meeteimayek}', "");
Expect(0, 43967, '\P{^Script:meeteimayek}', "");
Expect(1, 44013, '\p{Script=--MEETEI MAYEK}', "");
Expect(0, 44013, '\p{^Script=--MEETEI MAYEK}', "");
Expect(0, 44013, '\P{Script=--MEETEI MAYEK}', "");
Expect(1, 44013, '\P{^Script=--MEETEI MAYEK}', "");
Expect(0, 43967, '\p{Script=--MEETEI MAYEK}', "");
Expect(1, 43967, '\p{^Script=--MEETEI MAYEK}', "");
Expect(1, 43967, '\P{Script=--MEETEI MAYEK}', "");
Expect(0, 43967, '\P{^Script=--MEETEI MAYEK}', "");
Error('\p{Sc=/a/ MTEI}');
Error('\P{Sc=/a/ MTEI}');
Expect(1, 44013, '\p{Sc=mtei}', "");
Expect(0, 44013, '\p{^Sc=mtei}', "");
Expect(0, 44013, '\P{Sc=mtei}', "");
Expect(1, 44013, '\P{^Sc=mtei}', "");
Expect(0, 43967, '\p{Sc=mtei}', "");
Expect(1, 43967, '\p{^Sc=mtei}', "");
Expect(1, 43967, '\P{Sc=mtei}', "");
Expect(0, 43967, '\P{^Sc=mtei}', "");
Expect(1, 44013, '\p{Sc=	-mtei}', "");
Expect(0, 44013, '\p{^Sc=	-mtei}', "");
Expect(0, 44013, '\P{Sc=	-mtei}', "");
Expect(1, 44013, '\P{^Sc=	-mtei}', "");
Expect(0, 43967, '\p{Sc=	-mtei}', "");
Expect(1, 43967, '\p{^Sc=	-mtei}', "");
Expect(1, 43967, '\P{Sc=	-mtei}', "");
Expect(0, 43967, '\P{^Sc=	-mtei}', "");
Error('\p{Is_Script=- MEETEI/a/MAYEK}');
Error('\P{Is_Script=- MEETEI/a/MAYEK}');
Expect(1, 44013, '\p{Is_Script=meeteimayek}', "");
Expect(0, 44013, '\p{^Is_Script=meeteimayek}', "");
Expect(0, 44013, '\P{Is_Script=meeteimayek}', "");
Expect(1, 44013, '\P{^Is_Script=meeteimayek}', "");
Expect(0, 43967, '\p{Is_Script=meeteimayek}', "");
Expect(1, 43967, '\p{^Is_Script=meeteimayek}', "");
Expect(1, 43967, '\P{Is_Script=meeteimayek}', "");
Expect(0, 43967, '\P{^Is_Script=meeteimayek}', "");
Expect(1, 44013, '\p{Is_Script=- Meetei-Mayek}', "");
Expect(0, 44013, '\p{^Is_Script=- Meetei-Mayek}', "");
Expect(0, 44013, '\P{Is_Script=- Meetei-Mayek}', "");
Expect(1, 44013, '\P{^Is_Script=- Meetei-Mayek}', "");
Expect(0, 43967, '\p{Is_Script=- Meetei-Mayek}', "");
Expect(1, 43967, '\p{^Is_Script=- Meetei-Mayek}', "");
Expect(1, 43967, '\P{Is_Script=- Meetei-Mayek}', "");
Expect(0, 43967, '\P{^Is_Script=- Meetei-Mayek}', "");
Error('\p{Is_Sc=_-Mtei/a/}');
Error('\P{Is_Sc=_-Mtei/a/}');
Expect(1, 44013, '\p{Is_Sc: mtei}', "");
Expect(0, 44013, '\p{^Is_Sc: mtei}', "");
Expect(0, 44013, '\P{Is_Sc: mtei}', "");
Expect(1, 44013, '\P{^Is_Sc: mtei}', "");
Expect(0, 43967, '\p{Is_Sc: mtei}', "");
Expect(1, 43967, '\p{^Is_Sc: mtei}', "");
Expect(1, 43967, '\P{Is_Sc: mtei}', "");
Expect(0, 43967, '\P{^Is_Sc: mtei}', "");
Expect(1, 44013, '\p{Is_Sc=	 mtei}', "");
Expect(0, 44013, '\p{^Is_Sc=	 mtei}', "");
Expect(0, 44013, '\P{Is_Sc=	 mtei}', "");
Expect(1, 44013, '\P{^Is_Sc=	 mtei}', "");
Expect(0, 43967, '\p{Is_Sc=	 mtei}', "");
Expect(1, 43967, '\p{^Is_Sc=	 mtei}', "");
Expect(1, 43967, '\P{Is_Sc=	 mtei}', "");
Expect(0, 43967, '\P{^Is_Sc=	 mtei}', "");
Error('\p{Script=-:=Phoenician}');
Error('\P{Script=-:=Phoenician}');
Expect(1, 67867, '\p{Script=phoenician}', "");
Expect(0, 67867, '\p{^Script=phoenician}', "");
Expect(0, 67867, '\P{Script=phoenician}', "");
Expect(1, 67867, '\P{^Script=phoenician}', "");
Expect(0, 67839, '\p{Script=phoenician}', "");
Expect(1, 67839, '\p{^Script=phoenician}', "");
Expect(1, 67839, '\P{Script=phoenician}', "");
Expect(0, 67839, '\P{^Script=phoenician}', "");
Expect(1, 67867, '\p{Script=	-PHOENICIAN}', "");
Expect(0, 67867, '\p{^Script=	-PHOENICIAN}', "");
Expect(0, 67867, '\P{Script=	-PHOENICIAN}', "");
Expect(1, 67867, '\P{^Script=	-PHOENICIAN}', "");
Expect(0, 67839, '\p{Script=	-PHOENICIAN}', "");
Expect(1, 67839, '\p{^Script=	-PHOENICIAN}', "");
Expect(1, 67839, '\P{Script=	-PHOENICIAN}', "");
Expect(0, 67839, '\P{^Script=	-PHOENICIAN}', "");
Error('\p{Sc=-	phnx/a/}');
Error('\P{Sc=-	phnx/a/}');
Expect(1, 67867, '\p{Sc=phnx}', "");
Expect(0, 67867, '\p{^Sc=phnx}', "");
Expect(0, 67867, '\P{Sc=phnx}', "");
Expect(1, 67867, '\P{^Sc=phnx}', "");
Expect(0, 67839, '\p{Sc=phnx}', "");
Expect(1, 67839, '\p{^Sc=phnx}', "");
Expect(1, 67839, '\P{Sc=phnx}', "");
Expect(0, 67839, '\P{^Sc=phnx}', "");
Expect(1, 67867, '\p{Sc=--phnx}', "");
Expect(0, 67867, '\p{^Sc=--phnx}', "");
Expect(0, 67867, '\P{Sc=--phnx}', "");
Expect(1, 67867, '\P{^Sc=--phnx}', "");
Expect(0, 67839, '\p{Sc=--phnx}', "");
Expect(1, 67839, '\p{^Sc=--phnx}', "");
Expect(1, 67839, '\P{Sc=--phnx}', "");
Expect(0, 67839, '\P{^Sc=--phnx}', "");
Error('\p{Is_Script=_:=Phoenician}');
Error('\P{Is_Script=_:=Phoenician}');
Expect(1, 67867, '\p{Is_Script=phoenician}', "");
Expect(0, 67867, '\p{^Is_Script=phoenician}', "");
Expect(0, 67867, '\P{Is_Script=phoenician}', "");
Expect(1, 67867, '\P{^Is_Script=phoenician}', "");
Expect(0, 67839, '\p{Is_Script=phoenician}', "");
Expect(1, 67839, '\p{^Is_Script=phoenician}', "");
Expect(1, 67839, '\P{Is_Script=phoenician}', "");
Expect(0, 67839, '\P{^Is_Script=phoenician}', "");
Expect(1, 67867, '\p{Is_Script=-Phoenician}', "");
Expect(0, 67867, '\p{^Is_Script=-Phoenician}', "");
Expect(0, 67867, '\P{Is_Script=-Phoenician}', "");
Expect(1, 67867, '\P{^Is_Script=-Phoenician}', "");
Expect(0, 67839, '\p{Is_Script=-Phoenician}', "");
Expect(1, 67839, '\p{^Is_Script=-Phoenician}', "");
Expect(1, 67839, '\P{Is_Script=-Phoenician}', "");
Expect(0, 67839, '\P{^Is_Script=-Phoenician}', "");
Error('\p{Is_Sc=-PHNX:=}');
Error('\P{Is_Sc=-PHNX:=}');
Expect(1, 67867, '\p{Is_Sc:   phnx}', "");
Expect(0, 67867, '\p{^Is_Sc:   phnx}', "");
Expect(0, 67867, '\P{Is_Sc:   phnx}', "");
Expect(1, 67867, '\P{^Is_Sc:   phnx}', "");
Expect(0, 67839, '\p{Is_Sc:   phnx}', "");
Expect(1, 67839, '\p{^Is_Sc:   phnx}', "");
Expect(1, 67839, '\P{Is_Sc:   phnx}', "");
Expect(0, 67839, '\P{^Is_Sc:   phnx}', "");
Expect(1, 67867, '\p{Is_Sc:   - PHNX}', "");
Expect(0, 67867, '\p{^Is_Sc:   - PHNX}', "");
Expect(0, 67867, '\P{Is_Sc:   - PHNX}', "");
Expect(1, 67867, '\P{^Is_Sc:   - PHNX}', "");
Expect(0, 67839, '\p{Is_Sc:   - PHNX}', "");
Expect(1, 67839, '\p{^Is_Sc:   - PHNX}', "");
Expect(1, 67839, '\P{Is_Sc:   - PHNX}', "");
Expect(0, 67839, '\P{^Is_Sc:   - PHNX}', "");
Error('\p{Script=_-devanagari:=}');
Error('\P{Script=_-devanagari:=}');
Expect(1, 2361, '\p{Script=devanagari}', "");
Expect(0, 2361, '\p{^Script=devanagari}', "");
Expect(0, 2361, '\P{Script=devanagari}', "");
Expect(1, 2361, '\P{^Script=devanagari}', "");
Expect(0, 2303, '\p{Script=devanagari}', "");
Expect(1, 2303, '\p{^Script=devanagari}', "");
Expect(1, 2303, '\P{Script=devanagari}', "");
Expect(0, 2303, '\P{^Script=devanagari}', "");
Expect(1, 2361, '\p{Script= Devanagari}', "");
Expect(0, 2361, '\p{^Script= Devanagari}', "");
Expect(0, 2361, '\P{Script= Devanagari}', "");
Expect(1, 2361, '\P{^Script= Devanagari}', "");
Expect(0, 2303, '\p{Script= Devanagari}', "");
Expect(1, 2303, '\p{^Script= Devanagari}', "");
Expect(1, 2303, '\P{Script= Devanagari}', "");
Expect(0, 2303, '\P{^Script= Devanagari}', "");
Error('\p{Sc=/a/- Deva}');
Error('\P{Sc=/a/- Deva}');
Expect(1, 2361, '\p{Sc=deva}', "");
Expect(0, 2361, '\p{^Sc=deva}', "");
Expect(0, 2361, '\P{Sc=deva}', "");
Expect(1, 2361, '\P{^Sc=deva}', "");
Expect(0, 2303, '\p{Sc=deva}', "");
Expect(1, 2303, '\p{^Sc=deva}', "");
Expect(1, 2303, '\P{Sc=deva}', "");
Expect(0, 2303, '\P{^Sc=deva}', "");
Expect(1, 2361, '\p{Sc=	Deva}', "");
Expect(0, 2361, '\p{^Sc=	Deva}', "");
Expect(0, 2361, '\P{Sc=	Deva}', "");
Expect(1, 2361, '\P{^Sc=	Deva}', "");
Expect(0, 2303, '\p{Sc=	Deva}', "");
Expect(1, 2303, '\p{^Sc=	Deva}', "");
Expect(1, 2303, '\P{Sc=	Deva}', "");
Expect(0, 2303, '\P{^Sc=	Deva}', "");
Error('\p{Is_Script:   -Devanagari/a/}');
Error('\P{Is_Script:   -Devanagari/a/}');
Expect(1, 2361, '\p{Is_Script:	devanagari}', "");
Expect(0, 2361, '\p{^Is_Script:	devanagari}', "");
Expect(0, 2361, '\P{Is_Script:	devanagari}', "");
Expect(1, 2361, '\P{^Is_Script:	devanagari}', "");
Expect(0, 2303, '\p{Is_Script:	devanagari}', "");
Expect(1, 2303, '\p{^Is_Script:	devanagari}', "");
Expect(1, 2303, '\P{Is_Script:	devanagari}', "");
Expect(0, 2303, '\P{^Is_Script:	devanagari}', "");
Expect(1, 2361, '\p{Is_Script=_Devanagari}', "");
Expect(0, 2361, '\p{^Is_Script=_Devanagari}', "");
Expect(0, 2361, '\P{Is_Script=_Devanagari}', "");
Expect(1, 2361, '\P{^Is_Script=_Devanagari}', "");
Expect(0, 2303, '\p{Is_Script=_Devanagari}', "");
Expect(1, 2303, '\p{^Is_Script=_Devanagari}', "");
Expect(1, 2303, '\P{Is_Script=_Devanagari}', "");
Expect(0, 2303, '\P{^Is_Script=_Devanagari}', "");
Error('\p{Is_Sc=/a/	Deva}');
Error('\P{Is_Sc=/a/	Deva}');
Expect(1, 2361, '\p{Is_Sc=deva}', "");
Expect(0, 2361, '\p{^Is_Sc=deva}', "");
Expect(0, 2361, '\P{Is_Sc=deva}', "");
Expect(1, 2361, '\P{^Is_Sc=deva}', "");
Expect(0, 2303, '\p{Is_Sc=deva}', "");
Expect(1, 2303, '\p{^Is_Sc=deva}', "");
Expect(1, 2303, '\P{Is_Sc=deva}', "");
Expect(0, 2303, '\P{^Is_Sc=deva}', "");
Expect(1, 2361, '\p{Is_Sc:	_-Deva}', "");
Expect(0, 2361, '\p{^Is_Sc:	_-Deva}', "");
Expect(0, 2361, '\P{Is_Sc:	_-Deva}', "");
Expect(1, 2361, '\P{^Is_Sc:	_-Deva}', "");
Expect(0, 2303, '\p{Is_Sc:	_-Deva}', "");
Expect(1, 2303, '\p{^Is_Sc:	_-Deva}', "");
Expect(1, 2303, '\P{Is_Sc:	_-Deva}', "");
Expect(0, 2303, '\P{^Is_Sc:	_-Deva}', "");
Error('\p{Script=	:=CARIAN}');
Error('\P{Script=	:=CARIAN}');
Expect(1, 66256, '\p{Script=carian}', "");
Expect(0, 66256, '\p{^Script=carian}', "");
Expect(0, 66256, '\P{Script=carian}', "");
Expect(1, 66256, '\P{^Script=carian}', "");
Expect(0, 66207, '\p{Script=carian}', "");
Expect(1, 66207, '\p{^Script=carian}', "");
Expect(1, 66207, '\P{Script=carian}', "");
Expect(0, 66207, '\P{^Script=carian}', "");
Expect(1, 66256, '\p{Script=		CARIAN}', "");
Expect(0, 66256, '\p{^Script=		CARIAN}', "");
Expect(0, 66256, '\P{Script=		CARIAN}', "");
Expect(1, 66256, '\P{^Script=		CARIAN}', "");
Expect(0, 66207, '\p{Script=		CARIAN}', "");
Expect(1, 66207, '\p{^Script=		CARIAN}', "");
Expect(1, 66207, '\P{Script=		CARIAN}', "");
Expect(0, 66207, '\P{^Script=		CARIAN}', "");
Error('\p{Sc:	_/a/cari}');
Error('\P{Sc:	_/a/cari}');
Expect(1, 66256, '\p{Sc=cari}', "");
Expect(0, 66256, '\p{^Sc=cari}', "");
Expect(0, 66256, '\P{Sc=cari}', "");
Expect(1, 66256, '\P{^Sc=cari}', "");
Expect(0, 66207, '\p{Sc=cari}', "");
Expect(1, 66207, '\p{^Sc=cari}', "");
Expect(1, 66207, '\P{Sc=cari}', "");
Expect(0, 66207, '\P{^Sc=cari}', "");
Expect(1, 66256, '\p{Sc= -Cari}', "");
Expect(0, 66256, '\p{^Sc= -Cari}', "");
Expect(0, 66256, '\P{Sc= -Cari}', "");
Expect(1, 66256, '\P{^Sc= -Cari}', "");
Expect(0, 66207, '\p{Sc= -Cari}', "");
Expect(1, 66207, '\p{^Sc= -Cari}', "");
Expect(1, 66207, '\P{Sc= -Cari}', "");
Expect(0, 66207, '\P{^Sc= -Cari}', "");
Error('\p{Is_Script=	 Carian:=}');
Error('\P{Is_Script=	 Carian:=}');
Expect(1, 66256, '\p{Is_Script=carian}', "");
Expect(0, 66256, '\p{^Is_Script=carian}', "");
Expect(0, 66256, '\P{Is_Script=carian}', "");
Expect(1, 66256, '\P{^Is_Script=carian}', "");
Expect(0, 66207, '\p{Is_Script=carian}', "");
Expect(1, 66207, '\p{^Is_Script=carian}', "");
Expect(1, 66207, '\P{Is_Script=carian}', "");
Expect(0, 66207, '\P{^Is_Script=carian}', "");
Expect(1, 66256, '\p{Is_Script= _Carian}', "");
Expect(0, 66256, '\p{^Is_Script= _Carian}', "");
Expect(0, 66256, '\P{Is_Script= _Carian}', "");
Expect(1, 66256, '\P{^Is_Script= _Carian}', "");
Expect(0, 66207, '\p{Is_Script= _Carian}', "");
Expect(1, 66207, '\p{^Is_Script= _Carian}', "");
Expect(1, 66207, '\P{Is_Script= _Carian}', "");
Expect(0, 66207, '\P{^Is_Script= _Carian}', "");
Error('\p{Is_Sc=/a/-	cari}');
Error('\P{Is_Sc=/a/-	cari}');
Expect(1, 66256, '\p{Is_Sc=cari}', "");
Expect(0, 66256, '\p{^Is_Sc=cari}', "");
Expect(0, 66256, '\P{Is_Sc=cari}', "");
Expect(1, 66256, '\P{^Is_Sc=cari}', "");
Expect(0, 66207, '\p{Is_Sc=cari}', "");
Expect(1, 66207, '\p{^Is_Sc=cari}', "");
Expect(1, 66207, '\P{Is_Sc=cari}', "");
Expect(0, 66207, '\P{^Is_Sc=cari}', "");
Expect(1, 66256, '\p{Is_Sc=__cari}', "");
Expect(0, 66256, '\p{^Is_Sc=__cari}', "");
Expect(0, 66256, '\P{Is_Sc=__cari}', "");
Expect(1, 66256, '\P{^Is_Sc=__cari}', "");
Expect(0, 66207, '\p{Is_Sc=__cari}', "");
Expect(1, 66207, '\p{^Is_Sc=__cari}', "");
Expect(1, 66207, '\P{Is_Sc=__cari}', "");
Expect(0, 66207, '\P{^Is_Sc=__cari}', "");
Error('\p{Script=/a/buhid}');
Error('\P{Script=/a/buhid}');
Expect(1, 5971, '\p{Script=buhid}', "");
Expect(0, 5971, '\p{^Script=buhid}', "");
Expect(0, 5971, '\P{Script=buhid}', "");
Expect(1, 5971, '\P{^Script=buhid}', "");
Expect(0, 5951, '\p{Script=buhid}', "");
Expect(1, 5951, '\p{^Script=buhid}', "");
Expect(1, 5951, '\P{Script=buhid}', "");
Expect(0, 5951, '\P{^Script=buhid}', "");
Expect(1, 5971, '\p{Script=_	buhid}', "");
Expect(0, 5971, '\p{^Script=_	buhid}', "");
Expect(0, 5971, '\P{Script=_	buhid}', "");
Expect(1, 5971, '\P{^Script=_	buhid}', "");
Expect(0, 5951, '\p{Script=_	buhid}', "");
Expect(1, 5951, '\p{^Script=_	buhid}', "");
Expect(1, 5951, '\P{Script=_	buhid}', "");
Expect(0, 5951, '\P{^Script=_	buhid}', "");
Error('\p{Sc=_:=BUHD}');
Error('\P{Sc=_:=BUHD}');
Expect(1, 5971, '\p{Sc=buhd}', "");
Expect(0, 5971, '\p{^Sc=buhd}', "");
Expect(0, 5971, '\P{Sc=buhd}', "");
Expect(1, 5971, '\P{^Sc=buhd}', "");
Expect(0, 5951, '\p{Sc=buhd}', "");
Expect(1, 5951, '\p{^Sc=buhd}', "");
Expect(1, 5951, '\P{Sc=buhd}', "");
Expect(0, 5951, '\P{^Sc=buhd}', "");
Expect(1, 5971, '\p{Sc=-	BUHD}', "");
Expect(0, 5971, '\p{^Sc=-	BUHD}', "");
Expect(0, 5971, '\P{Sc=-	BUHD}', "");
Expect(1, 5971, '\P{^Sc=-	BUHD}', "");
Expect(0, 5951, '\p{Sc=-	BUHD}', "");
Expect(1, 5951, '\p{^Sc=-	BUHD}', "");
Expect(1, 5951, '\P{Sc=-	BUHD}', "");
Expect(0, 5951, '\P{^Sc=-	BUHD}', "");
Error('\p{Is_Script=-_Buhid/a/}');
Error('\P{Is_Script=-_Buhid/a/}');
Expect(1, 5971, '\p{Is_Script=buhid}', "");
Expect(0, 5971, '\p{^Is_Script=buhid}', "");
Expect(0, 5971, '\P{Is_Script=buhid}', "");
Expect(1, 5971, '\P{^Is_Script=buhid}', "");
Expect(0, 5951, '\p{Is_Script=buhid}', "");
Expect(1, 5951, '\p{^Is_Script=buhid}', "");
Expect(1, 5951, '\P{Is_Script=buhid}', "");
Expect(0, 5951, '\P{^Is_Script=buhid}', "");
Expect(1, 5971, '\p{Is_Script=-	Buhid}', "");
Expect(0, 5971, '\p{^Is_Script=-	Buhid}', "");
Expect(0, 5971, '\P{Is_Script=-	Buhid}', "");
Expect(1, 5971, '\P{^Is_Script=-	Buhid}', "");
Expect(0, 5951, '\p{Is_Script=-	Buhid}', "");
Expect(1, 5951, '\p{^Is_Script=-	Buhid}', "");
Expect(1, 5951, '\P{Is_Script=-	Buhid}', "");
Expect(0, 5951, '\P{^Is_Script=-	Buhid}', "");
Error('\p{Is_Sc=-/a/buhd}');
Error('\P{Is_Sc=-/a/buhd}');
Expect(1, 5971, '\p{Is_Sc=buhd}', "");
Expect(0, 5971, '\p{^Is_Sc=buhd}', "");
Expect(0, 5971, '\P{Is_Sc=buhd}', "");
Expect(1, 5971, '\P{^Is_Sc=buhd}', "");
Expect(0, 5951, '\p{Is_Sc=buhd}', "");
Expect(1, 5951, '\p{^Is_Sc=buhd}', "");
Expect(1, 5951, '\P{Is_Sc=buhd}', "");
Expect(0, 5951, '\P{^Is_Sc=buhd}', "");
Expect(1, 5971, '\p{Is_Sc:	  buhd}', "");
Expect(0, 5971, '\p{^Is_Sc:	  buhd}', "");
Expect(0, 5971, '\P{Is_Sc:	  buhd}', "");
Expect(1, 5971, '\P{^Is_Sc:	  buhd}', "");
Expect(0, 5951, '\p{Is_Sc:	  buhd}', "");
Expect(1, 5951, '\p{^Is_Sc:	  buhd}', "");
Expect(1, 5951, '\P{Is_Sc:	  buhd}', "");
Expect(0, 5951, '\P{^Is_Sc:	  buhd}', "");
Error('\p{Script=/a/  limbu}');
Error('\P{Script=/a/  limbu}');
Expect(1, 6428, '\p{Script=limbu}', "");
Expect(0, 6428, '\p{^Script=limbu}', "");
Expect(0, 6428, '\P{Script=limbu}', "");
Expect(1, 6428, '\P{^Script=limbu}', "");
Expect(0, 6399, '\p{Script=limbu}', "");
Expect(1, 6399, '\p{^Script=limbu}', "");
Expect(1, 6399, '\P{Script=limbu}', "");
Expect(0, 6399, '\P{^Script=limbu}', "");
Expect(1, 6428, '\p{Script=	Limbu}', "");
Expect(0, 6428, '\p{^Script=	Limbu}', "");
Expect(0, 6428, '\P{Script=	Limbu}', "");
Expect(1, 6428, '\P{^Script=	Limbu}', "");
Expect(0, 6399, '\p{Script=	Limbu}', "");
Expect(1, 6399, '\p{^Script=	Limbu}', "");
Expect(1, 6399, '\P{Script=	Limbu}', "");
Expect(0, 6399, '\P{^Script=	Limbu}', "");
Error('\p{Sc=	limb/a/}');
Error('\P{Sc=	limb/a/}');
Expect(1, 6428, '\p{Sc=limb}', "");
Expect(0, 6428, '\p{^Sc=limb}', "");
Expect(0, 6428, '\P{Sc=limb}', "");
Expect(1, 6428, '\P{^Sc=limb}', "");
Expect(0, 6399, '\p{Sc=limb}', "");
Expect(1, 6399, '\p{^Sc=limb}', "");
Expect(1, 6399, '\P{Sc=limb}', "");
Expect(0, 6399, '\P{^Sc=limb}', "");
Expect(1, 6428, '\p{Sc= 	limb}', "");
Expect(0, 6428, '\p{^Sc= 	limb}', "");
Expect(0, 6428, '\P{Sc= 	limb}', "");
Expect(1, 6428, '\P{^Sc= 	limb}', "");
Expect(0, 6399, '\p{Sc= 	limb}', "");
Expect(1, 6399, '\p{^Sc= 	limb}', "");
Expect(1, 6399, '\P{Sc= 	limb}', "");
Expect(0, 6399, '\P{^Sc= 	limb}', "");
Error('\p{Is_Script=-_LIMBU:=}');
Error('\P{Is_Script=-_LIMBU:=}');
Expect(1, 6428, '\p{Is_Script=limbu}', "");
Expect(0, 6428, '\p{^Is_Script=limbu}', "");
Expect(0, 6428, '\P{Is_Script=limbu}', "");
Expect(1, 6428, '\P{^Is_Script=limbu}', "");
Expect(0, 6399, '\p{Is_Script=limbu}', "");
Expect(1, 6399, '\p{^Is_Script=limbu}', "");
Expect(1, 6399, '\P{Is_Script=limbu}', "");
Expect(0, 6399, '\P{^Is_Script=limbu}', "");
Expect(1, 6428, '\p{Is_Script=	-LIMBU}', "");
Expect(0, 6428, '\p{^Is_Script=	-LIMBU}', "");
Expect(0, 6428, '\P{Is_Script=	-LIMBU}', "");
Expect(1, 6428, '\P{^Is_Script=	-LIMBU}', "");
Expect(0, 6399, '\p{Is_Script=	-LIMBU}', "");
Expect(1, 6399, '\p{^Is_Script=	-LIMBU}', "");
Expect(1, 6399, '\P{Is_Script=	-LIMBU}', "");
Expect(0, 6399, '\P{^Is_Script=	-LIMBU}', "");
Error('\p{Is_Sc=	Limb:=}');
Error('\P{Is_Sc=	Limb:=}');
Expect(1, 6428, '\p{Is_Sc=limb}', "");
Expect(0, 6428, '\p{^Is_Sc=limb}', "");
Expect(0, 6428, '\P{Is_Sc=limb}', "");
Expect(1, 6428, '\P{^Is_Sc=limb}', "");
Expect(0, 6399, '\p{Is_Sc=limb}', "");
Expect(1, 6399, '\p{^Is_Sc=limb}', "");
Expect(1, 6399, '\P{Is_Sc=limb}', "");
Expect(0, 6399, '\P{^Is_Sc=limb}', "");
Expect(1, 6428, '\p{Is_Sc:	 Limb}', "");
Expect(0, 6428, '\p{^Is_Sc:	 Limb}', "");
Expect(0, 6428, '\P{Is_Sc:	 Limb}', "");
Expect(1, 6428, '\P{^Is_Sc:	 Limb}', "");
Expect(0, 6399, '\p{Is_Sc:	 Limb}', "");
Expect(1, 6399, '\p{^Is_Sc:	 Limb}', "");
Expect(1, 6399, '\P{Is_Sc:	 Limb}', "");
Expect(0, 6399, '\P{^Is_Sc:	 Limb}', "");
Error('\p{Script=	_JAVANESE:=}');
Error('\P{Script=	_JAVANESE:=}');
Expect(1, 43469, '\p{Script=javanese}', "");
Expect(0, 43469, '\p{^Script=javanese}', "");
Expect(0, 43469, '\P{Script=javanese}', "");
Expect(1, 43469, '\P{^Script=javanese}', "");
Expect(0, 43391, '\p{Script=javanese}', "");
Expect(1, 43391, '\p{^Script=javanese}', "");
Expect(1, 43391, '\P{Script=javanese}', "");
Expect(0, 43391, '\P{^Script=javanese}', "");
Expect(1, 43469, '\p{Script=- Javanese}', "");
Expect(0, 43469, '\p{^Script=- Javanese}', "");
Expect(0, 43469, '\P{Script=- Javanese}', "");
Expect(1, 43469, '\P{^Script=- Javanese}', "");
Expect(0, 43391, '\p{Script=- Javanese}', "");
Expect(1, 43391, '\p{^Script=- Javanese}', "");
Expect(1, 43391, '\P{Script=- Javanese}', "");
Expect(0, 43391, '\P{^Script=- Javanese}', "");
Error('\p{Sc=-	Java/a/}');
Error('\P{Sc=-	Java/a/}');
Expect(1, 43469, '\p{Sc=java}', "");
Expect(0, 43469, '\p{^Sc=java}', "");
Expect(0, 43469, '\P{Sc=java}', "");
Expect(1, 43469, '\P{^Sc=java}', "");
Expect(0, 43391, '\p{Sc=java}', "");
Expect(1, 43391, '\p{^Sc=java}', "");
Expect(1, 43391, '\P{Sc=java}', "");
Expect(0, 43391, '\P{^Sc=java}', "");
Expect(1, 43469, '\p{Sc:	_JAVA}', "");
Expect(0, 43469, '\p{^Sc:	_JAVA}', "");
Expect(0, 43469, '\P{Sc:	_JAVA}', "");
Expect(1, 43469, '\P{^Sc:	_JAVA}', "");
Expect(0, 43391, '\p{Sc:	_JAVA}', "");
Expect(1, 43391, '\p{^Sc:	_JAVA}', "");
Expect(1, 43391, '\P{Sc:	_JAVA}', "");
Expect(0, 43391, '\P{^Sc:	_JAVA}', "");
Error('\p{Is_Script:   	:=JAVANESE}');
Error('\P{Is_Script:   	:=JAVANESE}');
Expect(1, 43469, '\p{Is_Script=javanese}', "");
Expect(0, 43469, '\p{^Is_Script=javanese}', "");
Expect(0, 43469, '\P{Is_Script=javanese}', "");
Expect(1, 43469, '\P{^Is_Script=javanese}', "");
Expect(0, 43391, '\p{Is_Script=javanese}', "");
Expect(1, 43391, '\p{^Is_Script=javanese}', "");
Expect(1, 43391, '\P{Is_Script=javanese}', "");
Expect(0, 43391, '\P{^Is_Script=javanese}', "");
Expect(1, 43469, '\p{Is_Script= JAVANESE}', "");
Expect(0, 43469, '\p{^Is_Script= JAVANESE}', "");
Expect(0, 43469, '\P{Is_Script= JAVANESE}', "");
Expect(1, 43469, '\P{^Is_Script= JAVANESE}', "");
Expect(0, 43391, '\p{Is_Script= JAVANESE}', "");
Expect(1, 43391, '\p{^Is_Script= JAVANESE}', "");
Expect(1, 43391, '\P{Is_Script= JAVANESE}', "");
Expect(0, 43391, '\P{^Is_Script= JAVANESE}', "");
Error('\p{Is_Sc=-/a/Java}');
Error('\P{Is_Sc=-/a/Java}');
Expect(1, 43469, '\p{Is_Sc:java}', "");
Expect(0, 43469, '\p{^Is_Sc:java}', "");
Expect(0, 43469, '\P{Is_Sc:java}', "");
Expect(1, 43469, '\P{^Is_Sc:java}', "");
Expect(0, 43391, '\p{Is_Sc:java}', "");
Expect(1, 43391, '\p{^Is_Sc:java}', "");
Expect(1, 43391, '\P{Is_Sc:java}', "");
Expect(0, 43391, '\P{^Is_Sc:java}', "");
Expect(1, 43469, '\p{Is_Sc=  JAVA}', "");
Expect(0, 43469, '\p{^Is_Sc=  JAVA}', "");
Expect(0, 43469, '\P{Is_Sc=  JAVA}', "");
Expect(1, 43469, '\P{^Is_Sc=  JAVA}', "");
Expect(0, 43391, '\p{Is_Sc=  JAVA}', "");
Expect(1, 43391, '\p{^Is_Sc=  JAVA}', "");
Expect(1, 43391, '\P{Is_Sc=  JAVA}', "");
Expect(0, 43391, '\P{^Is_Sc=  JAVA}', "");
Error('\p{Script=Egyptian:=Hieroglyphs}');
Error('\P{Script=Egyptian:=Hieroglyphs}');
Expect(1, 78894, '\p{Script=egyptianhieroglyphs}', "");
Expect(0, 78894, '\p{^Script=egyptianhieroglyphs}', "");
Expect(0, 78894, '\P{Script=egyptianhieroglyphs}', "");
Expect(1, 78894, '\P{^Script=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Script=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Script=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Script=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Script=egyptianhieroglyphs}', "");
Expect(1, 78894, '\p{Script= Egyptian	Hieroglyphs}', "");
Expect(0, 78894, '\p{^Script= Egyptian	Hieroglyphs}', "");
Expect(0, 78894, '\P{Script= Egyptian	Hieroglyphs}', "");
Expect(1, 78894, '\P{^Script= Egyptian	Hieroglyphs}', "");
Expect(0, 77823, '\p{Script= Egyptian	Hieroglyphs}', "");
Expect(1, 77823, '\p{^Script= Egyptian	Hieroglyphs}', "");
Expect(1, 77823, '\P{Script= Egyptian	Hieroglyphs}', "");
Expect(0, 77823, '\P{^Script= Egyptian	Hieroglyphs}', "");
Error('\p{Sc=/a/Egyp}');
Error('\P{Sc=/a/Egyp}');
Expect(1, 78894, '\p{Sc=egyp}', "");
Expect(0, 78894, '\p{^Sc=egyp}', "");
Expect(0, 78894, '\P{Sc=egyp}', "");
Expect(1, 78894, '\P{^Sc=egyp}', "");
Expect(0, 77823, '\p{Sc=egyp}', "");
Expect(1, 77823, '\p{^Sc=egyp}', "");
Expect(1, 77823, '\P{Sc=egyp}', "");
Expect(0, 77823, '\P{^Sc=egyp}', "");
Expect(1, 78894, '\p{Sc=	EGYP}', "");
Expect(0, 78894, '\p{^Sc=	EGYP}', "");
Expect(0, 78894, '\P{Sc=	EGYP}', "");
Expect(1, 78894, '\P{^Sc=	EGYP}', "");
Expect(0, 77823, '\p{Sc=	EGYP}', "");
Expect(1, 77823, '\p{^Sc=	EGYP}', "");
Expect(1, 77823, '\P{Sc=	EGYP}', "");
Expect(0, 77823, '\P{^Sc=	EGYP}', "");
Error('\p{Is_Script:/a/  egyptian hieroglyphs}');
Error('\P{Is_Script:/a/  egyptian hieroglyphs}');
Expect(1, 78894, '\p{Is_Script=egyptianhieroglyphs}', "");
Expect(0, 78894, '\p{^Is_Script=egyptianhieroglyphs}', "");
Expect(0, 78894, '\P{Is_Script=egyptianhieroglyphs}', "");
Expect(1, 78894, '\P{^Is_Script=egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Is_Script=egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Script=egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Is_Script=egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Script=egyptianhieroglyphs}', "");
Expect(1, 78894, '\p{Is_Script=  Egyptianhieroglyphs}', "");
Expect(0, 78894, '\p{^Is_Script=  Egyptianhieroglyphs}', "");
Expect(0, 78894, '\P{Is_Script=  Egyptianhieroglyphs}', "");
Expect(1, 78894, '\P{^Is_Script=  Egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{Is_Script=  Egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^Is_Script=  Egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{Is_Script=  Egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^Is_Script=  Egyptianhieroglyphs}', "");
Error('\p{Is_Sc=_	Egyp/a/}');
Error('\P{Is_Sc=_	Egyp/a/}');
Expect(1, 78894, '\p{Is_Sc=egyp}', "");
Expect(0, 78894, '\p{^Is_Sc=egyp}', "");
Expect(0, 78894, '\P{Is_Sc=egyp}', "");
Expect(1, 78894, '\P{^Is_Sc=egyp}', "");
Expect(0, 77823, '\p{Is_Sc=egyp}', "");
Expect(1, 77823, '\p{^Is_Sc=egyp}', "");
Expect(1, 77823, '\P{Is_Sc=egyp}', "");
Expect(0, 77823, '\P{^Is_Sc=egyp}', "");
Expect(1, 78894, '\p{Is_Sc=	Egyp}', "");
Expect(0, 78894, '\p{^Is_Sc=	Egyp}', "");
Expect(0, 78894, '\P{Is_Sc=	Egyp}', "");
Expect(1, 78894, '\P{^Is_Sc=	Egyp}', "");
Expect(0, 77823, '\p{Is_Sc=	Egyp}', "");
Expect(1, 77823, '\p{^Is_Sc=	Egyp}', "");
Expect(1, 77823, '\P{Is_Sc=	Egyp}', "");
Expect(0, 77823, '\P{^Is_Sc=	Egyp}', "");
Error('\p{Script=-/a/Common}');
Error('\P{Script=-/a/Common}');
Expect(1, 64, '\p{Script=common}', "");
Expect(0, 64, '\p{^Script=common}', "");
Expect(0, 64, '\P{Script=common}', "");
Expect(1, 64, '\P{^Script=common}', "");
Expect(0, 90, '\p{Script=common}', "");
Expect(1, 90, '\p{^Script=common}', "");
Expect(1, 90, '\P{Script=common}', "");
Expect(0, 90, '\P{^Script=common}', "");
Expect(1, 64, '\p{Script= _COMMON}', "");
Expect(0, 64, '\p{^Script= _COMMON}', "");
Expect(0, 64, '\P{Script= _COMMON}', "");
Expect(1, 64, '\P{^Script= _COMMON}', "");
Expect(0, 90, '\p{Script= _COMMON}', "");
Expect(1, 90, '\p{^Script= _COMMON}', "");
Expect(1, 90, '\P{Script= _COMMON}', "");
Expect(0, 90, '\P{^Script= _COMMON}', "");
Error('\p{Sc= :=Zyyy}');
Error('\P{Sc= :=Zyyy}');
Expect(1, 64, '\p{Sc=zyyy}', "");
Expect(0, 64, '\p{^Sc=zyyy}', "");
Expect(0, 64, '\P{Sc=zyyy}', "");
Expect(1, 64, '\P{^Sc=zyyy}', "");
Expect(0, 90, '\p{Sc=zyyy}', "");
Expect(1, 90, '\p{^Sc=zyyy}', "");
Expect(1, 90, '\P{Sc=zyyy}', "");
Expect(0, 90, '\P{^Sc=zyyy}', "");
Expect(1, 64, '\p{Sc=-	Zyyy}', "");
Expect(0, 64, '\p{^Sc=-	Zyyy}', "");
Expect(0, 64, '\P{Sc=-	Zyyy}', "");
Expect(1, 64, '\P{^Sc=-	Zyyy}', "");
Expect(0, 90, '\p{Sc=-	Zyyy}', "");
Expect(1, 90, '\p{^Sc=-	Zyyy}', "");
Expect(1, 90, '\P{Sc=-	Zyyy}', "");
Expect(0, 90, '\P{^Sc=-	Zyyy}', "");
Error('\p{Is_Script=-common:=}');
Error('\P{Is_Script=-common:=}');
Expect(1, 64, '\p{Is_Script=common}', "");
Expect(0, 64, '\p{^Is_Script=common}', "");
Expect(0, 64, '\P{Is_Script=common}', "");
Expect(1, 64, '\P{^Is_Script=common}', "");
Expect(0, 90, '\p{Is_Script=common}', "");
Expect(1, 90, '\p{^Is_Script=common}', "");
Expect(1, 90, '\P{Is_Script=common}', "");
Expect(0, 90, '\P{^Is_Script=common}', "");
Expect(1, 64, '\p{Is_Script= COMMON}', "");
Expect(0, 64, '\p{^Is_Script= COMMON}', "");
Expect(0, 64, '\P{Is_Script= COMMON}', "");
Expect(1, 64, '\P{^Is_Script= COMMON}', "");
Expect(0, 90, '\p{Is_Script= COMMON}', "");
Expect(1, 90, '\p{^Is_Script= COMMON}', "");
Expect(1, 90, '\P{Is_Script= COMMON}', "");
Expect(0, 90, '\P{^Is_Script= COMMON}', "");
Error('\p{Is_Sc:   /a/_-Zyyy}');
Error('\P{Is_Sc:   /a/_-Zyyy}');
Expect(1, 64, '\p{Is_Sc=zyyy}', "");
Expect(0, 64, '\p{^Is_Sc=zyyy}', "");
Expect(0, 64, '\P{Is_Sc=zyyy}', "");
Expect(1, 64, '\P{^Is_Sc=zyyy}', "");
Expect(0, 90, '\p{Is_Sc=zyyy}', "");
Expect(1, 90, '\p{^Is_Sc=zyyy}', "");
Expect(1, 90, '\P{Is_Sc=zyyy}', "");
Expect(0, 90, '\P{^Is_Sc=zyyy}', "");
Expect(1, 64, '\p{Is_Sc= 	Zyyy}', "");
Expect(0, 64, '\p{^Is_Sc= 	Zyyy}', "");
Expect(0, 64, '\P{Is_Sc= 	Zyyy}', "");
Expect(1, 64, '\P{^Is_Sc= 	Zyyy}', "");
Expect(0, 90, '\p{Is_Sc= 	Zyyy}', "");
Expect(1, 90, '\p{^Is_Sc= 	Zyyy}', "");
Expect(1, 90, '\P{Is_Sc= 	Zyyy}', "");
Expect(0, 90, '\P{^Is_Sc= 	Zyyy}', "");
Error('\p{Script=:=	_latin}');
Error('\P{Script=:=	_latin}');
Expect(1, 90, '\p{Script=latin}', "");
Expect(0, 90, '\p{^Script=latin}', "");
Expect(0, 90, '\P{Script=latin}', "");
Expect(1, 90, '\P{^Script=latin}', "");
Expect(0, 64, '\p{Script=latin}', "");
Expect(1, 64, '\p{^Script=latin}', "");
Expect(1, 64, '\P{Script=latin}', "");
Expect(0, 64, '\P{^Script=latin}', "");
Expect(1, 90, '\p{Script=__latin}', "");
Expect(0, 90, '\p{^Script=__latin}', "");
Expect(0, 90, '\P{Script=__latin}', "");
Expect(1, 90, '\P{^Script=__latin}', "");
Expect(0, 64, '\p{Script=__latin}', "");
Expect(1, 64, '\p{^Script=__latin}', "");
Expect(1, 64, '\P{Script=__latin}', "");
Expect(0, 64, '\P{^Script=__latin}', "");
Error('\p{Sc=	/a/Latn}');
Error('\P{Sc=	/a/Latn}');
Expect(1, 90, '\p{Sc=latn}', "");
Expect(0, 90, '\p{^Sc=latn}', "");
Expect(0, 90, '\P{Sc=latn}', "");
Expect(1, 90, '\P{^Sc=latn}', "");
Expect(0, 64, '\p{Sc=latn}', "");
Expect(1, 64, '\p{^Sc=latn}', "");
Expect(1, 64, '\P{Sc=latn}', "");
Expect(0, 64, '\P{^Sc=latn}', "");
Expect(1, 90, '\p{Sc=_-Latn}', "");
Expect(0, 90, '\p{^Sc=_-Latn}', "");
Expect(0, 90, '\P{Sc=_-Latn}', "");
Expect(1, 90, '\P{^Sc=_-Latn}', "");
Expect(0, 64, '\p{Sc=_-Latn}', "");
Expect(1, 64, '\p{^Sc=_-Latn}', "");
Expect(1, 64, '\P{Sc=_-Latn}', "");
Expect(0, 64, '\P{^Sc=_-Latn}', "");
Error('\p{Is_Script=-_latin:=}');
Error('\P{Is_Script=-_latin:=}');
Expect(1, 90, '\p{Is_Script=latin}', "");
Expect(0, 90, '\p{^Is_Script=latin}', "");
Expect(0, 90, '\P{Is_Script=latin}', "");
Expect(1, 90, '\P{^Is_Script=latin}', "");
Expect(0, 64, '\p{Is_Script=latin}', "");
Expect(1, 64, '\p{^Is_Script=latin}', "");
Expect(1, 64, '\P{Is_Script=latin}', "");
Expect(0, 64, '\P{^Is_Script=latin}', "");
Expect(1, 90, '\p{Is_Script=	LATIN}', "");
Expect(0, 90, '\p{^Is_Script=	LATIN}', "");
Expect(0, 90, '\P{Is_Script=	LATIN}', "");
Expect(1, 90, '\P{^Is_Script=	LATIN}', "");
Expect(0, 64, '\p{Is_Script=	LATIN}', "");
Expect(1, 64, '\p{^Is_Script=	LATIN}', "");
Expect(1, 64, '\P{Is_Script=	LATIN}', "");
Expect(0, 64, '\P{^Is_Script=	LATIN}', "");
Error('\p{Is_Sc=		latn:=}');
Error('\P{Is_Sc=		latn:=}');
Expect(1, 90, '\p{Is_Sc=latn}', "");
Expect(0, 90, '\p{^Is_Sc=latn}', "");
Expect(0, 90, '\P{Is_Sc=latn}', "");
Expect(1, 90, '\P{^Is_Sc=latn}', "");
Expect(0, 64, '\p{Is_Sc=latn}', "");
Expect(1, 64, '\p{^Is_Sc=latn}', "");
Expect(1, 64, '\P{Is_Sc=latn}', "");
Expect(0, 64, '\P{^Is_Sc=latn}', "");
Expect(1, 90, '\p{Is_Sc:_latn}', "");
Expect(0, 90, '\p{^Is_Sc:_latn}', "");
Expect(0, 90, '\P{Is_Sc:_latn}', "");
Expect(1, 90, '\P{^Is_Sc:_latn}', "");
Expect(0, 64, '\p{Is_Sc:_latn}', "");
Expect(1, 64, '\p{^Is_Sc:_latn}', "");
Expect(1, 64, '\P{Is_Sc:_latn}', "");
Expect(0, 64, '\P{^Is_Sc:_latn}', "");
Error('\p{Script=:=-Ethiopic}');
Error('\P{Script=:=-Ethiopic}');
Expect(1, 4680, '\p{Script=ethiopic}', "");
Expect(0, 4680, '\p{^Script=ethiopic}', "");
Expect(0, 4680, '\P{Script=ethiopic}', "");
Expect(1, 4680, '\P{^Script=ethiopic}', "");
Expect(0, 4607, '\p{Script=ethiopic}', "");
Expect(1, 4607, '\p{^Script=ethiopic}', "");
Expect(1, 4607, '\P{Script=ethiopic}', "");
Expect(0, 4607, '\P{^Script=ethiopic}', "");
Expect(1, 4680, '\p{Script= -Ethiopic}', "");
Expect(0, 4680, '\p{^Script= -Ethiopic}', "");
Expect(0, 4680, '\P{Script= -Ethiopic}', "");
Expect(1, 4680, '\P{^Script= -Ethiopic}', "");
Expect(0, 4607, '\p{Script= -Ethiopic}', "");
Expect(1, 4607, '\p{^Script= -Ethiopic}', "");
Expect(1, 4607, '\P{Script= -Ethiopic}', "");
Expect(0, 4607, '\P{^Script= -Ethiopic}', "");
Error('\p{Sc=/a/		Ethi}');
Error('\P{Sc=/a/		Ethi}');
Expect(1, 4680, '\p{Sc=ethi}', "");
Expect(0, 4680, '\p{^Sc=ethi}', "");
Expect(0, 4680, '\P{Sc=ethi}', "");
Expect(1, 4680, '\P{^Sc=ethi}', "");
Expect(0, 4607, '\p{Sc=ethi}', "");
Expect(1, 4607, '\p{^Sc=ethi}', "");
Expect(1, 4607, '\P{Sc=ethi}', "");
Expect(0, 4607, '\P{^Sc=ethi}', "");
Expect(1, 4680, '\p{Sc=__ethi}', "");
Expect(0, 4680, '\p{^Sc=__ethi}', "");
Expect(0, 4680, '\P{Sc=__ethi}', "");
Expect(1, 4680, '\P{^Sc=__ethi}', "");
Expect(0, 4607, '\p{Sc=__ethi}', "");
Expect(1, 4607, '\p{^Sc=__ethi}', "");
Expect(1, 4607, '\P{Sc=__ethi}', "");
Expect(0, 4607, '\P{^Sc=__ethi}', "");
Error('\p{Is_Script=  ETHIOPIC:=}');
Error('\P{Is_Script=  ETHIOPIC:=}');
Expect(1, 4680, '\p{Is_Script=ethiopic}', "");
Expect(0, 4680, '\p{^Is_Script=ethiopic}', "");
Expect(0, 4680, '\P{Is_Script=ethiopic}', "");
Expect(1, 4680, '\P{^Is_Script=ethiopic}', "");
Expect(0, 4607, '\p{Is_Script=ethiopic}', "");
Expect(1, 4607, '\p{^Is_Script=ethiopic}', "");
Expect(1, 4607, '\P{Is_Script=ethiopic}', "");
Expect(0, 4607, '\P{^Is_Script=ethiopic}', "");
Expect(1, 4680, '\p{Is_Script=		ETHIOPIC}', "");
Expect(0, 4680, '\p{^Is_Script=		ETHIOPIC}', "");
Expect(0, 4680, '\P{Is_Script=		ETHIOPIC}', "");
Expect(1, 4680, '\P{^Is_Script=		ETHIOPIC}', "");
Expect(0, 4607, '\p{Is_Script=		ETHIOPIC}', "");
Expect(1, 4607, '\p{^Is_Script=		ETHIOPIC}', "");
Expect(1, 4607, '\P{Is_Script=		ETHIOPIC}', "");
Expect(0, 4607, '\P{^Is_Script=		ETHIOPIC}', "");
Error('\p{Is_Sc=- ETHI/a/}');
Error('\P{Is_Sc=- ETHI/a/}');
Expect(1, 4680, '\p{Is_Sc=ethi}', "");
Expect(0, 4680, '\p{^Is_Sc=ethi}', "");
Expect(0, 4680, '\P{Is_Sc=ethi}', "");
Expect(1, 4680, '\P{^Is_Sc=ethi}', "");
Expect(0, 4607, '\p{Is_Sc=ethi}', "");
Expect(1, 4607, '\p{^Is_Sc=ethi}', "");
Expect(1, 4607, '\P{Is_Sc=ethi}', "");
Expect(0, 4607, '\P{^Is_Sc=ethi}', "");
Expect(1, 4680, '\p{Is_Sc= ETHI}', "");
Expect(0, 4680, '\p{^Is_Sc= ETHI}', "");
Expect(0, 4680, '\P{Is_Sc= ETHI}', "");
Expect(1, 4680, '\P{^Is_Sc= ETHI}', "");
Expect(0, 4607, '\p{Is_Sc= ETHI}', "");
Expect(1, 4607, '\p{^Is_Sc= ETHI}', "");
Expect(1, 4607, '\P{Is_Sc= ETHI}', "");
Expect(0, 4607, '\P{^Is_Sc= ETHI}', "");
Error('\p{Script:hebrew/a/}');
Error('\P{Script:hebrew/a/}');
Expect(1, 1479, '\p{Script=hebrew}', "");
Expect(0, 1479, '\p{^Script=hebrew}', "");
Expect(0, 1479, '\P{Script=hebrew}', "");
Expect(1, 1479, '\P{^Script=hebrew}', "");
Expect(0, 1424, '\p{Script=hebrew}', "");
Expect(1, 1424, '\p{^Script=hebrew}', "");
Expect(1, 1424, '\P{Script=hebrew}', "");
Expect(0, 1424, '\P{^Script=hebrew}', "");
Expect(1, 1479, '\p{Script=HEBREW}', "");
Expect(0, 1479, '\p{^Script=HEBREW}', "");
Expect(0, 1479, '\P{Script=HEBREW}', "");
Expect(1, 1479, '\P{^Script=HEBREW}', "");
Expect(0, 1424, '\p{Script=HEBREW}', "");
Expect(1, 1424, '\p{^Script=HEBREW}', "");
Expect(1, 1424, '\P{Script=HEBREW}', "");
Expect(0, 1424, '\P{^Script=HEBREW}', "");
Error('\p{Sc:   /a/Hebr}');
Error('\P{Sc:   /a/Hebr}');
Expect(1, 1479, '\p{Sc=hebr}', "");
Expect(0, 1479, '\p{^Sc=hebr}', "");
Expect(0, 1479, '\P{Sc=hebr}', "");
Expect(1, 1479, '\P{^Sc=hebr}', "");
Expect(0, 1424, '\p{Sc=hebr}', "");
Expect(1, 1424, '\p{^Sc=hebr}', "");
Expect(1, 1424, '\P{Sc=hebr}', "");
Expect(0, 1424, '\P{^Sc=hebr}', "");
Expect(1, 1479, '\p{Sc=_-hebr}', "");
Expect(0, 1479, '\p{^Sc=_-hebr}', "");
Expect(0, 1479, '\P{Sc=_-hebr}', "");
Expect(1, 1479, '\P{^Sc=_-hebr}', "");
Expect(0, 1424, '\p{Sc=_-hebr}', "");
Expect(1, 1424, '\p{^Sc=_-hebr}', "");
Expect(1, 1424, '\P{Sc=_-hebr}', "");
Expect(0, 1424, '\P{^Sc=_-hebr}', "");
Error('\p{Is_Script=/a/  HEBREW}');
Error('\P{Is_Script=/a/  HEBREW}');
Expect(1, 1479, '\p{Is_Script:hebrew}', "");
Expect(0, 1479, '\p{^Is_Script:hebrew}', "");
Expect(0, 1479, '\P{Is_Script:hebrew}', "");
Expect(1, 1479, '\P{^Is_Script:hebrew}', "");
Expect(0, 1424, '\p{Is_Script:hebrew}', "");
Expect(1, 1424, '\p{^Is_Script:hebrew}', "");
Expect(1, 1424, '\P{Is_Script:hebrew}', "");
Expect(0, 1424, '\P{^Is_Script:hebrew}', "");
Expect(1, 1479, '\p{Is_Script=-hebrew}', "");
Expect(0, 1479, '\p{^Is_Script=-hebrew}', "");
Expect(0, 1479, '\P{Is_Script=-hebrew}', "");
Expect(1, 1479, '\P{^Is_Script=-hebrew}', "");
Expect(0, 1424, '\p{Is_Script=-hebrew}', "");
Expect(1, 1424, '\p{^Is_Script=-hebrew}', "");
Expect(1, 1424, '\P{Is_Script=-hebrew}', "");
Expect(0, 1424, '\P{^Is_Script=-hebrew}', "");
Error('\p{Is_Sc=_ HEBR:=}');
Error('\P{Is_Sc=_ HEBR:=}');
Expect(1, 1479, '\p{Is_Sc=hebr}', "");
Expect(0, 1479, '\p{^Is_Sc=hebr}', "");
Expect(0, 1479, '\P{Is_Sc=hebr}', "");
Expect(1, 1479, '\P{^Is_Sc=hebr}', "");
Expect(0, 1424, '\p{Is_Sc=hebr}', "");
Expect(1, 1424, '\p{^Is_Sc=hebr}', "");
Expect(1, 1424, '\P{Is_Sc=hebr}', "");
Expect(0, 1424, '\P{^Is_Sc=hebr}', "");
Expect(1, 1479, '\p{Is_Sc=	Hebr}', "");
Expect(0, 1479, '\p{^Is_Sc=	Hebr}', "");
Expect(0, 1479, '\P{Is_Sc=	Hebr}', "");
Expect(1, 1479, '\P{^Is_Sc=	Hebr}', "");
Expect(0, 1424, '\p{Is_Sc=	Hebr}', "");
Expect(1, 1424, '\p{^Is_Sc=	Hebr}', "");
Expect(1, 1424, '\P{Is_Sc=	Hebr}', "");
Expect(0, 1424, '\P{^Is_Sc=	Hebr}', "");
Error('\p{Script=:=  buginese}');
Error('\P{Script=:=  buginese}');
Expect(1, 6683, '\p{Script=buginese}', "");
Expect(0, 6683, '\p{^Script=buginese}', "");
Expect(0, 6683, '\P{Script=buginese}', "");
Expect(1, 6683, '\P{^Script=buginese}', "");
Expect(0, 6655, '\p{Script=buginese}', "");
Expect(1, 6655, '\p{^Script=buginese}', "");
Expect(1, 6655, '\P{Script=buginese}', "");
Expect(0, 6655, '\P{^Script=buginese}', "");
Expect(1, 6683, '\p{Script=_Buginese}', "");
Expect(0, 6683, '\p{^Script=_Buginese}', "");
Expect(0, 6683, '\P{Script=_Buginese}', "");
Expect(1, 6683, '\P{^Script=_Buginese}', "");
Expect(0, 6655, '\p{Script=_Buginese}', "");
Expect(1, 6655, '\p{^Script=_Buginese}', "");
Expect(1, 6655, '\P{Script=_Buginese}', "");
Expect(0, 6655, '\P{^Script=_Buginese}', "");
Error('\p{Sc= 	bugi/a/}');
Error('\P{Sc= 	bugi/a/}');
Expect(1, 6683, '\p{Sc=bugi}', "");
Expect(0, 6683, '\p{^Sc=bugi}', "");
Expect(0, 6683, '\P{Sc=bugi}', "");
Expect(1, 6683, '\P{^Sc=bugi}', "");
Expect(0, 6655, '\p{Sc=bugi}', "");
Expect(1, 6655, '\p{^Sc=bugi}', "");
Expect(1, 6655, '\P{Sc=bugi}', "");
Expect(0, 6655, '\P{^Sc=bugi}', "");
Expect(1, 6683, '\p{Sc=-bugi}', "");
Expect(0, 6683, '\p{^Sc=-bugi}', "");
Expect(0, 6683, '\P{Sc=-bugi}', "");
Expect(1, 6683, '\P{^Sc=-bugi}', "");
Expect(0, 6655, '\p{Sc=-bugi}', "");
Expect(1, 6655, '\p{^Sc=-bugi}', "");
Expect(1, 6655, '\P{Sc=-bugi}', "");
Expect(0, 6655, '\P{^Sc=-bugi}', "");
Error('\p{Is_Script=:=-	buginese}');
Error('\P{Is_Script=:=-	buginese}');
Expect(1, 6683, '\p{Is_Script:	buginese}', "");
Expect(0, 6683, '\p{^Is_Script:	buginese}', "");
Expect(0, 6683, '\P{Is_Script:	buginese}', "");
Expect(1, 6683, '\P{^Is_Script:	buginese}', "");
Expect(0, 6655, '\p{Is_Script:	buginese}', "");
Expect(1, 6655, '\p{^Is_Script:	buginese}', "");
Expect(1, 6655, '\P{Is_Script:	buginese}', "");
Expect(0, 6655, '\P{^Is_Script:	buginese}', "");
Expect(1, 6683, '\p{Is_Script:	_Buginese}', "");
Expect(0, 6683, '\p{^Is_Script:	_Buginese}', "");
Expect(0, 6683, '\P{Is_Script:	_Buginese}', "");
Expect(1, 6683, '\P{^Is_Script:	_Buginese}', "");
Expect(0, 6655, '\p{Is_Script:	_Buginese}', "");
Expect(1, 6655, '\p{^Is_Script:	_Buginese}', "");
Expect(1, 6655, '\P{Is_Script:	_Buginese}', "");
Expect(0, 6655, '\P{^Is_Script:	_Buginese}', "");
Error('\p{Is_Sc= 	Bugi:=}');
Error('\P{Is_Sc= 	Bugi:=}');
Expect(1, 6683, '\p{Is_Sc=bugi}', "");
Expect(0, 6683, '\p{^Is_Sc=bugi}', "");
Expect(0, 6683, '\P{Is_Sc=bugi}', "");
Expect(1, 6683, '\P{^Is_Sc=bugi}', "");
Expect(0, 6655, '\p{Is_Sc=bugi}', "");
Expect(1, 6655, '\p{^Is_Sc=bugi}', "");
Expect(1, 6655, '\P{Is_Sc=bugi}', "");
Expect(0, 6655, '\P{^Is_Sc=bugi}', "");
Expect(1, 6683, '\p{Is_Sc=-Bugi}', "");
Expect(0, 6683, '\p{^Is_Sc=-Bugi}', "");
Expect(0, 6683, '\P{Is_Sc=-Bugi}', "");
Expect(1, 6683, '\P{^Is_Sc=-Bugi}', "");
Expect(0, 6655, '\p{Is_Sc=-Bugi}', "");
Expect(1, 6655, '\p{^Is_Sc=-Bugi}', "");
Expect(1, 6655, '\P{Is_Sc=-Bugi}', "");
Expect(0, 6655, '\P{^Is_Sc=-Bugi}', "");
Error('\p{Script=	 INSCRIPTIONAL_pahlavi/a/}');
Error('\P{Script=	 INSCRIPTIONAL_pahlavi/a/}');
Expect(1, 68466, '\p{Script=inscriptionalpahlavi}', "");
Expect(0, 68466, '\p{^Script=inscriptionalpahlavi}', "");
Expect(0, 68466, '\P{Script=inscriptionalpahlavi}', "");
Expect(1, 68466, '\P{^Script=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Script=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Script=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Script=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Script=inscriptionalpahlavi}', "");
Expect(1, 68466, '\p{Script=_Inscriptional-PAHLAVI}', "");
Expect(0, 68466, '\p{^Script=_Inscriptional-PAHLAVI}', "");
Expect(0, 68466, '\P{Script=_Inscriptional-PAHLAVI}', "");
Expect(1, 68466, '\P{^Script=_Inscriptional-PAHLAVI}', "");
Expect(0, 68447, '\p{Script=_Inscriptional-PAHLAVI}', "");
Expect(1, 68447, '\p{^Script=_Inscriptional-PAHLAVI}', "");
Expect(1, 68447, '\P{Script=_Inscriptional-PAHLAVI}', "");
Expect(0, 68447, '\P{^Script=_Inscriptional-PAHLAVI}', "");
Error('\p{Sc= _Phli/a/}');
Error('\P{Sc= _Phli/a/}');
Expect(1, 68466, '\p{Sc=phli}', "");
Expect(0, 68466, '\p{^Sc=phli}', "");
Expect(0, 68466, '\P{Sc=phli}', "");
Expect(1, 68466, '\P{^Sc=phli}', "");
Expect(0, 68447, '\p{Sc=phli}', "");
Expect(1, 68447, '\p{^Sc=phli}', "");
Expect(1, 68447, '\P{Sc=phli}', "");
Expect(0, 68447, '\P{^Sc=phli}', "");
Expect(1, 68466, '\p{Sc= 	phli}', "");
Expect(0, 68466, '\p{^Sc= 	phli}', "");
Expect(0, 68466, '\P{Sc= 	phli}', "");
Expect(1, 68466, '\P{^Sc= 	phli}', "");
Expect(0, 68447, '\p{Sc= 	phli}', "");
Expect(1, 68447, '\p{^Sc= 	phli}', "");
Expect(1, 68447, '\P{Sc= 	phli}', "");
Expect(0, 68447, '\P{^Sc= 	phli}', "");
Error('\p{Is_Script=:=	InscriptionalPahlavi}');
Error('\P{Is_Script=:=	InscriptionalPahlavi}');
Expect(1, 68466, '\p{Is_Script=inscriptionalpahlavi}', "");
Expect(0, 68466, '\p{^Is_Script=inscriptionalpahlavi}', "");
Expect(0, 68466, '\P{Is_Script=inscriptionalpahlavi}', "");
Expect(1, 68466, '\P{^Is_Script=inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{Is_Script=inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^Is_Script=inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{Is_Script=inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^Is_Script=inscriptionalpahlavi}', "");
Expect(1, 68466, '\p{Is_Script=__Inscriptional	PAHLAVI}', "");
Expect(0, 68466, '\p{^Is_Script=__Inscriptional	PAHLAVI}', "");
Expect(0, 68466, '\P{Is_Script=__Inscriptional	PAHLAVI}', "");
Expect(1, 68466, '\P{^Is_Script=__Inscriptional	PAHLAVI}', "");
Expect(0, 68447, '\p{Is_Script=__Inscriptional	PAHLAVI}', "");
Expect(1, 68447, '\p{^Is_Script=__Inscriptional	PAHLAVI}', "");
Expect(1, 68447, '\P{Is_Script=__Inscriptional	PAHLAVI}', "");
Expect(0, 68447, '\P{^Is_Script=__Inscriptional	PAHLAVI}', "");
Error('\p{Is_Sc=	-Phli:=}');
Error('\P{Is_Sc=	-Phli:=}');
Expect(1, 68466, '\p{Is_Sc=phli}', "");
Expect(0, 68466, '\p{^Is_Sc=phli}', "");
Expect(0, 68466, '\P{Is_Sc=phli}', "");
Expect(1, 68466, '\P{^Is_Sc=phli}', "");
Expect(0, 68447, '\p{Is_Sc=phli}', "");
Expect(1, 68447, '\p{^Is_Sc=phli}', "");
Expect(1, 68447, '\P{Is_Sc=phli}', "");
Expect(0, 68447, '\P{^Is_Sc=phli}', "");
Expect(1, 68466, '\p{Is_Sc=	PHLI}', "");
Expect(0, 68466, '\p{^Is_Sc=	PHLI}', "");
Expect(0, 68466, '\P{Is_Sc=	PHLI}', "");
Expect(1, 68466, '\P{^Is_Sc=	PHLI}', "");
Expect(0, 68447, '\p{Is_Sc=	PHLI}', "");
Expect(1, 68447, '\p{^Is_Sc=	PHLI}', "");
Expect(1, 68447, '\P{Is_Sc=	PHLI}', "");
Expect(0, 68447, '\P{^Is_Sc=	PHLI}', "");
Error('\p{Script=  Tai:=Tham}');
Error('\P{Script=  Tai:=Tham}');
Expect(1, 6750, '\p{Script=taitham}', "");
Expect(0, 6750, '\p{^Script=taitham}', "");
Expect(0, 6750, '\P{Script=taitham}', "");
Expect(1, 6750, '\P{^Script=taitham}', "");
Expect(0, 6687, '\p{Script=taitham}', "");
Expect(1, 6687, '\p{^Script=taitham}', "");
Expect(1, 6687, '\P{Script=taitham}', "");
Expect(0, 6687, '\P{^Script=taitham}', "");
Expect(1, 6750, '\p{Script=-	tai-Tham}', "");
Expect(0, 6750, '\p{^Script=-	tai-Tham}', "");
Expect(0, 6750, '\P{Script=-	tai-Tham}', "");
Expect(1, 6750, '\P{^Script=-	tai-Tham}', "");
Expect(0, 6687, '\p{Script=-	tai-Tham}', "");
Expect(1, 6687, '\p{^Script=-	tai-Tham}', "");
Expect(1, 6687, '\P{Script=-	tai-Tham}', "");
Expect(0, 6687, '\P{^Script=-	tai-Tham}', "");
Error('\p{Sc=_ Lana/a/}');
Error('\P{Sc=_ Lana/a/}');
Expect(1, 6750, '\p{Sc:   lana}', "");
Expect(0, 6750, '\p{^Sc:   lana}', "");
Expect(0, 6750, '\P{Sc:   lana}', "");
Expect(1, 6750, '\P{^Sc:   lana}', "");
Expect(0, 6687, '\p{Sc:   lana}', "");
Expect(1, 6687, '\p{^Sc:   lana}', "");
Expect(1, 6687, '\P{Sc:   lana}', "");
Expect(0, 6687, '\P{^Sc:   lana}', "");
Expect(1, 6750, '\p{Sc=-_Lana}', "");
Expect(0, 6750, '\p{^Sc=-_Lana}', "");
Expect(0, 6750, '\P{Sc=-_Lana}', "");
Expect(1, 6750, '\P{^Sc=-_Lana}', "");
Expect(0, 6687, '\p{Sc=-_Lana}', "");
Expect(1, 6687, '\p{^Sc=-_Lana}', "");
Expect(1, 6687, '\P{Sc=-_Lana}', "");
Expect(0, 6687, '\P{^Sc=-_Lana}', "");
Error('\p{Is_Script=--Tai:=Tham}');
Error('\P{Is_Script=--Tai:=Tham}');
Expect(1, 6750, '\p{Is_Script=taitham}', "");
Expect(0, 6750, '\p{^Is_Script=taitham}', "");
Expect(0, 6750, '\P{Is_Script=taitham}', "");
Expect(1, 6750, '\P{^Is_Script=taitham}', "");
Expect(0, 6687, '\p{Is_Script=taitham}', "");
Expect(1, 6687, '\p{^Is_Script=taitham}', "");
Expect(1, 6687, '\P{Is_Script=taitham}', "");
Expect(0, 6687, '\P{^Is_Script=taitham}', "");
Expect(1, 6750, '\p{Is_Script=	-taitham}', "");
Expect(0, 6750, '\p{^Is_Script=	-taitham}', "");
Expect(0, 6750, '\P{Is_Script=	-taitham}', "");
Expect(1, 6750, '\P{^Is_Script=	-taitham}', "");
Expect(0, 6687, '\p{Is_Script=	-taitham}', "");
Expect(1, 6687, '\p{^Is_Script=	-taitham}', "");
Expect(1, 6687, '\P{Is_Script=	-taitham}', "");
Expect(0, 6687, '\P{^Is_Script=	-taitham}', "");
Error('\p{Is_Sc= 	Lana:=}');
Error('\P{Is_Sc= 	Lana:=}');
Expect(1, 6750, '\p{Is_Sc=lana}', "");
Expect(0, 6750, '\p{^Is_Sc=lana}', "");
Expect(0, 6750, '\P{Is_Sc=lana}', "");
Expect(1, 6750, '\P{^Is_Sc=lana}', "");
Expect(0, 6687, '\p{Is_Sc=lana}', "");
Expect(1, 6687, '\p{^Is_Sc=lana}', "");
Expect(1, 6687, '\P{Is_Sc=lana}', "");
Expect(0, 6687, '\P{^Is_Sc=lana}', "");
Expect(1, 6750, '\p{Is_Sc: _-Lana}', "");
Expect(0, 6750, '\p{^Is_Sc: _-Lana}', "");
Expect(0, 6750, '\P{Is_Sc: _-Lana}', "");
Expect(1, 6750, '\P{^Is_Sc: _-Lana}', "");
Expect(0, 6687, '\p{Is_Sc: _-Lana}', "");
Expect(1, 6687, '\p{^Is_Sc: _-Lana}', "");
Expect(1, 6687, '\P{Is_Sc: _-Lana}', "");
Expect(0, 6687, '\P{^Is_Sc: _-Lana}', "");
Error('\p{Script=/a/gurmukhi}');
Error('\P{Script=/a/gurmukhi}');
Expect(1, 2563, '\p{Script=gurmukhi}', "");
Expect(0, 2563, '\p{^Script=gurmukhi}', "");
Expect(0, 2563, '\P{Script=gurmukhi}', "");
Expect(1, 2563, '\P{^Script=gurmukhi}', "");
Expect(0, 2560, '\p{Script=gurmukhi}', "");
Expect(1, 2560, '\p{^Script=gurmukhi}', "");
Expect(1, 2560, '\P{Script=gurmukhi}', "");
Expect(0, 2560, '\P{^Script=gurmukhi}', "");
Expect(1, 2563, '\p{Script= -GURMUKHI}', "");
Expect(0, 2563, '\p{^Script= -GURMUKHI}', "");
Expect(0, 2563, '\P{Script= -GURMUKHI}', "");
Expect(1, 2563, '\P{^Script= -GURMUKHI}', "");
Expect(0, 2560, '\p{Script= -GURMUKHI}', "");
Expect(1, 2560, '\p{^Script= -GURMUKHI}', "");
Expect(1, 2560, '\P{Script= -GURMUKHI}', "");
Expect(0, 2560, '\P{^Script= -GURMUKHI}', "");
Error('\p{Sc=_:=Guru}');
Error('\P{Sc=_:=Guru}');
Expect(1, 2563, '\p{Sc=guru}', "");
Expect(0, 2563, '\p{^Sc=guru}', "");
Expect(0, 2563, '\P{Sc=guru}', "");
Expect(1, 2563, '\P{^Sc=guru}', "");
Expect(0, 2560, '\p{Sc=guru}', "");
Expect(1, 2560, '\p{^Sc=guru}', "");
Expect(1, 2560, '\P{Sc=guru}', "");
Expect(0, 2560, '\P{^Sc=guru}', "");
Expect(1, 2563, '\p{Sc=  guru}', "");
Expect(0, 2563, '\p{^Sc=  guru}', "");
Expect(0, 2563, '\P{Sc=  guru}', "");
Expect(1, 2563, '\P{^Sc=  guru}', "");
Expect(0, 2560, '\p{Sc=  guru}', "");
Expect(1, 2560, '\p{^Sc=  guru}', "");
Expect(1, 2560, '\P{Sc=  guru}', "");
Expect(0, 2560, '\P{^Sc=  guru}', "");
Error('\p{Is_Script=-_Gurmukhi:=}');
Error('\P{Is_Script=-_Gurmukhi:=}');
Expect(1, 2563, '\p{Is_Script=gurmukhi}', "");
Expect(0, 2563, '\p{^Is_Script=gurmukhi}', "");
Expect(0, 2563, '\P{Is_Script=gurmukhi}', "");
Expect(1, 2563, '\P{^Is_Script=gurmukhi}', "");
Expect(0, 2560, '\p{Is_Script=gurmukhi}', "");
Expect(1, 2560, '\p{^Is_Script=gurmukhi}', "");
Expect(1, 2560, '\P{Is_Script=gurmukhi}', "");
Expect(0, 2560, '\P{^Is_Script=gurmukhi}', "");
Expect(1, 2563, '\p{Is_Script= Gurmukhi}', "");
Expect(0, 2563, '\p{^Is_Script= Gurmukhi}', "");
Expect(0, 2563, '\P{Is_Script= Gurmukhi}', "");
Expect(1, 2563, '\P{^Is_Script= Gurmukhi}', "");
Expect(0, 2560, '\p{Is_Script= Gurmukhi}', "");
Expect(1, 2560, '\p{^Is_Script= Gurmukhi}', "");
Expect(1, 2560, '\P{Is_Script= Gurmukhi}', "");
Expect(0, 2560, '\P{^Is_Script= Gurmukhi}', "");
Error('\p{Is_Sc=_guru/a/}');
Error('\P{Is_Sc=_guru/a/}');
Expect(1, 2563, '\p{Is_Sc=guru}', "");
Expect(0, 2563, '\p{^Is_Sc=guru}', "");
Expect(0, 2563, '\P{Is_Sc=guru}', "");
Expect(1, 2563, '\P{^Is_Sc=guru}', "");
Expect(0, 2560, '\p{Is_Sc=guru}', "");
Expect(1, 2560, '\p{^Is_Sc=guru}', "");
Expect(1, 2560, '\P{Is_Sc=guru}', "");
Expect(0, 2560, '\P{^Is_Sc=guru}', "");
Expect(1, 2563, '\p{Is_Sc=	Guru}', "");
Expect(0, 2563, '\p{^Is_Sc=	Guru}', "");
Expect(0, 2563, '\P{Is_Sc=	Guru}', "");
Expect(1, 2563, '\P{^Is_Sc=	Guru}', "");
Expect(0, 2560, '\p{Is_Sc=	Guru}', "");
Expect(1, 2560, '\p{^Is_Sc=	Guru}', "");
Expect(1, 2560, '\P{Is_Sc=	Guru}', "");
Expect(0, 2560, '\P{^Is_Sc=	Guru}', "");
Error('\p{Script=	/a/cypriot}');
Error('\P{Script=	/a/cypriot}');
Expect(1, 67589, '\p{Script=cypriot}', "");
Expect(0, 67589, '\p{^Script=cypriot}', "");
Expect(0, 67589, '\P{Script=cypriot}', "");
Expect(1, 67589, '\P{^Script=cypriot}', "");
Expect(0, 67583, '\p{Script=cypriot}', "");
Expect(1, 67583, '\p{^Script=cypriot}', "");
Expect(1, 67583, '\P{Script=cypriot}', "");
Expect(0, 67583, '\P{^Script=cypriot}', "");
Expect(1, 67589, '\p{Script=	Cypriot}', "");
Expect(0, 67589, '\p{^Script=	Cypriot}', "");
Expect(0, 67589, '\P{Script=	Cypriot}', "");
Expect(1, 67589, '\P{^Script=	Cypriot}', "");
Expect(0, 67583, '\p{Script=	Cypriot}', "");
Expect(1, 67583, '\p{^Script=	Cypriot}', "");
Expect(1, 67583, '\P{Script=	Cypriot}', "");
Expect(0, 67583, '\P{^Script=	Cypriot}', "");
Error('\p{Sc:/a/_cprt}');
Error('\P{Sc:/a/_cprt}');
Expect(1, 67589, '\p{Sc=cprt}', "");
Expect(0, 67589, '\p{^Sc=cprt}', "");
Expect(0, 67589, '\P{Sc=cprt}', "");
Expect(1, 67589, '\P{^Sc=cprt}', "");
Expect(0, 67583, '\p{Sc=cprt}', "");
Expect(1, 67583, '\p{^Sc=cprt}', "");
Expect(1, 67583, '\P{Sc=cprt}', "");
Expect(0, 67583, '\P{^Sc=cprt}', "");
Expect(1, 67589, '\p{Sc= CPRT}', "");
Expect(0, 67589, '\p{^Sc= CPRT}', "");
Expect(0, 67589, '\P{Sc= CPRT}', "");
Expect(1, 67589, '\P{^Sc= CPRT}', "");
Expect(0, 67583, '\p{Sc= CPRT}', "");
Expect(1, 67583, '\p{^Sc= CPRT}', "");
Expect(1, 67583, '\P{Sc= CPRT}', "");
Expect(0, 67583, '\P{^Sc= CPRT}', "");
Error('\p{Is_Script= _cypriot:=}');
Error('\P{Is_Script= _cypriot:=}');
Expect(1, 67589, '\p{Is_Script=cypriot}', "");
Expect(0, 67589, '\p{^Is_Script=cypriot}', "");
Expect(0, 67589, '\P{Is_Script=cypriot}', "");
Expect(1, 67589, '\P{^Is_Script=cypriot}', "");
Expect(0, 67583, '\p{Is_Script=cypriot}', "");
Expect(1, 67583, '\p{^Is_Script=cypriot}', "");
Expect(1, 67583, '\P{Is_Script=cypriot}', "");
Expect(0, 67583, '\P{^Is_Script=cypriot}', "");
Expect(1, 67589, '\p{Is_Script=_Cypriot}', "");
Expect(0, 67589, '\p{^Is_Script=_Cypriot}', "");
Expect(0, 67589, '\P{Is_Script=_Cypriot}', "");
Expect(1, 67589, '\P{^Is_Script=_Cypriot}', "");
Expect(0, 67583, '\p{Is_Script=_Cypriot}', "");
Expect(1, 67583, '\p{^Is_Script=_Cypriot}', "");
Expect(1, 67583, '\P{Is_Script=_Cypriot}', "");
Expect(0, 67583, '\P{^Is_Script=_Cypriot}', "");
Error('\p{Is_Sc=-CPRT/a/}');
Error('\P{Is_Sc=-CPRT/a/}');
Expect(1, 67589, '\p{Is_Sc=cprt}', "");
Expect(0, 67589, '\p{^Is_Sc=cprt}', "");
Expect(0, 67589, '\P{Is_Sc=cprt}', "");
Expect(1, 67589, '\P{^Is_Sc=cprt}', "");
Expect(0, 67583, '\p{Is_Sc=cprt}', "");
Expect(1, 67583, '\p{^Is_Sc=cprt}', "");
Expect(1, 67583, '\P{Is_Sc=cprt}', "");
Expect(0, 67583, '\P{^Is_Sc=cprt}', "");
Expect(1, 67589, '\p{Is_Sc=-	cprt}', "");
Expect(0, 67589, '\p{^Is_Sc=-	cprt}', "");
Expect(0, 67589, '\P{Is_Sc=-	cprt}', "");
Expect(1, 67589, '\P{^Is_Sc=-	cprt}', "");
Expect(0, 67583, '\p{Is_Sc=-	cprt}', "");
Expect(1, 67583, '\p{^Is_Sc=-	cprt}', "");
Expect(1, 67583, '\P{Is_Sc=-	cprt}', "");
Expect(0, 67583, '\P{^Is_Sc=-	cprt}', "");
Error('\p{Script=-hangul/a/}');
Error('\P{Script=-hangul/a/}');
Expect(1, 4607, '\p{Script=hangul}', "");
Expect(0, 4607, '\p{^Script=hangul}', "");
Expect(0, 4607, '\P{Script=hangul}', "");
Expect(1, 4607, '\P{^Script=hangul}', "");
Expect(0, 4351, '\p{Script=hangul}', "");
Expect(1, 4351, '\p{^Script=hangul}', "");
Expect(1, 4351, '\P{Script=hangul}', "");
Expect(0, 4351, '\P{^Script=hangul}', "");
Expect(1, 4607, '\p{Script=--Hangul}', "");
Expect(0, 4607, '\p{^Script=--Hangul}', "");
Expect(0, 4607, '\P{Script=--Hangul}', "");
Expect(1, 4607, '\P{^Script=--Hangul}', "");
Expect(0, 4351, '\p{Script=--Hangul}', "");
Expect(1, 4351, '\p{^Script=--Hangul}', "");
Expect(1, 4351, '\P{Script=--Hangul}', "");
Expect(0, 4351, '\P{^Script=--Hangul}', "");
Error('\p{Sc= 	Hang:=}');
Error('\P{Sc= 	Hang:=}');
Expect(1, 4607, '\p{Sc=hang}', "");
Expect(0, 4607, '\p{^Sc=hang}', "");
Expect(0, 4607, '\P{Sc=hang}', "");
Expect(1, 4607, '\P{^Sc=hang}', "");
Expect(0, 4351, '\p{Sc=hang}', "");
Expect(1, 4351, '\p{^Sc=hang}', "");
Expect(1, 4351, '\P{Sc=hang}', "");
Expect(0, 4351, '\P{^Sc=hang}', "");
Expect(1, 4607, '\p{Sc= _Hang}', "");
Expect(0, 4607, '\p{^Sc= _Hang}', "");
Expect(0, 4607, '\P{Sc= _Hang}', "");
Expect(1, 4607, '\P{^Sc= _Hang}', "");
Expect(0, 4351, '\p{Sc= _Hang}', "");
Expect(1, 4351, '\p{^Sc= _Hang}', "");
Expect(1, 4351, '\P{Sc= _Hang}', "");
Expect(0, 4351, '\P{^Sc= _Hang}', "");
Error('\p{Is_Script:   _	Hangul:=}');
Error('\P{Is_Script:   _	Hangul:=}');
Expect(1, 4607, '\p{Is_Script:	hangul}', "");
Expect(0, 4607, '\p{^Is_Script:	hangul}', "");
Expect(0, 4607, '\P{Is_Script:	hangul}', "");
Expect(1, 4607, '\P{^Is_Script:	hangul}', "");
Expect(0, 4351, '\p{Is_Script:	hangul}', "");
Expect(1, 4351, '\p{^Is_Script:	hangul}', "");
Expect(1, 4351, '\P{Is_Script:	hangul}', "");
Expect(0, 4351, '\P{^Is_Script:	hangul}', "");
Expect(1, 4607, '\p{Is_Script=_ Hangul}', "");
Expect(0, 4607, '\p{^Is_Script=_ Hangul}', "");
Expect(0, 4607, '\P{Is_Script=_ Hangul}', "");
Expect(1, 4607, '\P{^Is_Script=_ Hangul}', "");
Expect(0, 4351, '\p{Is_Script=_ Hangul}', "");
Expect(1, 4351, '\p{^Is_Script=_ Hangul}', "");
Expect(1, 4351, '\P{Is_Script=_ Hangul}', "");
Expect(0, 4351, '\P{^Is_Script=_ Hangul}', "");
Error('\p{Is_Sc=_/a/Hang}');
Error('\P{Is_Sc=_/a/Hang}');
Expect(1, 4607, '\p{Is_Sc=hang}', "");
Expect(0, 4607, '\p{^Is_Sc=hang}', "");
Expect(0, 4607, '\P{Is_Sc=hang}', "");
Expect(1, 4607, '\P{^Is_Sc=hang}', "");
Expect(0, 4351, '\p{Is_Sc=hang}', "");
Expect(1, 4351, '\p{^Is_Sc=hang}', "");
Expect(1, 4351, '\P{Is_Sc=hang}', "");
Expect(0, 4351, '\P{^Is_Sc=hang}', "");
Expect(1, 4607, '\p{Is_Sc= 	hang}', "");
Expect(0, 4607, '\p{^Is_Sc= 	hang}', "");
Expect(0, 4607, '\P{Is_Sc= 	hang}', "");
Expect(1, 4607, '\P{^Is_Sc= 	hang}', "");
Expect(0, 4351, '\p{Is_Sc= 	hang}', "");
Expect(1, 4351, '\p{^Is_Sc= 	hang}', "");
Expect(1, 4351, '\P{Is_Sc= 	hang}', "");
Expect(0, 4351, '\P{^Is_Sc= 	hang}', "");
Error('\p{Script=	Unknown/a/}');
Error('\P{Script=	Unknown/a/}');
Expect(1, 889, '\p{Script=unknown}', "");
Expect(0, 889, '\p{^Script=unknown}', "");
Expect(0, 889, '\P{Script=unknown}', "");
Expect(1, 889, '\P{^Script=unknown}', "");
Expect(0, 887, '\p{Script=unknown}', "");
Expect(1, 887, '\p{^Script=unknown}', "");
Expect(1, 887, '\P{Script=unknown}', "");
Expect(0, 887, '\P{^Script=unknown}', "");
Expect(1, 889, '\p{Script=_ unknown}', "");
Expect(0, 889, '\p{^Script=_ unknown}', "");
Expect(0, 889, '\P{Script=_ unknown}', "");
Expect(1, 889, '\P{^Script=_ unknown}', "");
Expect(0, 887, '\p{Script=_ unknown}', "");
Expect(1, 887, '\p{^Script=_ unknown}', "");
Expect(1, 887, '\P{Script=_ unknown}', "");
Expect(0, 887, '\P{^Script=_ unknown}', "");
Error('\p{Sc= _zzzz/a/}');
Error('\P{Sc= _zzzz/a/}');
Expect(1, 889, '\p{Sc=zzzz}', "");
Expect(0, 889, '\p{^Sc=zzzz}', "");
Expect(0, 889, '\P{Sc=zzzz}', "");
Expect(1, 889, '\P{^Sc=zzzz}', "");
Expect(0, 887, '\p{Sc=zzzz}', "");
Expect(1, 887, '\p{^Sc=zzzz}', "");
Expect(1, 887, '\P{Sc=zzzz}', "");
Expect(0, 887, '\P{^Sc=zzzz}', "");
Expect(1, 889, '\p{Sc= Zzzz}', "");
Expect(0, 889, '\p{^Sc= Zzzz}', "");
Expect(0, 889, '\P{Sc= Zzzz}', "");
Expect(1, 889, '\P{^Sc= Zzzz}', "");
Expect(0, 887, '\p{Sc= Zzzz}', "");
Expect(1, 887, '\p{^Sc= Zzzz}', "");
Expect(1, 887, '\P{Sc= Zzzz}', "");
Expect(0, 887, '\P{^Sc= Zzzz}', "");
Error('\p{Is_Script:	-_Unknown:=}');
Error('\P{Is_Script:	-_Unknown:=}');
Expect(1, 889, '\p{Is_Script=unknown}', "");
Expect(0, 889, '\p{^Is_Script=unknown}', "");
Expect(0, 889, '\P{Is_Script=unknown}', "");
Expect(1, 889, '\P{^Is_Script=unknown}', "");
Expect(0, 887, '\p{Is_Script=unknown}', "");
Expect(1, 887, '\p{^Is_Script=unknown}', "");
Expect(1, 887, '\P{Is_Script=unknown}', "");
Expect(0, 887, '\P{^Is_Script=unknown}', "");
Expect(1, 889, '\p{Is_Script=		Unknown}', "");
Expect(0, 889, '\p{^Is_Script=		Unknown}', "");
Expect(0, 889, '\P{Is_Script=		Unknown}', "");
Expect(1, 889, '\P{^Is_Script=		Unknown}', "");
Expect(0, 887, '\p{Is_Script=		Unknown}', "");
Expect(1, 887, '\p{^Is_Script=		Unknown}', "");
Expect(1, 887, '\P{Is_Script=		Unknown}', "");
Expect(0, 887, '\P{^Is_Script=		Unknown}', "");
Error('\p{Is_Sc=/a/ _Zzzz}');
Error('\P{Is_Sc=/a/ _Zzzz}');
Expect(1, 889, '\p{Is_Sc:zzzz}', "");
Expect(0, 889, '\p{^Is_Sc:zzzz}', "");
Expect(0, 889, '\P{Is_Sc:zzzz}', "");
Expect(1, 889, '\P{^Is_Sc:zzzz}', "");
Expect(0, 887, '\p{Is_Sc:zzzz}', "");
Expect(1, 887, '\p{^Is_Sc:zzzz}', "");
Expect(1, 887, '\P{Is_Sc:zzzz}', "");
Expect(0, 887, '\P{^Is_Sc:zzzz}', "");
Expect(1, 889, '\p{Is_Sc= -ZZZZ}', "");
Expect(0, 889, '\p{^Is_Sc= -ZZZZ}', "");
Expect(0, 889, '\P{Is_Sc= -ZZZZ}', "");
Expect(1, 889, '\P{^Is_Sc= -ZZZZ}', "");
Expect(0, 887, '\p{Is_Sc= -ZZZZ}', "");
Expect(1, 887, '\p{^Is_Sc= -ZZZZ}', "");
Expect(1, 887, '\P{Is_Sc= -ZZZZ}', "");
Expect(0, 887, '\P{^Is_Sc= -ZZZZ}', "");
Error('\p{Script=/a/ _Deseret}');
Error('\P{Script=/a/ _Deseret}');
Expect(1, 66639, '\p{Script:	deseret}', "");
Expect(0, 66639, '\p{^Script:	deseret}', "");
Expect(0, 66639, '\P{Script:	deseret}', "");
Expect(1, 66639, '\P{^Script:	deseret}', "");
Expect(0, 66559, '\p{Script:	deseret}', "");
Expect(1, 66559, '\p{^Script:	deseret}', "");
Expect(1, 66559, '\P{Script:	deseret}', "");
Expect(0, 66559, '\P{^Script:	deseret}', "");
Expect(1, 66639, '\p{Script=-_DESERET}', "");
Expect(0, 66639, '\p{^Script=-_DESERET}', "");
Expect(0, 66639, '\P{Script=-_DESERET}', "");
Expect(1, 66639, '\P{^Script=-_DESERET}', "");
Expect(0, 66559, '\p{Script=-_DESERET}', "");
Expect(1, 66559, '\p{^Script=-_DESERET}', "");
Expect(1, 66559, '\P{Script=-_DESERET}', "");
Expect(0, 66559, '\P{^Script=-_DESERET}', "");
Error('\p{Sc:  	dsrt/a/}');
Error('\P{Sc:  	dsrt/a/}');
Expect(1, 66639, '\p{Sc=dsrt}', "");
Expect(0, 66639, '\p{^Sc=dsrt}', "");
Expect(0, 66639, '\P{Sc=dsrt}', "");
Expect(1, 66639, '\P{^Sc=dsrt}', "");
Expect(0, 66559, '\p{Sc=dsrt}', "");
Expect(1, 66559, '\p{^Sc=dsrt}', "");
Expect(1, 66559, '\P{Sc=dsrt}', "");
Expect(0, 66559, '\P{^Sc=dsrt}', "");
Expect(1, 66639, '\p{Sc=_Dsrt}', "");
Expect(0, 66639, '\p{^Sc=_Dsrt}', "");
Expect(0, 66639, '\P{Sc=_Dsrt}', "");
Expect(1, 66639, '\P{^Sc=_Dsrt}', "");
Expect(0, 66559, '\p{Sc=_Dsrt}', "");
Expect(1, 66559, '\p{^Sc=_Dsrt}', "");
Expect(1, 66559, '\P{Sc=_Dsrt}', "");
Expect(0, 66559, '\P{^Sc=_Dsrt}', "");
Error('\p{Is_Script=:=		deseret}');
Error('\P{Is_Script=:=		deseret}');
Expect(1, 66639, '\p{Is_Script=deseret}', "");
Expect(0, 66639, '\p{^Is_Script=deseret}', "");
Expect(0, 66639, '\P{Is_Script=deseret}', "");
Expect(1, 66639, '\P{^Is_Script=deseret}', "");
Expect(0, 66559, '\p{Is_Script=deseret}', "");
Expect(1, 66559, '\p{^Is_Script=deseret}', "");
Expect(1, 66559, '\P{Is_Script=deseret}', "");
Expect(0, 66559, '\P{^Is_Script=deseret}', "");
Expect(1, 66639, '\p{Is_Script=_	deseret}', "");
Expect(0, 66639, '\p{^Is_Script=_	deseret}', "");
Expect(0, 66639, '\P{Is_Script=_	deseret}', "");
Expect(1, 66639, '\P{^Is_Script=_	deseret}', "");
Expect(0, 66559, '\p{Is_Script=_	deseret}', "");
Expect(1, 66559, '\p{^Is_Script=_	deseret}', "");
Expect(1, 66559, '\P{Is_Script=_	deseret}', "");
Expect(0, 66559, '\P{^Is_Script=_	deseret}', "");
Error('\p{Is_Sc: /a/Dsrt}');
Error('\P{Is_Sc: /a/Dsrt}');
Expect(1, 66639, '\p{Is_Sc=dsrt}', "");
Expect(0, 66639, '\p{^Is_Sc=dsrt}', "");
Expect(0, 66639, '\P{Is_Sc=dsrt}', "");
Expect(1, 66639, '\P{^Is_Sc=dsrt}', "");
Expect(0, 66559, '\p{Is_Sc=dsrt}', "");
Expect(1, 66559, '\p{^Is_Sc=dsrt}', "");
Expect(1, 66559, '\P{Is_Sc=dsrt}', "");
Expect(0, 66559, '\P{^Is_Sc=dsrt}', "");
Expect(1, 66639, '\p{Is_Sc=-	Dsrt}', "");
Expect(0, 66639, '\p{^Is_Sc=-	Dsrt}', "");
Expect(0, 66639, '\P{Is_Sc=-	Dsrt}', "");
Expect(1, 66639, '\P{^Is_Sc=-	Dsrt}', "");
Expect(0, 66559, '\p{Is_Sc=-	Dsrt}', "");
Expect(1, 66559, '\p{^Is_Sc=-	Dsrt}', "");
Expect(1, 66559, '\P{Is_Sc=-	Dsrt}', "");
Expect(0, 66559, '\P{^Is_Sc=-	Dsrt}', "");
Error('\p{Script= Cuneiform/a/}');
Error('\P{Script= Cuneiform/a/}');
Expect(1, 74606, '\p{Script=cuneiform}', "");
Expect(0, 74606, '\p{^Script=cuneiform}', "");
Expect(0, 74606, '\P{Script=cuneiform}', "");
Expect(1, 74606, '\P{^Script=cuneiform}', "");
Expect(0, 73727, '\p{Script=cuneiform}', "");
Expect(1, 73727, '\p{^Script=cuneiform}', "");
Expect(1, 73727, '\P{Script=cuneiform}', "");
Expect(0, 73727, '\P{^Script=cuneiform}', "");
Expect(1, 74606, '\p{Script:	_CUNEIFORM}', "");
Expect(0, 74606, '\p{^Script:	_CUNEIFORM}', "");
Expect(0, 74606, '\P{Script:	_CUNEIFORM}', "");
Expect(1, 74606, '\P{^Script:	_CUNEIFORM}', "");
Expect(0, 73727, '\p{Script:	_CUNEIFORM}', "");
Expect(1, 73727, '\p{^Script:	_CUNEIFORM}', "");
Expect(1, 73727, '\P{Script:	_CUNEIFORM}', "");
Expect(0, 73727, '\P{^Script:	_CUNEIFORM}', "");
Error('\p{Sc=-:=Xsux}');
Error('\P{Sc=-:=Xsux}');
Expect(1, 74606, '\p{Sc:   xsux}', "");
Expect(0, 74606, '\p{^Sc:   xsux}', "");
Expect(0, 74606, '\P{Sc:   xsux}', "");
Expect(1, 74606, '\P{^Sc:   xsux}', "");
Expect(0, 73727, '\p{Sc:   xsux}', "");
Expect(1, 73727, '\p{^Sc:   xsux}', "");
Expect(1, 73727, '\P{Sc:   xsux}', "");
Expect(0, 73727, '\P{^Sc:   xsux}', "");
Expect(1, 74606, '\p{Sc=  Xsux}', "");
Expect(0, 74606, '\p{^Sc=  Xsux}', "");
Expect(0, 74606, '\P{Sc=  Xsux}', "");
Expect(1, 74606, '\P{^Sc=  Xsux}', "");
Expect(0, 73727, '\p{Sc=  Xsux}', "");
Expect(1, 73727, '\p{^Sc=  Xsux}', "");
Expect(1, 73727, '\P{Sc=  Xsux}', "");
Expect(0, 73727, '\P{^Sc=  Xsux}', "");
Error('\p{Is_Script=Cuneiform:=}');
Error('\P{Is_Script=Cuneiform:=}');
Expect(1, 74606, '\p{Is_Script:	cuneiform}', "");
Expect(0, 74606, '\p{^Is_Script:	cuneiform}', "");
Expect(0, 74606, '\P{Is_Script:	cuneiform}', "");
Expect(1, 74606, '\P{^Is_Script:	cuneiform}', "");
Expect(0, 73727, '\p{Is_Script:	cuneiform}', "");
Expect(1, 73727, '\p{^Is_Script:	cuneiform}', "");
Expect(1, 73727, '\P{Is_Script:	cuneiform}', "");
Expect(0, 73727, '\P{^Is_Script:	cuneiform}', "");
Expect(1, 74606, '\p{Is_Script=- cuneiform}', "");
Expect(0, 74606, '\p{^Is_Script=- cuneiform}', "");
Expect(0, 74606, '\P{Is_Script=- cuneiform}', "");
Expect(1, 74606, '\P{^Is_Script=- cuneiform}', "");
Expect(0, 73727, '\p{Is_Script=- cuneiform}', "");
Expect(1, 73727, '\p{^Is_Script=- cuneiform}', "");
Expect(1, 73727, '\P{Is_Script=- cuneiform}', "");
Expect(0, 73727, '\P{^Is_Script=- cuneiform}', "");
Error('\p{Is_Sc=:= Xsux}');
Error('\P{Is_Sc=:= Xsux}');
Expect(1, 74606, '\p{Is_Sc:   xsux}', "");
Expect(0, 74606, '\p{^Is_Sc:   xsux}', "");
Expect(0, 74606, '\P{Is_Sc:   xsux}', "");
Expect(1, 74606, '\P{^Is_Sc:   xsux}', "");
Expect(0, 73727, '\p{Is_Sc:   xsux}', "");
Expect(1, 73727, '\p{^Is_Sc:   xsux}', "");
Expect(1, 73727, '\P{Is_Sc:   xsux}', "");
Expect(0, 73727, '\P{^Is_Sc:   xsux}', "");
Expect(1, 74606, '\p{Is_Sc: -xsux}', "");
Expect(0, 74606, '\p{^Is_Sc: -xsux}', "");
Expect(0, 74606, '\P{Is_Sc: -xsux}', "");
Expect(1, 74606, '\P{^Is_Sc: -xsux}', "");
Expect(0, 73727, '\p{Is_Sc: -xsux}', "");
Expect(1, 73727, '\p{^Is_Sc: -xsux}', "");
Expect(1, 73727, '\P{Is_Sc: -xsux}', "");
Expect(0, 73727, '\P{^Is_Sc: -xsux}', "");
Error('\p{Script=-/a/inherited}');
Error('\P{Script=-/a/inherited}');
Expect(1, 879, '\p{Script=inherited}', "");
Expect(0, 879, '\p{^Script=inherited}', "");
Expect(0, 879, '\P{Script=inherited}', "");
Expect(1, 879, '\P{^Script=inherited}', "");
Expect(0, 767, '\p{Script=inherited}', "");
Expect(1, 767, '\p{^Script=inherited}', "");
Expect(1, 767, '\P{Script=inherited}', "");
Expect(0, 767, '\P{^Script=inherited}', "");
Expect(1, 879, '\p{Script= Inherited}', "");
Expect(0, 879, '\p{^Script= Inherited}', "");
Expect(0, 879, '\P{Script= Inherited}', "");
Expect(1, 879, '\P{^Script= Inherited}', "");
Expect(0, 767, '\p{Script= Inherited}', "");
Expect(1, 767, '\p{^Script= Inherited}', "");
Expect(1, 767, '\P{Script= Inherited}', "");
Expect(0, 767, '\P{^Script= Inherited}', "");
Error('\p{Sc=_	Zinh:=}');
Error('\P{Sc=_	Zinh:=}');
Expect(1, 879, '\p{Sc:   zinh}', "");
Expect(0, 879, '\p{^Sc:   zinh}', "");
Expect(0, 879, '\P{Sc:   zinh}', "");
Expect(1, 879, '\P{^Sc:   zinh}', "");
Expect(0, 767, '\p{Sc:   zinh}', "");
Expect(1, 767, '\p{^Sc:   zinh}', "");
Expect(1, 767, '\P{Sc:   zinh}', "");
Expect(0, 767, '\P{^Sc:   zinh}', "");
Expect(1, 879, '\p{Sc=__zinh}', "");
Expect(0, 879, '\p{^Sc=__zinh}', "");
Expect(0, 879, '\P{Sc=__zinh}', "");
Expect(1, 879, '\P{^Sc=__zinh}', "");
Expect(0, 767, '\p{Sc=__zinh}', "");
Expect(1, 767, '\p{^Sc=__zinh}', "");
Expect(1, 767, '\P{Sc=__zinh}', "");
Expect(0, 767, '\P{^Sc=__zinh}', "");
Error('\p{Is_Script=:=Qaai}');
Error('\P{Is_Script=:=Qaai}');
Expect(1, 879, '\p{Is_Script=qaai}', "");
Expect(0, 879, '\p{^Is_Script=qaai}', "");
Expect(0, 879, '\P{Is_Script=qaai}', "");
Expect(1, 879, '\P{^Is_Script=qaai}', "");
Expect(0, 767, '\p{Is_Script=qaai}', "");
Expect(1, 767, '\p{^Is_Script=qaai}', "");
Expect(1, 767, '\P{Is_Script=qaai}', "");
Expect(0, 767, '\P{^Is_Script=qaai}', "");
Expect(1, 879, '\p{Is_Script=  Qaai}', "");
Expect(0, 879, '\p{^Is_Script=  Qaai}', "");
Expect(0, 879, '\P{Is_Script=  Qaai}', "");
Expect(1, 879, '\P{^Is_Script=  Qaai}', "");
Expect(0, 767, '\p{Is_Script=  Qaai}', "");
Expect(1, 767, '\p{^Is_Script=  Qaai}', "");
Expect(1, 767, '\P{Is_Script=  Qaai}', "");
Expect(0, 767, '\P{^Is_Script=  Qaai}', "");
Error('\p{Is_Sc=	inherited:=}');
Error('\P{Is_Sc=	inherited:=}');
Expect(1, 879, '\p{Is_Sc=inherited}', "");
Expect(0, 879, '\p{^Is_Sc=inherited}', "");
Expect(0, 879, '\P{Is_Sc=inherited}', "");
Expect(1, 879, '\P{^Is_Sc=inherited}', "");
Expect(0, 767, '\p{Is_Sc=inherited}', "");
Expect(1, 767, '\p{^Is_Sc=inherited}', "");
Expect(1, 767, '\P{Is_Sc=inherited}', "");
Expect(0, 767, '\P{^Is_Sc=inherited}', "");
Expect(1, 879, '\p{Is_Sc=	-inherited}', "");
Expect(0, 879, '\p{^Is_Sc=	-inherited}', "");
Expect(0, 879, '\P{Is_Sc=	-inherited}', "");
Expect(1, 879, '\P{^Is_Sc=	-inherited}', "");
Expect(0, 767, '\p{Is_Sc=	-inherited}', "");
Expect(1, 767, '\p{^Is_Sc=	-inherited}', "");
Expect(1, 767, '\P{Is_Sc=	-inherited}', "");
Expect(0, 767, '\P{^Is_Sc=	-inherited}', "");
Error('\p{Script=:=	-Kaithi}');
Error('\P{Script=:=	-Kaithi}');
Expect(1, 69825, '\p{Script=kaithi}', "");
Expect(0, 69825, '\p{^Script=kaithi}', "");
Expect(0, 69825, '\P{Script=kaithi}', "");
Expect(1, 69825, '\P{^Script=kaithi}', "");
Expect(0, 69759, '\p{Script=kaithi}', "");
Expect(1, 69759, '\p{^Script=kaithi}', "");
Expect(1, 69759, '\P{Script=kaithi}', "");
Expect(0, 69759, '\P{^Script=kaithi}', "");
Expect(1, 69825, '\p{Script=_	kaithi}', "");
Expect(0, 69825, '\p{^Script=_	kaithi}', "");
Expect(0, 69825, '\P{Script=_	kaithi}', "");
Expect(1, 69825, '\P{^Script=_	kaithi}', "");
Expect(0, 69759, '\p{Script=_	kaithi}', "");
Expect(1, 69759, '\p{^Script=_	kaithi}', "");
Expect(1, 69759, '\P{Script=_	kaithi}', "");
Expect(0, 69759, '\P{^Script=_	kaithi}', "");
Error('\p{Sc=	-KTHI:=}');
Error('\P{Sc=	-KTHI:=}');
Expect(1, 69825, '\p{Sc=kthi}', "");
Expect(0, 69825, '\p{^Sc=kthi}', "");
Expect(0, 69825, '\P{Sc=kthi}', "");
Expect(1, 69825, '\P{^Sc=kthi}', "");
Expect(0, 69759, '\p{Sc=kthi}', "");
Expect(1, 69759, '\p{^Sc=kthi}', "");
Expect(1, 69759, '\P{Sc=kthi}', "");
Expect(0, 69759, '\P{^Sc=kthi}', "");
Expect(1, 69825, '\p{Sc=-KTHI}', "");
Expect(0, 69825, '\p{^Sc=-KTHI}', "");
Expect(0, 69825, '\P{Sc=-KTHI}', "");
Expect(1, 69825, '\P{^Sc=-KTHI}', "");
Expect(0, 69759, '\p{Sc=-KTHI}', "");
Expect(1, 69759, '\p{^Sc=-KTHI}', "");
Expect(1, 69759, '\P{Sc=-KTHI}', "");
Expect(0, 69759, '\P{^Sc=-KTHI}', "");
Error('\p{Is_Script=:=_ Kaithi}');
Error('\P{Is_Script=:=_ Kaithi}');
Expect(1, 69825, '\p{Is_Script=kaithi}', "");
Expect(0, 69825, '\p{^Is_Script=kaithi}', "");
Expect(0, 69825, '\P{Is_Script=kaithi}', "");
Expect(1, 69825, '\P{^Is_Script=kaithi}', "");
Expect(0, 69759, '\p{Is_Script=kaithi}', "");
Expect(1, 69759, '\p{^Is_Script=kaithi}', "");
Expect(1, 69759, '\P{Is_Script=kaithi}', "");
Expect(0, 69759, '\P{^Is_Script=kaithi}', "");
Expect(1, 69825, '\p{Is_Script=  Kaithi}', "");
Expect(0, 69825, '\p{^Is_Script=  Kaithi}', "");
Expect(0, 69825, '\P{Is_Script=  Kaithi}', "");
Expect(1, 69825, '\P{^Is_Script=  Kaithi}', "");
Expect(0, 69759, '\p{Is_Script=  Kaithi}', "");
Expect(1, 69759, '\p{^Is_Script=  Kaithi}', "");
Expect(1, 69759, '\P{Is_Script=  Kaithi}', "");
Expect(0, 69759, '\P{^Is_Script=  Kaithi}', "");
Error('\p{Is_Sc= 	kthi/a/}');
Error('\P{Is_Sc= 	kthi/a/}');
Expect(1, 69825, '\p{Is_Sc=kthi}', "");
Expect(0, 69825, '\p{^Is_Sc=kthi}', "");
Expect(0, 69825, '\P{Is_Sc=kthi}', "");
Expect(1, 69825, '\P{^Is_Sc=kthi}', "");
Expect(0, 69759, '\p{Is_Sc=kthi}', "");
Expect(1, 69759, '\p{^Is_Sc=kthi}', "");
Expect(1, 69759, '\P{Is_Sc=kthi}', "");
Expect(0, 69759, '\P{^Is_Sc=kthi}', "");
Expect(1, 69825, '\p{Is_Sc=-Kthi}', "");
Expect(0, 69825, '\p{^Is_Sc=-Kthi}', "");
Expect(0, 69825, '\P{Is_Sc=-Kthi}', "");
Expect(1, 69825, '\P{^Is_Sc=-Kthi}', "");
Expect(0, 69759, '\p{Is_Sc=-Kthi}', "");
Expect(1, 69759, '\p{^Is_Sc=-Kthi}', "");
Expect(1, 69759, '\P{Is_Sc=-Kthi}', "");
Expect(0, 69759, '\P{^Is_Sc=-Kthi}', "");
Error('\p{Script=__ARABIC/a/}');
Error('\P{Script=__ARABIC/a/}');
Expect(1, 1547, '\p{Script=arabic}', "");
Expect(0, 1547, '\p{^Script=arabic}', "");
Expect(0, 1547, '\P{Script=arabic}', "");
Expect(1, 1547, '\P{^Script=arabic}', "");
Expect(0, 1541, '\p{Script=arabic}', "");
Expect(1, 1541, '\p{^Script=arabic}', "");
Expect(1, 1541, '\P{Script=arabic}', "");
Expect(0, 1541, '\P{^Script=arabic}', "");
Expect(1, 1547, '\p{Script=	Arabic}', "");
Expect(0, 1547, '\p{^Script=	Arabic}', "");
Expect(0, 1547, '\P{Script=	Arabic}', "");
Expect(1, 1547, '\P{^Script=	Arabic}', "");
Expect(0, 1541, '\p{Script=	Arabic}', "");
Expect(1, 1541, '\p{^Script=	Arabic}', "");
Expect(1, 1541, '\P{Script=	Arabic}', "");
Expect(0, 1541, '\P{^Script=	Arabic}', "");
Error('\p{Sc:	 -Arab:=}');
Error('\P{Sc:	 -Arab:=}');
Expect(1, 1547, '\p{Sc=arab}', "");
Expect(0, 1547, '\p{^Sc=arab}', "");
Expect(0, 1547, '\P{Sc=arab}', "");
Expect(1, 1547, '\P{^Sc=arab}', "");
Expect(0, 1541, '\p{Sc=arab}', "");
Expect(1, 1541, '\p{^Sc=arab}', "");
Expect(1, 1541, '\P{Sc=arab}', "");
Expect(0, 1541, '\P{^Sc=arab}', "");
Expect(1, 1547, '\p{Sc=- Arab}', "");
Expect(0, 1547, '\p{^Sc=- Arab}', "");
Expect(0, 1547, '\P{Sc=- Arab}', "");
Expect(1, 1547, '\P{^Sc=- Arab}', "");
Expect(0, 1541, '\p{Sc=- Arab}', "");
Expect(1, 1541, '\p{^Sc=- Arab}', "");
Expect(1, 1541, '\P{Sc=- Arab}', "");
Expect(0, 1541, '\P{^Sc=- Arab}', "");
Error('\p{Is_Script: _-arabic/a/}');
Error('\P{Is_Script: _-arabic/a/}');
Expect(1, 1547, '\p{Is_Script=arabic}', "");
Expect(0, 1547, '\p{^Is_Script=arabic}', "");
Expect(0, 1547, '\P{Is_Script=arabic}', "");
Expect(1, 1547, '\P{^Is_Script=arabic}', "");
Expect(0, 1541, '\p{Is_Script=arabic}', "");
Expect(1, 1541, '\p{^Is_Script=arabic}', "");
Expect(1, 1541, '\P{Is_Script=arabic}', "");
Expect(0, 1541, '\P{^Is_Script=arabic}', "");
Expect(1, 1547, '\p{Is_Script=	arabic}', "");
Expect(0, 1547, '\p{^Is_Script=	arabic}', "");
Expect(0, 1547, '\P{Is_Script=	arabic}', "");
Expect(1, 1547, '\P{^Is_Script=	arabic}', "");
Expect(0, 1541, '\p{Is_Script=	arabic}', "");
Expect(1, 1541, '\p{^Is_Script=	arabic}', "");
Expect(1, 1541, '\P{Is_Script=	arabic}', "");
Expect(0, 1541, '\P{^Is_Script=	arabic}', "");
Error('\p{Is_Sc:   :=_ARAB}');
Error('\P{Is_Sc:   :=_ARAB}');
Expect(1, 1547, '\p{Is_Sc=arab}', "");
Expect(0, 1547, '\p{^Is_Sc=arab}', "");
Expect(0, 1547, '\P{Is_Sc=arab}', "");
Expect(1, 1547, '\P{^Is_Sc=arab}', "");
Expect(0, 1541, '\p{Is_Sc=arab}', "");
Expect(1, 1541, '\p{^Is_Sc=arab}', "");
Expect(1, 1541, '\P{Is_Sc=arab}', "");
Expect(0, 1541, '\P{^Is_Sc=arab}', "");
Expect(1, 1547, '\p{Is_Sc=	 Arab}', "");
Expect(0, 1547, '\p{^Is_Sc=	 Arab}', "");
Expect(0, 1547, '\P{Is_Sc=	 Arab}', "");
Expect(1, 1547, '\P{^Is_Sc=	 Arab}', "");
Expect(0, 1541, '\p{Is_Sc=	 Arab}', "");
Expect(1, 1541, '\p{^Is_Sc=	 Arab}', "");
Expect(1, 1541, '\P{Is_Sc=	 Arab}', "");
Expect(0, 1541, '\P{^Is_Sc=	 Arab}', "");
Error('\p{Script=	shavian:=}');
Error('\P{Script=	shavian:=}');
Expect(1, 66687, '\p{Script=shavian}', "");
Expect(0, 66687, '\p{^Script=shavian}', "");
Expect(0, 66687, '\P{Script=shavian}', "");
Expect(1, 66687, '\P{^Script=shavian}', "");
Expect(0, 66639, '\p{Script=shavian}', "");
Expect(1, 66639, '\p{^Script=shavian}', "");
Expect(1, 66639, '\P{Script=shavian}', "");
Expect(0, 66639, '\P{^Script=shavian}', "");
Expect(1, 66687, '\p{Script= 	shavian}', "");
Expect(0, 66687, '\p{^Script= 	shavian}', "");
Expect(0, 66687, '\P{Script= 	shavian}', "");
Expect(1, 66687, '\P{^Script= 	shavian}', "");
Expect(0, 66639, '\p{Script= 	shavian}', "");
Expect(1, 66639, '\p{^Script= 	shavian}', "");
Expect(1, 66639, '\P{Script= 	shavian}', "");
Expect(0, 66639, '\P{^Script= 	shavian}', "");
Error('\p{Sc=_:=SHAW}');
Error('\P{Sc=_:=SHAW}');
Expect(1, 66687, '\p{Sc=shaw}', "");
Expect(0, 66687, '\p{^Sc=shaw}', "");
Expect(0, 66687, '\P{Sc=shaw}', "");
Expect(1, 66687, '\P{^Sc=shaw}', "");
Expect(0, 66639, '\p{Sc=shaw}', "");
Expect(1, 66639, '\p{^Sc=shaw}', "");
Expect(1, 66639, '\P{Sc=shaw}', "");
Expect(0, 66639, '\P{^Sc=shaw}', "");
Expect(1, 66687, '\p{Sc=	-SHAW}', "");
Expect(0, 66687, '\p{^Sc=	-SHAW}', "");
Expect(0, 66687, '\P{Sc=	-SHAW}', "");
Expect(1, 66687, '\P{^Sc=	-SHAW}', "");
Expect(0, 66639, '\p{Sc=	-SHAW}', "");
Expect(1, 66639, '\p{^Sc=	-SHAW}', "");
Expect(1, 66639, '\P{Sc=	-SHAW}', "");
Expect(0, 66639, '\P{^Sc=	-SHAW}', "");
Error('\p{Is_Script=/a/ 	Shavian}');
Error('\P{Is_Script=/a/ 	Shavian}');
Expect(1, 66687, '\p{Is_Script=shavian}', "");
Expect(0, 66687, '\p{^Is_Script=shavian}', "");
Expect(0, 66687, '\P{Is_Script=shavian}', "");
Expect(1, 66687, '\P{^Is_Script=shavian}', "");
Expect(0, 66639, '\p{Is_Script=shavian}', "");
Expect(1, 66639, '\p{^Is_Script=shavian}', "");
Expect(1, 66639, '\P{Is_Script=shavian}', "");
Expect(0, 66639, '\P{^Is_Script=shavian}', "");
Expect(1, 66687, '\p{Is_Script=  Shavian}', "");
Expect(0, 66687, '\p{^Is_Script=  Shavian}', "");
Expect(0, 66687, '\P{Is_Script=  Shavian}', "");
Expect(1, 66687, '\P{^Is_Script=  Shavian}', "");
Expect(0, 66639, '\p{Is_Script=  Shavian}', "");
Expect(1, 66639, '\p{^Is_Script=  Shavian}', "");
Expect(1, 66639, '\P{Is_Script=  Shavian}', "");
Expect(0, 66639, '\P{^Is_Script=  Shavian}', "");
Error('\p{Is_Sc=	_SHAW:=}');
Error('\P{Is_Sc=	_SHAW:=}');
Expect(1, 66687, '\p{Is_Sc=shaw}', "");
Expect(0, 66687, '\p{^Is_Sc=shaw}', "");
Expect(0, 66687, '\P{Is_Sc=shaw}', "");
Expect(1, 66687, '\P{^Is_Sc=shaw}', "");
Expect(0, 66639, '\p{Is_Sc=shaw}', "");
Expect(1, 66639, '\p{^Is_Sc=shaw}', "");
Expect(1, 66639, '\P{Is_Sc=shaw}', "");
Expect(0, 66639, '\P{^Is_Sc=shaw}', "");
Expect(1, 66687, '\p{Is_Sc=-	SHAW}', "");
Expect(0, 66687, '\p{^Is_Sc=-	SHAW}', "");
Expect(0, 66687, '\P{Is_Sc=-	SHAW}', "");
Expect(1, 66687, '\P{^Is_Sc=-	SHAW}', "");
Expect(0, 66639, '\p{Is_Sc=-	SHAW}', "");
Expect(1, 66639, '\p{^Is_Sc=-	SHAW}', "");
Expect(1, 66639, '\P{Is_Sc=-	SHAW}', "");
Expect(0, 66639, '\P{^Is_Sc=-	SHAW}', "");
Error('\p{Script=/a/ _Canadian	Aboriginal}');
Error('\P{Script=/a/ _Canadian	Aboriginal}');
Expect(1, 5759, '\p{Script=canadianaboriginal}', "");
Expect(0, 5759, '\p{^Script=canadianaboriginal}', "");
Expect(0, 5759, '\P{Script=canadianaboriginal}', "");
Expect(1, 5759, '\P{^Script=canadianaboriginal}', "");
Expect(0, 5119, '\p{Script=canadianaboriginal}', "");
Expect(1, 5119, '\p{^Script=canadianaboriginal}', "");
Expect(1, 5119, '\P{Script=canadianaboriginal}', "");
Expect(0, 5119, '\P{^Script=canadianaboriginal}', "");
Expect(1, 5759, '\p{Script=-canadian_Aboriginal}', "");
Expect(0, 5759, '\p{^Script=-canadian_Aboriginal}', "");
Expect(0, 5759, '\P{Script=-canadian_Aboriginal}', "");
Expect(1, 5759, '\P{^Script=-canadian_Aboriginal}', "");
Expect(0, 5119, '\p{Script=-canadian_Aboriginal}', "");
Expect(1, 5119, '\p{^Script=-canadian_Aboriginal}', "");
Expect(1, 5119, '\P{Script=-canadian_Aboriginal}', "");
Expect(0, 5119, '\P{^Script=-canadian_Aboriginal}', "");
Error('\p{Sc=- cans/a/}');
Error('\P{Sc=- cans/a/}');
Expect(1, 5759, '\p{Sc=cans}', "");
Expect(0, 5759, '\p{^Sc=cans}', "");
Expect(0, 5759, '\P{Sc=cans}', "");
Expect(1, 5759, '\P{^Sc=cans}', "");
Expect(0, 5119, '\p{Sc=cans}', "");
Expect(1, 5119, '\p{^Sc=cans}', "");
Expect(1, 5119, '\P{Sc=cans}', "");
Expect(0, 5119, '\P{^Sc=cans}', "");
Expect(1, 5759, '\p{Sc=__Cans}', "");
Expect(0, 5759, '\p{^Sc=__Cans}', "");
Expect(0, 5759, '\P{Sc=__Cans}', "");
Expect(1, 5759, '\P{^Sc=__Cans}', "");
Expect(0, 5119, '\p{Sc=__Cans}', "");
Expect(1, 5119, '\p{^Sc=__Cans}', "");
Expect(1, 5119, '\P{Sc=__Cans}', "");
Expect(0, 5119, '\P{^Sc=__Cans}', "");
Error('\p{Is_Script=	/a/CANADIAN	Aboriginal}');
Error('\P{Is_Script=	/a/CANADIAN	Aboriginal}');
Expect(1, 5759, '\p{Is_Script=canadianaboriginal}', "");
Expect(0, 5759, '\p{^Is_Script=canadianaboriginal}', "");
Expect(0, 5759, '\P{Is_Script=canadianaboriginal}', "");
Expect(1, 5759, '\P{^Is_Script=canadianaboriginal}', "");
Expect(0, 5119, '\p{Is_Script=canadianaboriginal}', "");
Expect(1, 5119, '\p{^Is_Script=canadianaboriginal}', "");
Expect(1, 5119, '\P{Is_Script=canadianaboriginal}', "");
Expect(0, 5119, '\P{^Is_Script=canadianaboriginal}', "");
Expect(1, 5759, '\p{Is_Script=-canadianABORIGINAL}', "");
Expect(0, 5759, '\p{^Is_Script=-canadianABORIGINAL}', "");
Expect(0, 5759, '\P{Is_Script=-canadianABORIGINAL}', "");
Expect(1, 5759, '\P{^Is_Script=-canadianABORIGINAL}', "");
Expect(0, 5119, '\p{Is_Script=-canadianABORIGINAL}', "");
Expect(1, 5119, '\p{^Is_Script=-canadianABORIGINAL}', "");
Expect(1, 5119, '\P{Is_Script=-canadianABORIGINAL}', "");
Expect(0, 5119, '\P{^Is_Script=-canadianABORIGINAL}', "");
Error('\p{Is_Sc=/a/CANS}');
Error('\P{Is_Sc=/a/CANS}');
Expect(1, 5759, '\p{Is_Sc=cans}', "");
Expect(0, 5759, '\p{^Is_Sc=cans}', "");
Expect(0, 5759, '\P{Is_Sc=cans}', "");
Expect(1, 5759, '\P{^Is_Sc=cans}', "");
Expect(0, 5119, '\p{Is_Sc=cans}', "");
Expect(1, 5119, '\p{^Is_Sc=cans}', "");
Expect(1, 5119, '\P{Is_Sc=cans}', "");
Expect(0, 5119, '\P{^Is_Sc=cans}', "");
Error('\p{Script=  Old/a/SOUTH ARABIAN}');
Error('\P{Script=  Old/a/SOUTH ARABIAN}');
Expect(1, 68223, '\p{Script=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Script=oldsoutharabian}', "");
Expect(0, 68223, '\P{Script=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Script=oldsoutharabian}', "");
Expect(0, 68191, '\p{Script=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Script=oldsoutharabian}', "");
Expect(1, 68191, '\P{Script=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Script=oldsoutharabian}', "");
Expect(1, 68223, '\p{Script=- old_SOUTH_Arabian}', "");
Expect(0, 68223, '\p{^Script=- old_SOUTH_Arabian}', "");
Expect(0, 68223, '\P{Script=- old_SOUTH_Arabian}', "");
Expect(1, 68223, '\P{^Script=- old_SOUTH_Arabian}', "");
Expect(0, 68191, '\p{Script=- old_SOUTH_Arabian}', "");
Expect(1, 68191, '\p{^Script=- old_SOUTH_Arabian}', "");
Expect(1, 68191, '\P{Script=- old_SOUTH_Arabian}', "");
Expect(0, 68191, '\P{^Script=- old_SOUTH_Arabian}', "");
Error('\p{Sc=  Sarb/a/}');
Error('\P{Sc=  Sarb/a/}');
Expect(1, 68223, '\p{Sc=sarb}', "");
Expect(0, 68223, '\p{^Sc=sarb}', "");
Expect(0, 68223, '\P{Sc=sarb}', "");
Expect(1, 68223, '\P{^Sc=sarb}', "");
Expect(0, 68191, '\p{Sc=sarb}', "");
Expect(1, 68191, '\p{^Sc=sarb}', "");
Expect(1, 68191, '\P{Sc=sarb}', "");
Expect(0, 68191, '\P{^Sc=sarb}', "");
Expect(1, 68223, '\p{Sc= 	sarb}', "");
Expect(0, 68223, '\p{^Sc= 	sarb}', "");
Expect(0, 68223, '\P{Sc= 	sarb}', "");
Expect(1, 68223, '\P{^Sc= 	sarb}', "");
Expect(0, 68191, '\p{Sc= 	sarb}', "");
Expect(1, 68191, '\p{^Sc= 	sarb}', "");
Expect(1, 68191, '\P{Sc= 	sarb}', "");
Expect(0, 68191, '\P{^Sc= 	sarb}', "");
Error('\p{Is_Script: _OLD_south_Arabian:=}');
Error('\P{Is_Script: _OLD_south_Arabian:=}');
Expect(1, 68223, '\p{Is_Script=oldsoutharabian}', "");
Expect(0, 68223, '\p{^Is_Script=oldsoutharabian}', "");
Expect(0, 68223, '\P{Is_Script=oldsoutharabian}', "");
Expect(1, 68223, '\P{^Is_Script=oldsoutharabian}', "");
Expect(0, 68191, '\p{Is_Script=oldsoutharabian}', "");
Expect(1, 68191, '\p{^Is_Script=oldsoutharabian}', "");
Expect(1, 68191, '\P{Is_Script=oldsoutharabian}', "");
Expect(0, 68191, '\P{^Is_Script=oldsoutharabian}', "");
Expect(1, 68223, '\p{Is_Script: - Old_SouthARABIAN}', "");
Expect(0, 68223, '\p{^Is_Script: - Old_SouthARABIAN}', "");
Expect(0, 68223, '\P{Is_Script: - Old_SouthARABIAN}', "");
Expect(1, 68223, '\P{^Is_Script: - Old_SouthARABIAN}', "");
Expect(0, 68191, '\p{Is_Script: - Old_SouthARABIAN}', "");
Expect(1, 68191, '\p{^Is_Script: - Old_SouthARABIAN}', "");
Expect(1, 68191, '\P{Is_Script: - Old_SouthARABIAN}', "");
Expect(0, 68191, '\P{^Is_Script: - Old_SouthARABIAN}', "");
Error('\p{Is_Sc=:= 	SARB}');
Error('\P{Is_Sc=:= 	SARB}');
Expect(1, 68223, '\p{Is_Sc=sarb}', "");
Expect(0, 68223, '\p{^Is_Sc=sarb}', "");
Expect(0, 68223, '\P{Is_Sc=sarb}', "");
Expect(1, 68223, '\P{^Is_Sc=sarb}', "");
Expect(0, 68191, '\p{Is_Sc=sarb}', "");
Expect(1, 68191, '\p{^Is_Sc=sarb}', "");
Expect(1, 68191, '\P{Is_Sc=sarb}', "");
Expect(0, 68191, '\P{^Is_Sc=sarb}', "");
Expect(1, 68223, '\p{Is_Sc= -Sarb}', "");
Expect(0, 68223, '\p{^Is_Sc= -Sarb}', "");
Expect(0, 68223, '\P{Is_Sc= -Sarb}', "");
Expect(1, 68223, '\P{^Is_Sc= -Sarb}', "");
Expect(0, 68191, '\p{Is_Sc= -Sarb}', "");
Expect(1, 68191, '\p{^Is_Sc= -Sarb}', "");
Expect(1, 68191, '\P{Is_Sc= -Sarb}', "");
Expect(0, 68191, '\P{^Is_Sc= -Sarb}', "");
Error('\p{Script=	/a/Lydian}');
Error('\P{Script=	/a/Lydian}');
Expect(1, 67897, '\p{Script=lydian}', "");
Expect(0, 67897, '\p{^Script=lydian}', "");
Expect(0, 67897, '\P{Script=lydian}', "");
Expect(1, 67897, '\P{^Script=lydian}', "");
Expect(0, 67871, '\p{Script=lydian}', "");
Expect(1, 67871, '\p{^Script=lydian}', "");
Expect(1, 67871, '\P{Script=lydian}', "");
Expect(0, 67871, '\P{^Script=lydian}', "");
Expect(1, 67897, '\p{Script= _lydian}', "");
Expect(0, 67897, '\p{^Script= _lydian}', "");
Expect(0, 67897, '\P{Script= _lydian}', "");
Expect(1, 67897, '\P{^Script= _lydian}', "");
Expect(0, 67871, '\p{Script= _lydian}', "");
Expect(1, 67871, '\p{^Script= _lydian}', "");
Expect(1, 67871, '\P{Script= _lydian}', "");
Expect(0, 67871, '\P{^Script= _lydian}', "");
Error('\p{Sc=:=LYDI}');
Error('\P{Sc=:=LYDI}');
Expect(1, 67897, '\p{Sc=lydi}', "");
Expect(0, 67897, '\p{^Sc=lydi}', "");
Expect(0, 67897, '\P{Sc=lydi}', "");
Expect(1, 67897, '\P{^Sc=lydi}', "");
Expect(0, 67871, '\p{Sc=lydi}', "");
Expect(1, 67871, '\p{^Sc=lydi}', "");
Expect(1, 67871, '\P{Sc=lydi}', "");
Expect(0, 67871, '\P{^Sc=lydi}', "");
Expect(1, 67897, '\p{Sc=_	Lydi}', "");
Expect(0, 67897, '\p{^Sc=_	Lydi}', "");
Expect(0, 67897, '\P{Sc=_	Lydi}', "");
Expect(1, 67897, '\P{^Sc=_	Lydi}', "");
Expect(0, 67871, '\p{Sc=_	Lydi}', "");
Expect(1, 67871, '\p{^Sc=_	Lydi}', "");
Expect(1, 67871, '\P{Sc=_	Lydi}', "");
Expect(0, 67871, '\P{^Sc=_	Lydi}', "");
Error('\p{Is_Script= /a/Lydian}');
Error('\P{Is_Script= /a/Lydian}');
Expect(1, 67897, '\p{Is_Script=lydian}', "");
Expect(0, 67897, '\p{^Is_Script=lydian}', "");
Expect(0, 67897, '\P{Is_Script=lydian}', "");
Expect(1, 67897, '\P{^Is_Script=lydian}', "");
Expect(0, 67871, '\p{Is_Script=lydian}', "");
Expect(1, 67871, '\p{^Is_Script=lydian}', "");
Expect(1, 67871, '\P{Is_Script=lydian}', "");
Expect(0, 67871, '\P{^Is_Script=lydian}', "");
Expect(1, 67897, '\p{Is_Script=_-lydian}', "");
Expect(0, 67897, '\p{^Is_Script=_-lydian}', "");
Expect(0, 67897, '\P{Is_Script=_-lydian}', "");
Expect(1, 67897, '\P{^Is_Script=_-lydian}', "");
Expect(0, 67871, '\p{Is_Script=_-lydian}', "");
Expect(1, 67871, '\p{^Is_Script=_-lydian}', "");
Expect(1, 67871, '\P{Is_Script=_-lydian}', "");
Expect(0, 67871, '\P{^Is_Script=_-lydian}', "");
Error('\p{Is_Sc=_Lydi/a/}');
Error('\P{Is_Sc=_Lydi/a/}');
Expect(1, 67897, '\p{Is_Sc=lydi}', "");
Expect(0, 67897, '\p{^Is_Sc=lydi}', "");
Expect(0, 67897, '\P{Is_Sc=lydi}', "");
Expect(1, 67897, '\P{^Is_Sc=lydi}', "");
Expect(0, 67871, '\p{Is_Sc=lydi}', "");
Expect(1, 67871, '\p{^Is_Sc=lydi}', "");
Expect(1, 67871, '\P{Is_Sc=lydi}', "");
Expect(0, 67871, '\P{^Is_Sc=lydi}', "");
Expect(1, 67897, '\p{Is_Sc=	_Lydi}', "");
Expect(0, 67897, '\p{^Is_Sc=	_Lydi}', "");
Expect(0, 67897, '\P{Is_Sc=	_Lydi}', "");
Expect(1, 67897, '\P{^Is_Sc=	_Lydi}', "");
Expect(0, 67871, '\p{Is_Sc=	_Lydi}', "");
Expect(1, 67871, '\p{^Is_Sc=	_Lydi}', "");
Expect(1, 67871, '\P{Is_Sc=	_Lydi}', "");
Expect(0, 67871, '\P{^Is_Sc=	_Lydi}', "");
Error('\p{Script=:=	 mongolian}');
Error('\P{Script=:=	 mongolian}');
Expect(1, 6145, '\p{Script=mongolian}', "");
Expect(0, 6145, '\p{^Script=mongolian}', "");
Expect(0, 6145, '\P{Script=mongolian}', "");
Expect(1, 6145, '\P{^Script=mongolian}', "");
Expect(0, 6143, '\p{Script=mongolian}', "");
Expect(1, 6143, '\p{^Script=mongolian}', "");
Expect(1, 6143, '\P{Script=mongolian}', "");
Expect(0, 6143, '\P{^Script=mongolian}', "");
Expect(1, 6145, '\p{Script=--Mongolian}', "");
Expect(0, 6145, '\p{^Script=--Mongolian}', "");
Expect(0, 6145, '\P{Script=--Mongolian}', "");
Expect(1, 6145, '\P{^Script=--Mongolian}', "");
Expect(0, 6143, '\p{Script=--Mongolian}', "");
Expect(1, 6143, '\p{^Script=--Mongolian}', "");
Expect(1, 6143, '\P{Script=--Mongolian}', "");
Expect(0, 6143, '\P{^Script=--Mongolian}', "");
Error('\p{Sc=:=		MONG}');
Error('\P{Sc=:=		MONG}');
Expect(1, 6145, '\p{Sc=mong}', "");
Expect(0, 6145, '\p{^Sc=mong}', "");
Expect(0, 6145, '\P{Sc=mong}', "");
Expect(1, 6145, '\P{^Sc=mong}', "");
Expect(0, 6143, '\p{Sc=mong}', "");
Expect(1, 6143, '\p{^Sc=mong}', "");
Expect(1, 6143, '\P{Sc=mong}', "");
Expect(0, 6143, '\P{^Sc=mong}', "");
Expect(1, 6145, '\p{Sc=Mong}', "");
Expect(0, 6145, '\p{^Sc=Mong}', "");
Expect(0, 6145, '\P{Sc=Mong}', "");
Expect(1, 6145, '\P{^Sc=Mong}', "");
Expect(0, 6143, '\p{Sc=Mong}', "");
Expect(1, 6143, '\p{^Sc=Mong}', "");
Expect(1, 6143, '\P{Sc=Mong}', "");
Expect(0, 6143, '\P{^Sc=Mong}', "");
Error('\p{Is_Script=:= MONGOLIAN}');
Error('\P{Is_Script=:= MONGOLIAN}');
Expect(1, 6145, '\p{Is_Script=mongolian}', "");
Expect(0, 6145, '\p{^Is_Script=mongolian}', "");
Expect(0, 6145, '\P{Is_Script=mongolian}', "");
Expect(1, 6145, '\P{^Is_Script=mongolian}', "");
Expect(0, 6143, '\p{Is_Script=mongolian}', "");
Expect(1, 6143, '\p{^Is_Script=mongolian}', "");
Expect(1, 6143, '\P{Is_Script=mongolian}', "");
Expect(0, 6143, '\P{^Is_Script=mongolian}', "");
Expect(1, 6145, '\p{Is_Script=_ Mongolian}', "");
Expect(0, 6145, '\p{^Is_Script=_ Mongolian}', "");
Expect(0, 6145, '\P{Is_Script=_ Mongolian}', "");
Expect(1, 6145, '\P{^Is_Script=_ Mongolian}', "");
Expect(0, 6143, '\p{Is_Script=_ Mongolian}', "");
Expect(1, 6143, '\p{^Is_Script=_ Mongolian}', "");
Expect(1, 6143, '\P{Is_Script=_ Mongolian}', "");
Expect(0, 6143, '\P{^Is_Script=_ Mongolian}', "");
Error('\p{Is_Sc=- Mong/a/}');
Error('\P{Is_Sc=- Mong/a/}');
Expect(1, 6145, '\p{Is_Sc=mong}', "");
Expect(0, 6145, '\p{^Is_Sc=mong}', "");
Expect(0, 6145, '\P{Is_Sc=mong}', "");
Expect(1, 6145, '\P{^Is_Sc=mong}', "");
Expect(0, 6143, '\p{Is_Sc=mong}', "");
Expect(1, 6143, '\p{^Is_Sc=mong}', "");
Expect(1, 6143, '\P{Is_Sc=mong}', "");
Expect(0, 6143, '\P{^Is_Sc=mong}', "");
Expect(1, 6145, '\p{Is_Sc=	_Mong}', "");
Expect(0, 6145, '\p{^Is_Sc=	_Mong}', "");
Expect(0, 6145, '\P{Is_Sc=	_Mong}', "");
Expect(1, 6145, '\P{^Is_Sc=	_Mong}', "");
Expect(0, 6143, '\p{Is_Sc=	_Mong}', "");
Expect(1, 6143, '\p{^Is_Sc=	_Mong}', "");
Expect(1, 6143, '\P{Is_Sc=	_Mong}', "");
Expect(0, 6143, '\P{^Is_Sc=	_Mong}', "");
Error('\p{Script=/a/		LAO}');
Error('\P{Script=/a/		LAO}');
Expect(1, 3714, '\p{Script=lao}', "");
Expect(0, 3714, '\p{^Script=lao}', "");
Expect(0, 3714, '\P{Script=lao}', "");
Expect(1, 3714, '\P{^Script=lao}', "");
Expect(0, 3712, '\p{Script=lao}', "");
Expect(1, 3712, '\p{^Script=lao}', "");
Expect(1, 3712, '\P{Script=lao}', "");
Expect(0, 3712, '\P{^Script=lao}', "");
Expect(1, 3714, '\p{Script=	_LAO}', "");
Expect(0, 3714, '\p{^Script=	_LAO}', "");
Expect(0, 3714, '\P{Script=	_LAO}', "");
Expect(1, 3714, '\P{^Script=	_LAO}', "");
Expect(0, 3712, '\p{Script=	_LAO}', "");
Expect(1, 3712, '\p{^Script=	_LAO}', "");
Expect(1, 3712, '\P{Script=	_LAO}', "");
Expect(0, 3712, '\P{^Script=	_LAO}', "");
Error('\p{Sc=	:=Laoo}');
Error('\P{Sc=	:=Laoo}');
Expect(1, 3714, '\p{Sc=laoo}', "");
Expect(0, 3714, '\p{^Sc=laoo}', "");
Expect(0, 3714, '\P{Sc=laoo}', "");
Expect(1, 3714, '\P{^Sc=laoo}', "");
Expect(0, 3712, '\p{Sc=laoo}', "");
Expect(1, 3712, '\p{^Sc=laoo}', "");
Expect(1, 3712, '\P{Sc=laoo}', "");
Expect(0, 3712, '\P{^Sc=laoo}', "");
Expect(1, 3714, '\p{Sc=	_LAOO}', "");
Expect(0, 3714, '\p{^Sc=	_LAOO}', "");
Expect(0, 3714, '\P{Sc=	_LAOO}', "");
Expect(1, 3714, '\P{^Sc=	_LAOO}', "");
Expect(0, 3712, '\p{Sc=	_LAOO}', "");
Expect(1, 3712, '\p{^Sc=	_LAOO}', "");
Expect(1, 3712, '\P{Sc=	_LAOO}', "");
Expect(0, 3712, '\P{^Sc=	_LAOO}', "");
Error('\p{Is_Script= -Lao:=}');
Error('\P{Is_Script= -Lao:=}');
Expect(1, 3714, '\p{Is_Script=lao}', "");
Expect(0, 3714, '\p{^Is_Script=lao}', "");
Expect(0, 3714, '\P{Is_Script=lao}', "");
Expect(1, 3714, '\P{^Is_Script=lao}', "");
Expect(0, 3712, '\p{Is_Script=lao}', "");
Expect(1, 3712, '\p{^Is_Script=lao}', "");
Expect(1, 3712, '\P{Is_Script=lao}', "");
Expect(0, 3712, '\P{^Is_Script=lao}', "");
Expect(1, 3714, '\p{Is_Script=_LAO}', "");
Expect(0, 3714, '\p{^Is_Script=_LAO}', "");
Expect(0, 3714, '\P{Is_Script=_LAO}', "");
Expect(1, 3714, '\P{^Is_Script=_LAO}', "");
Expect(0, 3712, '\p{Is_Script=_LAO}', "");
Expect(1, 3712, '\p{^Is_Script=_LAO}', "");
Expect(1, 3712, '\P{Is_Script=_LAO}', "");
Expect(0, 3712, '\P{^Is_Script=_LAO}', "");
Error('\p{Is_Sc=LAOO:=}');
Error('\P{Is_Sc=LAOO:=}');
Expect(1, 3714, '\p{Is_Sc=laoo}', "");
Expect(0, 3714, '\p{^Is_Sc=laoo}', "");
Expect(0, 3714, '\P{Is_Sc=laoo}', "");
Expect(1, 3714, '\P{^Is_Sc=laoo}', "");
Expect(0, 3712, '\p{Is_Sc=laoo}', "");
Expect(1, 3712, '\p{^Is_Sc=laoo}', "");
Expect(1, 3712, '\P{Is_Sc=laoo}', "");
Expect(0, 3712, '\P{^Is_Sc=laoo}', "");
Expect(1, 3714, '\p{Is_Sc=  LAOO}', "");
Expect(0, 3714, '\p{^Is_Sc=  LAOO}', "");
Expect(0, 3714, '\P{Is_Sc=  LAOO}', "");
Expect(1, 3714, '\P{^Is_Sc=  LAOO}', "");
Expect(0, 3712, '\p{Is_Sc=  LAOO}', "");
Expect(1, 3712, '\p{^Is_Sc=  LAOO}', "");
Expect(1, 3712, '\P{Is_Sc=  LAOO}', "");
Expect(0, 3712, '\P{^Is_Sc=  LAOO}', "");
Error('\p{Script=/a/Cyrillic}');
Error('\P{Script=/a/Cyrillic}');
Expect(1, 1156, '\p{Script=cyrillic}', "");
Expect(0, 1156, '\p{^Script=cyrillic}', "");
Expect(0, 1156, '\P{Script=cyrillic}', "");
Expect(1, 1156, '\P{^Script=cyrillic}', "");
Expect(0, 1023, '\p{Script=cyrillic}', "");
Expect(1, 1023, '\p{^Script=cyrillic}', "");
Expect(1, 1023, '\P{Script=cyrillic}', "");
Expect(0, 1023, '\P{^Script=cyrillic}', "");
Expect(1, 1156, '\p{Script=_CYRILLIC}', "");
Expect(0, 1156, '\p{^Script=_CYRILLIC}', "");
Expect(0, 1156, '\P{Script=_CYRILLIC}', "");
Expect(1, 1156, '\P{^Script=_CYRILLIC}', "");
Expect(0, 1023, '\p{Script=_CYRILLIC}', "");
Expect(1, 1023, '\p{^Script=_CYRILLIC}', "");
Expect(1, 1023, '\P{Script=_CYRILLIC}', "");
Expect(0, 1023, '\P{^Script=_CYRILLIC}', "");
Error('\p{Sc=/a/_ Cyrl}');
Error('\P{Sc=/a/_ Cyrl}');
Expect(1, 1156, '\p{Sc=cyrl}', "");
Expect(0, 1156, '\p{^Sc=cyrl}', "");
Expect(0, 1156, '\P{Sc=cyrl}', "");
Expect(1, 1156, '\P{^Sc=cyrl}', "");
Expect(0, 1023, '\p{Sc=cyrl}', "");
Expect(1, 1023, '\p{^Sc=cyrl}', "");
Expect(1, 1023, '\P{Sc=cyrl}', "");
Expect(0, 1023, '\P{^Sc=cyrl}', "");
Expect(1, 1156, '\p{Sc=-_CYRL}', "");
Expect(0, 1156, '\p{^Sc=-_CYRL}', "");
Expect(0, 1156, '\P{Sc=-_CYRL}', "");
Expect(1, 1156, '\P{^Sc=-_CYRL}', "");
Expect(0, 1023, '\p{Sc=-_CYRL}', "");
Expect(1, 1023, '\p{^Sc=-_CYRL}', "");
Expect(1, 1023, '\P{Sc=-_CYRL}', "");
Expect(0, 1023, '\P{^Sc=-_CYRL}', "");
Error('\p{Is_Script:		-Cyrillic/a/}');
Error('\P{Is_Script:		-Cyrillic/a/}');
Expect(1, 1156, '\p{Is_Script=cyrillic}', "");
Expect(0, 1156, '\p{^Is_Script=cyrillic}', "");
Expect(0, 1156, '\P{Is_Script=cyrillic}', "");
Expect(1, 1156, '\P{^Is_Script=cyrillic}', "");
Expect(0, 1023, '\p{Is_Script=cyrillic}', "");
Expect(1, 1023, '\p{^Is_Script=cyrillic}', "");
Expect(1, 1023, '\P{Is_Script=cyrillic}', "");
Expect(0, 1023, '\P{^Is_Script=cyrillic}', "");
Expect(1, 1156, '\p{Is_Script=_-Cyrillic}', "");
Expect(0, 1156, '\p{^Is_Script=_-Cyrillic}', "");
Expect(0, 1156, '\P{Is_Script=_-Cyrillic}', "");
Expect(1, 1156, '\P{^Is_Script=_-Cyrillic}', "");
Expect(0, 1023, '\p{Is_Script=_-Cyrillic}', "");
Expect(1, 1023, '\p{^Is_Script=_-Cyrillic}', "");
Expect(1, 1023, '\P{Is_Script=_-Cyrillic}', "");
Expect(0, 1023, '\P{^Is_Script=_-Cyrillic}', "");
Error('\p{Is_Sc=:=_	cyrl}');
Error('\P{Is_Sc=:=_	cyrl}');
Expect(1, 1156, '\p{Is_Sc: cyrl}', "");
Expect(0, 1156, '\p{^Is_Sc: cyrl}', "");
Expect(0, 1156, '\P{Is_Sc: cyrl}', "");
Expect(1, 1156, '\P{^Is_Sc: cyrl}', "");
Expect(0, 1023, '\p{Is_Sc: cyrl}', "");
Expect(1, 1023, '\p{^Is_Sc: cyrl}', "");
Expect(1, 1023, '\P{Is_Sc: cyrl}', "");
Expect(0, 1023, '\P{^Is_Sc: cyrl}', "");
Expect(1, 1156, '\p{Is_Sc=_ Cyrl}', "");
Expect(0, 1156, '\p{^Is_Sc=_ Cyrl}', "");
Expect(0, 1156, '\P{Is_Sc=_ Cyrl}', "");
Expect(1, 1156, '\P{^Is_Sc=_ Cyrl}', "");
Expect(0, 1023, '\p{Is_Sc=_ Cyrl}', "");
Expect(1, 1023, '\p{^Is_Sc=_ Cyrl}', "");
Expect(1, 1023, '\P{Is_Sc=_ Cyrl}', "");
Expect(0, 1023, '\P{^Is_Sc=_ Cyrl}', "");
Error('\p{Script=:=Hiragana}');
Error('\P{Script=:=Hiragana}');
Expect(1, 12438, '\p{Script=hiragana}', "");
Expect(0, 12438, '\p{^Script=hiragana}', "");
Expect(0, 12438, '\P{Script=hiragana}', "");
Expect(1, 12438, '\P{^Script=hiragana}', "");
Expect(0, 12352, '\p{Script=hiragana}', "");
Expect(1, 12352, '\p{^Script=hiragana}', "");
Expect(1, 12352, '\P{Script=hiragana}', "");
Expect(0, 12352, '\P{^Script=hiragana}', "");
Expect(1, 12438, '\p{Script= hiragana}', "");
Expect(0, 12438, '\p{^Script= hiragana}', "");
Expect(0, 12438, '\P{Script= hiragana}', "");
Expect(1, 12438, '\P{^Script= hiragana}', "");
Expect(0, 12352, '\p{Script= hiragana}', "");
Expect(1, 12352, '\p{^Script= hiragana}', "");
Expect(1, 12352, '\P{Script= hiragana}', "");
Expect(0, 12352, '\P{^Script= hiragana}', "");
Error('\p{Sc=:=	-HIRA}');
Error('\P{Sc=:=	-HIRA}');
Expect(1, 12438, '\p{Sc:hira}', "");
Expect(0, 12438, '\p{^Sc:hira}', "");
Expect(0, 12438, '\P{Sc:hira}', "");
Expect(1, 12438, '\P{^Sc:hira}', "");
Expect(0, 12352, '\p{Sc:hira}', "");
Expect(1, 12352, '\p{^Sc:hira}', "");
Expect(1, 12352, '\P{Sc:hira}', "");
Expect(0, 12352, '\P{^Sc:hira}', "");
Expect(1, 12438, '\p{Sc= 	hira}', "");
Expect(0, 12438, '\p{^Sc= 	hira}', "");
Expect(0, 12438, '\P{Sc= 	hira}', "");
Expect(1, 12438, '\P{^Sc= 	hira}', "");
Expect(0, 12352, '\p{Sc= 	hira}', "");
Expect(1, 12352, '\p{^Sc= 	hira}', "");
Expect(1, 12352, '\P{Sc= 	hira}', "");
Expect(0, 12352, '\P{^Sc= 	hira}', "");
Error('\p{Is_Script=/a/Hiragana}');
Error('\P{Is_Script=/a/Hiragana}');
Expect(1, 12438, '\p{Is_Script=hiragana}', "");
Expect(0, 12438, '\p{^Is_Script=hiragana}', "");
Expect(0, 12438, '\P{Is_Script=hiragana}', "");
Expect(1, 12438, '\P{^Is_Script=hiragana}', "");
Expect(0, 12352, '\p{Is_Script=hiragana}', "");
Expect(1, 12352, '\p{^Is_Script=hiragana}', "");
Expect(1, 12352, '\P{Is_Script=hiragana}', "");
Expect(0, 12352, '\P{^Is_Script=hiragana}', "");
Expect(1, 12438, '\p{Is_Script=	_Hiragana}', "");
Expect(0, 12438, '\p{^Is_Script=	_Hiragana}', "");
Expect(0, 12438, '\P{Is_Script=	_Hiragana}', "");
Expect(1, 12438, '\P{^Is_Script=	_Hiragana}', "");
Expect(0, 12352, '\p{Is_Script=	_Hiragana}', "");
Expect(1, 12352, '\p{^Is_Script=	_Hiragana}', "");
Expect(1, 12352, '\P{Is_Script=	_Hiragana}', "");
Expect(0, 12352, '\P{^Is_Script=	_Hiragana}', "");
Error('\p{Is_Sc=-:=Hira}');
Error('\P{Is_Sc=-:=Hira}');
Expect(1, 12438, '\p{Is_Sc=hira}', "");
Expect(0, 12438, '\p{^Is_Sc=hira}', "");
Expect(0, 12438, '\P{Is_Sc=hira}', "");
Expect(1, 12438, '\P{^Is_Sc=hira}', "");
Expect(0, 12352, '\p{Is_Sc=hira}', "");
Expect(1, 12352, '\p{^Is_Sc=hira}', "");
Expect(1, 12352, '\P{Is_Sc=hira}', "");
Expect(0, 12352, '\P{^Is_Sc=hira}', "");
Expect(1, 12438, '\p{Is_Sc= 	Hira}', "");
Expect(0, 12438, '\p{^Is_Sc= 	Hira}', "");
Expect(0, 12438, '\P{Is_Sc= 	Hira}', "");
Expect(1, 12438, '\P{^Is_Sc= 	Hira}', "");
Expect(0, 12352, '\p{Is_Sc= 	Hira}', "");
Expect(1, 12352, '\p{^Is_Sc= 	Hira}', "");
Expect(1, 12352, '\P{Is_Sc= 	Hira}', "");
Expect(0, 12352, '\P{^Is_Sc= 	Hira}', "");
Error('\p{Script=-/a/Bengali}');
Error('\P{Script=-/a/Bengali}');
Expect(1, 2435, '\p{Script=bengali}', "");
Expect(0, 2435, '\p{^Script=bengali}', "");
Expect(0, 2435, '\P{Script=bengali}', "");
Expect(1, 2435, '\P{^Script=bengali}', "");
Expect(0, 2432, '\p{Script=bengali}', "");
Expect(1, 2432, '\p{^Script=bengali}', "");
Expect(1, 2432, '\P{Script=bengali}', "");
Expect(0, 2432, '\P{^Script=bengali}', "");
Expect(1, 2435, '\p{Script:   	-BENGALI}', "");
Expect(0, 2435, '\p{^Script:   	-BENGALI}', "");
Expect(0, 2435, '\P{Script:   	-BENGALI}', "");
Expect(1, 2435, '\P{^Script:   	-BENGALI}', "");
Expect(0, 2432, '\p{Script:   	-BENGALI}', "");
Expect(1, 2432, '\p{^Script:   	-BENGALI}', "");
Expect(1, 2432, '\P{Script:   	-BENGALI}', "");
Expect(0, 2432, '\P{^Script:   	-BENGALI}', "");
Error('\p{Sc=/a/-BENG}');
Error('\P{Sc=/a/-BENG}');
Expect(1, 2435, '\p{Sc=beng}', "");
Expect(0, 2435, '\p{^Sc=beng}', "");
Expect(0, 2435, '\P{Sc=beng}', "");
Expect(1, 2435, '\P{^Sc=beng}', "");
Expect(0, 2432, '\p{Sc=beng}', "");
Expect(1, 2432, '\p{^Sc=beng}', "");
Expect(1, 2432, '\P{Sc=beng}', "");
Expect(0, 2432, '\P{^Sc=beng}', "");
Expect(1, 2435, '\p{Sc=- Beng}', "");
Expect(0, 2435, '\p{^Sc=- Beng}', "");
Expect(0, 2435, '\P{Sc=- Beng}', "");
Expect(1, 2435, '\P{^Sc=- Beng}', "");
Expect(0, 2432, '\p{Sc=- Beng}', "");
Expect(1, 2432, '\p{^Sc=- Beng}', "");
Expect(1, 2432, '\P{Sc=- Beng}', "");
Expect(0, 2432, '\P{^Sc=- Beng}', "");
Error('\p{Is_Script= :=bengali}');
Error('\P{Is_Script= :=bengali}');
Expect(1, 2435, '\p{Is_Script=bengali}', "");
Expect(0, 2435, '\p{^Is_Script=bengali}', "");
Expect(0, 2435, '\P{Is_Script=bengali}', "");
Expect(1, 2435, '\P{^Is_Script=bengali}', "");
Expect(0, 2432, '\p{Is_Script=bengali}', "");
Expect(1, 2432, '\p{^Is_Script=bengali}', "");
Expect(1, 2432, '\P{Is_Script=bengali}', "");
Expect(0, 2432, '\P{^Is_Script=bengali}', "");
Expect(1, 2435, '\p{Is_Script=- Bengali}', "");
Expect(0, 2435, '\p{^Is_Script=- Bengali}', "");
Expect(0, 2435, '\P{Is_Script=- Bengali}', "");
Expect(1, 2435, '\P{^Is_Script=- Bengali}', "");
Expect(0, 2432, '\p{Is_Script=- Bengali}', "");
Expect(1, 2432, '\p{^Is_Script=- Bengali}', "");
Expect(1, 2432, '\P{Is_Script=- Bengali}', "");
Expect(0, 2432, '\P{^Is_Script=- Bengali}', "");
Error('\p{Is_Sc=:=  Beng}');
Error('\P{Is_Sc=:=  Beng}');
Expect(1, 2435, '\p{Is_Sc=beng}', "");
Expect(0, 2435, '\p{^Is_Sc=beng}', "");
Expect(0, 2435, '\P{Is_Sc=beng}', "");
Expect(1, 2435, '\P{^Is_Sc=beng}', "");
Expect(0, 2432, '\p{Is_Sc=beng}', "");
Expect(1, 2432, '\p{^Is_Sc=beng}', "");
Expect(1, 2432, '\P{Is_Sc=beng}', "");
Expect(0, 2432, '\P{^Is_Sc=beng}', "");
Expect(1, 2435, '\p{Is_Sc=- Beng}', "");
Expect(0, 2435, '\p{^Is_Sc=- Beng}', "");
Expect(0, 2435, '\P{Is_Sc=- Beng}', "");
Expect(1, 2435, '\P{^Is_Sc=- Beng}', "");
Expect(0, 2432, '\p{Is_Sc=- Beng}', "");
Expect(1, 2432, '\p{^Is_Sc=- Beng}', "");
Expect(1, 2432, '\P{Is_Sc=- Beng}', "");
Expect(0, 2432, '\P{^Is_Sc=- Beng}', "");
Error('\p{Script= /a/BRAILLE}');
Error('\P{Script= /a/BRAILLE}');
Expect(1, 10495, '\p{Script=braille}', "");
Expect(0, 10495, '\p{^Script=braille}', "");
Expect(0, 10495, '\P{Script=braille}', "");
Expect(1, 10495, '\P{^Script=braille}', "");
Expect(0, 10239, '\p{Script=braille}', "");
Expect(1, 10239, '\p{^Script=braille}', "");
Expect(1, 10239, '\P{Script=braille}', "");
Expect(0, 10239, '\P{^Script=braille}', "");
Expect(1, 10495, '\p{Script=--Braille}', "");
Expect(0, 10495, '\p{^Script=--Braille}', "");
Expect(0, 10495, '\P{Script=--Braille}', "");
Expect(1, 10495, '\P{^Script=--Braille}', "");
Expect(0, 10239, '\p{Script=--Braille}', "");
Expect(1, 10239, '\p{^Script=--Braille}', "");
Expect(1, 10239, '\P{Script=--Braille}', "");
Expect(0, 10239, '\P{^Script=--Braille}', "");
Error('\p{Sc=:=__BRAI}');
Error('\P{Sc=:=__BRAI}');
Expect(1, 10495, '\p{Sc=brai}', "");
Expect(0, 10495, '\p{^Sc=brai}', "");
Expect(0, 10495, '\P{Sc=brai}', "");
Expect(1, 10495, '\P{^Sc=brai}', "");
Expect(0, 10239, '\p{Sc=brai}', "");
Expect(1, 10239, '\p{^Sc=brai}', "");
Expect(1, 10239, '\P{Sc=brai}', "");
Expect(0, 10239, '\P{^Sc=brai}', "");
Expect(1, 10495, '\p{Sc=--BRAI}', "");
Expect(0, 10495, '\p{^Sc=--BRAI}', "");
Expect(0, 10495, '\P{Sc=--BRAI}', "");
Expect(1, 10495, '\P{^Sc=--BRAI}', "");
Expect(0, 10239, '\p{Sc=--BRAI}', "");
Expect(1, 10239, '\p{^Sc=--BRAI}', "");
Expect(1, 10239, '\P{Sc=--BRAI}', "");
Expect(0, 10239, '\P{^Sc=--BRAI}', "");
Error('\p{Is_Script=:=- braille}');
Error('\P{Is_Script=:=- braille}');
Expect(1, 10495, '\p{Is_Script=braille}', "");
Expect(0, 10495, '\p{^Is_Script=braille}', "");
Expect(0, 10495, '\P{Is_Script=braille}', "");
Expect(1, 10495, '\P{^Is_Script=braille}', "");
Expect(0, 10239, '\p{Is_Script=braille}', "");
Expect(1, 10239, '\p{^Is_Script=braille}', "");
Expect(1, 10239, '\P{Is_Script=braille}', "");
Expect(0, 10239, '\P{^Is_Script=braille}', "");
Expect(1, 10495, '\p{Is_Script=_ braille}', "");
Expect(0, 10495, '\p{^Is_Script=_ braille}', "");
Expect(0, 10495, '\P{Is_Script=_ braille}', "");
Expect(1, 10495, '\P{^Is_Script=_ braille}', "");
Expect(0, 10239, '\p{Is_Script=_ braille}', "");
Expect(1, 10239, '\p{^Is_Script=_ braille}', "");
Expect(1, 10239, '\P{Is_Script=_ braille}', "");
Expect(0, 10239, '\P{^Is_Script=_ braille}', "");
Error('\p{Is_Sc= -Brai:=}');
Error('\P{Is_Sc= -Brai:=}');
Expect(1, 10495, '\p{Is_Sc=brai}', "");
Expect(0, 10495, '\p{^Is_Sc=brai}', "");
Expect(0, 10495, '\P{Is_Sc=brai}', "");
Expect(1, 10495, '\P{^Is_Sc=brai}', "");
Expect(0, 10239, '\p{Is_Sc=brai}', "");
Expect(1, 10239, '\p{^Is_Sc=brai}', "");
Expect(1, 10239, '\P{Is_Sc=brai}', "");
Expect(0, 10239, '\P{^Is_Sc=brai}', "");
Expect(1, 10495, '\p{Is_Sc=_ Brai}', "");
Expect(0, 10495, '\p{^Is_Sc=_ Brai}', "");
Expect(0, 10495, '\P{Is_Sc=_ Brai}', "");
Expect(1, 10495, '\P{^Is_Sc=_ Brai}', "");
Expect(0, 10239, '\p{Is_Sc=_ Brai}', "");
Expect(1, 10239, '\p{^Is_Sc=_ Brai}', "");
Expect(1, 10239, '\P{Is_Sc=_ Brai}', "");
Expect(0, 10239, '\P{^Is_Sc=_ Brai}', "");
Error('\p{Script= -Kharoshthi:=}');
Error('\P{Script= -Kharoshthi:=}');
Expect(1, 68099, '\p{Script=kharoshthi}', "");
Expect(0, 68099, '\p{^Script=kharoshthi}', "");
Expect(0, 68099, '\P{Script=kharoshthi}', "");
Expect(1, 68099, '\P{^Script=kharoshthi}', "");
Expect(0, 68095, '\p{Script=kharoshthi}', "");
Expect(1, 68095, '\p{^Script=kharoshthi}', "");
Expect(1, 68095, '\P{Script=kharoshthi}', "");
Expect(0, 68095, '\P{^Script=kharoshthi}', "");
Expect(1, 68099, '\p{Script=	-kharoshthi}', "");
Expect(0, 68099, '\p{^Script=	-kharoshthi}', "");
Expect(0, 68099, '\P{Script=	-kharoshthi}', "");
Expect(1, 68099, '\P{^Script=	-kharoshthi}', "");
Expect(0, 68095, '\p{Script=	-kharoshthi}', "");
Expect(1, 68095, '\p{^Script=	-kharoshthi}', "");
Expect(1, 68095, '\P{Script=	-kharoshthi}', "");
Expect(0, 68095, '\P{^Script=	-kharoshthi}', "");
Error('\p{Sc=_	KHAR/a/}');
Error('\P{Sc=_	KHAR/a/}');
Expect(1, 68099, '\p{Sc=khar}', "");
Expect(0, 68099, '\p{^Sc=khar}', "");
Expect(0, 68099, '\P{Sc=khar}', "");
Expect(1, 68099, '\P{^Sc=khar}', "");
Expect(0, 68095, '\p{Sc=khar}', "");
Expect(1, 68095, '\p{^Sc=khar}', "");
Expect(1, 68095, '\P{Sc=khar}', "");
Expect(0, 68095, '\P{^Sc=khar}', "");
Expect(1, 68099, '\p{Sc=_Khar}', "");
Expect(0, 68099, '\p{^Sc=_Khar}', "");
Expect(0, 68099, '\P{Sc=_Khar}', "");
Expect(1, 68099, '\P{^Sc=_Khar}', "");
Expect(0, 68095, '\p{Sc=_Khar}', "");
Expect(1, 68095, '\p{^Sc=_Khar}', "");
Expect(1, 68095, '\P{Sc=_Khar}', "");
Expect(0, 68095, '\P{^Sc=_Khar}', "");
Error('\p{Is_Script: _kharoshthi/a/}');
Error('\P{Is_Script: _kharoshthi/a/}');
Expect(1, 68099, '\p{Is_Script=kharoshthi}', "");
Expect(0, 68099, '\p{^Is_Script=kharoshthi}', "");
Expect(0, 68099, '\P{Is_Script=kharoshthi}', "");
Expect(1, 68099, '\P{^Is_Script=kharoshthi}', "");
Expect(0, 68095, '\p{Is_Script=kharoshthi}', "");
Expect(1, 68095, '\p{^Is_Script=kharoshthi}', "");
Expect(1, 68095, '\P{Is_Script=kharoshthi}', "");
Expect(0, 68095, '\P{^Is_Script=kharoshthi}', "");
Expect(1, 68099, '\p{Is_Script=_-kharoshthi}', "");
Expect(0, 68099, '\p{^Is_Script=_-kharoshthi}', "");
Expect(0, 68099, '\P{Is_Script=_-kharoshthi}', "");
Expect(1, 68099, '\P{^Is_Script=_-kharoshthi}', "");
Expect(0, 68095, '\p{Is_Script=_-kharoshthi}', "");
Expect(1, 68095, '\p{^Is_Script=_-kharoshthi}', "");
Expect(1, 68095, '\P{Is_Script=_-kharoshthi}', "");
Expect(0, 68095, '\P{^Is_Script=_-kharoshthi}', "");
Error('\p{Is_Sc=/a/_-KHAR}');
Error('\P{Is_Sc=/a/_-KHAR}');
Expect(1, 68099, '\p{Is_Sc=khar}', "");
Expect(0, 68099, '\p{^Is_Sc=khar}', "");
Expect(0, 68099, '\P{Is_Sc=khar}', "");
Expect(1, 68099, '\P{^Is_Sc=khar}', "");
Expect(0, 68095, '\p{Is_Sc=khar}', "");
Expect(1, 68095, '\p{^Is_Sc=khar}', "");
Expect(1, 68095, '\P{Is_Sc=khar}', "");
Expect(0, 68095, '\P{^Is_Sc=khar}', "");
Expect(1, 68099, '\p{Is_Sc: 		Khar}', "");
Expect(0, 68099, '\p{^Is_Sc: 		Khar}', "");
Expect(0, 68099, '\P{Is_Sc: 		Khar}', "");
Expect(1, 68099, '\P{^Is_Sc: 		Khar}', "");
Expect(0, 68095, '\p{Is_Sc: 		Khar}', "");
Expect(1, 68095, '\p{^Is_Sc: 		Khar}', "");
Expect(1, 68095, '\P{Is_Sc: 		Khar}', "");
Expect(0, 68095, '\P{^Is_Sc: 		Khar}', "");
Error('\p{Script= _Lycian/a/}');
Error('\P{Script= _Lycian/a/}');
Expect(1, 66204, '\p{Script=lycian}', "");
Expect(0, 66204, '\p{^Script=lycian}', "");
Expect(0, 66204, '\P{Script=lycian}', "");
Expect(1, 66204, '\P{^Script=lycian}', "");
Expect(0, 66175, '\p{Script=lycian}', "");
Expect(1, 66175, '\p{^Script=lycian}', "");
Expect(1, 66175, '\P{Script=lycian}', "");
Expect(0, 66175, '\P{^Script=lycian}', "");
Expect(1, 66204, '\p{Script= Lycian}', "");
Expect(0, 66204, '\p{^Script= Lycian}', "");
Expect(0, 66204, '\P{Script= Lycian}', "");
Expect(1, 66204, '\P{^Script= Lycian}', "");
Expect(0, 66175, '\p{Script= Lycian}', "");
Expect(1, 66175, '\p{^Script= Lycian}', "");
Expect(1, 66175, '\P{Script= Lycian}', "");
Expect(0, 66175, '\P{^Script= Lycian}', "");
Error('\p{Sc=:=	_Lyci}');
Error('\P{Sc=:=	_Lyci}');
Expect(1, 66204, '\p{Sc=lyci}', "");
Expect(0, 66204, '\p{^Sc=lyci}', "");
Expect(0, 66204, '\P{Sc=lyci}', "");
Expect(1, 66204, '\P{^Sc=lyci}', "");
Expect(0, 66175, '\p{Sc=lyci}', "");
Expect(1, 66175, '\p{^Sc=lyci}', "");
Expect(1, 66175, '\P{Sc=lyci}', "");
Expect(0, 66175, '\P{^Sc=lyci}', "");
Expect(1, 66204, '\p{Sc=_-lyci}', "");
Expect(0, 66204, '\p{^Sc=_-lyci}', "");
Expect(0, 66204, '\P{Sc=_-lyci}', "");
Expect(1, 66204, '\P{^Sc=_-lyci}', "");
Expect(0, 66175, '\p{Sc=_-lyci}', "");
Expect(1, 66175, '\p{^Sc=_-lyci}', "");
Expect(1, 66175, '\P{Sc=_-lyci}', "");
Expect(0, 66175, '\P{^Sc=_-lyci}', "");
Error('\p{Is_Script=/a/ Lycian}');
Error('\P{Is_Script=/a/ Lycian}');
Expect(1, 66204, '\p{Is_Script=lycian}', "");
Expect(0, 66204, '\p{^Is_Script=lycian}', "");
Expect(0, 66204, '\P{Is_Script=lycian}', "");
Expect(1, 66204, '\P{^Is_Script=lycian}', "");
Expect(0, 66175, '\p{Is_Script=lycian}', "");
Expect(1, 66175, '\p{^Is_Script=lycian}', "");
Expect(1, 66175, '\P{Is_Script=lycian}', "");
Expect(0, 66175, '\P{^Is_Script=lycian}', "");
Expect(1, 66204, '\p{Is_Script=__lycian}', "");
Expect(0, 66204, '\p{^Is_Script=__lycian}', "");
Expect(0, 66204, '\P{Is_Script=__lycian}', "");
Expect(1, 66204, '\P{^Is_Script=__lycian}', "");
Expect(0, 66175, '\p{Is_Script=__lycian}', "");
Expect(1, 66175, '\p{^Is_Script=__lycian}', "");
Expect(1, 66175, '\P{Is_Script=__lycian}', "");
Expect(0, 66175, '\P{^Is_Script=__lycian}', "");
Error('\p{Is_Sc=__Lyci:=}');
Error('\P{Is_Sc=__Lyci:=}');
Expect(1, 66204, '\p{Is_Sc=lyci}', "");
Expect(0, 66204, '\p{^Is_Sc=lyci}', "");
Expect(0, 66204, '\P{Is_Sc=lyci}', "");
Expect(1, 66204, '\P{^Is_Sc=lyci}', "");
Expect(0, 66175, '\p{Is_Sc=lyci}', "");
Expect(1, 66175, '\p{^Is_Sc=lyci}', "");
Expect(1, 66175, '\P{Is_Sc=lyci}', "");
Expect(0, 66175, '\P{^Is_Sc=lyci}', "");
Expect(1, 66204, '\p{Is_Sc=	 LYCI}', "");
Expect(0, 66204, '\p{^Is_Sc=	 LYCI}', "");
Expect(0, 66204, '\P{Is_Sc=	 LYCI}', "");
Expect(1, 66204, '\P{^Is_Sc=	 LYCI}', "");
Expect(0, 66175, '\p{Is_Sc=	 LYCI}', "");
Expect(1, 66175, '\p{^Is_Sc=	 LYCI}', "");
Expect(1, 66175, '\P{Is_Sc=	 LYCI}', "");
Expect(0, 66175, '\P{^Is_Sc=	 LYCI}', "");
Error('\p{Script=:=bopomofo}');
Error('\P{Script=:=bopomofo}');
Expect(1, 12589, '\p{Script: bopomofo}', "");
Expect(0, 12589, '\p{^Script: bopomofo}', "");
Expect(0, 12589, '\P{Script: bopomofo}', "");
Expect(1, 12589, '\P{^Script: bopomofo}', "");
Expect(0, 12548, '\p{Script: bopomofo}', "");
Expect(1, 12548, '\p{^Script: bopomofo}', "");
Expect(1, 12548, '\P{Script: bopomofo}', "");
Expect(0, 12548, '\P{^Script: bopomofo}', "");
Expect(1, 12589, '\p{Script=	 Bopomofo}', "");
Expect(0, 12589, '\p{^Script=	 Bopomofo}', "");
Expect(0, 12589, '\P{Script=	 Bopomofo}', "");
Expect(1, 12589, '\P{^Script=	 Bopomofo}', "");
Expect(0, 12548, '\p{Script=	 Bopomofo}', "");
Expect(1, 12548, '\p{^Script=	 Bopomofo}', "");
Expect(1, 12548, '\P{Script=	 Bopomofo}', "");
Expect(0, 12548, '\P{^Script=	 Bopomofo}', "");
Error('\p{Sc=_ Bopo/a/}');
Error('\P{Sc=_ Bopo/a/}');
Expect(1, 12589, '\p{Sc=bopo}', "");
Expect(0, 12589, '\p{^Sc=bopo}', "");
Expect(0, 12589, '\P{Sc=bopo}', "");
Expect(1, 12589, '\P{^Sc=bopo}', "");
Expect(0, 12548, '\p{Sc=bopo}', "");
Expect(1, 12548, '\p{^Sc=bopo}', "");
Expect(1, 12548, '\P{Sc=bopo}', "");
Expect(0, 12548, '\P{^Sc=bopo}', "");
Expect(1, 12589, '\p{Sc=	Bopo}', "");
Expect(0, 12589, '\p{^Sc=	Bopo}', "");
Expect(0, 12589, '\P{Sc=	Bopo}', "");
Expect(1, 12589, '\P{^Sc=	Bopo}', "");
Expect(0, 12548, '\p{Sc=	Bopo}', "");
Expect(1, 12548, '\p{^Sc=	Bopo}', "");
Expect(1, 12548, '\P{Sc=	Bopo}', "");
Expect(0, 12548, '\P{^Sc=	Bopo}', "");
Error('\p{Is_Script=_bopomofo:=}');
Error('\P{Is_Script=_bopomofo:=}');
Expect(1, 12589, '\p{Is_Script=bopomofo}', "");
Expect(0, 12589, '\p{^Is_Script=bopomofo}', "");
Expect(0, 12589, '\P{Is_Script=bopomofo}', "");
Expect(1, 12589, '\P{^Is_Script=bopomofo}', "");
Expect(0, 12548, '\p{Is_Script=bopomofo}', "");
Expect(1, 12548, '\p{^Is_Script=bopomofo}', "");
Expect(1, 12548, '\P{Is_Script=bopomofo}', "");
Expect(0, 12548, '\P{^Is_Script=bopomofo}', "");
Expect(1, 12589, '\p{Is_Script=-_bopomofo}', "");
Expect(0, 12589, '\p{^Is_Script=-_bopomofo}', "");
Expect(0, 12589, '\P{Is_Script=-_bopomofo}', "");
Expect(1, 12589, '\P{^Is_Script=-_bopomofo}', "");
Expect(0, 12548, '\p{Is_Script=-_bopomofo}', "");
Expect(1, 12548, '\p{^Is_Script=-_bopomofo}', "");
Expect(1, 12548, '\P{Is_Script=-_bopomofo}', "");
Expect(0, 12548, '\P{^Is_Script=-_bopomofo}', "");
Error('\p{Is_Sc=  Bopo:=}');
Error('\P{Is_Sc=  Bopo:=}');
Expect(1, 12589, '\p{Is_Sc=bopo}', "");
Expect(0, 12589, '\p{^Is_Sc=bopo}', "");
Expect(0, 12589, '\P{Is_Sc=bopo}', "");
Expect(1, 12589, '\P{^Is_Sc=bopo}', "");
Expect(0, 12548, '\p{Is_Sc=bopo}', "");
Expect(1, 12548, '\p{^Is_Sc=bopo}', "");
Expect(1, 12548, '\P{Is_Sc=bopo}', "");
Expect(0, 12548, '\P{^Is_Sc=bopo}', "");
Expect(1, 12589, '\p{Is_Sc=	Bopo}', "");
Expect(0, 12589, '\p{^Is_Sc=	Bopo}', "");
Expect(0, 12589, '\P{Is_Sc=	Bopo}', "");
Expect(1, 12589, '\P{^Is_Sc=	Bopo}', "");
Expect(0, 12548, '\p{Is_Sc=	Bopo}', "");
Expect(1, 12548, '\p{^Is_Sc=	Bopo}', "");
Expect(1, 12548, '\P{Is_Sc=	Bopo}', "");
Expect(0, 12548, '\P{^Is_Sc=	Bopo}', "");
Error('\p{Script=/a/--Rejang}');
Error('\P{Script=/a/--Rejang}');
Expect(1, 43347, '\p{Script=rejang}', "");
Expect(0, 43347, '\p{^Script=rejang}', "");
Expect(0, 43347, '\P{Script=rejang}', "");
Expect(1, 43347, '\P{^Script=rejang}', "");
Expect(0, 43311, '\p{Script=rejang}', "");
Expect(1, 43311, '\p{^Script=rejang}', "");
Expect(1, 43311, '\P{Script=rejang}', "");
Expect(0, 43311, '\P{^Script=rejang}', "");
Expect(1, 43347, '\p{Script=_-Rejang}', "");
Expect(0, 43347, '\p{^Script=_-Rejang}', "");
Expect(0, 43347, '\P{Script=_-Rejang}', "");
Expect(1, 43347, '\P{^Script=_-Rejang}', "");
Expect(0, 43311, '\p{Script=_-Rejang}', "");
Expect(1, 43311, '\p{^Script=_-Rejang}', "");
Expect(1, 43311, '\P{Script=_-Rejang}', "");
Expect(0, 43311, '\P{^Script=_-Rejang}', "");
Error('\p{Sc=	_Rjng/a/}');
Error('\P{Sc=	_Rjng/a/}');
Expect(1, 43347, '\p{Sc=rjng}', "");
Expect(0, 43347, '\p{^Sc=rjng}', "");
Expect(0, 43347, '\P{Sc=rjng}', "");
Expect(1, 43347, '\P{^Sc=rjng}', "");
Expect(0, 43311, '\p{Sc=rjng}', "");
Expect(1, 43311, '\p{^Sc=rjng}', "");
Expect(1, 43311, '\P{Sc=rjng}', "");
Expect(0, 43311, '\P{^Sc=rjng}', "");
Expect(1, 43347, '\p{Sc=	Rjng}', "");
Expect(0, 43347, '\p{^Sc=	Rjng}', "");
Expect(0, 43347, '\P{Sc=	Rjng}', "");
Expect(1, 43347, '\P{^Sc=	Rjng}', "");
Expect(0, 43311, '\p{Sc=	Rjng}', "");
Expect(1, 43311, '\p{^Sc=	Rjng}', "");
Expect(1, 43311, '\P{Sc=	Rjng}', "");
Expect(0, 43311, '\P{^Sc=	Rjng}', "");
Error('\p{Is_Script=	/a/Rejang}');
Error('\P{Is_Script=	/a/Rejang}');
Expect(1, 43347, '\p{Is_Script=rejang}', "");
Expect(0, 43347, '\p{^Is_Script=rejang}', "");
Expect(0, 43347, '\P{Is_Script=rejang}', "");
Expect(1, 43347, '\P{^Is_Script=rejang}', "");
Expect(0, 43311, '\p{Is_Script=rejang}', "");
Expect(1, 43311, '\p{^Is_Script=rejang}', "");
Expect(1, 43311, '\P{Is_Script=rejang}', "");
Expect(0, 43311, '\P{^Is_Script=rejang}', "");
Expect(1, 43347, '\p{Is_Script= rejang}', "");
Expect(0, 43347, '\p{^Is_Script= rejang}', "");
Expect(0, 43347, '\P{Is_Script= rejang}', "");
Expect(1, 43347, '\P{^Is_Script= rejang}', "");
Expect(0, 43311, '\p{Is_Script= rejang}', "");
Expect(1, 43311, '\p{^Is_Script= rejang}', "");
Expect(1, 43311, '\P{Is_Script= rejang}', "");
Expect(0, 43311, '\P{^Is_Script= rejang}', "");
Error('\p{Is_Sc=:= rjng}');
Error('\P{Is_Sc=:= rjng}');
Expect(1, 43347, '\p{Is_Sc=rjng}', "");
Expect(0, 43347, '\p{^Is_Sc=rjng}', "");
Expect(0, 43347, '\P{Is_Sc=rjng}', "");
Expect(1, 43347, '\P{^Is_Sc=rjng}', "");
Expect(0, 43311, '\p{Is_Sc=rjng}', "");
Expect(1, 43311, '\p{^Is_Sc=rjng}', "");
Expect(1, 43311, '\P{Is_Sc=rjng}', "");
Expect(0, 43311, '\P{^Is_Sc=rjng}', "");
Expect(1, 43347, '\p{Is_Sc=_-RJNG}', "");
Expect(0, 43347, '\p{^Is_Sc=_-RJNG}', "");
Expect(0, 43347, '\P{Is_Sc=_-RJNG}', "");
Expect(1, 43347, '\P{^Is_Sc=_-RJNG}', "");
Expect(0, 43311, '\p{Is_Sc=_-RJNG}', "");
Expect(1, 43311, '\p{^Is_Sc=_-RJNG}', "");
Expect(1, 43311, '\P{Is_Sc=_-RJNG}', "");
Expect(0, 43311, '\P{^Is_Sc=_-RJNG}', "");
Error('\p{Script=  HANUNOO/a/}');
Error('\P{Script=  HANUNOO/a/}');
Expect(1, 5940, '\p{Script=hanunoo}', "");
Expect(0, 5940, '\p{^Script=hanunoo}', "");
Expect(0, 5940, '\P{Script=hanunoo}', "");
Expect(1, 5940, '\P{^Script=hanunoo}', "");
Expect(0, 5919, '\p{Script=hanunoo}', "");
Expect(1, 5919, '\p{^Script=hanunoo}', "");
Expect(1, 5919, '\P{Script=hanunoo}', "");
Expect(0, 5919, '\P{^Script=hanunoo}', "");
Expect(1, 5940, '\p{Script=__hanunoo}', "");
Expect(0, 5940, '\p{^Script=__hanunoo}', "");
Expect(0, 5940, '\P{Script=__hanunoo}', "");
Expect(1, 5940, '\P{^Script=__hanunoo}', "");
Expect(0, 5919, '\p{Script=__hanunoo}', "");
Expect(1, 5919, '\p{^Script=__hanunoo}', "");
Expect(1, 5919, '\P{Script=__hanunoo}', "");
Expect(0, 5919, '\P{^Script=__hanunoo}', "");
Error('\p{Sc=:=_-Hano}');
Error('\P{Sc=:=_-Hano}');
Expect(1, 5940, '\p{Sc=hano}', "");
Expect(0, 5940, '\p{^Sc=hano}', "");
Expect(0, 5940, '\P{Sc=hano}', "");
Expect(1, 5940, '\P{^Sc=hano}', "");
Expect(0, 5919, '\p{Sc=hano}', "");
Expect(1, 5919, '\p{^Sc=hano}', "");
Expect(1, 5919, '\P{Sc=hano}', "");
Expect(0, 5919, '\P{^Sc=hano}', "");
Expect(1, 5940, '\p{Sc=__Hano}', "");
Expect(0, 5940, '\p{^Sc=__Hano}', "");
Expect(0, 5940, '\P{Sc=__Hano}', "");
Expect(1, 5940, '\P{^Sc=__Hano}', "");
Expect(0, 5919, '\p{Sc=__Hano}', "");
Expect(1, 5919, '\p{^Sc=__Hano}', "");
Expect(1, 5919, '\P{Sc=__Hano}', "");
Expect(0, 5919, '\P{^Sc=__Hano}', "");
Error('\p{Is_Script= :=HANUNOO}');
Error('\P{Is_Script= :=HANUNOO}');
Expect(1, 5940, '\p{Is_Script=hanunoo}', "");
Expect(0, 5940, '\p{^Is_Script=hanunoo}', "");
Expect(0, 5940, '\P{Is_Script=hanunoo}', "");
Expect(1, 5940, '\P{^Is_Script=hanunoo}', "");
Expect(0, 5919, '\p{Is_Script=hanunoo}', "");
Expect(1, 5919, '\p{^Is_Script=hanunoo}', "");
Expect(1, 5919, '\P{Is_Script=hanunoo}', "");
Expect(0, 5919, '\P{^Is_Script=hanunoo}', "");
Expect(1, 5940, '\p{Is_Script=	 HANUNOO}', "");
Expect(0, 5940, '\p{^Is_Script=	 HANUNOO}', "");
Expect(0, 5940, '\P{Is_Script=	 HANUNOO}', "");
Expect(1, 5940, '\P{^Is_Script=	 HANUNOO}', "");
Expect(0, 5919, '\p{Is_Script=	 HANUNOO}', "");
Expect(1, 5919, '\p{^Is_Script=	 HANUNOO}', "");
Expect(1, 5919, '\P{Is_Script=	 HANUNOO}', "");
Expect(0, 5919, '\P{^Is_Script=	 HANUNOO}', "");
Error('\p{Is_Sc=-_HANO:=}');
Error('\P{Is_Sc=-_HANO:=}');
Expect(1, 5940, '\p{Is_Sc=hano}', "");
Expect(0, 5940, '\p{^Is_Sc=hano}', "");
Expect(0, 5940, '\P{Is_Sc=hano}', "");
Expect(1, 5940, '\P{^Is_Sc=hano}', "");
Expect(0, 5919, '\p{Is_Sc=hano}', "");
Expect(1, 5919, '\p{^Is_Sc=hano}', "");
Expect(1, 5919, '\P{Is_Sc=hano}', "");
Expect(0, 5919, '\P{^Is_Sc=hano}', "");
Expect(1, 5940, '\p{Is_Sc=_ Hano}', "");
Expect(0, 5940, '\p{^Is_Sc=_ Hano}', "");
Expect(0, 5940, '\P{Is_Sc=_ Hano}', "");
Expect(1, 5940, '\P{^Is_Sc=_ Hano}', "");
Expect(0, 5919, '\p{Is_Sc=_ Hano}', "");
Expect(1, 5919, '\p{^Is_Sc=_ Hano}', "");
Expect(1, 5919, '\P{Is_Sc=_ Hano}', "");
Expect(0, 5919, '\P{^Is_Sc=_ Hano}', "");
Error('\p{Script: _/a/ImperialAramaic}');
Error('\P{Script: _/a/ImperialAramaic}');
Expect(1, 67669, '\p{Script:   imperialaramaic}', "");
Expect(0, 67669, '\p{^Script:   imperialaramaic}', "");
Expect(0, 67669, '\P{Script:   imperialaramaic}', "");
Expect(1, 67669, '\P{^Script:   imperialaramaic}', "");
Expect(0, 67647, '\p{Script:   imperialaramaic}', "");
Expect(1, 67647, '\p{^Script:   imperialaramaic}', "");
Expect(1, 67647, '\P{Script:   imperialaramaic}', "");
Expect(0, 67647, '\P{^Script:   imperialaramaic}', "");
Expect(1, 67669, '\p{Script=-_Imperial ARAMAIC}', "");
Expect(0, 67669, '\p{^Script=-_Imperial ARAMAIC}', "");
Expect(0, 67669, '\P{Script=-_Imperial ARAMAIC}', "");
Expect(1, 67669, '\P{^Script=-_Imperial ARAMAIC}', "");
Expect(0, 67647, '\p{Script=-_Imperial ARAMAIC}', "");
Expect(1, 67647, '\p{^Script=-_Imperial ARAMAIC}', "");
Expect(1, 67647, '\P{Script=-_Imperial ARAMAIC}', "");
Expect(0, 67647, '\P{^Script=-_Imperial ARAMAIC}', "");
Error('\p{Sc=/a/	_Armi}');
Error('\P{Sc=/a/	_Armi}');
Expect(1, 67669, '\p{Sc=armi}', "");
Expect(0, 67669, '\p{^Sc=armi}', "");
Expect(0, 67669, '\P{Sc=armi}', "");
Expect(1, 67669, '\P{^Sc=armi}', "");
Expect(0, 67647, '\p{Sc=armi}', "");
Expect(1, 67647, '\p{^Sc=armi}', "");
Expect(1, 67647, '\P{Sc=armi}', "");
Expect(0, 67647, '\P{^Sc=armi}', "");
Expect(1, 67669, '\p{Sc:			ARMI}', "");
Expect(0, 67669, '\p{^Sc:			ARMI}', "");
Expect(0, 67669, '\P{Sc:			ARMI}', "");
Expect(1, 67669, '\P{^Sc:			ARMI}', "");
Expect(0, 67647, '\p{Sc:			ARMI}', "");
Expect(1, 67647, '\p{^Sc:			ARMI}', "");
Expect(1, 67647, '\P{Sc:			ARMI}', "");
Expect(0, 67647, '\P{^Sc:			ARMI}', "");
Error('\p{Is_Script:_/a/IMPERIAL-Aramaic}');
Error('\P{Is_Script:_/a/IMPERIAL-Aramaic}');
Expect(1, 67669, '\p{Is_Script=imperialaramaic}', "");
Expect(0, 67669, '\p{^Is_Script=imperialaramaic}', "");
Expect(0, 67669, '\P{Is_Script=imperialaramaic}', "");
Expect(1, 67669, '\P{^Is_Script=imperialaramaic}', "");
Expect(0, 67647, '\p{Is_Script=imperialaramaic}', "");
Expect(1, 67647, '\p{^Is_Script=imperialaramaic}', "");
Expect(1, 67647, '\P{Is_Script=imperialaramaic}', "");
Expect(0, 67647, '\P{^Is_Script=imperialaramaic}', "");
Expect(1, 67669, '\p{Is_Script=__IMPERIAL	aramaic}', "");
Expect(0, 67669, '\p{^Is_Script=__IMPERIAL	aramaic}', "");
Expect(0, 67669, '\P{Is_Script=__IMPERIAL	aramaic}', "");
Expect(1, 67669, '\P{^Is_Script=__IMPERIAL	aramaic}', "");
Expect(0, 67647, '\p{Is_Script=__IMPERIAL	aramaic}', "");
Expect(1, 67647, '\p{^Is_Script=__IMPERIAL	aramaic}', "");
Expect(1, 67647, '\P{Is_Script=__IMPERIAL	aramaic}', "");
Expect(0, 67647, '\P{^Is_Script=__IMPERIAL	aramaic}', "");
Error('\p{Is_Sc=_/a/armi}');
Error('\P{Is_Sc=_/a/armi}');
Expect(1, 67669, '\p{Is_Sc=armi}', "");
Expect(0, 67669, '\p{^Is_Sc=armi}', "");
Expect(0, 67669, '\P{Is_Sc=armi}', "");
Expect(1, 67669, '\P{^Is_Sc=armi}', "");
Expect(0, 67647, '\p{Is_Sc=armi}', "");
Expect(1, 67647, '\p{^Is_Sc=armi}', "");
Expect(1, 67647, '\P{Is_Sc=armi}', "");
Expect(0, 67647, '\P{^Is_Sc=armi}', "");
Expect(1, 67669, '\p{Is_Sc=__ARMI}', "");
Expect(0, 67669, '\p{^Is_Sc=__ARMI}', "");
Expect(0, 67669, '\P{Is_Sc=__ARMI}', "");
Expect(1, 67669, '\P{^Is_Sc=__ARMI}', "");
Expect(0, 67647, '\p{Is_Sc=__ARMI}', "");
Expect(1, 67647, '\p{^Is_Sc=__ARMI}', "");
Expect(1, 67647, '\P{Is_Sc=__ARMI}', "");
Expect(0, 67647, '\P{^Is_Sc=__ARMI}', "");
Error('\p{Script=/a/-_KANNADA}');
Error('\P{Script=/a/-_KANNADA}');
Expect(1, 3203, '\p{Script=kannada}', "");
Expect(0, 3203, '\p{^Script=kannada}', "");
Expect(0, 3203, '\P{Script=kannada}', "");
Expect(1, 3203, '\P{^Script=kannada}', "");
Expect(0, 3201, '\p{Script=kannada}', "");
Expect(1, 3201, '\p{^Script=kannada}', "");
Expect(1, 3201, '\P{Script=kannada}', "");
Expect(0, 3201, '\P{^Script=kannada}', "");
Expect(1, 3203, '\p{Script: _Kannada}', "");
Expect(0, 3203, '\p{^Script: _Kannada}', "");
Expect(0, 3203, '\P{Script: _Kannada}', "");
Expect(1, 3203, '\P{^Script: _Kannada}', "");
Expect(0, 3201, '\p{Script: _Kannada}', "");
Expect(1, 3201, '\p{^Script: _Kannada}', "");
Expect(1, 3201, '\P{Script: _Kannada}', "");
Expect(0, 3201, '\P{^Script: _Kannada}', "");
Error('\p{Sc=-Knda/a/}');
Error('\P{Sc=-Knda/a/}');
Expect(1, 3203, '\p{Sc=knda}', "");
Expect(0, 3203, '\p{^Sc=knda}', "");
Expect(0, 3203, '\P{Sc=knda}', "");
Expect(1, 3203, '\P{^Sc=knda}', "");
Expect(0, 3201, '\p{Sc=knda}', "");
Expect(1, 3201, '\p{^Sc=knda}', "");
Expect(1, 3201, '\P{Sc=knda}', "");
Expect(0, 3201, '\P{^Sc=knda}', "");
Expect(1, 3203, '\p{Sc= -KNDA}', "");
Expect(0, 3203, '\p{^Sc= -KNDA}', "");
Expect(0, 3203, '\P{Sc= -KNDA}', "");
Expect(1, 3203, '\P{^Sc= -KNDA}', "");
Expect(0, 3201, '\p{Sc= -KNDA}', "");
Expect(1, 3201, '\p{^Sc= -KNDA}', "");
Expect(1, 3201, '\P{Sc= -KNDA}', "");
Expect(0, 3201, '\P{^Sc= -KNDA}', "");
Error('\p{Is_Script=-/a/Kannada}');
Error('\P{Is_Script=-/a/Kannada}');
Expect(1, 3203, '\p{Is_Script=kannada}', "");
Expect(0, 3203, '\p{^Is_Script=kannada}', "");
Expect(0, 3203, '\P{Is_Script=kannada}', "");
Expect(1, 3203, '\P{^Is_Script=kannada}', "");
Expect(0, 3201, '\p{Is_Script=kannada}', "");
Expect(1, 3201, '\p{^Is_Script=kannada}', "");
Expect(1, 3201, '\P{Is_Script=kannada}', "");
Expect(0, 3201, '\P{^Is_Script=kannada}', "");
Expect(1, 3203, '\p{Is_Script= KANNADA}', "");
Expect(0, 3203, '\p{^Is_Script= KANNADA}', "");
Expect(0, 3203, '\P{Is_Script= KANNADA}', "");
Expect(1, 3203, '\P{^Is_Script= KANNADA}', "");
Expect(0, 3201, '\p{Is_Script= KANNADA}', "");
Expect(1, 3201, '\p{^Is_Script= KANNADA}', "");
Expect(1, 3201, '\P{Is_Script= KANNADA}', "");
Expect(0, 3201, '\P{^Is_Script= KANNADA}', "");
Error('\p{Is_Sc=:=knda}');
Error('\P{Is_Sc=:=knda}');
Expect(1, 3203, '\p{Is_Sc=knda}', "");
Expect(0, 3203, '\p{^Is_Sc=knda}', "");
Expect(0, 3203, '\P{Is_Sc=knda}', "");
Expect(1, 3203, '\P{^Is_Sc=knda}', "");
Expect(0, 3201, '\p{Is_Sc=knda}', "");
Expect(1, 3201, '\p{^Is_Sc=knda}', "");
Expect(1, 3201, '\P{Is_Sc=knda}', "");
Expect(0, 3201, '\P{^Is_Sc=knda}', "");
Expect(1, 3203, '\p{Is_Sc=-Knda}', "");
Expect(0, 3203, '\p{^Is_Sc=-Knda}', "");
Expect(0, 3203, '\P{Is_Sc=-Knda}', "");
Expect(1, 3203, '\P{^Is_Sc=-Knda}', "");
Expect(0, 3201, '\p{Is_Sc=-Knda}', "");
Expect(1, 3201, '\p{^Is_Sc=-Knda}', "");
Expect(1, 3201, '\P{Is_Sc=-Knda}', "");
Expect(0, 3201, '\P{^Is_Sc=-Knda}', "");
Error('\p{Script=	:=KHMER}');
Error('\P{Script=	:=KHMER}');
Expect(1, 6109, '\p{Script=khmer}', "");
Expect(0, 6109, '\p{^Script=khmer}', "");
Expect(0, 6109, '\P{Script=khmer}', "");
Expect(1, 6109, '\P{^Script=khmer}', "");
Expect(0, 6015, '\p{Script=khmer}', "");
Expect(1, 6015, '\p{^Script=khmer}', "");
Expect(1, 6015, '\P{Script=khmer}', "");
Expect(0, 6015, '\P{^Script=khmer}', "");
Expect(1, 6109, '\p{Script=_Khmer}', "");
Expect(0, 6109, '\p{^Script=_Khmer}', "");
Expect(0, 6109, '\P{Script=_Khmer}', "");
Expect(1, 6109, '\P{^Script=_Khmer}', "");
Expect(0, 6015, '\p{Script=_Khmer}', "");
Expect(1, 6015, '\p{^Script=_Khmer}', "");
Expect(1, 6015, '\P{Script=_Khmer}', "");
Expect(0, 6015, '\P{^Script=_Khmer}', "");
Error('\p{Sc=/a/-_khmr}');
Error('\P{Sc=/a/-_khmr}');
Expect(1, 6109, '\p{Sc=khmr}', "");
Expect(0, 6109, '\p{^Sc=khmr}', "");
Expect(0, 6109, '\P{Sc=khmr}', "");
Expect(1, 6109, '\P{^Sc=khmr}', "");
Expect(0, 6015, '\p{Sc=khmr}', "");
Expect(1, 6015, '\p{^Sc=khmr}', "");
Expect(1, 6015, '\P{Sc=khmr}', "");
Expect(0, 6015, '\P{^Sc=khmr}', "");
Expect(1, 6109, '\p{Sc:   	 Khmr}', "");
Expect(0, 6109, '\p{^Sc:   	 Khmr}', "");
Expect(0, 6109, '\P{Sc:   	 Khmr}', "");
Expect(1, 6109, '\P{^Sc:   	 Khmr}', "");
Expect(0, 6015, '\p{Sc:   	 Khmr}', "");
Expect(1, 6015, '\p{^Sc:   	 Khmr}', "");
Expect(1, 6015, '\P{Sc:   	 Khmr}', "");
Expect(0, 6015, '\P{^Sc:   	 Khmr}', "");
Error('\p{Is_Script= 	khmer/a/}');
Error('\P{Is_Script= 	khmer/a/}');
Expect(1, 6109, '\p{Is_Script=khmer}', "");
Expect(0, 6109, '\p{^Is_Script=khmer}', "");
Expect(0, 6109, '\P{Is_Script=khmer}', "");
Expect(1, 6109, '\P{^Is_Script=khmer}', "");
Expect(0, 6015, '\p{Is_Script=khmer}', "");
Expect(1, 6015, '\p{^Is_Script=khmer}', "");
Expect(1, 6015, '\P{Is_Script=khmer}', "");
Expect(0, 6015, '\P{^Is_Script=khmer}', "");
Expect(1, 6109, '\p{Is_Script=-Khmer}', "");
Expect(0, 6109, '\p{^Is_Script=-Khmer}', "");
Expect(0, 6109, '\P{Is_Script=-Khmer}', "");
Expect(1, 6109, '\P{^Is_Script=-Khmer}', "");
Expect(0, 6015, '\p{Is_Script=-Khmer}', "");
Expect(1, 6015, '\p{^Is_Script=-Khmer}', "");
Expect(1, 6015, '\P{Is_Script=-Khmer}', "");
Expect(0, 6015, '\P{^Is_Script=-Khmer}', "");
Error('\p{Is_Sc=_	khmr:=}');
Error('\P{Is_Sc=_	khmr:=}');
Expect(1, 6109, '\p{Is_Sc=khmr}', "");
Expect(0, 6109, '\p{^Is_Sc=khmr}', "");
Expect(0, 6109, '\P{Is_Sc=khmr}', "");
Expect(1, 6109, '\P{^Is_Sc=khmr}', "");
Expect(0, 6015, '\p{Is_Sc=khmr}', "");
Expect(1, 6015, '\p{^Is_Sc=khmr}', "");
Expect(1, 6015, '\P{Is_Sc=khmr}', "");
Expect(0, 6015, '\P{^Is_Sc=khmr}', "");
Expect(1, 6109, '\p{Is_Sc=	-khmr}', "");
Expect(0, 6109, '\p{^Is_Sc=	-khmr}', "");
Expect(0, 6109, '\P{Is_Sc=	-khmr}', "");
Expect(1, 6109, '\P{^Is_Sc=	-khmr}', "");
Expect(0, 6015, '\p{Is_Sc=	-khmr}', "");
Expect(1, 6015, '\p{^Is_Sc=	-khmr}', "");
Expect(1, 6015, '\P{Is_Sc=	-khmr}', "");
Expect(0, 6015, '\P{^Is_Sc=	-khmr}', "");
Error('\p{Script=:=	 Cham}');
Error('\P{Script=:=	 Cham}');
Expect(1, 43574, '\p{Script=cham}', "");
Expect(0, 43574, '\p{^Script=cham}', "");
Expect(0, 43574, '\P{Script=cham}', "");
Expect(1, 43574, '\P{^Script=cham}', "");
Expect(0, 43519, '\p{Script=cham}', "");
Expect(1, 43519, '\p{^Script=cham}', "");
Expect(1, 43519, '\P{Script=cham}', "");
Expect(0, 43519, '\P{^Script=cham}', "");
Expect(1, 43574, '\p{Script=- Cham}', "");
Expect(0, 43574, '\p{^Script=- Cham}', "");
Expect(0, 43574, '\P{Script=- Cham}', "");
Expect(1, 43574, '\P{^Script=- Cham}', "");
Expect(0, 43519, '\p{Script=- Cham}', "");
Expect(1, 43519, '\p{^Script=- Cham}', "");
Expect(1, 43519, '\P{Script=- Cham}', "");
Expect(0, 43519, '\P{^Script=- Cham}', "");
Error('\p{Sc: -:=Cham}');
Error('\P{Sc: -:=Cham}');
Expect(1, 43574, '\p{Sc=cham}', "");
Expect(0, 43574, '\p{^Sc=cham}', "");
Expect(0, 43574, '\P{Sc=cham}', "");
Expect(1, 43574, '\P{^Sc=cham}', "");
Expect(0, 43519, '\p{Sc=cham}', "");
Expect(1, 43519, '\p{^Sc=cham}', "");
Expect(1, 43519, '\P{Sc=cham}', "");
Expect(0, 43519, '\P{^Sc=cham}', "");
Expect(1, 43574, '\p{Sc=-Cham}', "");
Expect(0, 43574, '\p{^Sc=-Cham}', "");
Expect(0, 43574, '\P{Sc=-Cham}', "");
Expect(1, 43574, '\P{^Sc=-Cham}', "");
Expect(0, 43519, '\p{Sc=-Cham}', "");
Expect(1, 43519, '\p{^Sc=-Cham}', "");
Expect(1, 43519, '\P{Sc=-Cham}', "");
Expect(0, 43519, '\P{^Sc=-Cham}', "");
Error('\p{Is_Script=_:=CHAM}');
Error('\P{Is_Script=_:=CHAM}');
Expect(1, 43574, '\p{Is_Script=cham}', "");
Expect(0, 43574, '\p{^Is_Script=cham}', "");
Expect(0, 43574, '\P{Is_Script=cham}', "");
Expect(1, 43574, '\P{^Is_Script=cham}', "");
Expect(0, 43519, '\p{Is_Script=cham}', "");
Expect(1, 43519, '\p{^Is_Script=cham}', "");
Expect(1, 43519, '\P{Is_Script=cham}', "");
Expect(0, 43519, '\P{^Is_Script=cham}', "");
Expect(1, 43574, '\p{Is_Script=_Cham}', "");
Expect(0, 43574, '\p{^Is_Script=_Cham}', "");
Expect(0, 43574, '\P{Is_Script=_Cham}', "");
Expect(1, 43574, '\P{^Is_Script=_Cham}', "");
Expect(0, 43519, '\p{Is_Script=_Cham}', "");
Expect(1, 43519, '\p{^Is_Script=_Cham}', "");
Expect(1, 43519, '\P{Is_Script=_Cham}', "");
Expect(0, 43519, '\P{^Is_Script=_Cham}', "");
Error('\p{Is_Sc=-:=Cham}');
Error('\P{Is_Sc=-:=Cham}');
Expect(1, 43574, '\p{Is_Sc=cham}', "");
Expect(0, 43574, '\p{^Is_Sc=cham}', "");
Expect(0, 43574, '\P{Is_Sc=cham}', "");
Expect(1, 43574, '\P{^Is_Sc=cham}', "");
Expect(0, 43519, '\p{Is_Sc=cham}', "");
Expect(1, 43519, '\p{^Is_Sc=cham}', "");
Expect(1, 43519, '\P{Is_Sc=cham}', "");
Expect(0, 43519, '\P{^Is_Sc=cham}', "");
Expect(1, 43574, '\p{Is_Sc=_-cham}', "");
Expect(0, 43574, '\p{^Is_Sc=_-cham}', "");
Expect(0, 43574, '\P{Is_Sc=_-cham}', "");
Expect(1, 43574, '\P{^Is_Sc=_-cham}', "");
Expect(0, 43519, '\p{Is_Sc=_-cham}', "");
Expect(1, 43519, '\p{^Is_Sc=_-cham}', "");
Expect(1, 43519, '\P{Is_Sc=_-cham}', "");
Expect(0, 43519, '\P{^Is_Sc=_-cham}', "");
Error('\p{Script=/a/Tibetan}');
Error('\P{Script=/a/Tibetan}');
Expect(1, 3911, '\p{Script=tibetan}', "");
Expect(0, 3911, '\p{^Script=tibetan}', "");
Expect(0, 3911, '\P{Script=tibetan}', "");
Expect(1, 3911, '\P{^Script=tibetan}', "");
Expect(0, 3839, '\p{Script=tibetan}', "");
Expect(1, 3839, '\p{^Script=tibetan}', "");
Expect(1, 3839, '\P{Script=tibetan}', "");
Expect(0, 3839, '\P{^Script=tibetan}', "");
Expect(1, 3911, '\p{Script=	-Tibetan}', "");
Expect(0, 3911, '\p{^Script=	-Tibetan}', "");
Expect(0, 3911, '\P{Script=	-Tibetan}', "");
Expect(1, 3911, '\P{^Script=	-Tibetan}', "");
Expect(0, 3839, '\p{Script=	-Tibetan}', "");
Expect(1, 3839, '\p{^Script=	-Tibetan}', "");
Expect(1, 3839, '\P{Script=	-Tibetan}', "");
Expect(0, 3839, '\P{^Script=	-Tibetan}', "");
Error('\p{Sc=:=_ TIBT}');
Error('\P{Sc=:=_ TIBT}');
Expect(1, 3911, '\p{Sc=tibt}', "");
Expect(0, 3911, '\p{^Sc=tibt}', "");
Expect(0, 3911, '\P{Sc=tibt}', "");
Expect(1, 3911, '\P{^Sc=tibt}', "");
Expect(0, 3839, '\p{Sc=tibt}', "");
Expect(1, 3839, '\p{^Sc=tibt}', "");
Expect(1, 3839, '\P{Sc=tibt}', "");
Expect(0, 3839, '\P{^Sc=tibt}', "");
Expect(1, 3911, '\p{Sc:	 TIBT}', "");
Expect(0, 3911, '\p{^Sc:	 TIBT}', "");
Expect(0, 3911, '\P{Sc:	 TIBT}', "");
Expect(1, 3911, '\P{^Sc:	 TIBT}', "");
Expect(0, 3839, '\p{Sc:	 TIBT}', "");
Expect(1, 3839, '\p{^Sc:	 TIBT}', "");
Expect(1, 3839, '\P{Sc:	 TIBT}', "");
Expect(0, 3839, '\P{^Sc:	 TIBT}', "");
Error('\p{Is_Script=-	Tibetan:=}');
Error('\P{Is_Script=-	Tibetan:=}');
Expect(1, 3911, '\p{Is_Script=tibetan}', "");
Expect(0, 3911, '\p{^Is_Script=tibetan}', "");
Expect(0, 3911, '\P{Is_Script=tibetan}', "");
Expect(1, 3911, '\P{^Is_Script=tibetan}', "");
Expect(0, 3839, '\p{Is_Script=tibetan}', "");
Expect(1, 3839, '\p{^Is_Script=tibetan}', "");
Expect(1, 3839, '\P{Is_Script=tibetan}', "");
Expect(0, 3839, '\P{^Is_Script=tibetan}', "");
Expect(1, 3911, '\p{Is_Script=-_TIBETAN}', "");
Expect(0, 3911, '\p{^Is_Script=-_TIBETAN}', "");
Expect(0, 3911, '\P{Is_Script=-_TIBETAN}', "");
Expect(1, 3911, '\P{^Is_Script=-_TIBETAN}', "");
Expect(0, 3839, '\p{Is_Script=-_TIBETAN}', "");
Expect(1, 3839, '\p{^Is_Script=-_TIBETAN}', "");
Expect(1, 3839, '\P{Is_Script=-_TIBETAN}', "");
Expect(0, 3839, '\P{^Is_Script=-_TIBETAN}', "");
Error('\p{Is_Sc=:=  TIBT}');
Error('\P{Is_Sc=:=  TIBT}');
Expect(1, 3911, '\p{Is_Sc=tibt}', "");
Expect(0, 3911, '\p{^Is_Sc=tibt}', "");
Expect(0, 3911, '\P{Is_Sc=tibt}', "");
Expect(1, 3911, '\P{^Is_Sc=tibt}', "");
Expect(0, 3839, '\p{Is_Sc=tibt}', "");
Expect(1, 3839, '\p{^Is_Sc=tibt}', "");
Expect(1, 3839, '\P{Is_Sc=tibt}', "");
Expect(0, 3839, '\P{^Is_Sc=tibt}', "");
Expect(1, 3911, '\p{Is_Sc=	TIBT}', "");
Expect(0, 3911, '\p{^Is_Sc=	TIBT}', "");
Expect(0, 3911, '\P{Is_Sc=	TIBT}', "");
Expect(1, 3911, '\P{^Is_Sc=	TIBT}', "");
Expect(0, 3839, '\p{Is_Sc=	TIBT}', "");
Expect(1, 3839, '\p{^Is_Sc=	TIBT}', "");
Expect(1, 3839, '\P{Is_Sc=	TIBT}', "");
Expect(0, 3839, '\P{^Is_Sc=	TIBT}', "");
Error('\p{Script= ogham:=}');
Error('\P{Script= ogham:=}');
Expect(1, 5788, '\p{Script=ogham}', "");
Expect(0, 5788, '\p{^Script=ogham}', "");
Expect(0, 5788, '\P{Script=ogham}', "");
Expect(1, 5788, '\P{^Script=ogham}', "");
Expect(0, 5759, '\p{Script=ogham}', "");
Expect(1, 5759, '\p{^Script=ogham}', "");
Expect(1, 5759, '\P{Script=ogham}', "");
Expect(0, 5759, '\P{^Script=ogham}', "");
Expect(1, 5788, '\p{Script=	Ogham}', "");
Expect(0, 5788, '\p{^Script=	Ogham}', "");
Expect(0, 5788, '\P{Script=	Ogham}', "");
Expect(1, 5788, '\P{^Script=	Ogham}', "");
Expect(0, 5759, '\p{Script=	Ogham}', "");
Expect(1, 5759, '\p{^Script=	Ogham}', "");
Expect(1, 5759, '\P{Script=	Ogham}', "");
Expect(0, 5759, '\P{^Script=	Ogham}', "");
Error('\p{Sc=--OGAM:=}');
Error('\P{Sc=--OGAM:=}');
Expect(1, 5788, '\p{Sc=ogam}', "");
Expect(0, 5788, '\p{^Sc=ogam}', "");
Expect(0, 5788, '\P{Sc=ogam}', "");
Expect(1, 5788, '\P{^Sc=ogam}', "");
Expect(0, 5759, '\p{Sc=ogam}', "");
Expect(1, 5759, '\p{^Sc=ogam}', "");
Expect(1, 5759, '\P{Sc=ogam}', "");
Expect(0, 5759, '\P{^Sc=ogam}', "");
Expect(1, 5788, '\p{Sc= ogam}', "");
Expect(0, 5788, '\p{^Sc= ogam}', "");
Expect(0, 5788, '\P{Sc= ogam}', "");
Expect(1, 5788, '\P{^Sc= ogam}', "");
Expect(0, 5759, '\p{Sc= ogam}', "");
Expect(1, 5759, '\p{^Sc= ogam}', "");
Expect(1, 5759, '\P{Sc= ogam}', "");
Expect(0, 5759, '\P{^Sc= ogam}', "");
Error('\p{Is_Script=	_Ogham:=}');
Error('\P{Is_Script=	_Ogham:=}');
Expect(1, 5788, '\p{Is_Script=ogham}', "");
Expect(0, 5788, '\p{^Is_Script=ogham}', "");
Expect(0, 5788, '\P{Is_Script=ogham}', "");
Expect(1, 5788, '\P{^Is_Script=ogham}', "");
Expect(0, 5759, '\p{Is_Script=ogham}', "");
Expect(1, 5759, '\p{^Is_Script=ogham}', "");
Expect(1, 5759, '\P{Is_Script=ogham}', "");
Expect(0, 5759, '\P{^Is_Script=ogham}', "");
Expect(1, 5788, '\p{Is_Script= ogham}', "");
Expect(0, 5788, '\p{^Is_Script= ogham}', "");
Expect(0, 5788, '\P{Is_Script= ogham}', "");
Expect(1, 5788, '\P{^Is_Script= ogham}', "");
Expect(0, 5759, '\p{Is_Script= ogham}', "");
Expect(1, 5759, '\p{^Is_Script= ogham}', "");
Expect(1, 5759, '\P{Is_Script= ogham}', "");
Expect(0, 5759, '\P{^Is_Script= ogham}', "");
Error('\p{Is_Sc=	_Ogam/a/}');
Error('\P{Is_Sc=	_Ogam/a/}');
Expect(1, 5788, '\p{Is_Sc:	ogam}', "");
Expect(0, 5788, '\p{^Is_Sc:	ogam}', "");
Expect(0, 5788, '\P{Is_Sc:	ogam}', "");
Expect(1, 5788, '\P{^Is_Sc:	ogam}', "");
Expect(0, 5759, '\p{Is_Sc:	ogam}', "");
Expect(1, 5759, '\p{^Is_Sc:	ogam}', "");
Expect(1, 5759, '\P{Is_Sc:	ogam}', "");
Expect(0, 5759, '\P{^Is_Sc:	ogam}', "");
Expect(1, 5788, '\p{Is_Sc=		Ogam}', "");
Expect(0, 5788, '\p{^Is_Sc=		Ogam}', "");
Expect(0, 5788, '\P{Is_Sc=		Ogam}', "");
Expect(1, 5788, '\P{^Is_Sc=		Ogam}', "");
Expect(0, 5759, '\p{Is_Sc=		Ogam}', "");
Expect(1, 5759, '\p{^Is_Sc=		Ogam}', "");
Expect(1, 5759, '\P{Is_Sc=		Ogam}', "");
Expect(0, 5759, '\P{^Is_Sc=		Ogam}', "");
Error('\p{Script: Tai	Viet/a/}');
Error('\P{Script: Tai	Viet/a/}');
Expect(1, 43714, '\p{Script=taiviet}', "");
Expect(0, 43714, '\p{^Script=taiviet}', "");
Expect(0, 43714, '\P{Script=taiviet}', "");
Expect(1, 43714, '\P{^Script=taiviet}', "");
Expect(0, 43647, '\p{Script=taiviet}', "");
Expect(1, 43647, '\p{^Script=taiviet}', "");
Expect(1, 43647, '\P{Script=taiviet}', "");
Expect(0, 43647, '\P{^Script=taiviet}', "");
Expect(1, 43714, '\p{Script: Tai-viet}', "");
Expect(0, 43714, '\p{^Script: Tai-viet}', "");
Expect(0, 43714, '\P{Script: Tai-viet}', "");
Expect(1, 43714, '\P{^Script: Tai-viet}', "");
Expect(0, 43647, '\p{Script: Tai-viet}', "");
Expect(1, 43647, '\p{^Script: Tai-viet}', "");
Expect(1, 43647, '\P{Script: Tai-viet}', "");
Expect(0, 43647, '\P{^Script: Tai-viet}', "");
Error('\p{Sc=	:=Tavt}');
Error('\P{Sc=	:=Tavt}');
Expect(1, 43714, '\p{Sc=tavt}', "");
Expect(0, 43714, '\p{^Sc=tavt}', "");
Expect(0, 43714, '\P{Sc=tavt}', "");
Expect(1, 43714, '\P{^Sc=tavt}', "");
Expect(0, 43647, '\p{Sc=tavt}', "");
Expect(1, 43647, '\p{^Sc=tavt}', "");
Expect(1, 43647, '\P{Sc=tavt}', "");
Expect(0, 43647, '\P{^Sc=tavt}', "");
Error('\p{Is_Script=	/a/TAI-VIET}');
Error('\P{Is_Script=	/a/TAI-VIET}');
Expect(1, 43714, '\p{Is_Script=taiviet}', "");
Expect(0, 43714, '\p{^Is_Script=taiviet}', "");
Expect(0, 43714, '\P{Is_Script=taiviet}', "");
Expect(1, 43714, '\P{^Is_Script=taiviet}', "");
Expect(0, 43647, '\p{Is_Script=taiviet}', "");
Expect(1, 43647, '\p{^Is_Script=taiviet}', "");
Expect(1, 43647, '\P{Is_Script=taiviet}', "");
Expect(0, 43647, '\P{^Is_Script=taiviet}', "");
Expect(1, 43714, '\p{Is_Script=__Tai_Viet}', "");
Expect(0, 43714, '\p{^Is_Script=__Tai_Viet}', "");
Expect(0, 43714, '\P{Is_Script=__Tai_Viet}', "");
Expect(1, 43714, '\P{^Is_Script=__Tai_Viet}', "");
Expect(0, 43647, '\p{Is_Script=__Tai_Viet}', "");
Expect(1, 43647, '\p{^Is_Script=__Tai_Viet}', "");
Expect(1, 43647, '\P{Is_Script=__Tai_Viet}', "");
Expect(0, 43647, '\P{^Is_Script=__Tai_Viet}', "");
Error('\p{Is_Sc=:=_ Tavt}');
Error('\P{Is_Sc=:=_ Tavt}');
Expect(1, 43714, '\p{Is_Sc=tavt}', "");
Expect(0, 43714, '\p{^Is_Sc=tavt}', "");
Expect(0, 43714, '\P{Is_Sc=tavt}', "");
Expect(1, 43714, '\P{^Is_Sc=tavt}', "");
Expect(0, 43647, '\p{Is_Sc=tavt}', "");
Expect(1, 43647, '\p{^Is_Sc=tavt}', "");
Expect(1, 43647, '\P{Is_Sc=tavt}', "");
Expect(0, 43647, '\P{^Is_Sc=tavt}', "");
Expect(1, 43714, '\p{Is_Sc=-Tavt}', "");
Expect(0, 43714, '\p{^Is_Sc=-Tavt}', "");
Expect(0, 43714, '\P{Is_Sc=-Tavt}', "");
Expect(1, 43714, '\P{^Is_Sc=-Tavt}', "");
Expect(0, 43647, '\p{Is_Sc=-Tavt}', "");
Expect(1, 43647, '\p{^Is_Sc=-Tavt}', "");
Expect(1, 43647, '\P{Is_Sc=-Tavt}', "");
Expect(0, 43647, '\P{^Is_Sc=-Tavt}', "");
Error('\p{Script=/a/Malayalam}');
Error('\P{Script=/a/Malayalam}');
Expect(1, 3331, '\p{Script=malayalam}', "");
Expect(0, 3331, '\p{^Script=malayalam}', "");
Expect(0, 3331, '\P{Script=malayalam}', "");
Expect(1, 3331, '\P{^Script=malayalam}', "");
Expect(0, 3329, '\p{Script=malayalam}', "");
Expect(1, 3329, '\p{^Script=malayalam}', "");
Expect(1, 3329, '\P{Script=malayalam}', "");
Expect(0, 3329, '\P{^Script=malayalam}', "");
Expect(1, 3331, '\p{Script=_	MALAYALAM}', "");
Expect(0, 3331, '\p{^Script=_	MALAYALAM}', "");
Expect(0, 3331, '\P{Script=_	MALAYALAM}', "");
Expect(1, 3331, '\P{^Script=_	MALAYALAM}', "");
Expect(0, 3329, '\p{Script=_	MALAYALAM}', "");
Expect(1, 3329, '\p{^Script=_	MALAYALAM}', "");
Expect(1, 3329, '\P{Script=_	MALAYALAM}', "");
Expect(0, 3329, '\P{^Script=_	MALAYALAM}', "");
Error('\p{Sc:	_/a/mlym}');
Error('\P{Sc:	_/a/mlym}');
Expect(1, 3331, '\p{Sc=mlym}', "");
Expect(0, 3331, '\p{^Sc=mlym}', "");
Expect(0, 3331, '\P{Sc=mlym}', "");
Expect(1, 3331, '\P{^Sc=mlym}', "");
Expect(0, 3329, '\p{Sc=mlym}', "");
Expect(1, 3329, '\p{^Sc=mlym}', "");
Expect(1, 3329, '\P{Sc=mlym}', "");
Expect(0, 3329, '\P{^Sc=mlym}', "");
Expect(1, 3331, '\p{Sc: -MLYM}', "");
Expect(0, 3331, '\p{^Sc: -MLYM}', "");
Expect(0, 3331, '\P{Sc: -MLYM}', "");
Expect(1, 3331, '\P{^Sc: -MLYM}', "");
Expect(0, 3329, '\p{Sc: -MLYM}', "");
Expect(1, 3329, '\p{^Sc: -MLYM}', "");
Expect(1, 3329, '\P{Sc: -MLYM}', "");
Expect(0, 3329, '\P{^Sc: -MLYM}', "");
Error('\p{Is_Script=:= 	MALAYALAM}');
Error('\P{Is_Script=:= 	MALAYALAM}');
Expect(1, 3331, '\p{Is_Script=malayalam}', "");
Expect(0, 3331, '\p{^Is_Script=malayalam}', "");
Expect(0, 3331, '\P{Is_Script=malayalam}', "");
Expect(1, 3331, '\P{^Is_Script=malayalam}', "");
Expect(0, 3329, '\p{Is_Script=malayalam}', "");
Expect(1, 3329, '\p{^Is_Script=malayalam}', "");
Expect(1, 3329, '\P{Is_Script=malayalam}', "");
Expect(0, 3329, '\P{^Is_Script=malayalam}', "");
Expect(1, 3331, '\p{Is_Script=-Malayalam}', "");
Expect(0, 3331, '\p{^Is_Script=-Malayalam}', "");
Expect(0, 3331, '\P{Is_Script=-Malayalam}', "");
Expect(1, 3331, '\P{^Is_Script=-Malayalam}', "");
Expect(0, 3329, '\p{Is_Script=-Malayalam}', "");
Expect(1, 3329, '\p{^Is_Script=-Malayalam}', "");
Expect(1, 3329, '\P{Is_Script=-Malayalam}', "");
Expect(0, 3329, '\P{^Is_Script=-Malayalam}', "");
Error('\p{Is_Sc=:=mlym}');
Error('\P{Is_Sc=:=mlym}');
Expect(1, 3331, '\p{Is_Sc=mlym}', "");
Expect(0, 3331, '\p{^Is_Sc=mlym}', "");
Expect(0, 3331, '\P{Is_Sc=mlym}', "");
Expect(1, 3331, '\P{^Is_Sc=mlym}', "");
Expect(0, 3329, '\p{Is_Sc=mlym}', "");
Expect(1, 3329, '\p{^Is_Sc=mlym}', "");
Expect(1, 3329, '\P{Is_Sc=mlym}', "");
Expect(0, 3329, '\P{^Is_Sc=mlym}', "");
Expect(1, 3331, '\p{Is_Sc=_Mlym}', "");
Expect(0, 3331, '\p{^Is_Sc=_Mlym}', "");
Expect(0, 3331, '\P{Is_Sc=_Mlym}', "");
Expect(1, 3331, '\P{^Is_Sc=_Mlym}', "");
Expect(0, 3329, '\p{Is_Sc=_Mlym}', "");
Expect(1, 3329, '\p{^Is_Sc=_Mlym}', "");
Expect(1, 3329, '\P{Is_Sc=_Mlym}', "");
Expect(0, 3329, '\P{^Is_Sc=_Mlym}', "");
Error('\p{Script=_-Old/a/persian}');
Error('\P{Script=_-Old/a/persian}');
Expect(1, 66499, '\p{Script=oldpersian}', "");
Expect(0, 66499, '\p{^Script=oldpersian}', "");
Expect(0, 66499, '\P{Script=oldpersian}', "");
Expect(1, 66499, '\P{^Script=oldpersian}', "");
Expect(0, 66463, '\p{Script=oldpersian}', "");
Expect(1, 66463, '\p{^Script=oldpersian}', "");
Expect(1, 66463, '\P{Script=oldpersian}', "");
Expect(0, 66463, '\P{^Script=oldpersian}', "");
Expect(1, 66499, '\p{Script=OLD persian}', "");
Expect(0, 66499, '\p{^Script=OLD persian}', "");
Expect(0, 66499, '\P{Script=OLD persian}', "");
Expect(1, 66499, '\P{^Script=OLD persian}', "");
Expect(0, 66463, '\p{Script=OLD persian}', "");
Expect(1, 66463, '\p{^Script=OLD persian}', "");
Expect(1, 66463, '\P{Script=OLD persian}', "");
Expect(0, 66463, '\P{^Script=OLD persian}', "");
Error('\p{Sc=	Xpeo:=}');
Error('\P{Sc=	Xpeo:=}');
Expect(1, 66499, '\p{Sc=xpeo}', "");
Expect(0, 66499, '\p{^Sc=xpeo}', "");
Expect(0, 66499, '\P{Sc=xpeo}', "");
Expect(1, 66499, '\P{^Sc=xpeo}', "");
Expect(0, 66463, '\p{Sc=xpeo}', "");
Expect(1, 66463, '\p{^Sc=xpeo}', "");
Expect(1, 66463, '\P{Sc=xpeo}', "");
Expect(0, 66463, '\P{^Sc=xpeo}', "");
Expect(1, 66499, '\p{Sc=--Xpeo}', "");
Expect(0, 66499, '\p{^Sc=--Xpeo}', "");
Expect(0, 66499, '\P{Sc=--Xpeo}', "");
Expect(1, 66499, '\P{^Sc=--Xpeo}', "");
Expect(0, 66463, '\p{Sc=--Xpeo}', "");
Expect(1, 66463, '\p{^Sc=--Xpeo}', "");
Expect(1, 66463, '\P{Sc=--Xpeo}', "");
Expect(0, 66463, '\P{^Sc=--Xpeo}', "");
Error('\p{Is_Script=	:=old-Persian}');
Error('\P{Is_Script=	:=old-Persian}');
Expect(1, 66499, '\p{Is_Script=oldpersian}', "");
Expect(0, 66499, '\p{^Is_Script=oldpersian}', "");
Expect(0, 66499, '\P{Is_Script=oldpersian}', "");
Expect(1, 66499, '\P{^Is_Script=oldpersian}', "");
Expect(0, 66463, '\p{Is_Script=oldpersian}', "");
Expect(1, 66463, '\p{^Is_Script=oldpersian}', "");
Expect(1, 66463, '\P{Is_Script=oldpersian}', "");
Expect(0, 66463, '\P{^Is_Script=oldpersian}', "");
Expect(1, 66499, '\p{Is_Script=-OLDPersian}', "");
Expect(0, 66499, '\p{^Is_Script=-OLDPersian}', "");
Expect(0, 66499, '\P{Is_Script=-OLDPersian}', "");
Expect(1, 66499, '\P{^Is_Script=-OLDPersian}', "");
Expect(0, 66463, '\p{Is_Script=-OLDPersian}', "");
Expect(1, 66463, '\p{^Is_Script=-OLDPersian}', "");
Expect(1, 66463, '\P{Is_Script=-OLDPersian}', "");
Expect(0, 66463, '\P{^Is_Script=-OLDPersian}', "");
Error('\p{Is_Sc=		XPEO/a/}');
Error('\P{Is_Sc=		XPEO/a/}');
Expect(1, 66499, '\p{Is_Sc=xpeo}', "");
Expect(0, 66499, '\p{^Is_Sc=xpeo}', "");
Expect(0, 66499, '\P{Is_Sc=xpeo}', "");
Expect(1, 66499, '\P{^Is_Sc=xpeo}', "");
Expect(0, 66463, '\p{Is_Sc=xpeo}', "");
Expect(1, 66463, '\p{^Is_Sc=xpeo}', "");
Expect(1, 66463, '\P{Is_Sc=xpeo}', "");
Expect(0, 66463, '\P{^Is_Sc=xpeo}', "");
Expect(1, 66499, '\p{Is_Sc=_Xpeo}', "");
Expect(0, 66499, '\p{^Is_Sc=_Xpeo}', "");
Expect(0, 66499, '\P{Is_Sc=_Xpeo}', "");
Expect(1, 66499, '\P{^Is_Sc=_Xpeo}', "");
Expect(0, 66463, '\p{Is_Sc=_Xpeo}', "");
Expect(1, 66463, '\p{^Is_Sc=_Xpeo}', "");
Expect(1, 66463, '\P{Is_Sc=_Xpeo}', "");
Expect(0, 66463, '\P{^Is_Sc=_Xpeo}', "");
Error('\p{Script=:=	-MYANMAR}');
Error('\P{Script=:=	-MYANMAR}');
Expect(1, 4255, '\p{Script=myanmar}', "");
Expect(0, 4255, '\p{^Script=myanmar}', "");
Expect(0, 4255, '\P{Script=myanmar}', "");
Expect(1, 4255, '\P{^Script=myanmar}', "");
Expect(0, 4095, '\p{Script=myanmar}', "");
Expect(1, 4095, '\p{^Script=myanmar}', "");
Expect(1, 4095, '\P{Script=myanmar}', "");
Expect(0, 4095, '\P{^Script=myanmar}', "");
Expect(1, 4255, '\p{Script=	 Myanmar}', "");
Expect(0, 4255, '\p{^Script=	 Myanmar}', "");
Expect(0, 4255, '\P{Script=	 Myanmar}', "");
Expect(1, 4255, '\P{^Script=	 Myanmar}', "");
Expect(0, 4095, '\p{Script=	 Myanmar}', "");
Expect(1, 4095, '\p{^Script=	 Myanmar}', "");
Expect(1, 4095, '\P{Script=	 Myanmar}', "");
Expect(0, 4095, '\P{^Script=	 Myanmar}', "");
Error('\p{Sc=:=__mymr}');
Error('\P{Sc=:=__mymr}');
Expect(1, 4255, '\p{Sc=mymr}', "");
Expect(0, 4255, '\p{^Sc=mymr}', "");
Expect(0, 4255, '\P{Sc=mymr}', "");
Expect(1, 4255, '\P{^Sc=mymr}', "");
Expect(0, 4095, '\p{Sc=mymr}', "");
Expect(1, 4095, '\p{^Sc=mymr}', "");
Expect(1, 4095, '\P{Sc=mymr}', "");
Expect(0, 4095, '\P{^Sc=mymr}', "");
Expect(1, 4255, '\p{Sc=_ mymr}', "");
Expect(0, 4255, '\p{^Sc=_ mymr}', "");
Expect(0, 4255, '\P{Sc=_ mymr}', "");
Expect(1, 4255, '\P{^Sc=_ mymr}', "");
Expect(0, 4095, '\p{Sc=_ mymr}', "");
Expect(1, 4095, '\p{^Sc=_ mymr}', "");
Expect(1, 4095, '\P{Sc=_ mymr}', "");
Expect(0, 4095, '\P{^Sc=_ mymr}', "");
Error('\p{Is_Script=/a/myanmar}');
Error('\P{Is_Script=/a/myanmar}');
Expect(1, 4255, '\p{Is_Script=myanmar}', "");
Expect(0, 4255, '\p{^Is_Script=myanmar}', "");
Expect(0, 4255, '\P{Is_Script=myanmar}', "");
Expect(1, 4255, '\P{^Is_Script=myanmar}', "");
Expect(0, 4095, '\p{Is_Script=myanmar}', "");
Expect(1, 4095, '\p{^Is_Script=myanmar}', "");
Expect(1, 4095, '\P{Is_Script=myanmar}', "");
Expect(0, 4095, '\P{^Is_Script=myanmar}', "");
Expect(1, 4255, '\p{Is_Script=	MYANMAR}', "");
Expect(0, 4255, '\p{^Is_Script=	MYANMAR}', "");
Expect(0, 4255, '\P{Is_Script=	MYANMAR}', "");
Expect(1, 4255, '\P{^Is_Script=	MYANMAR}', "");
Expect(0, 4095, '\p{Is_Script=	MYANMAR}', "");
Expect(1, 4095, '\p{^Is_Script=	MYANMAR}', "");
Expect(1, 4095, '\P{Is_Script=	MYANMAR}', "");
Expect(0, 4095, '\P{^Is_Script=	MYANMAR}', "");
Error('\p{Is_Sc=:=Mymr}');
Error('\P{Is_Sc=:=Mymr}');
Expect(1, 4255, '\p{Is_Sc=mymr}', "");
Expect(0, 4255, '\p{^Is_Sc=mymr}', "");
Expect(0, 4255, '\P{Is_Sc=mymr}', "");
Expect(1, 4255, '\P{^Is_Sc=mymr}', "");
Expect(0, 4095, '\p{Is_Sc=mymr}', "");
Expect(1, 4095, '\p{^Is_Sc=mymr}', "");
Expect(1, 4095, '\P{Is_Sc=mymr}', "");
Expect(0, 4095, '\P{^Is_Sc=mymr}', "");
Expect(1, 4255, '\p{Is_Sc= _mymr}', "");
Expect(0, 4255, '\p{^Is_Sc= _mymr}', "");
Expect(0, 4255, '\P{Is_Sc= _mymr}', "");
Expect(1, 4255, '\P{^Is_Sc= _mymr}', "");
Expect(0, 4095, '\p{Is_Sc= _mymr}', "");
Expect(1, 4095, '\p{^Is_Sc= _mymr}', "");
Expect(1, 4095, '\P{Is_Sc= _mymr}', "");
Expect(0, 4095, '\P{^Is_Sc= _mymr}', "");
Error('\p{Script:   --OLD-Turkic/a/}');
Error('\P{Script:   --OLD-Turkic/a/}');
Expect(1, 68680, '\p{Script=oldturkic}', "");
Expect(0, 68680, '\p{^Script=oldturkic}', "");
Expect(0, 68680, '\P{Script=oldturkic}', "");
Expect(1, 68680, '\P{^Script=oldturkic}', "");
Expect(0, 68607, '\p{Script=oldturkic}', "");
Expect(1, 68607, '\p{^Script=oldturkic}', "");
Expect(1, 68607, '\P{Script=oldturkic}', "");
Expect(0, 68607, '\P{^Script=oldturkic}', "");
Expect(1, 68680, '\p{Script:_ OLDTurkic}', "");
Expect(0, 68680, '\p{^Script:_ OLDTurkic}', "");
Expect(0, 68680, '\P{Script:_ OLDTurkic}', "");
Expect(1, 68680, '\P{^Script:_ OLDTurkic}', "");
Expect(0, 68607, '\p{Script:_ OLDTurkic}', "");
Expect(1, 68607, '\p{^Script:_ OLDTurkic}', "");
Expect(1, 68607, '\P{Script:_ OLDTurkic}', "");
Expect(0, 68607, '\P{^Script:_ OLDTurkic}', "");
Error('\p{Sc=-:=Orkh}');
Error('\P{Sc=-:=Orkh}');
Expect(1, 68680, '\p{Sc=orkh}', "");
Expect(0, 68680, '\p{^Sc=orkh}', "");
Expect(0, 68680, '\P{Sc=orkh}', "");
Expect(1, 68680, '\P{^Sc=orkh}', "");
Expect(0, 68607, '\p{Sc=orkh}', "");
Expect(1, 68607, '\p{^Sc=orkh}', "");
Expect(1, 68607, '\P{Sc=orkh}', "");
Expect(0, 68607, '\P{^Sc=orkh}', "");
Expect(1, 68680, '\p{Sc=_Orkh}', "");
Expect(0, 68680, '\p{^Sc=_Orkh}', "");
Expect(0, 68680, '\P{Sc=_Orkh}', "");
Expect(1, 68680, '\P{^Sc=_Orkh}', "");
Expect(0, 68607, '\p{Sc=_Orkh}', "");
Expect(1, 68607, '\p{^Sc=_Orkh}', "");
Expect(1, 68607, '\P{Sc=_Orkh}', "");
Expect(0, 68607, '\P{^Sc=_Orkh}', "");
Error('\p{Is_Script= old:=turkic}');
Error('\P{Is_Script= old:=turkic}');
Expect(1, 68680, '\p{Is_Script=oldturkic}', "");
Expect(0, 68680, '\p{^Is_Script=oldturkic}', "");
Expect(0, 68680, '\P{Is_Script=oldturkic}', "");
Expect(1, 68680, '\P{^Is_Script=oldturkic}', "");
Expect(0, 68607, '\p{Is_Script=oldturkic}', "");
Expect(1, 68607, '\p{^Is_Script=oldturkic}', "");
Expect(1, 68607, '\P{Is_Script=oldturkic}', "");
Expect(0, 68607, '\P{^Is_Script=oldturkic}', "");
Expect(1, 68680, '\p{Is_Script=-	old Turkic}', "");
Expect(0, 68680, '\p{^Is_Script=-	old Turkic}', "");
Expect(0, 68680, '\P{Is_Script=-	old Turkic}', "");
Expect(1, 68680, '\P{^Is_Script=-	old Turkic}', "");
Expect(0, 68607, '\p{Is_Script=-	old Turkic}', "");
Expect(1, 68607, '\p{^Is_Script=-	old Turkic}', "");
Expect(1, 68607, '\P{Is_Script=-	old Turkic}', "");
Expect(0, 68607, '\P{^Is_Script=-	old Turkic}', "");
Error('\p{Is_Sc=:=	orkh}');
Error('\P{Is_Sc=:=	orkh}');
Expect(1, 68680, '\p{Is_Sc=orkh}', "");
Expect(0, 68680, '\p{^Is_Sc=orkh}', "");
Expect(0, 68680, '\P{Is_Sc=orkh}', "");
Expect(1, 68680, '\P{^Is_Sc=orkh}', "");
Expect(0, 68607, '\p{Is_Sc=orkh}', "");
Expect(1, 68607, '\p{^Is_Sc=orkh}', "");
Expect(1, 68607, '\P{Is_Sc=orkh}', "");
Expect(0, 68607, '\P{^Is_Sc=orkh}', "");
Expect(1, 68680, '\p{Is_Sc=-	Orkh}', "");
Expect(0, 68680, '\p{^Is_Sc=-	Orkh}', "");
Expect(0, 68680, '\P{Is_Sc=-	Orkh}', "");
Expect(1, 68680, '\P{^Is_Sc=-	Orkh}', "");
Expect(0, 68607, '\p{Is_Sc=-	Orkh}', "");
Expect(1, 68607, '\p{^Is_Sc=-	Orkh}', "");
Expect(1, 68607, '\P{Is_Sc=-	Orkh}', "");
Expect(0, 68607, '\P{^Is_Sc=-	Orkh}', "");
Error('\p{Script=-osmanya/a/}');
Error('\P{Script=-osmanya/a/}');
Expect(1, 66717, '\p{Script: osmanya}', "");
Expect(0, 66717, '\p{^Script: osmanya}', "");
Expect(0, 66717, '\P{Script: osmanya}', "");
Expect(1, 66717, '\P{^Script: osmanya}', "");
Expect(0, 66687, '\p{Script: osmanya}', "");
Expect(1, 66687, '\p{^Script: osmanya}', "");
Expect(1, 66687, '\P{Script: osmanya}', "");
Expect(0, 66687, '\P{^Script: osmanya}', "");
Expect(1, 66717, '\p{Script= osmanya}', "");
Expect(0, 66717, '\p{^Script= osmanya}', "");
Expect(0, 66717, '\P{Script= osmanya}', "");
Expect(1, 66717, '\P{^Script= osmanya}', "");
Expect(0, 66687, '\p{Script= osmanya}', "");
Expect(1, 66687, '\p{^Script= osmanya}', "");
Expect(1, 66687, '\P{Script= osmanya}', "");
Expect(0, 66687, '\P{^Script= osmanya}', "");
Error('\p{Sc=_:=OSMA}');
Error('\P{Sc=_:=OSMA}');
Expect(1, 66717, '\p{Sc=osma}', "");
Expect(0, 66717, '\p{^Sc=osma}', "");
Expect(0, 66717, '\P{Sc=osma}', "");
Expect(1, 66717, '\P{^Sc=osma}', "");
Expect(0, 66687, '\p{Sc=osma}', "");
Expect(1, 66687, '\p{^Sc=osma}', "");
Expect(1, 66687, '\P{Sc=osma}', "");
Expect(0, 66687, '\P{^Sc=osma}', "");
Expect(1, 66717, '\p{Sc=__Osma}', "");
Expect(0, 66717, '\p{^Sc=__Osma}', "");
Expect(0, 66717, '\P{Sc=__Osma}', "");
Expect(1, 66717, '\P{^Sc=__Osma}', "");
Expect(0, 66687, '\p{Sc=__Osma}', "");
Expect(1, 66687, '\p{^Sc=__Osma}', "");
Expect(1, 66687, '\P{Sc=__Osma}', "");
Expect(0, 66687, '\P{^Sc=__Osma}', "");
Error('\p{Is_Script=_osmanya/a/}');
Error('\P{Is_Script=_osmanya/a/}');
Expect(1, 66717, '\p{Is_Script=osmanya}', "");
Expect(0, 66717, '\p{^Is_Script=osmanya}', "");
Expect(0, 66717, '\P{Is_Script=osmanya}', "");
Expect(1, 66717, '\P{^Is_Script=osmanya}', "");
Expect(0, 66687, '\p{Is_Script=osmanya}', "");
Expect(1, 66687, '\p{^Is_Script=osmanya}', "");
Expect(1, 66687, '\P{Is_Script=osmanya}', "");
Expect(0, 66687, '\P{^Is_Script=osmanya}', "");
Expect(1, 66717, '\p{Is_Script:   -_Osmanya}', "");
Expect(0, 66717, '\p{^Is_Script:   -_Osmanya}', "");
Expect(0, 66717, '\P{Is_Script:   -_Osmanya}', "");
Expect(1, 66717, '\P{^Is_Script:   -_Osmanya}', "");
Expect(0, 66687, '\p{Is_Script:   -_Osmanya}', "");
Expect(1, 66687, '\p{^Is_Script:   -_Osmanya}', "");
Expect(1, 66687, '\P{Is_Script:   -_Osmanya}', "");
Expect(0, 66687, '\P{^Is_Script:   -_Osmanya}', "");
Error('\p{Is_Sc=_/a/osma}');
Error('\P{Is_Sc=_/a/osma}');
Expect(1, 66717, '\p{Is_Sc=osma}', "");
Expect(0, 66717, '\p{^Is_Sc=osma}', "");
Expect(0, 66717, '\P{Is_Sc=osma}', "");
Expect(1, 66717, '\P{^Is_Sc=osma}', "");
Expect(0, 66687, '\p{Is_Sc=osma}', "");
Expect(1, 66687, '\p{^Is_Sc=osma}', "");
Expect(1, 66687, '\P{Is_Sc=osma}', "");
Expect(0, 66687, '\P{^Is_Sc=osma}', "");
Expect(1, 66717, '\p{Is_Sc= -Osma}', "");
Expect(0, 66717, '\p{^Is_Sc= -Osma}', "");
Expect(0, 66717, '\P{Is_Sc= -Osma}', "");
Expect(1, 66717, '\P{^Is_Sc= -Osma}', "");
Expect(0, 66687, '\p{Is_Sc= -Osma}', "");
Expect(1, 66687, '\p{^Is_Sc= -Osma}', "");
Expect(1, 66687, '\P{Is_Sc= -Osma}', "");
Expect(0, 66687, '\P{^Is_Sc= -Osma}', "");
Error('\p{Script=-:=tagalog}');
Error('\P{Script=-:=tagalog}');
Expect(1, 5900, '\p{Script=tagalog}', "");
Expect(0, 5900, '\p{^Script=tagalog}', "");
Expect(0, 5900, '\P{Script=tagalog}', "");
Expect(1, 5900, '\P{^Script=tagalog}', "");
Expect(0, 5887, '\p{Script=tagalog}', "");
Expect(1, 5887, '\p{^Script=tagalog}', "");
Expect(1, 5887, '\P{Script=tagalog}', "");
Expect(0, 5887, '\P{^Script=tagalog}', "");
Expect(1, 5900, '\p{Script=-Tagalog}', "");
Expect(0, 5900, '\p{^Script=-Tagalog}', "");
Expect(0, 5900, '\P{Script=-Tagalog}', "");
Expect(1, 5900, '\P{^Script=-Tagalog}', "");
Expect(0, 5887, '\p{Script=-Tagalog}', "");
Expect(1, 5887, '\p{^Script=-Tagalog}', "");
Expect(1, 5887, '\P{Script=-Tagalog}', "");
Expect(0, 5887, '\P{^Script=-Tagalog}', "");
Error('\p{Sc:TGLG:=}');
Error('\P{Sc:TGLG:=}');
Expect(1, 5900, '\p{Sc:tglg}', "");
Expect(0, 5900, '\p{^Sc:tglg}', "");
Expect(0, 5900, '\P{Sc:tglg}', "");
Expect(1, 5900, '\P{^Sc:tglg}', "");
Expect(0, 5887, '\p{Sc:tglg}', "");
Expect(1, 5887, '\p{^Sc:tglg}', "");
Expect(1, 5887, '\P{Sc:tglg}', "");
Expect(0, 5887, '\P{^Sc:tglg}', "");
Expect(1, 5900, '\p{Sc=_TGLG}', "");
Expect(0, 5900, '\p{^Sc=_TGLG}', "");
Expect(0, 5900, '\P{Sc=_TGLG}', "");
Expect(1, 5900, '\P{^Sc=_TGLG}', "");
Expect(0, 5887, '\p{Sc=_TGLG}', "");
Expect(1, 5887, '\p{^Sc=_TGLG}', "");
Expect(1, 5887, '\P{Sc=_TGLG}', "");
Expect(0, 5887, '\P{^Sc=_TGLG}', "");
Error('\p{Is_Script=--Tagalog/a/}');
Error('\P{Is_Script=--Tagalog/a/}');
Expect(1, 5900, '\p{Is_Script=tagalog}', "");
Expect(0, 5900, '\p{^Is_Script=tagalog}', "");
Expect(0, 5900, '\P{Is_Script=tagalog}', "");
Expect(1, 5900, '\P{^Is_Script=tagalog}', "");
Expect(0, 5887, '\p{Is_Script=tagalog}', "");
Expect(1, 5887, '\p{^Is_Script=tagalog}', "");
Expect(1, 5887, '\P{Is_Script=tagalog}', "");
Expect(0, 5887, '\P{^Is_Script=tagalog}', "");
Expect(1, 5900, '\p{Is_Script=	tagalog}', "");
Expect(0, 5900, '\p{^Is_Script=	tagalog}', "");
Expect(0, 5900, '\P{Is_Script=	tagalog}', "");
Expect(1, 5900, '\P{^Is_Script=	tagalog}', "");
Expect(0, 5887, '\p{Is_Script=	tagalog}', "");
Expect(1, 5887, '\p{^Is_Script=	tagalog}', "");
Expect(1, 5887, '\P{Is_Script=	tagalog}', "");
Expect(0, 5887, '\P{^Is_Script=	tagalog}', "");
Error('\p{Is_Sc=_-Tglg:=}');
Error('\P{Is_Sc=_-Tglg:=}');
Expect(1, 5900, '\p{Is_Sc=tglg}', "");
Expect(0, 5900, '\p{^Is_Sc=tglg}', "");
Expect(0, 5900, '\P{Is_Sc=tglg}', "");
Expect(1, 5900, '\P{^Is_Sc=tglg}', "");
Expect(0, 5887, '\p{Is_Sc=tglg}', "");
Expect(1, 5887, '\p{^Is_Sc=tglg}', "");
Expect(1, 5887, '\P{Is_Sc=tglg}', "");
Expect(0, 5887, '\P{^Is_Sc=tglg}', "");
Expect(1, 5900, '\p{Is_Sc:_ Tglg}', "");
Expect(0, 5900, '\p{^Is_Sc:_ Tglg}', "");
Expect(0, 5900, '\P{Is_Sc:_ Tglg}', "");
Expect(1, 5900, '\P{^Is_Sc:_ Tglg}', "");
Expect(0, 5887, '\p{Is_Sc:_ Tglg}', "");
Expect(1, 5887, '\p{^Is_Sc:_ Tglg}', "");
Expect(1, 5887, '\P{Is_Sc:_ Tglg}', "");
Expect(0, 5887, '\P{^Is_Sc:_ Tglg}', "");
Error('\p{Script=-/a/Gujarati}');
Error('\P{Script=-/a/Gujarati}');
Expect(1, 2691, '\p{Script=gujarati}', "");
Expect(0, 2691, '\p{^Script=gujarati}', "");
Expect(0, 2691, '\P{Script=gujarati}', "");
Expect(1, 2691, '\P{^Script=gujarati}', "");
Expect(0, 2688, '\p{Script=gujarati}', "");
Expect(1, 2688, '\p{^Script=gujarati}', "");
Expect(1, 2688, '\P{Script=gujarati}', "");
Expect(0, 2688, '\P{^Script=gujarati}', "");
Expect(1, 2691, '\p{Script= -Gujarati}', "");
Expect(0, 2691, '\p{^Script= -Gujarati}', "");
Expect(0, 2691, '\P{Script= -Gujarati}', "");
Expect(1, 2691, '\P{^Script= -Gujarati}', "");
Expect(0, 2688, '\p{Script= -Gujarati}', "");
Expect(1, 2688, '\p{^Script= -Gujarati}', "");
Expect(1, 2688, '\P{Script= -Gujarati}', "");
Expect(0, 2688, '\P{^Script= -Gujarati}', "");
Error('\p{Sc=- GUJR/a/}');
Error('\P{Sc=- GUJR/a/}');
Expect(1, 2691, '\p{Sc=gujr}', "");
Expect(0, 2691, '\p{^Sc=gujr}', "");
Expect(0, 2691, '\P{Sc=gujr}', "");
Expect(1, 2691, '\P{^Sc=gujr}', "");
Expect(0, 2688, '\p{Sc=gujr}', "");
Expect(1, 2688, '\p{^Sc=gujr}', "");
Expect(1, 2688, '\P{Sc=gujr}', "");
Expect(0, 2688, '\P{^Sc=gujr}', "");
Expect(1, 2691, '\p{Sc:   Gujr}', "");
Expect(0, 2691, '\p{^Sc:   Gujr}', "");
Expect(0, 2691, '\P{Sc:   Gujr}', "");
Expect(1, 2691, '\P{^Sc:   Gujr}', "");
Expect(0, 2688, '\p{Sc:   Gujr}', "");
Expect(1, 2688, '\p{^Sc:   Gujr}', "");
Expect(1, 2688, '\P{Sc:   Gujr}', "");
Expect(0, 2688, '\P{^Sc:   Gujr}', "");
Error('\p{Is_Script=--GUJARATI/a/}');
Error('\P{Is_Script=--GUJARATI/a/}');
Expect(1, 2691, '\p{Is_Script=gujarati}', "");
Expect(0, 2691, '\p{^Is_Script=gujarati}', "");
Expect(0, 2691, '\P{Is_Script=gujarati}', "");
Expect(1, 2691, '\P{^Is_Script=gujarati}', "");
Expect(0, 2688, '\p{Is_Script=gujarati}', "");
Expect(1, 2688, '\p{^Is_Script=gujarati}', "");
Expect(1, 2688, '\P{Is_Script=gujarati}', "");
Expect(0, 2688, '\P{^Is_Script=gujarati}', "");
Expect(1, 2691, '\p{Is_Script=- Gujarati}', "");
Expect(0, 2691, '\p{^Is_Script=- Gujarati}', "");
Expect(0, 2691, '\P{Is_Script=- Gujarati}', "");
Expect(1, 2691, '\P{^Is_Script=- Gujarati}', "");
Expect(0, 2688, '\p{Is_Script=- Gujarati}', "");
Expect(1, 2688, '\p{^Is_Script=- Gujarati}', "");
Expect(1, 2688, '\P{Is_Script=- Gujarati}', "");
Expect(0, 2688, '\P{^Is_Script=- Gujarati}', "");
Error('\p{Is_Sc=		gujr/a/}');
Error('\P{Is_Sc=		gujr/a/}');
Expect(1, 2691, '\p{Is_Sc=gujr}', "");
Expect(0, 2691, '\p{^Is_Sc=gujr}', "");
Expect(0, 2691, '\P{Is_Sc=gujr}', "");
Expect(1, 2691, '\P{^Is_Sc=gujr}', "");
Expect(0, 2688, '\p{Is_Sc=gujr}', "");
Expect(1, 2688, '\p{^Is_Sc=gujr}', "");
Expect(1, 2688, '\P{Is_Sc=gujr}', "");
Expect(0, 2688, '\P{^Is_Sc=gujr}', "");
Expect(1, 2691, '\p{Is_Sc:	-	gujr}', "");
Expect(0, 2691, '\p{^Is_Sc:	-	gujr}', "");
Expect(0, 2691, '\P{Is_Sc:	-	gujr}', "");
Expect(1, 2691, '\P{^Is_Sc:	-	gujr}', "");
Expect(0, 2688, '\p{Is_Sc:	-	gujr}', "");
Expect(1, 2688, '\p{^Is_Sc:	-	gujr}', "");
Expect(1, 2688, '\P{Is_Sc:	-	gujr}', "");
Expect(0, 2688, '\P{^Is_Sc:	-	gujr}', "");
Error('\p{Script= /a/oriya}');
Error('\P{Script= /a/oriya}');
Expect(1, 2819, '\p{Script=oriya}', "");
Expect(0, 2819, '\p{^Script=oriya}', "");
Expect(0, 2819, '\P{Script=oriya}', "");
Expect(1, 2819, '\P{^Script=oriya}', "");
Expect(0, 2816, '\p{Script=oriya}', "");
Expect(1, 2816, '\p{^Script=oriya}', "");
Expect(1, 2816, '\P{Script=oriya}', "");
Expect(0, 2816, '\P{^Script=oriya}', "");
Expect(1, 2819, '\p{Script=	-Oriya}', "");
Expect(0, 2819, '\p{^Script=	-Oriya}', "");
Expect(0, 2819, '\P{Script=	-Oriya}', "");
Expect(1, 2819, '\P{^Script=	-Oriya}', "");
Expect(0, 2816, '\p{Script=	-Oriya}', "");
Expect(1, 2816, '\p{^Script=	-Oriya}', "");
Expect(1, 2816, '\P{Script=	-Oriya}', "");
Expect(0, 2816, '\P{^Script=	-Oriya}', "");
Error('\p{Sc=:=  Orya}');
Error('\P{Sc=:=  Orya}');
Expect(1, 2819, '\p{Sc=orya}', "");
Expect(0, 2819, '\p{^Sc=orya}', "");
Expect(0, 2819, '\P{Sc=orya}', "");
Expect(1, 2819, '\P{^Sc=orya}', "");
Expect(0, 2816, '\p{Sc=orya}', "");
Expect(1, 2816, '\p{^Sc=orya}', "");
Expect(1, 2816, '\P{Sc=orya}', "");
Expect(0, 2816, '\P{^Sc=orya}', "");
Expect(1, 2819, '\p{Sc=_-ORYA}', "");
Expect(0, 2819, '\p{^Sc=_-ORYA}', "");
Expect(0, 2819, '\P{Sc=_-ORYA}', "");
Expect(1, 2819, '\P{^Sc=_-ORYA}', "");
Expect(0, 2816, '\p{Sc=_-ORYA}', "");
Expect(1, 2816, '\p{^Sc=_-ORYA}', "");
Expect(1, 2816, '\P{Sc=_-ORYA}', "");
Expect(0, 2816, '\P{^Sc=_-ORYA}', "");
Error('\p{Is_Script=-_oriya:=}');
Error('\P{Is_Script=-_oriya:=}');
Expect(1, 2819, '\p{Is_Script:	oriya}', "");
Expect(0, 2819, '\p{^Is_Script:	oriya}', "");
Expect(0, 2819, '\P{Is_Script:	oriya}', "");
Expect(1, 2819, '\P{^Is_Script:	oriya}', "");
Expect(0, 2816, '\p{Is_Script:	oriya}', "");
Expect(1, 2816, '\p{^Is_Script:	oriya}', "");
Expect(1, 2816, '\P{Is_Script:	oriya}', "");
Expect(0, 2816, '\P{^Is_Script:	oriya}', "");
Expect(1, 2819, '\p{Is_Script=	 ORIYA}', "");
Expect(0, 2819, '\p{^Is_Script=	 ORIYA}', "");
Expect(0, 2819, '\P{Is_Script=	 ORIYA}', "");
Expect(1, 2819, '\P{^Is_Script=	 ORIYA}', "");
Expect(0, 2816, '\p{Is_Script=	 ORIYA}', "");
Expect(1, 2816, '\p{^Is_Script=	 ORIYA}', "");
Expect(1, 2816, '\P{Is_Script=	 ORIYA}', "");
Expect(0, 2816, '\P{^Is_Script=	 ORIYA}', "");
Error('\p{Is_Sc:--orya/a/}');
Error('\P{Is_Sc:--orya/a/}');
Expect(1, 2819, '\p{Is_Sc=orya}', "");
Expect(0, 2819, '\p{^Is_Sc=orya}', "");
Expect(0, 2819, '\P{Is_Sc=orya}', "");
Expect(1, 2819, '\P{^Is_Sc=orya}', "");
Expect(0, 2816, '\p{Is_Sc=orya}', "");
Expect(1, 2816, '\p{^Is_Sc=orya}', "");
Expect(1, 2816, '\P{Is_Sc=orya}', "");
Expect(0, 2816, '\P{^Is_Sc=orya}', "");
Expect(1, 2819, '\p{Is_Sc=	 Orya}', "");
Expect(0, 2819, '\p{^Is_Sc=	 Orya}', "");
Expect(0, 2819, '\P{Is_Sc=	 Orya}', "");
Expect(1, 2819, '\P{^Is_Sc=	 Orya}', "");
Expect(0, 2816, '\p{Is_Sc=	 Orya}', "");
Expect(1, 2816, '\p{^Is_Sc=	 Orya}', "");
Expect(1, 2816, '\P{Is_Sc=	 Orya}', "");
Expect(0, 2816, '\P{^Is_Sc=	 Orya}', "");
Error('\p{Script=_Lisu/a/}');
Error('\P{Script=_Lisu/a/}');
Expect(1, 42239, '\p{Script=lisu}', "");
Expect(0, 42239, '\p{^Script=lisu}', "");
Expect(0, 42239, '\P{Script=lisu}', "");
Expect(1, 42239, '\P{^Script=lisu}', "");
Expect(0, 42191, '\p{Script=lisu}', "");
Expect(1, 42191, '\p{^Script=lisu}', "");
Expect(1, 42191, '\P{Script=lisu}', "");
Expect(0, 42191, '\P{^Script=lisu}', "");
Expect(1, 42239, '\p{Script=	 Lisu}', "");
Expect(0, 42239, '\p{^Script=	 Lisu}', "");
Expect(0, 42239, '\P{Script=	 Lisu}', "");
Expect(1, 42239, '\P{^Script=	 Lisu}', "");
Expect(0, 42191, '\p{Script=	 Lisu}', "");
Expect(1, 42191, '\p{^Script=	 Lisu}', "");
Expect(1, 42191, '\P{Script=	 Lisu}', "");
Expect(0, 42191, '\P{^Script=	 Lisu}', "");
Error('\p{Sc= :=LISU}');
Error('\P{Sc= :=LISU}');
Expect(1, 42239, '\p{Sc=lisu}', "");
Expect(0, 42239, '\p{^Sc=lisu}', "");
Expect(0, 42239, '\P{Sc=lisu}', "");
Expect(1, 42239, '\P{^Sc=lisu}', "");
Expect(0, 42191, '\p{Sc=lisu}', "");
Expect(1, 42191, '\p{^Sc=lisu}', "");
Expect(1, 42191, '\P{Sc=lisu}', "");
Expect(0, 42191, '\P{^Sc=lisu}', "");
Expect(1, 42239, '\p{Sc=-	Lisu}', "");
Expect(0, 42239, '\p{^Sc=-	Lisu}', "");
Expect(0, 42239, '\P{Sc=-	Lisu}', "");
Expect(1, 42239, '\P{^Sc=-	Lisu}', "");
Expect(0, 42191, '\p{Sc=-	Lisu}', "");
Expect(1, 42191, '\p{^Sc=-	Lisu}', "");
Expect(1, 42191, '\P{Sc=-	Lisu}', "");
Expect(0, 42191, '\P{^Sc=-	Lisu}', "");
Error('\p{Is_Script=:=		Lisu}');
Error('\P{Is_Script=:=		Lisu}');
Expect(1, 42239, '\p{Is_Script:lisu}', "");
Expect(0, 42239, '\p{^Is_Script:lisu}', "");
Expect(0, 42239, '\P{Is_Script:lisu}', "");
Expect(1, 42239, '\P{^Is_Script:lisu}', "");
Expect(0, 42191, '\p{Is_Script:lisu}', "");
Expect(1, 42191, '\p{^Is_Script:lisu}', "");
Expect(1, 42191, '\P{Is_Script:lisu}', "");
Expect(0, 42191, '\P{^Is_Script:lisu}', "");
Expect(1, 42239, '\p{Is_Script=	 Lisu}', "");
Expect(0, 42239, '\p{^Is_Script=	 Lisu}', "");
Expect(0, 42239, '\P{Is_Script=	 Lisu}', "");
Expect(1, 42239, '\P{^Is_Script=	 Lisu}', "");
Expect(0, 42191, '\p{Is_Script=	 Lisu}', "");
Expect(1, 42191, '\p{^Is_Script=	 Lisu}', "");
Expect(1, 42191, '\P{Is_Script=	 Lisu}', "");
Expect(0, 42191, '\P{^Is_Script=	 Lisu}', "");
Error('\p{Is_Sc=	-Lisu/a/}');
Error('\P{Is_Sc=	-Lisu/a/}');
Expect(1, 42239, '\p{Is_Sc=lisu}', "");
Expect(0, 42239, '\p{^Is_Sc=lisu}', "");
Expect(0, 42239, '\P{Is_Sc=lisu}', "");
Expect(1, 42239, '\P{^Is_Sc=lisu}', "");
Expect(0, 42191, '\p{Is_Sc=lisu}', "");
Expect(1, 42191, '\p{^Is_Sc=lisu}', "");
Expect(1, 42191, '\P{Is_Sc=lisu}', "");
Expect(0, 42191, '\P{^Is_Sc=lisu}', "");
Expect(1, 42239, '\p{Is_Sc=-lisu}', "");
Expect(0, 42239, '\p{^Is_Sc=-lisu}', "");
Expect(0, 42239, '\P{Is_Sc=-lisu}', "");
Expect(1, 42239, '\P{^Is_Sc=-lisu}', "");
Expect(0, 42191, '\p{Is_Sc=-lisu}', "");
Expect(1, 42191, '\p{^Is_Sc=-lisu}', "");
Expect(1, 42191, '\P{Is_Sc=-lisu}', "");
Expect(0, 42191, '\P{^Is_Sc=-lisu}', "");
Error('\p{Script=	_TAI	Le:=}');
Error('\P{Script=	_TAI	Le:=}');
Expect(1, 6509, '\p{Script=taile}', "");
Expect(0, 6509, '\p{^Script=taile}', "");
Expect(0, 6509, '\P{Script=taile}', "");
Expect(1, 6509, '\P{^Script=taile}', "");
Expect(0, 6479, '\p{Script=taile}', "");
Expect(1, 6479, '\p{^Script=taile}', "");
Expect(1, 6479, '\P{Script=taile}', "");
Expect(0, 6479, '\P{^Script=taile}', "");
Expect(1, 6509, '\p{Script=  TAILe}', "");
Expect(0, 6509, '\p{^Script=  TAILe}', "");
Expect(0, 6509, '\P{Script=  TAILe}', "");
Expect(1, 6509, '\P{^Script=  TAILe}', "");
Expect(0, 6479, '\p{Script=  TAILe}', "");
Expect(1, 6479, '\p{^Script=  TAILe}', "");
Expect(1, 6479, '\P{Script=  TAILe}', "");
Expect(0, 6479, '\P{^Script=  TAILe}', "");
Error('\p{Sc=/a/__Tale}');
Error('\P{Sc=/a/__Tale}');
Expect(1, 6509, '\p{Sc=tale}', "");
Expect(0, 6509, '\p{^Sc=tale}', "");
Expect(0, 6509, '\P{Sc=tale}', "");
Expect(1, 6509, '\P{^Sc=tale}', "");
Expect(0, 6479, '\p{Sc=tale}', "");
Expect(1, 6479, '\p{^Sc=tale}', "");
Expect(1, 6479, '\P{Sc=tale}', "");
Expect(0, 6479, '\P{^Sc=tale}', "");
Expect(1, 6509, '\p{Sc=-Tale}', "");
Expect(0, 6509, '\p{^Sc=-Tale}', "");
Expect(0, 6509, '\P{Sc=-Tale}', "");
Expect(1, 6509, '\P{^Sc=-Tale}', "");
Expect(0, 6479, '\p{Sc=-Tale}', "");
Expect(1, 6479, '\p{^Sc=-Tale}', "");
Expect(1, 6479, '\P{Sc=-Tale}', "");
Expect(0, 6479, '\P{^Sc=-Tale}', "");
Error('\p{Is_Script:    :=Taile}');
Error('\P{Is_Script:    :=Taile}');
Expect(1, 6509, '\p{Is_Script=taile}', "");
Expect(0, 6509, '\p{^Is_Script=taile}', "");
Expect(0, 6509, '\P{Is_Script=taile}', "");
Expect(1, 6509, '\P{^Is_Script=taile}', "");
Expect(0, 6479, '\p{Is_Script=taile}', "");
Expect(1, 6479, '\p{^Is_Script=taile}', "");
Expect(1, 6479, '\P{Is_Script=taile}', "");
Expect(0, 6479, '\P{^Is_Script=taile}', "");
Expect(1, 6509, '\p{Is_Script=--Tai Le}', "");
Expect(0, 6509, '\p{^Is_Script=--Tai Le}', "");
Expect(0, 6509, '\P{Is_Script=--Tai Le}', "");
Expect(1, 6509, '\P{^Is_Script=--Tai Le}', "");
Expect(0, 6479, '\p{Is_Script=--Tai Le}', "");
Expect(1, 6479, '\p{^Is_Script=--Tai Le}', "");
Expect(1, 6479, '\P{Is_Script=--Tai Le}', "");
Expect(0, 6479, '\P{^Is_Script=--Tai Le}', "");
Error('\p{Is_Sc=		TALE:=}');
Error('\P{Is_Sc=		TALE:=}');
Expect(1, 6509, '\p{Is_Sc: tale}', "");
Expect(0, 6509, '\p{^Is_Sc: tale}', "");
Expect(0, 6509, '\P{Is_Sc: tale}', "");
Expect(1, 6509, '\P{^Is_Sc: tale}', "");
Expect(0, 6479, '\p{Is_Sc: tale}', "");
Expect(1, 6479, '\p{^Is_Sc: tale}', "");
Expect(1, 6479, '\P{Is_Sc: tale}', "");
Expect(0, 6479, '\P{^Is_Sc: tale}', "");
Expect(1, 6509, '\p{Is_Sc=	-Tale}', "");
Expect(0, 6509, '\p{^Is_Sc=	-Tale}', "");
Expect(0, 6509, '\P{Is_Sc=	-Tale}', "");
Expect(1, 6509, '\P{^Is_Sc=	-Tale}', "");
Expect(0, 6479, '\p{Is_Sc=	-Tale}', "");
Expect(1, 6479, '\p{^Is_Sc=	-Tale}', "");
Expect(1, 6479, '\P{Is_Sc=	-Tale}', "");
Expect(0, 6479, '\P{^Is_Sc=	-Tale}', "");
Error('\p{Script=- avestan/a/}');
Error('\P{Script=- avestan/a/}');
Expect(1, 68405, '\p{Script=avestan}', "");
Expect(0, 68405, '\p{^Script=avestan}', "");
Expect(0, 68405, '\P{Script=avestan}', "");
Expect(1, 68405, '\P{^Script=avestan}', "");
Expect(0, 68351, '\p{Script=avestan}', "");
Expect(1, 68351, '\p{^Script=avestan}', "");
Expect(1, 68351, '\P{Script=avestan}', "");
Expect(0, 68351, '\P{^Script=avestan}', "");
Expect(1, 68405, '\p{Script=-	Avestan}', "");
Expect(0, 68405, '\p{^Script=-	Avestan}', "");
Expect(0, 68405, '\P{Script=-	Avestan}', "");
Expect(1, 68405, '\P{^Script=-	Avestan}', "");
Expect(0, 68351, '\p{Script=-	Avestan}', "");
Expect(1, 68351, '\p{^Script=-	Avestan}', "");
Expect(1, 68351, '\P{Script=-	Avestan}', "");
Expect(0, 68351, '\P{^Script=-	Avestan}', "");
Error('\p{Sc=:=_	Avst}');
Error('\P{Sc=:=_	Avst}');
Expect(1, 68405, '\p{Sc=avst}', "");
Expect(0, 68405, '\p{^Sc=avst}', "");
Expect(0, 68405, '\P{Sc=avst}', "");
Expect(1, 68405, '\P{^Sc=avst}', "");
Expect(0, 68351, '\p{Sc=avst}', "");
Expect(1, 68351, '\p{^Sc=avst}', "");
Expect(1, 68351, '\P{Sc=avst}', "");
Expect(0, 68351, '\P{^Sc=avst}', "");
Expect(1, 68405, '\p{Sc=_-Avst}', "");
Expect(0, 68405, '\p{^Sc=_-Avst}', "");
Expect(0, 68405, '\P{Sc=_-Avst}', "");
Expect(1, 68405, '\P{^Sc=_-Avst}', "");
Expect(0, 68351, '\p{Sc=_-Avst}', "");
Expect(1, 68351, '\p{^Sc=_-Avst}', "");
Expect(1, 68351, '\P{Sc=_-Avst}', "");
Expect(0, 68351, '\P{^Sc=_-Avst}', "");
Error('\p{Is_Script=  avestan/a/}');
Error('\P{Is_Script=  avestan/a/}');
Expect(1, 68405, '\p{Is_Script=avestan}', "");
Expect(0, 68405, '\p{^Is_Script=avestan}', "");
Expect(0, 68405, '\P{Is_Script=avestan}', "");
Expect(1, 68405, '\P{^Is_Script=avestan}', "");
Expect(0, 68351, '\p{Is_Script=avestan}', "");
Expect(1, 68351, '\p{^Is_Script=avestan}', "");
Expect(1, 68351, '\P{Is_Script=avestan}', "");
Expect(0, 68351, '\P{^Is_Script=avestan}', "");
Expect(1, 68405, '\p{Is_Script=	AVESTAN}', "");
Expect(0, 68405, '\p{^Is_Script=	AVESTAN}', "");
Expect(0, 68405, '\P{Is_Script=	AVESTAN}', "");
Expect(1, 68405, '\P{^Is_Script=	AVESTAN}', "");
Expect(0, 68351, '\p{Is_Script=	AVESTAN}', "");
Expect(1, 68351, '\p{^Is_Script=	AVESTAN}', "");
Expect(1, 68351, '\P{Is_Script=	AVESTAN}', "");
Expect(0, 68351, '\P{^Is_Script=	AVESTAN}', "");
Error('\p{Is_Sc= /a/Avst}');
Error('\P{Is_Sc= /a/Avst}');
Expect(1, 68405, '\p{Is_Sc=avst}', "");
Expect(0, 68405, '\p{^Is_Sc=avst}', "");
Expect(0, 68405, '\P{Is_Sc=avst}', "");
Expect(1, 68405, '\P{^Is_Sc=avst}', "");
Expect(0, 68351, '\p{Is_Sc=avst}', "");
Expect(1, 68351, '\p{^Is_Sc=avst}', "");
Expect(1, 68351, '\P{Is_Sc=avst}', "");
Expect(0, 68351, '\P{^Is_Sc=avst}', "");
Expect(1, 68405, '\p{Is_Sc=	 Avst}', "");
Expect(0, 68405, '\p{^Is_Sc=	 Avst}', "");
Expect(0, 68405, '\P{Is_Sc=	 Avst}', "");
Expect(1, 68405, '\P{^Is_Sc=	 Avst}', "");
Expect(0, 68351, '\p{Is_Sc=	 Avst}', "");
Expect(1, 68351, '\p{^Is_Sc=	 Avst}', "");
Expect(1, 68351, '\P{Is_Sc=	 Avst}', "");
Expect(0, 68351, '\P{^Is_Sc=	 Avst}', "");
Error('\p{Script= :=georgian}');
Error('\P{Script= :=georgian}');
Expect(1, 4293, '\p{Script=georgian}', "");
Expect(0, 4293, '\p{^Script=georgian}', "");
Expect(0, 4293, '\P{Script=georgian}', "");
Expect(1, 4293, '\P{^Script=georgian}', "");
Expect(0, 4255, '\p{Script=georgian}', "");
Expect(1, 4255, '\p{^Script=georgian}', "");
Expect(1, 4255, '\P{Script=georgian}', "");
Expect(0, 4255, '\P{^Script=georgian}', "");
Expect(1, 4293, '\p{Script= 	Georgian}', "");
Expect(0, 4293, '\p{^Script= 	Georgian}', "");
Expect(0, 4293, '\P{Script= 	Georgian}', "");
Expect(1, 4293, '\P{^Script= 	Georgian}', "");
Expect(0, 4255, '\p{Script= 	Georgian}', "");
Expect(1, 4255, '\p{^Script= 	Georgian}', "");
Expect(1, 4255, '\P{Script= 	Georgian}', "");
Expect(0, 4255, '\P{^Script= 	Georgian}', "");
Error('\p{Sc=/a/ -GEOR}');
Error('\P{Sc=/a/ -GEOR}');
Expect(1, 4293, '\p{Sc=geor}', "");
Expect(0, 4293, '\p{^Sc=geor}', "");
Expect(0, 4293, '\P{Sc=geor}', "");
Expect(1, 4293, '\P{^Sc=geor}', "");
Expect(0, 4255, '\p{Sc=geor}', "");
Expect(1, 4255, '\p{^Sc=geor}', "");
Expect(1, 4255, '\P{Sc=geor}', "");
Expect(0, 4255, '\P{^Sc=geor}', "");
Expect(1, 4293, '\p{Sc=	_Geor}', "");
Expect(0, 4293, '\p{^Sc=	_Geor}', "");
Expect(0, 4293, '\P{Sc=	_Geor}', "");
Expect(1, 4293, '\P{^Sc=	_Geor}', "");
Expect(0, 4255, '\p{Sc=	_Geor}', "");
Expect(1, 4255, '\p{^Sc=	_Geor}', "");
Expect(1, 4255, '\P{Sc=	_Geor}', "");
Expect(0, 4255, '\P{^Sc=	_Geor}', "");
Error('\p{Is_Script= georgian:=}');
Error('\P{Is_Script= georgian:=}');
Expect(1, 4293, '\p{Is_Script=georgian}', "");
Expect(0, 4293, '\p{^Is_Script=georgian}', "");
Expect(0, 4293, '\P{Is_Script=georgian}', "");
Expect(1, 4293, '\P{^Is_Script=georgian}', "");
Expect(0, 4255, '\p{Is_Script=georgian}', "");
Expect(1, 4255, '\p{^Is_Script=georgian}', "");
Expect(1, 4255, '\P{Is_Script=georgian}', "");
Expect(0, 4255, '\P{^Is_Script=georgian}', "");
Expect(1, 4293, '\p{Is_Script=GEORGIAN}', "");
Expect(0, 4293, '\p{^Is_Script=GEORGIAN}', "");
Expect(0, 4293, '\P{Is_Script=GEORGIAN}', "");
Expect(1, 4293, '\P{^Is_Script=GEORGIAN}', "");
Expect(0, 4255, '\p{Is_Script=GEORGIAN}', "");
Expect(1, 4255, '\p{^Is_Script=GEORGIAN}', "");
Expect(1, 4255, '\P{Is_Script=GEORGIAN}', "");
Expect(0, 4255, '\P{^Is_Script=GEORGIAN}', "");
Error('\p{Is_Sc=:=	-Geor}');
Error('\P{Is_Sc=:=	-Geor}');
Expect(1, 4293, '\p{Is_Sc:	geor}', "");
Expect(0, 4293, '\p{^Is_Sc:	geor}', "");
Expect(0, 4293, '\P{Is_Sc:	geor}', "");
Expect(1, 4293, '\P{^Is_Sc:	geor}', "");
Expect(0, 4255, '\p{Is_Sc:	geor}', "");
Expect(1, 4255, '\p{^Is_Sc:	geor}', "");
Expect(1, 4255, '\P{Is_Sc:	geor}', "");
Expect(0, 4255, '\P{^Is_Sc:	geor}', "");
Expect(1, 4293, '\p{Is_Sc=-GEOR}', "");
Expect(0, 4293, '\p{^Is_Sc=-GEOR}', "");
Expect(0, 4293, '\P{Is_Sc=-GEOR}', "");
Expect(1, 4293, '\P{^Is_Sc=-GEOR}', "");
Expect(0, 4255, '\p{Is_Sc=-GEOR}', "");
Expect(1, 4255, '\p{^Is_Sc=-GEOR}', "");
Expect(1, 4255, '\P{Is_Sc=-GEOR}', "");
Expect(0, 4255, '\P{^Is_Sc=-GEOR}', "");
Error('\p{Script=-_Telugu:=}');
Error('\P{Script=-_Telugu:=}');
Expect(1, 3075, '\p{Script=telugu}', "");
Expect(0, 3075, '\p{^Script=telugu}', "");
Expect(0, 3075, '\P{Script=telugu}', "");
Expect(1, 3075, '\P{^Script=telugu}', "");
Expect(0, 3072, '\p{Script=telugu}', "");
Expect(1, 3072, '\p{^Script=telugu}', "");
Expect(1, 3072, '\P{Script=telugu}', "");
Expect(0, 3072, '\P{^Script=telugu}', "");
Expect(1, 3075, '\p{Script=--telugu}', "");
Expect(0, 3075, '\p{^Script=--telugu}', "");
Expect(0, 3075, '\P{Script=--telugu}', "");
Expect(1, 3075, '\P{^Script=--telugu}', "");
Expect(0, 3072, '\p{Script=--telugu}', "");
Expect(1, 3072, '\p{^Script=--telugu}', "");
Expect(1, 3072, '\P{Script=--telugu}', "");
Expect(0, 3072, '\P{^Script=--telugu}', "");
Error('\p{Sc= Telu/a/}');
Error('\P{Sc= Telu/a/}');
Expect(1, 3075, '\p{Sc=telu}', "");
Expect(0, 3075, '\p{^Sc=telu}', "");
Expect(0, 3075, '\P{Sc=telu}', "");
Expect(1, 3075, '\P{^Sc=telu}', "");
Expect(0, 3072, '\p{Sc=telu}', "");
Expect(1, 3072, '\p{^Sc=telu}', "");
Expect(1, 3072, '\P{Sc=telu}', "");
Expect(0, 3072, '\P{^Sc=telu}', "");
Expect(1, 3075, '\p{Sc=Telu}', "");
Expect(0, 3075, '\p{^Sc=Telu}', "");
Expect(0, 3075, '\P{Sc=Telu}', "");
Expect(1, 3075, '\P{^Sc=Telu}', "");
Expect(0, 3072, '\p{Sc=Telu}', "");
Expect(1, 3072, '\p{^Sc=Telu}', "");
Expect(1, 3072, '\P{Sc=Telu}', "");
Expect(0, 3072, '\P{^Sc=Telu}', "");
Error('\p{Is_Script=-	TELUGU:=}');
Error('\P{Is_Script=-	TELUGU:=}');
Expect(1, 3075, '\p{Is_Script=telugu}', "");
Expect(0, 3075, '\p{^Is_Script=telugu}', "");
Expect(0, 3075, '\P{Is_Script=telugu}', "");
Expect(1, 3075, '\P{^Is_Script=telugu}', "");
Expect(0, 3072, '\p{Is_Script=telugu}', "");
Expect(1, 3072, '\p{^Is_Script=telugu}', "");
Expect(1, 3072, '\P{Is_Script=telugu}', "");
Expect(0, 3072, '\P{^Is_Script=telugu}', "");
Expect(1, 3075, '\p{Is_Script:	_Telugu}', "");
Expect(0, 3075, '\p{^Is_Script:	_Telugu}', "");
Expect(0, 3075, '\P{Is_Script:	_Telugu}', "");
Expect(1, 3075, '\P{^Is_Script:	_Telugu}', "");
Expect(0, 3072, '\p{Is_Script:	_Telugu}', "");
Expect(1, 3072, '\p{^Is_Script:	_Telugu}', "");
Expect(1, 3072, '\P{Is_Script:	_Telugu}', "");
Expect(0, 3072, '\P{^Is_Script:	_Telugu}', "");
Error('\p{Is_Sc=  telu/a/}');
Error('\P{Is_Sc=  telu/a/}');
Expect(1, 3075, '\p{Is_Sc=telu}', "");
Expect(0, 3075, '\p{^Is_Sc=telu}', "");
Expect(0, 3075, '\P{Is_Sc=telu}', "");
Expect(1, 3075, '\P{^Is_Sc=telu}', "");
Expect(0, 3072, '\p{Is_Sc=telu}', "");
Expect(1, 3072, '\p{^Is_Sc=telu}', "");
Expect(1, 3072, '\P{Is_Sc=telu}', "");
Expect(0, 3072, '\P{^Is_Sc=telu}', "");
Expect(1, 3075, '\p{Is_Sc:	 _Telu}', "");
Expect(0, 3075, '\p{^Is_Sc:	 _Telu}', "");
Expect(0, 3075, '\P{Is_Sc:	 _Telu}', "");
Expect(1, 3075, '\P{^Is_Sc:	 _Telu}', "");
Expect(0, 3072, '\p{Is_Sc:	 _Telu}', "");
Expect(1, 3072, '\p{^Is_Sc:	 _Telu}', "");
Expect(1, 3072, '\P{Is_Sc:	 _Telu}', "");
Expect(0, 3072, '\P{^Is_Sc:	 _Telu}', "");
Error('\p{Script=/a/- Tifinagh}');
Error('\P{Script=/a/- Tifinagh}');
Expect(1, 11621, '\p{Script: tifinagh}', "");
Expect(0, 11621, '\p{^Script: tifinagh}', "");
Expect(0, 11621, '\P{Script: tifinagh}', "");
Expect(1, 11621, '\P{^Script: tifinagh}', "");
Expect(0, 11567, '\p{Script: tifinagh}', "");
Expect(1, 11567, '\p{^Script: tifinagh}', "");
Expect(1, 11567, '\P{Script: tifinagh}', "");
Expect(0, 11567, '\P{^Script: tifinagh}', "");
Expect(1, 11621, '\p{Script:	_tifinagh}', "");
Expect(0, 11621, '\p{^Script:	_tifinagh}', "");
Expect(0, 11621, '\P{Script:	_tifinagh}', "");
Expect(1, 11621, '\P{^Script:	_tifinagh}', "");
Expect(0, 11567, '\p{Script:	_tifinagh}', "");
Expect(1, 11567, '\p{^Script:	_tifinagh}', "");
Expect(1, 11567, '\P{Script:	_tifinagh}', "");
Expect(0, 11567, '\P{^Script:	_tifinagh}', "");
Error('\p{Sc=	/a/tfng}');
Error('\P{Sc=	/a/tfng}');
Expect(1, 11621, '\p{Sc=tfng}', "");
Expect(0, 11621, '\p{^Sc=tfng}', "");
Expect(0, 11621, '\P{Sc=tfng}', "");
Expect(1, 11621, '\P{^Sc=tfng}', "");
Expect(0, 11567, '\p{Sc=tfng}', "");
Expect(1, 11567, '\p{^Sc=tfng}', "");
Expect(1, 11567, '\P{Sc=tfng}', "");
Expect(0, 11567, '\P{^Sc=tfng}', "");
Expect(1, 11621, '\p{Sc=	_tfng}', "");
Expect(0, 11621, '\p{^Sc=	_tfng}', "");
Expect(0, 11621, '\P{Sc=	_tfng}', "");
Expect(1, 11621, '\P{^Sc=	_tfng}', "");
Expect(0, 11567, '\p{Sc=	_tfng}', "");
Expect(1, 11567, '\p{^Sc=	_tfng}', "");
Expect(1, 11567, '\P{Sc=	_tfng}', "");
Expect(0, 11567, '\P{^Sc=	_tfng}', "");
Error('\p{Is_Script: :=__TIFINAGH}');
Error('\P{Is_Script: :=__TIFINAGH}');
Expect(1, 11621, '\p{Is_Script=tifinagh}', "");
Expect(0, 11621, '\p{^Is_Script=tifinagh}', "");
Expect(0, 11621, '\P{Is_Script=tifinagh}', "");
Expect(1, 11621, '\P{^Is_Script=tifinagh}', "");
Expect(0, 11567, '\p{Is_Script=tifinagh}', "");
Expect(1, 11567, '\p{^Is_Script=tifinagh}', "");
Expect(1, 11567, '\P{Is_Script=tifinagh}', "");
Expect(0, 11567, '\P{^Is_Script=tifinagh}', "");
Expect(1, 11621, '\p{Is_Script:   --tifinagh}', "");
Expect(0, 11621, '\p{^Is_Script:   --tifinagh}', "");
Expect(0, 11621, '\P{Is_Script:   --tifinagh}', "");
Expect(1, 11621, '\P{^Is_Script:   --tifinagh}', "");
Expect(0, 11567, '\p{Is_Script:   --tifinagh}', "");
Expect(1, 11567, '\p{^Is_Script:   --tifinagh}', "");
Expect(1, 11567, '\P{Is_Script:   --tifinagh}', "");
Expect(0, 11567, '\P{^Is_Script:   --tifinagh}', "");
Error('\p{Is_Sc=  Tfng/a/}');
Error('\P{Is_Sc=  Tfng/a/}');
Expect(1, 11621, '\p{Is_Sc=tfng}', "");
Expect(0, 11621, '\p{^Is_Sc=tfng}', "");
Expect(0, 11621, '\P{Is_Sc=tfng}', "");
Expect(1, 11621, '\P{^Is_Sc=tfng}', "");
Expect(0, 11567, '\p{Is_Sc=tfng}', "");
Expect(1, 11567, '\p{^Is_Sc=tfng}', "");
Expect(1, 11567, '\P{Is_Sc=tfng}', "");
Expect(0, 11567, '\P{^Is_Sc=tfng}', "");
Expect(1, 11621, '\p{Is_Sc=-	Tfng}', "");
Expect(0, 11621, '\p{^Is_Sc=-	Tfng}', "");
Expect(0, 11621, '\P{Is_Sc=-	Tfng}', "");
Expect(1, 11621, '\P{^Is_Sc=-	Tfng}', "");
Expect(0, 11567, '\p{Is_Sc=-	Tfng}', "");
Expect(1, 11567, '\p{^Is_Sc=-	Tfng}', "");
Expect(1, 11567, '\P{Is_Sc=-	Tfng}', "");
Expect(0, 11567, '\P{^Is_Sc=-	Tfng}', "");
Error('\p{Script:	:=	Sinhala}');
Error('\P{Script:	:=	Sinhala}');
Expect(1, 3459, '\p{Script=sinhala}', "");
Expect(0, 3459, '\p{^Script=sinhala}', "");
Expect(0, 3459, '\P{Script=sinhala}', "");
Expect(1, 3459, '\P{^Script=sinhala}', "");
Expect(0, 3457, '\p{Script=sinhala}', "");
Expect(1, 3457, '\p{^Script=sinhala}', "");
Expect(1, 3457, '\P{Script=sinhala}', "");
Expect(0, 3457, '\P{^Script=sinhala}', "");
Expect(1, 3459, '\p{Script=_ sinhala}', "");
Expect(0, 3459, '\p{^Script=_ sinhala}', "");
Expect(0, 3459, '\P{Script=_ sinhala}', "");
Expect(1, 3459, '\P{^Script=_ sinhala}', "");
Expect(0, 3457, '\p{Script=_ sinhala}', "");
Expect(1, 3457, '\p{^Script=_ sinhala}', "");
Expect(1, 3457, '\P{Script=_ sinhala}', "");
Expect(0, 3457, '\P{^Script=_ sinhala}', "");
Error('\p{Sc:	:= Sinh}');
Error('\P{Sc:	:= Sinh}');
Expect(1, 3459, '\p{Sc=sinh}', "");
Expect(0, 3459, '\p{^Sc=sinh}', "");
Expect(0, 3459, '\P{Sc=sinh}', "");
Expect(1, 3459, '\P{^Sc=sinh}', "");
Expect(0, 3457, '\p{Sc=sinh}', "");
Expect(1, 3457, '\p{^Sc=sinh}', "");
Expect(1, 3457, '\P{Sc=sinh}', "");
Expect(0, 3457, '\P{^Sc=sinh}', "");
Expect(1, 3459, '\p{Sc=-	sinh}', "");
Expect(0, 3459, '\p{^Sc=-	sinh}', "");
Expect(0, 3459, '\P{Sc=-	sinh}', "");
Expect(1, 3459, '\P{^Sc=-	sinh}', "");
Expect(0, 3457, '\p{Sc=-	sinh}', "");
Expect(1, 3457, '\p{^Sc=-	sinh}', "");
Expect(1, 3457, '\P{Sc=-	sinh}', "");
Expect(0, 3457, '\P{^Sc=-	sinh}', "");
Error('\p{Is_Script=-/a/Sinhala}');
Error('\P{Is_Script=-/a/Sinhala}');
Expect(1, 3459, '\p{Is_Script=sinhala}', "");
Expect(0, 3459, '\p{^Is_Script=sinhala}', "");
Expect(0, 3459, '\P{Is_Script=sinhala}', "");
Expect(1, 3459, '\P{^Is_Script=sinhala}', "");
Expect(0, 3457, '\p{Is_Script=sinhala}', "");
Expect(1, 3457, '\p{^Is_Script=sinhala}', "");
Expect(1, 3457, '\P{Is_Script=sinhala}', "");
Expect(0, 3457, '\P{^Is_Script=sinhala}', "");
Expect(1, 3459, '\p{Is_Script: Sinhala}', "");
Expect(0, 3459, '\p{^Is_Script: Sinhala}', "");
Expect(0, 3459, '\P{Is_Script: Sinhala}', "");
Expect(1, 3459, '\P{^Is_Script: Sinhala}', "");
Expect(0, 3457, '\p{Is_Script: Sinhala}', "");
Expect(1, 3457, '\p{^Is_Script: Sinhala}', "");
Expect(1, 3457, '\P{Is_Script: Sinhala}', "");
Expect(0, 3457, '\P{^Is_Script: Sinhala}', "");
Error('\p{Is_Sc:-_Sinh/a/}');
Error('\P{Is_Sc:-_Sinh/a/}');
Expect(1, 3459, '\p{Is_Sc:	sinh}', "");
Expect(0, 3459, '\p{^Is_Sc:	sinh}', "");
Expect(0, 3459, '\P{Is_Sc:	sinh}', "");
Expect(1, 3459, '\P{^Is_Sc:	sinh}', "");
Expect(0, 3457, '\p{Is_Sc:	sinh}', "");
Expect(1, 3457, '\p{^Is_Sc:	sinh}', "");
Expect(1, 3457, '\P{Is_Sc:	sinh}', "");
Expect(0, 3457, '\P{^Is_Sc:	sinh}', "");
Expect(1, 3459, '\p{Is_Sc=	 Sinh}', "");
Expect(0, 3459, '\p{^Is_Sc=	 Sinh}', "");
Expect(0, 3459, '\P{Is_Sc=	 Sinh}', "");
Expect(1, 3459, '\P{^Is_Sc=	 Sinh}', "");
Expect(0, 3457, '\p{Is_Sc=	 Sinh}', "");
Expect(1, 3457, '\p{^Is_Sc=	 Sinh}', "");
Expect(1, 3457, '\P{Is_Sc=	 Sinh}', "");
Expect(0, 3457, '\P{^Is_Sc=	 Sinh}', "");
Error('\p{Script=-Linear:=B}');
Error('\P{Script=-Linear:=B}');
Expect(1, 65547, '\p{Script=linearb}', "");
Expect(0, 65547, '\p{^Script=linearb}', "");
Expect(0, 65547, '\P{Script=linearb}', "");
Expect(1, 65547, '\P{^Script=linearb}', "");
Expect(0, 1, '\p{Script=linearb}', "");
Expect(1, 1, '\p{^Script=linearb}', "");
Expect(1, 1, '\P{Script=linearb}', "");
Expect(0, 1, '\P{^Script=linearb}', "");
Expect(1, 65547, '\p{Script=-linear b}', "");
Expect(0, 65547, '\p{^Script=-linear b}', "");
Expect(0, 65547, '\P{Script=-linear b}', "");
Expect(1, 65547, '\P{^Script=-linear b}', "");
Expect(0, 1, '\p{Script=-linear b}', "");
Expect(1, 1, '\p{^Script=-linear b}', "");
Expect(1, 1, '\P{Script=-linear b}', "");
Expect(0, 1, '\P{^Script=-linear b}', "");
Error('\p{Sc=-LINB:=}');
Error('\P{Sc=-LINB:=}');
Expect(1, 65547, '\p{Sc:	linb}', "");
Expect(0, 65547, '\p{^Sc:	linb}', "");
Expect(0, 65547, '\P{Sc:	linb}', "");
Expect(1, 65547, '\P{^Sc:	linb}', "");
Expect(0, 1, '\p{Sc:	linb}', "");
Expect(1, 1, '\p{^Sc:	linb}', "");
Expect(1, 1, '\P{Sc:	linb}', "");
Expect(0, 1, '\P{^Sc:	linb}', "");
Expect(1, 65547, '\p{Sc= 	linb}', "");
Expect(0, 65547, '\p{^Sc= 	linb}', "");
Expect(0, 65547, '\P{Sc= 	linb}', "");
Expect(1, 65547, '\P{^Sc= 	linb}', "");
Expect(0, 1, '\p{Sc= 	linb}', "");
Expect(1, 1, '\p{^Sc= 	linb}', "");
Expect(1, 1, '\P{Sc= 	linb}', "");
Expect(0, 1, '\P{^Sc= 	linb}', "");
Error('\p{Is_Script=__LINEAR B:=}');
Error('\P{Is_Script=__LINEAR B:=}');
Expect(1, 65547, '\p{Is_Script=linearb}', "");
Expect(0, 65547, '\p{^Is_Script=linearb}', "");
Expect(0, 65547, '\P{Is_Script=linearb}', "");
Expect(1, 65547, '\P{^Is_Script=linearb}', "");
Expect(0, 1, '\p{Is_Script=linearb}', "");
Expect(1, 1, '\p{^Is_Script=linearb}', "");
Expect(1, 1, '\P{Is_Script=linearb}', "");
Expect(0, 1, '\P{^Is_Script=linearb}', "");
Expect(1, 65547, '\p{Is_Script:-linearB}', "");
Expect(0, 65547, '\p{^Is_Script:-linearB}', "");
Expect(0, 65547, '\P{Is_Script:-linearB}', "");
Expect(1, 65547, '\P{^Is_Script:-linearB}', "");
Expect(0, 1, '\p{Is_Script:-linearB}', "");
Expect(1, 1, '\p{^Is_Script:-linearB}', "");
Expect(1, 1, '\P{Is_Script:-linearB}', "");
Expect(0, 1, '\P{^Is_Script:-linearB}', "");
Error('\p{Is_Sc= /a/Linb}');
Error('\P{Is_Sc= /a/Linb}');
Expect(1, 65547, '\p{Is_Sc=linb}', "");
Expect(0, 65547, '\p{^Is_Sc=linb}', "");
Expect(0, 65547, '\P{Is_Sc=linb}', "");
Expect(1, 65547, '\P{^Is_Sc=linb}', "");
Expect(0, 1, '\p{Is_Sc=linb}', "");
Expect(1, 1, '\p{^Is_Sc=linb}', "");
Expect(1, 1, '\P{Is_Sc=linb}', "");
Expect(0, 1, '\P{^Is_Sc=linb}', "");
Expect(1, 65547, '\p{Is_Sc=LINB}', "");
Expect(0, 65547, '\p{^Is_Sc=LINB}', "");
Expect(0, 65547, '\P{Is_Sc=LINB}', "");
Expect(1, 65547, '\P{^Is_Sc=LINB}', "");
Expect(0, 1, '\p{Is_Sc=LINB}', "");
Expect(1, 1, '\p{^Is_Sc=LINB}', "");
Expect(1, 1, '\P{Is_Sc=LINB}', "");
Expect(0, 1, '\P{^Is_Sc=LINB}', "");
Error('\p{Script=_:=Samaritan}');
Error('\P{Script=_:=Samaritan}');
Expect(1, 2093, '\p{Script:   samaritan}', "");
Expect(0, 2093, '\p{^Script:   samaritan}', "");
Expect(0, 2093, '\P{Script:   samaritan}', "");
Expect(1, 2093, '\P{^Script:   samaritan}', "");
Expect(0, 2047, '\p{Script:   samaritan}', "");
Expect(1, 2047, '\p{^Script:   samaritan}', "");
Expect(1, 2047, '\P{Script:   samaritan}', "");
Expect(0, 2047, '\P{^Script:   samaritan}', "");
Expect(1, 2093, '\p{Script=	samaritan}', "");
Expect(0, 2093, '\p{^Script=	samaritan}', "");
Expect(0, 2093, '\P{Script=	samaritan}', "");
Expect(1, 2093, '\P{^Script=	samaritan}', "");
Expect(0, 2047, '\p{Script=	samaritan}', "");
Expect(1, 2047, '\p{^Script=	samaritan}', "");
Expect(1, 2047, '\P{Script=	samaritan}', "");
Expect(0, 2047, '\P{^Script=	samaritan}', "");
Error('\p{Sc=:= 	SAMR}');
Error('\P{Sc=:= 	SAMR}');
Expect(1, 2093, '\p{Sc=samr}', "");
Expect(0, 2093, '\p{^Sc=samr}', "");
Expect(0, 2093, '\P{Sc=samr}', "");
Expect(1, 2093, '\P{^Sc=samr}', "");
Expect(0, 2047, '\p{Sc=samr}', "");
Expect(1, 2047, '\p{^Sc=samr}', "");
Expect(1, 2047, '\P{Sc=samr}', "");
Expect(0, 2047, '\P{^Sc=samr}', "");
Expect(1, 2093, '\p{Sc=_	Samr}', "");
Expect(0, 2093, '\p{^Sc=_	Samr}', "");
Expect(0, 2093, '\P{Sc=_	Samr}', "");
Expect(1, 2093, '\P{^Sc=_	Samr}', "");
Expect(0, 2047, '\p{Sc=_	Samr}', "");
Expect(1, 2047, '\p{^Sc=_	Samr}', "");
Expect(1, 2047, '\P{Sc=_	Samr}', "");
Expect(0, 2047, '\P{^Sc=_	Samr}', "");
Error('\p{Is_Script=_samaritan:=}');
Error('\P{Is_Script=_samaritan:=}');
Expect(1, 2093, '\p{Is_Script=samaritan}', "");
Expect(0, 2093, '\p{^Is_Script=samaritan}', "");
Expect(0, 2093, '\P{Is_Script=samaritan}', "");
Expect(1, 2093, '\P{^Is_Script=samaritan}', "");
Expect(0, 2047, '\p{Is_Script=samaritan}', "");
Expect(1, 2047, '\p{^Is_Script=samaritan}', "");
Expect(1, 2047, '\P{Is_Script=samaritan}', "");
Expect(0, 2047, '\P{^Is_Script=samaritan}', "");
Expect(1, 2093, '\p{Is_Script= Samaritan}', "");
Expect(0, 2093, '\p{^Is_Script= Samaritan}', "");
Expect(0, 2093, '\P{Is_Script= Samaritan}', "");
Expect(1, 2093, '\P{^Is_Script= Samaritan}', "");
Expect(0, 2047, '\p{Is_Script= Samaritan}', "");
Expect(1, 2047, '\p{^Is_Script= Samaritan}', "");
Expect(1, 2047, '\P{Is_Script= Samaritan}', "");
Expect(0, 2047, '\P{^Is_Script= Samaritan}', "");
Error('\p{Is_Sc=_/a/Samr}');
Error('\P{Is_Sc=_/a/Samr}');
Expect(1, 2093, '\p{Is_Sc=samr}', "");
Expect(0, 2093, '\p{^Is_Sc=samr}', "");
Expect(0, 2093, '\P{Is_Sc=samr}', "");
Expect(1, 2093, '\P{^Is_Sc=samr}', "");
Expect(0, 2047, '\p{Is_Sc=samr}', "");
Expect(1, 2047, '\p{^Is_Sc=samr}', "");
Expect(1, 2047, '\P{Is_Sc=samr}', "");
Expect(0, 2047, '\P{^Is_Sc=samr}', "");
Expect(1, 2093, '\p{Is_Sc=- Samr}', "");
Expect(0, 2093, '\p{^Is_Sc=- Samr}', "");
Expect(0, 2093, '\P{Is_Sc=- Samr}', "");
Expect(1, 2093, '\P{^Is_Sc=- Samr}', "");
Expect(0, 2047, '\p{Is_Sc=- Samr}', "");
Expect(1, 2047, '\p{^Is_Sc=- Samr}', "");
Expect(1, 2047, '\P{Is_Sc=- Samr}', "");
Expect(0, 2047, '\P{^Is_Sc=- Samr}', "");
Error('\p{Script=:=	SAURASHTRA}');
Error('\P{Script=:=	SAURASHTRA}');
Expect(1, 43204, '\p{Script=saurashtra}', "");
Expect(0, 43204, '\p{^Script=saurashtra}', "");
Expect(0, 43204, '\P{Script=saurashtra}', "");
Expect(1, 43204, '\P{^Script=saurashtra}', "");
Expect(0, 43135, '\p{Script=saurashtra}', "");
Expect(1, 43135, '\p{^Script=saurashtra}', "");
Expect(1, 43135, '\P{Script=saurashtra}', "");
Expect(0, 43135, '\P{^Script=saurashtra}', "");
Expect(1, 43204, '\p{Script=-Saurashtra}', "");
Expect(0, 43204, '\p{^Script=-Saurashtra}', "");
Expect(0, 43204, '\P{Script=-Saurashtra}', "");
Expect(1, 43204, '\P{^Script=-Saurashtra}', "");
Expect(0, 43135, '\p{Script=-Saurashtra}', "");
Expect(1, 43135, '\p{^Script=-Saurashtra}', "");
Expect(1, 43135, '\P{Script=-Saurashtra}', "");
Expect(0, 43135, '\P{^Script=-Saurashtra}', "");
Error('\p{Sc:   	Saur/a/}');
Error('\P{Sc:   	Saur/a/}');
Expect(1, 43204, '\p{Sc=saur}', "");
Expect(0, 43204, '\p{^Sc=saur}', "");
Expect(0, 43204, '\P{Sc=saur}', "");
Expect(1, 43204, '\P{^Sc=saur}', "");
Expect(0, 43135, '\p{Sc=saur}', "");
Expect(1, 43135, '\p{^Sc=saur}', "");
Expect(1, 43135, '\P{Sc=saur}', "");
Expect(0, 43135, '\P{^Sc=saur}', "");
Expect(1, 43204, '\p{Sc=	 Saur}', "");
Expect(0, 43204, '\p{^Sc=	 Saur}', "");
Expect(0, 43204, '\P{Sc=	 Saur}', "");
Expect(1, 43204, '\P{^Sc=	 Saur}', "");
Expect(0, 43135, '\p{Sc=	 Saur}', "");
Expect(1, 43135, '\p{^Sc=	 Saur}', "");
Expect(1, 43135, '\P{Sc=	 Saur}', "");
Expect(0, 43135, '\P{^Sc=	 Saur}', "");
Error('\p{Is_Script= _Saurashtra:=}');
Error('\P{Is_Script= _Saurashtra:=}');
Expect(1, 43204, '\p{Is_Script=saurashtra}', "");
Expect(0, 43204, '\p{^Is_Script=saurashtra}', "");
Expect(0, 43204, '\P{Is_Script=saurashtra}', "");
Expect(1, 43204, '\P{^Is_Script=saurashtra}', "");
Expect(0, 43135, '\p{Is_Script=saurashtra}', "");
Expect(1, 43135, '\p{^Is_Script=saurashtra}', "");
Expect(1, 43135, '\P{Is_Script=saurashtra}', "");
Expect(0, 43135, '\P{^Is_Script=saurashtra}', "");
Expect(1, 43204, '\p{Is_Script=-_saurashtra}', "");
Expect(0, 43204, '\p{^Is_Script=-_saurashtra}', "");
Expect(0, 43204, '\P{Is_Script=-_saurashtra}', "");
Expect(1, 43204, '\P{^Is_Script=-_saurashtra}', "");
Expect(0, 43135, '\p{Is_Script=-_saurashtra}', "");
Expect(1, 43135, '\p{^Is_Script=-_saurashtra}', "");
Expect(1, 43135, '\P{Is_Script=-_saurashtra}', "");
Expect(0, 43135, '\P{^Is_Script=-_saurashtra}', "");
Error('\p{Is_Sc=/a/ Saur}');
Error('\P{Is_Sc=/a/ Saur}');
Expect(1, 43204, '\p{Is_Sc=saur}', "");
Expect(0, 43204, '\p{^Is_Sc=saur}', "");
Expect(0, 43204, '\P{Is_Sc=saur}', "");
Expect(1, 43204, '\P{^Is_Sc=saur}', "");
Expect(0, 43135, '\p{Is_Sc=saur}', "");
Expect(1, 43135, '\p{^Is_Sc=saur}', "");
Expect(1, 43135, '\P{Is_Sc=saur}', "");
Expect(0, 43135, '\P{^Is_Sc=saur}', "");
Expect(1, 43204, '\p{Is_Sc=  Saur}', "");
Expect(0, 43204, '\p{^Is_Sc=  Saur}', "");
Expect(0, 43204, '\P{Is_Sc=  Saur}', "");
Expect(1, 43204, '\P{^Is_Sc=  Saur}', "");
Expect(0, 43135, '\p{Is_Sc=  Saur}', "");
Expect(1, 43135, '\p{^Is_Sc=  Saur}', "");
Expect(1, 43135, '\P{Is_Sc=  Saur}', "");
Expect(0, 43135, '\P{^Is_Sc=  Saur}', "");
Error('\p{Script: 	 Sundanese/a/}');
Error('\P{Script: 	 Sundanese/a/}');
Expect(1, 7082, '\p{Script=sundanese}', "");
Expect(0, 7082, '\p{^Script=sundanese}', "");
Expect(0, 7082, '\P{Script=sundanese}', "");
Expect(1, 7082, '\P{^Script=sundanese}', "");
Expect(0, 7039, '\p{Script=sundanese}', "");
Expect(1, 7039, '\p{^Script=sundanese}', "");
Expect(1, 7039, '\P{Script=sundanese}', "");
Expect(0, 7039, '\P{^Script=sundanese}', "");
Expect(1, 7082, '\p{Script=__sundanese}', "");
Expect(0, 7082, '\p{^Script=__sundanese}', "");
Expect(0, 7082, '\P{Script=__sundanese}', "");
Expect(1, 7082, '\P{^Script=__sundanese}', "");
Expect(0, 7039, '\p{Script=__sundanese}', "");
Expect(1, 7039, '\p{^Script=__sundanese}', "");
Expect(1, 7039, '\P{Script=__sundanese}', "");
Expect(0, 7039, '\P{^Script=__sundanese}', "");
Error('\p{Sc=_:=Sund}');
Error('\P{Sc=_:=Sund}');
Expect(1, 7082, '\p{Sc=sund}', "");
Expect(0, 7082, '\p{^Sc=sund}', "");
Expect(0, 7082, '\P{Sc=sund}', "");
Expect(1, 7082, '\P{^Sc=sund}', "");
Expect(0, 7039, '\p{Sc=sund}', "");
Expect(1, 7039, '\p{^Sc=sund}', "");
Expect(1, 7039, '\P{Sc=sund}', "");
Expect(0, 7039, '\P{^Sc=sund}', "");
Expect(1, 7082, '\p{Sc=-Sund}', "");
Expect(0, 7082, '\p{^Sc=-Sund}', "");
Expect(0, 7082, '\P{Sc=-Sund}', "");
Expect(1, 7082, '\P{^Sc=-Sund}', "");
Expect(0, 7039, '\p{Sc=-Sund}', "");
Expect(1, 7039, '\p{^Sc=-Sund}', "");
Expect(1, 7039, '\P{Sc=-Sund}', "");
Expect(0, 7039, '\P{^Sc=-Sund}', "");
Error('\p{Is_Script=_-SUNDANESE/a/}');
Error('\P{Is_Script=_-SUNDANESE/a/}');
Expect(1, 7082, '\p{Is_Script=sundanese}', "");
Expect(0, 7082, '\p{^Is_Script=sundanese}', "");
Expect(0, 7082, '\P{Is_Script=sundanese}', "");
Expect(1, 7082, '\P{^Is_Script=sundanese}', "");
Expect(0, 7039, '\p{Is_Script=sundanese}', "");
Expect(1, 7039, '\p{^Is_Script=sundanese}', "");
Expect(1, 7039, '\P{Is_Script=sundanese}', "");
Expect(0, 7039, '\P{^Is_Script=sundanese}', "");
Expect(1, 7082, '\p{Is_Script=_sundanese}', "");
Expect(0, 7082, '\p{^Is_Script=_sundanese}', "");
Expect(0, 7082, '\P{Is_Script=_sundanese}', "");
Expect(1, 7082, '\P{^Is_Script=_sundanese}', "");
Expect(0, 7039, '\p{Is_Script=_sundanese}', "");
Expect(1, 7039, '\p{^Is_Script=_sundanese}', "");
Expect(1, 7039, '\P{Is_Script=_sundanese}', "");
Expect(0, 7039, '\P{^Is_Script=_sundanese}', "");
Error('\p{Is_Sc=_SUND/a/}');
Error('\P{Is_Sc=_SUND/a/}');
Expect(1, 7082, '\p{Is_Sc=sund}', "");
Expect(0, 7082, '\p{^Is_Sc=sund}', "");
Expect(0, 7082, '\P{Is_Sc=sund}', "");
Expect(1, 7082, '\P{^Is_Sc=sund}', "");
Expect(0, 7039, '\p{Is_Sc=sund}', "");
Expect(1, 7039, '\p{^Is_Sc=sund}', "");
Expect(1, 7039, '\P{Is_Sc=sund}', "");
Expect(0, 7039, '\P{^Is_Sc=sund}', "");
Expect(1, 7082, '\p{Is_Sc=- Sund}', "");
Expect(0, 7082, '\p{^Is_Sc=- Sund}', "");
Expect(0, 7082, '\P{Is_Sc=- Sund}', "");
Expect(1, 7082, '\P{^Is_Sc=- Sund}', "");
Expect(0, 7039, '\p{Is_Sc=- Sund}', "");
Expect(1, 7039, '\p{^Is_Sc=- Sund}', "");
Expect(1, 7039, '\P{Is_Sc=- Sund}', "");
Expect(0, 7039, '\P{^Is_Sc=- Sund}', "");
Error('\p{Script=_	Nko:=}');
Error('\P{Script=_	Nko:=}');
Expect(1, 2042, '\p{Script=nko}', "");
Expect(0, 2042, '\p{^Script=nko}', "");
Expect(0, 2042, '\P{Script=nko}', "");
Expect(1, 2042, '\P{^Script=nko}', "");
Expect(0, 1983, '\p{Script=nko}', "");
Expect(1, 1983, '\p{^Script=nko}', "");
Expect(1, 1983, '\P{Script=nko}', "");
Expect(0, 1983, '\P{^Script=nko}', "");
Expect(1, 2042, '\p{Script=-nko}', "");
Expect(0, 2042, '\p{^Script=-nko}', "");
Expect(0, 2042, '\P{Script=-nko}', "");
Expect(1, 2042, '\P{^Script=-nko}', "");
Expect(0, 1983, '\p{Script=-nko}', "");
Expect(1, 1983, '\p{^Script=-nko}', "");
Expect(1, 1983, '\P{Script=-nko}', "");
Expect(0, 1983, '\P{^Script=-nko}', "");
Error('\p{Sc=- Nkoo:=}');
Error('\P{Sc=- Nkoo:=}');
Expect(1, 2042, '\p{Sc=nkoo}', "");
Expect(0, 2042, '\p{^Sc=nkoo}', "");
Expect(0, 2042, '\P{Sc=nkoo}', "");
Expect(1, 2042, '\P{^Sc=nkoo}', "");
Expect(0, 1983, '\p{Sc=nkoo}', "");
Expect(1, 1983, '\p{^Sc=nkoo}', "");
Expect(1, 1983, '\P{Sc=nkoo}', "");
Expect(0, 1983, '\P{^Sc=nkoo}', "");
Expect(1, 2042, '\p{Sc=	_NKOO}', "");
Expect(0, 2042, '\p{^Sc=	_NKOO}', "");
Expect(0, 2042, '\P{Sc=	_NKOO}', "");
Expect(1, 2042, '\P{^Sc=	_NKOO}', "");
Expect(0, 1983, '\p{Sc=	_NKOO}', "");
Expect(1, 1983, '\p{^Sc=	_NKOO}', "");
Expect(1, 1983, '\P{Sc=	_NKOO}', "");
Expect(0, 1983, '\P{^Sc=	_NKOO}', "");
Error('\p{Is_Script=_	Nko:=}');
Error('\P{Is_Script=_	Nko:=}');
Expect(1, 2042, '\p{Is_Script=nko}', "");
Expect(0, 2042, '\p{^Is_Script=nko}', "");
Expect(0, 2042, '\P{Is_Script=nko}', "");
Expect(1, 2042, '\P{^Is_Script=nko}', "");
Expect(0, 1983, '\p{Is_Script=nko}', "");
Expect(1, 1983, '\p{^Is_Script=nko}', "");
Expect(1, 1983, '\P{Is_Script=nko}', "");
Expect(0, 1983, '\P{^Is_Script=nko}', "");
Expect(1, 2042, '\p{Is_Script:	_nko}', "");
Expect(0, 2042, '\p{^Is_Script:	_nko}', "");
Expect(0, 2042, '\P{Is_Script:	_nko}', "");
Expect(1, 2042, '\P{^Is_Script:	_nko}', "");
Expect(0, 1983, '\p{Is_Script:	_nko}', "");
Expect(1, 1983, '\p{^Is_Script:	_nko}', "");
Expect(1, 1983, '\P{Is_Script:	_nko}', "");
Expect(0, 1983, '\P{^Is_Script:	_nko}', "");
Error('\p{Is_Sc=	-nkoo/a/}');
Error('\P{Is_Sc=	-nkoo/a/}');
Expect(1, 2042, '\p{Is_Sc=nkoo}', "");
Expect(0, 2042, '\p{^Is_Sc=nkoo}', "");
Expect(0, 2042, '\P{Is_Sc=nkoo}', "");
Expect(1, 2042, '\P{^Is_Sc=nkoo}', "");
Expect(0, 1983, '\p{Is_Sc=nkoo}', "");
Expect(1, 1983, '\p{^Is_Sc=nkoo}', "");
Expect(1, 1983, '\P{Is_Sc=nkoo}', "");
Expect(0, 1983, '\P{^Is_Sc=nkoo}', "");
Expect(1, 2042, '\p{Is_Sc=	-Nkoo}', "");
Expect(0, 2042, '\p{^Is_Sc=	-Nkoo}', "");
Expect(0, 2042, '\P{Is_Sc=	-Nkoo}', "");
Expect(1, 2042, '\P{^Is_Sc=	-Nkoo}', "");
Expect(0, 1983, '\p{Is_Sc=	-Nkoo}', "");
Expect(1, 1983, '\p{^Is_Sc=	-Nkoo}', "");
Expect(1, 1983, '\P{Is_Sc=	-Nkoo}', "");
Expect(0, 1983, '\P{^Is_Sc=	-Nkoo}', "");
Error('\p{Script:	_-han:=}');
Error('\P{Script:	_-han:=}');
Expect(1, 11929, '\p{Script=han}', "");
Expect(0, 11929, '\p{^Script=han}', "");
Expect(0, 11929, '\P{Script=han}', "");
Expect(1, 11929, '\P{^Script=han}', "");
Expect(0, 11903, '\p{Script=han}', "");
Expect(1, 11903, '\p{^Script=han}', "");
Expect(1, 11903, '\P{Script=han}', "");
Expect(0, 11903, '\P{^Script=han}', "");
Expect(1, 11929, '\p{Script:  Han}', "");
Expect(0, 11929, '\p{^Script:  Han}', "");
Expect(0, 11929, '\P{Script:  Han}', "");
Expect(1, 11929, '\P{^Script:  Han}', "");
Expect(0, 11903, '\p{Script:  Han}', "");
Expect(1, 11903, '\p{^Script:  Han}', "");
Expect(1, 11903, '\P{Script:  Han}', "");
Expect(0, 11903, '\P{^Script:  Han}', "");
Error('\p{Sc=:=Hani}');
Error('\P{Sc=:=Hani}');
Expect(1, 11929, '\p{Sc=hani}', "");
Expect(0, 11929, '\p{^Sc=hani}', "");
Expect(0, 11929, '\P{Sc=hani}', "");
Expect(1, 11929, '\P{^Sc=hani}', "");
Expect(0, 11903, '\p{Sc=hani}', "");
Expect(1, 11903, '\p{^Sc=hani}', "");
Expect(1, 11903, '\P{Sc=hani}', "");
Expect(0, 11903, '\P{^Sc=hani}', "");
Expect(1, 11929, '\p{Sc=- HANI}', "");
Expect(0, 11929, '\p{^Sc=- HANI}', "");
Expect(0, 11929, '\P{Sc=- HANI}', "");
Expect(1, 11929, '\P{^Sc=- HANI}', "");
Expect(0, 11903, '\p{Sc=- HANI}', "");
Expect(1, 11903, '\p{^Sc=- HANI}', "");
Expect(1, 11903, '\P{Sc=- HANI}', "");
Expect(0, 11903, '\P{^Sc=- HANI}', "");
Error('\p{Is_Script=-	han:=}');
Error('\P{Is_Script=-	han:=}');
Expect(1, 11929, '\p{Is_Script=han}', "");
Expect(0, 11929, '\p{^Is_Script=han}', "");
Expect(0, 11929, '\P{Is_Script=han}', "");
Expect(1, 11929, '\P{^Is_Script=han}', "");
Expect(0, 11903, '\p{Is_Script=han}', "");
Expect(1, 11903, '\p{^Is_Script=han}', "");
Expect(1, 11903, '\P{Is_Script=han}', "");
Expect(0, 11903, '\P{^Is_Script=han}', "");
Expect(1, 11929, '\p{Is_Script=_Han}', "");
Expect(0, 11929, '\p{^Is_Script=_Han}', "");
Expect(0, 11929, '\P{Is_Script=_Han}', "");
Expect(1, 11929, '\P{^Is_Script=_Han}', "");
Expect(0, 11903, '\p{Is_Script=_Han}', "");
Expect(1, 11903, '\p{^Is_Script=_Han}', "");
Expect(1, 11903, '\P{Is_Script=_Han}', "");
Expect(0, 11903, '\P{^Is_Script=_Han}', "");
Error('\p{Is_Sc=__hani:=}');
Error('\P{Is_Sc=__hani:=}');
Expect(1, 11929, '\p{Is_Sc=hani}', "");
Expect(0, 11929, '\p{^Is_Sc=hani}', "");
Expect(0, 11929, '\P{Is_Sc=hani}', "");
Expect(1, 11929, '\P{^Is_Sc=hani}', "");
Expect(0, 11903, '\p{Is_Sc=hani}', "");
Expect(1, 11903, '\p{^Is_Sc=hani}', "");
Expect(1, 11903, '\P{Is_Sc=hani}', "");
Expect(0, 11903, '\P{^Is_Sc=hani}', "");
Expect(1, 11929, '\p{Is_Sc= 	HANI}', "");
Expect(0, 11929, '\p{^Is_Sc= 	HANI}', "");
Expect(0, 11929, '\P{Is_Sc= 	HANI}', "");
Expect(1, 11929, '\P{^Is_Sc= 	HANI}', "");
Expect(0, 11903, '\p{Is_Sc= 	HANI}', "");
Expect(1, 11903, '\p{^Is_Sc= 	HANI}', "");
Expect(1, 11903, '\P{Is_Sc= 	HANI}', "");
Expect(0, 11903, '\P{^Is_Sc= 	HANI}', "");
Error('\p{Script= greek:=}');
Error('\P{Script= greek:=}');
Expect(1, 883, '\p{Script=greek}', "");
Expect(0, 883, '\p{^Script=greek}', "");
Expect(0, 883, '\P{Script=greek}', "");
Expect(1, 883, '\P{^Script=greek}', "");
Expect(0, 879, '\p{Script=greek}', "");
Expect(1, 879, '\p{^Script=greek}', "");
Expect(1, 879, '\P{Script=greek}', "");
Expect(0, 879, '\P{^Script=greek}', "");
Expect(1, 883, '\p{Script= _Greek}', "");
Expect(0, 883, '\p{^Script= _Greek}', "");
Expect(0, 883, '\P{Script= _Greek}', "");
Expect(1, 883, '\P{^Script= _Greek}', "");
Expect(0, 879, '\p{Script= _Greek}', "");
Expect(1, 879, '\p{^Script= _Greek}', "");
Expect(1, 879, '\P{Script= _Greek}', "");
Expect(0, 879, '\P{^Script= _Greek}', "");
Error('\p{Sc=_/a/GREK}');
Error('\P{Sc=_/a/GREK}');
Expect(1, 883, '\p{Sc=grek}', "");
Expect(0, 883, '\p{^Sc=grek}', "");
Expect(0, 883, '\P{Sc=grek}', "");
Expect(1, 883, '\P{^Sc=grek}', "");
Expect(0, 879, '\p{Sc=grek}', "");
Expect(1, 879, '\p{^Sc=grek}', "");
Expect(1, 879, '\P{Sc=grek}', "");
Expect(0, 879, '\P{^Sc=grek}', "");
Expect(1, 883, '\p{Sc=-Grek}', "");
Expect(0, 883, '\p{^Sc=-Grek}', "");
Expect(0, 883, '\P{Sc=-Grek}', "");
Expect(1, 883, '\P{^Sc=-Grek}', "");
Expect(0, 879, '\p{Sc=-Grek}', "");
Expect(1, 879, '\p{^Sc=-Grek}', "");
Expect(1, 879, '\P{Sc=-Grek}', "");
Expect(0, 879, '\P{^Sc=-Grek}', "");
Error('\p{Is_Script=Greek/a/}');
Error('\P{Is_Script=Greek/a/}');
Expect(1, 883, '\p{Is_Script=greek}', "");
Expect(0, 883, '\p{^Is_Script=greek}', "");
Expect(0, 883, '\P{Is_Script=greek}', "");
Expect(1, 883, '\P{^Is_Script=greek}', "");
Expect(0, 879, '\p{Is_Script=greek}', "");
Expect(1, 879, '\p{^Is_Script=greek}', "");
Expect(1, 879, '\P{Is_Script=greek}', "");
Expect(0, 879, '\P{^Is_Script=greek}', "");
Expect(1, 883, '\p{Is_Script= greek}', "");
Expect(0, 883, '\p{^Is_Script= greek}', "");
Expect(0, 883, '\P{Is_Script= greek}', "");
Expect(1, 883, '\P{^Is_Script= greek}', "");
Expect(0, 879, '\p{Is_Script= greek}', "");
Expect(1, 879, '\p{^Is_Script= greek}', "");
Expect(1, 879, '\P{Is_Script= greek}', "");
Expect(0, 879, '\P{^Is_Script= greek}', "");
Error('\p{Is_Sc=:= _Grek}');
Error('\P{Is_Sc=:= _Grek}');
Expect(1, 883, '\p{Is_Sc=grek}', "");
Expect(0, 883, '\p{^Is_Sc=grek}', "");
Expect(0, 883, '\P{Is_Sc=grek}', "");
Expect(1, 883, '\P{^Is_Sc=grek}', "");
Expect(0, 879, '\p{Is_Sc=grek}', "");
Expect(1, 879, '\p{^Is_Sc=grek}', "");
Expect(1, 879, '\P{Is_Sc=grek}', "");
Expect(0, 879, '\P{^Is_Sc=grek}', "");
Expect(1, 883, '\p{Is_Sc=-grek}', "");
Expect(0, 883, '\p{^Is_Sc=-grek}', "");
Expect(0, 883, '\P{Is_Sc=-grek}', "");
Expect(1, 883, '\P{^Is_Sc=-grek}', "");
Expect(0, 879, '\p{Is_Sc=-grek}', "");
Expect(1, 879, '\p{^Is_Sc=-grek}', "");
Expect(1, 879, '\P{Is_Sc=-grek}', "");
Expect(0, 879, '\P{^Is_Sc=-grek}', "");
Error('\p{Script=__tamil:=}');
Error('\P{Script=__tamil:=}');
Expect(1, 2947, '\p{Script=tamil}', "");
Expect(0, 2947, '\p{^Script=tamil}', "");
Expect(0, 2947, '\P{Script=tamil}', "");
Expect(1, 2947, '\P{^Script=tamil}', "");
Expect(0, 2945, '\p{Script=tamil}', "");
Expect(1, 2945, '\p{^Script=tamil}', "");
Expect(1, 2945, '\P{Script=tamil}', "");
Expect(0, 2945, '\P{^Script=tamil}', "");
Expect(1, 2947, '\p{Script=_-Tamil}', "");
Expect(0, 2947, '\p{^Script=_-Tamil}', "");
Expect(0, 2947, '\P{Script=_-Tamil}', "");
Expect(1, 2947, '\P{^Script=_-Tamil}', "");
Expect(0, 2945, '\p{Script=_-Tamil}', "");
Expect(1, 2945, '\p{^Script=_-Tamil}', "");
Expect(1, 2945, '\P{Script=_-Tamil}', "");
Expect(0, 2945, '\P{^Script=_-Tamil}', "");
Error('\p{Sc=_:=TAML}');
Error('\P{Sc=_:=TAML}');
Expect(1, 2947, '\p{Sc: taml}', "");
Expect(0, 2947, '\p{^Sc: taml}', "");
Expect(0, 2947, '\P{Sc: taml}', "");
Expect(1, 2947, '\P{^Sc: taml}', "");
Expect(0, 2945, '\p{Sc: taml}', "");
Expect(1, 2945, '\p{^Sc: taml}', "");
Expect(1, 2945, '\P{Sc: taml}', "");
Expect(0, 2945, '\P{^Sc: taml}', "");
Expect(1, 2947, '\p{Sc=- taml}', "");
Expect(0, 2947, '\p{^Sc=- taml}', "");
Expect(0, 2947, '\P{Sc=- taml}', "");
Expect(1, 2947, '\P{^Sc=- taml}', "");
Expect(0, 2945, '\p{Sc=- taml}', "");
Expect(1, 2945, '\p{^Sc=- taml}', "");
Expect(1, 2945, '\P{Sc=- taml}', "");
Expect(0, 2945, '\P{^Sc=- taml}', "");
Error('\p{Is_Script=_-TAMIL/a/}');
Error('\P{Is_Script=_-TAMIL/a/}');
Expect(1, 2947, '\p{Is_Script=tamil}', "");
Expect(0, 2947, '\p{^Is_Script=tamil}', "");
Expect(0, 2947, '\P{Is_Script=tamil}', "");
Expect(1, 2947, '\P{^Is_Script=tamil}', "");
Expect(0, 2945, '\p{Is_Script=tamil}', "");
Expect(1, 2945, '\p{^Is_Script=tamil}', "");
Expect(1, 2945, '\P{Is_Script=tamil}', "");
Expect(0, 2945, '\P{^Is_Script=tamil}', "");
Expect(1, 2947, '\p{Is_Script= Tamil}', "");
Expect(0, 2947, '\p{^Is_Script= Tamil}', "");
Expect(0, 2947, '\P{Is_Script= Tamil}', "");
Expect(1, 2947, '\P{^Is_Script= Tamil}', "");
Expect(0, 2945, '\p{Is_Script= Tamil}', "");
Expect(1, 2945, '\p{^Is_Script= Tamil}', "");
Expect(1, 2945, '\P{Is_Script= Tamil}', "");
Expect(0, 2945, '\P{^Is_Script= Tamil}', "");
Error('\p{Is_Sc:   :=_Taml}');
Error('\P{Is_Sc:   :=_Taml}');
Expect(1, 2947, '\p{Is_Sc=taml}', "");
Expect(0, 2947, '\p{^Is_Sc=taml}', "");
Expect(0, 2947, '\P{Is_Sc=taml}', "");
Expect(1, 2947, '\P{^Is_Sc=taml}', "");
Expect(0, 2945, '\p{Is_Sc=taml}', "");
Expect(1, 2945, '\p{^Is_Sc=taml}', "");
Expect(1, 2945, '\P{Is_Sc=taml}', "");
Expect(0, 2945, '\P{^Is_Sc=taml}', "");
Expect(1, 2947, '\p{Is_Sc=__taml}', "");
Expect(0, 2947, '\p{^Is_Sc=__taml}', "");
Expect(0, 2947, '\P{Is_Sc=__taml}', "");
Expect(1, 2947, '\P{^Is_Sc=__taml}', "");
Expect(0, 2945, '\p{Is_Sc=__taml}', "");
Expect(1, 2945, '\p{^Is_Sc=__taml}', "");
Expect(1, 2945, '\P{Is_Sc=__taml}', "");
Expect(0, 2945, '\P{^Is_Sc=__taml}', "");
Error('\p{Script=:=Kayah-Li}');
Error('\P{Script=:=Kayah-Li}');
Expect(1, 43311, '\p{Script=kayahli}', "");
Expect(0, 43311, '\p{^Script=kayahli}', "");
Expect(0, 43311, '\P{Script=kayahli}', "");
Expect(1, 43311, '\P{^Script=kayahli}', "");
Expect(0, 43263, '\p{Script=kayahli}', "");
Expect(1, 43263, '\p{^Script=kayahli}', "");
Expect(1, 43263, '\P{Script=kayahli}', "");
Expect(0, 43263, '\P{^Script=kayahli}', "");
Expect(1, 43311, '\p{Script=	Kayah	LI}', "");
Expect(0, 43311, '\p{^Script=	Kayah	LI}', "");
Expect(0, 43311, '\P{Script=	Kayah	LI}', "");
Expect(1, 43311, '\P{^Script=	Kayah	LI}', "");
Expect(0, 43263, '\p{Script=	Kayah	LI}', "");
Expect(1, 43263, '\p{^Script=	Kayah	LI}', "");
Expect(1, 43263, '\P{Script=	Kayah	LI}', "");
Expect(0, 43263, '\P{^Script=	Kayah	LI}', "");
Error('\p{Sc=/a/kali}');
Error('\P{Sc=/a/kali}');
Expect(1, 43311, '\p{Sc=kali}', "");
Expect(0, 43311, '\p{^Sc=kali}', "");
Expect(0, 43311, '\P{Sc=kali}', "");
Expect(1, 43311, '\P{^Sc=kali}', "");
Expect(0, 43263, '\p{Sc=kali}', "");
Expect(1, 43263, '\p{^Sc=kali}', "");
Expect(1, 43263, '\P{Sc=kali}', "");
Expect(0, 43263, '\P{^Sc=kali}', "");
Expect(1, 43311, '\p{Sc=	 KALI}', "");
Expect(0, 43311, '\p{^Sc=	 KALI}', "");
Expect(0, 43311, '\P{Sc=	 KALI}', "");
Expect(1, 43311, '\P{^Sc=	 KALI}', "");
Expect(0, 43263, '\p{Sc=	 KALI}', "");
Expect(1, 43263, '\p{^Sc=	 KALI}', "");
Expect(1, 43263, '\P{Sc=	 KALI}', "");
Expect(0, 43263, '\P{^Sc=	 KALI}', "");
Error('\p{Is_Script=_/a/Kayah Li}');
Error('\P{Is_Script=_/a/Kayah Li}');
Expect(1, 43311, '\p{Is_Script=kayahli}', "");
Expect(0, 43311, '\p{^Is_Script=kayahli}', "");
Expect(0, 43311, '\P{Is_Script=kayahli}', "");
Expect(1, 43311, '\P{^Is_Script=kayahli}', "");
Expect(0, 43263, '\p{Is_Script=kayahli}', "");
Expect(1, 43263, '\p{^Is_Script=kayahli}', "");
Expect(1, 43263, '\P{Is_Script=kayahli}', "");
Expect(0, 43263, '\P{^Is_Script=kayahli}', "");
Expect(1, 43311, '\p{Is_Script=- Kayah-LI}', "");
Expect(0, 43311, '\p{^Is_Script=- Kayah-LI}', "");
Expect(0, 43311, '\P{Is_Script=- Kayah-LI}', "");
Expect(1, 43311, '\P{^Is_Script=- Kayah-LI}', "");
Expect(0, 43263, '\p{Is_Script=- Kayah-LI}', "");
Expect(1, 43263, '\p{^Is_Script=- Kayah-LI}', "");
Expect(1, 43263, '\P{Is_Script=- Kayah-LI}', "");
Expect(0, 43263, '\P{^Is_Script=- Kayah-LI}', "");
Error('\p{Is_Sc=/a/ _Kali}');
Error('\P{Is_Sc=/a/ _Kali}');
Expect(1, 43311, '\p{Is_Sc=kali}', "");
Expect(0, 43311, '\p{^Is_Sc=kali}', "");
Expect(0, 43311, '\P{Is_Sc=kali}', "");
Expect(1, 43311, '\P{^Is_Sc=kali}', "");
Expect(0, 43263, '\p{Is_Sc=kali}', "");
Expect(1, 43263, '\p{^Is_Sc=kali}', "");
Expect(1, 43263, '\P{Is_Sc=kali}', "");
Expect(0, 43263, '\P{^Is_Sc=kali}', "");
Expect(1, 43311, '\p{Is_Sc: 	KALI}', "");
Expect(0, 43311, '\p{^Is_Sc: 	KALI}', "");
Expect(0, 43311, '\P{Is_Sc: 	KALI}', "");
Expect(1, 43311, '\P{^Is_Sc: 	KALI}', "");
Expect(0, 43263, '\p{Is_Sc: 	KALI}', "");
Expect(1, 43263, '\p{^Is_Sc: 	KALI}', "");
Expect(1, 43263, '\P{Is_Sc: 	KALI}', "");
Expect(0, 43263, '\P{^Is_Sc: 	KALI}', "");
Error('\p{Script=__thai:=}');
Error('\P{Script=__thai:=}');
Expect(1, 3642, '\p{Script=thai}', "");
Expect(0, 3642, '\p{^Script=thai}', "");
Expect(0, 3642, '\P{Script=thai}', "");
Expect(1, 3642, '\P{^Script=thai}', "");
Expect(0, 3584, '\p{Script=thai}', "");
Expect(1, 3584, '\p{^Script=thai}', "");
Expect(1, 3584, '\P{Script=thai}', "");
Expect(0, 3584, '\P{^Script=thai}', "");
Expect(1, 3642, '\p{Script=__Thai}', "");
Expect(0, 3642, '\p{^Script=__Thai}', "");
Expect(0, 3642, '\P{Script=__Thai}', "");
Expect(1, 3642, '\P{^Script=__Thai}', "");
Expect(0, 3584, '\p{Script=__Thai}', "");
Expect(1, 3584, '\p{^Script=__Thai}', "");
Expect(1, 3584, '\P{Script=__Thai}', "");
Expect(0, 3584, '\P{^Script=__Thai}', "");
Error('\p{Sc=:=_-Thai}');
Error('\P{Sc=:=_-Thai}');
Expect(1, 3642, '\p{Sc=thai}', "");
Expect(0, 3642, '\p{^Sc=thai}', "");
Expect(0, 3642, '\P{Sc=thai}', "");
Expect(1, 3642, '\P{^Sc=thai}', "");
Expect(0, 3584, '\p{Sc=thai}', "");
Expect(1, 3584, '\p{^Sc=thai}', "");
Expect(1, 3584, '\P{Sc=thai}', "");
Expect(0, 3584, '\P{^Sc=thai}', "");
Expect(1, 3642, '\p{Sc=_ THAI}', "");
Expect(0, 3642, '\p{^Sc=_ THAI}', "");
Expect(0, 3642, '\P{Sc=_ THAI}', "");
Expect(1, 3642, '\P{^Sc=_ THAI}', "");
Expect(0, 3584, '\p{Sc=_ THAI}', "");
Expect(1, 3584, '\p{^Sc=_ THAI}', "");
Expect(1, 3584, '\P{Sc=_ THAI}', "");
Expect(0, 3584, '\P{^Sc=_ THAI}', "");
Error('\p{Is_Script=_Thai/a/}');
Error('\P{Is_Script=_Thai/a/}');
Expect(1, 3642, '\p{Is_Script=thai}', "");
Expect(0, 3642, '\p{^Is_Script=thai}', "");
Expect(0, 3642, '\P{Is_Script=thai}', "");
Expect(1, 3642, '\P{^Is_Script=thai}', "");
Expect(0, 3584, '\p{Is_Script=thai}', "");
Expect(1, 3584, '\p{^Is_Script=thai}', "");
Expect(1, 3584, '\P{Is_Script=thai}', "");
Expect(0, 3584, '\P{^Is_Script=thai}', "");
Expect(1, 3642, '\p{Is_Script=_-thai}', "");
Expect(0, 3642, '\p{^Is_Script=_-thai}', "");
Expect(0, 3642, '\P{Is_Script=_-thai}', "");
Expect(1, 3642, '\P{^Is_Script=_-thai}', "");
Expect(0, 3584, '\p{Is_Script=_-thai}', "");
Expect(1, 3584, '\p{^Is_Script=_-thai}', "");
Expect(1, 3584, '\P{Is_Script=_-thai}', "");
Expect(0, 3584, '\P{^Is_Script=_-thai}', "");
Error('\p{Is_Sc=_:=Thai}');
Error('\P{Is_Sc=_:=Thai}');
Expect(1, 3642, '\p{Is_Sc=thai}', "");
Expect(0, 3642, '\p{^Is_Sc=thai}', "");
Expect(0, 3642, '\P{Is_Sc=thai}', "");
Expect(1, 3642, '\P{^Is_Sc=thai}', "");
Expect(0, 3584, '\p{Is_Sc=thai}', "");
Expect(1, 3584, '\p{^Is_Sc=thai}', "");
Expect(1, 3584, '\P{Is_Sc=thai}', "");
Expect(0, 3584, '\P{^Is_Sc=thai}', "");
Expect(1, 3642, '\p{Is_Sc=-thai}', "");
Expect(0, 3642, '\p{^Is_Sc=-thai}', "");
Expect(0, 3642, '\P{Is_Sc=-thai}', "");
Expect(1, 3642, '\P{^Is_Sc=-thai}', "");
Expect(0, 3584, '\p{Is_Sc=-thai}', "");
Expect(1, 3584, '\p{^Is_Sc=-thai}', "");
Expect(1, 3584, '\P{Is_Sc=-thai}', "");
Expect(0, 3584, '\P{^Is_Sc=-thai}', "");
Error('\p{Ideographic=/a/YES}');
Error('\P{Ideographic=/a/YES}');
Expect(1, 12295, '\p{Ideographic=yes}', "");
Expect(0, 12295, '\p{^Ideographic=yes}', "");
Expect(0, 12295, '\P{Ideographic=yes}', "");
Expect(1, 12295, '\P{^Ideographic=yes}', "");
Expect(0, 12293, '\p{Ideographic=yes}', "");
Expect(1, 12293, '\p{^Ideographic=yes}', "");
Expect(1, 12293, '\P{Ideographic=yes}', "");
Expect(0, 12293, '\P{^Ideographic=yes}', "");
Expect(1, 12295, '\p{Ideographic= 	Yes}', "");
Expect(0, 12295, '\p{^Ideographic= 	Yes}', "");
Expect(0, 12295, '\P{Ideographic= 	Yes}', "");
Expect(1, 12295, '\P{^Ideographic= 	Yes}', "");
Expect(0, 12293, '\p{Ideographic= 	Yes}', "");
Expect(1, 12293, '\p{^Ideographic= 	Yes}', "");
Expect(1, 12293, '\P{Ideographic= 	Yes}', "");
Expect(0, 12293, '\P{^Ideographic= 	Yes}', "");
Error('\p{Ideo=/a/_y}');
Error('\P{Ideo=/a/_y}');
Expect(1, 12295, '\p{Ideo=y}', "");
Expect(0, 12295, '\p{^Ideo=y}', "");
Expect(0, 12295, '\P{Ideo=y}', "");
Expect(1, 12295, '\P{^Ideo=y}', "");
Expect(0, 12293, '\p{Ideo=y}', "");
Expect(1, 12293, '\p{^Ideo=y}', "");
Expect(1, 12293, '\P{Ideo=y}', "");
Expect(0, 12293, '\P{^Ideo=y}', "");
Expect(1, 12295, '\p{Ideo=__Y}', "");
Expect(0, 12295, '\p{^Ideo=__Y}', "");
Expect(0, 12295, '\P{Ideo=__Y}', "");
Expect(1, 12295, '\P{^Ideo=__Y}', "");
Expect(0, 12293, '\p{Ideo=__Y}', "");
Expect(1, 12293, '\p{^Ideo=__Y}', "");
Expect(1, 12293, '\P{Ideo=__Y}', "");
Expect(0, 12293, '\P{^Ideo=__Y}', "");
Error('\p{Is_Ideographic:	:=T}');
Error('\P{Is_Ideographic:	:=T}');
Expect(1, 12295, '\p{Is_Ideographic=t}', "");
Expect(0, 12295, '\p{^Is_Ideographic=t}', "");
Expect(0, 12295, '\P{Is_Ideographic=t}', "");
Expect(1, 12295, '\P{^Is_Ideographic=t}', "");
Expect(0, 12293, '\p{Is_Ideographic=t}', "");
Expect(1, 12293, '\p{^Is_Ideographic=t}', "");
Expect(1, 12293, '\P{Is_Ideographic=t}', "");
Expect(0, 12293, '\P{^Is_Ideographic=t}', "");
Expect(1, 12295, '\p{Is_Ideographic=-T}', "");
Expect(0, 12295, '\p{^Is_Ideographic=-T}', "");
Expect(0, 12295, '\P{Is_Ideographic=-T}', "");
Expect(1, 12295, '\P{^Is_Ideographic=-T}', "");
Expect(0, 12293, '\p{Is_Ideographic=-T}', "");
Expect(1, 12293, '\p{^Is_Ideographic=-T}', "");
Expect(1, 12293, '\P{Is_Ideographic=-T}', "");
Expect(0, 12293, '\P{^Is_Ideographic=-T}', "");
Error('\p{Is_Ideo=_-TRUE:=}');
Error('\P{Is_Ideo=_-TRUE:=}');
Expect(1, 12295, '\p{Is_Ideo=true}', "");
Expect(0, 12295, '\p{^Is_Ideo=true}', "");
Expect(0, 12295, '\P{Is_Ideo=true}', "");
Expect(1, 12295, '\P{^Is_Ideo=true}', "");
Expect(0, 12293, '\p{Is_Ideo=true}', "");
Expect(1, 12293, '\p{^Is_Ideo=true}', "");
Expect(1, 12293, '\P{Is_Ideo=true}', "");
Expect(0, 12293, '\P{^Is_Ideo=true}', "");
Expect(1, 12295, '\p{Is_Ideo=-_True}', "");
Expect(0, 12295, '\p{^Is_Ideo=-_True}', "");
Expect(0, 12295, '\P{Is_Ideo=-_True}', "");
Expect(1, 12295, '\P{^Is_Ideo=-_True}', "");
Expect(0, 12293, '\p{Is_Ideo=-_True}', "");
Expect(1, 12293, '\p{^Is_Ideo=-_True}', "");
Expect(1, 12293, '\P{Is_Ideo=-_True}', "");
Expect(0, 12293, '\P{^Is_Ideo=-_True}', "");
Error('\p{Ideographic=:=_ NO}');
Error('\P{Ideographic=:=_ NO}');
Expect(1, 12293, '\p{Ideographic=no}', "");
Expect(0, 12293, '\p{^Ideographic=no}', "");
Expect(0, 12293, '\P{Ideographic=no}', "");
Expect(1, 12293, '\P{^Ideographic=no}', "");
Expect(0, 12295, '\p{Ideographic=no}', "");
Expect(1, 12295, '\p{^Ideographic=no}', "");
Expect(1, 12295, '\P{Ideographic=no}', "");
Expect(0, 12295, '\P{^Ideographic=no}', "");
Expect(1, 12293, '\p{Ideographic=-_No}', "");
Expect(0, 12293, '\p{^Ideographic=-_No}', "");
Expect(0, 12293, '\P{Ideographic=-_No}', "");
Expect(1, 12293, '\P{^Ideographic=-_No}', "");
Expect(0, 12295, '\p{Ideographic=-_No}', "");
Expect(1, 12295, '\p{^Ideographic=-_No}', "");
Expect(1, 12295, '\P{Ideographic=-_No}', "");
Expect(0, 12295, '\P{^Ideographic=-_No}', "");
Error('\p{Ideo=		N/a/}');
Error('\P{Ideo=		N/a/}');
Expect(1, 12293, '\p{Ideo=n}', "");
Expect(0, 12293, '\p{^Ideo=n}', "");
Expect(0, 12293, '\P{Ideo=n}', "");
Expect(1, 12293, '\P{^Ideo=n}', "");
Expect(0, 12295, '\p{Ideo=n}', "");
Expect(1, 12295, '\p{^Ideo=n}', "");
Expect(1, 12295, '\P{Ideo=n}', "");
Expect(0, 12295, '\P{^Ideo=n}', "");
Expect(1, 12293, '\p{Ideo=		n}', "");
Expect(0, 12293, '\p{^Ideo=		n}', "");
Expect(0, 12293, '\P{Ideo=		n}', "");
Expect(1, 12293, '\P{^Ideo=		n}', "");
Expect(0, 12295, '\p{Ideo=		n}', "");
Expect(1, 12295, '\p{^Ideo=		n}', "");
Expect(1, 12295, '\P{Ideo=		n}', "");
Expect(0, 12295, '\P{^Ideo=		n}', "");
Error('\p{Is_Ideographic=-:=f}');
Error('\P{Is_Ideographic=-:=f}');
Expect(1, 12293, '\p{Is_Ideographic=f}', "");
Expect(0, 12293, '\p{^Is_Ideographic=f}', "");
Expect(0, 12293, '\P{Is_Ideographic=f}', "");
Expect(1, 12293, '\P{^Is_Ideographic=f}', "");
Expect(0, 12295, '\p{Is_Ideographic=f}', "");
Expect(1, 12295, '\p{^Is_Ideographic=f}', "");
Expect(1, 12295, '\P{Is_Ideographic=f}', "");
Expect(0, 12295, '\P{^Is_Ideographic=f}', "");
Expect(1, 12293, '\p{Is_Ideographic=-F}', "");
Expect(0, 12293, '\p{^Is_Ideographic=-F}', "");
Expect(0, 12293, '\P{Is_Ideographic=-F}', "");
Expect(1, 12293, '\P{^Is_Ideographic=-F}', "");
Expect(0, 12295, '\p{Is_Ideographic=-F}', "");
Expect(1, 12295, '\p{^Is_Ideographic=-F}', "");
Expect(1, 12295, '\P{Is_Ideographic=-F}', "");
Expect(0, 12295, '\P{^Is_Ideographic=-F}', "");
Error('\p{Is_Ideo=:=_False}');
Error('\P{Is_Ideo=:=_False}');
Expect(1, 12293, '\p{Is_Ideo=false}', "");
Expect(0, 12293, '\p{^Is_Ideo=false}', "");
Expect(0, 12293, '\P{Is_Ideo=false}', "");
Expect(1, 12293, '\P{^Is_Ideo=false}', "");
Expect(0, 12295, '\p{Is_Ideo=false}', "");
Expect(1, 12295, '\p{^Is_Ideo=false}', "");
Expect(1, 12295, '\P{Is_Ideo=false}', "");
Expect(0, 12295, '\P{^Is_Ideo=false}', "");
Expect(1, 12293, '\p{Is_Ideo=	False}', "");
Expect(0, 12293, '\p{^Is_Ideo=	False}', "");
Expect(0, 12293, '\P{Is_Ideo=	False}', "");
Expect(1, 12293, '\P{^Is_Ideo=	False}', "");
Expect(0, 12295, '\p{Is_Ideo=	False}', "");
Expect(1, 12295, '\p{^Is_Ideo=	False}', "");
Expect(1, 12295, '\P{Is_Ideo=	False}', "");
Expect(0, 12295, '\P{^Is_Ideo=	False}', "");
Error('\p{Other_Grapheme_Extend:	/a/  yes}');
Error('\P{Other_Grapheme_Extend:	/a/  yes}');
Expect(1, 2494, '\p{Other_Grapheme_Extend=yes}', 'deprecated');
Expect(0, 2494, '\p{^Other_Grapheme_Extend=yes}', 'deprecated');
Expect(0, 2494, '\P{Other_Grapheme_Extend=yes}', 'deprecated');
Expect(1, 2494, '\P{^Other_Grapheme_Extend=yes}', 'deprecated');
Expect(0, 2493, '\p{Other_Grapheme_Extend=yes}', 'deprecated');
Expect(1, 2493, '\p{^Other_Grapheme_Extend=yes}', 'deprecated');
Expect(1, 2493, '\P{Other_Grapheme_Extend=yes}', 'deprecated');
Expect(0, 2493, '\P{^Other_Grapheme_Extend=yes}', 'deprecated');
Expect(1, 2494, '\p{Other_Grapheme_Extend=_yes}', 'deprecated');
Expect(0, 2494, '\p{^Other_Grapheme_Extend=_yes}', 'deprecated');
Expect(0, 2494, '\P{Other_Grapheme_Extend=_yes}', 'deprecated');
Expect(1, 2494, '\P{^Other_Grapheme_Extend=_yes}', 'deprecated');
Expect(0, 2493, '\p{Other_Grapheme_Extend=_yes}', 'deprecated');
Expect(1, 2493, '\p{^Other_Grapheme_Extend=_yes}', 'deprecated');
Expect(1, 2493, '\P{Other_Grapheme_Extend=_yes}', 'deprecated');
Expect(0, 2493, '\P{^Other_Grapheme_Extend=_yes}', 'deprecated');
Error('\p{OGr_Ext=_	y/a/}');
Error('\P{OGr_Ext=_	y/a/}');
Expect(1, 2494, '\p{OGr_Ext=y}', 'deprecated');
Expect(0, 2494, '\p{^OGr_Ext=y}', 'deprecated');
Expect(0, 2494, '\P{OGr_Ext=y}', 'deprecated');
Expect(1, 2494, '\P{^OGr_Ext=y}', 'deprecated');
Expect(0, 2493, '\p{OGr_Ext=y}', 'deprecated');
Expect(1, 2493, '\p{^OGr_Ext=y}', 'deprecated');
Expect(1, 2493, '\P{OGr_Ext=y}', 'deprecated');
Expect(0, 2493, '\P{^OGr_Ext=y}', 'deprecated');
Expect(1, 2494, '\p{OGr_Ext=	_Y}', 'deprecated');
Expect(0, 2494, '\p{^OGr_Ext=	_Y}', 'deprecated');
Expect(0, 2494, '\P{OGr_Ext=	_Y}', 'deprecated');
Expect(1, 2494, '\P{^OGr_Ext=	_Y}', 'deprecated');
Expect(0, 2493, '\p{OGr_Ext=	_Y}', 'deprecated');
Expect(1, 2493, '\p{^OGr_Ext=	_Y}', 'deprecated');
Expect(1, 2493, '\P{OGr_Ext=	_Y}', 'deprecated');
Expect(0, 2493, '\P{^OGr_Ext=	_Y}', 'deprecated');
Error('\p{Is_Other_Grapheme_Extend=_/a/t}');
Error('\P{Is_Other_Grapheme_Extend=_/a/t}');
Expect(1, 2494, '\p{Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(0, 2494, '\p{^Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(0, 2494, '\P{Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(1, 2494, '\P{^Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(0, 2493, '\p{Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(1, 2493, '\p{^Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(1, 2493, '\P{Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(0, 2493, '\P{^Is_Other_Grapheme_Extend=t}', 'deprecated');
Expect(1, 2494, '\p{Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(0, 2494, '\p{^Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(0, 2494, '\P{Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(1, 2494, '\P{^Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(0, 2493, '\p{Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(1, 2493, '\p{^Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(1, 2493, '\P{Is_Other_Grapheme_Extend= T}', 'deprecated');
Expect(0, 2493, '\P{^Is_Other_Grapheme_Extend= T}', 'deprecated');
Error('\p{Is_OGr_Ext=:=-true}');
Error('\P{Is_OGr_Ext=:=-true}');
Expect(1, 2494, '\p{Is_OGr_Ext:	true}', 'deprecated');
Expect(0, 2494, '\p{^Is_OGr_Ext:	true}', 'deprecated');
Expect(0, 2494, '\P{Is_OGr_Ext:	true}', 'deprecated');
Expect(1, 2494, '\P{^Is_OGr_Ext:	true}', 'deprecated');
Expect(0, 2493, '\p{Is_OGr_Ext:	true}', 'deprecated');
Expect(1, 2493, '\p{^Is_OGr_Ext:	true}', 'deprecated');
Expect(1, 2493, '\P{Is_OGr_Ext:	true}', 'deprecated');
Expect(0, 2493, '\P{^Is_OGr_Ext:	true}', 'deprecated');
Expect(1, 2494, '\p{Is_OGr_Ext=__TRUE}', 'deprecated');
Expect(0, 2494, '\p{^Is_OGr_Ext=__TRUE}', 'deprecated');
Expect(0, 2494, '\P{Is_OGr_Ext=__TRUE}', 'deprecated');
Expect(1, 2494, '\P{^Is_OGr_Ext=__TRUE}', 'deprecated');
Expect(0, 2493, '\p{Is_OGr_Ext=__TRUE}', 'deprecated');
Expect(1, 2493, '\p{^Is_OGr_Ext=__TRUE}', 'deprecated');
Expect(1, 2493, '\P{Is_OGr_Ext=__TRUE}', 'deprecated');
Expect(0, 2493, '\P{^Is_OGr_Ext=__TRUE}', 'deprecated');
Error('\p{Other_Grapheme_Extend=	/a/NO}');
Error('\P{Other_Grapheme_Extend=	/a/NO}');
Expect(1, 2493, '\p{Other_Grapheme_Extend=no}', 'deprecated');
Expect(0, 2493, '\p{^Other_Grapheme_Extend=no}', 'deprecated');
Expect(0, 2493, '\P{Other_Grapheme_Extend=no}', 'deprecated');
Expect(1, 2493, '\P{^Other_Grapheme_Extend=no}', 'deprecated');
Expect(0, 2494, '\p{Other_Grapheme_Extend=no}', 'deprecated');
Expect(1, 2494, '\p{^Other_Grapheme_Extend=no}', 'deprecated');
Expect(1, 2494, '\P{Other_Grapheme_Extend=no}', 'deprecated');
Expect(0, 2494, '\P{^Other_Grapheme_Extend=no}', 'deprecated');
Expect(1, 2493, '\p{Other_Grapheme_Extend:	No}', 'deprecated');
Expect(0, 2493, '\p{^Other_Grapheme_Extend:	No}', 'deprecated');
Expect(0, 2493, '\P{Other_Grapheme_Extend:	No}', 'deprecated');
Expect(1, 2493, '\P{^Other_Grapheme_Extend:	No}', 'deprecated');
Expect(0, 2494, '\p{Other_Grapheme_Extend:	No}', 'deprecated');
Expect(1, 2494, '\p{^Other_Grapheme_Extend:	No}', 'deprecated');
Expect(1, 2494, '\P{Other_Grapheme_Extend:	No}', 'deprecated');
Expect(0, 2494, '\P{^Other_Grapheme_Extend:	No}', 'deprecated');
Error('\p{OGr_Ext=  N:=}');
Error('\P{OGr_Ext=  N:=}');
Expect(1, 2493, '\p{OGr_Ext=n}', 'deprecated');
Expect(0, 2493, '\p{^OGr_Ext=n}', 'deprecated');
Expect(0, 2493, '\P{OGr_Ext=n}', 'deprecated');
Expect(1, 2493, '\P{^OGr_Ext=n}', 'deprecated');
Expect(0, 2494, '\p{OGr_Ext=n}', 'deprecated');
Expect(1, 2494, '\p{^OGr_Ext=n}', 'deprecated');
Expect(1, 2494, '\P{OGr_Ext=n}', 'deprecated');
Expect(0, 2494, '\P{^OGr_Ext=n}', 'deprecated');
Expect(1, 2493, '\p{OGr_Ext=-	N}', 'deprecated');
Expect(0, 2493, '\p{^OGr_Ext=-	N}', 'deprecated');
Expect(0, 2493, '\P{OGr_Ext=-	N}', 'deprecated');
Expect(1, 2493, '\P{^OGr_Ext=-	N}', 'deprecated');
Expect(0, 2494, '\p{OGr_Ext=-	N}', 'deprecated');
Expect(1, 2494, '\p{^OGr_Ext=-	N}', 'deprecated');
Expect(1, 2494, '\P{OGr_Ext=-	N}', 'deprecated');
Expect(0, 2494, '\P{^OGr_Ext=-	N}', 'deprecated');
Error('\p{Is_Other_Grapheme_Extend= _F:=}');
Error('\P{Is_Other_Grapheme_Extend= _F:=}');
Expect(1, 2493, '\p{Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(0, 2493, '\p{^Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(0, 2493, '\P{Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(1, 2493, '\P{^Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(0, 2494, '\p{Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(1, 2494, '\p{^Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(1, 2494, '\P{Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(0, 2494, '\P{^Is_Other_Grapheme_Extend=f}', 'deprecated');
Expect(1, 2493, '\p{Is_Other_Grapheme_Extend=	-F}', 'deprecated');
Expect(0, 2493, '\p{^Is_Other_Grapheme_Extend=	-F}', 'deprecated');
Expect(0, 2493, '\P{Is_Other_Grapheme_Extend=	-F}', 'deprecated');
Expect(1, 2493, '\P{^Is_Other_Grapheme_Extend=	-F}', 'deprecated');
Expect(0, 2494, '\p{Is_Other_Grapheme_Extend=	-F}', 'deprecated');
Expect(1, 2494, '\p{^Is_Other_Grapheme_Extend=	-F}', 'deprecated');
Expect(1, 2494, '\P{Is_Other_Grapheme_Extend=	-F}', 'deprecated');
Expect(0, 2494, '\P{^Is_Other_Grapheme_Extend=	-F}', 'deprecated');
Error('\p{Is_OGr_Ext=-:=false}');
Error('\P{Is_OGr_Ext=-:=false}');
Expect(1, 2493, '\p{Is_OGr_Ext=false}', 'deprecated');
Expect(0, 2493, '\p{^Is_OGr_Ext=false}', 'deprecated');
Expect(0, 2493, '\P{Is_OGr_Ext=false}', 'deprecated');
Expect(1, 2493, '\P{^Is_OGr_Ext=false}', 'deprecated');
Expect(0, 2494, '\p{Is_OGr_Ext=false}', 'deprecated');
Expect(1, 2494, '\p{^Is_OGr_Ext=false}', 'deprecated');
Expect(1, 2494, '\P{Is_OGr_Ext=false}', 'deprecated');
Expect(0, 2494, '\P{^Is_OGr_Ext=false}', 'deprecated');
Expect(1, 2493, '\p{Is_OGr_Ext=_False}', 'deprecated');
Expect(0, 2493, '\p{^Is_OGr_Ext=_False}', 'deprecated');
Expect(0, 2493, '\P{Is_OGr_Ext=_False}', 'deprecated');
Expect(1, 2493, '\P{^Is_OGr_Ext=_False}', 'deprecated');
Expect(0, 2494, '\p{Is_OGr_Ext=_False}', 'deprecated');
Expect(1, 2494, '\p{^Is_OGr_Ext=_False}', 'deprecated');
Expect(1, 2494, '\P{Is_OGr_Ext=_False}', 'deprecated');
Expect(0, 2494, '\P{^Is_OGr_Ext=_False}', 'deprecated');
Error('\p{Grapheme_Link=Yes}');
Error('\P{Grapheme_Link=Yes}');
Error('\p{Gr_Link=Y}');
Error('\P{Gr_Link=Y}');
Error('\p{Is_Grapheme_Link=T}');
Error('\P{Is_Grapheme_Link=T}');
Error('\p{Is_Gr_Link=True}');
Error('\P{Is_Gr_Link=True}');
Error('\p{Grapheme_Link:	No}');
Error('\P{Grapheme_Link:	No}');
Error('\p{Gr_Link:N}');
Error('\P{Gr_Link:N}');
Error('\p{Is_Grapheme_Link=F}');
Error('\P{Is_Grapheme_Link=F}');
Error('\p{Is_Gr_Link=False}');
Error('\P{Is_Gr_Link=False}');
Error('\p{Bidi_Control=-_yes/a/}');
Error('\P{Bidi_Control=-_yes/a/}');
Expect(1, 8207, '\p{Bidi_Control=yes}', "");
Expect(0, 8207, '\p{^Bidi_Control=yes}', "");
Expect(0, 8207, '\P{Bidi_Control=yes}', "");
Expect(1, 8207, '\P{^Bidi_Control=yes}', "");
Expect(0, 8205, '\p{Bidi_Control=yes}', "");
Expect(1, 8205, '\p{^Bidi_Control=yes}', "");
Expect(1, 8205, '\P{Bidi_Control=yes}', "");
Expect(0, 8205, '\P{^Bidi_Control=yes}', "");
Expect(1, 8207, '\p{Bidi_Control: _YES}', "");
Expect(0, 8207, '\p{^Bidi_Control: _YES}', "");
Expect(0, 8207, '\P{Bidi_Control: _YES}', "");
Expect(1, 8207, '\P{^Bidi_Control: _YES}', "");
Expect(0, 8205, '\p{Bidi_Control: _YES}', "");
Expect(1, 8205, '\p{^Bidi_Control: _YES}', "");
Expect(1, 8205, '\P{Bidi_Control: _YES}', "");
Expect(0, 8205, '\P{^Bidi_Control: _YES}', "");
Error('\p{Bidi_C=--y:=}');
Error('\P{Bidi_C=--y:=}');
Expect(1, 8207, '\p{Bidi_C=y}', "");
Expect(0, 8207, '\p{^Bidi_C=y}', "");
Expect(0, 8207, '\P{Bidi_C=y}', "");
Expect(1, 8207, '\P{^Bidi_C=y}', "");
Expect(0, 8205, '\p{Bidi_C=y}', "");
Expect(1, 8205, '\p{^Bidi_C=y}', "");
Expect(1, 8205, '\P{Bidi_C=y}', "");
Expect(0, 8205, '\P{^Bidi_C=y}', "");
Expect(1, 8207, '\p{Bidi_C= -Y}', "");
Expect(0, 8207, '\p{^Bidi_C= -Y}', "");
Expect(0, 8207, '\P{Bidi_C= -Y}', "");
Expect(1, 8207, '\P{^Bidi_C= -Y}', "");
Expect(0, 8205, '\p{Bidi_C= -Y}', "");
Expect(1, 8205, '\p{^Bidi_C= -Y}', "");
Expect(1, 8205, '\P{Bidi_C= -Y}', "");
Expect(0, 8205, '\P{^Bidi_C= -Y}', "");
Error('\p{Is_Bidi_Control=	/a/T}');
Error('\P{Is_Bidi_Control=	/a/T}');
Expect(1, 8207, '\p{Is_Bidi_Control=t}', "");
Expect(0, 8207, '\p{^Is_Bidi_Control=t}', "");
Expect(0, 8207, '\P{Is_Bidi_Control=t}', "");
Expect(1, 8207, '\P{^Is_Bidi_Control=t}', "");
Expect(0, 8205, '\p{Is_Bidi_Control=t}', "");
Expect(1, 8205, '\p{^Is_Bidi_Control=t}', "");
Expect(1, 8205, '\P{Is_Bidi_Control=t}', "");
Expect(0, 8205, '\P{^Is_Bidi_Control=t}', "");
Expect(1, 8207, '\p{Is_Bidi_Control=	T}', "");
Expect(0, 8207, '\p{^Is_Bidi_Control=	T}', "");
Expect(0, 8207, '\P{Is_Bidi_Control=	T}', "");
Expect(1, 8207, '\P{^Is_Bidi_Control=	T}', "");
Expect(0, 8205, '\p{Is_Bidi_Control=	T}', "");
Expect(1, 8205, '\p{^Is_Bidi_Control=	T}', "");
Expect(1, 8205, '\P{Is_Bidi_Control=	T}', "");
Expect(0, 8205, '\P{^Is_Bidi_Control=	T}', "");
Error('\p{Is_Bidi_C=:=		TRUE}');
Error('\P{Is_Bidi_C=:=		TRUE}');
Expect(1, 8207, '\p{Is_Bidi_C:true}', "");
Expect(0, 8207, '\p{^Is_Bidi_C:true}', "");
Expect(0, 8207, '\P{Is_Bidi_C:true}', "");
Expect(1, 8207, '\P{^Is_Bidi_C:true}', "");
Expect(0, 8205, '\p{Is_Bidi_C:true}', "");
Expect(1, 8205, '\p{^Is_Bidi_C:true}', "");
Expect(1, 8205, '\P{Is_Bidi_C:true}', "");
Expect(0, 8205, '\P{^Is_Bidi_C:true}', "");
Expect(1, 8207, '\p{Is_Bidi_C:   	True}', "");
Expect(0, 8207, '\p{^Is_Bidi_C:   	True}', "");
Expect(0, 8207, '\P{Is_Bidi_C:   	True}', "");
Expect(1, 8207, '\P{^Is_Bidi_C:   	True}', "");
Expect(0, 8205, '\p{Is_Bidi_C:   	True}', "");
Expect(1, 8205, '\p{^Is_Bidi_C:   	True}', "");
Expect(1, 8205, '\P{Is_Bidi_C:   	True}', "");
Expect(0, 8205, '\P{^Is_Bidi_C:   	True}', "");
Error('\p{Bidi_Control=	 No/a/}');
Error('\P{Bidi_Control=	 No/a/}');
Expect(1, 8205, '\p{Bidi_Control=no}', "");
Expect(0, 8205, '\p{^Bidi_Control=no}', "");
Expect(0, 8205, '\P{Bidi_Control=no}', "");
Expect(1, 8205, '\P{^Bidi_Control=no}', "");
Expect(0, 8207, '\p{Bidi_Control=no}', "");
Expect(1, 8207, '\p{^Bidi_Control=no}', "");
Expect(1, 8207, '\P{Bidi_Control=no}', "");
Expect(0, 8207, '\P{^Bidi_Control=no}', "");
Expect(1, 8205, '\p{Bidi_Control= NO}', "");
Expect(0, 8205, '\p{^Bidi_Control= NO}', "");
Expect(0, 8205, '\P{Bidi_Control= NO}', "");
Expect(1, 8205, '\P{^Bidi_Control= NO}', "");
Expect(0, 8207, '\p{Bidi_Control= NO}', "");
Expect(1, 8207, '\p{^Bidi_Control= NO}', "");
Expect(1, 8207, '\P{Bidi_Control= NO}', "");
Expect(0, 8207, '\P{^Bidi_Control= NO}', "");
Error('\p{Bidi_C=_	n/a/}');
Error('\P{Bidi_C=_	n/a/}');
Expect(1, 8205, '\p{Bidi_C=n}', "");
Expect(0, 8205, '\p{^Bidi_C=n}', "");
Expect(0, 8205, '\P{Bidi_C=n}', "");
Expect(1, 8205, '\P{^Bidi_C=n}', "");
Expect(0, 8207, '\p{Bidi_C=n}', "");
Expect(1, 8207, '\p{^Bidi_C=n}', "");
Expect(1, 8207, '\P{Bidi_C=n}', "");
Expect(0, 8207, '\P{^Bidi_C=n}', "");
Expect(1, 8205, '\p{Bidi_C=	n}', "");
Expect(0, 8205, '\p{^Bidi_C=	n}', "");
Expect(0, 8205, '\P{Bidi_C=	n}', "");
Expect(1, 8205, '\P{^Bidi_C=	n}', "");
Expect(0, 8207, '\p{Bidi_C=	n}', "");
Expect(1, 8207, '\p{^Bidi_C=	n}', "");
Expect(1, 8207, '\P{Bidi_C=	n}', "");
Expect(0, 8207, '\P{^Bidi_C=	n}', "");
Error('\p{Is_Bidi_Control=/a/ f}');
Error('\P{Is_Bidi_Control=/a/ f}');
Expect(1, 8205, '\p{Is_Bidi_Control=f}', "");
Expect(0, 8205, '\p{^Is_Bidi_Control=f}', "");
Expect(0, 8205, '\P{Is_Bidi_Control=f}', "");
Expect(1, 8205, '\P{^Is_Bidi_Control=f}', "");
Expect(0, 8207, '\p{Is_Bidi_Control=f}', "");
Expect(1, 8207, '\p{^Is_Bidi_Control=f}', "");
Expect(1, 8207, '\P{Is_Bidi_Control=f}', "");
Expect(0, 8207, '\P{^Is_Bidi_Control=f}', "");
Expect(1, 8205, '\p{Is_Bidi_Control= F}', "");
Expect(0, 8205, '\p{^Is_Bidi_Control= F}', "");
Expect(0, 8205, '\P{Is_Bidi_Control= F}', "");
Expect(1, 8205, '\P{^Is_Bidi_Control= F}', "");
Expect(0, 8207, '\p{Is_Bidi_Control= F}', "");
Expect(1, 8207, '\p{^Is_Bidi_Control= F}', "");
Expect(1, 8207, '\P{Is_Bidi_Control= F}', "");
Expect(0, 8207, '\P{^Is_Bidi_Control= F}', "");
Error('\p{Is_Bidi_C=	False/a/}');
Error('\P{Is_Bidi_C=	False/a/}');
Expect(1, 8205, '\p{Is_Bidi_C=false}', "");
Expect(0, 8205, '\p{^Is_Bidi_C=false}', "");
Expect(0, 8205, '\P{Is_Bidi_C=false}', "");
Expect(1, 8205, '\P{^Is_Bidi_C=false}', "");
Expect(0, 8207, '\p{Is_Bidi_C=false}', "");
Expect(1, 8207, '\p{^Is_Bidi_C=false}', "");
Expect(1, 8207, '\P{Is_Bidi_C=false}', "");
Expect(0, 8207, '\P{^Is_Bidi_C=false}', "");
Expect(1, 8205, '\p{Is_Bidi_C=__FALSE}', "");
Expect(0, 8205, '\p{^Is_Bidi_C=__FALSE}', "");
Expect(0, 8205, '\P{Is_Bidi_C=__FALSE}', "");
Expect(1, 8205, '\P{^Is_Bidi_C=__FALSE}', "");
Expect(0, 8207, '\p{Is_Bidi_C=__FALSE}', "");
Expect(1, 8207, '\p{^Is_Bidi_C=__FALSE}', "");
Expect(1, 8207, '\P{Is_Bidi_C=__FALSE}', "");
Expect(0, 8207, '\P{^Is_Bidi_C=__FALSE}', "");
Error('\p{ID_Continue=:=	YES}');
Error('\P{ID_Continue=:=	YES}');
Expect(1, 57, '\p{ID_Continue=yes}', "");
Expect(0, 57, '\p{^ID_Continue=yes}', "");
Expect(0, 57, '\P{ID_Continue=yes}', "");
Expect(1, 57, '\P{^ID_Continue=yes}', "");
Expect(0, 47, '\p{ID_Continue=yes}', "");
Expect(1, 47, '\p{^ID_Continue=yes}', "");
Expect(1, 47, '\P{ID_Continue=yes}', "");
Expect(0, 47, '\P{^ID_Continue=yes}', "");
Expect(1, 57, '\p{ID_Continue= YES}', "");
Expect(0, 57, '\p{^ID_Continue= YES}', "");
Expect(0, 57, '\P{ID_Continue= YES}', "");
Expect(1, 57, '\P{^ID_Continue= YES}', "");
Expect(0, 47, '\p{ID_Continue= YES}', "");
Expect(1, 47, '\p{^ID_Continue= YES}', "");
Expect(1, 47, '\P{ID_Continue= YES}', "");
Expect(0, 47, '\P{^ID_Continue= YES}', "");
Error('\p{IDC=:=-Y}');
Error('\P{IDC=:=-Y}');
Expect(1, 57, '\p{IDC=y}', "");
Expect(0, 57, '\p{^IDC=y}', "");
Expect(0, 57, '\P{IDC=y}', "");
Expect(1, 57, '\P{^IDC=y}', "");
Expect(0, 47, '\p{IDC=y}', "");
Expect(1, 47, '\p{^IDC=y}', "");
Expect(1, 47, '\P{IDC=y}', "");
Expect(0, 47, '\P{^IDC=y}', "");
Expect(1, 57, '\p{IDC: 	Y}', "");
Expect(0, 57, '\p{^IDC: 	Y}', "");
Expect(0, 57, '\P{IDC: 	Y}', "");
Expect(1, 57, '\P{^IDC: 	Y}', "");
Expect(0, 47, '\p{IDC: 	Y}', "");
Expect(1, 47, '\p{^IDC: 	Y}', "");
Expect(1, 47, '\P{IDC: 	Y}', "");
Expect(0, 47, '\P{^IDC: 	Y}', "");
Error('\p{Is_ID_Continue=--t/a/}');
Error('\P{Is_ID_Continue=--t/a/}');
Expect(1, 57, '\p{Is_ID_Continue=t}', "");
Expect(0, 57, '\p{^Is_ID_Continue=t}', "");
Expect(0, 57, '\P{Is_ID_Continue=t}', "");
Expect(1, 57, '\P{^Is_ID_Continue=t}', "");
Expect(0, 47, '\p{Is_ID_Continue=t}', "");
Expect(1, 47, '\p{^Is_ID_Continue=t}', "");
Expect(1, 47, '\P{Is_ID_Continue=t}', "");
Expect(0, 47, '\P{^Is_ID_Continue=t}', "");
Expect(1, 57, '\p{Is_ID_Continue=_-T}', "");
Expect(0, 57, '\p{^Is_ID_Continue=_-T}', "");
Expect(0, 57, '\P{Is_ID_Continue=_-T}', "");
Expect(1, 57, '\P{^Is_ID_Continue=_-T}', "");
Expect(0, 47, '\p{Is_ID_Continue=_-T}', "");
Expect(1, 47, '\p{^Is_ID_Continue=_-T}', "");
Expect(1, 47, '\P{Is_ID_Continue=_-T}', "");
Expect(0, 47, '\P{^Is_ID_Continue=_-T}', "");
Error('\p{Is_IDC=/a/- True}');
Error('\P{Is_IDC=/a/- True}');
Expect(1, 57, '\p{Is_IDC=true}', "");
Expect(0, 57, '\p{^Is_IDC=true}', "");
Expect(0, 57, '\P{Is_IDC=true}', "");
Expect(1, 57, '\P{^Is_IDC=true}', "");
Expect(0, 47, '\p{Is_IDC=true}', "");
Expect(1, 47, '\p{^Is_IDC=true}', "");
Expect(1, 47, '\P{Is_IDC=true}', "");
Expect(0, 47, '\P{^Is_IDC=true}', "");
Expect(1, 57, '\p{Is_IDC= _true}', "");
Expect(0, 57, '\p{^Is_IDC= _true}', "");
Expect(0, 57, '\P{Is_IDC= _true}', "");
Expect(1, 57, '\P{^Is_IDC= _true}', "");
Expect(0, 47, '\p{Is_IDC= _true}', "");
Expect(1, 47, '\p{^Is_IDC= _true}', "");
Expect(1, 47, '\P{Is_IDC= _true}', "");
Expect(0, 47, '\P{^Is_IDC= _true}', "");
Error('\p{ID_Continue=/a/_ No}');
Error('\P{ID_Continue=/a/_ No}');
Expect(1, 47, '\p{ID_Continue=no}', "");
Expect(0, 47, '\p{^ID_Continue=no}', "");
Expect(0, 47, '\P{ID_Continue=no}', "");
Expect(1, 47, '\P{^ID_Continue=no}', "");
Expect(0, 57, '\p{ID_Continue=no}', "");
Expect(1, 57, '\p{^ID_Continue=no}', "");
Expect(1, 57, '\P{ID_Continue=no}', "");
Expect(0, 57, '\P{^ID_Continue=no}', "");
Expect(1, 47, '\p{ID_Continue=__no}', "");
Expect(0, 47, '\p{^ID_Continue=__no}', "");
Expect(0, 47, '\P{ID_Continue=__no}', "");
Expect(1, 47, '\P{^ID_Continue=__no}', "");
Expect(0, 57, '\p{ID_Continue=__no}', "");
Expect(1, 57, '\p{^ID_Continue=__no}', "");
Expect(1, 57, '\P{ID_Continue=__no}', "");
Expect(0, 57, '\P{^ID_Continue=__no}', "");
Error('\p{IDC=:=N}');
Error('\P{IDC=:=N}');
Expect(1, 47, '\p{IDC=n}', "");
Expect(0, 47, '\p{^IDC=n}', "");
Expect(0, 47, '\P{IDC=n}', "");
Expect(1, 47, '\P{^IDC=n}', "");
Expect(0, 57, '\p{IDC=n}', "");
Expect(1, 57, '\p{^IDC=n}', "");
Expect(1, 57, '\P{IDC=n}', "");
Expect(0, 57, '\P{^IDC=n}', "");
Expect(1, 47, '\p{IDC=N}', "");
Expect(0, 47, '\p{^IDC=N}', "");
Expect(0, 47, '\P{IDC=N}', "");
Expect(1, 47, '\P{^IDC=N}', "");
Expect(0, 57, '\p{IDC=N}', "");
Expect(1, 57, '\p{^IDC=N}', "");
Expect(1, 57, '\P{IDC=N}', "");
Expect(0, 57, '\P{^IDC=N}', "");
Error('\p{Is_ID_Continue=:=	F}');
Error('\P{Is_ID_Continue=:=	F}');
Expect(1, 47, '\p{Is_ID_Continue: f}', "");
Expect(0, 47, '\p{^Is_ID_Continue: f}', "");
Expect(0, 47, '\P{Is_ID_Continue: f}', "");
Expect(1, 47, '\P{^Is_ID_Continue: f}', "");
Expect(0, 57, '\p{Is_ID_Continue: f}', "");
Expect(1, 57, '\p{^Is_ID_Continue: f}', "");
Expect(1, 57, '\P{Is_ID_Continue: f}', "");
Expect(0, 57, '\P{^Is_ID_Continue: f}', "");
Expect(1, 47, '\p{Is_ID_Continue=	_F}', "");
Expect(0, 47, '\p{^Is_ID_Continue=	_F}', "");
Expect(0, 47, '\P{Is_ID_Continue=	_F}', "");
Expect(1, 47, '\P{^Is_ID_Continue=	_F}', "");
Expect(0, 57, '\p{Is_ID_Continue=	_F}', "");
Expect(1, 57, '\p{^Is_ID_Continue=	_F}', "");
Expect(1, 57, '\P{Is_ID_Continue=	_F}', "");
Expect(0, 57, '\P{^Is_ID_Continue=	_F}', "");
Error('\p{Is_IDC:_-FALSE/a/}');
Error('\P{Is_IDC:_-FALSE/a/}');
Expect(1, 47, '\p{Is_IDC=false}', "");
Expect(0, 47, '\p{^Is_IDC=false}', "");
Expect(0, 47, '\P{Is_IDC=false}', "");
Expect(1, 47, '\P{^Is_IDC=false}', "");
Expect(0, 57, '\p{Is_IDC=false}', "");
Expect(1, 57, '\p{^Is_IDC=false}', "");
Expect(1, 57, '\P{Is_IDC=false}', "");
Expect(0, 57, '\P{^Is_IDC=false}', "");
Expect(1, 47, '\p{Is_IDC=-False}', "");
Expect(0, 47, '\p{^Is_IDC=-False}', "");
Expect(0, 47, '\P{Is_IDC=-False}', "");
Expect(1, 47, '\P{^Is_IDC=-False}', "");
Expect(0, 57, '\p{Is_IDC=-False}', "");
Expect(1, 57, '\p{^Is_IDC=-False}', "");
Expect(1, 57, '\P{Is_IDC=-False}', "");
Expect(0, 57, '\P{^Is_IDC=-False}', "");
Error('\p{Other_Alphabetic=-	YES/a/}');
Error('\P{Other_Alphabetic=-	YES/a/}');
Expect(1, 837, '\p{Other_Alphabetic=yes}', 'deprecated');
Expect(0, 837, '\p{^Other_Alphabetic=yes}', 'deprecated');
Expect(0, 837, '\P{Other_Alphabetic=yes}', 'deprecated');
Expect(1, 837, '\P{^Other_Alphabetic=yes}', 'deprecated');
Expect(0, 836, '\p{Other_Alphabetic=yes}', 'deprecated');
Expect(1, 836, '\p{^Other_Alphabetic=yes}', 'deprecated');
Expect(1, 836, '\P{Other_Alphabetic=yes}', 'deprecated');
Expect(0, 836, '\P{^Other_Alphabetic=yes}', 'deprecated');
Expect(1, 837, '\p{Other_Alphabetic=	_Yes}', 'deprecated');
Expect(0, 837, '\p{^Other_Alphabetic=	_Yes}', 'deprecated');
Expect(0, 837, '\P{Other_Alphabetic=	_Yes}', 'deprecated');
Expect(1, 837, '\P{^Other_Alphabetic=	_Yes}', 'deprecated');
Expect(0, 836, '\p{Other_Alphabetic=	_Yes}', 'deprecated');
Expect(1, 836, '\p{^Other_Alphabetic=	_Yes}', 'deprecated');
Expect(1, 836, '\P{Other_Alphabetic=	_Yes}', 'deprecated');
Expect(0, 836, '\P{^Other_Alphabetic=	_Yes}', 'deprecated');
Error('\p{OAlpha= /a/Y}');
Error('\P{OAlpha= /a/Y}');
Expect(1, 837, '\p{OAlpha=y}', 'deprecated');
Expect(0, 837, '\p{^OAlpha=y}', 'deprecated');
Expect(0, 837, '\P{OAlpha=y}', 'deprecated');
Expect(1, 837, '\P{^OAlpha=y}', 'deprecated');
Expect(0, 836, '\p{OAlpha=y}', 'deprecated');
Expect(1, 836, '\p{^OAlpha=y}', 'deprecated');
Expect(1, 836, '\P{OAlpha=y}', 'deprecated');
Expect(0, 836, '\P{^OAlpha=y}', 'deprecated');
Expect(1, 837, '\p{OAlpha=_y}', 'deprecated');
Expect(0, 837, '\p{^OAlpha=_y}', 'deprecated');
Expect(0, 837, '\P{OAlpha=_y}', 'deprecated');
Expect(1, 837, '\P{^OAlpha=_y}', 'deprecated');
Expect(0, 836, '\p{OAlpha=_y}', 'deprecated');
Expect(1, 836, '\p{^OAlpha=_y}', 'deprecated');
Expect(1, 836, '\P{OAlpha=_y}', 'deprecated');
Expect(0, 836, '\P{^OAlpha=_y}', 'deprecated');
Error('\p{Is_Other_Alphabetic=_t:=}');
Error('\P{Is_Other_Alphabetic=_t:=}');
Expect(1, 837, '\p{Is_Other_Alphabetic=t}', 'deprecated');
Expect(0, 837, '\p{^Is_Other_Alphabetic=t}', 'deprecated');
Expect(0, 837, '\P{Is_Other_Alphabetic=t}', 'deprecated');
Expect(1, 837, '\P{^Is_Other_Alphabetic=t}', 'deprecated');
Expect(0, 836, '\p{Is_Other_Alphabetic=t}', 'deprecated');
Expect(1, 836, '\p{^Is_Other_Alphabetic=t}', 'deprecated');
Expect(1, 836, '\P{Is_Other_Alphabetic=t}', 'deprecated');
Expect(0, 836, '\P{^Is_Other_Alphabetic=t}', 'deprecated');
Expect(1, 837, '\p{Is_Other_Alphabetic: 	_T}', 'deprecated');
Expect(0, 837, '\p{^Is_Other_Alphabetic: 	_T}', 'deprecated');
Expect(0, 837, '\P{Is_Other_Alphabetic: 	_T}', 'deprecated');
Expect(1, 837, '\P{^Is_Other_Alphabetic: 	_T}', 'deprecated');
Expect(0, 836, '\p{Is_Other_Alphabetic: 	_T}', 'deprecated');
Expect(1, 836, '\p{^Is_Other_Alphabetic: 	_T}', 'deprecated');
Expect(1, 836, '\P{Is_Other_Alphabetic: 	_T}', 'deprecated');
Expect(0, 836, '\P{^Is_Other_Alphabetic: 	_T}', 'deprecated');
Error('\p{Is_OAlpha=/a/ true}');
Error('\P{Is_OAlpha=/a/ true}');
Expect(1, 837, '\p{Is_OAlpha:true}', 'deprecated');
Expect(0, 837, '\p{^Is_OAlpha:true}', 'deprecated');
Expect(0, 837, '\P{Is_OAlpha:true}', 'deprecated');
Expect(1, 837, '\P{^Is_OAlpha:true}', 'deprecated');
Expect(0, 836, '\p{Is_OAlpha:true}', 'deprecated');
Expect(1, 836, '\p{^Is_OAlpha:true}', 'deprecated');
Expect(1, 836, '\P{Is_OAlpha:true}', 'deprecated');
Expect(0, 836, '\P{^Is_OAlpha:true}', 'deprecated');
Expect(1, 837, '\p{Is_OAlpha= _true}', 'deprecated');
Expect(0, 837, '\p{^Is_OAlpha= _true}', 'deprecated');
Expect(0, 837, '\P{Is_OAlpha= _true}', 'deprecated');
Expect(1, 837, '\P{^Is_OAlpha= _true}', 'deprecated');
Expect(0, 836, '\p{Is_OAlpha= _true}', 'deprecated');
Expect(1, 836, '\p{^Is_OAlpha= _true}', 'deprecated');
Expect(1, 836, '\P{Is_OAlpha= _true}', 'deprecated');
Expect(0, 836, '\P{^Is_OAlpha= _true}', 'deprecated');
Error('\p{Other_Alphabetic=/a/No}');
Error('\P{Other_Alphabetic=/a/No}');
Expect(1, 836, '\p{Other_Alphabetic=no}', 'deprecated');
Expect(0, 836, '\p{^Other_Alphabetic=no}', 'deprecated');
Expect(0, 836, '\P{Other_Alphabetic=no}', 'deprecated');
Expect(1, 836, '\P{^Other_Alphabetic=no}', 'deprecated');
Expect(0, 837, '\p{Other_Alphabetic=no}', 'deprecated');
Expect(1, 837, '\p{^Other_Alphabetic=no}', 'deprecated');
Expect(1, 837, '\P{Other_Alphabetic=no}', 'deprecated');
Expect(0, 837, '\P{^Other_Alphabetic=no}', 'deprecated');
Expect(1, 836, '\p{Other_Alphabetic=- No}', 'deprecated');
Expect(0, 836, '\p{^Other_Alphabetic=- No}', 'deprecated');
Expect(0, 836, '\P{Other_Alphabetic=- No}', 'deprecated');
Expect(1, 836, '\P{^Other_Alphabetic=- No}', 'deprecated');
Expect(0, 837, '\p{Other_Alphabetic=- No}', 'deprecated');
Expect(1, 837, '\p{^Other_Alphabetic=- No}', 'deprecated');
Expect(1, 837, '\P{Other_Alphabetic=- No}', 'deprecated');
Expect(0, 837, '\P{^Other_Alphabetic=- No}', 'deprecated');
Error('\p{OAlpha=		n:=}');
Error('\P{OAlpha=		n:=}');
Expect(1, 836, '\p{OAlpha=n}', 'deprecated');
Expect(0, 836, '\p{^OAlpha=n}', 'deprecated');
Expect(0, 836, '\P{OAlpha=n}', 'deprecated');
Expect(1, 836, '\P{^OAlpha=n}', 'deprecated');
Expect(0, 837, '\p{OAlpha=n}', 'deprecated');
Expect(1, 837, '\p{^OAlpha=n}', 'deprecated');
Expect(1, 837, '\P{OAlpha=n}', 'deprecated');
Expect(0, 837, '\P{^OAlpha=n}', 'deprecated');
Expect(1, 836, '\p{OAlpha: __n}', 'deprecated');
Expect(0, 836, '\p{^OAlpha: __n}', 'deprecated');
Expect(0, 836, '\P{OAlpha: __n}', 'deprecated');
Expect(1, 836, '\P{^OAlpha: __n}', 'deprecated');
Expect(0, 837, '\p{OAlpha: __n}', 'deprecated');
Expect(1, 837, '\p{^OAlpha: __n}', 'deprecated');
Expect(1, 837, '\P{OAlpha: __n}', 'deprecated');
Expect(0, 837, '\P{^OAlpha: __n}', 'deprecated');
Error('\p{Is_Other_Alphabetic=/a/F}');
Error('\P{Is_Other_Alphabetic=/a/F}');
Expect(1, 836, '\p{Is_Other_Alphabetic=f}', 'deprecated');
Expect(0, 836, '\p{^Is_Other_Alphabetic=f}', 'deprecated');
Expect(0, 836, '\P{Is_Other_Alphabetic=f}', 'deprecated');
Expect(1, 836, '\P{^Is_Other_Alphabetic=f}', 'deprecated');
Expect(0, 837, '\p{Is_Other_Alphabetic=f}', 'deprecated');
Expect(1, 837, '\p{^Is_Other_Alphabetic=f}', 'deprecated');
Expect(1, 837, '\P{Is_Other_Alphabetic=f}', 'deprecated');
Expect(0, 837, '\P{^Is_Other_Alphabetic=f}', 'deprecated');
Expect(1, 836, '\p{Is_Other_Alphabetic=	-F}', 'deprecated');
Expect(0, 836, '\p{^Is_Other_Alphabetic=	-F}', 'deprecated');
Expect(0, 836, '\P{Is_Other_Alphabetic=	-F}', 'deprecated');
Expect(1, 836, '\P{^Is_Other_Alphabetic=	-F}', 'deprecated');
Expect(0, 837, '\p{Is_Other_Alphabetic=	-F}', 'deprecated');
Expect(1, 837, '\p{^Is_Other_Alphabetic=	-F}', 'deprecated');
Expect(1, 837, '\P{Is_Other_Alphabetic=	-F}', 'deprecated');
Expect(0, 837, '\P{^Is_Other_Alphabetic=	-F}', 'deprecated');
Error('\p{Is_OAlpha=_:=FALSE}');
Error('\P{Is_OAlpha=_:=FALSE}');
Expect(1, 836, '\p{Is_OAlpha=false}', 'deprecated');
Expect(0, 836, '\p{^Is_OAlpha=false}', 'deprecated');
Expect(0, 836, '\P{Is_OAlpha=false}', 'deprecated');
Expect(1, 836, '\P{^Is_OAlpha=false}', 'deprecated');
Expect(0, 837, '\p{Is_OAlpha=false}', 'deprecated');
Expect(1, 837, '\p{^Is_OAlpha=false}', 'deprecated');
Expect(1, 837, '\P{Is_OAlpha=false}', 'deprecated');
Expect(0, 837, '\P{^Is_OAlpha=false}', 'deprecated');
Expect(1, 836, '\p{Is_OAlpha= false}', 'deprecated');
Expect(0, 836, '\p{^Is_OAlpha= false}', 'deprecated');
Expect(0, 836, '\P{Is_OAlpha= false}', 'deprecated');
Expect(1, 836, '\P{^Is_OAlpha= false}', 'deprecated');
Expect(0, 837, '\p{Is_OAlpha= false}', 'deprecated');
Expect(1, 837, '\p{^Is_OAlpha= false}', 'deprecated');
Expect(1, 837, '\P{Is_OAlpha= false}', 'deprecated');
Expect(0, 837, '\P{^Is_OAlpha= false}', 'deprecated');
Error('\p{NFKD_Quick_Check=-_YES:=}');
Error('\P{NFKD_Quick_Check=-_YES:=}');
Expect(1, 159, '\p{NFKD_Quick_Check=yes}', "");
Expect(0, 159, '\p{^NFKD_Quick_Check=yes}', "");
Expect(0, 159, '\P{NFKD_Quick_Check=yes}', "");
Expect(1, 159, '\P{^NFKD_Quick_Check=yes}', "");
Expect(0, 160, '\p{NFKD_Quick_Check=yes}', "");
Expect(1, 160, '\p{^NFKD_Quick_Check=yes}', "");
Expect(1, 160, '\P{NFKD_Quick_Check=yes}', "");
Expect(0, 160, '\P{^NFKD_Quick_Check=yes}', "");
Expect(1, 159, '\p{NFKD_Quick_Check:   --yes}', "");
Expect(0, 159, '\p{^NFKD_Quick_Check:   --yes}', "");
Expect(0, 159, '\P{NFKD_Quick_Check:   --yes}', "");
Expect(1, 159, '\P{^NFKD_Quick_Check:   --yes}', "");
Expect(0, 160, '\p{NFKD_Quick_Check:   --yes}', "");
Expect(1, 160, '\p{^NFKD_Quick_Check:   --yes}', "");
Expect(1, 160, '\P{NFKD_Quick_Check:   --yes}', "");
Expect(0, 160, '\P{^NFKD_Quick_Check:   --yes}', "");
Error('\p{NFKD_QC=_Y:=}');
Error('\P{NFKD_QC=_Y:=}');
Expect(1, 159, '\p{NFKD_QC=y}', "");
Expect(0, 159, '\p{^NFKD_QC=y}', "");
Expect(0, 159, '\P{NFKD_QC=y}', "");
Expect(1, 159, '\P{^NFKD_QC=y}', "");
Expect(0, 160, '\p{NFKD_QC=y}', "");
Expect(1, 160, '\p{^NFKD_QC=y}', "");
Expect(1, 160, '\P{NFKD_QC=y}', "");
Expect(0, 160, '\P{^NFKD_QC=y}', "");
Expect(1, 159, '\p{NFKD_QC: 	y}', "");
Expect(0, 159, '\p{^NFKD_QC: 	y}', "");
Expect(0, 159, '\P{NFKD_QC: 	y}', "");
Expect(1, 159, '\P{^NFKD_QC: 	y}', "");
Expect(0, 160, '\p{NFKD_QC: 	y}', "");
Expect(1, 160, '\p{^NFKD_QC: 	y}', "");
Expect(1, 160, '\P{NFKD_QC: 	y}', "");
Expect(0, 160, '\P{^NFKD_QC: 	y}', "");
Error('\p{Is_NFKD_Quick_Check=- yes/a/}');
Error('\P{Is_NFKD_Quick_Check=- yes/a/}');
Expect(1, 159, '\p{Is_NFKD_Quick_Check=yes}', "");
Expect(0, 159, '\p{^Is_NFKD_Quick_Check=yes}', "");
Expect(0, 159, '\P{Is_NFKD_Quick_Check=yes}', "");
Expect(1, 159, '\P{^Is_NFKD_Quick_Check=yes}', "");
Expect(0, 160, '\p{Is_NFKD_Quick_Check=yes}', "");
Expect(1, 160, '\p{^Is_NFKD_Quick_Check=yes}', "");
Expect(1, 160, '\P{Is_NFKD_Quick_Check=yes}', "");
Expect(0, 160, '\P{^Is_NFKD_Quick_Check=yes}', "");
Expect(1, 159, '\p{Is_NFKD_Quick_Check:	Yes}', "");
Expect(0, 159, '\p{^Is_NFKD_Quick_Check:	Yes}', "");
Expect(0, 159, '\P{Is_NFKD_Quick_Check:	Yes}', "");
Expect(1, 159, '\P{^Is_NFKD_Quick_Check:	Yes}', "");
Expect(0, 160, '\p{Is_NFKD_Quick_Check:	Yes}', "");
Expect(1, 160, '\p{^Is_NFKD_Quick_Check:	Yes}', "");
Expect(1, 160, '\P{Is_NFKD_Quick_Check:	Yes}', "");
Expect(0, 160, '\P{^Is_NFKD_Quick_Check:	Yes}', "");
Error('\p{Is_NFKD_QC=- Y:=}');
Error('\P{Is_NFKD_QC=- Y:=}');
Expect(1, 159, '\p{Is_NFKD_QC:	y}', "");
Expect(0, 159, '\p{^Is_NFKD_QC:	y}', "");
Expect(0, 159, '\P{Is_NFKD_QC:	y}', "");
Expect(1, 159, '\P{^Is_NFKD_QC:	y}', "");
Expect(0, 160, '\p{Is_NFKD_QC:	y}', "");
Expect(1, 160, '\p{^Is_NFKD_QC:	y}', "");
Expect(1, 160, '\P{Is_NFKD_QC:	y}', "");
Expect(0, 160, '\P{^Is_NFKD_QC:	y}', "");
Expect(1, 159, '\p{Is_NFKD_QC= Y}', "");
Expect(0, 159, '\p{^Is_NFKD_QC= Y}', "");
Expect(0, 159, '\P{Is_NFKD_QC= Y}', "");
Expect(1, 159, '\P{^Is_NFKD_QC= Y}', "");
Expect(0, 160, '\p{Is_NFKD_QC= Y}', "");
Expect(1, 160, '\p{^Is_NFKD_QC= Y}', "");
Expect(1, 160, '\P{Is_NFKD_QC= Y}', "");
Expect(0, 160, '\P{^Is_NFKD_QC= Y}', "");
Error('\p{NFKD_Quick_Check=/a/__NO}');
Error('\P{NFKD_Quick_Check=/a/__NO}');
Expect(1, 160, '\p{NFKD_Quick_Check=no}', "");
Expect(0, 160, '\p{^NFKD_Quick_Check=no}', "");
Expect(0, 160, '\P{NFKD_Quick_Check=no}', "");
Expect(1, 160, '\P{^NFKD_Quick_Check=no}', "");
Expect(0, 159, '\p{NFKD_Quick_Check=no}', "");
Expect(1, 159, '\p{^NFKD_Quick_Check=no}', "");
Expect(1, 159, '\P{NFKD_Quick_Check=no}', "");
Expect(0, 159, '\P{^NFKD_Quick_Check=no}', "");
Expect(1, 160, '\p{NFKD_Quick_Check:_No}', "");
Expect(0, 160, '\p{^NFKD_Quick_Check:_No}', "");
Expect(0, 160, '\P{NFKD_Quick_Check:_No}', "");
Expect(1, 160, '\P{^NFKD_Quick_Check:_No}', "");
Expect(0, 159, '\p{NFKD_Quick_Check:_No}', "");
Expect(1, 159, '\p{^NFKD_Quick_Check:_No}', "");
Expect(1, 159, '\P{NFKD_Quick_Check:_No}', "");
Expect(0, 159, '\P{^NFKD_Quick_Check:_No}', "");
Error('\p{NFKD_QC:    /a/N}');
Error('\P{NFKD_QC:    /a/N}');
Expect(1, 160, '\p{NFKD_QC=n}', "");
Expect(0, 160, '\p{^NFKD_QC=n}', "");
Expect(0, 160, '\P{NFKD_QC=n}', "");
Expect(1, 160, '\P{^NFKD_QC=n}', "");
Expect(0, 159, '\p{NFKD_QC=n}', "");
Expect(1, 159, '\p{^NFKD_QC=n}', "");
Expect(1, 159, '\P{NFKD_QC=n}', "");
Expect(0, 159, '\P{^NFKD_QC=n}', "");
Expect(1, 160, '\p{NFKD_QC=	-N}', "");
Expect(0, 160, '\p{^NFKD_QC=	-N}', "");
Expect(0, 160, '\P{NFKD_QC=	-N}', "");
Expect(1, 160, '\P{^NFKD_QC=	-N}', "");
Expect(0, 159, '\p{NFKD_QC=	-N}', "");
Expect(1, 159, '\p{^NFKD_QC=	-N}', "");
Expect(1, 159, '\P{NFKD_QC=	-N}', "");
Expect(0, 159, '\P{^NFKD_QC=	-N}', "");
Error('\p{Is_NFKD_Quick_Check:/a/_-no}');
Error('\P{Is_NFKD_Quick_Check:/a/_-no}');
Expect(1, 160, '\p{Is_NFKD_Quick_Check=no}', "");
Expect(0, 160, '\p{^Is_NFKD_Quick_Check=no}', "");
Expect(0, 160, '\P{Is_NFKD_Quick_Check=no}', "");
Expect(1, 160, '\P{^Is_NFKD_Quick_Check=no}', "");
Expect(0, 159, '\p{Is_NFKD_Quick_Check=no}', "");
Expect(1, 159, '\p{^Is_NFKD_Quick_Check=no}', "");
Expect(1, 159, '\P{Is_NFKD_Quick_Check=no}', "");
Expect(0, 159, '\P{^Is_NFKD_Quick_Check=no}', "");
Expect(1, 160, '\p{Is_NFKD_Quick_Check=__No}', "");
Expect(0, 160, '\p{^Is_NFKD_Quick_Check=__No}', "");
Expect(0, 160, '\P{Is_NFKD_Quick_Check=__No}', "");
Expect(1, 160, '\P{^Is_NFKD_Quick_Check=__No}', "");
Expect(0, 159, '\p{Is_NFKD_Quick_Check=__No}', "");
Expect(1, 159, '\p{^Is_NFKD_Quick_Check=__No}', "");
Expect(1, 159, '\P{Is_NFKD_Quick_Check=__No}', "");
Expect(0, 159, '\P{^Is_NFKD_Quick_Check=__No}', "");
Error('\p{Is_NFKD_QC=-:=N}');
Error('\P{Is_NFKD_QC=-:=N}');
Expect(1, 160, '\p{Is_NFKD_QC:n}', "");
Expect(0, 160, '\p{^Is_NFKD_QC:n}', "");
Expect(0, 160, '\P{Is_NFKD_QC:n}', "");
Expect(1, 160, '\P{^Is_NFKD_QC:n}', "");
Expect(0, 159, '\p{Is_NFKD_QC:n}', "");
Expect(1, 159, '\p{^Is_NFKD_QC:n}', "");
Expect(1, 159, '\P{Is_NFKD_QC:n}', "");
Expect(0, 159, '\P{^Is_NFKD_QC:n}', "");
Expect(1, 160, '\p{Is_NFKD_QC= N}', "");
Expect(0, 160, '\p{^Is_NFKD_QC= N}', "");
Expect(0, 160, '\P{Is_NFKD_QC= N}', "");
Expect(1, 160, '\P{^Is_NFKD_QC= N}', "");
Expect(0, 159, '\p{Is_NFKD_QC= N}', "");
Expect(1, 159, '\p{^Is_NFKD_QC= N}', "");
Expect(1, 159, '\P{Is_NFKD_QC= N}', "");
Expect(0, 159, '\P{^Is_NFKD_QC= N}', "");
Error('\p{Math=_ Yes:=}');
Error('\P{Math=_ Yes:=}');
Expect(1, 43, '\p{Math=yes}', "");
Expect(0, 43, '\p{^Math=yes}', "");
Expect(0, 43, '\P{Math=yes}', "");
Expect(1, 43, '\P{^Math=yes}', "");
Expect(0, 42, '\p{Math=yes}', "");
Expect(1, 42, '\p{^Math=yes}', "");
Expect(1, 42, '\P{Math=yes}', "");
Expect(0, 42, '\P{^Math=yes}', "");
Expect(1, 43, '\p{Math:  Yes}', "");
Expect(0, 43, '\p{^Math:  Yes}', "");
Expect(0, 43, '\P{Math:  Yes}', "");
Expect(1, 43, '\P{^Math:  Yes}', "");
Expect(0, 42, '\p{Math:  Yes}', "");
Expect(1, 42, '\p{^Math:  Yes}', "");
Expect(1, 42, '\P{Math:  Yes}', "");
Expect(0, 42, '\P{^Math:  Yes}', "");
Error('\p{Is_Math=-	Y/a/}');
Error('\P{Is_Math=-	Y/a/}');
Expect(1, 43, '\p{Is_Math=y}', "");
Expect(0, 43, '\p{^Is_Math=y}', "");
Expect(0, 43, '\P{Is_Math=y}', "");
Expect(1, 43, '\P{^Is_Math=y}', "");
Expect(0, 42, '\p{Is_Math=y}', "");
Expect(1, 42, '\p{^Is_Math=y}', "");
Expect(1, 42, '\P{Is_Math=y}', "");
Expect(0, 42, '\P{^Is_Math=y}', "");
Expect(1, 43, '\p{Is_Math= Y}', "");
Expect(0, 43, '\p{^Is_Math= Y}', "");
Expect(0, 43, '\P{Is_Math= Y}', "");
Expect(1, 43, '\P{^Is_Math= Y}', "");
Expect(0, 42, '\p{Is_Math= Y}', "");
Expect(1, 42, '\p{^Is_Math= Y}', "");
Expect(1, 42, '\P{Is_Math= Y}', "");
Expect(0, 42, '\P{^Is_Math= Y}', "");
Error('\p{Math= :=T}');
Error('\P{Math= :=T}');
Expect(1, 43, '\p{Math=t}', "");
Expect(0, 43, '\p{^Math=t}', "");
Expect(0, 43, '\P{Math=t}', "");
Expect(1, 43, '\P{^Math=t}', "");
Expect(0, 42, '\p{Math=t}', "");
Expect(1, 42, '\p{^Math=t}', "");
Expect(1, 42, '\P{Math=t}', "");
Expect(0, 42, '\P{^Math=t}', "");
Expect(1, 43, '\p{Math=- T}', "");
Expect(0, 43, '\p{^Math=- T}', "");
Expect(0, 43, '\P{Math=- T}', "");
Expect(1, 43, '\P{^Math=- T}', "");
Expect(0, 42, '\p{Math=- T}', "");
Expect(1, 42, '\p{^Math=- T}', "");
Expect(1, 42, '\P{Math=- T}', "");
Expect(0, 42, '\P{^Math=- T}', "");
Error('\p{Is_Math=:=TRUE}');
Error('\P{Is_Math=:=TRUE}');
Expect(1, 43, '\p{Is_Math=true}', "");
Expect(0, 43, '\p{^Is_Math=true}', "");
Expect(0, 43, '\P{Is_Math=true}', "");
Expect(1, 43, '\P{^Is_Math=true}', "");
Expect(0, 42, '\p{Is_Math=true}', "");
Expect(1, 42, '\p{^Is_Math=true}', "");
Expect(1, 42, '\P{Is_Math=true}', "");
Expect(0, 42, '\P{^Is_Math=true}', "");
Expect(1, 43, '\p{Is_Math=- true}', "");
Expect(0, 43, '\p{^Is_Math=- true}', "");
Expect(0, 43, '\P{Is_Math=- true}', "");
Expect(1, 43, '\P{^Is_Math=- true}', "");
Expect(0, 42, '\p{Is_Math=- true}', "");
Expect(1, 42, '\p{^Is_Math=- true}', "");
Expect(1, 42, '\P{Is_Math=- true}', "");
Expect(0, 42, '\P{^Is_Math=- true}', "");
Error('\p{Math=/a/no}');
Error('\P{Math=/a/no}');
Expect(1, 42, '\p{Math=no}', "");
Expect(0, 42, '\p{^Math=no}', "");
Expect(0, 42, '\P{Math=no}', "");
Expect(1, 42, '\P{^Math=no}', "");
Expect(0, 43, '\p{Math=no}', "");
Expect(1, 43, '\p{^Math=no}', "");
Expect(1, 43, '\P{Math=no}', "");
Expect(0, 43, '\P{^Math=no}', "");
Expect(1, 42, '\p{Math= _no}', "");
Expect(0, 42, '\p{^Math= _no}', "");
Expect(0, 42, '\P{Math= _no}', "");
Expect(1, 42, '\P{^Math= _no}', "");
Expect(0, 43, '\p{Math= _no}', "");
Expect(1, 43, '\p{^Math= _no}', "");
Expect(1, 43, '\P{Math= _no}', "");
Expect(0, 43, '\P{^Math= _no}', "");
Error('\p{Is_Math=/a/__N}');
Error('\P{Is_Math=/a/__N}');
Expect(1, 42, '\p{Is_Math:n}', "");
Expect(0, 42, '\p{^Is_Math:n}', "");
Expect(0, 42, '\P{Is_Math:n}', "");
Expect(1, 42, '\P{^Is_Math:n}', "");
Expect(0, 43, '\p{Is_Math:n}', "");
Expect(1, 43, '\p{^Is_Math:n}', "");
Expect(1, 43, '\P{Is_Math:n}', "");
Expect(0, 43, '\P{^Is_Math:n}', "");
Expect(1, 42, '\p{Is_Math=_-N}', "");
Expect(0, 42, '\p{^Is_Math=_-N}', "");
Expect(0, 42, '\P{Is_Math=_-N}', "");
Expect(1, 42, '\P{^Is_Math=_-N}', "");
Expect(0, 43, '\p{Is_Math=_-N}', "");
Expect(1, 43, '\p{^Is_Math=_-N}', "");
Expect(1, 43, '\P{Is_Math=_-N}', "");
Expect(0, 43, '\P{^Is_Math=_-N}', "");
Error('\p{Math=:= _f}');
Error('\P{Math=:= _f}');
Expect(1, 42, '\p{Math=f}', "");
Expect(0, 42, '\p{^Math=f}', "");
Expect(0, 42, '\P{Math=f}', "");
Expect(1, 42, '\P{^Math=f}', "");
Expect(0, 43, '\p{Math=f}', "");
Expect(1, 43, '\p{^Math=f}', "");
Expect(1, 43, '\P{Math=f}', "");
Expect(0, 43, '\P{^Math=f}', "");
Expect(1, 42, '\p{Math=_F}', "");
Expect(0, 42, '\p{^Math=_F}', "");
Expect(0, 42, '\P{Math=_F}', "");
Expect(1, 42, '\P{^Math=_F}', "");
Expect(0, 43, '\p{Math=_F}', "");
Expect(1, 43, '\p{^Math=_F}', "");
Expect(1, 43, '\P{Math=_F}', "");
Expect(0, 43, '\P{^Math=_F}', "");
Error('\p{Is_Math=-/a/False}');
Error('\P{Is_Math=-/a/False}');
Expect(1, 42, '\p{Is_Math=false}', "");
Expect(0, 42, '\p{^Is_Math=false}', "");
Expect(0, 42, '\P{Is_Math=false}', "");
Expect(1, 42, '\P{^Is_Math=false}', "");
Expect(0, 43, '\p{Is_Math=false}', "");
Expect(1, 43, '\p{^Is_Math=false}', "");
Expect(1, 43, '\P{Is_Math=false}', "");
Expect(0, 43, '\P{^Is_Math=false}', "");
Expect(1, 42, '\p{Is_Math=_FALSE}', "");
Expect(0, 42, '\p{^Is_Math=_FALSE}', "");
Expect(0, 42, '\P{Is_Math=_FALSE}', "");
Expect(1, 42, '\P{^Is_Math=_FALSE}', "");
Expect(0, 43, '\p{Is_Math=_FALSE}', "");
Expect(1, 43, '\p{^Is_Math=_FALSE}', "");
Expect(1, 43, '\P{Is_Math=_FALSE}', "");
Expect(0, 43, '\P{^Is_Math=_FALSE}', "");
Error('\p{Other_Uppercase=_YES/a/}');
Error('\P{Other_Uppercase=_YES/a/}');
Expect(1, 8559, '\p{Other_Uppercase=yes}', 'deprecated');
Expect(0, 8559, '\p{^Other_Uppercase=yes}', 'deprecated');
Expect(0, 8559, '\P{Other_Uppercase=yes}', 'deprecated');
Expect(1, 8559, '\P{^Other_Uppercase=yes}', 'deprecated');
Expect(0, 8543, '\p{Other_Uppercase=yes}', 'deprecated');
Expect(1, 8543, '\p{^Other_Uppercase=yes}', 'deprecated');
Expect(1, 8543, '\P{Other_Uppercase=yes}', 'deprecated');
Expect(0, 8543, '\P{^Other_Uppercase=yes}', 'deprecated');
Expect(1, 8559, '\p{Other_Uppercase: _ Yes}', 'deprecated');
Expect(0, 8559, '\p{^Other_Uppercase: _ Yes}', 'deprecated');
Expect(0, 8559, '\P{Other_Uppercase: _ Yes}', 'deprecated');
Expect(1, 8559, '\P{^Other_Uppercase: _ Yes}', 'deprecated');
Expect(0, 8543, '\p{Other_Uppercase: _ Yes}', 'deprecated');
Expect(1, 8543, '\p{^Other_Uppercase: _ Yes}', 'deprecated');
Expect(1, 8543, '\P{Other_Uppercase: _ Yes}', 'deprecated');
Expect(0, 8543, '\P{^Other_Uppercase: _ Yes}', 'deprecated');
Error('\p{OUpper=/a/_Y}');
Error('\P{OUpper=/a/_Y}');
Expect(1, 8559, '\p{OUpper:y}', 'deprecated');
Expect(0, 8559, '\p{^OUpper:y}', 'deprecated');
Expect(0, 8559, '\P{OUpper:y}', 'deprecated');
Expect(1, 8559, '\P{^OUpper:y}', 'deprecated');
Expect(0, 8543, '\p{OUpper:y}', 'deprecated');
Expect(1, 8543, '\p{^OUpper:y}', 'deprecated');
Expect(1, 8543, '\P{OUpper:y}', 'deprecated');
Expect(0, 8543, '\P{^OUpper:y}', 'deprecated');
Expect(1, 8559, '\p{OUpper=-	y}', 'deprecated');
Expect(0, 8559, '\p{^OUpper=-	y}', 'deprecated');
Expect(0, 8559, '\P{OUpper=-	y}', 'deprecated');
Expect(1, 8559, '\P{^OUpper=-	y}', 'deprecated');
Expect(0, 8543, '\p{OUpper=-	y}', 'deprecated');
Expect(1, 8543, '\p{^OUpper=-	y}', 'deprecated');
Expect(1, 8543, '\P{OUpper=-	y}', 'deprecated');
Expect(0, 8543, '\P{^OUpper=-	y}', 'deprecated');
Error('\p{Is_Other_Uppercase=:=- T}');
Error('\P{Is_Other_Uppercase=:=- T}');
Expect(1, 8559, '\p{Is_Other_Uppercase=t}', 'deprecated');
Expect(0, 8559, '\p{^Is_Other_Uppercase=t}', 'deprecated');
Expect(0, 8559, '\P{Is_Other_Uppercase=t}', 'deprecated');
Expect(1, 8559, '\P{^Is_Other_Uppercase=t}', 'deprecated');
Expect(0, 8543, '\p{Is_Other_Uppercase=t}', 'deprecated');
Expect(1, 8543, '\p{^Is_Other_Uppercase=t}', 'deprecated');
Expect(1, 8543, '\P{Is_Other_Uppercase=t}', 'deprecated');
Expect(0, 8543, '\P{^Is_Other_Uppercase=t}', 'deprecated');
Expect(1, 8559, '\p{Is_Other_Uppercase=__T}', 'deprecated');
Expect(0, 8559, '\p{^Is_Other_Uppercase=__T}', 'deprecated');
Expect(0, 8559, '\P{Is_Other_Uppercase=__T}', 'deprecated');
Expect(1, 8559, '\P{^Is_Other_Uppercase=__T}', 'deprecated');
Expect(0, 8543, '\p{Is_Other_Uppercase=__T}', 'deprecated');
Expect(1, 8543, '\p{^Is_Other_Uppercase=__T}', 'deprecated');
Expect(1, 8543, '\P{Is_Other_Uppercase=__T}', 'deprecated');
Expect(0, 8543, '\P{^Is_Other_Uppercase=__T}', 'deprecated');
Error('\p{Is_OUpper=:=	_true}');
Error('\P{Is_OUpper=:=	_true}');
Expect(1, 8559, '\p{Is_OUpper=true}', 'deprecated');
Expect(0, 8559, '\p{^Is_OUpper=true}', 'deprecated');
Expect(0, 8559, '\P{Is_OUpper=true}', 'deprecated');
Expect(1, 8559, '\P{^Is_OUpper=true}', 'deprecated');
Expect(0, 8543, '\p{Is_OUpper=true}', 'deprecated');
Expect(1, 8543, '\p{^Is_OUpper=true}', 'deprecated');
Expect(1, 8543, '\P{Is_OUpper=true}', 'deprecated');
Expect(0, 8543, '\P{^Is_OUpper=true}', 'deprecated');
Expect(1, 8559, '\p{Is_OUpper=-True}', 'deprecated');
Expect(0, 8559, '\p{^Is_OUpper=-True}', 'deprecated');
Expect(0, 8559, '\P{Is_OUpper=-True}', 'deprecated');
Expect(1, 8559, '\P{^Is_OUpper=-True}', 'deprecated');
Expect(0, 8543, '\p{Is_OUpper=-True}', 'deprecated');
Expect(1, 8543, '\p{^Is_OUpper=-True}', 'deprecated');
Expect(1, 8543, '\P{Is_OUpper=-True}', 'deprecated');
Expect(0, 8543, '\P{^Is_OUpper=-True}', 'deprecated');
Error('\p{Other_Uppercase=-:=No}');
Error('\P{Other_Uppercase=-:=No}');
Expect(1, 8543, '\p{Other_Uppercase=no}', 'deprecated');
Expect(0, 8543, '\p{^Other_Uppercase=no}', 'deprecated');
Expect(0, 8543, '\P{Other_Uppercase=no}', 'deprecated');
Expect(1, 8543, '\P{^Other_Uppercase=no}', 'deprecated');
Expect(0, 8559, '\p{Other_Uppercase=no}', 'deprecated');
Expect(1, 8559, '\p{^Other_Uppercase=no}', 'deprecated');
Expect(1, 8559, '\P{Other_Uppercase=no}', 'deprecated');
Expect(0, 8559, '\P{^Other_Uppercase=no}', 'deprecated');
Expect(1, 8543, '\p{Other_Uppercase= no}', 'deprecated');
Expect(0, 8543, '\p{^Other_Uppercase= no}', 'deprecated');
Expect(0, 8543, '\P{Other_Uppercase= no}', 'deprecated');
Expect(1, 8543, '\P{^Other_Uppercase= no}', 'deprecated');
Expect(0, 8559, '\p{Other_Uppercase= no}', 'deprecated');
Expect(1, 8559, '\p{^Other_Uppercase= no}', 'deprecated');
Expect(1, 8559, '\P{Other_Uppercase= no}', 'deprecated');
Expect(0, 8559, '\P{^Other_Uppercase= no}', 'deprecated');
Error('\p{OUpper=_	N/a/}');
Error('\P{OUpper=_	N/a/}');
Expect(1, 8543, '\p{OUpper:	n}', 'deprecated');
Expect(0, 8543, '\p{^OUpper:	n}', 'deprecated');
Expect(0, 8543, '\P{OUpper:	n}', 'deprecated');
Expect(1, 8543, '\P{^OUpper:	n}', 'deprecated');
Expect(0, 8559, '\p{OUpper:	n}', 'deprecated');
Expect(1, 8559, '\p{^OUpper:	n}', 'deprecated');
Expect(1, 8559, '\P{OUpper:	n}', 'deprecated');
Expect(0, 8559, '\P{^OUpper:	n}', 'deprecated');
Expect(1, 8543, '\p{OUpper=-n}', 'deprecated');
Expect(0, 8543, '\p{^OUpper=-n}', 'deprecated');
Expect(0, 8543, '\P{OUpper=-n}', 'deprecated');
Expect(1, 8543, '\P{^OUpper=-n}', 'deprecated');
Expect(0, 8559, '\p{OUpper=-n}', 'deprecated');
Expect(1, 8559, '\p{^OUpper=-n}', 'deprecated');
Expect(1, 8559, '\P{OUpper=-n}', 'deprecated');
Expect(0, 8559, '\P{^OUpper=-n}', 'deprecated');
Error('\p{Is_Other_Uppercase=-F/a/}');
Error('\P{Is_Other_Uppercase=-F/a/}');
Expect(1, 8543, '\p{Is_Other_Uppercase=f}', 'deprecated');
Expect(0, 8543, '\p{^Is_Other_Uppercase=f}', 'deprecated');
Expect(0, 8543, '\P{Is_Other_Uppercase=f}', 'deprecated');
Expect(1, 8543, '\P{^Is_Other_Uppercase=f}', 'deprecated');
Expect(0, 8559, '\p{Is_Other_Uppercase=f}', 'deprecated');
Expect(1, 8559, '\p{^Is_Other_Uppercase=f}', 'deprecated');
Expect(1, 8559, '\P{Is_Other_Uppercase=f}', 'deprecated');
Expect(0, 8559, '\P{^Is_Other_Uppercase=f}', 'deprecated');
Expect(1, 8543, '\p{Is_Other_Uppercase=F}', 'deprecated');
Expect(0, 8543, '\p{^Is_Other_Uppercase=F}', 'deprecated');
Expect(0, 8543, '\P{Is_Other_Uppercase=F}', 'deprecated');
Expect(1, 8543, '\P{^Is_Other_Uppercase=F}', 'deprecated');
Expect(0, 8559, '\p{Is_Other_Uppercase=F}', 'deprecated');
Expect(1, 8559, '\p{^Is_Other_Uppercase=F}', 'deprecated');
Expect(1, 8559, '\P{Is_Other_Uppercase=F}', 'deprecated');
Expect(0, 8559, '\P{^Is_Other_Uppercase=F}', 'deprecated');
Error('\p{Is_OUpper:		/a/False}');
Error('\P{Is_OUpper:		/a/False}');
Expect(1, 8543, '\p{Is_OUpper=false}', 'deprecated');
Expect(0, 8543, '\p{^Is_OUpper=false}', 'deprecated');
Expect(0, 8543, '\P{Is_OUpper=false}', 'deprecated');
Expect(1, 8543, '\P{^Is_OUpper=false}', 'deprecated');
Expect(0, 8559, '\p{Is_OUpper=false}', 'deprecated');
Expect(1, 8559, '\p{^Is_OUpper=false}', 'deprecated');
Expect(1, 8559, '\P{Is_OUpper=false}', 'deprecated');
Expect(0, 8559, '\P{^Is_OUpper=false}', 'deprecated');
Expect(1, 8543, '\p{Is_OUpper=  FALSE}', 'deprecated');
Expect(0, 8543, '\p{^Is_OUpper=  FALSE}', 'deprecated');
Expect(0, 8543, '\P{Is_OUpper=  FALSE}', 'deprecated');
Expect(1, 8543, '\P{^Is_OUpper=  FALSE}', 'deprecated');
Expect(0, 8559, '\p{Is_OUpper=  FALSE}', 'deprecated');
Expect(1, 8559, '\p{^Is_OUpper=  FALSE}', 'deprecated');
Expect(1, 8559, '\P{Is_OUpper=  FALSE}', 'deprecated');
Expect(0, 8559, '\P{^Is_OUpper=  FALSE}', 'deprecated');
Error('\p{Changes_When_Casemapped=/a/-Yes}');
Error('\P{Changes_When_Casemapped=/a/-Yes}');
Expect(1, 90, '\p{Changes_When_Casemapped=yes}', "");
Expect(0, 90, '\p{^Changes_When_Casemapped=yes}', "");
Expect(0, 90, '\P{Changes_When_Casemapped=yes}', "");
Expect(1, 90, '\P{^Changes_When_Casemapped=yes}', "");
Expect(0, 64, '\p{Changes_When_Casemapped=yes}', "");
Expect(1, 64, '\p{^Changes_When_Casemapped=yes}', "");
Expect(1, 64, '\P{Changes_When_Casemapped=yes}', "");
Expect(0, 64, '\P{^Changes_When_Casemapped=yes}', "");
Expect(1, 90, '\p{Changes_When_Casemapped: _ YES}', "");
Expect(0, 90, '\p{^Changes_When_Casemapped: _ YES}', "");
Expect(0, 90, '\P{Changes_When_Casemapped: _ YES}', "");
Expect(1, 90, '\P{^Changes_When_Casemapped: _ YES}', "");
Expect(0, 64, '\p{Changes_When_Casemapped: _ YES}', "");
Expect(1, 64, '\p{^Changes_When_Casemapped: _ YES}', "");
Expect(1, 64, '\P{Changes_When_Casemapped: _ YES}', "");
Expect(0, 64, '\P{^Changes_When_Casemapped: _ YES}', "");
Error('\p{CWCM=:=	Y}');
Error('\P{CWCM=:=	Y}');
Expect(1, 90, '\p{CWCM=y}', "");
Expect(0, 90, '\p{^CWCM=y}', "");
Expect(0, 90, '\P{CWCM=y}', "");
Expect(1, 90, '\P{^CWCM=y}', "");
Expect(0, 64, '\p{CWCM=y}', "");
Expect(1, 64, '\p{^CWCM=y}', "");
Expect(1, 64, '\P{CWCM=y}', "");
Expect(0, 64, '\P{^CWCM=y}', "");
Expect(1, 90, '\p{CWCM=_Y}', "");
Expect(0, 90, '\p{^CWCM=_Y}', "");
Expect(0, 90, '\P{CWCM=_Y}', "");
Expect(1, 90, '\P{^CWCM=_Y}', "");
Expect(0, 64, '\p{CWCM=_Y}', "");
Expect(1, 64, '\p{^CWCM=_Y}', "");
Expect(1, 64, '\P{CWCM=_Y}', "");
Expect(0, 64, '\P{^CWCM=_Y}', "");
Error('\p{Is_Changes_When_Casemapped= /a/T}');
Error('\P{Is_Changes_When_Casemapped= /a/T}');
Expect(1, 90, '\p{Is_Changes_When_Casemapped=t}', "");
Expect(0, 90, '\p{^Is_Changes_When_Casemapped=t}', "");
Expect(0, 90, '\P{Is_Changes_When_Casemapped=t}', "");
Expect(1, 90, '\P{^Is_Changes_When_Casemapped=t}', "");
Expect(0, 64, '\p{Is_Changes_When_Casemapped=t}', "");
Expect(1, 64, '\p{^Is_Changes_When_Casemapped=t}', "");
Expect(1, 64, '\P{Is_Changes_When_Casemapped=t}', "");
Expect(0, 64, '\P{^Is_Changes_When_Casemapped=t}', "");
Expect(1, 90, '\p{Is_Changes_When_Casemapped=__T}', "");
Expect(0, 90, '\p{^Is_Changes_When_Casemapped=__T}', "");
Expect(0, 90, '\P{Is_Changes_When_Casemapped=__T}', "");
Expect(1, 90, '\P{^Is_Changes_When_Casemapped=__T}', "");
Expect(0, 64, '\p{Is_Changes_When_Casemapped=__T}', "");
Expect(1, 64, '\p{^Is_Changes_When_Casemapped=__T}', "");
Expect(1, 64, '\P{Is_Changes_When_Casemapped=__T}', "");
Expect(0, 64, '\P{^Is_Changes_When_Casemapped=__T}', "");
Error('\p{Is_CWCM=-_True:=}');
Error('\P{Is_CWCM=-_True:=}');
Expect(1, 90, '\p{Is_CWCM=true}', "");
Expect(0, 90, '\p{^Is_CWCM=true}', "");
Expect(0, 90, '\P{Is_CWCM=true}', "");
Expect(1, 90, '\P{^Is_CWCM=true}', "");
Expect(0, 64, '\p{Is_CWCM=true}', "");
Expect(1, 64, '\p{^Is_CWCM=true}', "");
Expect(1, 64, '\P{Is_CWCM=true}', "");
Expect(0, 64, '\P{^Is_CWCM=true}', "");
Expect(1, 90, '\p{Is_CWCM= 	True}', "");
Expect(0, 90, '\p{^Is_CWCM= 	True}', "");
Expect(0, 90, '\P{Is_CWCM= 	True}', "");
Expect(1, 90, '\P{^Is_CWCM= 	True}', "");
Expect(0, 64, '\p{Is_CWCM= 	True}', "");
Expect(1, 64, '\p{^Is_CWCM= 	True}', "");
Expect(1, 64, '\P{Is_CWCM= 	True}', "");
Expect(0, 64, '\P{^Is_CWCM= 	True}', "");
Error('\p{Changes_When_Casemapped=	no:=}');
Error('\P{Changes_When_Casemapped=	no:=}');
Expect(1, 64, '\p{Changes_When_Casemapped: no}', "");
Expect(0, 64, '\p{^Changes_When_Casemapped: no}', "");
Expect(0, 64, '\P{Changes_When_Casemapped: no}', "");
Expect(1, 64, '\P{^Changes_When_Casemapped: no}', "");
Expect(0, 90, '\p{Changes_When_Casemapped: no}', "");
Expect(1, 90, '\p{^Changes_When_Casemapped: no}', "");
Expect(1, 90, '\P{Changes_When_Casemapped: no}', "");
Expect(0, 90, '\P{^Changes_When_Casemapped: no}', "");
Expect(1, 64, '\p{Changes_When_Casemapped=	NO}', "");
Expect(0, 64, '\p{^Changes_When_Casemapped=	NO}', "");
Expect(0, 64, '\P{Changes_When_Casemapped=	NO}', "");
Expect(1, 64, '\P{^Changes_When_Casemapped=	NO}', "");
Expect(0, 90, '\p{Changes_When_Casemapped=	NO}', "");
Expect(1, 90, '\p{^Changes_When_Casemapped=	NO}', "");
Expect(1, 90, '\P{Changes_When_Casemapped=	NO}', "");
Expect(0, 90, '\P{^Changes_When_Casemapped=	NO}', "");
Error('\p{CWCM=__n/a/}');
Error('\P{CWCM=__n/a/}');
Expect(1, 64, '\p{CWCM=n}', "");
Expect(0, 64, '\p{^CWCM=n}', "");
Expect(0, 64, '\P{CWCM=n}', "");
Expect(1, 64, '\P{^CWCM=n}', "");
Expect(0, 90, '\p{CWCM=n}', "");
Expect(1, 90, '\p{^CWCM=n}', "");
Expect(1, 90, '\P{CWCM=n}', "");
Expect(0, 90, '\P{^CWCM=n}', "");
Expect(1, 64, '\p{CWCM=		N}', "");
Expect(0, 64, '\p{^CWCM=		N}', "");
Expect(0, 64, '\P{CWCM=		N}', "");
Expect(1, 64, '\P{^CWCM=		N}', "");
Expect(0, 90, '\p{CWCM=		N}', "");
Expect(1, 90, '\p{^CWCM=		N}', "");
Expect(1, 90, '\P{CWCM=		N}', "");
Expect(0, 90, '\P{^CWCM=		N}', "");
Error('\p{Is_Changes_When_Casemapped: -/a/F}');
Error('\P{Is_Changes_When_Casemapped: -/a/F}');
Expect(1, 64, '\p{Is_Changes_When_Casemapped=f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Casemapped=f}', "");
Expect(0, 64, '\P{Is_Changes_When_Casemapped=f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Casemapped=f}', "");
Expect(0, 90, '\p{Is_Changes_When_Casemapped=f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Casemapped=f}', "");
Expect(1, 90, '\P{Is_Changes_When_Casemapped=f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Casemapped=f}', "");
Expect(1, 64, '\p{Is_Changes_When_Casemapped= -f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Casemapped= -f}', "");
Expect(0, 64, '\P{Is_Changes_When_Casemapped= -f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Casemapped= -f}', "");
Expect(0, 90, '\p{Is_Changes_When_Casemapped= -f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Casemapped= -f}', "");
Expect(1, 90, '\P{Is_Changes_When_Casemapped= -f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Casemapped= -f}', "");
Error('\p{Is_CWCM=	 FALSE/a/}');
Error('\P{Is_CWCM=	 FALSE/a/}');
Expect(1, 64, '\p{Is_CWCM=false}', "");
Expect(0, 64, '\p{^Is_CWCM=false}', "");
Expect(0, 64, '\P{Is_CWCM=false}', "");
Expect(1, 64, '\P{^Is_CWCM=false}', "");
Expect(0, 90, '\p{Is_CWCM=false}', "");
Expect(1, 90, '\p{^Is_CWCM=false}', "");
Expect(1, 90, '\P{Is_CWCM=false}', "");
Expect(0, 90, '\P{^Is_CWCM=false}', "");
Expect(1, 64, '\p{Is_CWCM=		FALSE}', "");
Expect(0, 64, '\p{^Is_CWCM=		FALSE}', "");
Expect(0, 64, '\P{Is_CWCM=		FALSE}', "");
Expect(1, 64, '\P{^Is_CWCM=		FALSE}', "");
Expect(0, 90, '\p{Is_CWCM=		FALSE}', "");
Expect(1, 90, '\p{^Is_CWCM=		FALSE}', "");
Expect(1, 90, '\P{Is_CWCM=		FALSE}', "");
Expect(0, 90, '\P{^Is_CWCM=		FALSE}', "");
Error('\p{Deprecated=/a/__YES}');
Error('\P{Deprecated=/a/__YES}');
Expect(1, 329, '\p{Deprecated=yes}', "");
Expect(0, 329, '\p{^Deprecated=yes}', "");
Expect(0, 329, '\P{Deprecated=yes}', "");
Expect(1, 329, '\P{^Deprecated=yes}', "");
Expect(0, 328, '\p{Deprecated=yes}', "");
Expect(1, 328, '\p{^Deprecated=yes}', "");
Expect(1, 328, '\P{Deprecated=yes}', "");
Expect(0, 328, '\P{^Deprecated=yes}', "");
Expect(1, 329, '\p{Deprecated=_	Yes}', "");
Expect(0, 329, '\p{^Deprecated=_	Yes}', "");
Expect(0, 329, '\P{Deprecated=_	Yes}', "");
Expect(1, 329, '\P{^Deprecated=_	Yes}', "");
Expect(0, 328, '\p{Deprecated=_	Yes}', "");
Expect(1, 328, '\p{^Deprecated=_	Yes}', "");
Expect(1, 328, '\P{Deprecated=_	Yes}', "");
Expect(0, 328, '\P{^Deprecated=_	Yes}', "");
Error('\p{Dep=:=	 Y}');
Error('\P{Dep=:=	 Y}');
Expect(1, 329, '\p{Dep=y}', "");
Expect(0, 329, '\p{^Dep=y}', "");
Expect(0, 329, '\P{Dep=y}', "");
Expect(1, 329, '\P{^Dep=y}', "");
Expect(0, 328, '\p{Dep=y}', "");
Expect(1, 328, '\p{^Dep=y}', "");
Expect(1, 328, '\P{Dep=y}', "");
Expect(0, 328, '\P{^Dep=y}', "");
Expect(1, 329, '\p{Dep= Y}', "");
Expect(0, 329, '\p{^Dep= Y}', "");
Expect(0, 329, '\P{Dep= Y}', "");
Expect(1, 329, '\P{^Dep= Y}', "");
Expect(0, 328, '\p{Dep= Y}', "");
Expect(1, 328, '\p{^Dep= Y}', "");
Expect(1, 328, '\P{Dep= Y}', "");
Expect(0, 328, '\P{^Dep= Y}', "");
Error('\p{Is_Deprecated: /a/T}');
Error('\P{Is_Deprecated: /a/T}');
Expect(1, 329, '\p{Is_Deprecated=t}', "");
Expect(0, 329, '\p{^Is_Deprecated=t}', "");
Expect(0, 329, '\P{Is_Deprecated=t}', "");
Expect(1, 329, '\P{^Is_Deprecated=t}', "");
Expect(0, 328, '\p{Is_Deprecated=t}', "");
Expect(1, 328, '\p{^Is_Deprecated=t}', "");
Expect(1, 328, '\P{Is_Deprecated=t}', "");
Expect(0, 328, '\P{^Is_Deprecated=t}', "");
Expect(1, 329, '\p{Is_Deprecated=_t}', "");
Expect(0, 329, '\p{^Is_Deprecated=_t}', "");
Expect(0, 329, '\P{Is_Deprecated=_t}', "");
Expect(1, 329, '\P{^Is_Deprecated=_t}', "");
Expect(0, 328, '\p{Is_Deprecated=_t}', "");
Expect(1, 328, '\p{^Is_Deprecated=_t}', "");
Expect(1, 328, '\P{Is_Deprecated=_t}', "");
Expect(0, 328, '\P{^Is_Deprecated=_t}', "");
Error('\p{Is_Dep=/a/	 True}');
Error('\P{Is_Dep=/a/	 True}');
Expect(1, 329, '\p{Is_Dep=true}', "");
Expect(0, 329, '\p{^Is_Dep=true}', "");
Expect(0, 329, '\P{Is_Dep=true}', "");
Expect(1, 329, '\P{^Is_Dep=true}', "");
Expect(0, 328, '\p{Is_Dep=true}', "");
Expect(1, 328, '\p{^Is_Dep=true}', "");
Expect(1, 328, '\P{Is_Dep=true}', "");
Expect(0, 328, '\P{^Is_Dep=true}', "");
Expect(1, 329, '\p{Is_Dep= -TRUE}', "");
Expect(0, 329, '\p{^Is_Dep= -TRUE}', "");
Expect(0, 329, '\P{Is_Dep= -TRUE}', "");
Expect(1, 329, '\P{^Is_Dep= -TRUE}', "");
Expect(0, 328, '\p{Is_Dep= -TRUE}', "");
Expect(1, 328, '\p{^Is_Dep= -TRUE}', "");
Expect(1, 328, '\P{Is_Dep= -TRUE}', "");
Expect(0, 328, '\P{^Is_Dep= -TRUE}', "");
Error('\p{Deprecated:--No:=}');
Error('\P{Deprecated:--No:=}');
Expect(1, 328, '\p{Deprecated=no}', "");
Expect(0, 328, '\p{^Deprecated=no}', "");
Expect(0, 328, '\P{Deprecated=no}', "");
Expect(1, 328, '\P{^Deprecated=no}', "");
Expect(0, 329, '\p{Deprecated=no}', "");
Expect(1, 329, '\p{^Deprecated=no}', "");
Expect(1, 329, '\P{Deprecated=no}', "");
Expect(0, 329, '\P{^Deprecated=no}', "");
Expect(1, 328, '\p{Deprecated= -NO}', "");
Expect(0, 328, '\p{^Deprecated= -NO}', "");
Expect(0, 328, '\P{Deprecated= -NO}', "");
Expect(1, 328, '\P{^Deprecated= -NO}', "");
Expect(0, 329, '\p{Deprecated= -NO}', "");
Expect(1, 329, '\p{^Deprecated= -NO}', "");
Expect(1, 329, '\P{Deprecated= -NO}', "");
Expect(0, 329, '\P{^Deprecated= -NO}', "");
Error('\p{Dep=:=N}');
Error('\P{Dep=:=N}');
Expect(1, 328, '\p{Dep=n}', "");
Expect(0, 328, '\p{^Dep=n}', "");
Expect(0, 328, '\P{Dep=n}', "");
Expect(1, 328, '\P{^Dep=n}', "");
Expect(0, 329, '\p{Dep=n}', "");
Expect(1, 329, '\p{^Dep=n}', "");
Expect(1, 329, '\P{Dep=n}', "");
Expect(0, 329, '\P{^Dep=n}', "");
Expect(1, 328, '\p{Dep=--N}', "");
Expect(0, 328, '\p{^Dep=--N}', "");
Expect(0, 328, '\P{Dep=--N}', "");
Expect(1, 328, '\P{^Dep=--N}', "");
Expect(0, 329, '\p{Dep=--N}', "");
Expect(1, 329, '\p{^Dep=--N}', "");
Expect(1, 329, '\P{Dep=--N}', "");
Expect(0, 329, '\P{^Dep=--N}', "");
Error('\p{Is_Deprecated:	_	f:=}');
Error('\P{Is_Deprecated:	_	f:=}');
Expect(1, 328, '\p{Is_Deprecated: f}', "");
Expect(0, 328, '\p{^Is_Deprecated: f}', "");
Expect(0, 328, '\P{Is_Deprecated: f}', "");
Expect(1, 328, '\P{^Is_Deprecated: f}', "");
Expect(0, 329, '\p{Is_Deprecated: f}', "");
Expect(1, 329, '\p{^Is_Deprecated: f}', "");
Expect(1, 329, '\P{Is_Deprecated: f}', "");
Expect(0, 329, '\P{^Is_Deprecated: f}', "");
Expect(1, 328, '\p{Is_Deprecated=_	f}', "");
Expect(0, 328, '\p{^Is_Deprecated=_	f}', "");
Expect(0, 328, '\P{Is_Deprecated=_	f}', "");
Expect(1, 328, '\P{^Is_Deprecated=_	f}', "");
Expect(0, 329, '\p{Is_Deprecated=_	f}', "");
Expect(1, 329, '\p{^Is_Deprecated=_	f}', "");
Expect(1, 329, '\P{Is_Deprecated=_	f}', "");
Expect(0, 329, '\P{^Is_Deprecated=_	f}', "");
Error('\p{Is_Dep=_:=FALSE}');
Error('\P{Is_Dep=_:=FALSE}');
Expect(1, 328, '\p{Is_Dep=false}', "");
Expect(0, 328, '\p{^Is_Dep=false}', "");
Expect(0, 328, '\P{Is_Dep=false}', "");
Expect(1, 328, '\P{^Is_Dep=false}', "");
Expect(0, 329, '\p{Is_Dep=false}', "");
Expect(1, 329, '\p{^Is_Dep=false}', "");
Expect(1, 329, '\P{Is_Dep=false}', "");
Expect(0, 329, '\P{^Is_Dep=false}', "");
Expect(1, 328, '\p{Is_Dep= -false}', "");
Expect(0, 328, '\p{^Is_Dep= -false}', "");
Expect(0, 328, '\P{Is_Dep= -false}', "");
Expect(1, 328, '\P{^Is_Dep= -false}', "");
Expect(0, 329, '\p{Is_Dep= -false}', "");
Expect(1, 329, '\p{^Is_Dep= -false}', "");
Expect(1, 329, '\P{Is_Dep= -false}', "");
Expect(0, 329, '\P{^Is_Dep= -false}', "");
Error('\p{Sentence_Break=:=	-SP}');
Error('\P{Sentence_Break=:=	-SP}');
Expect(1, 9, '\p{Sentence_Break: sp}', "");
Expect(0, 9, '\p{^Sentence_Break: sp}', "");
Expect(0, 9, '\P{Sentence_Break: sp}', "");
Expect(1, 9, '\P{^Sentence_Break: sp}', "");
Expect(0, 8, '\p{Sentence_Break: sp}', "");
Expect(1, 8, '\p{^Sentence_Break: sp}', "");
Expect(1, 8, '\P{Sentence_Break: sp}', "");
Expect(0, 8, '\P{^Sentence_Break: sp}', "");
Expect(1, 9, '\p{Sentence_Break=  SP}', "");
Expect(0, 9, '\p{^Sentence_Break=  SP}', "");
Expect(0, 9, '\P{Sentence_Break=  SP}', "");
Expect(1, 9, '\P{^Sentence_Break=  SP}', "");
Expect(0, 8, '\p{Sentence_Break=  SP}', "");
Expect(1, 8, '\p{^Sentence_Break=  SP}', "");
Expect(1, 8, '\P{Sentence_Break=  SP}', "");
Expect(0, 8, '\P{^Sentence_Break=  SP}', "");
Error('\p{SB=_ SP:=}');
Error('\P{SB=_ SP:=}');
Expect(1, 9, '\p{SB=sp}', "");
Expect(0, 9, '\p{^SB=sp}', "");
Expect(0, 9, '\P{SB=sp}', "");
Expect(1, 9, '\P{^SB=sp}', "");
Expect(0, 8, '\p{SB=sp}', "");
Expect(1, 8, '\p{^SB=sp}', "");
Expect(1, 8, '\P{SB=sp}', "");
Expect(0, 8, '\P{^SB=sp}', "");
Expect(1, 9, '\p{SB:	-Sp}', "");
Expect(0, 9, '\p{^SB:	-Sp}', "");
Expect(0, 9, '\P{SB:	-Sp}', "");
Expect(1, 9, '\P{^SB:	-Sp}', "");
Expect(0, 8, '\p{SB:	-Sp}', "");
Expect(1, 8, '\p{^SB:	-Sp}', "");
Expect(1, 8, '\P{SB:	-Sp}', "");
Expect(0, 8, '\P{^SB:	-Sp}', "");
Error('\p{Is_Sentence_Break=	sp:=}');
Error('\P{Is_Sentence_Break=	sp:=}');
Expect(1, 9, '\p{Is_Sentence_Break=sp}', "");
Expect(0, 9, '\p{^Is_Sentence_Break=sp}', "");
Expect(0, 9, '\P{Is_Sentence_Break=sp}', "");
Expect(1, 9, '\P{^Is_Sentence_Break=sp}', "");
Expect(0, 8, '\p{Is_Sentence_Break=sp}', "");
Expect(1, 8, '\p{^Is_Sentence_Break=sp}', "");
Expect(1, 8, '\P{Is_Sentence_Break=sp}', "");
Expect(0, 8, '\P{^Is_Sentence_Break=sp}', "");
Expect(1, 9, '\p{Is_Sentence_Break=_	Sp}', "");
Expect(0, 9, '\p{^Is_Sentence_Break=_	Sp}', "");
Expect(0, 9, '\P{Is_Sentence_Break=_	Sp}', "");
Expect(1, 9, '\P{^Is_Sentence_Break=_	Sp}', "");
Expect(0, 8, '\p{Is_Sentence_Break=_	Sp}', "");
Expect(1, 8, '\p{^Is_Sentence_Break=_	Sp}', "");
Expect(1, 8, '\P{Is_Sentence_Break=_	Sp}', "");
Expect(0, 8, '\P{^Is_Sentence_Break=_	Sp}', "");
Error('\p{Is_SB:--Sp:=}');
Error('\P{Is_SB:--Sp:=}');
Expect(1, 9, '\p{Is_SB=sp}', "");
Expect(0, 9, '\p{^Is_SB=sp}', "");
Expect(0, 9, '\P{Is_SB=sp}', "");
Expect(1, 9, '\P{^Is_SB=sp}', "");
Expect(0, 8, '\p{Is_SB=sp}', "");
Expect(1, 8, '\p{^Is_SB=sp}', "");
Expect(1, 8, '\P{Is_SB=sp}', "");
Expect(0, 8, '\P{^Is_SB=sp}', "");
Expect(1, 9, '\p{Is_SB=_sp}', "");
Expect(0, 9, '\p{^Is_SB=_sp}', "");
Expect(0, 9, '\P{Is_SB=_sp}', "");
Expect(1, 9, '\P{^Is_SB=_sp}', "");
Expect(0, 8, '\p{Is_SB=_sp}', "");
Expect(1, 8, '\p{^Is_SB=_sp}', "");
Expect(1, 8, '\P{Is_SB=_sp}', "");
Expect(0, 8, '\P{^Is_SB=_sp}', "");
Error('\p{Sentence_Break:   :=SCONTINUE}');
Error('\P{Sentence_Break:   :=SCONTINUE}');
Expect(1, 45, '\p{Sentence_Break: scontinue}', "");
Expect(0, 45, '\p{^Sentence_Break: scontinue}', "");
Expect(0, 45, '\P{Sentence_Break: scontinue}', "");
Expect(1, 45, '\P{^Sentence_Break: scontinue}', "");
Expect(0, 43, '\p{Sentence_Break: scontinue}', "");
Expect(1, 43, '\p{^Sentence_Break: scontinue}', "");
Expect(1, 43, '\P{Sentence_Break: scontinue}', "");
Expect(0, 43, '\P{^Sentence_Break: scontinue}', "");
Expect(1, 45, '\p{Sentence_Break=	-SCONTINUE}', "");
Expect(0, 45, '\p{^Sentence_Break=	-SCONTINUE}', "");
Expect(0, 45, '\P{Sentence_Break=	-SCONTINUE}', "");
Expect(1, 45, '\P{^Sentence_Break=	-SCONTINUE}', "");
Expect(0, 43, '\p{Sentence_Break=	-SCONTINUE}', "");
Expect(1, 43, '\p{^Sentence_Break=	-SCONTINUE}', "");
Expect(1, 43, '\P{Sentence_Break=	-SCONTINUE}', "");
Expect(0, 43, '\P{^Sentence_Break=	-SCONTINUE}', "");
Error('\p{SB=:=SC}');
Error('\P{SB=:=SC}');
Expect(1, 45, '\p{SB=sc}', "");
Expect(0, 45, '\p{^SB=sc}', "");
Expect(0, 45, '\P{SB=sc}', "");
Expect(1, 45, '\P{^SB=sc}', "");
Expect(0, 43, '\p{SB=sc}', "");
Expect(1, 43, '\p{^SB=sc}', "");
Expect(1, 43, '\P{SB=sc}', "");
Expect(0, 43, '\P{^SB=sc}', "");
Expect(1, 45, '\p{SB=_	SC}', "");
Expect(0, 45, '\p{^SB=_	SC}', "");
Expect(0, 45, '\P{SB=_	SC}', "");
Expect(1, 45, '\P{^SB=_	SC}', "");
Expect(0, 43, '\p{SB=_	SC}', "");
Expect(1, 43, '\p{^SB=_	SC}', "");
Expect(1, 43, '\P{SB=_	SC}', "");
Expect(0, 43, '\P{^SB=_	SC}', "");
Error('\p{Is_Sentence_Break=-SCONTINUE:=}');
Error('\P{Is_Sentence_Break=-SCONTINUE:=}');
Expect(1, 45, '\p{Is_Sentence_Break=scontinue}', "");
Expect(0, 45, '\p{^Is_Sentence_Break=scontinue}', "");
Expect(0, 45, '\P{Is_Sentence_Break=scontinue}', "");
Expect(1, 45, '\P{^Is_Sentence_Break=scontinue}', "");
Expect(0, 43, '\p{Is_Sentence_Break=scontinue}', "");
Expect(1, 43, '\p{^Is_Sentence_Break=scontinue}', "");
Expect(1, 43, '\P{Is_Sentence_Break=scontinue}', "");
Expect(0, 43, '\P{^Is_Sentence_Break=scontinue}', "");
Expect(1, 45, '\p{Is_Sentence_Break=-_scontinue}', "");
Expect(0, 45, '\p{^Is_Sentence_Break=-_scontinue}', "");
Expect(0, 45, '\P{Is_Sentence_Break=-_scontinue}', "");
Expect(1, 45, '\P{^Is_Sentence_Break=-_scontinue}', "");
Expect(0, 43, '\p{Is_Sentence_Break=-_scontinue}', "");
Expect(1, 43, '\p{^Is_Sentence_Break=-_scontinue}', "");
Expect(1, 43, '\P{Is_Sentence_Break=-_scontinue}', "");
Expect(0, 43, '\P{^Is_Sentence_Break=-_scontinue}', "");
Error('\p{Is_SB=-	SC/a/}');
Error('\P{Is_SB=-	SC/a/}');
Expect(1, 45, '\p{Is_SB=sc}', "");
Expect(0, 45, '\p{^Is_SB=sc}', "");
Expect(0, 45, '\P{Is_SB=sc}', "");
Expect(1, 45, '\P{^Is_SB=sc}', "");
Expect(0, 43, '\p{Is_SB=sc}', "");
Expect(1, 43, '\p{^Is_SB=sc}', "");
Expect(1, 43, '\P{Is_SB=sc}', "");
Expect(0, 43, '\P{^Is_SB=sc}', "");
Expect(1, 45, '\p{Is_SB= -sc}', "");
Expect(0, 45, '\p{^Is_SB= -sc}', "");
Expect(0, 45, '\P{Is_SB= -sc}', "");
Expect(1, 45, '\P{^Is_SB= -sc}', "");
Expect(0, 43, '\p{Is_SB= -sc}', "");
Expect(1, 43, '\p{^Is_SB= -sc}', "");
Expect(1, 43, '\P{Is_SB= -sc}', "");
Expect(0, 43, '\P{^Is_SB= -sc}', "");
Error('\p{Sentence_Break=_:=aterm}');
Error('\P{Sentence_Break=_:=aterm}');
Expect(1, 46, '\p{Sentence_Break:   aterm}', "");
Expect(0, 46, '\p{^Sentence_Break:   aterm}', "");
Expect(0, 46, '\P{Sentence_Break:   aterm}', "");
Expect(1, 46, '\P{^Sentence_Break:   aterm}', "");
Expect(0, 45, '\p{Sentence_Break:   aterm}', "");
Expect(1, 45, '\p{^Sentence_Break:   aterm}', "");
Expect(1, 45, '\P{Sentence_Break:   aterm}', "");
Expect(0, 45, '\P{^Sentence_Break:   aterm}', "");
Expect(1, 46, '\p{Sentence_Break= _ATerm}', "");
Expect(0, 46, '\p{^Sentence_Break= _ATerm}', "");
Expect(0, 46, '\P{Sentence_Break= _ATerm}', "");
Expect(1, 46, '\P{^Sentence_Break= _ATerm}', "");
Expect(0, 45, '\p{Sentence_Break= _ATerm}', "");
Expect(1, 45, '\p{^Sentence_Break= _ATerm}', "");
Expect(1, 45, '\P{Sentence_Break= _ATerm}', "");
Expect(0, 45, '\P{^Sentence_Break= _ATerm}', "");
Error('\p{SB=:=--AT}');
Error('\P{SB=:=--AT}');
Expect(1, 46, '\p{SB=at}', "");
Expect(0, 46, '\p{^SB=at}', "");
Expect(0, 46, '\P{SB=at}', "");
Expect(1, 46, '\P{^SB=at}', "");
Expect(0, 45, '\p{SB=at}', "");
Expect(1, 45, '\p{^SB=at}', "");
Expect(1, 45, '\P{SB=at}', "");
Expect(0, 45, '\P{^SB=at}', "");
Expect(1, 46, '\p{SB:   - AT}', "");
Expect(0, 46, '\p{^SB:   - AT}', "");
Expect(0, 46, '\P{SB:   - AT}', "");
Expect(1, 46, '\P{^SB:   - AT}', "");
Expect(0, 45, '\p{SB:   - AT}', "");
Expect(1, 45, '\p{^SB:   - AT}', "");
Expect(1, 45, '\P{SB:   - AT}', "");
Expect(0, 45, '\P{^SB:   - AT}', "");
Error('\p{Is_Sentence_Break=:= 	ATERM}');
Error('\P{Is_Sentence_Break=:= 	ATERM}');
Expect(1, 46, '\p{Is_Sentence_Break=aterm}', "");
Expect(0, 46, '\p{^Is_Sentence_Break=aterm}', "");
Expect(0, 46, '\P{Is_Sentence_Break=aterm}', "");
Expect(1, 46, '\P{^Is_Sentence_Break=aterm}', "");
Expect(0, 45, '\p{Is_Sentence_Break=aterm}', "");
Expect(1, 45, '\p{^Is_Sentence_Break=aterm}', "");
Expect(1, 45, '\P{Is_Sentence_Break=aterm}', "");
Expect(0, 45, '\P{^Is_Sentence_Break=aterm}', "");
Expect(1, 46, '\p{Is_Sentence_Break=-_ATerm}', "");
Expect(0, 46, '\p{^Is_Sentence_Break=-_ATerm}', "");
Expect(0, 46, '\P{Is_Sentence_Break=-_ATerm}', "");
Expect(1, 46, '\P{^Is_Sentence_Break=-_ATerm}', "");
Expect(0, 45, '\p{Is_Sentence_Break=-_ATerm}', "");
Expect(1, 45, '\p{^Is_Sentence_Break=-_ATerm}', "");
Expect(1, 45, '\P{Is_Sentence_Break=-_ATerm}', "");
Expect(0, 45, '\P{^Is_Sentence_Break=-_ATerm}', "");
Error('\p{Is_SB:    :=AT}');
Error('\P{Is_SB:    :=AT}');
Expect(1, 46, '\p{Is_SB: at}', "");
Expect(0, 46, '\p{^Is_SB: at}', "");
Expect(0, 46, '\P{Is_SB: at}', "");
Expect(1, 46, '\P{^Is_SB: at}', "");
Expect(0, 45, '\p{Is_SB: at}', "");
Expect(1, 45, '\p{^Is_SB: at}', "");
Expect(1, 45, '\P{Is_SB: at}', "");
Expect(0, 45, '\P{^Is_SB: at}', "");
Expect(1, 46, '\p{Is_SB=	AT}', "");
Expect(0, 46, '\p{^Is_SB=	AT}', "");
Expect(0, 46, '\P{Is_SB=	AT}', "");
Expect(1, 46, '\P{^Is_SB=	AT}', "");
Expect(0, 45, '\p{Is_SB=	AT}', "");
Expect(1, 45, '\p{^Is_SB=	AT}', "");
Expect(1, 45, '\P{Is_SB=	AT}', "");
Expect(0, 45, '\P{^Is_SB=	AT}', "");
Error('\p{Sentence_Break::=	oletter}');
Error('\P{Sentence_Break::=	oletter}');
Expect(1, 443, '\p{Sentence_Break:	oletter}', "");
Expect(0, 443, '\p{^Sentence_Break:	oletter}', "");
Expect(0, 443, '\P{Sentence_Break:	oletter}', "");
Expect(1, 443, '\P{^Sentence_Break:	oletter}', "");
Expect(0, 442, '\p{Sentence_Break:	oletter}', "");
Expect(1, 442, '\p{^Sentence_Break:	oletter}', "");
Expect(1, 442, '\P{Sentence_Break:	oletter}', "");
Expect(0, 442, '\P{^Sentence_Break:	oletter}', "");
Expect(1, 443, '\p{Sentence_Break=	OLETTER}', "");
Expect(0, 443, '\p{^Sentence_Break=	OLETTER}', "");
Expect(0, 443, '\P{Sentence_Break=	OLETTER}', "");
Expect(1, 443, '\P{^Sentence_Break=	OLETTER}', "");
Expect(0, 442, '\p{Sentence_Break=	OLETTER}', "");
Expect(1, 442, '\p{^Sentence_Break=	OLETTER}', "");
Expect(1, 442, '\P{Sentence_Break=	OLETTER}', "");
Expect(0, 442, '\P{^Sentence_Break=	OLETTER}', "");
Error('\p{SB: :=__LE}');
Error('\P{SB: :=__LE}');
Expect(1, 443, '\p{SB:	le}', "");
Expect(0, 443, '\p{^SB:	le}', "");
Expect(0, 443, '\P{SB:	le}', "");
Expect(1, 443, '\P{^SB:	le}', "");
Expect(0, 442, '\p{SB:	le}', "");
Expect(1, 442, '\p{^SB:	le}', "");
Expect(1, 442, '\P{SB:	le}', "");
Expect(0, 442, '\P{^SB:	le}', "");
Expect(1, 443, '\p{SB=_le}', "");
Expect(0, 443, '\p{^SB=_le}', "");
Expect(0, 443, '\P{SB=_le}', "");
Expect(1, 443, '\P{^SB=_le}', "");
Expect(0, 442, '\p{SB=_le}', "");
Expect(1, 442, '\p{^SB=_le}', "");
Expect(1, 442, '\P{SB=_le}', "");
Expect(0, 442, '\P{^SB=_le}', "");
Error('\p{Is_Sentence_Break: :=OLetter}');
Error('\P{Is_Sentence_Break: :=OLetter}');
Expect(1, 443, '\p{Is_Sentence_Break=oletter}', "");
Expect(0, 443, '\p{^Is_Sentence_Break=oletter}', "");
Expect(0, 443, '\P{Is_Sentence_Break=oletter}', "");
Expect(1, 443, '\P{^Is_Sentence_Break=oletter}', "");
Expect(0, 442, '\p{Is_Sentence_Break=oletter}', "");
Expect(1, 442, '\p{^Is_Sentence_Break=oletter}', "");
Expect(1, 442, '\P{Is_Sentence_Break=oletter}', "");
Expect(0, 442, '\P{^Is_Sentence_Break=oletter}', "");
Expect(1, 443, '\p{Is_Sentence_Break= oletter}', "");
Expect(0, 443, '\p{^Is_Sentence_Break= oletter}', "");
Expect(0, 443, '\P{Is_Sentence_Break= oletter}', "");
Expect(1, 443, '\P{^Is_Sentence_Break= oletter}', "");
Expect(0, 442, '\p{Is_Sentence_Break= oletter}', "");
Expect(1, 442, '\p{^Is_Sentence_Break= oletter}', "");
Expect(1, 442, '\P{Is_Sentence_Break= oletter}', "");
Expect(0, 442, '\P{^Is_Sentence_Break= oletter}', "");
Error('\p{Is_SB=	/a/LE}');
Error('\P{Is_SB=	/a/LE}');
Expect(1, 443, '\p{Is_SB=le}', "");
Expect(0, 443, '\p{^Is_SB=le}', "");
Expect(0, 443, '\P{Is_SB=le}', "");
Expect(1, 443, '\P{^Is_SB=le}', "");
Expect(0, 442, '\p{Is_SB=le}', "");
Expect(1, 442, '\p{^Is_SB=le}', "");
Expect(1, 442, '\P{Is_SB=le}', "");
Expect(0, 442, '\P{^Is_SB=le}', "");
Expect(1, 443, '\p{Is_SB=_	LE}', "");
Expect(0, 443, '\p{^Is_SB=_	LE}', "");
Expect(0, 443, '\P{Is_SB=_	LE}', "");
Expect(1, 443, '\P{^Is_SB=_	LE}', "");
Expect(0, 442, '\p{Is_SB=_	LE}', "");
Expect(1, 442, '\p{^Is_SB=_	LE}', "");
Expect(1, 442, '\P{Is_SB=_	LE}', "");
Expect(0, 442, '\P{^Is_SB=_	LE}', "");
Error('\p{Sentence_Break= cr/a/}');
Error('\P{Sentence_Break= cr/a/}');
Expect(1, 13, '\p{Sentence_Break=cr}', "");
Expect(0, 13, '\p{^Sentence_Break=cr}', "");
Expect(0, 13, '\P{Sentence_Break=cr}', "");
Expect(1, 13, '\P{^Sentence_Break=cr}', "");
Expect(0, 12, '\p{Sentence_Break=cr}', "");
Expect(1, 12, '\p{^Sentence_Break=cr}', "");
Expect(1, 12, '\P{Sentence_Break=cr}', "");
Expect(0, 12, '\P{^Sentence_Break=cr}', "");
Expect(1, 13, '\p{Sentence_Break=_CR}', "");
Expect(0, 13, '\p{^Sentence_Break=_CR}', "");
Expect(0, 13, '\P{Sentence_Break=_CR}', "");
Expect(1, 13, '\P{^Sentence_Break=_CR}', "");
Expect(0, 12, '\p{Sentence_Break=_CR}', "");
Expect(1, 12, '\p{^Sentence_Break=_CR}', "");
Expect(1, 12, '\P{Sentence_Break=_CR}', "");
Expect(0, 12, '\P{^Sentence_Break=_CR}', "");
Error('\p{SB:   /a/-CR}');
Error('\P{SB:   /a/-CR}');
Expect(1, 13, '\p{SB=cr}', "");
Expect(0, 13, '\p{^SB=cr}', "");
Expect(0, 13, '\P{SB=cr}', "");
Expect(1, 13, '\P{^SB=cr}', "");
Expect(0, 12, '\p{SB=cr}', "");
Expect(1, 12, '\p{^SB=cr}', "");
Expect(1, 12, '\P{SB=cr}', "");
Expect(0, 12, '\P{^SB=cr}', "");
Expect(1, 13, '\p{SB= -CR}', "");
Expect(0, 13, '\p{^SB= -CR}', "");
Expect(0, 13, '\P{SB= -CR}', "");
Expect(1, 13, '\P{^SB= -CR}', "");
Expect(0, 12, '\p{SB= -CR}', "");
Expect(1, 12, '\p{^SB= -CR}', "");
Expect(1, 12, '\P{SB= -CR}', "");
Expect(0, 12, '\P{^SB= -CR}', "");
Error('\p{Is_Sentence_Break=:=	CR}');
Error('\P{Is_Sentence_Break=:=	CR}');
Expect(1, 13, '\p{Is_Sentence_Break=cr}', "");
Expect(0, 13, '\p{^Is_Sentence_Break=cr}', "");
Expect(0, 13, '\P{Is_Sentence_Break=cr}', "");
Expect(1, 13, '\P{^Is_Sentence_Break=cr}', "");
Expect(0, 12, '\p{Is_Sentence_Break=cr}', "");
Expect(1, 12, '\p{^Is_Sentence_Break=cr}', "");
Expect(1, 12, '\P{Is_Sentence_Break=cr}', "");
Expect(0, 12, '\P{^Is_Sentence_Break=cr}', "");
Expect(1, 13, '\p{Is_Sentence_Break=-CR}', "");
Expect(0, 13, '\p{^Is_Sentence_Break=-CR}', "");
Expect(0, 13, '\P{Is_Sentence_Break=-CR}', "");
Expect(1, 13, '\P{^Is_Sentence_Break=-CR}', "");
Expect(0, 12, '\p{Is_Sentence_Break=-CR}', "");
Expect(1, 12, '\p{^Is_Sentence_Break=-CR}', "");
Expect(1, 12, '\P{Is_Sentence_Break=-CR}', "");
Expect(0, 12, '\P{^Is_Sentence_Break=-CR}', "");
Error('\p{Is_SB=:=CR}');
Error('\P{Is_SB=:=CR}');
Expect(1, 13, '\p{Is_SB:	cr}', "");
Expect(0, 13, '\p{^Is_SB:	cr}', "");
Expect(0, 13, '\P{Is_SB:	cr}', "");
Expect(1, 13, '\P{^Is_SB:	cr}', "");
Expect(0, 12, '\p{Is_SB:	cr}', "");
Expect(1, 12, '\p{^Is_SB:	cr}', "");
Expect(1, 12, '\P{Is_SB:	cr}', "");
Expect(0, 12, '\P{^Is_SB:	cr}', "");
Expect(1, 13, '\p{Is_SB=__cr}', "");
Expect(0, 13, '\p{^Is_SB=__cr}', "");
Expect(0, 13, '\P{Is_SB=__cr}', "");
Expect(1, 13, '\P{^Is_SB=__cr}', "");
Expect(0, 12, '\p{Is_SB=__cr}', "");
Expect(1, 12, '\p{^Is_SB=__cr}', "");
Expect(1, 12, '\P{Is_SB=__cr}', "");
Expect(0, 12, '\P{^Is_SB=__cr}', "");
Error('\p{Sentence_Break= _Other:=}');
Error('\P{Sentence_Break= _Other:=}');
Expect(1, 8, '\p{Sentence_Break=other}', "");
Expect(0, 8, '\p{^Sentence_Break=other}', "");
Expect(0, 8, '\P{Sentence_Break=other}', "");
Expect(1, 8, '\P{^Sentence_Break=other}', "");
Expect(0, 13, '\p{Sentence_Break=other}', "");
Expect(1, 13, '\p{^Sentence_Break=other}', "");
Expect(1, 13, '\P{Sentence_Break=other}', "");
Expect(0, 13, '\P{^Sentence_Break=other}', "");
Expect(1, 8, '\p{Sentence_Break=-_OTHER}', "");
Expect(0, 8, '\p{^Sentence_Break=-_OTHER}', "");
Expect(0, 8, '\P{Sentence_Break=-_OTHER}', "");
Expect(1, 8, '\P{^Sentence_Break=-_OTHER}', "");
Expect(0, 13, '\p{Sentence_Break=-_OTHER}', "");
Expect(1, 13, '\p{^Sentence_Break=-_OTHER}', "");
Expect(1, 13, '\P{Sentence_Break=-_OTHER}', "");
Expect(0, 13, '\P{^Sentence_Break=-_OTHER}', "");
Error('\p{SB=	-XX:=}');
Error('\P{SB=	-XX:=}');
Expect(1, 8, '\p{SB=xx}', "");
Expect(0, 8, '\p{^SB=xx}', "");
Expect(0, 8, '\P{SB=xx}', "");
Expect(1, 8, '\P{^SB=xx}', "");
Expect(0, 13, '\p{SB=xx}', "");
Expect(1, 13, '\p{^SB=xx}', "");
Expect(1, 13, '\P{SB=xx}', "");
Expect(0, 13, '\P{^SB=xx}', "");
Expect(1, 8, '\p{SB= XX}', "");
Expect(0, 8, '\p{^SB= XX}', "");
Expect(0, 8, '\P{SB= XX}', "");
Expect(1, 8, '\P{^SB= XX}', "");
Expect(0, 13, '\p{SB= XX}', "");
Expect(1, 13, '\p{^SB= XX}', "");
Expect(1, 13, '\P{SB= XX}', "");
Expect(0, 13, '\P{^SB= XX}', "");
Error('\p{Is_Sentence_Break=	other/a/}');
Error('\P{Is_Sentence_Break=	other/a/}');
Expect(1, 8, '\p{Is_Sentence_Break=other}', "");
Expect(0, 8, '\p{^Is_Sentence_Break=other}', "");
Expect(0, 8, '\P{Is_Sentence_Break=other}', "");
Expect(1, 8, '\P{^Is_Sentence_Break=other}', "");
Expect(0, 13, '\p{Is_Sentence_Break=other}', "");
Expect(1, 13, '\p{^Is_Sentence_Break=other}', "");
Expect(1, 13, '\P{Is_Sentence_Break=other}', "");
Expect(0, 13, '\P{^Is_Sentence_Break=other}', "");
Expect(1, 8, '\p{Is_Sentence_Break= _Other}', "");
Expect(0, 8, '\p{^Is_Sentence_Break= _Other}', "");
Expect(0, 8, '\P{Is_Sentence_Break= _Other}', "");
Expect(1, 8, '\P{^Is_Sentence_Break= _Other}', "");
Expect(0, 13, '\p{Is_Sentence_Break= _Other}', "");
Expect(1, 13, '\p{^Is_Sentence_Break= _Other}', "");
Expect(1, 13, '\P{Is_Sentence_Break= _Other}', "");
Expect(0, 13, '\P{^Is_Sentence_Break= _Other}', "");
Error('\p{Is_SB= :=XX}');
Error('\P{Is_SB= :=XX}');
Expect(1, 8, '\p{Is_SB:xx}', "");
Expect(0, 8, '\p{^Is_SB:xx}', "");
Expect(0, 8, '\P{Is_SB:xx}', "");
Expect(1, 8, '\P{^Is_SB:xx}', "");
Expect(0, 13, '\p{Is_SB:xx}', "");
Expect(1, 13, '\p{^Is_SB:xx}', "");
Expect(1, 13, '\P{Is_SB:xx}', "");
Expect(0, 13, '\P{^Is_SB:xx}', "");
Expect(1, 8, '\p{Is_SB= xx}', "");
Expect(0, 8, '\p{^Is_SB= xx}', "");
Expect(0, 8, '\P{Is_SB= xx}', "");
Expect(1, 8, '\P{^Is_SB= xx}', "");
Expect(0, 13, '\p{Is_SB= xx}', "");
Expect(1, 13, '\p{^Is_SB= xx}', "");
Expect(1, 13, '\P{Is_SB= xx}', "");
Expect(0, 13, '\P{^Is_SB= xx}', "");
Error('\p{Sentence_Break=/a/_ numeric}');
Error('\P{Sentence_Break=/a/_ numeric}');
Expect(1, 57, '\p{Sentence_Break=numeric}', "");
Expect(0, 57, '\p{^Sentence_Break=numeric}', "");
Expect(0, 57, '\P{Sentence_Break=numeric}', "");
Expect(1, 57, '\P{^Sentence_Break=numeric}', "");
Expect(0, 47, '\p{Sentence_Break=numeric}', "");
Expect(1, 47, '\p{^Sentence_Break=numeric}', "");
Expect(1, 47, '\P{Sentence_Break=numeric}', "");
Expect(0, 47, '\P{^Sentence_Break=numeric}', "");
Expect(1, 57, '\p{Sentence_Break= NUMERIC}', "");
Expect(0, 57, '\p{^Sentence_Break= NUMERIC}', "");
Expect(0, 57, '\P{Sentence_Break= NUMERIC}', "");
Expect(1, 57, '\P{^Sentence_Break= NUMERIC}', "");
Expect(0, 47, '\p{Sentence_Break= NUMERIC}', "");
Expect(1, 47, '\p{^Sentence_Break= NUMERIC}', "");
Expect(1, 47, '\P{Sentence_Break= NUMERIC}', "");
Expect(0, 47, '\P{^Sentence_Break= NUMERIC}', "");
Error('\p{SB=/a/ NU}');
Error('\P{SB=/a/ NU}');
Expect(1, 57, '\p{SB=nu}', "");
Expect(0, 57, '\p{^SB=nu}', "");
Expect(0, 57, '\P{SB=nu}', "");
Expect(1, 57, '\P{^SB=nu}', "");
Expect(0, 47, '\p{SB=nu}', "");
Expect(1, 47, '\p{^SB=nu}', "");
Expect(1, 47, '\P{SB=nu}', "");
Expect(0, 47, '\P{^SB=nu}', "");
Error('\p{Is_Sentence_Break=/a/- numeric}');
Error('\P{Is_Sentence_Break=/a/- numeric}');
Expect(1, 57, '\p{Is_Sentence_Break=numeric}', "");
Expect(0, 57, '\p{^Is_Sentence_Break=numeric}', "");
Expect(0, 57, '\P{Is_Sentence_Break=numeric}', "");
Expect(1, 57, '\P{^Is_Sentence_Break=numeric}', "");
Expect(0, 47, '\p{Is_Sentence_Break=numeric}', "");
Expect(1, 47, '\p{^Is_Sentence_Break=numeric}', "");
Expect(1, 47, '\P{Is_Sentence_Break=numeric}', "");
Expect(0, 47, '\P{^Is_Sentence_Break=numeric}', "");
Expect(1, 57, '\p{Is_Sentence_Break= 	numeric}', "");
Expect(0, 57, '\p{^Is_Sentence_Break= 	numeric}', "");
Expect(0, 57, '\P{Is_Sentence_Break= 	numeric}', "");
Expect(1, 57, '\P{^Is_Sentence_Break= 	numeric}', "");
Expect(0, 47, '\p{Is_Sentence_Break= 	numeric}', "");
Expect(1, 47, '\p{^Is_Sentence_Break= 	numeric}', "");
Expect(1, 47, '\P{Is_Sentence_Break= 	numeric}', "");
Expect(0, 47, '\P{^Is_Sentence_Break= 	numeric}', "");
Error('\p{Is_SB=-/a/nu}');
Error('\P{Is_SB=-/a/nu}');
Expect(1, 57, '\p{Is_SB=nu}', "");
Expect(0, 57, '\p{^Is_SB=nu}', "");
Expect(0, 57, '\P{Is_SB=nu}', "");
Expect(1, 57, '\P{^Is_SB=nu}', "");
Expect(0, 47, '\p{Is_SB=nu}', "");
Expect(1, 47, '\p{^Is_SB=nu}', "");
Expect(1, 47, '\P{Is_SB=nu}', "");
Expect(0, 47, '\P{^Is_SB=nu}', "");
Expect(1, 57, '\p{Is_SB=-_NU}', "");
Expect(0, 57, '\p{^Is_SB=-_NU}', "");
Expect(0, 57, '\P{Is_SB=-_NU}', "");
Expect(1, 57, '\P{^Is_SB=-_NU}', "");
Expect(0, 47, '\p{Is_SB=-_NU}', "");
Expect(1, 47, '\p{^Is_SB=-_NU}', "");
Expect(1, 47, '\P{Is_SB=-_NU}', "");
Expect(0, 47, '\P{^Is_SB=-_NU}', "");
Error('\p{Sentence_Break=_/a/Format}');
Error('\P{Sentence_Break=_/a/Format}');
Expect(1, 173, '\p{Sentence_Break=format}', "");
Expect(0, 173, '\p{^Sentence_Break=format}', "");
Expect(0, 173, '\P{Sentence_Break=format}', "");
Expect(1, 173, '\P{^Sentence_Break=format}', "");
Expect(0, 172, '\p{Sentence_Break=format}', "");
Expect(1, 172, '\p{^Sentence_Break=format}', "");
Expect(1, 172, '\P{Sentence_Break=format}', "");
Expect(0, 172, '\P{^Sentence_Break=format}', "");
Expect(1, 173, '\p{Sentence_Break= -Format}', "");
Expect(0, 173, '\p{^Sentence_Break= -Format}', "");
Expect(0, 173, '\P{Sentence_Break= -Format}', "");
Expect(1, 173, '\P{^Sentence_Break= -Format}', "");
Expect(0, 172, '\p{Sentence_Break= -Format}', "");
Expect(1, 172, '\p{^Sentence_Break= -Format}', "");
Expect(1, 172, '\P{Sentence_Break= -Format}', "");
Expect(0, 172, '\P{^Sentence_Break= -Format}', "");
Error('\p{SB=-_FO:=}');
Error('\P{SB=-_FO:=}');
Expect(1, 173, '\p{SB=fo}', "");
Expect(0, 173, '\p{^SB=fo}', "");
Expect(0, 173, '\P{SB=fo}', "");
Expect(1, 173, '\P{^SB=fo}', "");
Expect(0, 172, '\p{SB=fo}', "");
Expect(1, 172, '\p{^SB=fo}', "");
Expect(1, 172, '\P{SB=fo}', "");
Expect(0, 172, '\P{^SB=fo}', "");
Expect(1, 173, '\p{SB= _FO}', "");
Expect(0, 173, '\p{^SB= _FO}', "");
Expect(0, 173, '\P{SB= _FO}', "");
Expect(1, 173, '\P{^SB= _FO}', "");
Expect(0, 172, '\p{SB= _FO}', "");
Expect(1, 172, '\p{^SB= _FO}', "");
Expect(1, 172, '\P{SB= _FO}', "");
Expect(0, 172, '\P{^SB= _FO}', "");
Error('\p{Is_Sentence_Break=_FORMAT:=}');
Error('\P{Is_Sentence_Break=_FORMAT:=}');
Expect(1, 173, '\p{Is_Sentence_Break=format}', "");
Expect(0, 173, '\p{^Is_Sentence_Break=format}', "");
Expect(0, 173, '\P{Is_Sentence_Break=format}', "");
Expect(1, 173, '\P{^Is_Sentence_Break=format}', "");
Expect(0, 172, '\p{Is_Sentence_Break=format}', "");
Expect(1, 172, '\p{^Is_Sentence_Break=format}', "");
Expect(1, 172, '\P{Is_Sentence_Break=format}', "");
Expect(0, 172, '\P{^Is_Sentence_Break=format}', "");
Expect(1, 173, '\p{Is_Sentence_Break= Format}', "");
Expect(0, 173, '\p{^Is_Sentence_Break= Format}', "");
Expect(0, 173, '\P{Is_Sentence_Break= Format}', "");
Expect(1, 173, '\P{^Is_Sentence_Break= Format}', "");
Expect(0, 172, '\p{Is_Sentence_Break= Format}', "");
Expect(1, 172, '\p{^Is_Sentence_Break= Format}', "");
Expect(1, 172, '\P{Is_Sentence_Break= Format}', "");
Expect(0, 172, '\P{^Is_Sentence_Break= Format}', "");
Error('\p{Is_SB=/a/_	FO}');
Error('\P{Is_SB=/a/_	FO}');
Expect(1, 173, '\p{Is_SB=fo}', "");
Expect(0, 173, '\p{^Is_SB=fo}', "");
Expect(0, 173, '\P{Is_SB=fo}', "");
Expect(1, 173, '\P{^Is_SB=fo}', "");
Expect(0, 172, '\p{Is_SB=fo}', "");
Expect(1, 172, '\p{^Is_SB=fo}', "");
Expect(1, 172, '\P{Is_SB=fo}', "");
Expect(0, 172, '\P{^Is_SB=fo}', "");
Expect(1, 173, '\p{Is_SB=		FO}', "");
Expect(0, 173, '\p{^Is_SB=		FO}', "");
Expect(0, 173, '\P{Is_SB=		FO}', "");
Expect(1, 173, '\P{^Is_SB=		FO}', "");
Expect(0, 172, '\p{Is_SB=		FO}', "");
Expect(1, 172, '\p{^Is_SB=		FO}', "");
Expect(1, 172, '\P{Is_SB=		FO}', "");
Expect(0, 172, '\P{^Is_SB=		FO}', "");
Error('\p{Sentence_Break=_:=Lower}');
Error('\P{Sentence_Break=_:=Lower}');
Expect(1, 122, '\p{Sentence_Break=lower}', "");
Expect(0, 122, '\p{^Sentence_Break=lower}', "");
Expect(0, 122, '\P{Sentence_Break=lower}', "");
Expect(1, 122, '\P{^Sentence_Break=lower}', "");
Expect(0, 96, '\p{Sentence_Break=lower}', "");
Expect(1, 96, '\p{^Sentence_Break=lower}', "");
Expect(1, 96, '\P{Sentence_Break=lower}', "");
Expect(0, 96, '\P{^Sentence_Break=lower}', "");
Expect(1, 122, '\p{Sentence_Break= LOWER}', "");
Expect(0, 122, '\p{^Sentence_Break= LOWER}', "");
Expect(0, 122, '\P{Sentence_Break= LOWER}', "");
Expect(1, 122, '\P{^Sentence_Break= LOWER}', "");
Expect(0, 96, '\p{Sentence_Break= LOWER}', "");
Expect(1, 96, '\p{^Sentence_Break= LOWER}', "");
Expect(1, 96, '\P{Sentence_Break= LOWER}', "");
Expect(0, 96, '\P{^Sentence_Break= LOWER}', "");
Error('\p{SB=_ lo/a/}');
Error('\P{SB=_ lo/a/}');
Expect(1, 122, '\p{SB=lo}', "");
Expect(0, 122, '\p{^SB=lo}', "");
Expect(0, 122, '\P{SB=lo}', "");
Expect(1, 122, '\P{^SB=lo}', "");
Expect(0, 96, '\p{SB=lo}', "");
Expect(1, 96, '\p{^SB=lo}', "");
Expect(1, 96, '\P{SB=lo}', "");
Expect(0, 96, '\P{^SB=lo}', "");
Expect(1, 122, '\p{SB=--lo}', "");
Expect(0, 122, '\p{^SB=--lo}', "");
Expect(0, 122, '\P{SB=--lo}', "");
Expect(1, 122, '\P{^SB=--lo}', "");
Expect(0, 96, '\p{SB=--lo}', "");
Expect(1, 96, '\p{^SB=--lo}', "");
Expect(1, 96, '\P{SB=--lo}', "");
Expect(0, 96, '\P{^SB=--lo}', "");
Error('\p{Is_Sentence_Break=/a/-LOWER}');
Error('\P{Is_Sentence_Break=/a/-LOWER}');
Expect(1, 122, '\p{Is_Sentence_Break=lower}', "");
Expect(0, 122, '\p{^Is_Sentence_Break=lower}', "");
Expect(0, 122, '\P{Is_Sentence_Break=lower}', "");
Expect(1, 122, '\P{^Is_Sentence_Break=lower}', "");
Expect(0, 96, '\p{Is_Sentence_Break=lower}', "");
Expect(1, 96, '\p{^Is_Sentence_Break=lower}', "");
Expect(1, 96, '\P{Is_Sentence_Break=lower}', "");
Expect(0, 96, '\P{^Is_Sentence_Break=lower}', "");
Expect(1, 122, '\p{Is_Sentence_Break: LOWER}', "");
Expect(0, 122, '\p{^Is_Sentence_Break: LOWER}', "");
Expect(0, 122, '\P{Is_Sentence_Break: LOWER}', "");
Expect(1, 122, '\P{^Is_Sentence_Break: LOWER}', "");
Expect(0, 96, '\p{Is_Sentence_Break: LOWER}', "");
Expect(1, 96, '\p{^Is_Sentence_Break: LOWER}', "");
Expect(1, 96, '\P{Is_Sentence_Break: LOWER}', "");
Expect(0, 96, '\P{^Is_Sentence_Break: LOWER}', "");
Error('\p{Is_SB=:= _LO}');
Error('\P{Is_SB=:= _LO}');
Expect(1, 122, '\p{Is_SB=lo}', "");
Expect(0, 122, '\p{^Is_SB=lo}', "");
Expect(0, 122, '\P{Is_SB=lo}', "");
Expect(1, 122, '\P{^Is_SB=lo}', "");
Expect(0, 96, '\p{Is_SB=lo}', "");
Expect(1, 96, '\p{^Is_SB=lo}', "");
Expect(1, 96, '\P{Is_SB=lo}', "");
Expect(0, 96, '\P{^Is_SB=lo}', "");
Expect(1, 122, '\p{Is_SB=	-LO}', "");
Expect(0, 122, '\p{^Is_SB=	-LO}', "");
Expect(0, 122, '\P{Is_SB=	-LO}', "");
Expect(1, 122, '\P{^Is_SB=	-LO}', "");
Expect(0, 96, '\p{Is_SB=	-LO}', "");
Expect(1, 96, '\p{^Is_SB=	-LO}', "");
Expect(1, 96, '\P{Is_SB=	-LO}', "");
Expect(0, 96, '\P{^Is_SB=	-LO}', "");
Error('\p{Sentence_Break=_/a/upper}');
Error('\P{Sentence_Break=_/a/upper}');
Expect(1, 90, '\p{Sentence_Break=upper}', "");
Expect(0, 90, '\p{^Sentence_Break=upper}', "");
Expect(0, 90, '\P{Sentence_Break=upper}', "");
Expect(1, 90, '\P{^Sentence_Break=upper}', "");
Expect(0, 64, '\p{Sentence_Break=upper}', "");
Expect(1, 64, '\p{^Sentence_Break=upper}', "");
Expect(1, 64, '\P{Sentence_Break=upper}', "");
Expect(0, 64, '\P{^Sentence_Break=upper}', "");
Expect(1, 90, '\p{Sentence_Break=	 Upper}', "");
Expect(0, 90, '\p{^Sentence_Break=	 Upper}', "");
Expect(0, 90, '\P{Sentence_Break=	 Upper}', "");
Expect(1, 90, '\P{^Sentence_Break=	 Upper}', "");
Expect(0, 64, '\p{Sentence_Break=	 Upper}', "");
Expect(1, 64, '\p{^Sentence_Break=	 Upper}', "");
Expect(1, 64, '\P{Sentence_Break=	 Upper}', "");
Expect(0, 64, '\P{^Sentence_Break=	 Upper}', "");
Error('\p{SB=	up:=}');
Error('\P{SB=	up:=}');
Expect(1, 90, '\p{SB=up}', "");
Expect(0, 90, '\p{^SB=up}', "");
Expect(0, 90, '\P{SB=up}', "");
Expect(1, 90, '\P{^SB=up}', "");
Expect(0, 64, '\p{SB=up}', "");
Expect(1, 64, '\p{^SB=up}', "");
Expect(1, 64, '\P{SB=up}', "");
Expect(0, 64, '\P{^SB=up}', "");
Expect(1, 90, '\p{SB:    -UP}', "");
Expect(0, 90, '\p{^SB:    -UP}', "");
Expect(0, 90, '\P{SB:    -UP}', "");
Expect(1, 90, '\P{^SB:    -UP}', "");
Expect(0, 64, '\p{SB:    -UP}', "");
Expect(1, 64, '\p{^SB:    -UP}', "");
Expect(1, 64, '\P{SB:    -UP}', "");
Expect(0, 64, '\P{^SB:    -UP}', "");
Error('\p{Is_Sentence_Break= _upper:=}');
Error('\P{Is_Sentence_Break= _upper:=}');
Expect(1, 90, '\p{Is_Sentence_Break=upper}', "");
Expect(0, 90, '\p{^Is_Sentence_Break=upper}', "");
Expect(0, 90, '\P{Is_Sentence_Break=upper}', "");
Expect(1, 90, '\P{^Is_Sentence_Break=upper}', "");
Expect(0, 64, '\p{Is_Sentence_Break=upper}', "");
Expect(1, 64, '\p{^Is_Sentence_Break=upper}', "");
Expect(1, 64, '\P{Is_Sentence_Break=upper}', "");
Expect(0, 64, '\P{^Is_Sentence_Break=upper}', "");
Expect(1, 90, '\p{Is_Sentence_Break=_Upper}', "");
Expect(0, 90, '\p{^Is_Sentence_Break=_Upper}', "");
Expect(0, 90, '\P{Is_Sentence_Break=_Upper}', "");
Expect(1, 90, '\P{^Is_Sentence_Break=_Upper}', "");
Expect(0, 64, '\p{Is_Sentence_Break=_Upper}', "");
Expect(1, 64, '\p{^Is_Sentence_Break=_Upper}', "");
Expect(1, 64, '\P{Is_Sentence_Break=_Upper}', "");
Expect(0, 64, '\P{^Is_Sentence_Break=_Upper}', "");
Error('\p{Is_SB=-:=UP}');
Error('\P{Is_SB=-:=UP}');
Expect(1, 90, '\p{Is_SB=up}', "");
Expect(0, 90, '\p{^Is_SB=up}', "");
Expect(0, 90, '\P{Is_SB=up}', "");
Expect(1, 90, '\P{^Is_SB=up}', "");
Expect(0, 64, '\p{Is_SB=up}', "");
Expect(1, 64, '\p{^Is_SB=up}', "");
Expect(1, 64, '\P{Is_SB=up}', "");
Expect(0, 64, '\P{^Is_SB=up}', "");
Expect(1, 90, '\p{Is_SB=_ UP}', "");
Expect(0, 90, '\p{^Is_SB=_ UP}', "");
Expect(0, 90, '\P{Is_SB=_ UP}', "");
Expect(1, 90, '\P{^Is_SB=_ UP}', "");
Expect(0, 64, '\p{Is_SB=_ UP}', "");
Expect(1, 64, '\p{^Is_SB=_ UP}', "");
Expect(1, 64, '\P{Is_SB=_ UP}', "");
Expect(0, 64, '\P{^Is_SB=_ UP}', "");
Error('\p{Sentence_Break=/a/-_sep}');
Error('\P{Sentence_Break=/a/-_sep}');
Expect(1, 133, '\p{Sentence_Break=sep}', "");
Expect(0, 133, '\p{^Sentence_Break=sep}', "");
Expect(0, 133, '\P{Sentence_Break=sep}', "");
Expect(1, 133, '\P{^Sentence_Break=sep}', "");
Expect(0, 132, '\p{Sentence_Break=sep}', "");
Expect(1, 132, '\p{^Sentence_Break=sep}', "");
Expect(1, 132, '\P{Sentence_Break=sep}', "");
Expect(0, 132, '\P{^Sentence_Break=sep}', "");
Expect(1, 133, '\p{Sentence_Break= Sep}', "");
Expect(0, 133, '\p{^Sentence_Break= Sep}', "");
Expect(0, 133, '\P{Sentence_Break= Sep}', "");
Expect(1, 133, '\P{^Sentence_Break= Sep}', "");
Expect(0, 132, '\p{Sentence_Break= Sep}', "");
Expect(1, 132, '\p{^Sentence_Break= Sep}', "");
Expect(1, 132, '\P{Sentence_Break= Sep}', "");
Expect(0, 132, '\P{^Sentence_Break= Sep}', "");
Error('\p{SB=/a/_se}');
Error('\P{SB=/a/_se}');
Expect(1, 133, '\p{SB=se}', "");
Expect(0, 133, '\p{^SB=se}', "");
Expect(0, 133, '\P{SB=se}', "");
Expect(1, 133, '\P{^SB=se}', "");
Expect(0, 132, '\p{SB=se}', "");
Expect(1, 132, '\p{^SB=se}', "");
Expect(1, 132, '\P{SB=se}', "");
Expect(0, 132, '\P{^SB=se}', "");
Expect(1, 133, '\p{SB=	SE}', "");
Expect(0, 133, '\p{^SB=	SE}', "");
Expect(0, 133, '\P{SB=	SE}', "");
Expect(1, 133, '\P{^SB=	SE}', "");
Expect(0, 132, '\p{SB=	SE}', "");
Expect(1, 132, '\p{^SB=	SE}', "");
Expect(1, 132, '\P{SB=	SE}', "");
Expect(0, 132, '\P{^SB=	SE}', "");
Error('\p{Is_Sentence_Break=:=	_Sep}');
Error('\P{Is_Sentence_Break=:=	_Sep}');
Expect(1, 133, '\p{Is_Sentence_Break=sep}', "");
Expect(0, 133, '\p{^Is_Sentence_Break=sep}', "");
Expect(0, 133, '\P{Is_Sentence_Break=sep}', "");
Expect(1, 133, '\P{^Is_Sentence_Break=sep}', "");
Expect(0, 132, '\p{Is_Sentence_Break=sep}', "");
Expect(1, 132, '\p{^Is_Sentence_Break=sep}', "");
Expect(1, 132, '\P{Is_Sentence_Break=sep}', "");
Expect(0, 132, '\P{^Is_Sentence_Break=sep}', "");
Expect(1, 133, '\p{Is_Sentence_Break:		 sep}', "");
Expect(0, 133, '\p{^Is_Sentence_Break:		 sep}', "");
Expect(0, 133, '\P{Is_Sentence_Break:		 sep}', "");
Expect(1, 133, '\P{^Is_Sentence_Break:		 sep}', "");
Expect(0, 132, '\p{Is_Sentence_Break:		 sep}', "");
Expect(1, 132, '\p{^Is_Sentence_Break:		 sep}', "");
Expect(1, 132, '\P{Is_Sentence_Break:		 sep}', "");
Expect(0, 132, '\P{^Is_Sentence_Break:		 sep}', "");
Error('\p{Is_SB=/a/	se}');
Error('\P{Is_SB=/a/	se}');
Expect(1, 133, '\p{Is_SB=se}', "");
Expect(0, 133, '\p{^Is_SB=se}', "");
Expect(0, 133, '\P{Is_SB=se}', "");
Expect(1, 133, '\P{^Is_SB=se}', "");
Expect(0, 132, '\p{Is_SB=se}', "");
Expect(1, 132, '\p{^Is_SB=se}', "");
Expect(1, 132, '\P{Is_SB=se}', "");
Expect(0, 132, '\P{^Is_SB=se}', "");
Expect(1, 133, '\p{Is_SB=_SE}', "");
Expect(0, 133, '\p{^Is_SB=_SE}', "");
Expect(0, 133, '\P{Is_SB=_SE}', "");
Expect(1, 133, '\P{^Is_SB=_SE}', "");
Expect(0, 132, '\p{Is_SB=_SE}', "");
Expect(1, 132, '\p{^Is_SB=_SE}', "");
Expect(1, 132, '\P{Is_SB=_SE}', "");
Expect(0, 132, '\P{^Is_SB=_SE}', "");
Error('\p{Sentence_Break=/a/ EXTEND}');
Error('\P{Sentence_Break=/a/ EXTEND}');
Expect(1, 879, '\p{Sentence_Break=extend}', "");
Expect(0, 879, '\p{^Sentence_Break=extend}', "");
Expect(0, 879, '\P{Sentence_Break=extend}', "");
Expect(1, 879, '\P{^Sentence_Break=extend}', "");
Expect(0, 767, '\p{Sentence_Break=extend}', "");
Expect(1, 767, '\p{^Sentence_Break=extend}', "");
Expect(1, 767, '\P{Sentence_Break=extend}', "");
Expect(0, 767, '\P{^Sentence_Break=extend}', "");
Expect(1, 879, '\p{Sentence_Break=	-EXTEND}', "");
Expect(0, 879, '\p{^Sentence_Break=	-EXTEND}', "");
Expect(0, 879, '\P{Sentence_Break=	-EXTEND}', "");
Expect(1, 879, '\P{^Sentence_Break=	-EXTEND}', "");
Expect(0, 767, '\p{Sentence_Break=	-EXTEND}', "");
Expect(1, 767, '\p{^Sentence_Break=	-EXTEND}', "");
Expect(1, 767, '\P{Sentence_Break=	-EXTEND}', "");
Expect(0, 767, '\P{^Sentence_Break=	-EXTEND}', "");
Error('\p{SB= EX:=}');
Error('\P{SB= EX:=}');
Expect(1, 879, '\p{SB=ex}', "");
Expect(0, 879, '\p{^SB=ex}', "");
Expect(0, 879, '\P{SB=ex}', "");
Expect(1, 879, '\P{^SB=ex}', "");
Expect(0, 767, '\p{SB=ex}', "");
Expect(1, 767, '\p{^SB=ex}', "");
Expect(1, 767, '\P{SB=ex}', "");
Expect(0, 767, '\P{^SB=ex}', "");
Expect(1, 879, '\p{SB= -EX}', "");
Expect(0, 879, '\p{^SB= -EX}', "");
Expect(0, 879, '\P{SB= -EX}', "");
Expect(1, 879, '\P{^SB= -EX}', "");
Expect(0, 767, '\p{SB= -EX}', "");
Expect(1, 767, '\p{^SB= -EX}', "");
Expect(1, 767, '\P{SB= -EX}', "");
Expect(0, 767, '\P{^SB= -EX}', "");
Error('\p{Is_Sentence_Break=/a/		Extend}');
Error('\P{Is_Sentence_Break=/a/		Extend}');
Expect(1, 879, '\p{Is_Sentence_Break=extend}', "");
Expect(0, 879, '\p{^Is_Sentence_Break=extend}', "");
Expect(0, 879, '\P{Is_Sentence_Break=extend}', "");
Expect(1, 879, '\P{^Is_Sentence_Break=extend}', "");
Expect(0, 767, '\p{Is_Sentence_Break=extend}', "");
Expect(1, 767, '\p{^Is_Sentence_Break=extend}', "");
Expect(1, 767, '\P{Is_Sentence_Break=extend}', "");
Expect(0, 767, '\P{^Is_Sentence_Break=extend}', "");
Expect(1, 879, '\p{Is_Sentence_Break=--Extend}', "");
Expect(0, 879, '\p{^Is_Sentence_Break=--Extend}', "");
Expect(0, 879, '\P{Is_Sentence_Break=--Extend}', "");
Expect(1, 879, '\P{^Is_Sentence_Break=--Extend}', "");
Expect(0, 767, '\p{Is_Sentence_Break=--Extend}', "");
Expect(1, 767, '\p{^Is_Sentence_Break=--Extend}', "");
Expect(1, 767, '\P{Is_Sentence_Break=--Extend}', "");
Expect(0, 767, '\P{^Is_Sentence_Break=--Extend}', "");
Error('\p{Is_SB=/a/  EX}');
Error('\P{Is_SB=/a/  EX}');
Expect(1, 879, '\p{Is_SB=ex}', "");
Expect(0, 879, '\p{^Is_SB=ex}', "");
Expect(0, 879, '\P{Is_SB=ex}', "");
Expect(1, 879, '\P{^Is_SB=ex}', "");
Expect(0, 767, '\p{Is_SB=ex}', "");
Expect(1, 767, '\p{^Is_SB=ex}', "");
Expect(1, 767, '\P{Is_SB=ex}', "");
Expect(0, 767, '\P{^Is_SB=ex}', "");
Expect(1, 879, '\p{Is_SB=	-ex}', "");
Expect(0, 879, '\p{^Is_SB=	-ex}', "");
Expect(0, 879, '\P{Is_SB=	-ex}', "");
Expect(1, 879, '\P{^Is_SB=	-ex}', "");
Expect(0, 767, '\p{Is_SB=	-ex}', "");
Expect(1, 767, '\p{^Is_SB=	-ex}', "");
Expect(1, 767, '\P{Is_SB=	-ex}', "");
Expect(0, 767, '\P{^Is_SB=	-ex}', "");
Error('\p{Sentence_Break=STERM:=}');
Error('\P{Sentence_Break=STERM:=}');
Expect(1, 33, '\p{Sentence_Break:	sterm}', "");
Expect(0, 33, '\p{^Sentence_Break:	sterm}', "");
Expect(0, 33, '\P{Sentence_Break:	sterm}', "");
Expect(1, 33, '\P{^Sentence_Break:	sterm}', "");
Expect(0, 32, '\p{Sentence_Break:	sterm}', "");
Expect(1, 32, '\p{^Sentence_Break:	sterm}', "");
Expect(1, 32, '\P{Sentence_Break:	sterm}', "");
Expect(0, 32, '\P{^Sentence_Break:	sterm}', "");
Expect(1, 33, '\p{Sentence_Break=	STerm}', "");
Expect(0, 33, '\p{^Sentence_Break=	STerm}', "");
Expect(0, 33, '\P{Sentence_Break=	STerm}', "");
Expect(1, 33, '\P{^Sentence_Break=	STerm}', "");
Expect(0, 32, '\p{Sentence_Break=	STerm}', "");
Expect(1, 32, '\p{^Sentence_Break=	STerm}', "");
Expect(1, 32, '\P{Sentence_Break=	STerm}', "");
Expect(0, 32, '\P{^Sentence_Break=	STerm}', "");
Error('\p{SB=/a/_st}');
Error('\P{SB=/a/_st}');
Expect(1, 33, '\p{SB=st}', "");
Expect(0, 33, '\p{^SB=st}', "");
Expect(0, 33, '\P{SB=st}', "");
Expect(1, 33, '\P{^SB=st}', "");
Expect(0, 32, '\p{SB=st}', "");
Expect(1, 32, '\p{^SB=st}', "");
Expect(1, 32, '\P{SB=st}', "");
Expect(0, 32, '\P{^SB=st}', "");
Expect(1, 33, '\p{SB=--ST}', "");
Expect(0, 33, '\p{^SB=--ST}', "");
Expect(0, 33, '\P{SB=--ST}', "");
Expect(1, 33, '\P{^SB=--ST}', "");
Expect(0, 32, '\p{SB=--ST}', "");
Expect(1, 32, '\p{^SB=--ST}', "");
Expect(1, 32, '\P{SB=--ST}', "");
Expect(0, 32, '\P{^SB=--ST}', "");
Error('\p{Is_Sentence_Break:   	-STerm:=}');
Error('\P{Is_Sentence_Break:   	-STerm:=}');
Expect(1, 33, '\p{Is_Sentence_Break=sterm}', "");
Expect(0, 33, '\p{^Is_Sentence_Break=sterm}', "");
Expect(0, 33, '\P{Is_Sentence_Break=sterm}', "");
Expect(1, 33, '\P{^Is_Sentence_Break=sterm}', "");
Expect(0, 32, '\p{Is_Sentence_Break=sterm}', "");
Expect(1, 32, '\p{^Is_Sentence_Break=sterm}', "");
Expect(1, 32, '\P{Is_Sentence_Break=sterm}', "");
Expect(0, 32, '\P{^Is_Sentence_Break=sterm}', "");
Expect(1, 33, '\p{Is_Sentence_Break= sterm}', "");
Expect(0, 33, '\p{^Is_Sentence_Break= sterm}', "");
Expect(0, 33, '\P{Is_Sentence_Break= sterm}', "");
Expect(1, 33, '\P{^Is_Sentence_Break= sterm}', "");
Expect(0, 32, '\p{Is_Sentence_Break= sterm}', "");
Expect(1, 32, '\p{^Is_Sentence_Break= sterm}', "");
Expect(1, 32, '\P{Is_Sentence_Break= sterm}', "");
Expect(0, 32, '\P{^Is_Sentence_Break= sterm}', "");
Error('\p{Is_SB:   -:=st}');
Error('\P{Is_SB:   -:=st}');
Expect(1, 33, '\p{Is_SB=st}', "");
Expect(0, 33, '\p{^Is_SB=st}', "");
Expect(0, 33, '\P{Is_SB=st}', "");
Expect(1, 33, '\P{^Is_SB=st}', "");
Expect(0, 32, '\p{Is_SB=st}', "");
Expect(1, 32, '\p{^Is_SB=st}', "");
Expect(1, 32, '\P{Is_SB=st}', "");
Expect(0, 32, '\P{^Is_SB=st}', "");
Expect(1, 33, '\p{Is_SB=_ST}', "");
Expect(0, 33, '\p{^Is_SB=_ST}', "");
Expect(0, 33, '\P{Is_SB=_ST}', "");
Expect(1, 33, '\P{^Is_SB=_ST}', "");
Expect(0, 32, '\p{Is_SB=_ST}', "");
Expect(1, 32, '\p{^Is_SB=_ST}', "");
Expect(1, 32, '\P{Is_SB=_ST}', "");
Expect(0, 32, '\P{^Is_SB=_ST}', "");
Error('\p{Sentence_Break= :=LF}');
Error('\P{Sentence_Break= :=LF}');
Expect(1, 10, '\p{Sentence_Break=lf}', "");
Expect(0, 10, '\p{^Sentence_Break=lf}', "");
Expect(0, 10, '\P{Sentence_Break=lf}', "");
Expect(1, 10, '\P{^Sentence_Break=lf}', "");
Expect(0, 9, '\p{Sentence_Break=lf}', "");
Expect(1, 9, '\p{^Sentence_Break=lf}', "");
Expect(1, 9, '\P{Sentence_Break=lf}', "");
Expect(0, 9, '\P{^Sentence_Break=lf}', "");
Expect(1, 10, '\p{Sentence_Break=	-LF}', "");
Expect(0, 10, '\p{^Sentence_Break=	-LF}', "");
Expect(0, 10, '\P{Sentence_Break=	-LF}', "");
Expect(1, 10, '\P{^Sentence_Break=	-LF}', "");
Expect(0, 9, '\p{Sentence_Break=	-LF}', "");
Expect(1, 9, '\p{^Sentence_Break=	-LF}', "");
Expect(1, 9, '\P{Sentence_Break=	-LF}', "");
Expect(0, 9, '\P{^Sentence_Break=	-LF}', "");
Error('\p{SB=/a/_ lf}');
Error('\P{SB=/a/_ lf}');
Expect(1, 10, '\p{SB=lf}', "");
Expect(0, 10, '\p{^SB=lf}', "");
Expect(0, 10, '\P{SB=lf}', "");
Expect(1, 10, '\P{^SB=lf}', "");
Expect(0, 9, '\p{SB=lf}', "");
Expect(1, 9, '\p{^SB=lf}', "");
Expect(1, 9, '\P{SB=lf}', "");
Expect(0, 9, '\P{^SB=lf}', "");
Expect(1, 10, '\p{SB=_LF}', "");
Expect(0, 10, '\p{^SB=_LF}', "");
Expect(0, 10, '\P{SB=_LF}', "");
Expect(1, 10, '\P{^SB=_LF}', "");
Expect(0, 9, '\p{SB=_LF}', "");
Expect(1, 9, '\p{^SB=_LF}', "");
Expect(1, 9, '\P{SB=_LF}', "");
Expect(0, 9, '\P{^SB=_LF}', "");
Error('\p{Is_Sentence_Break=	/a/lf}');
Error('\P{Is_Sentence_Break=	/a/lf}');
Expect(1, 10, '\p{Is_Sentence_Break=lf}', "");
Expect(0, 10, '\p{^Is_Sentence_Break=lf}', "");
Expect(0, 10, '\P{Is_Sentence_Break=lf}', "");
Expect(1, 10, '\P{^Is_Sentence_Break=lf}', "");
Expect(0, 9, '\p{Is_Sentence_Break=lf}', "");
Expect(1, 9, '\p{^Is_Sentence_Break=lf}', "");
Expect(1, 9, '\P{Is_Sentence_Break=lf}', "");
Expect(0, 9, '\P{^Is_Sentence_Break=lf}', "");
Expect(1, 10, '\p{Is_Sentence_Break=  LF}', "");
Expect(0, 10, '\p{^Is_Sentence_Break=  LF}', "");
Expect(0, 10, '\P{Is_Sentence_Break=  LF}', "");
Expect(1, 10, '\P{^Is_Sentence_Break=  LF}', "");
Expect(0, 9, '\p{Is_Sentence_Break=  LF}', "");
Expect(1, 9, '\p{^Is_Sentence_Break=  LF}', "");
Expect(1, 9, '\P{Is_Sentence_Break=  LF}', "");
Expect(0, 9, '\P{^Is_Sentence_Break=  LF}', "");
Error('\p{Is_SB=:=__LF}');
Error('\P{Is_SB=:=__LF}');
Expect(1, 10, '\p{Is_SB=lf}', "");
Expect(0, 10, '\p{^Is_SB=lf}', "");
Expect(0, 10, '\P{Is_SB=lf}', "");
Expect(1, 10, '\P{^Is_SB=lf}', "");
Expect(0, 9, '\p{Is_SB=lf}', "");
Expect(1, 9, '\p{^Is_SB=lf}', "");
Expect(1, 9, '\P{Is_SB=lf}', "");
Expect(0, 9, '\P{^Is_SB=lf}', "");
Expect(1, 10, '\p{Is_SB:	 LF}', "");
Expect(0, 10, '\p{^Is_SB:	 LF}', "");
Expect(0, 10, '\P{Is_SB:	 LF}', "");
Expect(1, 10, '\P{^Is_SB:	 LF}', "");
Expect(0, 9, '\p{Is_SB:	 LF}', "");
Expect(1, 9, '\p{^Is_SB:	 LF}', "");
Expect(1, 9, '\P{Is_SB:	 LF}', "");
Expect(0, 9, '\P{^Is_SB:	 LF}', "");
Error('\p{Sentence_Break=/a/-	Close}');
Error('\P{Sentence_Break=/a/-	Close}');
Expect(1, 34, '\p{Sentence_Break=close}', "");
Expect(0, 34, '\p{^Sentence_Break=close}', "");
Expect(0, 34, '\P{Sentence_Break=close}', "");
Expect(1, 34, '\P{^Sentence_Break=close}', "");
Expect(0, 33, '\p{Sentence_Break=close}', "");
Expect(1, 33, '\p{^Sentence_Break=close}', "");
Expect(1, 33, '\P{Sentence_Break=close}', "");
Expect(0, 33, '\P{^Sentence_Break=close}', "");
Expect(1, 34, '\p{Sentence_Break=	close}', "");
Expect(0, 34, '\p{^Sentence_Break=	close}', "");
Expect(0, 34, '\P{Sentence_Break=	close}', "");
Expect(1, 34, '\P{^Sentence_Break=	close}', "");
Expect(0, 33, '\p{Sentence_Break=	close}', "");
Expect(1, 33, '\p{^Sentence_Break=	close}', "");
Expect(1, 33, '\P{Sentence_Break=	close}', "");
Expect(0, 33, '\P{^Sentence_Break=	close}', "");
Error('\p{SB=:=CL}');
Error('\P{SB=:=CL}');
Expect(1, 34, '\p{SB=cl}', "");
Expect(0, 34, '\p{^SB=cl}', "");
Expect(0, 34, '\P{SB=cl}', "");
Expect(1, 34, '\P{^SB=cl}', "");
Expect(0, 33, '\p{SB=cl}', "");
Expect(1, 33, '\p{^SB=cl}', "");
Expect(1, 33, '\P{SB=cl}', "");
Expect(0, 33, '\P{^SB=cl}', "");
Expect(1, 34, '\p{SB= cl}', "");
Expect(0, 34, '\p{^SB= cl}', "");
Expect(0, 34, '\P{SB= cl}', "");
Expect(1, 34, '\P{^SB= cl}', "");
Expect(0, 33, '\p{SB= cl}', "");
Expect(1, 33, '\p{^SB= cl}', "");
Expect(1, 33, '\P{SB= cl}', "");
Expect(0, 33, '\P{^SB= cl}', "");
Error('\p{Is_Sentence_Break=:=__Close}');
Error('\P{Is_Sentence_Break=:=__Close}');
Expect(1, 34, '\p{Is_Sentence_Break=close}', "");
Expect(0, 34, '\p{^Is_Sentence_Break=close}', "");
Expect(0, 34, '\P{Is_Sentence_Break=close}', "");
Expect(1, 34, '\P{^Is_Sentence_Break=close}', "");
Expect(0, 33, '\p{Is_Sentence_Break=close}', "");
Expect(1, 33, '\p{^Is_Sentence_Break=close}', "");
Expect(1, 33, '\P{Is_Sentence_Break=close}', "");
Expect(0, 33, '\P{^Is_Sentence_Break=close}', "");
Expect(1, 34, '\p{Is_Sentence_Break:	_close}', "");
Expect(0, 34, '\p{^Is_Sentence_Break:	_close}', "");
Expect(0, 34, '\P{Is_Sentence_Break:	_close}', "");
Expect(1, 34, '\P{^Is_Sentence_Break:	_close}', "");
Expect(0, 33, '\p{Is_Sentence_Break:	_close}', "");
Expect(1, 33, '\p{^Is_Sentence_Break:	_close}', "");
Expect(1, 33, '\P{Is_Sentence_Break:	_close}', "");
Expect(0, 33, '\P{^Is_Sentence_Break:	_close}', "");
Error('\p{Is_SB=/a/cl}');
Error('\P{Is_SB=/a/cl}');
Expect(1, 34, '\p{Is_SB=cl}', "");
Expect(0, 34, '\p{^Is_SB=cl}', "");
Expect(0, 34, '\P{Is_SB=cl}', "");
Expect(1, 34, '\P{^Is_SB=cl}', "");
Expect(0, 33, '\p{Is_SB=cl}', "");
Expect(1, 33, '\p{^Is_SB=cl}', "");
Expect(1, 33, '\P{Is_SB=cl}', "");
Expect(0, 33, '\P{^Is_SB=cl}', "");
Expect(1, 34, '\p{Is_SB=	CL}', "");
Expect(0, 34, '\p{^Is_SB=	CL}', "");
Expect(0, 34, '\P{Is_SB=	CL}', "");
Expect(1, 34, '\P{^Is_SB=	CL}', "");
Expect(0, 33, '\p{Is_SB=	CL}', "");
Expect(1, 33, '\p{^Is_SB=	CL}', "");
Expect(1, 33, '\P{Is_SB=	CL}', "");
Expect(0, 33, '\P{^Is_SB=	CL}', "");
Error('\p{Alphabetic= Yes:=}');
Error('\P{Alphabetic= Yes:=}');
Expect(1, 90, '\p{Alphabetic=yes}', "");
Expect(0, 90, '\p{^Alphabetic=yes}', "");
Expect(0, 90, '\P{Alphabetic=yes}', "");
Expect(1, 90, '\P{^Alphabetic=yes}', "");
Expect(0, 64, '\p{Alphabetic=yes}', "");
Expect(1, 64, '\p{^Alphabetic=yes}', "");
Expect(1, 64, '\P{Alphabetic=yes}', "");
Expect(0, 64, '\P{^Alphabetic=yes}', "");
Expect(1, 90, '\p{Alphabetic:   _yes}', "");
Expect(0, 90, '\p{^Alphabetic:   _yes}', "");
Expect(0, 90, '\P{Alphabetic:   _yes}', "");
Expect(1, 90, '\P{^Alphabetic:   _yes}', "");
Expect(0, 64, '\p{Alphabetic:   _yes}', "");
Expect(1, 64, '\p{^Alphabetic:   _yes}', "");
Expect(1, 64, '\P{Alphabetic:   _yes}', "");
Expect(0, 64, '\P{^Alphabetic:   _yes}', "");
Error('\p{Alpha=	-Y:=}');
Error('\P{Alpha=	-Y:=}');
Expect(1, 90, '\p{Alpha=y}', "");
Expect(0, 90, '\p{^Alpha=y}', "");
Expect(0, 90, '\P{Alpha=y}', "");
Expect(1, 90, '\P{^Alpha=y}', "");
Expect(0, 64, '\p{Alpha=y}', "");
Expect(1, 64, '\p{^Alpha=y}', "");
Expect(1, 64, '\P{Alpha=y}', "");
Expect(0, 64, '\P{^Alpha=y}', "");
Expect(1, 90, '\p{Alpha=_	Y}', "");
Expect(0, 90, '\p{^Alpha=_	Y}', "");
Expect(0, 90, '\P{Alpha=_	Y}', "");
Expect(1, 90, '\P{^Alpha=_	Y}', "");
Expect(0, 64, '\p{Alpha=_	Y}', "");
Expect(1, 64, '\p{^Alpha=_	Y}', "");
Expect(1, 64, '\P{Alpha=_	Y}', "");
Expect(0, 64, '\P{^Alpha=_	Y}', "");
Error('\p{Is_Alphabetic=-/a/t}');
Error('\P{Is_Alphabetic=-/a/t}');
Expect(1, 90, '\p{Is_Alphabetic=t}', "");
Expect(0, 90, '\p{^Is_Alphabetic=t}', "");
Expect(0, 90, '\P{Is_Alphabetic=t}', "");
Expect(1, 90, '\P{^Is_Alphabetic=t}', "");
Expect(0, 64, '\p{Is_Alphabetic=t}', "");
Expect(1, 64, '\p{^Is_Alphabetic=t}', "");
Expect(1, 64, '\P{Is_Alphabetic=t}', "");
Expect(0, 64, '\P{^Is_Alphabetic=t}', "");
Expect(1, 90, '\p{Is_Alphabetic:_ T}', "");
Expect(0, 90, '\p{^Is_Alphabetic:_ T}', "");
Expect(0, 90, '\P{Is_Alphabetic:_ T}', "");
Expect(1, 90, '\P{^Is_Alphabetic:_ T}', "");
Expect(0, 64, '\p{Is_Alphabetic:_ T}', "");
Expect(1, 64, '\p{^Is_Alphabetic:_ T}', "");
Expect(1, 64, '\P{Is_Alphabetic:_ T}', "");
Expect(0, 64, '\P{^Is_Alphabetic:_ T}', "");
Error('\p{Is_Alpha=_/a/true}');
Error('\P{Is_Alpha=_/a/true}');
Expect(1, 90, '\p{Is_Alpha=true}', "");
Expect(0, 90, '\p{^Is_Alpha=true}', "");
Expect(0, 90, '\P{Is_Alpha=true}', "");
Expect(1, 90, '\P{^Is_Alpha=true}', "");
Expect(0, 64, '\p{Is_Alpha=true}', "");
Expect(1, 64, '\p{^Is_Alpha=true}', "");
Expect(1, 64, '\P{Is_Alpha=true}', "");
Expect(0, 64, '\P{^Is_Alpha=true}', "");
Expect(1, 90, '\p{Is_Alpha:	-True}', "");
Expect(0, 90, '\p{^Is_Alpha:	-True}', "");
Expect(0, 90, '\P{Is_Alpha:	-True}', "");
Expect(1, 90, '\P{^Is_Alpha:	-True}', "");
Expect(0, 64, '\p{Is_Alpha:	-True}', "");
Expect(1, 64, '\p{^Is_Alpha:	-True}', "");
Expect(1, 64, '\P{Is_Alpha:	-True}', "");
Expect(0, 64, '\P{^Is_Alpha:	-True}', "");
Error('\p{Alphabetic=_-No/a/}');
Error('\P{Alphabetic=_-No/a/}');
Expect(1, 64, '\p{Alphabetic=no}', "");
Expect(0, 64, '\p{^Alphabetic=no}', "");
Expect(0, 64, '\P{Alphabetic=no}', "");
Expect(1, 64, '\P{^Alphabetic=no}', "");
Expect(0, 90, '\p{Alphabetic=no}', "");
Expect(1, 90, '\p{^Alphabetic=no}', "");
Expect(1, 90, '\P{Alphabetic=no}', "");
Expect(0, 90, '\P{^Alphabetic=no}', "");
Expect(1, 64, '\p{Alphabetic=	NO}', "");
Expect(0, 64, '\p{^Alphabetic=	NO}', "");
Expect(0, 64, '\P{Alphabetic=	NO}', "");
Expect(1, 64, '\P{^Alphabetic=	NO}', "");
Expect(0, 90, '\p{Alphabetic=	NO}', "");
Expect(1, 90, '\p{^Alphabetic=	NO}', "");
Expect(1, 90, '\P{Alphabetic=	NO}', "");
Expect(0, 90, '\P{^Alphabetic=	NO}', "");
Error('\p{Alpha= 	n/a/}');
Error('\P{Alpha= 	n/a/}');
Expect(1, 64, '\p{Alpha=n}', "");
Expect(0, 64, '\p{^Alpha=n}', "");
Expect(0, 64, '\P{Alpha=n}', "");
Expect(1, 64, '\P{^Alpha=n}', "");
Expect(0, 90, '\p{Alpha=n}', "");
Expect(1, 90, '\p{^Alpha=n}', "");
Expect(1, 90, '\P{Alpha=n}', "");
Expect(0, 90, '\P{^Alpha=n}', "");
Expect(1, 64, '\p{Alpha=N}', "");
Expect(0, 64, '\p{^Alpha=N}', "");
Expect(0, 64, '\P{Alpha=N}', "");
Expect(1, 64, '\P{^Alpha=N}', "");
Expect(0, 90, '\p{Alpha=N}', "");
Expect(1, 90, '\p{^Alpha=N}', "");
Expect(1, 90, '\P{Alpha=N}', "");
Expect(0, 90, '\P{^Alpha=N}', "");
Error('\p{Is_Alphabetic:-/a/f}');
Error('\P{Is_Alphabetic:-/a/f}');
Expect(1, 64, '\p{Is_Alphabetic=f}', "");
Expect(0, 64, '\p{^Is_Alphabetic=f}', "");
Expect(0, 64, '\P{Is_Alphabetic=f}', "");
Expect(1, 64, '\P{^Is_Alphabetic=f}', "");
Expect(0, 90, '\p{Is_Alphabetic=f}', "");
Expect(1, 90, '\p{^Is_Alphabetic=f}', "");
Expect(1, 90, '\P{Is_Alphabetic=f}', "");
Expect(0, 90, '\P{^Is_Alphabetic=f}', "");
Expect(1, 64, '\p{Is_Alphabetic= _F}', "");
Expect(0, 64, '\p{^Is_Alphabetic= _F}', "");
Expect(0, 64, '\P{Is_Alphabetic= _F}', "");
Expect(1, 64, '\P{^Is_Alphabetic= _F}', "");
Expect(0, 90, '\p{Is_Alphabetic= _F}', "");
Expect(1, 90, '\p{^Is_Alphabetic= _F}', "");
Expect(1, 90, '\P{Is_Alphabetic= _F}', "");
Expect(0, 90, '\P{^Is_Alphabetic= _F}', "");
Error('\p{Is_Alpha=_/a/False}');
Error('\P{Is_Alpha=_/a/False}');
Expect(1, 64, '\p{Is_Alpha=false}', "");
Expect(0, 64, '\p{^Is_Alpha=false}', "");
Expect(0, 64, '\P{Is_Alpha=false}', "");
Expect(1, 64, '\P{^Is_Alpha=false}', "");
Expect(0, 90, '\p{Is_Alpha=false}', "");
Expect(1, 90, '\p{^Is_Alpha=false}', "");
Expect(1, 90, '\P{Is_Alpha=false}', "");
Expect(0, 90, '\P{^Is_Alpha=false}', "");
Expect(1, 64, '\p{Is_Alpha= -False}', "");
Expect(0, 64, '\p{^Is_Alpha= -False}', "");
Expect(0, 64, '\P{Is_Alpha= -False}', "");
Expect(1, 64, '\P{^Is_Alpha= -False}', "");
Expect(0, 90, '\p{Is_Alpha= -False}', "");
Expect(1, 90, '\p{^Is_Alpha= -False}', "");
Expect(1, 90, '\P{Is_Alpha= -False}', "");
Expect(0, 90, '\P{^Is_Alpha= -False}', "");
Error('\p{Hex_Digit=_/a/YES}');
Error('\P{Hex_Digit=_/a/YES}');
Expect(1, 57, '\p{Hex_Digit=yes}', "");
Expect(0, 57, '\p{^Hex_Digit=yes}', "");
Expect(0, 57, '\P{Hex_Digit=yes}', "");
Expect(1, 57, '\P{^Hex_Digit=yes}', "");
Expect(0, 47, '\p{Hex_Digit=yes}', "");
Expect(1, 47, '\p{^Hex_Digit=yes}', "");
Expect(1, 47, '\P{Hex_Digit=yes}', "");
Expect(0, 47, '\P{^Hex_Digit=yes}', "");
Expect(1, 57, '\p{Hex_Digit=	_YES}', "");
Expect(0, 57, '\p{^Hex_Digit=	_YES}', "");
Expect(0, 57, '\P{Hex_Digit=	_YES}', "");
Expect(1, 57, '\P{^Hex_Digit=	_YES}', "");
Expect(0, 47, '\p{Hex_Digit=	_YES}', "");
Expect(1, 47, '\p{^Hex_Digit=	_YES}', "");
Expect(1, 47, '\P{Hex_Digit=	_YES}', "");
Expect(0, 47, '\P{^Hex_Digit=	_YES}', "");
Error('\p{Hex=:= _Y}');
Error('\P{Hex=:= _Y}');
Expect(1, 57, '\p{Hex=y}', "");
Expect(0, 57, '\p{^Hex=y}', "");
Expect(0, 57, '\P{Hex=y}', "");
Expect(1, 57, '\P{^Hex=y}', "");
Expect(0, 47, '\p{Hex=y}', "");
Expect(1, 47, '\p{^Hex=y}', "");
Expect(1, 47, '\P{Hex=y}', "");
Expect(0, 47, '\P{^Hex=y}', "");
Expect(1, 57, '\p{Hex=	Y}', "");
Expect(0, 57, '\p{^Hex=	Y}', "");
Expect(0, 57, '\P{Hex=	Y}', "");
Expect(1, 57, '\P{^Hex=	Y}', "");
Expect(0, 47, '\p{Hex=	Y}', "");
Expect(1, 47, '\p{^Hex=	Y}', "");
Expect(1, 47, '\P{Hex=	Y}', "");
Expect(0, 47, '\P{^Hex=	Y}', "");
Error('\p{Is_Hex_Digit=-_t/a/}');
Error('\P{Is_Hex_Digit=-_t/a/}');
Expect(1, 57, '\p{Is_Hex_Digit=t}', "");
Expect(0, 57, '\p{^Is_Hex_Digit=t}', "");
Expect(0, 57, '\P{Is_Hex_Digit=t}', "");
Expect(1, 57, '\P{^Is_Hex_Digit=t}', "");
Expect(0, 47, '\p{Is_Hex_Digit=t}', "");
Expect(1, 47, '\p{^Is_Hex_Digit=t}', "");
Expect(1, 47, '\P{Is_Hex_Digit=t}', "");
Expect(0, 47, '\P{^Is_Hex_Digit=t}', "");
Expect(1, 57, '\p{Is_Hex_Digit=_T}', "");
Expect(0, 57, '\p{^Is_Hex_Digit=_T}', "");
Expect(0, 57, '\P{Is_Hex_Digit=_T}', "");
Expect(1, 57, '\P{^Is_Hex_Digit=_T}', "");
Expect(0, 47, '\p{Is_Hex_Digit=_T}', "");
Expect(1, 47, '\p{^Is_Hex_Digit=_T}', "");
Expect(1, 47, '\P{Is_Hex_Digit=_T}', "");
Expect(0, 47, '\P{^Is_Hex_Digit=_T}', "");
Error('\p{Is_Hex=_:=TRUE}');
Error('\P{Is_Hex=_:=TRUE}');
Expect(1, 57, '\p{Is_Hex=true}', "");
Expect(0, 57, '\p{^Is_Hex=true}', "");
Expect(0, 57, '\P{Is_Hex=true}', "");
Expect(1, 57, '\P{^Is_Hex=true}', "");
Expect(0, 47, '\p{Is_Hex=true}', "");
Expect(1, 47, '\p{^Is_Hex=true}', "");
Expect(1, 47, '\P{Is_Hex=true}', "");
Expect(0, 47, '\P{^Is_Hex=true}', "");
Expect(1, 57, '\p{Is_Hex=- TRUE}', "");
Expect(0, 57, '\p{^Is_Hex=- TRUE}', "");
Expect(0, 57, '\P{Is_Hex=- TRUE}', "");
Expect(1, 57, '\P{^Is_Hex=- TRUE}', "");
Expect(0, 47, '\p{Is_Hex=- TRUE}', "");
Expect(1, 47, '\p{^Is_Hex=- TRUE}', "");
Expect(1, 47, '\P{Is_Hex=- TRUE}', "");
Expect(0, 47, '\P{^Is_Hex=- TRUE}', "");
Error('\p{Hex_Digit=-No/a/}');
Error('\P{Hex_Digit=-No/a/}');
Expect(1, 47, '\p{Hex_Digit=no}', "");
Expect(0, 47, '\p{^Hex_Digit=no}', "");
Expect(0, 47, '\P{Hex_Digit=no}', "");
Expect(1, 47, '\P{^Hex_Digit=no}', "");
Expect(0, 57, '\p{Hex_Digit=no}', "");
Expect(1, 57, '\p{^Hex_Digit=no}', "");
Expect(1, 57, '\P{Hex_Digit=no}', "");
Expect(0, 57, '\P{^Hex_Digit=no}', "");
Expect(1, 47, '\p{Hex_Digit=	-No}', "");
Expect(0, 47, '\p{^Hex_Digit=	-No}', "");
Expect(0, 47, '\P{Hex_Digit=	-No}', "");
Expect(1, 47, '\P{^Hex_Digit=	-No}', "");
Expect(0, 57, '\p{Hex_Digit=	-No}', "");
Expect(1, 57, '\p{^Hex_Digit=	-No}', "");
Expect(1, 57, '\P{Hex_Digit=	-No}', "");
Expect(0, 57, '\P{^Hex_Digit=	-No}', "");
Error('\p{Hex:    	N/a/}');
Error('\P{Hex:    	N/a/}');
Expect(1, 47, '\p{Hex=n}', "");
Expect(0, 47, '\p{^Hex=n}', "");
Expect(0, 47, '\P{Hex=n}', "");
Expect(1, 47, '\P{^Hex=n}', "");
Expect(0, 57, '\p{Hex=n}', "");
Expect(1, 57, '\p{^Hex=n}', "");
Expect(1, 57, '\P{Hex=n}', "");
Expect(0, 57, '\P{^Hex=n}', "");
Expect(1, 47, '\p{Hex=	_N}', "");
Expect(0, 47, '\p{^Hex=	_N}', "");
Expect(0, 47, '\P{Hex=	_N}', "");
Expect(1, 47, '\P{^Hex=	_N}', "");
Expect(0, 57, '\p{Hex=	_N}', "");
Expect(1, 57, '\p{^Hex=	_N}', "");
Expect(1, 57, '\P{Hex=	_N}', "");
Expect(0, 57, '\P{^Hex=	_N}', "");
Error('\p{Is_Hex_Digit= F/a/}');
Error('\P{Is_Hex_Digit= F/a/}');
Expect(1, 47, '\p{Is_Hex_Digit=f}', "");
Expect(0, 47, '\p{^Is_Hex_Digit=f}', "");
Expect(0, 47, '\P{Is_Hex_Digit=f}', "");
Expect(1, 47, '\P{^Is_Hex_Digit=f}', "");
Expect(0, 57, '\p{Is_Hex_Digit=f}', "");
Expect(1, 57, '\p{^Is_Hex_Digit=f}', "");
Expect(1, 57, '\P{Is_Hex_Digit=f}', "");
Expect(0, 57, '\P{^Is_Hex_Digit=f}', "");
Error('\p{Is_Hex=	FALSE/a/}');
Error('\P{Is_Hex=	FALSE/a/}');
Expect(1, 47, '\p{Is_Hex=false}', "");
Expect(0, 47, '\p{^Is_Hex=false}', "");
Expect(0, 47, '\P{Is_Hex=false}', "");
Expect(1, 47, '\P{^Is_Hex=false}', "");
Expect(0, 57, '\p{Is_Hex=false}', "");
Expect(1, 57, '\p{^Is_Hex=false}', "");
Expect(1, 57, '\P{Is_Hex=false}', "");
Expect(0, 57, '\P{^Is_Hex=false}', "");
Expect(1, 47, '\p{Is_Hex=_false}', "");
Expect(0, 47, '\p{^Is_Hex=_false}', "");
Expect(0, 47, '\P{Is_Hex=_false}', "");
Expect(1, 47, '\P{^Is_Hex=_false}', "");
Expect(0, 57, '\p{Is_Hex=_false}', "");
Expect(1, 57, '\p{^Is_Hex=_false}', "");
Expect(1, 57, '\P{Is_Hex=_false}', "");
Expect(0, 57, '\P{^Is_Hex=_false}', "");
Error('\p{Canonical_Combining_Class=/a/--00000000032}');
Error('\P{Canonical_Combining_Class=/a/--00000000032}');
Expect(1, 1562, '\p{Canonical_Combining_Class=000000032}', "");
Expect(0, 1562, '\p{^Canonical_Combining_Class=000000032}', "");
Expect(0, 1562, '\P{Canonical_Combining_Class=000000032}', "");
Expect(1, 1562, '\P{^Canonical_Combining_Class=000000032}', "");
Expect(0, 1561, '\p{Canonical_Combining_Class=000000032}', "");
Expect(1, 1561, '\p{^Canonical_Combining_Class=000000032}', "");
Expect(1, 1561, '\P{Canonical_Combining_Class=000000032}', "");
Expect(0, 1561, '\P{^Canonical_Combining_Class=000000032}', "");
Error('\p{Ccc:	  +0:=0 0	00_0-0-032}');
Error('\P{Ccc:	  +0:=0 0	00_0-0-032}');
Expect(1, 1562, '\p{Ccc=00_03_2}', "");
Expect(0, 1562, '\p{^Ccc=00_03_2}', "");
Expect(0, 1562, '\P{Ccc=00_03_2}', "");
Expect(1, 1562, '\P{^Ccc=00_03_2}', "");
Expect(0, 1561, '\p{Ccc=00_03_2}', "");
Expect(1, 1561, '\p{^Ccc=00_03_2}', "");
Expect(1, 1561, '\P{Ccc=00_03_2}', "");
Expect(0, 1561, '\P{^Ccc=00_03_2}', "");
Error('\p{Is_Canonical_Combining_Class=00:=00	00 00 32}');
Error('\P{Is_Canonical_Combining_Class=00:=00	00 00 32}');
Expect(1, 1562, '\p{Is_Canonical_Combining_Class=0000032}', "");
Expect(0, 1562, '\p{^Is_Canonical_Combining_Class=0000032}', "");
Expect(0, 1562, '\P{Is_Canonical_Combining_Class=0000032}', "");
Expect(1, 1562, '\P{^Is_Canonical_Combining_Class=0000032}', "");
Expect(0, 1561, '\p{Is_Canonical_Combining_Class=0000032}', "");
Expect(1, 1561, '\p{^Is_Canonical_Combining_Class=0000032}', "");
Expect(1, 1561, '\P{Is_Canonical_Combining_Class=0000032}', "");
Expect(0, 1561, '\P{^Is_Canonical_Combining_Class=0000032}', "");
Error('\p{Is_Ccc: /a/+00032}');
Error('\P{Is_Ccc: /a/+00032}');
Expect(1, 1562, '\p{Is_Ccc=0000000032}', "");
Expect(0, 1562, '\p{^Is_Ccc=0000000032}', "");
Expect(0, 1562, '\P{Is_Ccc=0000000032}', "");
Expect(1, 1562, '\P{^Is_Ccc=0000000032}', "");
Expect(0, 1561, '\p{Is_Ccc=0000000032}', "");
Expect(1, 1561, '\p{^Is_Ccc=0000000032}', "");
Expect(1, 1561, '\P{Is_Ccc=0000000032}', "");
Expect(0, 1561, '\P{^Is_Ccc=0000000032}', "");
Error('\p{Canonical_Combining_Class=:=	000118}');
Error('\P{Canonical_Combining_Class=:=	000118}');
Expect(1, 3769, '\p{Canonical_Combining_Class=+0000000118}', "");
Expect(0, 3769, '\p{^Canonical_Combining_Class=+0000000118}', "");
Expect(0, 3769, '\P{Canonical_Combining_Class=+0000000118}', "");
Expect(1, 3769, '\P{^Canonical_Combining_Class=+0000000118}', "");
Expect(0, 3767, '\p{Canonical_Combining_Class=+0000000118}', "");
Expect(1, 3767, '\p{^Canonical_Combining_Class=+0000000118}', "");
Expect(1, 3767, '\P{Canonical_Combining_Class=+0000000118}', "");
Expect(0, 3767, '\P{^Canonical_Combining_Class=+0000000118}', "");
Error('\p{Ccc=	/a/000118}');
Error('\P{Ccc=	/a/000118}');
Expect(1, 3769, '\p{Ccc=0_0_0_0_0_00118}', "");
Expect(0, 3769, '\p{^Ccc=0_0_0_0_0_00118}', "");
Expect(0, 3769, '\P{Ccc=0_0_0_0_0_00118}', "");
Expect(1, 3769, '\P{^Ccc=0_0_0_0_0_00118}', "");
Expect(0, 3767, '\p{Ccc=0_0_0_0_0_00118}', "");
Expect(1, 3767, '\p{^Ccc=0_0_0_0_0_00118}', "");
Expect(1, 3767, '\P{Ccc=0_0_0_0_0_00118}', "");
Expect(0, 3767, '\P{^Ccc=0_0_0_0_0_00118}', "");
Error('\p{Is_Canonical_Combining_Class=/a/+0000118}');
Error('\P{Is_Canonical_Combining_Class=/a/+0000118}');
Expect(1, 3769, '\p{Is_Canonical_Combining_Class=118}', "");
Expect(0, 3769, '\p{^Is_Canonical_Combining_Class=118}', "");
Expect(0, 3769, '\P{Is_Canonical_Combining_Class=118}', "");
Expect(1, 3769, '\P{^Is_Canonical_Combining_Class=118}', "");
Expect(0, 3767, '\p{Is_Canonical_Combining_Class=118}', "");
Expect(1, 3767, '\p{^Is_Canonical_Combining_Class=118}', "");
Expect(1, 3767, '\P{Is_Canonical_Combining_Class=118}', "");
Expect(0, 3767, '\P{^Is_Canonical_Combining_Class=118}', "");
Error('\p{Is_Ccc=-:=0_0	00 0-0	1-18}');
Error('\P{Is_Ccc=-:=0_0	00 0-0	1-18}');
Expect(1, 3769, '\p{Is_Ccc=000000118}', "");
Expect(0, 3769, '\p{^Is_Ccc=000000118}', "");
Expect(0, 3769, '\P{Is_Ccc=000000118}', "");
Expect(1, 3769, '\P{^Is_Ccc=000000118}', "");
Expect(0, 3767, '\p{Is_Ccc=000000118}', "");
Expect(1, 3767, '\p{^Is_Ccc=000000118}', "");
Expect(1, 3767, '\P{Is_Ccc=000000118}', "");
Expect(0, 3767, '\P{^Is_Ccc=000000118}', "");
Error('\p{Canonical_Combining_Class=/a/double ABOVE}');
Error('\P{Canonical_Combining_Class=/a/double ABOVE}');
Expect(1, 862, '\p{Canonical_Combining_Class:   doubleabove}', "");
Expect(0, 862, '\p{^Canonical_Combining_Class:   doubleabove}', "");
Expect(0, 862, '\P{Canonical_Combining_Class:   doubleabove}', "");
Expect(1, 862, '\P{^Canonical_Combining_Class:   doubleabove}', "");
Expect(0, 860, '\p{Canonical_Combining_Class:   doubleabove}', "");
Expect(1, 860, '\p{^Canonical_Combining_Class:   doubleabove}', "");
Expect(1, 860, '\P{Canonical_Combining_Class:   doubleabove}', "");
Expect(0, 860, '\P{^Canonical_Combining_Class:   doubleabove}', "");
Expect(1, 862, '\p{Canonical_Combining_Class=	-doubleAbove}', "");
Expect(0, 862, '\p{^Canonical_Combining_Class=	-doubleAbove}', "");
Expect(0, 862, '\P{Canonical_Combining_Class=	-doubleAbove}', "");
Expect(1, 862, '\P{^Canonical_Combining_Class=	-doubleAbove}', "");
Expect(0, 860, '\p{Canonical_Combining_Class=	-doubleAbove}', "");
Expect(1, 860, '\p{^Canonical_Combining_Class=	-doubleAbove}', "");
Expect(1, 860, '\P{Canonical_Combining_Class=	-doubleAbove}', "");
Expect(0, 860, '\P{^Canonical_Combining_Class=	-doubleAbove}', "");
Error('\p{Ccc=:= DA}');
Error('\P{Ccc=:= DA}');
Expect(1, 862, '\p{Ccc=da}', "");
Expect(0, 862, '\p{^Ccc=da}', "");
Expect(0, 862, '\P{Ccc=da}', "");
Expect(1, 862, '\P{^Ccc=da}', "");
Expect(0, 860, '\p{Ccc=da}', "");
Expect(1, 860, '\p{^Ccc=da}', "");
Expect(1, 860, '\P{Ccc=da}', "");
Expect(0, 860, '\P{^Ccc=da}', "");
Expect(1, 862, '\p{Ccc=		DA}', "");
Expect(0, 862, '\p{^Ccc=		DA}', "");
Expect(0, 862, '\P{Ccc=		DA}', "");
Expect(1, 862, '\P{^Ccc=		DA}', "");
Expect(0, 860, '\p{Ccc=		DA}', "");
Expect(1, 860, '\p{^Ccc=		DA}', "");
Expect(1, 860, '\P{Ccc=		DA}', "");
Expect(0, 860, '\P{^Ccc=		DA}', "");
Error('\p{Is_Canonical_Combining_Class=:= _0000234}');
Error('\P{Is_Canonical_Combining_Class=:= _0000234}');
Expect(1, 862, '\p{Is_Canonical_Combining_Class=0234}', "");
Expect(0, 862, '\p{^Is_Canonical_Combining_Class=0234}', "");
Expect(0, 862, '\P{Is_Canonical_Combining_Class=0234}', "");
Expect(1, 862, '\P{^Is_Canonical_Combining_Class=0234}', "");
Expect(0, 860, '\p{Is_Canonical_Combining_Class=0234}', "");
Expect(1, 860, '\p{^Is_Canonical_Combining_Class=0234}', "");
Expect(1, 860, '\P{Is_Canonical_Combining_Class=0234}', "");
Expect(0, 860, '\P{^Is_Canonical_Combining_Class=0234}', "");
Error('\p{Is_Ccc=:=-	Double above}');
Error('\P{Is_Ccc=:=-	Double above}');
Expect(1, 862, '\p{Is_Ccc=doubleabove}', "");
Expect(0, 862, '\p{^Is_Ccc=doubleabove}', "");
Expect(0, 862, '\P{Is_Ccc=doubleabove}', "");
Expect(1, 862, '\P{^Is_Ccc=doubleabove}', "");
Expect(0, 860, '\p{Is_Ccc=doubleabove}', "");
Expect(1, 860, '\p{^Is_Ccc=doubleabove}', "");
Expect(1, 860, '\P{Is_Ccc=doubleabove}', "");
Expect(0, 860, '\P{^Is_Ccc=doubleabove}', "");
Expect(1, 862, '\p{Is_Ccc: _double ABOVE}', "");
Expect(0, 862, '\p{^Is_Ccc: _double ABOVE}', "");
Expect(0, 862, '\P{Is_Ccc: _double ABOVE}', "");
Expect(1, 862, '\P{^Is_Ccc: _double ABOVE}', "");
Expect(0, 860, '\p{Is_Ccc: _double ABOVE}', "");
Expect(1, 860, '\p{^Is_Ccc: _double ABOVE}', "");
Expect(1, 860, '\P{Is_Ccc: _double ABOVE}', "");
Expect(0, 860, '\P{^Is_Ccc: _double ABOVE}', "");
Error('\p{Canonical_Combining_Class=_/a/ATTACHEDbelow Left}');
Error('\P{Canonical_Combining_Class=_/a/ATTACHEDbelow Left}');
Expect(0, 1, '\p{Canonical_Combining_Class=attachedbelowleft}', "");
Expect(1, 1, '\p{^Canonical_Combining_Class=attachedbelowleft}', "");
Expect(1, 1, '\P{Canonical_Combining_Class=attachedbelowleft}', "");
Expect(0, 1, '\P{^Canonical_Combining_Class=attachedbelowleft}', "");
Expect(0, 1, '\p{Canonical_Combining_Class=--Attached	Below_Left}', "");
Expect(1, 1, '\p{^Canonical_Combining_Class=--Attached	Below_Left}', "");
Expect(1, 1, '\P{Canonical_Combining_Class=--Attached	Below_Left}', "");
Expect(0, 1, '\P{^Canonical_Combining_Class=--Attached	Below_Left}', "");
Error('\p{Ccc=:=_atbl}');
Error('\P{Ccc=:=_atbl}');
Expect(0, 1, '\p{Ccc=atbl}', "");
Expect(1, 1, '\p{^Ccc=atbl}', "");
Expect(1, 1, '\P{Ccc=atbl}', "");
Expect(0, 1, '\P{^Ccc=atbl}', "");
Expect(0, 1, '\p{Ccc:   __ATBL}', "");
Expect(1, 1, '\p{^Ccc:   __ATBL}', "");
Expect(1, 1, '\P{Ccc:   __ATBL}', "");
Expect(0, 1, '\P{^Ccc:   __ATBL}', "");
Error('\p{Is_Canonical_Combining_Class=-:=0000000200}');
Error('\P{Is_Canonical_Combining_Class=-:=0000000200}');
Expect(0, 1, '\p{Is_Canonical_Combining_Class=000000200}', "");
Expect(1, 1, '\p{^Is_Canonical_Combining_Class=000000200}', "");
Expect(1, 1, '\P{Is_Canonical_Combining_Class=000000200}', "");
Expect(0, 1, '\P{^Is_Canonical_Combining_Class=000000200}', "");
Error('\p{Is_Ccc:   -/a/AttachedBELOW	LEFT}');
Error('\P{Is_Ccc:   -/a/AttachedBELOW	LEFT}');
Expect(0, 1, '\p{Is_Ccc=attachedbelowleft}', "");
Expect(1, 1, '\p{^Is_Ccc=attachedbelowleft}', "");
Expect(1, 1, '\P{Is_Ccc=attachedbelowleft}', "");
Expect(0, 1, '\P{^Is_Ccc=attachedbelowleft}', "");
Expect(0, 1, '\p{Is_Ccc=- Attached belowleft}', "");
Expect(1, 1, '\p{^Is_Ccc=- Attached belowleft}', "");
Expect(1, 1, '\P{Is_Ccc=- Attached belowleft}', "");
Expect(0, 1, '\P{^Is_Ccc=- Attached belowleft}', "");
Error('\p{Canonical_Combining_Class=_/a/0	0 0_0 18}');
Error('\P{Canonical_Combining_Class=_/a/0	0 0_0 18}');
Expect(1, 1464, '\p{Canonical_Combining_Class=+0_0_0_0_0_0_18}', "");
Expect(0, 1464, '\p{^Canonical_Combining_Class=+0_0_0_0_0_0_18}', "");
Expect(0, 1464, '\P{Canonical_Combining_Class=+0_0_0_0_0_0_18}', "");
Expect(1, 1464, '\P{^Canonical_Combining_Class=+0_0_0_0_0_0_18}', "");
Expect(0, 1463, '\p{Canonical_Combining_Class=+0_0_0_0_0_0_18}', "");
Expect(1, 1463, '\p{^Canonical_Combining_Class=+0_0_0_0_0_0_18}', "");
Expect(1, 1463, '\P{Canonical_Combining_Class=+0_0_0_0_0_0_18}', "");
Expect(0, 1463, '\P{^Canonical_Combining_Class=+0_0_0_0_0_0_18}', "");
Error('\p{Ccc=-_0000000018/a/}');
Error('\P{Ccc=-_0000000018/a/}');
Expect(1, 1464, '\p{Ccc=+00_00_00_00_01_8}', "");
Expect(0, 1464, '\p{^Ccc=+00_00_00_00_01_8}', "");
Expect(0, 1464, '\P{Ccc=+00_00_00_00_01_8}', "");
Expect(1, 1464, '\P{^Ccc=+00_00_00_00_01_8}', "");
Expect(0, 1463, '\p{Ccc=+00_00_00_00_01_8}', "");
Expect(1, 1463, '\p{^Ccc=+00_00_00_00_01_8}', "");
Expect(1, 1463, '\P{Ccc=+00_00_00_00_01_8}', "");
Expect(0, 1463, '\P{^Ccc=+00_00_00_00_01_8}', "");
Error('\p{Is_Canonical_Combining_Class:   _ 00001_8/a/}');
Error('\P{Is_Canonical_Combining_Class:   _ 00001_8/a/}');
Expect(1, 1464, '\p{Is_Canonical_Combining_Class=1_8}', "");
Expect(0, 1464, '\p{^Is_Canonical_Combining_Class=1_8}', "");
Expect(0, 1464, '\P{Is_Canonical_Combining_Class=1_8}', "");
Expect(1, 1464, '\P{^Is_Canonical_Combining_Class=1_8}', "");
Expect(0, 1463, '\p{Is_Canonical_Combining_Class=1_8}', "");
Expect(1, 1463, '\p{^Is_Canonical_Combining_Class=1_8}', "");
Expect(1, 1463, '\P{Is_Canonical_Combining_Class=1_8}', "");
Expect(0, 1463, '\P{^Is_Canonical_Combining_Class=1_8}', "");
Error('\p{Is_Ccc=	018:=}');
Error('\P{Is_Ccc=	018:=}');
Expect(1, 1464, '\p{Is_Ccc:   0000000001_8}', "");
Expect(0, 1464, '\p{^Is_Ccc:   0000000001_8}', "");
Expect(0, 1464, '\P{Is_Ccc:   0000000001_8}', "");
Expect(1, 1464, '\P{^Is_Ccc:   0000000001_8}', "");
Expect(0, 1463, '\p{Is_Ccc:   0000000001_8}', "");
Expect(1, 1463, '\p{^Is_Ccc:   0000000001_8}', "");
Expect(1, 1463, '\P{Is_Ccc:   0000000001_8}', "");
Expect(0, 1463, '\P{^Is_Ccc:   0000000001_8}', "");
Error('\p{Canonical_Combining_Class=:=-_+016}');
Error('\P{Canonical_Combining_Class=:=-_+016}');
Expect(1, 1462, '\p{Canonical_Combining_Class=1_6}', "");
Expect(0, 1462, '\p{^Canonical_Combining_Class=1_6}', "");
Expect(0, 1462, '\P{Canonical_Combining_Class=1_6}', "");
Expect(1, 1462, '\P{^Canonical_Combining_Class=1_6}', "");
Expect(0, 1461, '\p{Canonical_Combining_Class=1_6}', "");
Expect(1, 1461, '\p{^Canonical_Combining_Class=1_6}', "");
Expect(1, 1461, '\P{Canonical_Combining_Class=1_6}', "");
Expect(0, 1461, '\P{^Canonical_Combining_Class=1_6}', "");
Error('\p{Ccc=:=  1	6}');
Error('\P{Ccc=:=  1	6}');
Expect(1, 1462, '\p{Ccc=00000016}', "");
Expect(0, 1462, '\p{^Ccc=00000016}', "");
Expect(0, 1462, '\P{Ccc=00000016}', "");
Expect(1, 1462, '\P{^Ccc=00000016}', "");
Expect(0, 1461, '\p{Ccc=00000016}', "");
Expect(1, 1461, '\p{^Ccc=00000016}', "");
Expect(1, 1461, '\P{Ccc=00000016}', "");
Expect(0, 1461, '\P{^Ccc=00000016}', "");
Error('\p{Is_Canonical_Combining_Class=-0-0/a/0	0-0	0 0-016}');
Error('\P{Is_Canonical_Combining_Class=-0-0/a/0	0-0	0 0-016}');
Expect(1, 1462, '\p{Is_Canonical_Combining_Class=016}', "");
Expect(0, 1462, '\p{^Is_Canonical_Combining_Class=016}', "");
Expect(0, 1462, '\P{Is_Canonical_Combining_Class=016}', "");
Expect(1, 1462, '\P{^Is_Canonical_Combining_Class=016}', "");
Expect(0, 1461, '\p{Is_Canonical_Combining_Class=016}', "");
Expect(1, 1461, '\p{^Is_Canonical_Combining_Class=016}', "");
Expect(1, 1461, '\P{Is_Canonical_Combining_Class=016}', "");
Expect(0, 1461, '\P{^Is_Canonical_Combining_Class=016}', "");
Error('\p{Is_Ccc= 0	0:=0-00000016}');
Error('\P{Is_Ccc= 0	0:=0-00000016}');
Expect(1, 1462, '\p{Is_Ccc=00016}', "");
Expect(0, 1462, '\p{^Is_Ccc=00016}', "");
Expect(0, 1462, '\P{Is_Ccc=00016}', "");
Expect(1, 1462, '\P{^Is_Ccc=00016}', "");
Expect(0, 1461, '\p{Is_Ccc=00016}', "");
Expect(1, 1461, '\p{^Is_Ccc=00016}', "");
Expect(1, 1461, '\P{Is_Ccc=00016}', "");
Expect(0, 1461, '\P{^Is_Ccc=00016}', "");
Error('\p{Canonical_Combining_Class=_/a/0-0_0 0_0_0	00	84}');
Error('\P{Canonical_Combining_Class=_/a/0-0_0 0_0_0	00	84}');
Expect(1, 3157, '\p{Canonical_Combining_Class=+84}', "");
Expect(0, 3157, '\p{^Canonical_Combining_Class=+84}', "");
Expect(0, 3157, '\P{Canonical_Combining_Class=+84}', "");
Expect(1, 3157, '\P{^Canonical_Combining_Class=+84}', "");
Expect(0, 3156, '\p{Canonical_Combining_Class=+84}', "");
Expect(1, 3156, '\p{^Canonical_Combining_Class=+84}', "");
Expect(1, 3156, '\P{Canonical_Combining_Class=+84}', "");
Expect(0, 3156, '\P{^Canonical_Combining_Class=+84}', "");
Error('\p{Ccc=- 084:=}');
Error('\P{Ccc=- 084:=}');
Expect(1, 3157, '\p{Ccc=08_4}', "");
Expect(0, 3157, '\p{^Ccc=08_4}', "");
Expect(0, 3157, '\P{Ccc=08_4}', "");
Expect(1, 3157, '\P{^Ccc=08_4}', "");
Expect(0, 3156, '\p{Ccc=08_4}', "");
Expect(1, 3156, '\p{^Ccc=08_4}', "");
Expect(1, 3156, '\P{Ccc=08_4}', "");
Expect(0, 3156, '\P{^Ccc=08_4}', "");
Error('\p{Is_Canonical_Combining_Class=__000000084/a/}');
Error('\P{Is_Canonical_Combining_Class=__000000084/a/}');
Expect(1, 3157, '\p{Is_Canonical_Combining_Class=084}', "");
Expect(0, 3157, '\p{^Is_Canonical_Combining_Class=084}', "");
Expect(0, 3157, '\P{Is_Canonical_Combining_Class=084}', "");
Expect(1, 3157, '\P{^Is_Canonical_Combining_Class=084}', "");
Expect(0, 3156, '\p{Is_Canonical_Combining_Class=084}', "");
Expect(1, 3156, '\p{^Is_Canonical_Combining_Class=084}', "");
Expect(1, 3156, '\P{Is_Canonical_Combining_Class=084}', "");
Expect(0, 3156, '\P{^Is_Canonical_Combining_Class=084}', "");
Error('\p{Is_Ccc=:= 000084}');
Error('\P{Is_Ccc=:= 000084}');
Expect(1, 3157, '\p{Is_Ccc=0_0_0_0_0_00084}', "");
Expect(0, 3157, '\p{^Is_Ccc=0_0_0_0_0_00084}', "");
Expect(0, 3157, '\P{Is_Ccc=0_0_0_0_0_00084}', "");
Expect(1, 3157, '\P{^Is_Ccc=0_0_0_0_0_00084}', "");
Expect(0, 3156, '\p{Is_Ccc=0_0_0_0_0_00084}', "");
Expect(1, 3156, '\p{^Is_Ccc=0_0_0_0_0_00084}', "");
Expect(1, 3156, '\P{Is_Ccc=0_0_0_0_0_00084}', "");
Expect(0, 3156, '\P{^Is_Ccc=0_0_0_0_0_00084}', "");
Error('\p{Canonical_Combining_Class=  0:=0	0-0_0 0-0-0_027}');
Error('\P{Canonical_Combining_Class=  0:=0	0-0_0 0-0-0_027}');
Expect(1, 1611, '\p{Canonical_Combining_Class=02_7}', "");
Expect(0, 1611, '\p{^Canonical_Combining_Class=02_7}', "");
Expect(0, 1611, '\P{Canonical_Combining_Class=02_7}', "");
Expect(1, 1611, '\P{^Canonical_Combining_Class=02_7}', "");
Expect(0, 1610, '\p{Canonical_Combining_Class=02_7}', "");
Expect(1, 1610, '\p{^Canonical_Combining_Class=02_7}', "");
Expect(1, 1610, '\P{Canonical_Combining_Class=02_7}', "");
Expect(0, 1610, '\P{^Canonical_Combining_Class=02_7}', "");
Error('\p{Ccc= :=0000000027}');
Error('\P{Ccc= :=0000000027}');
Expect(1, 1611, '\p{Ccc=0000027}', "");
Expect(0, 1611, '\p{^Ccc=0000027}', "");
Expect(0, 1611, '\P{Ccc=0000027}', "");
Expect(1, 1611, '\P{^Ccc=0000027}', "");
Expect(0, 1610, '\p{Ccc=0000027}', "");
Expect(1, 1610, '\p{^Ccc=0000027}', "");
Expect(1, 1610, '\P{Ccc=0000027}', "");
Expect(0, 1610, '\P{^Ccc=0000027}', "");
Error('\p{Is_Canonical_Combining_Class:	 /a/002-7}');
Error('\P{Is_Canonical_Combining_Class:	 /a/002-7}');
Expect(1, 1611, '\p{Is_Canonical_Combining_Class=0_0_0_0_027}', "");
Expect(0, 1611, '\p{^Is_Canonical_Combining_Class=0_0_0_0_027}', "");
Expect(0, 1611, '\P{Is_Canonical_Combining_Class=0_0_0_0_027}', "");
Expect(1, 1611, '\P{^Is_Canonical_Combining_Class=0_0_0_0_027}', "");
Expect(0, 1610, '\p{Is_Canonical_Combining_Class=0_0_0_0_027}', "");
Expect(1, 1610, '\p{^Is_Canonical_Combining_Class=0_0_0_0_027}', "");
Expect(1, 1610, '\P{Is_Canonical_Combining_Class=0_0_0_0_027}', "");
Expect(0, 1610, '\P{^Is_Canonical_Combining_Class=0_0_0_0_027}', "");
Error('\p{Is_Ccc=--+00:=02	7}');
Error('\P{Is_Ccc=--+00:=02	7}');
Expect(1, 1611, '\p{Is_Ccc=0_0_0_0_0_0_0_0_27}', "");
Expect(0, 1611, '\p{^Is_Ccc=0_0_0_0_0_0_0_0_27}', "");
Expect(0, 1611, '\P{Is_Ccc=0_0_0_0_0_0_0_0_27}', "");
Expect(1, 1611, '\P{^Is_Ccc=0_0_0_0_0_0_0_0_27}', "");
Expect(0, 1610, '\p{Is_Ccc=0_0_0_0_0_0_0_0_27}', "");
Expect(1, 1610, '\p{^Is_Ccc=0_0_0_0_0_0_0_0_27}', "");
Expect(1, 1610, '\P{Is_Ccc=0_0_0_0_0_0_0_0_27}', "");
Expect(0, 1610, '\P{^Is_Ccc=0_0_0_0_0_0_0_0_27}', "");
Error('\p{Canonical_Combining_Class=-double:=Below}');
Error('\P{Canonical_Combining_Class=-double:=Below}');
Expect(1, 860, '\p{Canonical_Combining_Class:doublebelow}', "");
Expect(0, 860, '\p{^Canonical_Combining_Class:doublebelow}', "");
Expect(0, 860, '\P{Canonical_Combining_Class:doublebelow}', "");
Expect(1, 860, '\P{^Canonical_Combining_Class:doublebelow}', "");
Expect(0, 859, '\p{Canonical_Combining_Class:doublebelow}', "");
Expect(1, 859, '\p{^Canonical_Combining_Class:doublebelow}', "");
Expect(1, 859, '\P{Canonical_Combining_Class:doublebelow}', "");
Expect(0, 859, '\P{^Canonical_Combining_Class:doublebelow}', "");
Expect(1, 860, '\p{Canonical_Combining_Class=_DOUBLE_below}', "");
Expect(0, 860, '\p{^Canonical_Combining_Class=_DOUBLE_below}', "");
Expect(0, 860, '\P{Canonical_Combining_Class=_DOUBLE_below}', "");
Expect(1, 860, '\P{^Canonical_Combining_Class=_DOUBLE_below}', "");
Expect(0, 859, '\p{Canonical_Combining_Class=_DOUBLE_below}', "");
Expect(1, 859, '\p{^Canonical_Combining_Class=_DOUBLE_below}', "");
Expect(1, 859, '\P{Canonical_Combining_Class=_DOUBLE_below}', "");
Expect(0, 859, '\P{^Canonical_Combining_Class=_DOUBLE_below}', "");
Error('\p{Ccc=_	db/a/}');
Error('\P{Ccc=_	db/a/}');
Expect(1, 860, '\p{Ccc=db}', "");
Expect(0, 860, '\p{^Ccc=db}', "");
Expect(0, 860, '\P{Ccc=db}', "");
Expect(1, 860, '\P{^Ccc=db}', "");
Expect(0, 859, '\p{Ccc=db}', "");
Expect(1, 859, '\p{^Ccc=db}', "");
Expect(1, 859, '\P{Ccc=db}', "");
Expect(0, 859, '\P{^Ccc=db}', "");
Expect(1, 860, '\p{Ccc=_ DB}', "");
Expect(0, 860, '\p{^Ccc=_ DB}', "");
Expect(0, 860, '\P{Ccc=_ DB}', "");
Expect(1, 860, '\P{^Ccc=_ DB}', "");
Expect(0, 859, '\p{Ccc=_ DB}', "");
Expect(1, 859, '\p{^Ccc=_ DB}', "");
Expect(1, 859, '\P{Ccc=_ DB}', "");
Expect(0, 859, '\P{^Ccc=_ DB}', "");
Error('\p{Is_Canonical_Combining_Class=	 0233/a/}');
Error('\P{Is_Canonical_Combining_Class=	 0233/a/}');
Expect(1, 860, '\p{Is_Canonical_Combining_Class=000_023_3}', "");
Expect(0, 860, '\p{^Is_Canonical_Combining_Class=000_023_3}', "");
Expect(0, 860, '\P{Is_Canonical_Combining_Class=000_023_3}', "");
Expect(1, 860, '\P{^Is_Canonical_Combining_Class=000_023_3}', "");
Expect(0, 859, '\p{Is_Canonical_Combining_Class=000_023_3}', "");
Expect(1, 859, '\p{^Is_Canonical_Combining_Class=000_023_3}', "");
Expect(1, 859, '\P{Is_Canonical_Combining_Class=000_023_3}', "");
Expect(0, 859, '\P{^Is_Canonical_Combining_Class=000_023_3}', "");
Error('\p{Is_Ccc=-DoubleBELOW:=}');
Error('\P{Is_Ccc=-DoubleBELOW:=}');
Expect(1, 860, '\p{Is_Ccc=doublebelow}', "");
Expect(0, 860, '\p{^Is_Ccc=doublebelow}', "");
Expect(0, 860, '\P{Is_Ccc=doublebelow}', "");
Expect(1, 860, '\P{^Is_Ccc=doublebelow}', "");
Expect(0, 859, '\p{Is_Ccc=doublebelow}', "");
Expect(1, 859, '\p{^Is_Ccc=doublebelow}', "");
Expect(1, 859, '\P{Is_Ccc=doublebelow}', "");
Expect(0, 859, '\P{^Is_Ccc=doublebelow}', "");
Expect(1, 860, '\p{Is_Ccc=-_Double_BELOW}', "");
Expect(0, 860, '\p{^Is_Ccc=-_Double_BELOW}', "");
Expect(0, 860, '\P{Is_Ccc=-_Double_BELOW}', "");
Expect(1, 860, '\P{^Is_Ccc=-_Double_BELOW}', "");
Expect(0, 859, '\p{Is_Ccc=-_Double_BELOW}', "");
Expect(1, 859, '\p{^Is_Ccc=-_Double_BELOW}', "");
Expect(1, 859, '\P{Is_Ccc=-_Double_BELOW}', "");
Expect(0, 859, '\P{^Is_Ccc=-_Double_BELOW}', "");
Error('\p{Canonical_Combining_Class=-	below Right:=}');
Error('\P{Canonical_Combining_Class=-	below Right:=}');
Expect(1, 1434, '\p{Canonical_Combining_Class=belowright}', "");
Expect(0, 1434, '\p{^Canonical_Combining_Class=belowright}', "");
Expect(0, 1434, '\P{Canonical_Combining_Class=belowright}', "");
Expect(1, 1434, '\P{^Canonical_Combining_Class=belowright}', "");
Expect(0, 1433, '\p{Canonical_Combining_Class=belowright}', "");
Expect(1, 1433, '\p{^Canonical_Combining_Class=belowright}', "");
Expect(1, 1433, '\P{Canonical_Combining_Class=belowright}', "");
Expect(0, 1433, '\P{^Canonical_Combining_Class=belowright}', "");
Expect(1, 1434, '\p{Canonical_Combining_Class=_below_Right}', "");
Expect(0, 1434, '\p{^Canonical_Combining_Class=_below_Right}', "");
Expect(0, 1434, '\P{Canonical_Combining_Class=_below_Right}', "");
Expect(1, 1434, '\P{^Canonical_Combining_Class=_below_Right}', "");
Expect(0, 1433, '\p{Canonical_Combining_Class=_below_Right}', "");
Expect(1, 1433, '\p{^Canonical_Combining_Class=_below_Right}', "");
Expect(1, 1433, '\P{Canonical_Combining_Class=_below_Right}', "");
Expect(0, 1433, '\P{^Canonical_Combining_Class=_below_Right}', "");
Error('\p{Ccc=/a/	_BR}');
Error('\P{Ccc=/a/	_BR}');
Expect(1, 1434, '\p{Ccc=br}', "");
Expect(0, 1434, '\p{^Ccc=br}', "");
Expect(0, 1434, '\P{Ccc=br}', "");
Expect(1, 1434, '\P{^Ccc=br}', "");
Expect(0, 1433, '\p{Ccc=br}', "");
Expect(1, 1433, '\p{^Ccc=br}', "");
Expect(1, 1433, '\P{Ccc=br}', "");
Expect(0, 1433, '\P{^Ccc=br}', "");
Expect(1, 1434, '\p{Ccc= 	BR}', "");
Expect(0, 1434, '\p{^Ccc= 	BR}', "");
Expect(0, 1434, '\P{Ccc= 	BR}', "");
Expect(1, 1434, '\P{^Ccc= 	BR}', "");
Expect(0, 1433, '\p{Ccc= 	BR}', "");
Expect(1, 1433, '\p{^Ccc= 	BR}', "");
Expect(1, 1433, '\P{Ccc= 	BR}', "");
Expect(0, 1433, '\P{^Ccc= 	BR}', "");
Error('\p{Is_Canonical_Combining_Class= 	0000 0022/a/2}');
Error('\P{Is_Canonical_Combining_Class= 	0000 0022/a/2}');
Expect(1, 1434, '\p{Is_Canonical_Combining_Class=+00000222}', "");
Expect(0, 1434, '\p{^Is_Canonical_Combining_Class=+00000222}', "");
Expect(0, 1434, '\P{Is_Canonical_Combining_Class=+00000222}', "");
Expect(1, 1434, '\P{^Is_Canonical_Combining_Class=+00000222}', "");
Expect(0, 1433, '\p{Is_Canonical_Combining_Class=+00000222}', "");
Expect(1, 1433, '\p{^Is_Canonical_Combining_Class=+00000222}', "");
Expect(1, 1433, '\P{Is_Canonical_Combining_Class=+00000222}', "");
Expect(0, 1433, '\P{^Is_Canonical_Combining_Class=+00000222}', "");
Error('\p{Is_Ccc=/a/-	Below-Right}');
Error('\P{Is_Ccc=/a/-	Below-Right}');
Expect(1, 1434, '\p{Is_Ccc=belowright}', "");
Expect(0, 1434, '\p{^Is_Ccc=belowright}', "");
Expect(0, 1434, '\P{Is_Ccc=belowright}', "");
Expect(1, 1434, '\P{^Is_Ccc=belowright}', "");
Expect(0, 1433, '\p{Is_Ccc=belowright}', "");
Expect(1, 1433, '\p{^Is_Ccc=belowright}', "");
Expect(1, 1433, '\P{Is_Ccc=belowright}', "");
Expect(0, 1433, '\P{^Is_Ccc=belowright}', "");
Expect(1, 1434, '\p{Is_Ccc= 	BELOWRight}', "");
Expect(0, 1434, '\p{^Is_Ccc= 	BELOWRight}', "");
Expect(0, 1434, '\P{Is_Ccc= 	BELOWRight}', "");
Expect(1, 1434, '\P{^Is_Ccc= 	BELOWRight}', "");
Expect(0, 1433, '\p{Is_Ccc= 	BELOWRight}', "");
Expect(1, 1433, '\p{^Is_Ccc= 	BELOWRight}', "");
Expect(1, 1433, '\P{Is_Ccc= 	BELOWRight}', "");
Expect(0, 1433, '\P{^Is_Ccc= 	BELOWRight}', "");
Error('\p{Canonical_Combining_Class=--Kana	voicing/a/}');
Error('\P{Canonical_Combining_Class=--Kana	voicing/a/}');
Expect(1, 12442, '\p{Canonical_Combining_Class=kanavoicing}', "");
Expect(0, 12442, '\p{^Canonical_Combining_Class=kanavoicing}', "");
Expect(0, 12442, '\P{Canonical_Combining_Class=kanavoicing}', "");
Expect(1, 12442, '\P{^Canonical_Combining_Class=kanavoicing}', "");
Expect(0, 12440, '\p{Canonical_Combining_Class=kanavoicing}', "");
Expect(1, 12440, '\p{^Canonical_Combining_Class=kanavoicing}', "");
Expect(1, 12440, '\P{Canonical_Combining_Class=kanavoicing}', "");
Expect(0, 12440, '\P{^Canonical_Combining_Class=kanavoicing}', "");
Expect(1, 12442, '\p{Canonical_Combining_Class=_kana_Voicing}', "");
Expect(0, 12442, '\p{^Canonical_Combining_Class=_kana_Voicing}', "");
Expect(0, 12442, '\P{Canonical_Combining_Class=_kana_Voicing}', "");
Expect(1, 12442, '\P{^Canonical_Combining_Class=_kana_Voicing}', "");
Expect(0, 12440, '\p{Canonical_Combining_Class=_kana_Voicing}', "");
Expect(1, 12440, '\p{^Canonical_Combining_Class=_kana_Voicing}', "");
Expect(1, 12440, '\P{Canonical_Combining_Class=_kana_Voicing}', "");
Expect(0, 12440, '\P{^Canonical_Combining_Class=_kana_Voicing}', "");
Error('\p{Ccc=:=__KV}');
Error('\P{Ccc=:=__KV}');
Expect(1, 12442, '\p{Ccc=kv}', "");
Expect(0, 12442, '\p{^Ccc=kv}', "");
Expect(0, 12442, '\P{Ccc=kv}', "");
Expect(1, 12442, '\P{^Ccc=kv}', "");
Expect(0, 12440, '\p{Ccc=kv}', "");
Expect(1, 12440, '\p{^Ccc=kv}', "");
Expect(1, 12440, '\P{Ccc=kv}', "");
Expect(0, 12440, '\P{^Ccc=kv}', "");
Expect(1, 12442, '\p{Ccc=KV}', "");
Expect(0, 12442, '\p{^Ccc=KV}', "");
Expect(0, 12442, '\P{Ccc=KV}', "");
Expect(1, 12442, '\P{^Ccc=KV}', "");
Expect(0, 12440, '\p{Ccc=KV}', "");
Expect(1, 12440, '\p{^Ccc=KV}', "");
Expect(1, 12440, '\P{Ccc=KV}', "");
Expect(0, 12440, '\P{^Ccc=KV}', "");
Error('\p{Is_Canonical_Combining_Class=-:=0000000008}');
Error('\P{Is_Canonical_Combining_Class=-:=0000000008}');
Expect(1, 12442, '\p{Is_Canonical_Combining_Class=+0000000008}', "");
Expect(0, 12442, '\p{^Is_Canonical_Combining_Class=+0000000008}', "");
Expect(0, 12442, '\P{Is_Canonical_Combining_Class=+0000000008}', "");
Expect(1, 12442, '\P{^Is_Canonical_Combining_Class=+0000000008}', "");
Expect(0, 12440, '\p{Is_Canonical_Combining_Class=+0000000008}', "");
Expect(1, 12440, '\p{^Is_Canonical_Combining_Class=+0000000008}', "");
Expect(1, 12440, '\P{Is_Canonical_Combining_Class=+0000000008}', "");
Expect(0, 12440, '\P{^Is_Canonical_Combining_Class=+0000000008}', "");
Error('\p{Is_Ccc=-:=Kana Voicing}');
Error('\P{Is_Ccc=-:=Kana Voicing}');
Expect(1, 12442, '\p{Is_Ccc=kanavoicing}', "");
Expect(0, 12442, '\p{^Is_Ccc=kanavoicing}', "");
Expect(0, 12442, '\P{Is_Ccc=kanavoicing}', "");
Expect(1, 12442, '\P{^Is_Ccc=kanavoicing}', "");
Expect(0, 12440, '\p{Is_Ccc=kanavoicing}', "");
Expect(1, 12440, '\p{^Is_Ccc=kanavoicing}', "");
Expect(1, 12440, '\P{Is_Ccc=kanavoicing}', "");
Expect(0, 12440, '\P{^Is_Ccc=kanavoicing}', "");
Expect(1, 12442, '\p{Is_Ccc=_	KanaVoicing}', "");
Expect(0, 12442, '\p{^Is_Ccc=_	KanaVoicing}', "");
Expect(0, 12442, '\P{Is_Ccc=_	KanaVoicing}', "");
Expect(1, 12442, '\P{^Is_Ccc=_	KanaVoicing}', "");
Expect(0, 12440, '\p{Is_Ccc=_	KanaVoicing}', "");
Expect(1, 12440, '\p{^Is_Ccc=_	KanaVoicing}', "");
Expect(1, 12440, '\P{Is_Ccc=_	KanaVoicing}', "");
Expect(0, 12440, '\P{^Is_Ccc=_	KanaVoicing}', "");
Error('\p{Canonical_Combining_Class= :=below}');
Error('\P{Canonical_Combining_Class= :=below}');
Expect(1, 793, '\p{Canonical_Combining_Class:	below}', "");
Expect(0, 793, '\p{^Canonical_Combining_Class:	below}', "");
Expect(0, 793, '\P{Canonical_Combining_Class:	below}', "");
Expect(1, 793, '\P{^Canonical_Combining_Class:	below}', "");
Expect(0, 789, '\p{Canonical_Combining_Class:	below}', "");
Expect(1, 789, '\p{^Canonical_Combining_Class:	below}', "");
Expect(1, 789, '\P{Canonical_Combining_Class:	below}', "");
Expect(0, 789, '\P{^Canonical_Combining_Class:	below}', "");
Expect(1, 793, '\p{Canonical_Combining_Class=- below}', "");
Expect(0, 793, '\p{^Canonical_Combining_Class=- below}', "");
Expect(0, 793, '\P{Canonical_Combining_Class=- below}', "");
Expect(1, 793, '\P{^Canonical_Combining_Class=- below}', "");
Expect(0, 789, '\p{Canonical_Combining_Class=- below}', "");
Expect(1, 789, '\p{^Canonical_Combining_Class=- below}', "");
Expect(1, 789, '\P{Canonical_Combining_Class=- below}', "");
Expect(0, 789, '\P{^Canonical_Combining_Class=- below}', "");
Error('\p{Ccc=/a/B}');
Error('\P{Ccc=/a/B}');
Expect(1, 793, '\p{Ccc=b}', "");
Expect(0, 793, '\p{^Ccc=b}', "");
Expect(0, 793, '\P{Ccc=b}', "");
Expect(1, 793, '\P{^Ccc=b}', "");
Expect(0, 789, '\p{Ccc=b}', "");
Expect(1, 789, '\p{^Ccc=b}', "");
Expect(1, 789, '\P{Ccc=b}', "");
Expect(0, 789, '\P{^Ccc=b}', "");
Expect(1, 793, '\p{Ccc=_B}', "");
Expect(0, 793, '\p{^Ccc=_B}', "");
Expect(0, 793, '\P{Ccc=_B}', "");
Expect(1, 793, '\P{^Ccc=_B}', "");
Expect(0, 789, '\p{Ccc=_B}', "");
Expect(1, 789, '\p{^Ccc=_B}', "");
Expect(1, 789, '\P{Ccc=_B}', "");
Expect(0, 789, '\P{^Ccc=_B}', "");
Error('\p{Is_Canonical_Combining_Class=	0_0_0/a/0_0	220}');
Error('\P{Is_Canonical_Combining_Class=	0_0_0/a/0_0	220}');
Expect(1, 793, '\p{Is_Canonical_Combining_Class:+0_0_0_0_0_0_000220}', "");
Expect(0, 793, '\p{^Is_Canonical_Combining_Class:+0_0_0_0_0_0_000220}', "");
Expect(0, 793, '\P{Is_Canonical_Combining_Class:+0_0_0_0_0_0_000220}', "");
Expect(1, 793, '\P{^Is_Canonical_Combining_Class:+0_0_0_0_0_0_000220}', "");
Expect(0, 789, '\p{Is_Canonical_Combining_Class:+0_0_0_0_0_0_000220}', "");
Expect(1, 789, '\p{^Is_Canonical_Combining_Class:+0_0_0_0_0_0_000220}', "");
Expect(1, 789, '\P{Is_Canonical_Combining_Class:+0_0_0_0_0_0_000220}', "");
Expect(0, 789, '\P{^Is_Canonical_Combining_Class:+0_0_0_0_0_0_000220}', "");
Error('\p{Is_Ccc=-/a/Below}');
Error('\P{Is_Ccc=-/a/Below}');
Expect(1, 793, '\p{Is_Ccc=below}', "");
Expect(0, 793, '\p{^Is_Ccc=below}', "");
Expect(0, 793, '\P{Is_Ccc=below}', "");
Expect(1, 793, '\P{^Is_Ccc=below}', "");
Expect(0, 789, '\p{Is_Ccc=below}', "");
Expect(1, 789, '\p{^Is_Ccc=below}', "");
Expect(1, 789, '\P{Is_Ccc=below}', "");
Expect(0, 789, '\P{^Is_Ccc=below}', "");
Expect(1, 793, '\p{Is_Ccc=  Below}', "");
Expect(0, 793, '\p{^Is_Ccc=  Below}', "");
Expect(0, 793, '\P{Is_Ccc=  Below}', "");
Expect(1, 793, '\P{^Is_Ccc=  Below}', "");
Expect(0, 789, '\p{Is_Ccc=  Below}', "");
Expect(1, 789, '\p{^Is_Ccc=  Below}', "");
Expect(1, 789, '\P{Is_Ccc=  Below}', "");
Expect(0, 789, '\P{^Is_Ccc=  Below}', "");
Error('\p{Canonical_Combining_Class=-_000000020:=}');
Error('\P{Canonical_Combining_Class=-_000000020:=}');
Expect(1, 1467, '\p{Canonical_Combining_Class=000000002_0}', "");
Expect(0, 1467, '\p{^Canonical_Combining_Class=000000002_0}', "");
Expect(0, 1467, '\P{Canonical_Combining_Class=000000002_0}', "");
Expect(1, 1467, '\P{^Canonical_Combining_Class=000000002_0}', "");
Expect(0, 1466, '\p{Canonical_Combining_Class=000000002_0}', "");
Expect(1, 1466, '\p{^Canonical_Combining_Class=000000002_0}', "");
Expect(1, 1466, '\P{Canonical_Combining_Class=000000002_0}', "");
Expect(0, 1466, '\P{^Canonical_Combining_Class=000000002_0}', "");
Error('\p{Ccc=	 0/a/0-0 0 0 00020}');
Error('\P{Ccc=	 0/a/0-0 0 0 00020}');
Expect(1, 1467, '\p{Ccc=000_000_000_20}', "");
Expect(0, 1467, '\p{^Ccc=000_000_000_20}', "");
Expect(0, 1467, '\P{Ccc=000_000_000_20}', "");
Expect(1, 1467, '\P{^Ccc=000_000_000_20}', "");
Expect(0, 1466, '\p{Ccc=000_000_000_20}', "");
Expect(1, 1466, '\p{^Ccc=000_000_000_20}', "");
Expect(1, 1466, '\P{Ccc=000_000_000_20}', "");
Expect(0, 1466, '\P{^Ccc=000_000_000_20}', "");
Error('\p{Is_Canonical_Combining_Class=  0000000020:=}');
Error('\P{Is_Canonical_Combining_Class=  0000000020:=}');
Expect(1, 1467, '\p{Is_Canonical_Combining_Class=00_00_00_00_02_0}', "");
Expect(0, 1467, '\p{^Is_Canonical_Combining_Class=00_00_00_00_02_0}', "");
Expect(0, 1467, '\P{Is_Canonical_Combining_Class=00_00_00_00_02_0}', "");
Expect(1, 1467, '\P{^Is_Canonical_Combining_Class=00_00_00_00_02_0}', "");
Expect(0, 1466, '\p{Is_Canonical_Combining_Class=00_00_00_00_02_0}', "");
Expect(1, 1466, '\p{^Is_Canonical_Combining_Class=00_00_00_00_02_0}', "");
Expect(1, 1466, '\P{Is_Canonical_Combining_Class=00_00_00_00_02_0}', "");
Expect(0, 1466, '\P{^Is_Canonical_Combining_Class=00_00_00_00_02_0}', "");
Error('\p{Is_Ccc= -+000000002 0:=}');
Error('\P{Is_Ccc= -+000000002 0:=}');
Expect(1, 1467, '\p{Is_Ccc=+002_0}', "");
Expect(0, 1467, '\p{^Is_Ccc=+002_0}', "");
Expect(0, 1467, '\P{Is_Ccc=+002_0}', "");
Expect(1, 1467, '\P{^Is_Ccc=+002_0}', "");
Expect(0, 1466, '\p{Is_Ccc=+002_0}', "");
Expect(1, 1466, '\p{^Is_Ccc=+002_0}', "");
Expect(1, 1466, '\P{Is_Ccc=+002_0}', "");
Expect(0, 1466, '\P{^Is_Ccc=+002_0}', "");
Error('\p{Canonical_Combining_Class=	 attached-Above Right/a/}');
Error('\P{Canonical_Combining_Class=	 attached-Above Right/a/}');
Expect(1, 795, '\p{Canonical_Combining_Class=attachedaboveright}', "");
Expect(0, 795, '\p{^Canonical_Combining_Class=attachedaboveright}', "");
Expect(0, 795, '\P{Canonical_Combining_Class=attachedaboveright}', "");
Expect(1, 795, '\P{^Canonical_Combining_Class=attachedaboveright}', "");
Expect(0, 794, '\p{Canonical_Combining_Class=attachedaboveright}', "");
Expect(1, 794, '\p{^Canonical_Combining_Class=attachedaboveright}', "");
Expect(1, 794, '\P{Canonical_Combining_Class=attachedaboveright}', "");
Expect(0, 794, '\P{^Canonical_Combining_Class=attachedaboveright}', "");
Expect(1, 795, '\p{Canonical_Combining_Class=		ATTACHEDABOVE-Right}', "");
Expect(0, 795, '\p{^Canonical_Combining_Class=		ATTACHEDABOVE-Right}', "");
Expect(0, 795, '\P{Canonical_Combining_Class=		ATTACHEDABOVE-Right}', "");
Expect(1, 795, '\P{^Canonical_Combining_Class=		ATTACHEDABOVE-Right}', "");
Expect(0, 794, '\p{Canonical_Combining_Class=		ATTACHEDABOVE-Right}', "");
Expect(1, 794, '\p{^Canonical_Combining_Class=		ATTACHEDABOVE-Right}', "");
Expect(1, 794, '\P{Canonical_Combining_Class=		ATTACHEDABOVE-Right}', "");
Expect(0, 794, '\P{^Canonical_Combining_Class=		ATTACHEDABOVE-Right}', "");
Error('\p{Ccc=-:=ATAR}');
Error('\P{Ccc=-:=ATAR}');
Expect(1, 795, '\p{Ccc=atar}', "");
Expect(0, 795, '\p{^Ccc=atar}', "");
Expect(0, 795, '\P{Ccc=atar}', "");
Expect(1, 795, '\P{^Ccc=atar}', "");
Expect(0, 794, '\p{Ccc=atar}', "");
Expect(1, 794, '\p{^Ccc=atar}', "");
Expect(1, 794, '\P{Ccc=atar}', "");
Expect(0, 794, '\P{^Ccc=atar}', "");
Expect(1, 795, '\p{Ccc=-ATAR}', "");
Expect(0, 795, '\p{^Ccc=-ATAR}', "");
Expect(0, 795, '\P{Ccc=-ATAR}', "");
Expect(1, 795, '\P{^Ccc=-ATAR}', "");
Expect(0, 794, '\p{Ccc=-ATAR}', "");
Expect(1, 794, '\p{^Ccc=-ATAR}', "");
Expect(1, 794, '\P{Ccc=-ATAR}', "");
Expect(0, 794, '\P{^Ccc=-ATAR}', "");
Error('\p{Is_Canonical_Combining_Class=_:=+00021_6}');
Error('\P{Is_Canonical_Combining_Class=_:=+00021_6}');
Expect(1, 795, '\p{Is_Canonical_Combining_Class=0021_6}', "");
Expect(0, 795, '\p{^Is_Canonical_Combining_Class=0021_6}', "");
Expect(0, 795, '\P{Is_Canonical_Combining_Class=0021_6}', "");
Expect(1, 795, '\P{^Is_Canonical_Combining_Class=0021_6}', "");
Expect(0, 794, '\p{Is_Canonical_Combining_Class=0021_6}', "");
Expect(1, 794, '\p{^Is_Canonical_Combining_Class=0021_6}', "");
Expect(1, 794, '\P{Is_Canonical_Combining_Class=0021_6}', "");
Expect(0, 794, '\P{^Is_Canonical_Combining_Class=0021_6}', "");
Error('\p{Is_Ccc=	:=attached	ABOVE-Right}');
Error('\P{Is_Ccc=	:=attached	ABOVE-Right}');
Expect(1, 795, '\p{Is_Ccc=attachedaboveright}', "");
Expect(0, 795, '\p{^Is_Ccc=attachedaboveright}', "");
Expect(0, 795, '\P{Is_Ccc=attachedaboveright}', "");
Expect(1, 795, '\P{^Is_Ccc=attachedaboveright}', "");
Expect(0, 794, '\p{Is_Ccc=attachedaboveright}', "");
Expect(1, 794, '\p{^Is_Ccc=attachedaboveright}', "");
Expect(1, 794, '\P{Is_Ccc=attachedaboveright}', "");
Expect(0, 794, '\P{^Is_Ccc=attachedaboveright}', "");
Expect(1, 795, '\p{Is_Ccc=_Attached-aboveRight}', "");
Expect(0, 795, '\p{^Is_Ccc=_Attached-aboveRight}', "");
Expect(0, 795, '\P{Is_Ccc=_Attached-aboveRight}', "");
Expect(1, 795, '\P{^Is_Ccc=_Attached-aboveRight}', "");
Expect(0, 794, '\p{Is_Ccc=_Attached-aboveRight}', "");
Expect(1, 794, '\p{^Is_Ccc=_Attached-aboveRight}', "");
Expect(1, 794, '\P{Is_Ccc=_Attached-aboveRight}', "");
Expect(0, 794, '\P{^Is_Ccc=_Attached-aboveRight}', "");
Error('\p{Canonical_Combining_Class=/a/	 003	1}');
Error('\P{Canonical_Combining_Class=/a/	 003	1}');
Expect(1, 1561, '\p{Canonical_Combining_Class=0_0_0_0_0_31}', "");
Expect(0, 1561, '\p{^Canonical_Combining_Class=0_0_0_0_0_31}', "");
Expect(0, 1561, '\P{Canonical_Combining_Class=0_0_0_0_0_31}', "");
Expect(1, 1561, '\P{^Canonical_Combining_Class=0_0_0_0_0_31}', "");
Expect(0, 1560, '\p{Canonical_Combining_Class=0_0_0_0_0_31}', "");
Expect(1, 1560, '\p{^Canonical_Combining_Class=0_0_0_0_0_31}', "");
Expect(1, 1560, '\P{Canonical_Combining_Class=0_0_0_0_0_31}', "");
Expect(0, 1560, '\P{^Canonical_Combining_Class=0_0_0_0_0_31}', "");
Error('\p{Ccc=	/a/31}');
Error('\P{Ccc=	/a/31}');
Expect(1, 1561, '\p{Ccc=+00000031}', "");
Expect(0, 1561, '\p{^Ccc=+00000031}', "");
Expect(0, 1561, '\P{Ccc=+00000031}', "");
Expect(1, 1561, '\P{^Ccc=+00000031}', "");
Expect(0, 1560, '\p{Ccc=+00000031}', "");
Expect(1, 1560, '\p{^Ccc=+00000031}', "");
Expect(1, 1560, '\P{Ccc=+00000031}', "");
Expect(0, 1560, '\P{^Ccc=+00000031}', "");
Error('\p{Is_Canonical_Combining_Class=_/a/0000000031}');
Error('\P{Is_Canonical_Combining_Class=_/a/0000000031}');
Expect(1, 1561, '\p{Is_Canonical_Combining_Class=+03_1}', "");
Expect(0, 1561, '\p{^Is_Canonical_Combining_Class=+03_1}', "");
Expect(0, 1561, '\P{Is_Canonical_Combining_Class=+03_1}', "");
Expect(1, 1561, '\P{^Is_Canonical_Combining_Class=+03_1}', "");
Expect(0, 1560, '\p{Is_Canonical_Combining_Class=+03_1}', "");
Expect(1, 1560, '\p{^Is_Canonical_Combining_Class=+03_1}', "");
Expect(1, 1560, '\P{Is_Canonical_Combining_Class=+03_1}', "");
Expect(0, 1560, '\P{^Is_Canonical_Combining_Class=+03_1}', "");
Error('\p{Is_Ccc= /a/00031}');
Error('\P{Is_Ccc= /a/00031}');
Expect(1, 1561, '\p{Is_Ccc=0000_0003_1}', "");
Expect(0, 1561, '\p{^Is_Ccc=0000_0003_1}', "");
Expect(0, 1561, '\P{Is_Ccc=0000_0003_1}', "");
Expect(1, 1561, '\P{^Is_Ccc=0000_0003_1}', "");
Expect(0, 1560, '\p{Is_Ccc=0000_0003_1}', "");
Expect(1, 1560, '\p{^Is_Ccc=0000_0003_1}', "");
Expect(1, 1560, '\P{Is_Ccc=0000_0003_1}', "");
Expect(0, 1560, '\P{^Is_Ccc=0000_0003_1}', "");
Error('\p{Canonical_Combining_Class= _00000035:=}');
Error('\P{Canonical_Combining_Class= _00000035:=}');
Expect(1, 1648, '\p{Canonical_Combining_Class=+000035}', "");
Expect(0, 1648, '\p{^Canonical_Combining_Class=+000035}', "");
Expect(0, 1648, '\P{Canonical_Combining_Class=+000035}', "");
Expect(1, 1648, '\P{^Canonical_Combining_Class=+000035}', "");
Expect(0, 1647, '\p{Canonical_Combining_Class=+000035}', "");
Expect(1, 1647, '\p{^Canonical_Combining_Class=+000035}', "");
Expect(1, 1647, '\P{Canonical_Combining_Class=+000035}', "");
Expect(0, 1647, '\P{^Canonical_Combining_Class=+000035}', "");
Error('\p{Ccc: :=-+00035}');
Error('\P{Ccc: :=-+00035}');
Expect(1, 1648, '\p{Ccc=+0_0_35}', "");
Expect(0, 1648, '\p{^Ccc=+0_0_35}', "");
Expect(0, 1648, '\P{Ccc=+0_0_35}', "");
Expect(1, 1648, '\P{^Ccc=+0_0_35}', "");
Expect(0, 1647, '\p{Ccc=+0_0_35}', "");
Expect(1, 1647, '\p{^Ccc=+0_0_35}', "");
Expect(1, 1647, '\P{Ccc=+0_0_35}', "");
Expect(0, 1647, '\P{^Ccc=+0_0_35}', "");
Error('\p{Is_Canonical_Combining_Class: 	0-000_0	00/a/035}');
Error('\P{Is_Canonical_Combining_Class: 	0-000_0	00/a/035}');
Expect(1, 1648, '\p{Is_Canonical_Combining_Class=0_0_0_0_035}', "");
Expect(0, 1648, '\p{^Is_Canonical_Combining_Class=0_0_0_0_035}', "");
Expect(0, 1648, '\P{Is_Canonical_Combining_Class=0_0_0_0_035}', "");
Expect(1, 1648, '\P{^Is_Canonical_Combining_Class=0_0_0_0_035}', "");
Expect(0, 1647, '\p{Is_Canonical_Combining_Class=0_0_0_0_035}', "");
Expect(1, 1647, '\p{^Is_Canonical_Combining_Class=0_0_0_0_035}', "");
Expect(1, 1647, '\P{Is_Canonical_Combining_Class=0_0_0_0_035}', "");
Expect(0, 1647, '\P{^Is_Canonical_Combining_Class=0_0_0_0_035}', "");
Error('\p{Is_Ccc=-/a/035}');
Error('\P{Is_Ccc=-/a/035}');
Expect(1, 1648, '\p{Is_Ccc=00000035}', "");
Expect(0, 1648, '\p{^Is_Ccc=00000035}', "");
Expect(0, 1648, '\P{Is_Ccc=00000035}', "");
Expect(1, 1648, '\P{^Is_Ccc=00000035}', "");
Expect(0, 1647, '\p{Is_Ccc=00000035}', "");
Expect(1, 1647, '\p{^Is_Ccc=00000035}', "");
Expect(1, 1647, '\P{Is_Ccc=00000035}', "");
Expect(0, 1647, '\P{^Is_Ccc=00000035}', "");
Error('\p{Canonical_Combining_Class=:=	+00011}');
Error('\P{Canonical_Combining_Class=:=	+00011}');
Expect(1, 1457, '\p{Canonical_Combining_Class=000011}', "");
Expect(0, 1457, '\p{^Canonical_Combining_Class=000011}', "");
Expect(0, 1457, '\P{Canonical_Combining_Class=000011}', "");
Expect(1, 1457, '\P{^Canonical_Combining_Class=000011}', "");
Expect(0, 1456, '\p{Canonical_Combining_Class=000011}', "");
Expect(1, 1456, '\p{^Canonical_Combining_Class=000011}', "");
Expect(1, 1456, '\P{Canonical_Combining_Class=000011}', "");
Expect(0, 1456, '\P{^Canonical_Combining_Class=000011}', "");
Error('\p{Ccc:	:= 00000011}');
Error('\P{Ccc:	:= 00000011}');
Expect(1, 1457, '\p{Ccc=00001_1}', "");
Expect(0, 1457, '\p{^Ccc=00001_1}', "");
Expect(0, 1457, '\P{Ccc=00001_1}', "");
Expect(1, 1457, '\P{^Ccc=00001_1}', "");
Expect(0, 1456, '\p{Ccc=00001_1}', "");
Expect(1, 1456, '\p{^Ccc=00001_1}', "");
Expect(1, 1456, '\P{Ccc=00001_1}', "");
Expect(0, 1456, '\P{^Ccc=00001_1}', "");
Error('\p{Is_Canonical_Combining_Class:	/a/	-0 011}');
Error('\P{Is_Canonical_Combining_Class:	/a/	-0 011}');
Expect(1, 1457, '\p{Is_Canonical_Combining_Class=00000000011}', "");
Expect(0, 1457, '\p{^Is_Canonical_Combining_Class=00000000011}', "");
Expect(0, 1457, '\P{Is_Canonical_Combining_Class=00000000011}', "");
Expect(1, 1457, '\P{^Is_Canonical_Combining_Class=00000000011}', "");
Expect(0, 1456, '\p{Is_Canonical_Combining_Class=00000000011}', "");
Expect(1, 1456, '\p{^Is_Canonical_Combining_Class=00000000011}', "");
Expect(1, 1456, '\P{Is_Canonical_Combining_Class=00000000011}', "");
Expect(0, 1456, '\P{^Is_Canonical_Combining_Class=00000000011}', "");
Error('\p{Is_Ccc=	_1:=1}');
Error('\P{Is_Ccc=	_1:=1}');
Expect(1, 1457, '\p{Is_Ccc=000000011}', "");
Expect(0, 1457, '\p{^Is_Ccc=000000011}', "");
Expect(0, 1457, '\P{Is_Ccc=000000011}', "");
Expect(1, 1457, '\P{^Is_Ccc=000000011}', "");
Expect(0, 1456, '\p{Is_Ccc=000000011}', "");
Expect(1, 1456, '\p{^Is_Ccc=000000011}', "");
Expect(1, 1456, '\P{Is_Ccc=000000011}', "");
Expect(0, 1456, '\P{^Is_Ccc=000000011}', "");
Error('\p{Canonical_Combining_Class=--IOTA-Subscript/a/}');
Error('\P{Canonical_Combining_Class=--IOTA-Subscript/a/}');
Expect(1, 837, '\p{Canonical_Combining_Class=iotasubscript}', "");
Expect(0, 837, '\p{^Canonical_Combining_Class=iotasubscript}', "");
Expect(0, 837, '\P{Canonical_Combining_Class=iotasubscript}', "");
Expect(1, 837, '\P{^Canonical_Combining_Class=iotasubscript}', "");
Expect(0, 836, '\p{Canonical_Combining_Class=iotasubscript}', "");
Expect(1, 836, '\p{^Canonical_Combining_Class=iotasubscript}', "");
Expect(1, 836, '\P{Canonical_Combining_Class=iotasubscript}', "");
Expect(0, 836, '\P{^Canonical_Combining_Class=iotasubscript}', "");
Expect(1, 837, '\p{Canonical_Combining_Class=	 iota-SUBSCRIPT}', "");
Expect(0, 837, '\p{^Canonical_Combining_Class=	 iota-SUBSCRIPT}', "");
Expect(0, 837, '\P{Canonical_Combining_Class=	 iota-SUBSCRIPT}', "");
Expect(1, 837, '\P{^Canonical_Combining_Class=	 iota-SUBSCRIPT}', "");
Expect(0, 836, '\p{Canonical_Combining_Class=	 iota-SUBSCRIPT}', "");
Expect(1, 836, '\p{^Canonical_Combining_Class=	 iota-SUBSCRIPT}', "");
Expect(1, 836, '\P{Canonical_Combining_Class=	 iota-SUBSCRIPT}', "");
Expect(0, 836, '\P{^Canonical_Combining_Class=	 iota-SUBSCRIPT}', "");
Error('\p{Ccc=:= 	IS}');
Error('\P{Ccc=:= 	IS}');
Expect(1, 837, '\p{Ccc=is}', "");
Expect(0, 837, '\p{^Ccc=is}', "");
Expect(0, 837, '\P{Ccc=is}', "");
Expect(1, 837, '\P{^Ccc=is}', "");
Expect(0, 836, '\p{Ccc=is}', "");
Expect(1, 836, '\p{^Ccc=is}', "");
Expect(1, 836, '\P{Ccc=is}', "");
Expect(0, 836, '\P{^Ccc=is}', "");
Expect(1, 837, '\p{Ccc=--IS}', "");
Expect(0, 837, '\p{^Ccc=--IS}', "");
Expect(0, 837, '\P{Ccc=--IS}', "");
Expect(1, 837, '\P{^Ccc=--IS}', "");
Expect(0, 836, '\p{Ccc=--IS}', "");
Expect(1, 836, '\p{^Ccc=--IS}', "");
Expect(1, 836, '\P{Ccc=--IS}', "");
Expect(0, 836, '\P{^Ccc=--IS}', "");
Error('\p{Is_Canonical_Combining_Class= :=+0240}');
Error('\P{Is_Canonical_Combining_Class= :=+0240}');
Expect(1, 837, '\p{Is_Canonical_Combining_Class=000_024_0}', "");
Expect(0, 837, '\p{^Is_Canonical_Combining_Class=000_024_0}', "");
Expect(0, 837, '\P{Is_Canonical_Combining_Class=000_024_0}', "");
Expect(1, 837, '\P{^Is_Canonical_Combining_Class=000_024_0}', "");
Expect(0, 836, '\p{Is_Canonical_Combining_Class=000_024_0}', "");
Expect(1, 836, '\p{^Is_Canonical_Combining_Class=000_024_0}', "");
Expect(1, 836, '\P{Is_Canonical_Combining_Class=000_024_0}', "");
Expect(0, 836, '\P{^Is_Canonical_Combining_Class=000_024_0}', "");
Error('\p{Is_Ccc= 	IOTA/a/Subscript}');
Error('\P{Is_Ccc= 	IOTA/a/Subscript}');
Expect(1, 837, '\p{Is_Ccc=iotasubscript}', "");
Expect(0, 837, '\p{^Is_Ccc=iotasubscript}', "");
Expect(0, 837, '\P{Is_Ccc=iotasubscript}', "");
Expect(1, 837, '\P{^Is_Ccc=iotasubscript}', "");
Expect(0, 836, '\p{Is_Ccc=iotasubscript}', "");
Expect(1, 836, '\p{^Is_Ccc=iotasubscript}', "");
Expect(1, 836, '\P{Is_Ccc=iotasubscript}', "");
Expect(0, 836, '\P{^Is_Ccc=iotasubscript}', "");
Expect(1, 837, '\p{Is_Ccc=__Iota-Subscript}', "");
Expect(0, 837, '\p{^Is_Ccc=__Iota-Subscript}', "");
Expect(0, 837, '\P{Is_Ccc=__Iota-Subscript}', "");
Expect(1, 837, '\P{^Is_Ccc=__Iota-Subscript}', "");
Expect(0, 836, '\p{Is_Ccc=__Iota-Subscript}', "");
Expect(1, 836, '\p{^Is_Ccc=__Iota-Subscript}', "");
Expect(1, 836, '\P{Is_Ccc=__Iota-Subscript}', "");
Expect(0, 836, '\P{^Is_Ccc=__Iota-Subscript}', "");
Error('\p{Canonical_Combining_Class=/a/--above_Right}');
Error('\P{Canonical_Combining_Class=/a/--above_Right}');
Expect(1, 789, '\p{Canonical_Combining_Class=aboveright}', "");
Expect(0, 789, '\p{^Canonical_Combining_Class=aboveright}', "");
Expect(0, 789, '\P{Canonical_Combining_Class=aboveright}', "");
Expect(1, 789, '\P{^Canonical_Combining_Class=aboveright}', "");
Expect(0, 788, '\p{Canonical_Combining_Class=aboveright}', "");
Expect(1, 788, '\p{^Canonical_Combining_Class=aboveright}', "");
Expect(1, 788, '\P{Canonical_Combining_Class=aboveright}', "");
Expect(0, 788, '\P{^Canonical_Combining_Class=aboveright}', "");
Expect(1, 789, '\p{Canonical_Combining_Class= Aboveright}', "");
Expect(0, 789, '\p{^Canonical_Combining_Class= Aboveright}', "");
Expect(0, 789, '\P{Canonical_Combining_Class= Aboveright}', "");
Expect(1, 789, '\P{^Canonical_Combining_Class= Aboveright}', "");
Expect(0, 788, '\p{Canonical_Combining_Class= Aboveright}', "");
Expect(1, 788, '\p{^Canonical_Combining_Class= Aboveright}', "");
Expect(1, 788, '\P{Canonical_Combining_Class= Aboveright}', "");
Expect(0, 788, '\P{^Canonical_Combining_Class= Aboveright}', "");
Error('\p{Ccc=	/a/ar}');
Error('\P{Ccc=	/a/ar}');
Expect(1, 789, '\p{Ccc=ar}', "");
Expect(0, 789, '\p{^Ccc=ar}', "");
Expect(0, 789, '\P{Ccc=ar}', "");
Expect(1, 789, '\P{^Ccc=ar}', "");
Expect(0, 788, '\p{Ccc=ar}', "");
Expect(1, 788, '\p{^Ccc=ar}', "");
Expect(1, 788, '\P{Ccc=ar}', "");
Expect(0, 788, '\P{^Ccc=ar}', "");
Expect(1, 789, '\p{Ccc:	__ar}', "");
Expect(0, 789, '\p{^Ccc:	__ar}', "");
Expect(0, 789, '\P{Ccc:	__ar}', "");
Expect(1, 789, '\P{^Ccc:	__ar}', "");
Expect(0, 788, '\p{Ccc:	__ar}', "");
Expect(1, 788, '\p{^Ccc:	__ar}', "");
Expect(1, 788, '\P{Ccc:	__ar}', "");
Expect(0, 788, '\P{^Ccc:	__ar}', "");
Error('\p{Is_Canonical_Combining_Class=:=0000000232}');
Error('\P{Is_Canonical_Combining_Class=:=0000000232}');
Expect(1, 789, '\p{Is_Canonical_Combining_Class=00232}', "");
Expect(0, 789, '\p{^Is_Canonical_Combining_Class=00232}', "");
Expect(0, 789, '\P{Is_Canonical_Combining_Class=00232}', "");
Expect(1, 789, '\P{^Is_Canonical_Combining_Class=00232}', "");
Expect(0, 788, '\p{Is_Canonical_Combining_Class=00232}', "");
Expect(1, 788, '\p{^Is_Canonical_Combining_Class=00232}', "");
Expect(1, 788, '\P{Is_Canonical_Combining_Class=00232}', "");
Expect(0, 788, '\P{^Is_Canonical_Combining_Class=00232}', "");
Error('\p{Is_Ccc= ABOVE_RIGHT:=}');
Error('\P{Is_Ccc= ABOVE_RIGHT:=}');
Expect(1, 789, '\p{Is_Ccc:	aboveright}', "");
Expect(0, 789, '\p{^Is_Ccc:	aboveright}', "");
Expect(0, 789, '\P{Is_Ccc:	aboveright}', "");
Expect(1, 789, '\P{^Is_Ccc:	aboveright}', "");
Expect(0, 788, '\p{Is_Ccc:	aboveright}', "");
Expect(1, 788, '\p{^Is_Ccc:	aboveright}', "");
Expect(1, 788, '\P{Is_Ccc:	aboveright}', "");
Expect(0, 788, '\P{^Is_Ccc:	aboveright}', "");
Expect(1, 789, '\p{Is_Ccc= Above_Right}', "");
Expect(0, 789, '\p{^Is_Ccc= Above_Right}', "");
Expect(0, 789, '\P{Is_Ccc= Above_Right}', "");
Expect(1, 789, '\P{^Is_Ccc= Above_Right}', "");
Expect(0, 788, '\p{Is_Ccc= Above_Right}', "");
Expect(1, 788, '\p{^Is_Ccc= Above_Right}', "");
Expect(1, 788, '\P{Is_Ccc= Above_Right}', "");
Expect(0, 788, '\P{^Is_Ccc= Above_Right}', "");
Error('\p{Canonical_Combining_Class=  +0029/a/}');
Error('\P{Canonical_Combining_Class=  +0029/a/}');
Expect(1, 1613, '\p{Canonical_Combining_Class: +000000029}', "");
Expect(0, 1613, '\p{^Canonical_Combining_Class: +000000029}', "");
Expect(0, 1613, '\P{Canonical_Combining_Class: +000000029}', "");
Expect(1, 1613, '\P{^Canonical_Combining_Class: +000000029}', "");
Expect(0, 1612, '\p{Canonical_Combining_Class: +000000029}', "");
Expect(1, 1612, '\p{^Canonical_Combining_Class: +000000029}', "");
Expect(1, 1612, '\P{Canonical_Combining_Class: +000000029}', "");
Expect(0, 1612, '\P{^Canonical_Combining_Class: +000000029}', "");
Error('\p{Ccc=		+0000029/a/}');
Error('\P{Ccc=		+0000029/a/}');
Expect(1, 1613, '\p{Ccc=0_0_0_029}', "");
Expect(0, 1613, '\p{^Ccc=0_0_0_029}', "");
Expect(0, 1613, '\P{Ccc=0_0_0_029}', "");
Expect(1, 1613, '\P{^Ccc=0_0_0_029}', "");
Expect(0, 1612, '\p{Ccc=0_0_0_029}', "");
Expect(1, 1612, '\p{^Ccc=0_0_0_029}', "");
Expect(1, 1612, '\P{Ccc=0_0_0_029}', "");
Expect(0, 1612, '\P{^Ccc=0_0_0_029}', "");
Error('\p{Is_Canonical_Combining_Class=/a/_0 0	0 00029}');
Error('\P{Is_Canonical_Combining_Class=/a/_0 0	0 00029}');
Expect(1, 1613, '\p{Is_Canonical_Combining_Class:0_0_0_029}', "");
Expect(0, 1613, '\p{^Is_Canonical_Combining_Class:0_0_0_029}', "");
Expect(0, 1613, '\P{Is_Canonical_Combining_Class:0_0_0_029}', "");
Expect(1, 1613, '\P{^Is_Canonical_Combining_Class:0_0_0_029}', "");
Expect(0, 1612, '\p{Is_Canonical_Combining_Class:0_0_0_029}', "");
Expect(1, 1612, '\p{^Is_Canonical_Combining_Class:0_0_0_029}', "");
Expect(1, 1612, '\P{Is_Canonical_Combining_Class:0_0_0_029}', "");
Expect(0, 1612, '\P{^Is_Canonical_Combining_Class:0_0_0_029}', "");
Error('\p{Is_Ccc= /a/0_0	00_0_00-0029}');
Error('\P{Is_Ccc= /a/0_0	00_0_00-0029}');
Expect(1, 1613, '\p{Is_Ccc=000029}', "");
Expect(0, 1613, '\p{^Is_Ccc=000029}', "");
Expect(0, 1613, '\P{Is_Ccc=000029}', "");
Expect(1, 1613, '\P{^Is_Ccc=000029}', "");
Expect(0, 1612, '\p{Is_Ccc=000029}', "");
Expect(1, 1612, '\p{^Is_Ccc=000029}', "");
Expect(1, 1612, '\P{Is_Ccc=000029}', "");
Expect(0, 1612, '\P{^Is_Ccc=000029}', "");
Error('\p{Canonical_Combining_Class=/a/_Right}');
Error('\P{Canonical_Combining_Class=/a/_Right}');
Expect(1, 119149, '\p{Canonical_Combining_Class:	right}', "");
Expect(0, 119149, '\p{^Canonical_Combining_Class:	right}', "");
Expect(0, 119149, '\P{Canonical_Combining_Class:	right}', "");
Expect(1, 119149, '\P{^Canonical_Combining_Class:	right}', "");
Expect(0, 119148, '\p{Canonical_Combining_Class:	right}', "");
Expect(1, 119148, '\p{^Canonical_Combining_Class:	right}', "");
Expect(1, 119148, '\P{Canonical_Combining_Class:	right}', "");
Expect(0, 119148, '\P{^Canonical_Combining_Class:	right}', "");
Expect(1, 119149, '\p{Canonical_Combining_Class=_Right}', "");
Expect(0, 119149, '\p{^Canonical_Combining_Class=_Right}', "");
Expect(0, 119149, '\P{Canonical_Combining_Class=_Right}', "");
Expect(1, 119149, '\P{^Canonical_Combining_Class=_Right}', "");
Expect(0, 119148, '\p{Canonical_Combining_Class=_Right}', "");
Expect(1, 119148, '\p{^Canonical_Combining_Class=_Right}', "");
Expect(1, 119148, '\P{Canonical_Combining_Class=_Right}', "");
Expect(0, 119148, '\P{^Canonical_Combining_Class=_Right}', "");
Error('\p{Ccc=-:=R}');
Error('\P{Ccc=-:=R}');
Expect(1, 119149, '\p{Ccc=r}', "");
Expect(0, 119149, '\p{^Ccc=r}', "");
Expect(0, 119149, '\P{Ccc=r}', "");
Expect(1, 119149, '\P{^Ccc=r}', "");
Expect(0, 119148, '\p{Ccc=r}', "");
Expect(1, 119148, '\p{^Ccc=r}', "");
Expect(1, 119148, '\P{Ccc=r}', "");
Expect(0, 119148, '\P{^Ccc=r}', "");
Expect(1, 119149, '\p{Ccc=-	R}', "");
Expect(0, 119149, '\p{^Ccc=-	R}', "");
Expect(0, 119149, '\P{Ccc=-	R}', "");
Expect(1, 119149, '\P{^Ccc=-	R}', "");
Expect(0, 119148, '\p{Ccc=-	R}', "");
Expect(1, 119148, '\p{^Ccc=-	R}', "");
Expect(1, 119148, '\P{Ccc=-	R}', "");
Expect(0, 119148, '\P{^Ccc=-	R}', "");
Error('\p{Is_Canonical_Combining_Class=/a/ 	000226}');
Error('\P{Is_Canonical_Combining_Class=/a/ 	000226}');
Expect(1, 119149, '\p{Is_Canonical_Combining_Class=0226}', "");
Expect(0, 119149, '\p{^Is_Canonical_Combining_Class=0226}', "");
Expect(0, 119149, '\P{Is_Canonical_Combining_Class=0226}', "");
Expect(1, 119149, '\P{^Is_Canonical_Combining_Class=0226}', "");
Expect(0, 119148, '\p{Is_Canonical_Combining_Class=0226}', "");
Expect(1, 119148, '\p{^Is_Canonical_Combining_Class=0226}', "");
Expect(1, 119148, '\P{Is_Canonical_Combining_Class=0226}', "");
Expect(0, 119148, '\P{^Is_Canonical_Combining_Class=0226}', "");
Error('\p{Is_Ccc=_right:=}');
Error('\P{Is_Ccc=_right:=}');
Expect(1, 119149, '\p{Is_Ccc=right}', "");
Expect(0, 119149, '\p{^Is_Ccc=right}', "");
Expect(0, 119149, '\P{Is_Ccc=right}', "");
Expect(1, 119149, '\P{^Is_Ccc=right}', "");
Expect(0, 119148, '\p{Is_Ccc=right}', "");
Expect(1, 119148, '\p{^Is_Ccc=right}', "");
Expect(1, 119148, '\P{Is_Ccc=right}', "");
Expect(0, 119148, '\P{^Is_Ccc=right}', "");
Expect(1, 119149, '\p{Is_Ccc:   - Right}', "");
Expect(0, 119149, '\p{^Is_Ccc:   - Right}', "");
Expect(0, 119149, '\P{Is_Ccc:   - Right}', "");
Expect(1, 119149, '\P{^Is_Ccc:   - Right}', "");
Expect(0, 119148, '\p{Is_Ccc:   - Right}', "");
Expect(1, 119148, '\p{^Is_Ccc:   - Right}', "");
Expect(1, 119148, '\P{Is_Ccc:   - Right}', "");
Expect(0, 119148, '\P{^Is_Ccc:   - Right}', "");
Error('\p{Canonical_Combining_Class=  0000	00 0015/a/}');
Error('\P{Canonical_Combining_Class=  0000	00 0015/a/}');
Expect(1, 1461, '\p{Canonical_Combining_Class=00_00_15}', "");
Expect(0, 1461, '\p{^Canonical_Combining_Class=00_00_15}', "");
Expect(0, 1461, '\P{Canonical_Combining_Class=00_00_15}', "");
Expect(1, 1461, '\P{^Canonical_Combining_Class=00_00_15}', "");
Expect(0, 1460, '\p{Canonical_Combining_Class=00_00_15}', "");
Expect(1, 1460, '\p{^Canonical_Combining_Class=00_00_15}', "");
Expect(1, 1460, '\P{Canonical_Combining_Class=00_00_15}', "");
Expect(0, 1460, '\P{^Canonical_Combining_Class=00_00_15}', "");
Error('\p{Ccc=/a/ -15}');
Error('\P{Ccc=/a/ -15}');
Expect(1, 1461, '\p{Ccc=00015}', "");
Expect(0, 1461, '\p{^Ccc=00015}', "");
Expect(0, 1461, '\P{Ccc=00015}', "");
Expect(1, 1461, '\P{^Ccc=00015}', "");
Expect(0, 1460, '\p{Ccc=00015}', "");
Expect(1, 1460, '\p{^Ccc=00015}', "");
Expect(1, 1460, '\P{Ccc=00015}', "");
Expect(0, 1460, '\P{^Ccc=00015}', "");
Error('\p{Is_Canonical_Combining_Class=-:=001 5}');
Error('\P{Is_Canonical_Combining_Class=-:=001 5}');
Expect(1, 1461, '\p{Is_Canonical_Combining_Class=0000000015}', "");
Expect(0, 1461, '\p{^Is_Canonical_Combining_Class=0000000015}', "");
Expect(0, 1461, '\P{Is_Canonical_Combining_Class=0000000015}', "");
Expect(1, 1461, '\P{^Is_Canonical_Combining_Class=0000000015}', "");
Expect(0, 1460, '\p{Is_Canonical_Combining_Class=0000000015}', "");
Expect(1, 1460, '\p{^Is_Canonical_Combining_Class=0000000015}', "");
Expect(1, 1460, '\P{Is_Canonical_Combining_Class=0000000015}', "");
Expect(0, 1460, '\P{^Is_Canonical_Combining_Class=0000000015}', "");
Error('\p{Is_Ccc=:=_	00001	5}');
Error('\P{Is_Ccc=:=_	00001	5}');
Expect(1, 1461, '\p{Is_Ccc:   00000015}', "");
Expect(0, 1461, '\p{^Is_Ccc:   00000015}', "");
Expect(0, 1461, '\P{Is_Ccc:   00000015}', "");
Expect(1, 1461, '\P{^Is_Ccc:   00000015}', "");
Expect(0, 1460, '\p{Is_Ccc:   00000015}', "");
Expect(1, 1460, '\p{^Is_Ccc:   00000015}', "");
Expect(1, 1460, '\P{Is_Ccc:   00000015}', "");
Expect(0, 1460, '\P{^Is_Ccc:   00000015}', "");
Error('\p{Canonical_Combining_Class=:=	-below-LEFT}');
Error('\P{Canonical_Combining_Class=:=	-below-LEFT}');
Expect(1, 12330, '\p{Canonical_Combining_Class:   belowleft}', "");
Expect(0, 12330, '\p{^Canonical_Combining_Class:   belowleft}', "");
Expect(0, 12330, '\P{Canonical_Combining_Class:   belowleft}', "");
Expect(1, 12330, '\P{^Canonical_Combining_Class:   belowleft}', "");
Expect(0, 12329, '\p{Canonical_Combining_Class:   belowleft}', "");
Expect(1, 12329, '\p{^Canonical_Combining_Class:   belowleft}', "");
Expect(1, 12329, '\P{Canonical_Combining_Class:   belowleft}', "");
Expect(0, 12329, '\P{^Canonical_Combining_Class:   belowleft}', "");
Expect(1, 12330, '\p{Canonical_Combining_Class= below	left}', "");
Expect(0, 12330, '\p{^Canonical_Combining_Class= below	left}', "");
Expect(0, 12330, '\P{Canonical_Combining_Class= below	left}', "");
Expect(1, 12330, '\P{^Canonical_Combining_Class= below	left}', "");
Expect(0, 12329, '\p{Canonical_Combining_Class= below	left}', "");
Expect(1, 12329, '\p{^Canonical_Combining_Class= below	left}', "");
Expect(1, 12329, '\P{Canonical_Combining_Class= below	left}', "");
Expect(0, 12329, '\P{^Canonical_Combining_Class= below	left}', "");
Error('\p{Ccc: /a/ -BL}');
Error('\P{Ccc: /a/ -BL}');
Expect(1, 12330, '\p{Ccc:	bl}', "");
Expect(0, 12330, '\p{^Ccc:	bl}', "");
Expect(0, 12330, '\P{Ccc:	bl}', "");
Expect(1, 12330, '\P{^Ccc:	bl}', "");
Expect(0, 12329, '\p{Ccc:	bl}', "");
Expect(1, 12329, '\p{^Ccc:	bl}', "");
Expect(1, 12329, '\P{Ccc:	bl}', "");
Expect(0, 12329, '\P{^Ccc:	bl}', "");
Expect(1, 12330, '\p{Ccc=_BL}', "");
Expect(0, 12330, '\p{^Ccc=_BL}', "");
Expect(0, 12330, '\P{Ccc=_BL}', "");
Expect(1, 12330, '\P{^Ccc=_BL}', "");
Expect(0, 12329, '\p{Ccc=_BL}', "");
Expect(1, 12329, '\p{^Ccc=_BL}', "");
Expect(1, 12329, '\P{Ccc=_BL}', "");
Expect(0, 12329, '\P{^Ccc=_BL}', "");
Error('\p{Is_Canonical_Combining_Class=	_+0021-8/a/}');
Error('\P{Is_Canonical_Combining_Class=	_+0021-8/a/}');
Expect(1, 12330, '\p{Is_Canonical_Combining_Class=21_8}', "");
Expect(0, 12330, '\p{^Is_Canonical_Combining_Class=21_8}', "");
Expect(0, 12330, '\P{Is_Canonical_Combining_Class=21_8}', "");
Expect(1, 12330, '\P{^Is_Canonical_Combining_Class=21_8}', "");
Expect(0, 12329, '\p{Is_Canonical_Combining_Class=21_8}', "");
Expect(1, 12329, '\p{^Is_Canonical_Combining_Class=21_8}', "");
Expect(1, 12329, '\P{Is_Canonical_Combining_Class=21_8}', "");
Expect(0, 12329, '\P{^Is_Canonical_Combining_Class=21_8}', "");
Error('\p{Is_Ccc= _BELOW-LEFT:=}');
Error('\P{Is_Ccc= _BELOW-LEFT:=}');
Expect(1, 12330, '\p{Is_Ccc=belowleft}', "");
Expect(0, 12330, '\p{^Is_Ccc=belowleft}', "");
Expect(0, 12330, '\P{Is_Ccc=belowleft}', "");
Expect(1, 12330, '\P{^Is_Ccc=belowleft}', "");
Expect(0, 12329, '\p{Is_Ccc=belowleft}', "");
Expect(1, 12329, '\p{^Is_Ccc=belowleft}', "");
Expect(1, 12329, '\P{Is_Ccc=belowleft}', "");
Expect(0, 12329, '\P{^Is_Ccc=belowleft}', "");
Expect(1, 12330, '\p{Is_Ccc=	-Below	Left}', "");
Expect(0, 12330, '\p{^Is_Ccc=	-Below	Left}', "");
Expect(0, 12330, '\P{Is_Ccc=	-Below	Left}', "");
Expect(1, 12330, '\P{^Is_Ccc=	-Below	Left}', "");
Expect(0, 12329, '\p{Is_Ccc=	-Below	Left}', "");
Expect(1, 12329, '\p{^Is_Ccc=	-Below	Left}', "");
Expect(1, 12329, '\P{Is_Ccc=	-Below	Left}', "");
Expect(0, 12329, '\P{^Is_Ccc=	-Below	Left}', "");
Error('\p{Canonical_Combining_Class=/a/	Left}');
Error('\P{Canonical_Combining_Class=/a/	Left}');
Expect(1, 12335, '\p{Canonical_Combining_Class=left}', "");
Expect(0, 12335, '\p{^Canonical_Combining_Class=left}', "");
Expect(0, 12335, '\P{Canonical_Combining_Class=left}', "");
Expect(1, 12335, '\P{^Canonical_Combining_Class=left}', "");
Expect(0, 12333, '\p{Canonical_Combining_Class=left}', "");
Expect(1, 12333, '\p{^Canonical_Combining_Class=left}', "");
Expect(1, 12333, '\P{Canonical_Combining_Class=left}', "");
Expect(0, 12333, '\P{^Canonical_Combining_Class=left}', "");
Expect(1, 12335, '\p{Canonical_Combining_Class:	-Left}', "");
Expect(0, 12335, '\p{^Canonical_Combining_Class:	-Left}', "");
Expect(0, 12335, '\P{Canonical_Combining_Class:	-Left}', "");
Expect(1, 12335, '\P{^Canonical_Combining_Class:	-Left}', "");
Expect(0, 12333, '\p{Canonical_Combining_Class:	-Left}', "");
Expect(1, 12333, '\p{^Canonical_Combining_Class:	-Left}', "");
Expect(1, 12333, '\P{Canonical_Combining_Class:	-Left}', "");
Expect(0, 12333, '\P{^Canonical_Combining_Class:	-Left}', "");
Error('\p{Ccc=:=	L}');
Error('\P{Ccc=:=	L}');
Expect(1, 12335, '\p{Ccc=l}', "");
Expect(0, 12335, '\p{^Ccc=l}', "");
Expect(0, 12335, '\P{Ccc=l}', "");
Expect(1, 12335, '\P{^Ccc=l}', "");
Expect(0, 12333, '\p{Ccc=l}', "");
Expect(1, 12333, '\p{^Ccc=l}', "");
Expect(1, 12333, '\P{Ccc=l}', "");
Expect(0, 12333, '\P{^Ccc=l}', "");
Expect(1, 12335, '\p{Ccc=_ l}', "");
Expect(0, 12335, '\p{^Ccc=_ l}', "");
Expect(0, 12335, '\P{Ccc=_ l}', "");
Expect(1, 12335, '\P{^Ccc=_ l}', "");
Expect(0, 12333, '\p{Ccc=_ l}', "");
Expect(1, 12333, '\p{^Ccc=_ l}', "");
Expect(1, 12333, '\P{Ccc=_ l}', "");
Expect(0, 12333, '\P{^Ccc=_ l}', "");
Error('\p{Is_Canonical_Combining_Class:/a/ 	00000224}');
Error('\P{Is_Canonical_Combining_Class:/a/ 	00000224}');
Expect(1, 12335, '\p{Is_Canonical_Combining_Class=00000_00002_24}', "");
Expect(0, 12335, '\p{^Is_Canonical_Combining_Class=00000_00002_24}', "");
Expect(0, 12335, '\P{Is_Canonical_Combining_Class=00000_00002_24}', "");
Expect(1, 12335, '\P{^Is_Canonical_Combining_Class=00000_00002_24}', "");
Expect(0, 12333, '\p{Is_Canonical_Combining_Class=00000_00002_24}', "");
Expect(1, 12333, '\p{^Is_Canonical_Combining_Class=00000_00002_24}', "");
Expect(1, 12333, '\P{Is_Canonical_Combining_Class=00000_00002_24}', "");
Expect(0, 12333, '\P{^Is_Canonical_Combining_Class=00000_00002_24}', "");
Error('\p{Is_Ccc::=left}');
Error('\P{Is_Ccc::=left}');
Expect(1, 12335, '\p{Is_Ccc=left}', "");
Expect(0, 12335, '\p{^Is_Ccc=left}', "");
Expect(0, 12335, '\P{Is_Ccc=left}', "");
Expect(1, 12335, '\P{^Is_Ccc=left}', "");
Expect(0, 12333, '\p{Is_Ccc=left}', "");
Expect(1, 12333, '\p{^Is_Ccc=left}', "");
Expect(1, 12333, '\P{Is_Ccc=left}', "");
Expect(0, 12333, '\P{^Is_Ccc=left}', "");
Expect(1, 12335, '\p{Is_Ccc=-	LEFT}', "");
Expect(0, 12335, '\p{^Is_Ccc=-	LEFT}', "");
Expect(0, 12335, '\P{Is_Ccc=-	LEFT}', "");
Expect(1, 12335, '\P{^Is_Ccc=-	LEFT}', "");
Expect(0, 12333, '\p{Is_Ccc=-	LEFT}', "");
Expect(1, 12333, '\p{^Is_Ccc=-	LEFT}', "");
Expect(1, 12333, '\P{Is_Ccc=-	LEFT}', "");
Expect(0, 12333, '\P{^Is_Ccc=-	LEFT}', "");
Error('\p{Canonical_Combining_Class=_-Above/a/}');
Error('\P{Canonical_Combining_Class=_-Above/a/}');
Expect(1, 788, '\p{Canonical_Combining_Class=above}', "");
Expect(0, 788, '\p{^Canonical_Combining_Class=above}', "");
Expect(0, 788, '\P{Canonical_Combining_Class=above}', "");
Expect(1, 788, '\P{^Canonical_Combining_Class=above}', "");
Expect(0, 767, '\p{Canonical_Combining_Class=above}', "");
Expect(1, 767, '\p{^Canonical_Combining_Class=above}', "");
Expect(1, 767, '\P{Canonical_Combining_Class=above}', "");
Expect(0, 767, '\P{^Canonical_Combining_Class=above}', "");
Expect(1, 788, '\p{Canonical_Combining_Class=_above}', "");
Expect(0, 788, '\p{^Canonical_Combining_Class=_above}', "");
Expect(0, 788, '\P{Canonical_Combining_Class=_above}', "");
Expect(1, 788, '\P{^Canonical_Combining_Class=_above}', "");
Expect(0, 767, '\p{Canonical_Combining_Class=_above}', "");
Expect(1, 767, '\p{^Canonical_Combining_Class=_above}', "");
Expect(1, 767, '\P{Canonical_Combining_Class=_above}', "");
Expect(0, 767, '\P{^Canonical_Combining_Class=_above}', "");
Error('\p{Ccc= /a/A}');
Error('\P{Ccc= /a/A}');
Expect(1, 788, '\p{Ccc:   a}', "");
Expect(0, 788, '\p{^Ccc:   a}', "");
Expect(0, 788, '\P{Ccc:   a}', "");
Expect(1, 788, '\P{^Ccc:   a}', "");
Expect(0, 767, '\p{Ccc:   a}', "");
Expect(1, 767, '\p{^Ccc:   a}', "");
Expect(1, 767, '\P{Ccc:   a}', "");
Expect(0, 767, '\P{^Ccc:   a}', "");
Expect(1, 788, '\p{Ccc=A}', "");
Expect(0, 788, '\p{^Ccc=A}', "");
Expect(0, 788, '\P{Ccc=A}', "");
Expect(1, 788, '\P{^Ccc=A}', "");
Expect(0, 767, '\p{Ccc=A}', "");
Expect(1, 767, '\p{^Ccc=A}', "");
Expect(1, 767, '\P{Ccc=A}', "");
Expect(0, 767, '\P{^Ccc=A}', "");
Error('\p{Is_Canonical_Combining_Class=	:=+0000230}');
Error('\P{Is_Canonical_Combining_Class=	:=+0000230}');
Expect(1, 788, '\p{Is_Canonical_Combining_Class=0_0_2_30}', "");
Expect(0, 788, '\p{^Is_Canonical_Combining_Class=0_0_2_30}', "");
Expect(0, 788, '\P{Is_Canonical_Combining_Class=0_0_2_30}', "");
Expect(1, 788, '\P{^Is_Canonical_Combining_Class=0_0_2_30}', "");
Expect(0, 767, '\p{Is_Canonical_Combining_Class=0_0_2_30}', "");
Expect(1, 767, '\p{^Is_Canonical_Combining_Class=0_0_2_30}', "");
Expect(1, 767, '\P{Is_Canonical_Combining_Class=0_0_2_30}', "");
Expect(0, 767, '\P{^Is_Canonical_Combining_Class=0_0_2_30}', "");
Error('\p{Is_Ccc=-Above:=}');
Error('\P{Is_Ccc=-Above:=}');
Expect(1, 788, '\p{Is_Ccc=above}', "");
Expect(0, 788, '\p{^Is_Ccc=above}', "");
Expect(0, 788, '\P{Is_Ccc=above}', "");
Expect(1, 788, '\P{^Is_Ccc=above}', "");
Expect(0, 767, '\p{Is_Ccc=above}', "");
Expect(1, 767, '\p{^Is_Ccc=above}', "");
Expect(1, 767, '\P{Is_Ccc=above}', "");
Expect(0, 767, '\P{^Is_Ccc=above}', "");
Expect(1, 788, '\p{Is_Ccc=	_Above}', "");
Expect(0, 788, '\p{^Is_Ccc=	_Above}', "");
Expect(0, 788, '\P{Is_Ccc=	_Above}', "");
Expect(1, 788, '\P{^Is_Ccc=	_Above}', "");
Expect(0, 767, '\p{Is_Ccc=	_Above}', "");
Expect(1, 767, '\p{^Is_Ccc=	_Above}', "");
Expect(1, 767, '\P{Is_Ccc=	_Above}', "");
Expect(0, 767, '\P{^Is_Ccc=	_Above}', "");
Error('\p{Canonical_Combining_Class= +000:=0129}');
Error('\P{Canonical_Combining_Class= +000:=0129}');
Expect(1, 3953, '\p{Canonical_Combining_Class=0_1_29}', "");
Expect(0, 3953, '\p{^Canonical_Combining_Class=0_1_29}', "");
Expect(0, 3953, '\P{Canonical_Combining_Class=0_1_29}', "");
Expect(1, 3953, '\P{^Canonical_Combining_Class=0_1_29}', "");
Expect(0, 3952, '\p{Canonical_Combining_Class=0_1_29}', "");
Expect(1, 3952, '\p{^Canonical_Combining_Class=0_1_29}', "");
Expect(1, 3952, '\P{Canonical_Combining_Class=0_1_29}', "");
Expect(0, 3952, '\P{^Canonical_Combining_Class=0_1_29}', "");
Error('\p{Ccc=__0	0:=0	00	0129}');
Error('\P{Ccc=__0	0:=0	00	0129}');
Expect(1, 3953, '\p{Ccc=00000129}', "");
Expect(0, 3953, '\p{^Ccc=00000129}', "");
Expect(0, 3953, '\P{Ccc=00000129}', "");
Expect(1, 3953, '\P{^Ccc=00000129}', "");
Expect(0, 3952, '\p{Ccc=00000129}', "");
Expect(1, 3952, '\p{^Ccc=00000129}', "");
Expect(1, 3952, '\P{Ccc=00000129}', "");
Expect(0, 3952, '\P{^Ccc=00000129}', "");
Error('\p{Is_Canonical_Combining_Class=_/a/00 0	0-00 129}');
Error('\P{Is_Canonical_Combining_Class=_/a/00 0	0-00 129}');
Expect(1, 3953, '\p{Is_Canonical_Combining_Class:	0000000129}', "");
Expect(0, 3953, '\p{^Is_Canonical_Combining_Class:	0000000129}', "");
Expect(0, 3953, '\P{Is_Canonical_Combining_Class:	0000000129}', "");
Expect(1, 3953, '\P{^Is_Canonical_Combining_Class:	0000000129}', "");
Expect(0, 3952, '\p{Is_Canonical_Combining_Class:	0000000129}', "");
Expect(1, 3952, '\p{^Is_Canonical_Combining_Class:	0000000129}', "");
Expect(1, 3952, '\P{Is_Canonical_Combining_Class:	0000000129}', "");
Expect(0, 3952, '\P{^Is_Canonical_Combining_Class:	0000000129}', "");
Error('\p{Is_Ccc=_+0012_9:=}');
Error('\P{Is_Ccc=_+0012_9:=}');
Expect(1, 3953, '\p{Is_Ccc=12_9}', "");
Expect(0, 3953, '\p{^Is_Ccc=12_9}', "");
Expect(0, 3953, '\P{Is_Ccc=12_9}', "");
Expect(1, 3953, '\P{^Is_Ccc=12_9}', "");
Expect(0, 3952, '\p{Is_Ccc=12_9}', "");
Expect(1, 3952, '\p{^Is_Ccc=12_9}', "");
Expect(1, 3952, '\P{Is_Ccc=12_9}', "");
Expect(0, 3952, '\P{^Is_Ccc=12_9}', "");
Error('\p{Canonical_Combining_Class=_/a/000	17}');
Error('\P{Canonical_Combining_Class=_/a/000	17}');
Expect(1, 1463, '\p{Canonical_Combining_Class:	000000017}', "");
Expect(0, 1463, '\p{^Canonical_Combining_Class:	000000017}', "");
Expect(0, 1463, '\P{Canonical_Combining_Class:	000000017}', "");
Expect(1, 1463, '\P{^Canonical_Combining_Class:	000000017}', "");
Expect(0, 1462, '\p{Canonical_Combining_Class:	000000017}', "");
Expect(1, 1462, '\p{^Canonical_Combining_Class:	000000017}', "");
Expect(1, 1462, '\P{Canonical_Combining_Class:	000000017}', "");
Expect(0, 1462, '\P{^Canonical_Combining_Class:	000000017}', "");
Error('\p{Ccc=- +0_0/a/00-0-0_0	0017}');
Error('\P{Ccc=- +0_0/a/00-0-0_0	0017}');
Expect(1, 1463, '\p{Ccc=0017}', "");
Expect(0, 1463, '\p{^Ccc=0017}', "");
Expect(0, 1463, '\P{Ccc=0017}', "");
Expect(1, 1463, '\P{^Ccc=0017}', "");
Expect(0, 1462, '\p{Ccc=0017}', "");
Expect(1, 1462, '\p{^Ccc=0017}', "");
Expect(1, 1462, '\P{Ccc=0017}', "");
Expect(0, 1462, '\P{^Ccc=0017}', "");
Error('\p{Is_Canonical_Combining_Class=_:=+00017}');
Error('\P{Is_Canonical_Combining_Class=_:=+00017}');
Expect(1, 1463, '\p{Is_Canonical_Combining_Class=0017}', "");
Expect(0, 1463, '\p{^Is_Canonical_Combining_Class=0017}', "");
Expect(0, 1463, '\P{Is_Canonical_Combining_Class=0017}', "");
Expect(1, 1463, '\P{^Is_Canonical_Combining_Class=0017}', "");
Expect(0, 1462, '\p{Is_Canonical_Combining_Class=0017}', "");
Expect(1, 1462, '\p{^Is_Canonical_Combining_Class=0017}', "");
Expect(1, 1462, '\P{Is_Canonical_Combining_Class=0017}', "");
Expect(0, 1462, '\P{^Is_Canonical_Combining_Class=0017}', "");
Error('\p{Is_Ccc=	 00017:=}');
Error('\P{Is_Ccc=	 00017:=}');
Expect(1, 1463, '\p{Is_Ccc=+0_0_0_0_0_17}', "");
Expect(0, 1463, '\p{^Is_Ccc=+0_0_0_0_0_17}', "");
Expect(0, 1463, '\P{Is_Ccc=+0_0_0_0_0_17}', "");
Expect(1, 1463, '\P{^Is_Ccc=+0_0_0_0_0_17}', "");
Expect(0, 1462, '\p{Is_Ccc=+0_0_0_0_0_17}', "");
Expect(1, 1462, '\p{^Is_Ccc=+0_0_0_0_0_17}', "");
Expect(1, 1462, '\P{Is_Ccc=+0_0_0_0_0_17}', "");
Expect(0, 1462, '\P{^Is_Ccc=+0_0_0_0_0_17}', "");
Error('\p{Canonical_Combining_Class=- Not	REORDERED/a/}');
Error('\P{Canonical_Combining_Class=- Not	REORDERED/a/}');
Expect(1, 767, '\p{Canonical_Combining_Class=notreordered}', "");
Expect(0, 767, '\p{^Canonical_Combining_Class=notreordered}', "");
Expect(0, 767, '\P{Canonical_Combining_Class=notreordered}', "");
Expect(1, 767, '\P{^Canonical_Combining_Class=notreordered}', "");
Expect(0, 846, '\p{Canonical_Combining_Class=notreordered}', "");
Expect(1, 846, '\p{^Canonical_Combining_Class=notreordered}', "");
Expect(1, 846, '\P{Canonical_Combining_Class=notreordered}', "");
Expect(0, 846, '\P{^Canonical_Combining_Class=notreordered}', "");
Expect(1, 767, '\p{Canonical_Combining_Class=__Not_reordered}', "");
Expect(0, 767, '\p{^Canonical_Combining_Class=__Not_reordered}', "");
Expect(0, 767, '\P{Canonical_Combining_Class=__Not_reordered}', "");
Expect(1, 767, '\P{^Canonical_Combining_Class=__Not_reordered}', "");
Expect(0, 846, '\p{Canonical_Combining_Class=__Not_reordered}', "");
Expect(1, 846, '\p{^Canonical_Combining_Class=__Not_reordered}', "");
Expect(1, 846, '\P{Canonical_Combining_Class=__Not_reordered}', "");
Expect(0, 846, '\P{^Canonical_Combining_Class=__Not_reordered}', "");
Error('\p{Ccc=	-NR/a/}');
Error('\P{Ccc=	-NR/a/}');
Expect(1, 767, '\p{Ccc=nr}', "");
Expect(0, 767, '\p{^Ccc=nr}', "");
Expect(0, 767, '\P{Ccc=nr}', "");
Expect(1, 767, '\P{^Ccc=nr}', "");
Expect(0, 846, '\p{Ccc=nr}', "");
Expect(1, 846, '\p{^Ccc=nr}', "");
Expect(1, 846, '\P{Ccc=nr}', "");
Expect(0, 846, '\P{^Ccc=nr}', "");
Expect(1, 767, '\p{Ccc=	NR}', "");
Expect(0, 767, '\p{^Ccc=	NR}', "");
Expect(0, 767, '\P{Ccc=	NR}', "");
Expect(1, 767, '\P{^Ccc=	NR}', "");
Expect(0, 846, '\p{Ccc=	NR}', "");
Expect(1, 846, '\p{^Ccc=	NR}', "");
Expect(1, 846, '\P{Ccc=	NR}', "");
Expect(0, 846, '\P{^Ccc=	NR}', "");
Error('\p{Is_Canonical_Combining_Class=- 0_0/a/}');
Error('\P{Is_Canonical_Combining_Class=- 0_0/a/}');
Expect(1, 767, '\p{Is_Canonical_Combining_Class=+0000000}', "");
Expect(0, 767, '\p{^Is_Canonical_Combining_Class=+0000000}', "");
Expect(0, 767, '\P{Is_Canonical_Combining_Class=+0000000}', "");
Expect(1, 767, '\P{^Is_Canonical_Combining_Class=+0000000}', "");
Expect(0, 846, '\p{Is_Canonical_Combining_Class=+0000000}', "");
Expect(1, 846, '\p{^Is_Canonical_Combining_Class=+0000000}', "");
Expect(1, 846, '\P{Is_Canonical_Combining_Class=+0000000}', "");
Expect(0, 846, '\P{^Is_Canonical_Combining_Class=+0000000}', "");
Error('\p{Is_Ccc=/a/NOT reordered}');
Error('\P{Is_Ccc=/a/NOT reordered}');
Expect(1, 767, '\p{Is_Ccc=notreordered}', "");
Expect(0, 767, '\p{^Is_Ccc=notreordered}', "");
Expect(0, 767, '\P{Is_Ccc=notreordered}', "");
Expect(1, 767, '\P{^Is_Ccc=notreordered}', "");
Expect(0, 846, '\p{Is_Ccc=notreordered}', "");
Expect(1, 846, '\p{^Is_Ccc=notreordered}', "");
Expect(1, 846, '\P{Is_Ccc=notreordered}', "");
Expect(0, 846, '\P{^Is_Ccc=notreordered}', "");
Expect(1, 767, '\p{Is_Ccc= _Not Reordered}', "");
Expect(0, 767, '\p{^Is_Ccc= _Not Reordered}', "");
Expect(0, 767, '\P{Is_Ccc= _Not Reordered}', "");
Expect(1, 767, '\P{^Is_Ccc= _Not Reordered}', "");
Expect(0, 846, '\p{Is_Ccc= _Not Reordered}', "");
Expect(1, 846, '\p{^Is_Ccc= _Not Reordered}', "");
Expect(1, 846, '\P{Is_Ccc= _Not Reordered}', "");
Expect(0, 846, '\P{^Is_Ccc= _Not Reordered}', "");
Error('\p{Canonical_Combining_Class=		above:=Left}');
Error('\P{Canonical_Combining_Class=		above:=Left}');
Expect(1, 1454, '\p{Canonical_Combining_Class=aboveleft}', "");
Expect(0, 1454, '\p{^Canonical_Combining_Class=aboveleft}', "");
Expect(0, 1454, '\P{Canonical_Combining_Class=aboveleft}', "");
Expect(1, 1454, '\P{^Canonical_Combining_Class=aboveleft}', "");
Expect(0, 1453, '\p{Canonical_Combining_Class=aboveleft}', "");
Expect(1, 1453, '\p{^Canonical_Combining_Class=aboveleft}', "");
Expect(1, 1453, '\P{Canonical_Combining_Class=aboveleft}', "");
Expect(0, 1453, '\P{^Canonical_Combining_Class=aboveleft}', "");
Expect(1, 1454, '\p{Canonical_Combining_Class:    _aboveleft}', "");
Expect(0, 1454, '\p{^Canonical_Combining_Class:    _aboveleft}', "");
Expect(0, 1454, '\P{Canonical_Combining_Class:    _aboveleft}', "");
Expect(1, 1454, '\P{^Canonical_Combining_Class:    _aboveleft}', "");
Expect(0, 1453, '\p{Canonical_Combining_Class:    _aboveleft}', "");
Expect(1, 1453, '\p{^Canonical_Combining_Class:    _aboveleft}', "");
Expect(1, 1453, '\P{Canonical_Combining_Class:    _aboveleft}', "");
Expect(0, 1453, '\P{^Canonical_Combining_Class:    _aboveleft}', "");
Error('\p{Ccc=/a/_	AL}');
Error('\P{Ccc=/a/_	AL}');
Expect(1, 1454, '\p{Ccc=al}', "");
Expect(0, 1454, '\p{^Ccc=al}', "");
Expect(0, 1454, '\P{Ccc=al}', "");
Expect(1, 1454, '\P{^Ccc=al}', "");
Expect(0, 1453, '\p{Ccc=al}', "");
Expect(1, 1453, '\p{^Ccc=al}', "");
Expect(1, 1453, '\P{Ccc=al}', "");
Expect(0, 1453, '\P{^Ccc=al}', "");
Expect(1, 1454, '\p{Ccc:		AL}', "");
Expect(0, 1454, '\p{^Ccc:		AL}', "");
Expect(0, 1454, '\P{Ccc:		AL}', "");
Expect(1, 1454, '\P{^Ccc:		AL}', "");
Expect(0, 1453, '\p{Ccc:		AL}', "");
Expect(1, 1453, '\p{^Ccc:		AL}', "");
Expect(1, 1453, '\P{Ccc:		AL}', "");
Expect(0, 1453, '\P{^Ccc:		AL}', "");
Error('\p{Is_Canonical_Combining_Class:   :=00228}');
Error('\P{Is_Canonical_Combining_Class:   :=00228}');
Expect(1, 1454, '\p{Is_Canonical_Combining_Class=000000000228}', "");
Expect(0, 1454, '\p{^Is_Canonical_Combining_Class=000000000228}', "");
Expect(0, 1454, '\P{Is_Canonical_Combining_Class=000000000228}', "");
Expect(1, 1454, '\P{^Is_Canonical_Combining_Class=000000000228}', "");
Expect(0, 1453, '\p{Is_Canonical_Combining_Class=000000000228}', "");
Expect(1, 1453, '\p{^Is_Canonical_Combining_Class=000000000228}', "");
Expect(1, 1453, '\P{Is_Canonical_Combining_Class=000000000228}', "");
Expect(0, 1453, '\P{^Is_Canonical_Combining_Class=000000000228}', "");
Error('\p{Is_Ccc=/a/_-Above_Left}');
Error('\P{Is_Ccc=/a/_-Above_Left}');
Expect(1, 1454, '\p{Is_Ccc=aboveleft}', "");
Expect(0, 1454, '\p{^Is_Ccc=aboveleft}', "");
Expect(0, 1454, '\P{Is_Ccc=aboveleft}', "");
Expect(1, 1454, '\P{^Is_Ccc=aboveleft}', "");
Expect(0, 1453, '\p{Is_Ccc=aboveleft}', "");
Expect(1, 1453, '\p{^Is_Ccc=aboveleft}', "");
Expect(1, 1453, '\P{Is_Ccc=aboveleft}', "");
Expect(0, 1453, '\P{^Is_Ccc=aboveleft}', "");
Expect(1, 1454, '\p{Is_Ccc=  Above-Left}', "");
Expect(0, 1454, '\p{^Is_Ccc=  Above-Left}', "");
Expect(0, 1454, '\P{Is_Ccc=  Above-Left}', "");
Expect(1, 1454, '\P{^Is_Ccc=  Above-Left}', "");
Expect(0, 1453, '\p{Is_Ccc=  Above-Left}', "");
Expect(1, 1453, '\p{^Is_Ccc=  Above-Left}', "");
Expect(1, 1453, '\P{Is_Ccc=  Above-Left}', "");
Expect(0, 1453, '\P{^Is_Ccc=  Above-Left}', "");
Error('\p{Canonical_Combining_Class:  :=OVERLAY}');
Error('\P{Canonical_Combining_Class:  :=OVERLAY}');
Expect(1, 824, '\p{Canonical_Combining_Class:	overlay}', "");
Expect(0, 824, '\p{^Canonical_Combining_Class:	overlay}', "");
Expect(0, 824, '\P{Canonical_Combining_Class:	overlay}', "");
Expect(1, 824, '\P{^Canonical_Combining_Class:	overlay}', "");
Expect(0, 819, '\p{Canonical_Combining_Class:	overlay}', "");
Expect(1, 819, '\p{^Canonical_Combining_Class:	overlay}', "");
Expect(1, 819, '\P{Canonical_Combining_Class:	overlay}', "");
Expect(0, 819, '\P{^Canonical_Combining_Class:	overlay}', "");
Expect(1, 824, '\p{Canonical_Combining_Class= Overlay}', "");
Expect(0, 824, '\p{^Canonical_Combining_Class= Overlay}', "");
Expect(0, 824, '\P{Canonical_Combining_Class= Overlay}', "");
Expect(1, 824, '\P{^Canonical_Combining_Class= Overlay}', "");
Expect(0, 819, '\p{Canonical_Combining_Class= Overlay}', "");
Expect(1, 819, '\p{^Canonical_Combining_Class= Overlay}', "");
Expect(1, 819, '\P{Canonical_Combining_Class= Overlay}', "");
Expect(0, 819, '\P{^Canonical_Combining_Class= Overlay}', "");
Error('\p{Ccc=	:=OV}');
Error('\P{Ccc=	:=OV}');
Expect(1, 824, '\p{Ccc=ov}', "");
Expect(0, 824, '\p{^Ccc=ov}', "");
Expect(0, 824, '\P{Ccc=ov}', "");
Expect(1, 824, '\P{^Ccc=ov}', "");
Expect(0, 819, '\p{Ccc=ov}', "");
Expect(1, 819, '\p{^Ccc=ov}', "");
Expect(1, 819, '\P{Ccc=ov}', "");
Expect(0, 819, '\P{^Ccc=ov}', "");
Expect(1, 824, '\p{Ccc=	 OV}', "");
Expect(0, 824, '\p{^Ccc=	 OV}', "");
Expect(0, 824, '\P{Ccc=	 OV}', "");
Expect(1, 824, '\P{^Ccc=	 OV}', "");
Expect(0, 819, '\p{Ccc=	 OV}', "");
Expect(1, 819, '\p{^Ccc=	 OV}', "");
Expect(1, 819, '\P{Ccc=	 OV}', "");
Expect(0, 819, '\P{^Ccc=	 OV}', "");
Error('\p{Is_Canonical_Combining_Class=- 00000000 1:=}');
Error('\P{Is_Canonical_Combining_Class=- 00000000 1:=}');
Expect(1, 824, '\p{Is_Canonical_Combining_Class: 00001}', "");
Expect(0, 824, '\p{^Is_Canonical_Combining_Class: 00001}', "");
Expect(0, 824, '\P{Is_Canonical_Combining_Class: 00001}', "");
Expect(1, 824, '\P{^Is_Canonical_Combining_Class: 00001}', "");
Expect(0, 819, '\p{Is_Canonical_Combining_Class: 00001}', "");
Expect(1, 819, '\p{^Is_Canonical_Combining_Class: 00001}', "");
Expect(1, 819, '\P{Is_Canonical_Combining_Class: 00001}', "");
Expect(0, 819, '\P{^Is_Canonical_Combining_Class: 00001}', "");
Error('\p{Is_Ccc:	/a/OVERLAY}');
Error('\P{Is_Ccc:	/a/OVERLAY}');
Expect(1, 824, '\p{Is_Ccc: overlay}', "");
Expect(0, 824, '\p{^Is_Ccc: overlay}', "");
Expect(0, 824, '\P{Is_Ccc: overlay}', "");
Expect(1, 824, '\P{^Is_Ccc: overlay}', "");
Expect(0, 819, '\p{Is_Ccc: overlay}', "");
Expect(1, 819, '\p{^Is_Ccc: overlay}', "");
Expect(1, 819, '\P{Is_Ccc: overlay}', "");
Expect(0, 819, '\P{^Is_Ccc: overlay}', "");
Expect(1, 824, '\p{Is_Ccc= 	Overlay}', "");
Expect(0, 824, '\p{^Is_Ccc= 	Overlay}', "");
Expect(0, 824, '\P{Is_Ccc= 	Overlay}', "");
Expect(1, 824, '\P{^Is_Ccc= 	Overlay}', "");
Expect(0, 819, '\p{Is_Ccc= 	Overlay}', "");
Expect(1, 819, '\p{^Is_Ccc= 	Overlay}', "");
Expect(1, 819, '\P{Is_Ccc= 	Overlay}', "");
Expect(0, 819, '\P{^Is_Ccc= 	Overlay}', "");
Error('\p{Canonical_Combining_Class=/a/	Virama}');
Error('\P{Canonical_Combining_Class=/a/	Virama}');
Expect(1, 2381, '\p{Canonical_Combining_Class=virama}', "");
Expect(0, 2381, '\p{^Canonical_Combining_Class=virama}', "");
Expect(0, 2381, '\P{Canonical_Combining_Class=virama}', "");
Expect(1, 2381, '\P{^Canonical_Combining_Class=virama}', "");
Expect(0, 2380, '\p{Canonical_Combining_Class=virama}', "");
Expect(1, 2380, '\p{^Canonical_Combining_Class=virama}', "");
Expect(1, 2380, '\P{Canonical_Combining_Class=virama}', "");
Expect(0, 2380, '\P{^Canonical_Combining_Class=virama}', "");
Expect(1, 2381, '\p{Canonical_Combining_Class= Virama}', "");
Expect(0, 2381, '\p{^Canonical_Combining_Class= Virama}', "");
Expect(0, 2381, '\P{Canonical_Combining_Class= Virama}', "");
Expect(1, 2381, '\P{^Canonical_Combining_Class= Virama}', "");
Expect(0, 2380, '\p{Canonical_Combining_Class= Virama}', "");
Expect(1, 2380, '\p{^Canonical_Combining_Class= Virama}', "");
Expect(1, 2380, '\P{Canonical_Combining_Class= Virama}', "");
Expect(0, 2380, '\P{^Canonical_Combining_Class= Virama}', "");
Error('\p{Ccc=:=	 VR}');
Error('\P{Ccc=:=	 VR}');
Expect(1, 2381, '\p{Ccc=vr}', "");
Expect(0, 2381, '\p{^Ccc=vr}', "");
Expect(0, 2381, '\P{Ccc=vr}', "");
Expect(1, 2381, '\P{^Ccc=vr}', "");
Expect(0, 2380, '\p{Ccc=vr}', "");
Expect(1, 2380, '\p{^Ccc=vr}', "");
Expect(1, 2380, '\P{Ccc=vr}', "");
Expect(0, 2380, '\P{^Ccc=vr}', "");
Expect(1, 2381, '\p{Ccc=_VR}', "");
Expect(0, 2381, '\p{^Ccc=_VR}', "");
Expect(0, 2381, '\P{Ccc=_VR}', "");
Expect(1, 2381, '\P{^Ccc=_VR}', "");
Expect(0, 2380, '\p{Ccc=_VR}', "");
Expect(1, 2380, '\p{^Ccc=_VR}', "");
Expect(1, 2380, '\P{Ccc=_VR}', "");
Expect(0, 2380, '\P{^Ccc=_VR}', "");
Error('\p{Is_Canonical_Combining_Class=/a/-0	9}');
Error('\P{Is_Canonical_Combining_Class=/a/-0	9}');
Expect(1, 2381, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_009}', "");
Expect(0, 2381, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_009}', "");
Expect(0, 2381, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_009}', "");
Expect(1, 2381, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_009}', "");
Expect(0, 2380, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_009}', "");
Expect(1, 2380, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_009}', "");
Expect(1, 2380, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_009}', "");
Expect(0, 2380, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_009}', "");
Error('\p{Is_Ccc=/a/-VIRAMA}');
Error('\P{Is_Ccc=/a/-VIRAMA}');
Expect(1, 2381, '\p{Is_Ccc=virama}', "");
Expect(0, 2381, '\p{^Is_Ccc=virama}', "");
Expect(0, 2381, '\P{Is_Ccc=virama}', "");
Expect(1, 2381, '\P{^Is_Ccc=virama}', "");
Expect(0, 2380, '\p{Is_Ccc=virama}', "");
Expect(1, 2380, '\p{^Is_Ccc=virama}', "");
Expect(1, 2380, '\P{Is_Ccc=virama}', "");
Expect(0, 2380, '\P{^Is_Ccc=virama}', "");
Expect(1, 2381, '\p{Is_Ccc=	Virama}', "");
Expect(0, 2381, '\p{^Is_Ccc=	Virama}', "");
Expect(0, 2381, '\P{Is_Ccc=	Virama}', "");
Expect(1, 2381, '\P{^Is_Ccc=	Virama}', "");
Expect(0, 2380, '\p{Is_Ccc=	Virama}', "");
Expect(1, 2380, '\p{^Is_Ccc=	Virama}', "");
Expect(1, 2380, '\P{Is_Ccc=	Virama}', "");
Expect(0, 2380, '\P{^Is_Ccc=	Virama}', "");
Error('\p{Canonical_Combining_Class= :=Attached Below}');
Error('\P{Canonical_Combining_Class= :=Attached Below}');
Expect(1, 802, '\p{Canonical_Combining_Class=attachedbelow}', "");
Expect(0, 802, '\p{^Canonical_Combining_Class=attachedbelow}', "");
Expect(0, 802, '\P{Canonical_Combining_Class=attachedbelow}', "");
Expect(1, 802, '\P{^Canonical_Combining_Class=attachedbelow}', "");
Expect(0, 800, '\p{Canonical_Combining_Class=attachedbelow}', "");
Expect(1, 800, '\p{^Canonical_Combining_Class=attachedbelow}', "");
Expect(1, 800, '\P{Canonical_Combining_Class=attachedbelow}', "");
Expect(0, 800, '\P{^Canonical_Combining_Class=attachedbelow}', "");
Expect(1, 802, '\p{Canonical_Combining_Class=--ATTACHEDbelow}', "");
Expect(0, 802, '\p{^Canonical_Combining_Class=--ATTACHEDbelow}', "");
Expect(0, 802, '\P{Canonical_Combining_Class=--ATTACHEDbelow}', "");
Expect(1, 802, '\P{^Canonical_Combining_Class=--ATTACHEDbelow}', "");
Expect(0, 800, '\p{Canonical_Combining_Class=--ATTACHEDbelow}', "");
Expect(1, 800, '\p{^Canonical_Combining_Class=--ATTACHEDbelow}', "");
Expect(1, 800, '\P{Canonical_Combining_Class=--ATTACHEDbelow}', "");
Expect(0, 800, '\P{^Canonical_Combining_Class=--ATTACHEDbelow}', "");
Error('\p{Ccc:	 :=atb}');
Error('\P{Ccc:	 :=atb}');
Expect(1, 802, '\p{Ccc=atb}', "");
Expect(0, 802, '\p{^Ccc=atb}', "");
Expect(0, 802, '\P{Ccc=atb}', "");
Expect(1, 802, '\P{^Ccc=atb}', "");
Expect(0, 800, '\p{Ccc=atb}', "");
Expect(1, 800, '\p{^Ccc=atb}', "");
Expect(1, 800, '\P{Ccc=atb}', "");
Expect(0, 800, '\P{^Ccc=atb}', "");
Expect(1, 802, '\p{Ccc=--ATB}', "");
Expect(0, 802, '\p{^Ccc=--ATB}', "");
Expect(0, 802, '\P{Ccc=--ATB}', "");
Expect(1, 802, '\P{^Ccc=--ATB}', "");
Expect(0, 800, '\p{Ccc=--ATB}', "");
Expect(1, 800, '\p{^Ccc=--ATB}', "");
Expect(1, 800, '\P{Ccc=--ATB}', "");
Expect(0, 800, '\P{^Ccc=--ATB}', "");
Error('\p{Is_Canonical_Combining_Class= /a/+00000202}');
Error('\P{Is_Canonical_Combining_Class= /a/+00000202}');
Expect(1, 802, '\p{Is_Canonical_Combining_Class:	00000000202}', "");
Expect(0, 802, '\p{^Is_Canonical_Combining_Class:	00000000202}', "");
Expect(0, 802, '\P{Is_Canonical_Combining_Class:	00000000202}', "");
Expect(1, 802, '\P{^Is_Canonical_Combining_Class:	00000000202}', "");
Expect(0, 800, '\p{Is_Canonical_Combining_Class:	00000000202}', "");
Expect(1, 800, '\p{^Is_Canonical_Combining_Class:	00000000202}', "");
Expect(1, 800, '\P{Is_Canonical_Combining_Class:	00000000202}', "");
Expect(0, 800, '\P{^Is_Canonical_Combining_Class:	00000000202}', "");
Error('\p{Is_Ccc=-	attached:=below}');
Error('\P{Is_Ccc=-	attached:=below}');
Expect(1, 802, '\p{Is_Ccc=attachedbelow}', "");
Expect(0, 802, '\p{^Is_Ccc=attachedbelow}', "");
Expect(0, 802, '\P{Is_Ccc=attachedbelow}', "");
Expect(1, 802, '\P{^Is_Ccc=attachedbelow}', "");
Expect(0, 800, '\p{Is_Ccc=attachedbelow}', "");
Expect(1, 800, '\p{^Is_Ccc=attachedbelow}', "");
Expect(1, 800, '\P{Is_Ccc=attachedbelow}', "");
Expect(0, 800, '\P{^Is_Ccc=attachedbelow}', "");
Expect(1, 802, '\p{Is_Ccc=	 Attached-Below}', "");
Expect(0, 802, '\p{^Is_Ccc=	 Attached-Below}', "");
Expect(0, 802, '\P{Is_Ccc=	 Attached-Below}', "");
Expect(1, 802, '\P{^Is_Ccc=	 Attached-Below}', "");
Expect(0, 800, '\p{Is_Ccc=	 Attached-Below}', "");
Expect(1, 800, '\p{^Is_Ccc=	 Attached-Below}', "");
Expect(1, 800, '\P{Is_Ccc=	 Attached-Below}', "");
Expect(0, 800, '\P{^Is_Ccc=	 Attached-Below}', "");
Error('\p{Canonical_Combining_Class=--00:=0014}');
Error('\P{Canonical_Combining_Class=--00:=0014}');
Expect(1, 1460, '\p{Canonical_Combining_Class=00000000014}', "");
Expect(0, 1460, '\p{^Canonical_Combining_Class=00000000014}', "");
Expect(0, 1460, '\P{Canonical_Combining_Class=00000000014}', "");
Expect(1, 1460, '\P{^Canonical_Combining_Class=00000000014}', "");
Expect(0, 1459, '\p{Canonical_Combining_Class=00000000014}', "");
Expect(1, 1459, '\p{^Canonical_Combining_Class=00000000014}', "");
Expect(1, 1459, '\P{Canonical_Combining_Class=00000000014}', "");
Expect(0, 1459, '\P{^Canonical_Combining_Class=00000000014}', "");
Error('\p{Ccc=/a/ +014}');
Error('\P{Ccc=/a/ +014}');
Expect(1, 1460, '\p{Ccc:	0_0_0_0_0_0014}', "");
Expect(0, 1460, '\p{^Ccc:	0_0_0_0_0_0014}', "");
Expect(0, 1460, '\P{Ccc:	0_0_0_0_0_0014}', "");
Expect(1, 1460, '\P{^Ccc:	0_0_0_0_0_0014}', "");
Expect(0, 1459, '\p{Ccc:	0_0_0_0_0_0014}', "");
Expect(1, 1459, '\p{^Ccc:	0_0_0_0_0_0014}', "");
Expect(1, 1459, '\P{Ccc:	0_0_0_0_0_0014}', "");
Expect(0, 1459, '\P{^Ccc:	0_0_0_0_0_0014}', "");
Error('\p{Is_Canonical_Combining_Class=:=_	+0014}');
Error('\P{Is_Canonical_Combining_Class=:=_	+0014}');
Expect(1, 1460, '\p{Is_Canonical_Combining_Class=00_00_01_4}', "");
Expect(0, 1460, '\p{^Is_Canonical_Combining_Class=00_00_01_4}', "");
Expect(0, 1460, '\P{Is_Canonical_Combining_Class=00_00_01_4}', "");
Expect(1, 1460, '\P{^Is_Canonical_Combining_Class=00_00_01_4}', "");
Expect(0, 1459, '\p{Is_Canonical_Combining_Class=00_00_01_4}', "");
Expect(1, 1459, '\p{^Is_Canonical_Combining_Class=00_00_01_4}', "");
Expect(1, 1459, '\P{Is_Canonical_Combining_Class=00_00_01_4}', "");
Expect(0, 1459, '\P{^Is_Canonical_Combining_Class=00_00_01_4}', "");
Error('\p{Is_Ccc=-/a/000000014}');
Error('\P{Is_Ccc=-/a/000000014}');
Expect(1, 1460, '\p{Is_Ccc=+000014}', "");
Expect(0, 1460, '\p{^Is_Ccc=+000014}', "");
Expect(0, 1460, '\P{Is_Ccc=+000014}', "");
Expect(1, 1460, '\P{^Is_Ccc=+000014}', "");
Expect(0, 1459, '\p{Is_Ccc=+000014}', "");
Expect(1, 1459, '\p{^Is_Ccc=+000014}', "");
Expect(1, 1459, '\P{Is_Ccc=+000014}', "");
Expect(0, 1459, '\P{^Is_Ccc=+000014}', "");
Error('\p{Canonical_Combining_Class:	_:=0024}');
Error('\P{Canonical_Combining_Class:	_:=0024}');
Expect(1, 1473, '\p{Canonical_Combining_Class=+00_00_24}', "");
Expect(0, 1473, '\p{^Canonical_Combining_Class=+00_00_24}', "");
Expect(0, 1473, '\P{Canonical_Combining_Class=+00_00_24}', "");
Expect(1, 1473, '\P{^Canonical_Combining_Class=+00_00_24}', "");
Expect(0, 1472, '\p{Canonical_Combining_Class=+00_00_24}', "");
Expect(1, 1472, '\p{^Canonical_Combining_Class=+00_00_24}', "");
Expect(1, 1472, '\P{Canonical_Combining_Class=+00_00_24}', "");
Expect(0, 1472, '\P{^Canonical_Combining_Class=+00_00_24}', "");
Error('\p{Ccc= 0 0/a/24}');
Error('\P{Ccc= 0 0/a/24}');
Expect(1, 1473, '\p{Ccc=000000024}', "");
Expect(0, 1473, '\p{^Ccc=000000024}', "");
Expect(0, 1473, '\P{Ccc=000000024}', "");
Expect(1, 1473, '\P{^Ccc=000000024}', "");
Expect(0, 1472, '\p{Ccc=000000024}', "");
Expect(1, 1472, '\p{^Ccc=000000024}', "");
Expect(1, 1472, '\P{Ccc=000000024}', "");
Expect(0, 1472, '\P{^Ccc=000000024}', "");
Error('\p{Is_Canonical_Combining_Class= -+00000002-4/a/}');
Error('\P{Is_Canonical_Combining_Class= -+00000002-4/a/}');
Expect(1, 1473, '\p{Is_Canonical_Combining_Class=0002_4}', "");
Expect(0, 1473, '\p{^Is_Canonical_Combining_Class=0002_4}', "");
Expect(0, 1473, '\P{Is_Canonical_Combining_Class=0002_4}', "");
Expect(1, 1473, '\P{^Is_Canonical_Combining_Class=0002_4}', "");
Expect(0, 1472, '\p{Is_Canonical_Combining_Class=0002_4}', "");
Expect(1, 1472, '\p{^Is_Canonical_Combining_Class=0002_4}', "");
Expect(1, 1472, '\P{Is_Canonical_Combining_Class=0002_4}', "");
Expect(0, 1472, '\P{^Is_Canonical_Combining_Class=0002_4}', "");
Error('\p{Is_Ccc=-:=+0000000024}');
Error('\P{Is_Ccc=-:=+0000000024}');
Expect(1, 1473, '\p{Is_Ccc=0000000024}', "");
Expect(0, 1473, '\p{^Is_Ccc=0000000024}', "");
Expect(0, 1473, '\P{Is_Ccc=0000000024}', "");
Expect(1, 1473, '\P{^Is_Ccc=0000000024}', "");
Expect(0, 1472, '\p{Is_Ccc=0000000024}', "");
Expect(1, 1472, '\p{^Is_Ccc=0000000024}', "");
Expect(1, 1472, '\P{Is_Ccc=0000000024}', "");
Expect(0, 1472, '\P{^Is_Ccc=0000000024}', "");
Error('\p{Canonical_Combining_Class=:=23}');
Error('\P{Canonical_Combining_Class=:=23}');
Expect(1, 1471, '\p{Canonical_Combining_Class=0000_0002_3}', "");
Expect(0, 1471, '\p{^Canonical_Combining_Class=0000_0002_3}', "");
Expect(0, 1471, '\P{Canonical_Combining_Class=0000_0002_3}', "");
Expect(1, 1471, '\P{^Canonical_Combining_Class=0000_0002_3}', "");
Expect(0, 1470, '\p{Canonical_Combining_Class=0000_0002_3}', "");
Expect(1, 1470, '\p{^Canonical_Combining_Class=0000_0002_3}', "");
Expect(1, 1470, '\P{Canonical_Combining_Class=0000_0002_3}', "");
Expect(0, 1470, '\P{^Canonical_Combining_Class=0000_0002_3}', "");
Error('\p{Ccc=_:=+002	3}');
Error('\P{Ccc=_:=+002	3}');
Expect(1, 1471, '\p{Ccc=0000000023}', "");
Expect(0, 1471, '\p{^Ccc=0000000023}', "");
Expect(0, 1471, '\P{Ccc=0000000023}', "");
Expect(1, 1471, '\P{^Ccc=0000000023}', "");
Expect(0, 1470, '\p{Ccc=0000000023}', "");
Expect(1, 1470, '\p{^Ccc=0000000023}', "");
Expect(1, 1470, '\P{Ccc=0000000023}', "");
Expect(0, 1470, '\P{^Ccc=0000000023}', "");
Error('\p{Is_Canonical_Combining_Class:	/a/_	023}');
Error('\P{Is_Canonical_Combining_Class:	/a/_	023}');
Expect(1, 1471, '\p{Is_Canonical_Combining_Class=02_3}', "");
Expect(0, 1471, '\p{^Is_Canonical_Combining_Class=02_3}', "");
Expect(0, 1471, '\P{Is_Canonical_Combining_Class=02_3}', "");
Expect(1, 1471, '\P{^Is_Canonical_Combining_Class=02_3}', "");
Expect(0, 1470, '\p{Is_Canonical_Combining_Class=02_3}', "");
Expect(1, 1470, '\p{^Is_Canonical_Combining_Class=02_3}', "");
Expect(1, 1470, '\P{Is_Canonical_Combining_Class=02_3}', "");
Expect(0, 1470, '\P{^Is_Canonical_Combining_Class=02_3}', "");
Error('\p{Is_Ccc=- +00023/a/}');
Error('\P{Is_Ccc=- +00023/a/}');
Expect(1, 1471, '\p{Is_Ccc=0000000002_3}', "");
Expect(0, 1471, '\p{^Is_Ccc=0000000002_3}', "");
Expect(0, 1471, '\P{Is_Ccc=0000000002_3}', "");
Expect(1, 1471, '\P{^Is_Ccc=0000000002_3}', "");
Expect(0, 1470, '\p{Is_Ccc=0000000002_3}', "");
Expect(1, 1470, '\p{^Is_Ccc=0000000002_3}', "");
Expect(1, 1470, '\P{Is_Ccc=0000000002_3}', "");
Expect(0, 1470, '\P{^Is_Ccc=0000000002_3}', "");
Error('\p{Canonical_Combining_Class=_:=Nukta}');
Error('\P{Canonical_Combining_Class=_:=Nukta}');
Expect(1, 2364, '\p{Canonical_Combining_Class=nukta}', "");
Expect(0, 2364, '\p{^Canonical_Combining_Class=nukta}', "");
Expect(0, 2364, '\P{Canonical_Combining_Class=nukta}', "");
Expect(1, 2364, '\P{^Canonical_Combining_Class=nukta}', "");
Expect(0, 2363, '\p{Canonical_Combining_Class=nukta}', "");
Expect(1, 2363, '\p{^Canonical_Combining_Class=nukta}', "");
Expect(1, 2363, '\P{Canonical_Combining_Class=nukta}', "");
Expect(0, 2363, '\P{^Canonical_Combining_Class=nukta}', "");
Expect(1, 2364, '\p{Canonical_Combining_Class=_ nukta}', "");
Expect(0, 2364, '\p{^Canonical_Combining_Class=_ nukta}', "");
Expect(0, 2364, '\P{Canonical_Combining_Class=_ nukta}', "");
Expect(1, 2364, '\P{^Canonical_Combining_Class=_ nukta}', "");
Expect(0, 2363, '\p{Canonical_Combining_Class=_ nukta}', "");
Expect(1, 2363, '\p{^Canonical_Combining_Class=_ nukta}', "");
Expect(1, 2363, '\P{Canonical_Combining_Class=_ nukta}', "");
Expect(0, 2363, '\P{^Canonical_Combining_Class=_ nukta}', "");
Error('\p{Ccc=:=	nk}');
Error('\P{Ccc=:=	nk}');
Expect(1, 2364, '\p{Ccc=nk}', "");
Expect(0, 2364, '\p{^Ccc=nk}', "");
Expect(0, 2364, '\P{Ccc=nk}', "");
Expect(1, 2364, '\P{^Ccc=nk}', "");
Expect(0, 2363, '\p{Ccc=nk}', "");
Expect(1, 2363, '\p{^Ccc=nk}', "");
Expect(1, 2363, '\P{Ccc=nk}', "");
Expect(0, 2363, '\P{^Ccc=nk}', "");
Expect(1, 2364, '\p{Ccc=-nk}', "");
Expect(0, 2364, '\p{^Ccc=-nk}', "");
Expect(0, 2364, '\P{Ccc=-nk}', "");
Expect(1, 2364, '\P{^Ccc=-nk}', "");
Expect(0, 2363, '\p{Ccc=-nk}', "");
Expect(1, 2363, '\p{^Ccc=-nk}', "");
Expect(1, 2363, '\P{Ccc=-nk}', "");
Expect(0, 2363, '\P{^Ccc=-nk}', "");
Error('\p{Is_Canonical_Combining_Class=	 +000007/a/}');
Error('\P{Is_Canonical_Combining_Class=	 +000007/a/}');
Expect(1, 2364, '\p{Is_Canonical_Combining_Class=00007}', "");
Expect(0, 2364, '\p{^Is_Canonical_Combining_Class=00007}', "");
Expect(0, 2364, '\P{Is_Canonical_Combining_Class=00007}', "");
Expect(1, 2364, '\P{^Is_Canonical_Combining_Class=00007}', "");
Expect(0, 2363, '\p{Is_Canonical_Combining_Class=00007}', "");
Expect(1, 2363, '\p{^Is_Canonical_Combining_Class=00007}', "");
Expect(1, 2363, '\P{Is_Canonical_Combining_Class=00007}', "");
Expect(0, 2363, '\P{^Is_Canonical_Combining_Class=00007}', "");
Error('\p{Is_Ccc=/a/ 	Nukta}');
Error('\P{Is_Ccc=/a/ 	Nukta}');
Expect(1, 2364, '\p{Is_Ccc=nukta}', "");
Expect(0, 2364, '\p{^Is_Ccc=nukta}', "");
Expect(0, 2364, '\P{Is_Ccc=nukta}', "");
Expect(1, 2364, '\P{^Is_Ccc=nukta}', "");
Expect(0, 2363, '\p{Is_Ccc=nukta}', "");
Expect(1, 2363, '\p{^Is_Ccc=nukta}', "");
Expect(1, 2363, '\P{Is_Ccc=nukta}', "");
Expect(0, 2363, '\P{^Is_Ccc=nukta}', "");
Expect(1, 2364, '\p{Is_Ccc=_-NUKTA}', "");
Expect(0, 2364, '\p{^Is_Ccc=_-NUKTA}', "");
Expect(0, 2364, '\P{Is_Ccc=_-NUKTA}', "");
Expect(1, 2364, '\P{^Is_Ccc=_-NUKTA}', "");
Expect(0, 2363, '\p{Is_Ccc=_-NUKTA}', "");
Expect(1, 2363, '\p{^Is_Ccc=_-NUKTA}', "");
Expect(1, 2363, '\P{Is_Ccc=_-NUKTA}', "");
Expect(0, 2363, '\P{^Is_Ccc=_-NUKTA}', "");
Error('\p{Canonical_Combining_Class=_33:=}');
Error('\P{Canonical_Combining_Class=_33:=}');
Expect(1, 1617, '\p{Canonical_Combining_Class=+00033}', "");
Expect(0, 1617, '\p{^Canonical_Combining_Class=+00033}', "");
Expect(0, 1617, '\P{Canonical_Combining_Class=+00033}', "");
Expect(1, 1617, '\P{^Canonical_Combining_Class=+00033}', "");
Expect(0, 1616, '\p{Canonical_Combining_Class=+00033}', "");
Expect(1, 1616, '\p{^Canonical_Combining_Class=+00033}', "");
Expect(1, 1616, '\P{Canonical_Combining_Class=+00033}', "");
Expect(0, 1616, '\P{^Canonical_Combining_Class=+00033}', "");
Error('\p{Ccc=	/a/+0_0	0	0_0	0033}');
Error('\P{Ccc=	/a/+0_0	0	0_0	0033}');
Expect(1, 1617, '\p{Ccc: 000003_3}', "");
Expect(0, 1617, '\p{^Ccc: 000003_3}', "");
Expect(0, 1617, '\P{Ccc: 000003_3}', "");
Expect(1, 1617, '\P{^Ccc: 000003_3}', "");
Expect(0, 1616, '\p{Ccc: 000003_3}', "");
Expect(1, 1616, '\p{^Ccc: 000003_3}', "");
Expect(1, 1616, '\P{Ccc: 000003_3}', "");
Expect(0, 1616, '\P{^Ccc: 000003_3}', "");
Error('\p{Is_Canonical_Combining_Class=:= 033}');
Error('\P{Is_Canonical_Combining_Class=:= 033}');
Expect(1, 1617, '\p{Is_Canonical_Combining_Class=0000003_3}', "");
Expect(0, 1617, '\p{^Is_Canonical_Combining_Class=0000003_3}', "");
Expect(0, 1617, '\P{Is_Canonical_Combining_Class=0000003_3}', "");
Expect(1, 1617, '\P{^Is_Canonical_Combining_Class=0000003_3}', "");
Expect(0, 1616, '\p{Is_Canonical_Combining_Class=0000003_3}', "");
Expect(1, 1616, '\p{^Is_Canonical_Combining_Class=0000003_3}', "");
Expect(1, 1616, '\P{Is_Canonical_Combining_Class=0000003_3}', "");
Expect(0, 1616, '\P{^Is_Canonical_Combining_Class=0000003_3}', "");
Error('\p{Is_Ccc=/a/-+0000000033}');
Error('\P{Is_Ccc=/a/-+0000000033}');
Expect(1, 1617, '\p{Is_Ccc=033}', "");
Expect(0, 1617, '\p{^Is_Ccc=033}', "");
Expect(0, 1617, '\P{Is_Ccc=033}', "");
Expect(1, 1617, '\P{^Is_Ccc=033}', "");
Expect(0, 1616, '\p{Is_Ccc=033}', "");
Expect(1, 1616, '\p{^Is_Ccc=033}', "");
Expect(1, 1616, '\P{Is_Ccc=033}', "");
Expect(0, 1616, '\P{^Is_Ccc=033}', "");
Error('\p{Canonical_Combining_Class=_:=0 0_00_00	0 0021}');
Error('\P{Canonical_Combining_Class=_:=0 0_00_00	0 0021}');
Expect(1, 1468, '\p{Canonical_Combining_Class=0_0_0_0_0_021}', "");
Expect(0, 1468, '\p{^Canonical_Combining_Class=0_0_0_0_0_021}', "");
Expect(0, 1468, '\P{Canonical_Combining_Class=0_0_0_0_0_021}', "");
Expect(1, 1468, '\P{^Canonical_Combining_Class=0_0_0_0_0_021}', "");
Expect(0, 1467, '\p{Canonical_Combining_Class=0_0_0_0_0_021}', "");
Expect(1, 1467, '\p{^Canonical_Combining_Class=0_0_0_0_0_021}', "");
Expect(1, 1467, '\P{Canonical_Combining_Class=0_0_0_0_0_021}', "");
Expect(0, 1467, '\P{^Canonical_Combining_Class=0_0_0_0_0_021}', "");
Error('\p{Ccc=:=21}');
Error('\P{Ccc=:=21}');
Expect(1, 1468, '\p{Ccc=21}', "");
Expect(0, 1468, '\p{^Ccc=21}', "");
Expect(0, 1468, '\P{Ccc=21}', "");
Expect(1, 1468, '\P{^Ccc=21}', "");
Expect(0, 1467, '\p{Ccc=21}', "");
Expect(1, 1467, '\p{^Ccc=21}', "");
Expect(1, 1467, '\P{Ccc=21}', "");
Expect(0, 1467, '\P{^Ccc=21}', "");
Error('\p{Is_Canonical_Combining_Class= :=00000021}');
Error('\P{Is_Canonical_Combining_Class= :=00000021}');
Expect(1, 1468, '\p{Is_Canonical_Combining_Class:+00021}', "");
Expect(0, 1468, '\p{^Is_Canonical_Combining_Class:+00021}', "");
Expect(0, 1468, '\P{Is_Canonical_Combining_Class:+00021}', "");
Expect(1, 1468, '\P{^Is_Canonical_Combining_Class:+00021}', "");
Expect(0, 1467, '\p{Is_Canonical_Combining_Class:+00021}', "");
Expect(1, 1467, '\p{^Is_Canonical_Combining_Class:+00021}', "");
Expect(1, 1467, '\P{Is_Canonical_Combining_Class:+00021}', "");
Expect(0, 1467, '\P{^Is_Canonical_Combining_Class:+00021}', "");
Error('\p{Is_Ccc=__021:=}');
Error('\P{Is_Ccc=__021:=}');
Expect(1, 1468, '\p{Is_Ccc=+00000021}', "");
Expect(0, 1468, '\p{^Is_Ccc=+00000021}', "");
Expect(0, 1468, '\P{Is_Ccc=+00000021}', "");
Expect(1, 1468, '\P{^Is_Ccc=+00000021}', "");
Expect(0, 1467, '\p{Is_Ccc=+00000021}', "");
Expect(1, 1467, '\p{^Is_Ccc=+00000021}', "");
Expect(1, 1467, '\P{Is_Ccc=+00000021}', "");
Expect(0, 1467, '\P{^Is_Ccc=+00000021}', "");
Error('\p{Canonical_Combining_Class=:=+0026}');
Error('\P{Canonical_Combining_Class=:=+0026}');
Expect(1, 64286, '\p{Canonical_Combining_Class:	00_00_26}', "");
Expect(0, 64286, '\p{^Canonical_Combining_Class:	00_00_26}', "");
Expect(0, 64286, '\P{Canonical_Combining_Class:	00_00_26}', "");
Expect(1, 64286, '\P{^Canonical_Combining_Class:	00_00_26}', "");
Expect(0, 64285, '\p{Canonical_Combining_Class:	00_00_26}', "");
Expect(1, 64285, '\p{^Canonical_Combining_Class:	00_00_26}', "");
Expect(1, 64285, '\P{Canonical_Combining_Class:	00_00_26}', "");
Expect(0, 64285, '\P{^Canonical_Combining_Class:	00_00_26}', "");
Error('\p{Ccc=_ +0000026:=}');
Error('\P{Ccc=_ +0000026:=}');
Expect(1, 64286, '\p{Ccc=0026}', "");
Expect(0, 64286, '\p{^Ccc=0026}', "");
Expect(0, 64286, '\P{Ccc=0026}', "");
Expect(1, 64286, '\P{^Ccc=0026}', "");
Expect(0, 64285, '\p{Ccc=0026}', "");
Expect(1, 64285, '\p{^Ccc=0026}', "");
Expect(1, 64285, '\P{Ccc=0026}', "");
Expect(0, 64285, '\P{^Ccc=0026}', "");
Error('\p{Is_Canonical_Combining_Class=/a/- +00000002_6}');
Error('\P{Is_Canonical_Combining_Class=/a/- +00000002_6}');
Expect(1, 64286, '\p{Is_Canonical_Combining_Class=026}', "");
Expect(0, 64286, '\p{^Is_Canonical_Combining_Class=026}', "");
Expect(0, 64286, '\P{Is_Canonical_Combining_Class=026}', "");
Expect(1, 64286, '\P{^Is_Canonical_Combining_Class=026}', "");
Expect(0, 64285, '\p{Is_Canonical_Combining_Class=026}', "");
Expect(1, 64285, '\p{^Is_Canonical_Combining_Class=026}', "");
Expect(1, 64285, '\P{Is_Canonical_Combining_Class=026}', "");
Expect(0, 64285, '\P{^Is_Canonical_Combining_Class=026}', "");
Error('\p{Is_Ccc=	/a/0_0	0-00026}');
Error('\P{Is_Ccc=	/a/0_0	0-00026}');
Expect(1, 64286, '\p{Is_Ccc=000000026}', "");
Expect(0, 64286, '\p{^Is_Ccc=000000026}', "");
Expect(0, 64286, '\P{Is_Ccc=000000026}', "");
Expect(1, 64286, '\P{^Is_Ccc=000000026}', "");
Expect(0, 64285, '\p{Is_Ccc=000000026}', "");
Expect(1, 64285, '\p{^Is_Ccc=000000026}', "");
Expect(1, 64285, '\P{Is_Ccc=000000026}', "");
Expect(0, 64285, '\P{^Is_Ccc=000000026}', "");
Error('\p{Canonical_Combining_Class: __00000000103/a/}');
Error('\P{Canonical_Combining_Class: __00000000103/a/}');
Expect(1, 3641, '\p{Canonical_Combining_Class=000000000103}', "");
Expect(0, 3641, '\p{^Canonical_Combining_Class=000000000103}', "");
Expect(0, 3641, '\P{Canonical_Combining_Class=000000000103}', "");
Expect(1, 3641, '\P{^Canonical_Combining_Class=000000000103}', "");
Expect(0, 3639, '\p{Canonical_Combining_Class=000000000103}', "");
Expect(1, 3639, '\p{^Canonical_Combining_Class=000000000103}', "");
Expect(1, 3639, '\P{Canonical_Combining_Class=000000000103}', "");
Expect(0, 3639, '\P{^Canonical_Combining_Class=000000000103}', "");
Error('\p{Ccc=-_0000000103/a/}');
Error('\P{Ccc=-_0000000103/a/}');
Expect(1, 3641, '\p{Ccc=00000000103}', "");
Expect(0, 3641, '\p{^Ccc=00000000103}', "");
Expect(0, 3641, '\P{Ccc=00000000103}', "");
Expect(1, 3641, '\P{^Ccc=00000000103}', "");
Expect(0, 3639, '\p{Ccc=00000000103}', "");
Expect(1, 3639, '\p{^Ccc=00000000103}', "");
Expect(1, 3639, '\P{Ccc=00000000103}', "");
Expect(0, 3639, '\P{^Ccc=00000000103}', "");
Error('\p{Is_Canonical_Combining_Class=_/a/0000103}');
Error('\P{Is_Canonical_Combining_Class=_/a/0000103}');
Expect(1, 3641, '\p{Is_Canonical_Combining_Class=+00000103}', "");
Expect(0, 3641, '\p{^Is_Canonical_Combining_Class=+00000103}', "");
Expect(0, 3641, '\P{Is_Canonical_Combining_Class=+00000103}', "");
Expect(1, 3641, '\P{^Is_Canonical_Combining_Class=+00000103}', "");
Expect(0, 3639, '\p{Is_Canonical_Combining_Class=+00000103}', "");
Expect(1, 3639, '\p{^Is_Canonical_Combining_Class=+00000103}', "");
Expect(1, 3639, '\P{Is_Canonical_Combining_Class=+00000103}', "");
Expect(0, 3639, '\P{^Is_Canonical_Combining_Class=+00000103}', "");
Error('\p{Is_Ccc=_/a/00 0000-00	0103}');
Error('\P{Is_Ccc=_/a/00 0000-00	0103}');
Expect(1, 3641, '\p{Is_Ccc=00_10_3}', "");
Expect(0, 3641, '\p{^Is_Ccc=00_10_3}', "");
Expect(0, 3641, '\P{Is_Ccc=00_10_3}', "");
Expect(1, 3641, '\P{^Is_Ccc=00_10_3}', "");
Expect(0, 3639, '\p{Is_Ccc=00_10_3}', "");
Expect(1, 3639, '\p{^Is_Ccc=00_10_3}', "");
Expect(1, 3639, '\P{Is_Ccc=00_10_3}', "");
Expect(0, 3639, '\P{^Is_Ccc=00_10_3}', "");
Error('\p{Canonical_Combining_Class=-:=000000010}');
Error('\P{Canonical_Combining_Class=-:=000000010}');
Expect(1, 1456, '\p{Canonical_Combining_Class:   1_0}', "");
Expect(0, 1456, '\p{^Canonical_Combining_Class:   1_0}', "");
Expect(0, 1456, '\P{Canonical_Combining_Class:   1_0}', "");
Expect(1, 1456, '\P{^Canonical_Combining_Class:   1_0}', "");
Expect(0, 1455, '\p{Canonical_Combining_Class:   1_0}', "");
Expect(1, 1455, '\p{^Canonical_Combining_Class:   1_0}', "");
Expect(1, 1455, '\P{Canonical_Combining_Class:   1_0}', "");
Expect(0, 1455, '\P{^Canonical_Combining_Class:   1_0}', "");
Error('\p{Ccc:	0000000001:=0}');
Error('\P{Ccc:	0000000001:=0}');
Expect(1, 1456, '\p{Ccc=+00000010}', "");
Expect(0, 1456, '\p{^Ccc=+00000010}', "");
Expect(0, 1456, '\P{Ccc=+00000010}', "");
Expect(1, 1456, '\P{^Ccc=+00000010}', "");
Expect(0, 1455, '\p{Ccc=+00000010}', "");
Expect(1, 1455, '\p{^Ccc=+00000010}', "");
Expect(1, 1455, '\P{Ccc=+00000010}', "");
Expect(0, 1455, '\P{^Ccc=+00000010}', "");
Error('\p{Is_Canonical_Combining_Class=-/a/00000000010}');
Error('\P{Is_Canonical_Combining_Class=-/a/00000000010}');
Expect(1, 1456, '\p{Is_Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(0, 1456, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(0, 1456, '\P{Is_Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(1, 1456, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(0, 1455, '\p{Is_Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(1, 1455, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(1, 1455, '\P{Is_Canonical_Combining_Class=0_0_0_0_0010}', "");
Expect(0, 1455, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0010}', "");
Error('\p{Is_Ccc=- +00 00 00_01/a/0}');
Error('\P{Is_Ccc=- +00 00 00_01/a/0}');
Expect(1, 1456, '\p{Is_Ccc=+0_0_0_0_0_0_0010}', "");
Expect(0, 1456, '\p{^Is_Ccc=+0_0_0_0_0_0_0010}', "");
Expect(0, 1456, '\P{Is_Ccc=+0_0_0_0_0_0_0010}', "");
Expect(1, 1456, '\P{^Is_Ccc=+0_0_0_0_0_0_0010}', "");
Expect(0, 1455, '\p{Is_Ccc=+0_0_0_0_0_0_0010}', "");
Expect(1, 1455, '\p{^Is_Ccc=+0_0_0_0_0_0_0010}', "");
Expect(1, 1455, '\P{Is_Ccc=+0_0_0_0_0_0_0010}', "");
Expect(0, 1455, '\P{^Is_Ccc=+0_0_0_0_0_0_0010}', "");
Error('\p{Canonical_Combining_Class=/a/_-00000091}');
Error('\P{Canonical_Combining_Class=/a/_-00000091}');
Expect(1, 3158, '\p{Canonical_Combining_Class=000000091}', "");
Expect(0, 3158, '\p{^Canonical_Combining_Class=000000091}', "");
Expect(0, 3158, '\P{Canonical_Combining_Class=000000091}', "");
Expect(1, 3158, '\P{^Canonical_Combining_Class=000000091}', "");
Expect(0, 3157, '\p{Canonical_Combining_Class=000000091}', "");
Expect(1, 3157, '\p{^Canonical_Combining_Class=000000091}', "");
Expect(1, 3157, '\P{Canonical_Combining_Class=000000091}', "");
Expect(0, 3157, '\P{^Canonical_Combining_Class=000000091}', "");
Error('\p{Ccc=_:=0-00_0-0-0 0091}');
Error('\P{Ccc=_:=0-00_0-0-0 0091}');
Expect(1, 3158, '\p{Ccc=+91}', "");
Expect(0, 3158, '\p{^Ccc=+91}', "");
Expect(0, 3158, '\P{Ccc=+91}', "");
Expect(1, 3158, '\P{^Ccc=+91}', "");
Expect(0, 3157, '\p{Ccc=+91}', "");
Expect(1, 3157, '\p{^Ccc=+91}', "");
Expect(1, 3157, '\P{Ccc=+91}', "");
Expect(0, 3157, '\P{^Ccc=+91}', "");
Error('\p{Is_Canonical_Combining_Class=:=-0000091}');
Error('\P{Is_Canonical_Combining_Class=:=-0000091}');
Expect(1, 3158, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_091}', "");
Expect(0, 3158, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_091}', "");
Expect(0, 3158, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_091}', "");
Expect(1, 3158, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_091}', "");
Expect(0, 3157, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_091}', "");
Expect(1, 3157, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_091}', "");
Expect(1, 3157, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_091}', "");
Expect(0, 3157, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_0_091}', "");
Error('\p{Is_Ccc=-/a/009	1}');
Error('\P{Is_Ccc=-/a/009	1}');
Expect(1, 3158, '\p{Is_Ccc=000_000_000_91}', "");
Expect(0, 3158, '\p{^Is_Ccc=000_000_000_91}', "");
Expect(0, 3158, '\P{Is_Ccc=000_000_000_91}', "");
Expect(1, 3158, '\P{^Is_Ccc=000_000_000_91}', "");
Expect(0, 3157, '\p{Is_Ccc=000_000_000_91}', "");
Expect(1, 3157, '\p{^Is_Ccc=000_000_000_91}', "");
Expect(1, 3157, '\P{Is_Ccc=000_000_000_91}', "");
Expect(0, 3157, '\P{^Is_Ccc=000_000_000_91}', "");
Error('\p{Canonical_Combining_Class:_/a/000107}');
Error('\P{Canonical_Combining_Class:_/a/000107}');
Expect(1, 3659, '\p{Canonical_Combining_Class=+000000000107}', "");
Expect(0, 3659, '\p{^Canonical_Combining_Class=+000000000107}', "");
Expect(0, 3659, '\P{Canonical_Combining_Class=+000000000107}', "");
Expect(1, 3659, '\P{^Canonical_Combining_Class=+000000000107}', "");
Expect(0, 3655, '\p{Canonical_Combining_Class=+000000000107}', "");
Expect(1, 3655, '\p{^Canonical_Combining_Class=+000000000107}', "");
Expect(1, 3655, '\P{Canonical_Combining_Class=+000000000107}', "");
Expect(0, 3655, '\P{^Canonical_Combining_Class=+000000000107}', "");
Error('\p{Ccc=-000107:=}');
Error('\P{Ccc=-000107:=}');
Expect(1, 3659, '\p{Ccc=+010_7}', "");
Expect(0, 3659, '\p{^Ccc=+010_7}', "");
Expect(0, 3659, '\P{Ccc=+010_7}', "");
Expect(1, 3659, '\P{^Ccc=+010_7}', "");
Expect(0, 3655, '\p{Ccc=+010_7}', "");
Expect(1, 3655, '\p{^Ccc=+010_7}', "");
Expect(1, 3655, '\P{Ccc=+010_7}', "");
Expect(0, 3655, '\P{^Ccc=+010_7}', "");
Error('\p{Is_Canonical_Combining_Class=:=-00107}');
Error('\P{Is_Canonical_Combining_Class=:=-00107}');
Expect(1, 3659, '\p{Is_Canonical_Combining_Class:   000107}', "");
Expect(0, 3659, '\p{^Is_Canonical_Combining_Class:   000107}', "");
Expect(0, 3659, '\P{Is_Canonical_Combining_Class:   000107}', "");
Expect(1, 3659, '\P{^Is_Canonical_Combining_Class:   000107}', "");
Expect(0, 3655, '\p{Is_Canonical_Combining_Class:   000107}', "");
Expect(1, 3655, '\p{^Is_Canonical_Combining_Class:   000107}', "");
Expect(1, 3655, '\P{Is_Canonical_Combining_Class:   000107}', "");
Expect(0, 3655, '\P{^Is_Canonical_Combining_Class:   000107}', "");
Error('\p{Is_Ccc=_/a/+0000	00 10 7}');
Error('\P{Is_Ccc=_/a/+0000	00 10 7}');
Expect(1, 3659, '\p{Is_Ccc: +0_0_1_07}', "");
Expect(0, 3659, '\p{^Is_Ccc: +0_0_1_07}', "");
Expect(0, 3659, '\P{Is_Ccc: +0_0_1_07}', "");
Expect(1, 3659, '\P{^Is_Ccc: +0_0_1_07}', "");
Expect(0, 3655, '\p{Is_Ccc: +0_0_1_07}', "");
Expect(1, 3655, '\p{^Is_Ccc: +0_0_1_07}', "");
Expect(1, 3655, '\P{Is_Ccc: +0_0_1_07}', "");
Expect(0, 3655, '\P{^Is_Ccc: +0_0_1_07}', "");
Error('\p{Canonical_Combining_Class=	:=AttachedAbove}');
Error('\P{Canonical_Combining_Class=	:=AttachedAbove}');
Expect(1, 7630, '\p{Canonical_Combining_Class:attachedabove}', "");
Expect(0, 7630, '\p{^Canonical_Combining_Class:attachedabove}', "");
Expect(0, 7630, '\P{Canonical_Combining_Class:attachedabove}', "");
Expect(1, 7630, '\P{^Canonical_Combining_Class:attachedabove}', "");
Expect(0, 7629, '\p{Canonical_Combining_Class:attachedabove}', "");
Expect(1, 7629, '\p{^Canonical_Combining_Class:attachedabove}', "");
Expect(1, 7629, '\P{Canonical_Combining_Class:attachedabove}', "");
Expect(0, 7629, '\P{^Canonical_Combining_Class:attachedabove}', "");
Expect(1, 7630, '\p{Canonical_Combining_Class=_ATTACHED	above}', "");
Expect(0, 7630, '\p{^Canonical_Combining_Class=_ATTACHED	above}', "");
Expect(0, 7630, '\P{Canonical_Combining_Class=_ATTACHED	above}', "");
Expect(1, 7630, '\P{^Canonical_Combining_Class=_ATTACHED	above}', "");
Expect(0, 7629, '\p{Canonical_Combining_Class=_ATTACHED	above}', "");
Expect(1, 7629, '\p{^Canonical_Combining_Class=_ATTACHED	above}', "");
Expect(1, 7629, '\P{Canonical_Combining_Class=_ATTACHED	above}', "");
Expect(0, 7629, '\P{^Canonical_Combining_Class=_ATTACHED	above}', "");
Error('\p{Ccc=-/a/ATA}');
Error('\P{Ccc=-/a/ATA}');
Expect(1, 7630, '\p{Ccc=ata}', "");
Expect(0, 7630, '\p{^Ccc=ata}', "");
Expect(0, 7630, '\P{Ccc=ata}', "");
Expect(1, 7630, '\P{^Ccc=ata}', "");
Expect(0, 7629, '\p{Ccc=ata}', "");
Expect(1, 7629, '\p{^Ccc=ata}', "");
Expect(1, 7629, '\P{Ccc=ata}', "");
Expect(0, 7629, '\P{^Ccc=ata}', "");
Expect(1, 7630, '\p{Ccc= -ata}', "");
Expect(0, 7630, '\p{^Ccc= -ata}', "");
Expect(0, 7630, '\P{Ccc= -ata}', "");
Expect(1, 7630, '\P{^Ccc= -ata}', "");
Expect(0, 7629, '\p{Ccc= -ata}', "");
Expect(1, 7629, '\p{^Ccc= -ata}', "");
Expect(1, 7629, '\P{Ccc= -ata}', "");
Expect(0, 7629, '\P{^Ccc= -ata}', "");
Error('\p{Is_Canonical_Combining_Class=	_+0:=0-0_214}');
Error('\P{Is_Canonical_Combining_Class=	_+0:=0-0_214}');
Expect(1, 7630, '\p{Is_Canonical_Combining_Class=+000214}', "");
Expect(0, 7630, '\p{^Is_Canonical_Combining_Class=+000214}', "");
Expect(0, 7630, '\P{Is_Canonical_Combining_Class=+000214}', "");
Expect(1, 7630, '\P{^Is_Canonical_Combining_Class=+000214}', "");
Expect(0, 7629, '\p{Is_Canonical_Combining_Class=+000214}', "");
Expect(1, 7629, '\p{^Is_Canonical_Combining_Class=+000214}', "");
Expect(1, 7629, '\P{Is_Canonical_Combining_Class=+000214}', "");
Expect(0, 7629, '\P{^Is_Canonical_Combining_Class=+000214}', "");
Error('\p{Is_Ccc=	:=AttachedABOVE}');
Error('\P{Is_Ccc=	:=AttachedABOVE}');
Expect(1, 7630, '\p{Is_Ccc=attachedabove}', "");
Expect(0, 7630, '\p{^Is_Ccc=attachedabove}', "");
Expect(0, 7630, '\P{Is_Ccc=attachedabove}', "");
Expect(1, 7630, '\P{^Is_Ccc=attachedabove}', "");
Expect(0, 7629, '\p{Is_Ccc=attachedabove}', "");
Expect(1, 7629, '\p{^Is_Ccc=attachedabove}', "");
Expect(1, 7629, '\P{Is_Ccc=attachedabove}', "");
Expect(0, 7629, '\P{^Is_Ccc=attachedabove}', "");
Expect(1, 7630, '\p{Is_Ccc=- AttachedAbove}', "");
Expect(0, 7630, '\p{^Is_Ccc=- AttachedAbove}', "");
Expect(0, 7630, '\P{Is_Ccc=- AttachedAbove}', "");
Expect(1, 7630, '\P{^Is_Ccc=- AttachedAbove}', "");
Expect(0, 7629, '\p{Is_Ccc=- AttachedAbove}', "");
Expect(1, 7629, '\p{^Is_Ccc=- AttachedAbove}', "");
Expect(1, 7629, '\P{Is_Ccc=- AttachedAbove}', "");
Expect(0, 7629, '\P{^Is_Ccc=- AttachedAbove}', "");
Error('\p{Canonical_Combining_Class=-	0 0 0/a/0	0_0012}');
Error('\P{Canonical_Combining_Class=-	0 0 0/a/0	0_0012}');
Expect(1, 1458, '\p{Canonical_Combining_Class=0_0_0_0_0_12}', "");
Expect(0, 1458, '\p{^Canonical_Combining_Class=0_0_0_0_0_12}', "");
Expect(0, 1458, '\P{Canonical_Combining_Class=0_0_0_0_0_12}', "");
Expect(1, 1458, '\P{^Canonical_Combining_Class=0_0_0_0_0_12}', "");
Expect(0, 1457, '\p{Canonical_Combining_Class=0_0_0_0_0_12}', "");
Expect(1, 1457, '\p{^Canonical_Combining_Class=0_0_0_0_0_12}', "");
Expect(1, 1457, '\P{Canonical_Combining_Class=0_0_0_0_0_12}', "");
Expect(0, 1457, '\P{^Canonical_Combining_Class=0_0_0_0_0_12}', "");
Error('\p{Ccc=/a/_+00000000012}');
Error('\P{Ccc=/a/_+00000000012}');
Expect(1, 1458, '\p{Ccc=0000012}', "");
Expect(0, 1458, '\p{^Ccc=0000012}', "");
Expect(0, 1458, '\P{Ccc=0000012}', "");
Expect(1, 1458, '\P{^Ccc=0000012}', "");
Expect(0, 1457, '\p{Ccc=0000012}', "");
Expect(1, 1457, '\p{^Ccc=0000012}', "");
Expect(1, 1457, '\P{Ccc=0000012}', "");
Expect(0, 1457, '\P{^Ccc=0000012}', "");
Error('\p{Is_Canonical_Combining_Class: 	:=012}');
Error('\P{Is_Canonical_Combining_Class: 	:=012}');
Expect(1, 1458, '\p{Is_Canonical_Combining_Class=1_2}', "");
Expect(0, 1458, '\p{^Is_Canonical_Combining_Class=1_2}', "");
Expect(0, 1458, '\P{Is_Canonical_Combining_Class=1_2}', "");
Expect(1, 1458, '\P{^Is_Canonical_Combining_Class=1_2}', "");
Expect(0, 1457, '\p{Is_Canonical_Combining_Class=1_2}', "");
Expect(1, 1457, '\p{^Is_Canonical_Combining_Class=1_2}', "");
Expect(1, 1457, '\P{Is_Canonical_Combining_Class=1_2}', "");
Expect(0, 1457, '\P{^Is_Canonical_Combining_Class=1_2}', "");
Error('\p{Is_Ccc=/a/_000 000001_2}');
Error('\P{Is_Ccc=/a/_000 000001_2}');
Expect(1, 1458, '\p{Is_Ccc=+000001_2}', "");
Expect(0, 1458, '\p{^Is_Ccc=+000001_2}', "");
Expect(0, 1458, '\P{Is_Ccc=+000001_2}', "");
Expect(1, 1458, '\P{^Is_Ccc=+000001_2}', "");
Expect(0, 1457, '\p{Is_Ccc=+000001_2}', "");
Expect(1, 1457, '\p{^Is_Ccc=+000001_2}', "");
Expect(1, 1457, '\P{Is_Ccc=+000001_2}', "");
Expect(0, 1457, '\P{^Is_Ccc=+000001_2}', "");
Error('\p{Canonical_Combining_Class:   		019/a/}');
Error('\P{Canonical_Combining_Class:   		019/a/}');
Expect(1, 1466, '\p{Canonical_Combining_Class=0000019}', "");
Expect(0, 1466, '\p{^Canonical_Combining_Class=0000019}', "");
Expect(0, 1466, '\P{Canonical_Combining_Class=0000019}', "");
Expect(1, 1466, '\P{^Canonical_Combining_Class=0000019}', "");
Expect(0, 1464, '\p{Canonical_Combining_Class=0000019}', "");
Expect(1, 1464, '\p{^Canonical_Combining_Class=0000019}', "");
Expect(1, 1464, '\P{Canonical_Combining_Class=0000019}', "");
Expect(0, 1464, '\P{^Canonical_Combining_Class=0000019}', "");
Error('\p{Ccc=/a/--19}');
Error('\P{Ccc=/a/--19}');
Expect(1, 1466, '\p{Ccc=+0000019}', "");
Expect(0, 1466, '\p{^Ccc=+0000019}', "");
Expect(0, 1466, '\P{Ccc=+0000019}', "");
Expect(1, 1466, '\P{^Ccc=+0000019}', "");
Expect(0, 1464, '\p{Ccc=+0000019}', "");
Expect(1, 1464, '\p{^Ccc=+0000019}', "");
Expect(1, 1464, '\P{Ccc=+0000019}', "");
Expect(0, 1464, '\P{^Ccc=+0000019}', "");
Error('\p{Is_Canonical_Combining_Class=_:=+000000019}');
Error('\P{Is_Canonical_Combining_Class=_:=+000000019}');
Expect(1, 1466, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0019}', "");
Expect(0, 1466, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0019}', "");
Expect(0, 1466, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0019}', "");
Expect(1, 1466, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0019}', "");
Expect(0, 1464, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0019}', "");
Expect(1, 1464, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0019}', "");
Expect(1, 1464, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0019}', "");
Expect(0, 1464, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0019}', "");
Error('\p{Is_Ccc:		-0000 0001:=9}');
Error('\P{Is_Ccc:		-0000 0001:=9}');
Expect(1, 1466, '\p{Is_Ccc: +0_0_0_0_0_0019}', "");
Expect(0, 1466, '\p{^Is_Ccc: +0_0_0_0_0_0019}', "");
Expect(0, 1466, '\P{Is_Ccc: +0_0_0_0_0_0019}', "");
Expect(1, 1466, '\P{^Is_Ccc: +0_0_0_0_0_0019}', "");
Expect(0, 1464, '\p{Is_Ccc: +0_0_0_0_0_0019}', "");
Expect(1, 1464, '\p{^Is_Ccc: +0_0_0_0_0_0019}', "");
Expect(1, 1464, '\P{Is_Ccc: +0_0_0_0_0_0019}', "");
Expect(0, 1464, '\P{^Is_Ccc: +0_0_0_0_0_0019}', "");
Error('\p{Canonical_Combining_Class=	0000030/a/}');
Error('\P{Canonical_Combining_Class=	0000030/a/}');
Expect(1, 1560, '\p{Canonical_Combining_Class=0_0_30}', "");
Expect(0, 1560, '\p{^Canonical_Combining_Class=0_0_30}', "");
Expect(0, 1560, '\P{Canonical_Combining_Class=0_0_30}', "");
Expect(1, 1560, '\P{^Canonical_Combining_Class=0_0_30}', "");
Expect(0, 1559, '\p{Canonical_Combining_Class=0_0_30}', "");
Expect(1, 1559, '\p{^Canonical_Combining_Class=0_0_30}', "");
Expect(1, 1559, '\P{Canonical_Combining_Class=0_0_30}', "");
Expect(0, 1559, '\P{^Canonical_Combining_Class=0_0_30}', "");
Error('\p{Ccc=__+0000030/a/}');
Error('\P{Ccc=__+0000030/a/}');
Expect(1, 1560, '\p{Ccc:0030}', "");
Expect(0, 1560, '\p{^Ccc:0030}', "");
Expect(0, 1560, '\P{Ccc:0030}', "");
Expect(1, 1560, '\P{^Ccc:0030}', "");
Expect(0, 1559, '\p{Ccc:0030}', "");
Expect(1, 1559, '\p{^Ccc:0030}', "");
Expect(1, 1559, '\P{Ccc:0030}', "");
Expect(0, 1559, '\P{^Ccc:0030}', "");
Error('\p{Is_Canonical_Combining_Class=-:=0-0	0-0-0_30}');
Error('\P{Is_Canonical_Combining_Class=-:=0-0	0-0-0_30}');
Expect(1, 1560, '\p{Is_Canonical_Combining_Class=+03_0}', "");
Expect(0, 1560, '\p{^Is_Canonical_Combining_Class=+03_0}', "");
Expect(0, 1560, '\P{Is_Canonical_Combining_Class=+03_0}', "");
Expect(1, 1560, '\P{^Is_Canonical_Combining_Class=+03_0}', "");
Expect(0, 1559, '\p{Is_Canonical_Combining_Class=+03_0}', "");
Expect(1, 1559, '\p{^Is_Canonical_Combining_Class=+03_0}', "");
Expect(1, 1559, '\P{Is_Canonical_Combining_Class=+03_0}', "");
Expect(0, 1559, '\P{^Is_Canonical_Combining_Class=+03_0}', "");
Error('\p{Is_Ccc= /a/0000000030}');
Error('\P{Is_Ccc= /a/0000000030}');
Expect(1, 1560, '\p{Is_Ccc:30}', "");
Expect(0, 1560, '\p{^Is_Ccc:30}', "");
Expect(0, 1560, '\P{Is_Ccc:30}', "");
Expect(1, 1560, '\P{^Is_Ccc:30}', "");
Expect(0, 1559, '\p{Is_Ccc:30}', "");
Expect(1, 1559, '\p{^Is_Ccc:30}', "");
Expect(1, 1559, '\P{Is_Ccc:30}', "");
Expect(0, 1559, '\P{^Is_Ccc:30}', "");
Error('\p{Canonical_Combining_Class=/a/25}');
Error('\P{Canonical_Combining_Class=/a/25}');
Expect(1, 1474, '\p{Canonical_Combining_Class=2_5}', "");
Expect(0, 1474, '\p{^Canonical_Combining_Class=2_5}', "");
Expect(0, 1474, '\P{Canonical_Combining_Class=2_5}', "");
Expect(1, 1474, '\P{^Canonical_Combining_Class=2_5}', "");
Expect(0, 1473, '\p{Canonical_Combining_Class=2_5}', "");
Expect(1, 1473, '\p{^Canonical_Combining_Class=2_5}', "");
Expect(1, 1473, '\P{Canonical_Combining_Class=2_5}', "");
Expect(0, 1473, '\P{^Canonical_Combining_Class=2_5}', "");
Error('\p{Ccc=_:=2_5}');
Error('\P{Ccc=_:=2_5}');
Expect(1, 1474, '\p{Ccc=0000000025}', "");
Expect(0, 1474, '\p{^Ccc=0000000025}', "");
Expect(0, 1474, '\P{Ccc=0000000025}', "");
Expect(1, 1474, '\P{^Ccc=0000000025}', "");
Expect(0, 1473, '\p{Ccc=0000000025}', "");
Expect(1, 1473, '\p{^Ccc=0000000025}', "");
Expect(1, 1473, '\P{Ccc=0000000025}', "");
Expect(0, 1473, '\P{^Ccc=0000000025}', "");
Error('\p{Is_Canonical_Combining_Class=-_00	00 25:=}');
Error('\P{Is_Canonical_Combining_Class=-_00	00 25:=}');
Expect(1, 1474, '\p{Is_Canonical_Combining_Class=00000025}', "");
Expect(0, 1474, '\p{^Is_Canonical_Combining_Class=00000025}', "");
Expect(0, 1474, '\P{Is_Canonical_Combining_Class=00000025}', "");
Expect(1, 1474, '\P{^Is_Canonical_Combining_Class=00000025}', "");
Expect(0, 1473, '\p{Is_Canonical_Combining_Class=00000025}', "");
Expect(1, 1473, '\p{^Is_Canonical_Combining_Class=00000025}', "");
Expect(1, 1473, '\P{Is_Canonical_Combining_Class=00000025}', "");
Expect(0, 1473, '\P{^Is_Canonical_Combining_Class=00000025}', "");
Error('\p{Is_Ccc= _00000:=00002-5}');
Error('\P{Is_Ccc= _00000:=00002-5}');
Expect(1, 1474, '\p{Is_Ccc:02_5}', "");
Expect(0, 1474, '\p{^Is_Ccc:02_5}', "");
Expect(0, 1474, '\P{Is_Ccc:02_5}', "");
Expect(1, 1474, '\P{^Is_Ccc:02_5}', "");
Expect(0, 1473, '\p{Is_Ccc:02_5}', "");
Expect(1, 1473, '\p{^Is_Ccc:02_5}', "");
Expect(1, 1473, '\P{Is_Ccc:02_5}', "");
Expect(0, 1473, '\P{^Is_Ccc:02_5}', "");
Error('\p{Canonical_Combining_Class= 028/a/}');
Error('\P{Canonical_Combining_Class= 028/a/}');
Expect(1, 1612, '\p{Canonical_Combining_Class=00_02_8}', "");
Expect(0, 1612, '\p{^Canonical_Combining_Class=00_02_8}', "");
Expect(0, 1612, '\P{Canonical_Combining_Class=00_02_8}', "");
Expect(1, 1612, '\P{^Canonical_Combining_Class=00_02_8}', "");
Expect(0, 1611, '\p{Canonical_Combining_Class=00_02_8}', "");
Expect(1, 1611, '\p{^Canonical_Combining_Class=00_02_8}', "");
Expect(1, 1611, '\P{Canonical_Combining_Class=00_02_8}', "");
Expect(0, 1611, '\P{^Canonical_Combining_Class=00_02_8}', "");
Error('\p{Ccc=_:=0000002	8}');
Error('\P{Ccc=_:=0000002	8}');
Expect(1, 1612, '\p{Ccc=00000002_8}', "");
Expect(0, 1612, '\p{^Ccc=00000002_8}', "");
Expect(0, 1612, '\P{Ccc=00000002_8}', "");
Expect(1, 1612, '\P{^Ccc=00000002_8}', "");
Expect(0, 1611, '\p{Ccc=00000002_8}', "");
Expect(1, 1611, '\p{^Ccc=00000002_8}', "");
Expect(1, 1611, '\P{Ccc=00000002_8}', "");
Expect(0, 1611, '\P{^Ccc=00000002_8}', "");
Error('\p{Is_Canonical_Combining_Class= 	+00:=028}');
Error('\P{Is_Canonical_Combining_Class= 	+00:=028}');
Expect(1, 1612, '\p{Is_Canonical_Combining_Class:+0000028}', "");
Expect(0, 1612, '\p{^Is_Canonical_Combining_Class:+0000028}', "");
Expect(0, 1612, '\P{Is_Canonical_Combining_Class:+0000028}', "");
Expect(1, 1612, '\P{^Is_Canonical_Combining_Class:+0000028}', "");
Expect(0, 1611, '\p{Is_Canonical_Combining_Class:+0000028}', "");
Expect(1, 1611, '\p{^Is_Canonical_Combining_Class:+0000028}', "");
Expect(1, 1611, '\P{Is_Canonical_Combining_Class:+0000028}', "");
Expect(0, 1611, '\P{^Is_Canonical_Combining_Class:+0000028}', "");
Error('\p{Is_Ccc=	:=0 0-0-0	0 00 028}');
Error('\P{Is_Ccc=	:=0 0-0-0	0 00 028}');
Expect(1, 1612, '\p{Is_Ccc=+0002_8}', "");
Expect(0, 1612, '\p{^Is_Ccc=+0002_8}', "");
Expect(0, 1612, '\P{Is_Ccc=+0002_8}', "");
Expect(1, 1612, '\P{^Is_Ccc=+0002_8}', "");
Expect(0, 1611, '\p{Is_Ccc=+0002_8}', "");
Expect(1, 1611, '\p{^Is_Ccc=+0002_8}', "");
Expect(1, 1611, '\P{Is_Ccc=+0002_8}', "");
Expect(0, 1611, '\P{^Is_Ccc=+0002_8}', "");
Error('\p{Canonical_Combining_Class=--000000000130/a/}');
Error('\P{Canonical_Combining_Class=--000000000130/a/}');
Expect(1, 3954, '\p{Canonical_Combining_Class=+0_0_1_30}', "");
Expect(0, 3954, '\p{^Canonical_Combining_Class=+0_0_1_30}', "");
Expect(0, 3954, '\P{Canonical_Combining_Class=+0_0_1_30}', "");
Expect(1, 3954, '\P{^Canonical_Combining_Class=+0_0_1_30}', "");
Expect(0, 3953, '\p{Canonical_Combining_Class=+0_0_1_30}', "");
Expect(1, 3953, '\p{^Canonical_Combining_Class=+0_0_1_30}', "");
Expect(1, 3953, '\P{Canonical_Combining_Class=+0_0_1_30}', "");
Expect(0, 3953, '\P{^Canonical_Combining_Class=+0_0_1_30}', "");
Error('\p{Ccc=/a/--130}');
Error('\P{Ccc=/a/--130}');
Expect(1, 3954, '\p{Ccc=+000000130}', "");
Expect(0, 3954, '\p{^Ccc=+000000130}', "");
Expect(0, 3954, '\P{Ccc=+000000130}', "");
Expect(1, 3954, '\P{^Ccc=+000000130}', "");
Expect(0, 3953, '\p{Ccc=+000000130}', "");
Expect(1, 3953, '\p{^Ccc=+000000130}', "");
Expect(1, 3953, '\P{Ccc=+000000130}', "");
Expect(0, 3953, '\P{^Ccc=+000000130}', "");
Error('\p{Is_Canonical_Combining_Class= _0000 00/a/13	0}');
Error('\P{Is_Canonical_Combining_Class= _0000 00/a/13	0}');
Expect(1, 3954, '\p{Is_Canonical_Combining_Class=+00_00_00_01_30}', "");
Expect(0, 3954, '\p{^Is_Canonical_Combining_Class=+00_00_00_01_30}', "");
Expect(0, 3954, '\P{Is_Canonical_Combining_Class=+00_00_00_01_30}', "");
Expect(1, 3954, '\P{^Is_Canonical_Combining_Class=+00_00_00_01_30}', "");
Expect(0, 3953, '\p{Is_Canonical_Combining_Class=+00_00_00_01_30}', "");
Expect(1, 3953, '\p{^Is_Canonical_Combining_Class=+00_00_00_01_30}', "");
Expect(1, 3953, '\P{Is_Canonical_Combining_Class=+00_00_00_01_30}', "");
Expect(0, 3953, '\P{^Is_Canonical_Combining_Class=+00_00_00_01_30}', "");
Error('\p{Is_Ccc=:=013-0}');
Error('\P{Is_Ccc=:=013-0}');
Expect(1, 3954, '\p{Is_Ccc=130}', "");
Expect(0, 3954, '\p{^Is_Ccc=130}', "");
Expect(0, 3954, '\P{Is_Ccc=130}', "");
Expect(1, 3954, '\P{^Is_Ccc=130}', "");
Expect(0, 3953, '\p{Is_Ccc=130}', "");
Expect(1, 3953, '\p{^Is_Ccc=130}', "");
Expect(1, 3953, '\P{Is_Ccc=130}', "");
Expect(0, 3953, '\P{^Is_Ccc=130}', "");
Error('\p{Canonical_Combining_Class=:= 0122}');
Error('\P{Canonical_Combining_Class=:= 0122}');
Expect(1, 3787, '\p{Canonical_Combining_Class=122}', "");
Expect(0, 3787, '\p{^Canonical_Combining_Class=122}', "");
Expect(0, 3787, '\P{Canonical_Combining_Class=122}', "");
Expect(1, 3787, '\P{^Canonical_Combining_Class=122}', "");
Expect(0, 3783, '\p{Canonical_Combining_Class=122}', "");
Expect(1, 3783, '\p{^Canonical_Combining_Class=122}', "");
Expect(1, 3783, '\P{Canonical_Combining_Class=122}', "");
Expect(0, 3783, '\P{^Canonical_Combining_Class=122}', "");
Error('\p{Ccc=_00012-2:=}');
Error('\P{Ccc=_00012-2:=}');
Expect(1, 3787, '\p{Ccc=00000122}', "");
Expect(0, 3787, '\p{^Ccc=00000122}', "");
Expect(0, 3787, '\P{Ccc=00000122}', "");
Expect(1, 3787, '\P{^Ccc=00000122}', "");
Expect(0, 3783, '\p{Ccc=00000122}', "");
Expect(1, 3783, '\p{^Ccc=00000122}', "");
Expect(1, 3783, '\P{Ccc=00000122}', "");
Expect(0, 3783, '\P{^Ccc=00000122}', "");
Error('\p{Is_Canonical_Combining_Class=_0:=00 0 0122}');
Error('\P{Is_Canonical_Combining_Class=_0:=00 0 0122}');
Expect(1, 3787, '\p{Is_Canonical_Combining_Class=000122}', "");
Expect(0, 3787, '\p{^Is_Canonical_Combining_Class=000122}', "");
Expect(0, 3787, '\P{Is_Canonical_Combining_Class=000122}', "");
Expect(1, 3787, '\P{^Is_Canonical_Combining_Class=000122}', "");
Expect(0, 3783, '\p{Is_Canonical_Combining_Class=000122}', "");
Expect(1, 3783, '\p{^Is_Canonical_Combining_Class=000122}', "");
Expect(1, 3783, '\P{Is_Canonical_Combining_Class=000122}', "");
Expect(0, 3783, '\P{^Is_Canonical_Combining_Class=000122}', "");
Error('\p{Is_Ccc=_	+000/a/001	22}');
Error('\P{Is_Ccc=_	+000/a/001	22}');
Expect(1, 3787, '\p{Is_Ccc=000_001_22}', "");
Expect(0, 3787, '\p{^Is_Ccc=000_001_22}', "");
Expect(0, 3787, '\P{Is_Ccc=000_001_22}', "");
Expect(1, 3787, '\P{^Is_Ccc=000_001_22}', "");
Expect(0, 3783, '\p{Is_Ccc=000_001_22}', "");
Expect(1, 3783, '\p{^Is_Ccc=000_001_22}', "");
Expect(1, 3783, '\P{Is_Ccc=000_001_22}', "");
Expect(0, 3783, '\P{^Is_Ccc=000_001_22}', "");
Error('\p{Canonical_Combining_Class:  00_00-00/a/22}');
Error('\P{Canonical_Combining_Class:  00_00-00/a/22}');
Expect(1, 1469, '\p{Canonical_Combining_Class=00022}', "");
Expect(0, 1469, '\p{^Canonical_Combining_Class=00022}', "");
Expect(0, 1469, '\P{Canonical_Combining_Class=00022}', "");
Expect(1, 1469, '\P{^Canonical_Combining_Class=00022}', "");
Expect(0, 1468, '\p{Canonical_Combining_Class=00022}', "");
Expect(1, 1468, '\p{^Canonical_Combining_Class=00022}', "");
Expect(1, 1468, '\P{Canonical_Combining_Class=00022}', "");
Expect(0, 1468, '\P{^Canonical_Combining_Class=00022}', "");
Error('\p{Ccc=-:=00022}');
Error('\P{Ccc=-:=00022}');
Expect(1, 1469, '\p{Ccc=+022}', "");
Expect(0, 1469, '\p{^Ccc=+022}', "");
Expect(0, 1469, '\P{Ccc=+022}', "");
Expect(1, 1469, '\P{^Ccc=+022}', "");
Expect(0, 1468, '\p{Ccc=+022}', "");
Expect(1, 1468, '\p{^Ccc=+022}', "");
Expect(1, 1468, '\P{Ccc=+022}', "");
Expect(0, 1468, '\P{^Ccc=+022}', "");
Error('\p{Is_Canonical_Combining_Class=/a/	_0000022}');
Error('\P{Is_Canonical_Combining_Class=/a/	_0000022}');
Expect(1, 1469, '\p{Is_Canonical_Combining_Class=00000022}', "");
Expect(0, 1469, '\p{^Is_Canonical_Combining_Class=00000022}', "");
Expect(0, 1469, '\P{Is_Canonical_Combining_Class=00000022}', "");
Expect(1, 1469, '\P{^Is_Canonical_Combining_Class=00000022}', "");
Expect(0, 1468, '\p{Is_Canonical_Combining_Class=00000022}', "");
Expect(1, 1468, '\p{^Is_Canonical_Combining_Class=00000022}', "");
Expect(1, 1468, '\P{Is_Canonical_Combining_Class=00000022}', "");
Expect(0, 1468, '\P{^Is_Canonical_Combining_Class=00000022}', "");
Error('\p{Is_Ccc=:=	 +000022}');
Error('\P{Is_Ccc=:=	 +000022}');
Expect(1, 1469, '\p{Is_Ccc:   00000000022}', "");
Expect(0, 1469, '\p{^Is_Ccc:   00000000022}', "");
Expect(0, 1469, '\P{Is_Ccc:   00000000022}', "");
Expect(1, 1469, '\P{^Is_Ccc:   00000000022}', "");
Expect(0, 1468, '\p{Is_Ccc:   00000000022}', "");
Expect(1, 1468, '\p{^Is_Ccc:   00000000022}', "");
Expect(1, 1468, '\P{Is_Ccc:   00000000022}', "");
Expect(0, 1468, '\P{^Is_Ccc:   00000000022}', "");
Error('\p{Canonical_Combining_Class= /a/+0000000013}');
Error('\P{Canonical_Combining_Class= /a/+0000000013}');
Expect(1, 1459, '\p{Canonical_Combining_Class=0000_0001_3}', "");
Expect(0, 1459, '\p{^Canonical_Combining_Class=0000_0001_3}', "");
Expect(0, 1459, '\P{Canonical_Combining_Class=0000_0001_3}', "");
Expect(1, 1459, '\P{^Canonical_Combining_Class=0000_0001_3}', "");
Expect(0, 1458, '\p{Canonical_Combining_Class=0000_0001_3}', "");
Expect(1, 1458, '\p{^Canonical_Combining_Class=0000_0001_3}', "");
Expect(1, 1458, '\P{Canonical_Combining_Class=0000_0001_3}', "");
Expect(0, 1458, '\P{^Canonical_Combining_Class=0000_0001_3}', "");
Error('\p{Ccc=	-0	0 0 0:=0	0-0013}');
Error('\P{Ccc=	-0	0 0 0:=0	0-0013}');
Expect(1, 1459, '\p{Ccc=000000013}', "");
Expect(0, 1459, '\p{^Ccc=000000013}', "");
Expect(0, 1459, '\P{Ccc=000000013}', "");
Expect(1, 1459, '\P{^Ccc=000000013}', "");
Expect(0, 1458, '\p{Ccc=000000013}', "");
Expect(1, 1458, '\p{^Ccc=000000013}', "");
Expect(1, 1458, '\P{Ccc=000000013}', "");
Expect(0, 1458, '\P{^Ccc=000000013}', "");
Error('\p{Is_Canonical_Combining_Class=:=_	00_0001-3}');
Error('\P{Is_Canonical_Combining_Class=:=_	00_0001-3}');
Expect(1, 1459, '\p{Is_Canonical_Combining_Class=0_0_13}', "");
Expect(0, 1459, '\p{^Is_Canonical_Combining_Class=0_0_13}', "");
Expect(0, 1459, '\P{Is_Canonical_Combining_Class=0_0_13}', "");
Expect(1, 1459, '\P{^Is_Canonical_Combining_Class=0_0_13}', "");
Expect(0, 1458, '\p{Is_Canonical_Combining_Class=0_0_13}', "");
Expect(1, 1458, '\p{^Is_Canonical_Combining_Class=0_0_13}', "");
Expect(1, 1458, '\P{Is_Canonical_Combining_Class=0_0_13}', "");
Expect(0, 1458, '\P{^Is_Canonical_Combining_Class=0_0_13}', "");
Error('\p{Is_Ccc:		/a/+0 0_0 0-013}');
Error('\P{Is_Ccc:		/a/+0 0_0 0-013}');
Expect(1, 1459, '\p{Is_Ccc:   0013}', "");
Expect(0, 1459, '\p{^Is_Ccc:   0013}', "");
Expect(0, 1459, '\P{Is_Ccc:   0013}', "");
Expect(1, 1459, '\P{^Is_Ccc:   0013}', "");
Expect(0, 1458, '\p{Is_Ccc:   0013}', "");
Expect(1, 1458, '\p{^Is_Ccc:   0013}', "");
Expect(1, 1458, '\P{Is_Ccc:   0013}', "");
Expect(0, 1458, '\P{^Is_Ccc:   0013}', "");
Error('\p{Canonical_Combining_Class=:=-0036}');
Error('\P{Canonical_Combining_Class=:=-0036}');
Expect(1, 1809, '\p{Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(0, 1809, '\p{^Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(0, 1809, '\P{Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(1, 1809, '\P{^Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(0, 1808, '\p{Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(1, 1808, '\p{^Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(1, 1808, '\P{Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(0, 1808, '\P{^Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Error('\p{Ccc= /a/+3	6}');
Error('\P{Ccc= /a/+3	6}');
Expect(1, 1809, '\p{Ccc=003_6}', "");
Expect(0, 1809, '\p{^Ccc=003_6}', "");
Expect(0, 1809, '\P{Ccc=003_6}', "");
Expect(1, 1809, '\P{^Ccc=003_6}', "");
Expect(0, 1808, '\p{Ccc=003_6}', "");
Expect(1, 1808, '\p{^Ccc=003_6}', "");
Expect(1, 1808, '\P{Ccc=003_6}', "");
Expect(0, 1808, '\P{^Ccc=003_6}', "");
Error('\p{Is_Canonical_Combining_Class:		000	000 36:=}');
Error('\P{Is_Canonical_Combining_Class:		000	000 36:=}');
Expect(1, 1809, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(0, 1809, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(0, 1809, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(1, 1809, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(0, 1808, '\p{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(1, 1808, '\p{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(1, 1808, '\P{Is_Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Expect(0, 1808, '\P{^Is_Canonical_Combining_Class=0_0_0_0_0_0_0_036}', "");
Error('\p{Is_Ccc=--+00000000036/a/}');
Error('\P{Is_Ccc=--+00000000036/a/}');
Expect(1, 1809, '\p{Is_Ccc=03_6}', "");
Expect(0, 1809, '\p{^Is_Ccc=03_6}', "");
Expect(0, 1809, '\P{Is_Ccc=03_6}', "");
Expect(1, 1809, '\P{^Is_Ccc=03_6}', "");
Expect(0, 1808, '\p{Is_Ccc=03_6}', "");
Expect(1, 1808, '\p{^Is_Ccc=03_6}', "");
Expect(1, 1808, '\P{Is_Ccc=03_6}', "");
Expect(0, 1808, '\P{^Is_Ccc=03_6}', "");
Error('\p{Canonical_Combining_Class=:=+0000034}');
Error('\P{Canonical_Combining_Class=:=+0000034}');
Expect(1, 1618, '\p{Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(0, 1618, '\p{^Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(0, 1618, '\P{Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(1, 1618, '\P{^Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(0, 1617, '\p{Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(1, 1617, '\p{^Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(1, 1617, '\P{Canonical_Combining_Class=0_0_0_0_034}', "");
Expect(0, 1617, '\P{^Canonical_Combining_Class=0_0_0_0_034}', "");
Error('\p{Ccc= -00 03:=4}');
Error('\P{Ccc= -00 03:=4}');
Expect(1, 1618, '\p{Ccc=+3_4}', "");
Expect(0, 1618, '\p{^Ccc=+3_4}', "");
Expect(0, 1618, '\P{Ccc=+3_4}', "");
Expect(1, 1618, '\P{^Ccc=+3_4}', "");
Expect(0, 1617, '\p{Ccc=+3_4}', "");
Expect(1, 1617, '\p{^Ccc=+3_4}', "");
Expect(1, 1617, '\P{Ccc=+3_4}', "");
Expect(0, 1617, '\P{^Ccc=+3_4}', "");
Error('\p{Is_Canonical_Combining_Class= 	000034/a/}');
Error('\P{Is_Canonical_Combining_Class= 	000034/a/}');
Expect(1, 1618, '\p{Is_Canonical_Combining_Class=0_0_0_0_34}', "");
Expect(0, 1618, '\p{^Is_Canonical_Combining_Class=0_0_0_0_34}', "");
Expect(0, 1618, '\P{Is_Canonical_Combining_Class=0_0_0_0_34}', "");
Expect(1, 1618, '\P{^Is_Canonical_Combining_Class=0_0_0_0_34}', "");
Expect(0, 1617, '\p{Is_Canonical_Combining_Class=0_0_0_0_34}', "");
Expect(1, 1617, '\p{^Is_Canonical_Combining_Class=0_0_0_0_34}', "");
Expect(1, 1617, '\P{Is_Canonical_Combining_Class=0_0_0_0_34}', "");
Expect(0, 1617, '\P{^Is_Canonical_Combining_Class=0_0_0_0_34}', "");
Error('\p{Is_Ccc: +00034/a/}');
Error('\P{Is_Ccc: +00034/a/}');
Expect(1, 1618, '\p{Is_Ccc=0034}', "");
Expect(0, 1618, '\p{^Is_Ccc=0034}', "");
Expect(0, 1618, '\P{Is_Ccc=0034}', "");
Expect(1, 1618, '\P{^Is_Ccc=0034}', "");
Expect(0, 1617, '\p{Is_Ccc=0034}', "");
Expect(1, 1617, '\p{^Is_Ccc=0034}', "");
Expect(1, 1617, '\P{Is_Ccc=0034}', "");
Expect(0, 1617, '\P{^Is_Ccc=0034}', "");
Error('\p{Canonical_Combining_Class=:=00000132}');
Error('\P{Canonical_Combining_Class=:=00000132}');
Expect(1, 3956, '\p{Canonical_Combining_Class=+00_00_00_00_0132}', "");
Expect(0, 3956, '\p{^Canonical_Combining_Class=+00_00_00_00_0132}', "");
Expect(0, 3956, '\P{Canonical_Combining_Class=+00_00_00_00_0132}', "");
Expect(1, 3956, '\P{^Canonical_Combining_Class=+00_00_00_00_0132}', "");
Expect(0, 3955, '\p{Canonical_Combining_Class=+00_00_00_00_0132}', "");
Expect(1, 3955, '\p{^Canonical_Combining_Class=+00_00_00_00_0132}', "");
Expect(1, 3955, '\P{Canonical_Combining_Class=+00_00_00_00_0132}', "");
Expect(0, 3955, '\P{^Canonical_Combining_Class=+00_00_00_00_0132}', "");
Error('\p{Ccc=-00132:=}');
Error('\P{Ccc=-00132:=}');
Expect(1, 3956, '\p{Ccc: 00_00_00_00_132}', "");
Expect(0, 3956, '\p{^Ccc: 00_00_00_00_132}', "");
Expect(0, 3956, '\P{Ccc: 00_00_00_00_132}', "");
Expect(1, 3956, '\P{^Ccc: 00_00_00_00_132}', "");
Expect(0, 3955, '\p{Ccc: 00_00_00_00_132}', "");
Expect(1, 3955, '\p{^Ccc: 00_00_00_00_132}', "");
Expect(1, 3955, '\P{Ccc: 00_00_00_00_132}', "");
Expect(0, 3955, '\P{^Ccc: 00_00_00_00_132}', "");
Error('\p{Is_Canonical_Combining_Class=_:=0 0 0	0 0_0132}');
Error('\P{Is_Canonical_Combining_Class=_:=0 0 0	0 0_0132}');
Expect(1, 3956, '\p{Is_Canonical_Combining_Class=+00_00_00_00_01_32}', "");
Expect(0, 3956, '\p{^Is_Canonical_Combining_Class=+00_00_00_00_01_32}', "");
Expect(0, 3956, '\P{Is_Canonical_Combining_Class=+00_00_00_00_01_32}', "");
Expect(1, 3956, '\P{^Is_Canonical_Combining_Class=+00_00_00_00_01_32}', "");
Expect(0, 3955, '\p{Is_Canonical_Combining_Class=+00_00_00_00_01_32}', "");
Expect(1, 3955, '\p{^Is_Canonical_Combining_Class=+00_00_00_00_01_32}', "");
Expect(1, 3955, '\P{Is_Canonical_Combining_Class=+00_00_00_00_01_32}', "");
Expect(0, 3955, '\P{^Is_Canonical_Combining_Class=+00_00_00_00_01_32}', "");
Error('\p{Is_Ccc::=__0000132}');
Error('\P{Is_Ccc::=__0000132}');
Expect(1, 3956, '\p{Is_Ccc=+0_0_0_0_0_0_0132}', "");
Expect(0, 3956, '\p{^Is_Ccc=+0_0_0_0_0_0_0132}', "");
Expect(0, 3956, '\P{Is_Ccc=+0_0_0_0_0_0_0132}', "");
Expect(1, 3956, '\P{^Is_Ccc=+0_0_0_0_0_0_0132}', "");
Expect(0, 3955, '\p{Is_Ccc=+0_0_0_0_0_0_0132}', "");
Expect(1, 3955, '\p{^Is_Ccc=+0_0_0_0_0_0_0132}', "");
Expect(1, 3955, '\P{Is_Ccc=+0_0_0_0_0_0_0132}', "");
Expect(0, 3955, '\P{^Is_Ccc=+0_0_0_0_0_0_0132}', "");
Error('\p{Bidi_Class=/a/SEGMENT-SEPARATOR}');
Error('\P{Bidi_Class=/a/SEGMENT-SEPARATOR}');
Expect(1, 9, '\p{Bidi_Class=segmentseparator}', "");
Expect(0, 9, '\p{^Bidi_Class=segmentseparator}', "");
Expect(0, 9, '\P{Bidi_Class=segmentseparator}', "");
Expect(1, 9, '\P{^Bidi_Class=segmentseparator}', "");
Expect(0, 8, '\p{Bidi_Class=segmentseparator}', "");
Expect(1, 8, '\p{^Bidi_Class=segmentseparator}', "");
Expect(1, 8, '\P{Bidi_Class=segmentseparator}', "");
Expect(0, 8, '\P{^Bidi_Class=segmentseparator}', "");
Expect(1, 9, '\p{Bidi_Class=-segment-separator}', "");
Expect(0, 9, '\p{^Bidi_Class=-segment-separator}', "");
Expect(0, 9, '\P{Bidi_Class=-segment-separator}', "");
Expect(1, 9, '\P{^Bidi_Class=-segment-separator}', "");
Expect(0, 8, '\p{Bidi_Class=-segment-separator}', "");
Expect(1, 8, '\p{^Bidi_Class=-segment-separator}', "");
Expect(1, 8, '\P{Bidi_Class=-segment-separator}', "");
Expect(0, 8, '\P{^Bidi_Class=-segment-separator}', "");
Error('\p{Bc=/a/_S}');
Error('\P{Bc=/a/_S}');
Expect(1, 9, '\p{Bc:	s}', "");
Expect(0, 9, '\p{^Bc:	s}', "");
Expect(0, 9, '\P{Bc:	s}', "");
Expect(1, 9, '\P{^Bc:	s}', "");
Expect(0, 8, '\p{Bc:	s}', "");
Expect(1, 8, '\p{^Bc:	s}', "");
Expect(1, 8, '\P{Bc:	s}', "");
Expect(0, 8, '\P{^Bc:	s}', "");
Expect(1, 9, '\p{Bc=		S}', "");
Expect(0, 9, '\p{^Bc=		S}', "");
Expect(0, 9, '\P{Bc=		S}', "");
Expect(1, 9, '\P{^Bc=		S}', "");
Expect(0, 8, '\p{Bc=		S}', "");
Expect(1, 8, '\p{^Bc=		S}', "");
Expect(1, 8, '\P{Bc=		S}', "");
Expect(0, 8, '\P{^Bc=		S}', "");
Error('\p{Is_Bidi_Class= _Segment:=Separator}');
Error('\P{Is_Bidi_Class= _Segment:=Separator}');
Expect(1, 9, '\p{Is_Bidi_Class=segmentseparator}', "");
Expect(0, 9, '\p{^Is_Bidi_Class=segmentseparator}', "");
Expect(0, 9, '\P{Is_Bidi_Class=segmentseparator}', "");
Expect(1, 9, '\P{^Is_Bidi_Class=segmentseparator}', "");
Expect(0, 8, '\p{Is_Bidi_Class=segmentseparator}', "");
Expect(1, 8, '\p{^Is_Bidi_Class=segmentseparator}', "");
Expect(1, 8, '\P{Is_Bidi_Class=segmentseparator}', "");
Expect(0, 8, '\P{^Is_Bidi_Class=segmentseparator}', "");
Expect(1, 9, '\p{Is_Bidi_Class: _-Segment-Separator}', "");
Expect(0, 9, '\p{^Is_Bidi_Class: _-Segment-Separator}', "");
Expect(0, 9, '\P{Is_Bidi_Class: _-Segment-Separator}', "");
Expect(1, 9, '\P{^Is_Bidi_Class: _-Segment-Separator}', "");
Expect(0, 8, '\p{Is_Bidi_Class: _-Segment-Separator}', "");
Expect(1, 8, '\p{^Is_Bidi_Class: _-Segment-Separator}', "");
Expect(1, 8, '\P{Is_Bidi_Class: _-Segment-Separator}', "");
Expect(0, 8, '\P{^Is_Bidi_Class: _-Segment-Separator}', "");
Error('\p{Is_Bc:_ s/a/}');
Error('\P{Is_Bc:_ s/a/}');
Expect(1, 9, '\p{Is_Bc=s}', "");
Expect(0, 9, '\p{^Is_Bc=s}', "");
Expect(0, 9, '\P{Is_Bc=s}', "");
Expect(1, 9, '\P{^Is_Bc=s}', "");
Expect(0, 8, '\p{Is_Bc=s}', "");
Expect(1, 8, '\p{^Is_Bc=s}', "");
Expect(1, 8, '\P{Is_Bc=s}', "");
Expect(0, 8, '\P{^Is_Bc=s}', "");
Expect(1, 9, '\p{Is_Bc= 	S}', "");
Expect(0, 9, '\p{^Is_Bc= 	S}', "");
Expect(0, 9, '\P{Is_Bc= 	S}', "");
Expect(1, 9, '\P{^Is_Bc= 	S}', "");
Expect(0, 8, '\p{Is_Bc= 	S}', "");
Expect(1, 8, '\p{^Is_Bc= 	S}', "");
Expect(1, 8, '\P{Is_Bc= 	S}', "");
Expect(0, 8, '\P{^Is_Bc= 	S}', "");
Error('\p{Bidi_Class=  Right	TO LEFT/a/OVERRIDE}');
Error('\P{Bidi_Class=  Right	TO LEFT/a/OVERRIDE}');
Expect(1, 8238, '\p{Bidi_Class=righttoleftoverride}', "");
Expect(0, 8238, '\p{^Bidi_Class=righttoleftoverride}', "");
Expect(0, 8238, '\P{Bidi_Class=righttoleftoverride}', "");
Expect(1, 8238, '\P{^Bidi_Class=righttoleftoverride}', "");
Expect(0, 8237, '\p{Bidi_Class=righttoleftoverride}', "");
Expect(1, 8237, '\p{^Bidi_Class=righttoleftoverride}', "");
Expect(1, 8237, '\P{Bidi_Class=righttoleftoverride}', "");
Expect(0, 8237, '\P{^Bidi_Class=righttoleftoverride}', "");
Expect(1, 8238, '\p{Bidi_Class=--RIGHT	To Left	Override}', "");
Expect(0, 8238, '\p{^Bidi_Class=--RIGHT	To Left	Override}', "");
Expect(0, 8238, '\P{Bidi_Class=--RIGHT	To Left	Override}', "");
Expect(1, 8238, '\P{^Bidi_Class=--RIGHT	To Left	Override}', "");
Expect(0, 8237, '\p{Bidi_Class=--RIGHT	To Left	Override}', "");
Expect(1, 8237, '\p{^Bidi_Class=--RIGHT	To Left	Override}', "");
Expect(1, 8237, '\P{Bidi_Class=--RIGHT	To Left	Override}', "");
Expect(0, 8237, '\P{^Bidi_Class=--RIGHT	To Left	Override}', "");
Error('\p{Bc=- RLO/a/}');
Error('\P{Bc=- RLO/a/}');
Expect(1, 8238, '\p{Bc=rlo}', "");
Expect(0, 8238, '\p{^Bc=rlo}', "");
Expect(0, 8238, '\P{Bc=rlo}', "");
Expect(1, 8238, '\P{^Bc=rlo}', "");
Expect(0, 8237, '\p{Bc=rlo}', "");
Expect(1, 8237, '\p{^Bc=rlo}', "");
Expect(1, 8237, '\P{Bc=rlo}', "");
Expect(0, 8237, '\P{^Bc=rlo}', "");
Expect(1, 8238, '\p{Bc=- RLO}', "");
Expect(0, 8238, '\p{^Bc=- RLO}', "");
Expect(0, 8238, '\P{Bc=- RLO}', "");
Expect(1, 8238, '\P{^Bc=- RLO}', "");
Expect(0, 8237, '\p{Bc=- RLO}', "");
Expect(1, 8237, '\p{^Bc=- RLO}', "");
Expect(1, 8237, '\P{Bc=- RLO}', "");
Expect(0, 8237, '\P{^Bc=- RLO}', "");
Error('\p{Is_Bidi_Class=:=--Rightto LEFT_Override}');
Error('\P{Is_Bidi_Class=:=--Rightto LEFT_Override}');
Expect(1, 8238, '\p{Is_Bidi_Class:righttoleftoverride}', "");
Expect(0, 8238, '\p{^Is_Bidi_Class:righttoleftoverride}', "");
Expect(0, 8238, '\P{Is_Bidi_Class:righttoleftoverride}', "");
Expect(1, 8238, '\P{^Is_Bidi_Class:righttoleftoverride}', "");
Expect(0, 8237, '\p{Is_Bidi_Class:righttoleftoverride}', "");
Expect(1, 8237, '\p{^Is_Bidi_Class:righttoleftoverride}', "");
Expect(1, 8237, '\P{Is_Bidi_Class:righttoleftoverride}', "");
Expect(0, 8237, '\P{^Is_Bidi_Class:righttoleftoverride}', "");
Expect(1, 8238, '\p{Is_Bidi_Class:   -_Right to-LEFT OVERRIDE}', "");
Expect(0, 8238, '\p{^Is_Bidi_Class:   -_Right to-LEFT OVERRIDE}', "");
Expect(0, 8238, '\P{Is_Bidi_Class:   -_Right to-LEFT OVERRIDE}', "");
Expect(1, 8238, '\P{^Is_Bidi_Class:   -_Right to-LEFT OVERRIDE}', "");
Expect(0, 8237, '\p{Is_Bidi_Class:   -_Right to-LEFT OVERRIDE}', "");
Expect(1, 8237, '\p{^Is_Bidi_Class:   -_Right to-LEFT OVERRIDE}', "");
Expect(1, 8237, '\P{Is_Bidi_Class:   -_Right to-LEFT OVERRIDE}', "");
Expect(0, 8237, '\P{^Is_Bidi_Class:   -_Right to-LEFT OVERRIDE}', "");
Error('\p{Is_Bc=	rlo:=}');
Error('\P{Is_Bc=	rlo:=}');
Expect(1, 8238, '\p{Is_Bc=rlo}', "");
Expect(0, 8238, '\p{^Is_Bc=rlo}', "");
Expect(0, 8238, '\P{Is_Bc=rlo}', "");
Expect(1, 8238, '\P{^Is_Bc=rlo}', "");
Expect(0, 8237, '\p{Is_Bc=rlo}', "");
Expect(1, 8237, '\p{^Is_Bc=rlo}', "");
Expect(1, 8237, '\P{Is_Bc=rlo}', "");
Expect(0, 8237, '\P{^Is_Bc=rlo}', "");
Expect(1, 8238, '\p{Is_Bc=	 rlo}', "");
Expect(0, 8238, '\p{^Is_Bc=	 rlo}', "");
Expect(0, 8238, '\P{Is_Bc=	 rlo}', "");
Expect(1, 8238, '\P{^Is_Bc=	 rlo}', "");
Expect(0, 8237, '\p{Is_Bc=	 rlo}', "");
Expect(1, 8237, '\p{^Is_Bc=	 rlo}', "");
Expect(1, 8237, '\P{Is_Bc=	 rlo}', "");
Expect(0, 8237, '\P{^Is_Bc=	 rlo}', "");
Error('\p{Bidi_Class=/a/left To_RIGHT	override}');
Error('\P{Bidi_Class=/a/left To_RIGHT	override}');
Expect(1, 8237, '\p{Bidi_Class=lefttorightoverride}', "");
Expect(0, 8237, '\p{^Bidi_Class=lefttorightoverride}', "");
Expect(0, 8237, '\P{Bidi_Class=lefttorightoverride}', "");
Expect(1, 8237, '\P{^Bidi_Class=lefttorightoverride}', "");
Expect(0, 8236, '\p{Bidi_Class=lefttorightoverride}', "");
Expect(1, 8236, '\p{^Bidi_Class=lefttorightoverride}', "");
Expect(1, 8236, '\P{Bidi_Class=lefttorightoverride}', "");
Expect(0, 8236, '\P{^Bidi_Class=lefttorightoverride}', "");
Expect(1, 8237, '\p{Bidi_Class=_	Left To-rightOverride}', "");
Expect(0, 8237, '\p{^Bidi_Class=_	Left To-rightOverride}', "");
Expect(0, 8237, '\P{Bidi_Class=_	Left To-rightOverride}', "");
Expect(1, 8237, '\P{^Bidi_Class=_	Left To-rightOverride}', "");
Expect(0, 8236, '\p{Bidi_Class=_	Left To-rightOverride}', "");
Expect(1, 8236, '\p{^Bidi_Class=_	Left To-rightOverride}', "");
Expect(1, 8236, '\P{Bidi_Class=_	Left To-rightOverride}', "");
Expect(0, 8236, '\P{^Bidi_Class=_	Left To-rightOverride}', "");
Error('\p{Bc=:=LRO}');
Error('\P{Bc=:=LRO}');
Expect(1, 8237, '\p{Bc=lro}', "");
Expect(0, 8237, '\p{^Bc=lro}', "");
Expect(0, 8237, '\P{Bc=lro}', "");
Expect(1, 8237, '\P{^Bc=lro}', "");
Expect(0, 8236, '\p{Bc=lro}', "");
Expect(1, 8236, '\p{^Bc=lro}', "");
Expect(1, 8236, '\P{Bc=lro}', "");
Expect(0, 8236, '\P{^Bc=lro}', "");
Expect(1, 8237, '\p{Bc=  LRO}', "");
Expect(0, 8237, '\p{^Bc=  LRO}', "");
Expect(0, 8237, '\P{Bc=  LRO}', "");
Expect(1, 8237, '\P{^Bc=  LRO}', "");
Expect(0, 8236, '\p{Bc=  LRO}', "");
Expect(1, 8236, '\p{^Bc=  LRO}', "");
Expect(1, 8236, '\P{Bc=  LRO}', "");
Expect(0, 8236, '\P{^Bc=  LRO}', "");
Error('\p{Is_Bidi_Class:	:= LEFT	To	Right	override}');
Error('\P{Is_Bidi_Class:	:= LEFT	To	Right	override}');
Expect(1, 8237, '\p{Is_Bidi_Class=lefttorightoverride}', "");
Expect(0, 8237, '\p{^Is_Bidi_Class=lefttorightoverride}', "");
Expect(0, 8237, '\P{Is_Bidi_Class=lefttorightoverride}', "");
Expect(1, 8237, '\P{^Is_Bidi_Class=lefttorightoverride}', "");
Expect(0, 8236, '\p{Is_Bidi_Class=lefttorightoverride}', "");
Expect(1, 8236, '\p{^Is_Bidi_Class=lefttorightoverride}', "");
Expect(1, 8236, '\P{Is_Bidi_Class=lefttorightoverride}', "");
Expect(0, 8236, '\P{^Is_Bidi_Class=lefttorightoverride}', "");
Expect(1, 8237, '\p{Is_Bidi_Class=_	Left-To_right OVERRIDE}', "");
Expect(0, 8237, '\p{^Is_Bidi_Class=_	Left-To_right OVERRIDE}', "");
Expect(0, 8237, '\P{Is_Bidi_Class=_	Left-To_right OVERRIDE}', "");
Expect(1, 8237, '\P{^Is_Bidi_Class=_	Left-To_right OVERRIDE}', "");
Expect(0, 8236, '\p{Is_Bidi_Class=_	Left-To_right OVERRIDE}', "");
Expect(1, 8236, '\p{^Is_Bidi_Class=_	Left-To_right OVERRIDE}', "");
Expect(1, 8236, '\P{Is_Bidi_Class=_	Left-To_right OVERRIDE}', "");
Expect(0, 8236, '\P{^Is_Bidi_Class=_	Left-To_right OVERRIDE}', "");
Error('\p{Is_Bc=	/a/lro}');
Error('\P{Is_Bc=	/a/lro}');
Expect(1, 8237, '\p{Is_Bc=lro}', "");
Expect(0, 8237, '\p{^Is_Bc=lro}', "");
Expect(0, 8237, '\P{Is_Bc=lro}', "");
Expect(1, 8237, '\P{^Is_Bc=lro}', "");
Expect(0, 8236, '\p{Is_Bc=lro}', "");
Expect(1, 8236, '\p{^Is_Bc=lro}', "");
Expect(1, 8236, '\P{Is_Bc=lro}', "");
Expect(0, 8236, '\P{^Is_Bc=lro}', "");
Expect(1, 8237, '\p{Is_Bc= _LRO}', "");
Expect(0, 8237, '\p{^Is_Bc= _LRO}', "");
Expect(0, 8237, '\P{Is_Bc= _LRO}', "");
Expect(1, 8237, '\P{^Is_Bc= _LRO}', "");
Expect(0, 8236, '\p{Is_Bc= _LRO}', "");
Expect(1, 8236, '\p{^Is_Bc= _LRO}', "");
Expect(1, 8236, '\P{Is_Bc= _LRO}', "");
Expect(0, 8236, '\P{^Is_Bc= _LRO}', "");
Error('\p{Bidi_Class= /a/LeftTo-right}');
Error('\P{Bidi_Class= /a/LeftTo-right}');
Expect(1, 90, '\p{Bidi_Class=lefttoright}', "");
Expect(0, 90, '\p{^Bidi_Class=lefttoright}', "");
Expect(0, 90, '\P{Bidi_Class=lefttoright}', "");
Expect(1, 90, '\P{^Bidi_Class=lefttoright}', "");
Expect(0, 64, '\p{Bidi_Class=lefttoright}', "");
Expect(1, 64, '\p{^Bidi_Class=lefttoright}', "");
Expect(1, 64, '\P{Bidi_Class=lefttoright}', "");
Expect(0, 64, '\P{^Bidi_Class=lefttoright}', "");
Expect(1, 90, '\p{Bidi_Class=	-LEFT-to Right}', "");
Expect(0, 90, '\p{^Bidi_Class=	-LEFT-to Right}', "");
Expect(0, 90, '\P{Bidi_Class=	-LEFT-to Right}', "");
Expect(1, 90, '\P{^Bidi_Class=	-LEFT-to Right}', "");
Expect(0, 64, '\p{Bidi_Class=	-LEFT-to Right}', "");
Expect(1, 64, '\p{^Bidi_Class=	-LEFT-to Right}', "");
Expect(1, 64, '\P{Bidi_Class=	-LEFT-to Right}', "");
Expect(0, 64, '\P{^Bidi_Class=	-LEFT-to Right}', "");
Error('\p{Bc=:=	-l}');
Error('\P{Bc=:=	-l}');
Expect(1, 90, '\p{Bc=l}', "");
Expect(0, 90, '\p{^Bc=l}', "");
Expect(0, 90, '\P{Bc=l}', "");
Expect(1, 90, '\P{^Bc=l}', "");
Expect(0, 64, '\p{Bc=l}', "");
Expect(1, 64, '\p{^Bc=l}', "");
Expect(1, 64, '\P{Bc=l}', "");
Expect(0, 64, '\P{^Bc=l}', "");
Expect(1, 90, '\p{Bc= L}', "");
Expect(0, 90, '\p{^Bc= L}', "");
Expect(0, 90, '\P{Bc= L}', "");
Expect(1, 90, '\P{^Bc= L}', "");
Expect(0, 64, '\p{Bc= L}', "");
Expect(1, 64, '\p{^Bc= L}', "");
Expect(1, 64, '\P{Bc= L}', "");
Expect(0, 64, '\P{^Bc= L}', "");
Error('\p{Is_Bidi_Class=:=left-TORight}');
Error('\P{Is_Bidi_Class=:=left-TORight}');
Expect(1, 90, '\p{Is_Bidi_Class=lefttoright}', "");
Expect(0, 90, '\p{^Is_Bidi_Class=lefttoright}', "");
Expect(0, 90, '\P{Is_Bidi_Class=lefttoright}', "");
Expect(1, 90, '\P{^Is_Bidi_Class=lefttoright}', "");
Expect(0, 64, '\p{Is_Bidi_Class=lefttoright}', "");
Expect(1, 64, '\p{^Is_Bidi_Class=lefttoright}', "");
Expect(1, 64, '\P{Is_Bidi_Class=lefttoright}', "");
Expect(0, 64, '\P{^Is_Bidi_Class=lefttoright}', "");
Expect(1, 90, '\p{Is_Bidi_Class=  Left_ToRIGHT}', "");
Expect(0, 90, '\p{^Is_Bidi_Class=  Left_ToRIGHT}', "");
Expect(0, 90, '\P{Is_Bidi_Class=  Left_ToRIGHT}', "");
Expect(1, 90, '\P{^Is_Bidi_Class=  Left_ToRIGHT}', "");
Expect(0, 64, '\p{Is_Bidi_Class=  Left_ToRIGHT}', "");
Expect(1, 64, '\p{^Is_Bidi_Class=  Left_ToRIGHT}', "");
Expect(1, 64, '\P{Is_Bidi_Class=  Left_ToRIGHT}', "");
Expect(0, 64, '\P{^Is_Bidi_Class=  Left_ToRIGHT}', "");
Error('\p{Is_Bc=-	l/a/}');
Error('\P{Is_Bc=-	l/a/}');
Expect(1, 90, '\p{Is_Bc=l}', "");
Expect(0, 90, '\p{^Is_Bc=l}', "");
Expect(0, 90, '\P{Is_Bc=l}', "");
Expect(1, 90, '\P{^Is_Bc=l}', "");
Expect(0, 64, '\p{Is_Bc=l}', "");
Expect(1, 64, '\p{^Is_Bc=l}', "");
Expect(1, 64, '\P{Is_Bc=l}', "");
Expect(0, 64, '\P{^Is_Bc=l}', "");
Expect(1, 90, '\p{Is_Bc=-_L}', "");
Expect(0, 90, '\p{^Is_Bc=-_L}', "");
Expect(0, 90, '\P{Is_Bc=-_L}', "");
Expect(1, 90, '\P{^Is_Bc=-_L}', "");
Expect(0, 64, '\p{Is_Bc=-_L}', "");
Expect(1, 64, '\p{^Is_Bc=-_L}', "");
Expect(1, 64, '\P{Is_Bc=-_L}', "");
Expect(0, 64, '\P{^Is_Bc=-_L}', "");
Error('\p{Bidi_Class=-/a/RightTo-LEFT embedding}');
Error('\P{Bidi_Class=-/a/RightTo-LEFT embedding}');
Expect(1, 8235, '\p{Bidi_Class=righttoleftembedding}', "");
Expect(0, 8235, '\p{^Bidi_Class=righttoleftembedding}', "");
Expect(0, 8235, '\P{Bidi_Class=righttoleftembedding}', "");
Expect(1, 8235, '\P{^Bidi_Class=righttoleftembedding}', "");
Expect(0, 8234, '\p{Bidi_Class=righttoleftembedding}', "");
Expect(1, 8234, '\p{^Bidi_Class=righttoleftembedding}', "");
Expect(1, 8234, '\P{Bidi_Class=righttoleftembedding}', "");
Expect(0, 8234, '\P{^Bidi_Class=righttoleftembedding}', "");
Expect(1, 8235, '\p{Bidi_Class=  Right	TOLEFT Embedding}', "");
Expect(0, 8235, '\p{^Bidi_Class=  Right	TOLEFT Embedding}', "");
Expect(0, 8235, '\P{Bidi_Class=  Right	TOLEFT Embedding}', "");
Expect(1, 8235, '\P{^Bidi_Class=  Right	TOLEFT Embedding}', "");
Expect(0, 8234, '\p{Bidi_Class=  Right	TOLEFT Embedding}', "");
Expect(1, 8234, '\p{^Bidi_Class=  Right	TOLEFT Embedding}', "");
Expect(1, 8234, '\P{Bidi_Class=  Right	TOLEFT Embedding}', "");
Expect(0, 8234, '\P{^Bidi_Class=  Right	TOLEFT Embedding}', "");
Error('\p{Bc=:=  RLE}');
Error('\P{Bc=:=  RLE}');
Expect(1, 8235, '\p{Bc=rle}', "");
Expect(0, 8235, '\p{^Bc=rle}', "");
Expect(0, 8235, '\P{Bc=rle}', "");
Expect(1, 8235, '\P{^Bc=rle}', "");
Expect(0, 8234, '\p{Bc=rle}', "");
Expect(1, 8234, '\p{^Bc=rle}', "");
Expect(1, 8234, '\P{Bc=rle}', "");
Expect(0, 8234, '\P{^Bc=rle}', "");
Expect(1, 8235, '\p{Bc=-RLE}', "");
Expect(0, 8235, '\p{^Bc=-RLE}', "");
Expect(0, 8235, '\P{Bc=-RLE}', "");
Expect(1, 8235, '\P{^Bc=-RLE}', "");
Expect(0, 8234, '\p{Bc=-RLE}', "");
Expect(1, 8234, '\p{^Bc=-RLE}', "");
Expect(1, 8234, '\P{Bc=-RLE}', "");
Expect(0, 8234, '\P{^Bc=-RLE}', "");
Error('\p{Is_Bidi_Class=-/a/RIGHT_To	LEFT Embedding}');
Error('\P{Is_Bidi_Class=-/a/RIGHT_To	LEFT Embedding}');
Expect(1, 8235, '\p{Is_Bidi_Class=righttoleftembedding}', "");
Expect(0, 8235, '\p{^Is_Bidi_Class=righttoleftembedding}', "");
Expect(0, 8235, '\P{Is_Bidi_Class=righttoleftembedding}', "");
Expect(1, 8235, '\P{^Is_Bidi_Class=righttoleftembedding}', "");
Expect(0, 8234, '\p{Is_Bidi_Class=righttoleftembedding}', "");
Expect(1, 8234, '\p{^Is_Bidi_Class=righttoleftembedding}', "");
Expect(1, 8234, '\P{Is_Bidi_Class=righttoleftembedding}', "");
Expect(0, 8234, '\P{^Is_Bidi_Class=righttoleftembedding}', "");
Expect(1, 8235, '\p{Is_Bidi_Class=	_RIGHT_To	LEFT_EMBEDDING}', "");
Expect(0, 8235, '\p{^Is_Bidi_Class=	_RIGHT_To	LEFT_EMBEDDING}', "");
Expect(0, 8235, '\P{Is_Bidi_Class=	_RIGHT_To	LEFT_EMBEDDING}', "");
Expect(1, 8235, '\P{^Is_Bidi_Class=	_RIGHT_To	LEFT_EMBEDDING}', "");
Expect(0, 8234, '\p{Is_Bidi_Class=	_RIGHT_To	LEFT_EMBEDDING}', "");
Expect(1, 8234, '\p{^Is_Bidi_Class=	_RIGHT_To	LEFT_EMBEDDING}', "");
Expect(1, 8234, '\P{Is_Bidi_Class=	_RIGHT_To	LEFT_EMBEDDING}', "");
Expect(0, 8234, '\P{^Is_Bidi_Class=	_RIGHT_To	LEFT_EMBEDDING}', "");
Error('\p{Is_Bc= :=RLE}');
Error('\P{Is_Bc= :=RLE}');
Expect(1, 8235, '\p{Is_Bc=rle}', "");
Expect(0, 8235, '\p{^Is_Bc=rle}', "");
Expect(0, 8235, '\P{Is_Bc=rle}', "");
Expect(1, 8235, '\P{^Is_Bc=rle}', "");
Expect(0, 8234, '\p{Is_Bc=rle}', "");
Expect(1, 8234, '\p{^Is_Bc=rle}', "");
Expect(1, 8234, '\P{Is_Bc=rle}', "");
Expect(0, 8234, '\P{^Is_Bc=rle}', "");
Expect(1, 8235, '\p{Is_Bc=	-RLE}', "");
Expect(0, 8235, '\p{^Is_Bc=	-RLE}', "");
Expect(0, 8235, '\P{Is_Bc=	-RLE}', "");
Expect(1, 8235, '\P{^Is_Bc=	-RLE}', "");
Expect(0, 8234, '\p{Is_Bc=	-RLE}', "");
Expect(1, 8234, '\p{^Is_Bc=	-RLE}', "");
Expect(1, 8234, '\P{Is_Bc=	-RLE}', "");
Expect(0, 8234, '\P{^Is_Bc=	-RLE}', "");
Error('\p{Bidi_Class=_Other/a/Neutral}');
Error('\P{Bidi_Class=_Other/a/Neutral}');
Expect(1, 34, '\p{Bidi_Class=otherneutral}', "");
Expect(0, 34, '\p{^Bidi_Class=otherneutral}', "");
Expect(0, 34, '\P{Bidi_Class=otherneutral}', "");
Expect(1, 34, '\P{^Bidi_Class=otherneutral}', "");
Expect(0, 32, '\p{Bidi_Class=otherneutral}', "");
Expect(1, 32, '\p{^Bidi_Class=otherneutral}', "");
Expect(1, 32, '\P{Bidi_Class=otherneutral}', "");
Expect(0, 32, '\P{^Bidi_Class=otherneutral}', "");
Expect(1, 34, '\p{Bidi_Class=	-other-Neutral}', "");
Expect(0, 34, '\p{^Bidi_Class=	-other-Neutral}', "");
Expect(0, 34, '\P{Bidi_Class=	-other-Neutral}', "");
Expect(1, 34, '\P{^Bidi_Class=	-other-Neutral}', "");
Expect(0, 32, '\p{Bidi_Class=	-other-Neutral}', "");
Expect(1, 32, '\p{^Bidi_Class=	-other-Neutral}', "");
Expect(1, 32, '\P{Bidi_Class=	-other-Neutral}', "");
Expect(0, 32, '\P{^Bidi_Class=	-other-Neutral}', "");
Error('\p{Bc=/a/ 	ON}');
Error('\P{Bc=/a/ 	ON}');
Expect(1, 34, '\p{Bc=on}', "");
Expect(0, 34, '\p{^Bc=on}', "");
Expect(0, 34, '\P{Bc=on}', "");
Expect(1, 34, '\P{^Bc=on}', "");
Expect(0, 32, '\p{Bc=on}', "");
Expect(1, 32, '\p{^Bc=on}', "");
Expect(1, 32, '\P{Bc=on}', "");
Expect(0, 32, '\P{^Bc=on}', "");
Expect(1, 34, '\p{Bc= -ON}', "");
Expect(0, 34, '\p{^Bc= -ON}', "");
Expect(0, 34, '\P{Bc= -ON}', "");
Expect(1, 34, '\P{^Bc= -ON}', "");
Expect(0, 32, '\p{Bc= -ON}', "");
Expect(1, 32, '\p{^Bc= -ON}', "");
Expect(1, 32, '\P{Bc= -ON}', "");
Expect(0, 32, '\P{^Bc= -ON}', "");
Error('\p{Is_Bidi_Class=_-Other-NEUTRAL:=}');
Error('\P{Is_Bidi_Class=_-Other-NEUTRAL:=}');
Expect(1, 34, '\p{Is_Bidi_Class=otherneutral}', "");
Expect(0, 34, '\p{^Is_Bidi_Class=otherneutral}', "");
Expect(0, 34, '\P{Is_Bidi_Class=otherneutral}', "");
Expect(1, 34, '\P{^Is_Bidi_Class=otherneutral}', "");
Expect(0, 32, '\p{Is_Bidi_Class=otherneutral}', "");
Expect(1, 32, '\p{^Is_Bidi_Class=otherneutral}', "");
Expect(1, 32, '\P{Is_Bidi_Class=otherneutral}', "");
Expect(0, 32, '\P{^Is_Bidi_Class=otherneutral}', "");
Expect(1, 34, '\p{Is_Bidi_Class= 	OtherNeutral}', "");
Expect(0, 34, '\p{^Is_Bidi_Class= 	OtherNeutral}', "");
Expect(0, 34, '\P{Is_Bidi_Class= 	OtherNeutral}', "");
Expect(1, 34, '\P{^Is_Bidi_Class= 	OtherNeutral}', "");
Expect(0, 32, '\p{Is_Bidi_Class= 	OtherNeutral}', "");
Expect(1, 32, '\p{^Is_Bidi_Class= 	OtherNeutral}', "");
Expect(1, 32, '\P{Is_Bidi_Class= 	OtherNeutral}', "");
Expect(0, 32, '\P{^Is_Bidi_Class= 	OtherNeutral}', "");
Error('\p{Is_Bc:/a/-_on}');
Error('\P{Is_Bc:/a/-_on}');
Expect(1, 34, '\p{Is_Bc=on}', "");
Expect(0, 34, '\p{^Is_Bc=on}', "");
Expect(0, 34, '\P{Is_Bc=on}', "");
Expect(1, 34, '\P{^Is_Bc=on}', "");
Expect(0, 32, '\p{Is_Bc=on}', "");
Expect(1, 32, '\p{^Is_Bc=on}', "");
Expect(1, 32, '\P{Is_Bc=on}', "");
Expect(0, 32, '\P{^Is_Bc=on}', "");
Expect(1, 34, '\p{Is_Bc= 	ON}', "");
Expect(0, 34, '\p{^Is_Bc= 	ON}', "");
Expect(0, 34, '\P{Is_Bc= 	ON}', "");
Expect(1, 34, '\P{^Is_Bc= 	ON}', "");
Expect(0, 32, '\p{Is_Bc= 	ON}', "");
Expect(1, 32, '\p{^Is_Bc= 	ON}', "");
Expect(1, 32, '\P{Is_Bc= 	ON}', "");
Expect(0, 32, '\P{^Is_Bc= 	ON}', "");
Error('\p{Bidi_Class=_ BOUNDARY	Neutral:=}');
Error('\P{Bidi_Class=_ BOUNDARY	Neutral:=}');
Expect(1, 8, '\p{Bidi_Class: boundaryneutral}', "");
Expect(0, 8, '\p{^Bidi_Class: boundaryneutral}', "");
Expect(0, 8, '\P{Bidi_Class: boundaryneutral}', "");
Expect(1, 8, '\P{^Bidi_Class: boundaryneutral}', "");
Expect(0, 13, '\p{Bidi_Class: boundaryneutral}', "");
Expect(1, 13, '\p{^Bidi_Class: boundaryneutral}', "");
Expect(1, 13, '\P{Bidi_Class: boundaryneutral}', "");
Expect(0, 13, '\P{^Bidi_Class: boundaryneutral}', "");
Expect(1, 8, '\p{Bidi_Class=_Boundary	neutral}', "");
Expect(0, 8, '\p{^Bidi_Class=_Boundary	neutral}', "");
Expect(0, 8, '\P{Bidi_Class=_Boundary	neutral}', "");
Expect(1, 8, '\P{^Bidi_Class=_Boundary	neutral}', "");
Expect(0, 13, '\p{Bidi_Class=_Boundary	neutral}', "");
Expect(1, 13, '\p{^Bidi_Class=_Boundary	neutral}', "");
Expect(1, 13, '\P{Bidi_Class=_Boundary	neutral}', "");
Expect(0, 13, '\P{^Bidi_Class=_Boundary	neutral}', "");
Error('\p{Bc=/a/_bn}');
Error('\P{Bc=/a/_bn}');
Expect(1, 8, '\p{Bc=bn}', "");
Expect(0, 8, '\p{^Bc=bn}', "");
Expect(0, 8, '\P{Bc=bn}', "");
Expect(1, 8, '\P{^Bc=bn}', "");
Expect(0, 13, '\p{Bc=bn}', "");
Expect(1, 13, '\p{^Bc=bn}', "");
Expect(1, 13, '\P{Bc=bn}', "");
Expect(0, 13, '\P{^Bc=bn}', "");
Expect(1, 8, '\p{Bc=		BN}', "");
Expect(0, 8, '\p{^Bc=		BN}', "");
Expect(0, 8, '\P{Bc=		BN}', "");
Expect(1, 8, '\P{^Bc=		BN}', "");
Expect(0, 13, '\p{Bc=		BN}', "");
Expect(1, 13, '\p{^Bc=		BN}', "");
Expect(1, 13, '\P{Bc=		BN}', "");
Expect(0, 13, '\P{^Bc=		BN}', "");
Error('\p{Is_Bidi_Class:   /a/ _Boundary	NEUTRAL}');
Error('\P{Is_Bidi_Class:   /a/ _Boundary	NEUTRAL}');
Expect(1, 8, '\p{Is_Bidi_Class:	boundaryneutral}', "");
Expect(0, 8, '\p{^Is_Bidi_Class:	boundaryneutral}', "");
Expect(0, 8, '\P{Is_Bidi_Class:	boundaryneutral}', "");
Expect(1, 8, '\P{^Is_Bidi_Class:	boundaryneutral}', "");
Expect(0, 13, '\p{Is_Bidi_Class:	boundaryneutral}', "");
Expect(1, 13, '\p{^Is_Bidi_Class:	boundaryneutral}', "");
Expect(1, 13, '\P{Is_Bidi_Class:	boundaryneutral}', "");
Expect(0, 13, '\P{^Is_Bidi_Class:	boundaryneutral}', "");
Expect(1, 8, '\p{Is_Bidi_Class=-Boundary-Neutral}', "");
Expect(0, 8, '\p{^Is_Bidi_Class=-Boundary-Neutral}', "");
Expect(0, 8, '\P{Is_Bidi_Class=-Boundary-Neutral}', "");
Expect(1, 8, '\P{^Is_Bidi_Class=-Boundary-Neutral}', "");
Expect(0, 13, '\p{Is_Bidi_Class=-Boundary-Neutral}', "");
Expect(1, 13, '\p{^Is_Bidi_Class=-Boundary-Neutral}', "");
Expect(1, 13, '\P{Is_Bidi_Class=-Boundary-Neutral}', "");
Expect(0, 13, '\P{^Is_Bidi_Class=-Boundary-Neutral}', "");
Error('\p{Is_Bc=	BN/a/}');
Error('\P{Is_Bc=	BN/a/}');
Expect(1, 8, '\p{Is_Bc=bn}', "");
Expect(0, 8, '\p{^Is_Bc=bn}', "");
Expect(0, 8, '\P{Is_Bc=bn}', "");
Expect(1, 8, '\P{^Is_Bc=bn}', "");
Expect(0, 13, '\p{Is_Bc=bn}', "");
Expect(1, 13, '\p{^Is_Bc=bn}', "");
Expect(1, 13, '\P{Is_Bc=bn}', "");
Expect(0, 13, '\P{^Is_Bc=bn}', "");
Expect(1, 8, '\p{Is_Bc=__BN}', "");
Expect(0, 8, '\p{^Is_Bc=__BN}', "");
Expect(0, 8, '\P{Is_Bc=__BN}', "");
Expect(1, 8, '\P{^Is_Bc=__BN}', "");
Expect(0, 13, '\p{Is_Bc=__BN}', "");
Expect(1, 13, '\p{^Is_Bc=__BN}', "");
Expect(1, 13, '\P{Is_Bc=__BN}', "");
Expect(0, 13, '\P{^Is_Bc=__BN}', "");
Error('\p{Bidi_Class=-_pop:=directionalFORMAT}');
Error('\P{Bidi_Class=-_pop:=directionalFORMAT}');
Expect(1, 8236, '\p{Bidi_Class=popdirectionalformat}', "");
Expect(0, 8236, '\p{^Bidi_Class=popdirectionalformat}', "");
Expect(0, 8236, '\P{Bidi_Class=popdirectionalformat}', "");
Expect(1, 8236, '\P{^Bidi_Class=popdirectionalformat}', "");
Expect(0, 8235, '\p{Bidi_Class=popdirectionalformat}', "");
Expect(1, 8235, '\p{^Bidi_Class=popdirectionalformat}', "");
Expect(1, 8235, '\P{Bidi_Class=popdirectionalformat}', "");
Expect(0, 8235, '\P{^Bidi_Class=popdirectionalformat}', "");
Expect(1, 8236, '\p{Bidi_Class=	 POP-Directional-Format}', "");
Expect(0, 8236, '\p{^Bidi_Class=	 POP-Directional-Format}', "");
Expect(0, 8236, '\P{Bidi_Class=	 POP-Directional-Format}', "");
Expect(1, 8236, '\P{^Bidi_Class=	 POP-Directional-Format}', "");
Expect(0, 8235, '\p{Bidi_Class=	 POP-Directional-Format}', "");
Expect(1, 8235, '\p{^Bidi_Class=	 POP-Directional-Format}', "");
Expect(1, 8235, '\P{Bidi_Class=	 POP-Directional-Format}', "");
Expect(0, 8235, '\P{^Bidi_Class=	 POP-Directional-Format}', "");
Error('\p{Bc=/a/ PDF}');
Error('\P{Bc=/a/ PDF}');
Expect(1, 8236, '\p{Bc=pdf}', "");
Expect(0, 8236, '\p{^Bc=pdf}', "");
Expect(0, 8236, '\P{Bc=pdf}', "");
Expect(1, 8236, '\P{^Bc=pdf}', "");
Expect(0, 8235, '\p{Bc=pdf}', "");
Expect(1, 8235, '\p{^Bc=pdf}', "");
Expect(1, 8235, '\P{Bc=pdf}', "");
Expect(0, 8235, '\P{^Bc=pdf}', "");
Expect(1, 8236, '\p{Bc:_PDF}', "");
Expect(0, 8236, '\p{^Bc:_PDF}', "");
Expect(0, 8236, '\P{Bc:_PDF}', "");
Expect(1, 8236, '\P{^Bc:_PDF}', "");
Expect(0, 8235, '\p{Bc:_PDF}', "");
Expect(1, 8235, '\p{^Bc:_PDF}', "");
Expect(1, 8235, '\P{Bc:_PDF}', "");
Expect(0, 8235, '\P{^Bc:_PDF}', "");
Error('\p{Is_Bidi_Class=-Popdirectional_FORMAT:=}');
Error('\P{Is_Bidi_Class=-Popdirectional_FORMAT:=}');
Expect(1, 8236, '\p{Is_Bidi_Class:popdirectionalformat}', "");
Expect(0, 8236, '\p{^Is_Bidi_Class:popdirectionalformat}', "");
Expect(0, 8236, '\P{Is_Bidi_Class:popdirectionalformat}', "");
Expect(1, 8236, '\P{^Is_Bidi_Class:popdirectionalformat}', "");
Expect(0, 8235, '\p{Is_Bidi_Class:popdirectionalformat}', "");
Expect(1, 8235, '\p{^Is_Bidi_Class:popdirectionalformat}', "");
Expect(1, 8235, '\P{Is_Bidi_Class:popdirectionalformat}', "");
Expect(0, 8235, '\P{^Is_Bidi_Class:popdirectionalformat}', "");
Expect(1, 8236, '\p{Is_Bidi_Class=		Pop-Directional format}', "");
Expect(0, 8236, '\p{^Is_Bidi_Class=		Pop-Directional format}', "");
Expect(0, 8236, '\P{Is_Bidi_Class=		Pop-Directional format}', "");
Expect(1, 8236, '\P{^Is_Bidi_Class=		Pop-Directional format}', "");
Expect(0, 8235, '\p{Is_Bidi_Class=		Pop-Directional format}', "");
Expect(1, 8235, '\p{^Is_Bidi_Class=		Pop-Directional format}', "");
Expect(1, 8235, '\P{Is_Bidi_Class=		Pop-Directional format}', "");
Expect(0, 8235, '\P{^Is_Bidi_Class=		Pop-Directional format}', "");
Error('\p{Is_Bc=:=PDF}');
Error('\P{Is_Bc=:=PDF}');
Expect(1, 8236, '\p{Is_Bc=pdf}', "");
Expect(0, 8236, '\p{^Is_Bc=pdf}', "");
Expect(0, 8236, '\P{Is_Bc=pdf}', "");
Expect(1, 8236, '\P{^Is_Bc=pdf}', "");
Expect(0, 8235, '\p{Is_Bc=pdf}', "");
Expect(1, 8235, '\p{^Is_Bc=pdf}', "");
Expect(1, 8235, '\P{Is_Bc=pdf}', "");
Expect(0, 8235, '\P{^Is_Bc=pdf}', "");
Expect(1, 8236, '\p{Is_Bc= _PDF}', "");
Expect(0, 8236, '\p{^Is_Bc= _PDF}', "");
Expect(0, 8236, '\P{Is_Bc= _PDF}', "");
Expect(1, 8236, '\P{^Is_Bc= _PDF}', "");
Expect(0, 8235, '\p{Is_Bc= _PDF}', "");
Expect(1, 8235, '\p{^Is_Bc= _PDF}', "");
Expect(1, 8235, '\P{Is_Bc= _PDF}', "");
Expect(0, 8235, '\P{^Is_Bc= _PDF}', "");
Error('\p{Bidi_Class=-Left:=To_Right-EMBEDDING}');
Error('\P{Bidi_Class=-Left:=To_Right-EMBEDDING}');
Expect(1, 8234, '\p{Bidi_Class=lefttorightembedding}', "");
Expect(0, 8234, '\p{^Bidi_Class=lefttorightembedding}', "");
Expect(0, 8234, '\P{Bidi_Class=lefttorightembedding}', "");
Expect(1, 8234, '\P{^Bidi_Class=lefttorightembedding}', "");
Expect(0, 8233, '\p{Bidi_Class=lefttorightembedding}', "");
Expect(1, 8233, '\p{^Bidi_Class=lefttorightembedding}', "");
Expect(1, 8233, '\P{Bidi_Class=lefttorightembedding}', "");
Expect(0, 8233, '\P{^Bidi_Class=lefttorightembedding}', "");
Expect(1, 8234, '\p{Bidi_Class=-	Left	to_RightEMBEDDING}', "");
Expect(0, 8234, '\p{^Bidi_Class=-	Left	to_RightEMBEDDING}', "");
Expect(0, 8234, '\P{Bidi_Class=-	Left	to_RightEMBEDDING}', "");
Expect(1, 8234, '\P{^Bidi_Class=-	Left	to_RightEMBEDDING}', "");
Expect(0, 8233, '\p{Bidi_Class=-	Left	to_RightEMBEDDING}', "");
Expect(1, 8233, '\p{^Bidi_Class=-	Left	to_RightEMBEDDING}', "");
Expect(1, 8233, '\P{Bidi_Class=-	Left	to_RightEMBEDDING}', "");
Expect(0, 8233, '\P{^Bidi_Class=-	Left	to_RightEMBEDDING}', "");
Error('\p{Bc=_/a/LRE}');
Error('\P{Bc=_/a/LRE}');
Expect(1, 8234, '\p{Bc=lre}', "");
Expect(0, 8234, '\p{^Bc=lre}', "");
Expect(0, 8234, '\P{Bc=lre}', "");
Expect(1, 8234, '\P{^Bc=lre}', "");
Expect(0, 8233, '\p{Bc=lre}', "");
Expect(1, 8233, '\p{^Bc=lre}', "");
Expect(1, 8233, '\P{Bc=lre}', "");
Expect(0, 8233, '\P{^Bc=lre}', "");
Expect(1, 8234, '\p{Bc=  LRE}', "");
Expect(0, 8234, '\p{^Bc=  LRE}', "");
Expect(0, 8234, '\P{Bc=  LRE}', "");
Expect(1, 8234, '\P{^Bc=  LRE}', "");
Expect(0, 8233, '\p{Bc=  LRE}', "");
Expect(1, 8233, '\p{^Bc=  LRE}', "");
Expect(1, 8233, '\P{Bc=  LRE}', "");
Expect(0, 8233, '\P{^Bc=  LRE}', "");
Error('\p{Is_Bidi_Class:	_left	To/a/right Embedding}');
Error('\P{Is_Bidi_Class:	_left	To/a/right Embedding}');
Expect(1, 8234, '\p{Is_Bidi_Class=lefttorightembedding}', "");
Expect(0, 8234, '\p{^Is_Bidi_Class=lefttorightembedding}', "");
Expect(0, 8234, '\P{Is_Bidi_Class=lefttorightembedding}', "");
Expect(1, 8234, '\P{^Is_Bidi_Class=lefttorightembedding}', "");
Expect(0, 8233, '\p{Is_Bidi_Class=lefttorightembedding}', "");
Expect(1, 8233, '\p{^Is_Bidi_Class=lefttorightembedding}', "");
Expect(1, 8233, '\P{Is_Bidi_Class=lefttorightembedding}', "");
Expect(0, 8233, '\P{^Is_Bidi_Class=lefttorightembedding}', "");
Expect(1, 8234, '\p{Is_Bidi_Class=__LEFT_to	rightembedding}', "");
Expect(0, 8234, '\p{^Is_Bidi_Class=__LEFT_to	rightembedding}', "");
Expect(0, 8234, '\P{Is_Bidi_Class=__LEFT_to	rightembedding}', "");
Expect(1, 8234, '\P{^Is_Bidi_Class=__LEFT_to	rightembedding}', "");
Expect(0, 8233, '\p{Is_Bidi_Class=__LEFT_to	rightembedding}', "");
Expect(1, 8233, '\p{^Is_Bidi_Class=__LEFT_to	rightembedding}', "");
Expect(1, 8233, '\P{Is_Bidi_Class=__LEFT_to	rightembedding}', "");
Expect(0, 8233, '\P{^Is_Bidi_Class=__LEFT_to	rightembedding}', "");
Error('\p{Is_Bc=-/a/lre}');
Error('\P{Is_Bc=-/a/lre}');
Expect(1, 8234, '\p{Is_Bc=lre}', "");
Expect(0, 8234, '\p{^Is_Bc=lre}', "");
Expect(0, 8234, '\P{Is_Bc=lre}', "");
Expect(1, 8234, '\P{^Is_Bc=lre}', "");
Expect(0, 8233, '\p{Is_Bc=lre}', "");
Expect(1, 8233, '\p{^Is_Bc=lre}', "");
Expect(1, 8233, '\P{Is_Bc=lre}', "");
Expect(0, 8233, '\P{^Is_Bc=lre}', "");
Expect(1, 8234, '\p{Is_Bc= _LRE}', "");
Expect(0, 8234, '\p{^Is_Bc= _LRE}', "");
Expect(0, 8234, '\P{Is_Bc= _LRE}', "");
Expect(1, 8234, '\P{^Is_Bc= _LRE}', "");
Expect(0, 8233, '\p{Is_Bc= _LRE}', "");
Expect(1, 8233, '\p{^Is_Bc= _LRE}', "");
Expect(1, 8233, '\P{Is_Bc= _LRE}', "");
Expect(0, 8233, '\P{^Is_Bc= _LRE}', "");
Error('\p{Bidi_Class= -arabic/a/Letter}');
Error('\P{Bidi_Class= -arabic/a/Letter}');
Expect(1, 1541, '\p{Bidi_Class=arabicletter}', "");
Expect(0, 1541, '\p{^Bidi_Class=arabicletter}', "");
Expect(0, 1541, '\P{Bidi_Class=arabicletter}', "");
Expect(1, 1541, '\P{^Bidi_Class=arabicletter}', "");
Expect(0, 1539, '\p{Bidi_Class=arabicletter}', "");
Expect(1, 1539, '\p{^Bidi_Class=arabicletter}', "");
Expect(1, 1539, '\P{Bidi_Class=arabicletter}', "");
Expect(0, 1539, '\P{^Bidi_Class=arabicletter}', "");
Expect(1, 1541, '\p{Bidi_Class=  arabic	LETTER}', "");
Expect(0, 1541, '\p{^Bidi_Class=  arabic	LETTER}', "");
Expect(0, 1541, '\P{Bidi_Class=  arabic	LETTER}', "");
Expect(1, 1541, '\P{^Bidi_Class=  arabic	LETTER}', "");
Expect(0, 1539, '\p{Bidi_Class=  arabic	LETTER}', "");
Expect(1, 1539, '\p{^Bidi_Class=  arabic	LETTER}', "");
Expect(1, 1539, '\P{Bidi_Class=  arabic	LETTER}', "");
Expect(0, 1539, '\P{^Bidi_Class=  arabic	LETTER}', "");
Error('\p{Bc=/a/-AL}');
Error('\P{Bc=/a/-AL}');
Expect(1, 1541, '\p{Bc=al}', "");
Expect(0, 1541, '\p{^Bc=al}', "");
Expect(0, 1541, '\P{Bc=al}', "");
Expect(1, 1541, '\P{^Bc=al}', "");
Expect(0, 1539, '\p{Bc=al}', "");
Expect(1, 1539, '\p{^Bc=al}', "");
Expect(1, 1539, '\P{Bc=al}', "");
Expect(0, 1539, '\P{^Bc=al}', "");
Expect(1, 1541, '\p{Bc=--AL}', "");
Expect(0, 1541, '\p{^Bc=--AL}', "");
Expect(0, 1541, '\P{Bc=--AL}', "");
Expect(1, 1541, '\P{^Bc=--AL}', "");
Expect(0, 1539, '\p{Bc=--AL}', "");
Expect(1, 1539, '\p{^Bc=--AL}', "");
Expect(1, 1539, '\P{Bc=--AL}', "");
Expect(0, 1539, '\P{^Bc=--AL}', "");
Error('\p{Is_Bidi_Class=-_Arabic Letter/a/}');
Error('\P{Is_Bidi_Class=-_Arabic Letter/a/}');
Expect(1, 1541, '\p{Is_Bidi_Class=arabicletter}', "");
Expect(0, 1541, '\p{^Is_Bidi_Class=arabicletter}', "");
Expect(0, 1541, '\P{Is_Bidi_Class=arabicletter}', "");
Expect(1, 1541, '\P{^Is_Bidi_Class=arabicletter}', "");
Expect(0, 1539, '\p{Is_Bidi_Class=arabicletter}', "");
Expect(1, 1539, '\p{^Is_Bidi_Class=arabicletter}', "");
Expect(1, 1539, '\P{Is_Bidi_Class=arabicletter}', "");
Expect(0, 1539, '\P{^Is_Bidi_Class=arabicletter}', "");
Expect(1, 1541, '\p{Is_Bidi_Class=  Arabic letter}', "");
Expect(0, 1541, '\p{^Is_Bidi_Class=  Arabic letter}', "");
Expect(0, 1541, '\P{Is_Bidi_Class=  Arabic letter}', "");
Expect(1, 1541, '\P{^Is_Bidi_Class=  Arabic letter}', "");
Expect(0, 1539, '\p{Is_Bidi_Class=  Arabic letter}', "");
Expect(1, 1539, '\p{^Is_Bidi_Class=  Arabic letter}', "");
Expect(1, 1539, '\P{Is_Bidi_Class=  Arabic letter}', "");
Expect(0, 1539, '\P{^Is_Bidi_Class=  Arabic letter}', "");
Error('\p{Is_Bc=	al:=}');
Error('\P{Is_Bc=	al:=}');
Expect(1, 1541, '\p{Is_Bc=al}', "");
Expect(0, 1541, '\p{^Is_Bc=al}', "");
Expect(0, 1541, '\P{Is_Bc=al}', "");
Expect(1, 1541, '\P{^Is_Bc=al}', "");
Expect(0, 1539, '\p{Is_Bc=al}', "");
Expect(1, 1539, '\p{^Is_Bc=al}', "");
Expect(1, 1539, '\P{Is_Bc=al}', "");
Expect(0, 1539, '\P{^Is_Bc=al}', "");
Expect(1, 1541, '\p{Is_Bc=  AL}', "");
Expect(0, 1541, '\p{^Is_Bc=  AL}', "");
Expect(0, 1541, '\P{Is_Bc=  AL}', "");
Expect(1, 1541, '\P{^Is_Bc=  AL}', "");
Expect(0, 1539, '\p{Is_Bc=  AL}', "");
Expect(1, 1539, '\p{^Is_Bc=  AL}', "");
Expect(1, 1539, '\P{Is_Bc=  AL}', "");
Expect(0, 1539, '\P{^Is_Bc=  AL}', "");
Error('\p{Bidi_Class=	Common/a/Separator}');
Error('\P{Bidi_Class=	Common/a/Separator}');
Expect(1, 44, '\p{Bidi_Class=commonseparator}', "");
Expect(0, 44, '\p{^Bidi_Class=commonseparator}', "");
Expect(0, 44, '\P{Bidi_Class=commonseparator}', "");
Expect(1, 44, '\P{^Bidi_Class=commonseparator}', "");
Expect(0, 43, '\p{Bidi_Class=commonseparator}', "");
Expect(1, 43, '\p{^Bidi_Class=commonseparator}', "");
Expect(1, 43, '\P{Bidi_Class=commonseparator}', "");
Expect(0, 43, '\P{^Bidi_Class=commonseparator}', "");
Expect(1, 44, '\p{Bidi_Class=  common-SEPARATOR}', "");
Expect(0, 44, '\p{^Bidi_Class=  common-SEPARATOR}', "");
Expect(0, 44, '\P{Bidi_Class=  common-SEPARATOR}', "");
Expect(1, 44, '\P{^Bidi_Class=  common-SEPARATOR}', "");
Expect(0, 43, '\p{Bidi_Class=  common-SEPARATOR}', "");
Expect(1, 43, '\p{^Bidi_Class=  common-SEPARATOR}', "");
Expect(1, 43, '\P{Bidi_Class=  common-SEPARATOR}', "");
Expect(0, 43, '\P{^Bidi_Class=  common-SEPARATOR}', "");
Error('\p{Bc=/a/ -CS}');
Error('\P{Bc=/a/ -CS}');
Expect(1, 44, '\p{Bc=cs}', "");
Expect(0, 44, '\p{^Bc=cs}', "");
Expect(0, 44, '\P{Bc=cs}', "");
Expect(1, 44, '\P{^Bc=cs}', "");
Expect(0, 43, '\p{Bc=cs}', "");
Expect(1, 43, '\p{^Bc=cs}', "");
Expect(1, 43, '\P{Bc=cs}', "");
Expect(0, 43, '\P{^Bc=cs}', "");
Expect(1, 44, '\p{Bc= cs}', "");
Expect(0, 44, '\p{^Bc= cs}', "");
Expect(0, 44, '\P{Bc= cs}', "");
Expect(1, 44, '\P{^Bc= cs}', "");
Expect(0, 43, '\p{Bc= cs}', "");
Expect(1, 43, '\p{^Bc= cs}', "");
Expect(1, 43, '\P{Bc= cs}', "");
Expect(0, 43, '\P{^Bc= cs}', "");
Error('\p{Is_Bidi_Class=:=		CommonSEPARATOR}');
Error('\P{Is_Bidi_Class=:=		CommonSEPARATOR}');
Expect(1, 44, '\p{Is_Bidi_Class=commonseparator}', "");
Expect(0, 44, '\p{^Is_Bidi_Class=commonseparator}', "");
Expect(0, 44, '\P{Is_Bidi_Class=commonseparator}', "");
Expect(1, 44, '\P{^Is_Bidi_Class=commonseparator}', "");
Expect(0, 43, '\p{Is_Bidi_Class=commonseparator}', "");
Expect(1, 43, '\p{^Is_Bidi_Class=commonseparator}', "");
Expect(1, 43, '\P{Is_Bidi_Class=commonseparator}', "");
Expect(0, 43, '\P{^Is_Bidi_Class=commonseparator}', "");
Expect(1, 44, '\p{Is_Bidi_Class= Common_Separator}', "");
Expect(0, 44, '\p{^Is_Bidi_Class= Common_Separator}', "");
Expect(0, 44, '\P{Is_Bidi_Class= Common_Separator}', "");
Expect(1, 44, '\P{^Is_Bidi_Class= Common_Separator}', "");
Expect(0, 43, '\p{Is_Bidi_Class= Common_Separator}', "");
Expect(1, 43, '\p{^Is_Bidi_Class= Common_Separator}', "");
Expect(1, 43, '\P{Is_Bidi_Class= Common_Separator}', "");
Expect(0, 43, '\P{^Is_Bidi_Class= Common_Separator}', "");
Error('\p{Is_Bc= /a/CS}');
Error('\P{Is_Bc= /a/CS}');
Expect(1, 44, '\p{Is_Bc=cs}', "");
Expect(0, 44, '\p{^Is_Bc=cs}', "");
Expect(0, 44, '\P{Is_Bc=cs}', "");
Expect(1, 44, '\P{^Is_Bc=cs}', "");
Expect(0, 43, '\p{Is_Bc=cs}', "");
Expect(1, 43, '\p{^Is_Bc=cs}', "");
Expect(1, 43, '\P{Is_Bc=cs}', "");
Expect(0, 43, '\P{^Is_Bc=cs}', "");
Expect(1, 44, '\p{Is_Bc=	 CS}', "");
Expect(0, 44, '\p{^Is_Bc=	 CS}', "");
Expect(0, 44, '\P{Is_Bc=	 CS}', "");
Expect(1, 44, '\P{^Is_Bc=	 CS}', "");
Expect(0, 43, '\p{Is_Bc=	 CS}', "");
Expect(1, 43, '\p{^Is_Bc=	 CS}', "");
Expect(1, 43, '\P{Is_Bc=	 CS}', "");
Expect(0, 43, '\P{^Is_Bc=	 CS}', "");
Error('\p{Bidi_Class=_-WhiteSpace/a/}');
Error('\P{Bidi_Class=_-WhiteSpace/a/}');
Expect(1, 12, '\p{Bidi_Class=whitespace}', "");
Expect(0, 12, '\p{^Bidi_Class=whitespace}', "");
Expect(0, 12, '\P{Bidi_Class=whitespace}', "");
Expect(1, 12, '\P{^Bidi_Class=whitespace}', "");
Expect(0, 11, '\p{Bidi_Class=whitespace}', "");
Expect(1, 11, '\p{^Bidi_Class=whitespace}', "");
Expect(1, 11, '\P{Bidi_Class=whitespace}', "");
Expect(0, 11, '\P{^Bidi_Class=whitespace}', "");
Expect(1, 12, '\p{Bidi_Class=_-White	Space}', "");
Expect(0, 12, '\p{^Bidi_Class=_-White	Space}', "");
Expect(0, 12, '\P{Bidi_Class=_-White	Space}', "");
Expect(1, 12, '\P{^Bidi_Class=_-White	Space}', "");
Expect(0, 11, '\p{Bidi_Class=_-White	Space}', "");
Expect(1, 11, '\p{^Bidi_Class=_-White	Space}', "");
Expect(1, 11, '\P{Bidi_Class=_-White	Space}', "");
Expect(0, 11, '\P{^Bidi_Class=_-White	Space}', "");
Error('\p{Bc= _WS/a/}');
Error('\P{Bc= _WS/a/}');
Expect(1, 12, '\p{Bc=ws}', "");
Expect(0, 12, '\p{^Bc=ws}', "");
Expect(0, 12, '\P{Bc=ws}', "");
Expect(1, 12, '\P{^Bc=ws}', "");
Expect(0, 11, '\p{Bc=ws}', "");
Expect(1, 11, '\p{^Bc=ws}', "");
Expect(1, 11, '\P{Bc=ws}', "");
Expect(0, 11, '\P{^Bc=ws}', "");
Expect(1, 12, '\p{Bc=-ws}', "");
Expect(0, 12, '\p{^Bc=-ws}', "");
Expect(0, 12, '\P{Bc=-ws}', "");
Expect(1, 12, '\P{^Bc=-ws}', "");
Expect(0, 11, '\p{Bc=-ws}', "");
Expect(1, 11, '\p{^Bc=-ws}', "");
Expect(1, 11, '\P{Bc=-ws}', "");
Expect(0, 11, '\P{^Bc=-ws}', "");
Error('\p{Is_Bidi_Class=:=  White Space}');
Error('\P{Is_Bidi_Class=:=  White Space}');
Expect(1, 12, '\p{Is_Bidi_Class:whitespace}', "");
Expect(0, 12, '\p{^Is_Bidi_Class:whitespace}', "");
Expect(0, 12, '\P{Is_Bidi_Class:whitespace}', "");
Expect(1, 12, '\P{^Is_Bidi_Class:whitespace}', "");
Expect(0, 11, '\p{Is_Bidi_Class:whitespace}', "");
Expect(1, 11, '\p{^Is_Bidi_Class:whitespace}', "");
Expect(1, 11, '\P{Is_Bidi_Class:whitespace}', "");
Expect(0, 11, '\P{^Is_Bidi_Class:whitespace}', "");
Expect(1, 12, '\p{Is_Bidi_Class=-White-Space}', "");
Expect(0, 12, '\p{^Is_Bidi_Class=-White-Space}', "");
Expect(0, 12, '\P{Is_Bidi_Class=-White-Space}', "");
Expect(1, 12, '\P{^Is_Bidi_Class=-White-Space}', "");
Expect(0, 11, '\p{Is_Bidi_Class=-White-Space}', "");
Expect(1, 11, '\p{^Is_Bidi_Class=-White-Space}', "");
Expect(1, 11, '\P{Is_Bidi_Class=-White-Space}', "");
Expect(0, 11, '\P{^Is_Bidi_Class=-White-Space}', "");
Error('\p{Is_Bc=-:=WS}');
Error('\P{Is_Bc=-:=WS}');
Expect(1, 12, '\p{Is_Bc=ws}', "");
Expect(0, 12, '\p{^Is_Bc=ws}', "");
Expect(0, 12, '\P{Is_Bc=ws}', "");
Expect(1, 12, '\P{^Is_Bc=ws}', "");
Expect(0, 11, '\p{Is_Bc=ws}', "");
Expect(1, 11, '\p{^Is_Bc=ws}', "");
Expect(1, 11, '\P{Is_Bc=ws}', "");
Expect(0, 11, '\P{^Is_Bc=ws}', "");
Expect(1, 12, '\p{Is_Bc=	ws}', "");
Expect(0, 12, '\p{^Is_Bc=	ws}', "");
Expect(0, 12, '\P{Is_Bc=	ws}', "");
Expect(1, 12, '\P{^Is_Bc=	ws}', "");
Expect(0, 11, '\p{Is_Bc=	ws}', "");
Expect(1, 11, '\p{^Is_Bc=	ws}', "");
Expect(1, 11, '\P{Is_Bc=	ws}', "");
Expect(0, 11, '\P{^Is_Bc=	ws}', "");
Error('\p{Bidi_Class: :=PARAGRAPH_separator}');
Error('\P{Bidi_Class: :=PARAGRAPH_separator}');
Expect(1, 10, '\p{Bidi_Class=paragraphseparator}', "");
Expect(0, 10, '\p{^Bidi_Class=paragraphseparator}', "");
Expect(0, 10, '\P{Bidi_Class=paragraphseparator}', "");
Expect(1, 10, '\P{^Bidi_Class=paragraphseparator}', "");
Expect(0, 9, '\p{Bidi_Class=paragraphseparator}', "");
Expect(1, 9, '\p{^Bidi_Class=paragraphseparator}', "");
Expect(1, 9, '\P{Bidi_Class=paragraphseparator}', "");
Expect(0, 9, '\P{^Bidi_Class=paragraphseparator}', "");
Expect(1, 10, '\p{Bidi_Class= _Paragraph SEPARATOR}', "");
Expect(0, 10, '\p{^Bidi_Class= _Paragraph SEPARATOR}', "");
Expect(0, 10, '\P{Bidi_Class= _Paragraph SEPARATOR}', "");
Expect(1, 10, '\P{^Bidi_Class= _Paragraph SEPARATOR}', "");
Expect(0, 9, '\p{Bidi_Class= _Paragraph SEPARATOR}', "");
Expect(1, 9, '\p{^Bidi_Class= _Paragraph SEPARATOR}', "");
Expect(1, 9, '\P{Bidi_Class= _Paragraph SEPARATOR}', "");
Expect(0, 9, '\P{^Bidi_Class= _Paragraph SEPARATOR}', "");
Error('\p{Bc=	B/a/}');
Error('\P{Bc=	B/a/}');
Expect(1, 10, '\p{Bc=b}', "");
Expect(0, 10, '\p{^Bc=b}', "");
Expect(0, 10, '\P{Bc=b}', "");
Expect(1, 10, '\P{^Bc=b}', "");
Expect(0, 9, '\p{Bc=b}', "");
Expect(1, 9, '\p{^Bc=b}', "");
Expect(1, 9, '\P{Bc=b}', "");
Expect(0, 9, '\P{^Bc=b}', "");
Expect(1, 10, '\p{Bc=		B}', "");
Expect(0, 10, '\p{^Bc=		B}', "");
Expect(0, 10, '\P{Bc=		B}', "");
Expect(1, 10, '\P{^Bc=		B}', "");
Expect(0, 9, '\p{Bc=		B}', "");
Expect(1, 9, '\p{^Bc=		B}', "");
Expect(1, 9, '\P{Bc=		B}', "");
Expect(0, 9, '\P{^Bc=		B}', "");
Error('\p{Is_Bidi_Class=/a/ 	ParagraphSEPARATOR}');
Error('\P{Is_Bidi_Class=/a/ 	ParagraphSEPARATOR}');
Expect(1, 10, '\p{Is_Bidi_Class=paragraphseparator}', "");
Expect(0, 10, '\p{^Is_Bidi_Class=paragraphseparator}', "");
Expect(0, 10, '\P{Is_Bidi_Class=paragraphseparator}', "");
Expect(1, 10, '\P{^Is_Bidi_Class=paragraphseparator}', "");
Expect(0, 9, '\p{Is_Bidi_Class=paragraphseparator}', "");
Expect(1, 9, '\p{^Is_Bidi_Class=paragraphseparator}', "");
Expect(1, 9, '\P{Is_Bidi_Class=paragraphseparator}', "");
Expect(0, 9, '\P{^Is_Bidi_Class=paragraphseparator}', "");
Expect(1, 10, '\p{Is_Bidi_Class:     Paragraph-separator}', "");
Expect(0, 10, '\p{^Is_Bidi_Class:     Paragraph-separator}', "");
Expect(0, 10, '\P{Is_Bidi_Class:     Paragraph-separator}', "");
Expect(1, 10, '\P{^Is_Bidi_Class:     Paragraph-separator}', "");
Expect(0, 9, '\p{Is_Bidi_Class:     Paragraph-separator}', "");
Expect(1, 9, '\p{^Is_Bidi_Class:     Paragraph-separator}', "");
Expect(1, 9, '\P{Is_Bidi_Class:     Paragraph-separator}', "");
Expect(0, 9, '\P{^Is_Bidi_Class:     Paragraph-separator}', "");
Error('\p{Is_Bc=- b:=}');
Error('\P{Is_Bc=- b:=}');
Expect(1, 10, '\p{Is_Bc=b}', "");
Expect(0, 10, '\p{^Is_Bc=b}', "");
Expect(0, 10, '\P{Is_Bc=b}', "");
Expect(1, 10, '\P{^Is_Bc=b}', "");
Expect(0, 9, '\p{Is_Bc=b}', "");
Expect(1, 9, '\p{^Is_Bc=b}', "");
Expect(1, 9, '\P{Is_Bc=b}', "");
Expect(0, 9, '\P{^Is_Bc=b}', "");
Expect(1, 10, '\p{Is_Bc=__b}', "");
Expect(0, 10, '\p{^Is_Bc=__b}', "");
Expect(0, 10, '\P{Is_Bc=__b}', "");
Expect(1, 10, '\P{^Is_Bc=__b}', "");
Expect(0, 9, '\p{Is_Bc=__b}', "");
Expect(1, 9, '\p{^Is_Bc=__b}', "");
Expect(1, 9, '\P{Is_Bc=__b}', "");
Expect(0, 9, '\P{^Is_Bc=__b}', "");
Error('\p{Bidi_Class=-Nonspacing_MARK/a/}');
Error('\P{Bidi_Class=-Nonspacing_MARK/a/}');
Expect(1, 879, '\p{Bidi_Class=nonspacingmark}', "");
Expect(0, 879, '\p{^Bidi_Class=nonspacingmark}', "");
Expect(0, 879, '\P{Bidi_Class=nonspacingmark}', "");
Expect(1, 879, '\P{^Bidi_Class=nonspacingmark}', "");
Expect(0, 767, '\p{Bidi_Class=nonspacingmark}', "");
Expect(1, 767, '\p{^Bidi_Class=nonspacingmark}', "");
Expect(1, 767, '\P{Bidi_Class=nonspacingmark}', "");
Expect(0, 767, '\P{^Bidi_Class=nonspacingmark}', "");
Expect(1, 879, '\p{Bidi_Class= 	NONSPACING	MARK}', "");
Expect(0, 879, '\p{^Bidi_Class= 	NONSPACING	MARK}', "");
Expect(0, 879, '\P{Bidi_Class= 	NONSPACING	MARK}', "");
Expect(1, 879, '\P{^Bidi_Class= 	NONSPACING	MARK}', "");
Expect(0, 767, '\p{Bidi_Class= 	NONSPACING	MARK}', "");
Expect(1, 767, '\p{^Bidi_Class= 	NONSPACING	MARK}', "");
Expect(1, 767, '\P{Bidi_Class= 	NONSPACING	MARK}', "");
Expect(0, 767, '\P{^Bidi_Class= 	NONSPACING	MARK}', "");
Error('\p{Bc=-_NSM:=}');
Error('\P{Bc=-_NSM:=}');
Expect(1, 879, '\p{Bc=nsm}', "");
Expect(0, 879, '\p{^Bc=nsm}', "");
Expect(0, 879, '\P{Bc=nsm}', "");
Expect(1, 879, '\P{^Bc=nsm}', "");
Expect(0, 767, '\p{Bc=nsm}', "");
Expect(1, 767, '\p{^Bc=nsm}', "");
Expect(1, 767, '\P{Bc=nsm}', "");
Expect(0, 767, '\P{^Bc=nsm}', "");
Expect(1, 879, '\p{Bc= _NSM}', "");
Expect(0, 879, '\p{^Bc= _NSM}', "");
Expect(0, 879, '\P{Bc= _NSM}', "");
Expect(1, 879, '\P{^Bc= _NSM}', "");
Expect(0, 767, '\p{Bc= _NSM}', "");
Expect(1, 767, '\p{^Bc= _NSM}', "");
Expect(1, 767, '\P{Bc= _NSM}', "");
Expect(0, 767, '\P{^Bc= _NSM}', "");
Error('\p{Is_Bidi_Class=-_Nonspacing:=Mark}');
Error('\P{Is_Bidi_Class=-_Nonspacing:=Mark}');
Expect(1, 879, '\p{Is_Bidi_Class=nonspacingmark}', "");
Expect(0, 879, '\p{^Is_Bidi_Class=nonspacingmark}', "");
Expect(0, 879, '\P{Is_Bidi_Class=nonspacingmark}', "");
Expect(1, 879, '\P{^Is_Bidi_Class=nonspacingmark}', "");
Expect(0, 767, '\p{Is_Bidi_Class=nonspacingmark}', "");
Expect(1, 767, '\p{^Is_Bidi_Class=nonspacingmark}', "");
Expect(1, 767, '\P{Is_Bidi_Class=nonspacingmark}', "");
Expect(0, 767, '\P{^Is_Bidi_Class=nonspacingmark}', "");
Expect(1, 879, '\p{Is_Bidi_Class=__NONSPACINGmark}', "");
Expect(0, 879, '\p{^Is_Bidi_Class=__NONSPACINGmark}', "");
Expect(0, 879, '\P{Is_Bidi_Class=__NONSPACINGmark}', "");
Expect(1, 879, '\P{^Is_Bidi_Class=__NONSPACINGmark}', "");
Expect(0, 767, '\p{Is_Bidi_Class=__NONSPACINGmark}', "");
Expect(1, 767, '\p{^Is_Bidi_Class=__NONSPACINGmark}', "");
Expect(1, 767, '\P{Is_Bidi_Class=__NONSPACINGmark}', "");
Expect(0, 767, '\P{^Is_Bidi_Class=__NONSPACINGmark}', "");
Error('\p{Is_Bc: 	:=NSM}');
Error('\P{Is_Bc: 	:=NSM}');
Expect(1, 879, '\p{Is_Bc=nsm}', "");
Expect(0, 879, '\p{^Is_Bc=nsm}', "");
Expect(0, 879, '\P{Is_Bc=nsm}', "");
Expect(1, 879, '\P{^Is_Bc=nsm}', "");
Expect(0, 767, '\p{Is_Bc=nsm}', "");
Expect(1, 767, '\p{^Is_Bc=nsm}', "");
Expect(1, 767, '\P{Is_Bc=nsm}', "");
Expect(0, 767, '\P{^Is_Bc=nsm}', "");
Expect(1, 879, '\p{Is_Bc=_NSM}', "");
Expect(0, 879, '\p{^Is_Bc=_NSM}', "");
Expect(0, 879, '\P{Is_Bc=_NSM}', "");
Expect(1, 879, '\P{^Is_Bc=_NSM}', "");
Expect(0, 767, '\p{Is_Bc=_NSM}', "");
Expect(1, 767, '\p{^Is_Bc=_NSM}', "");
Expect(1, 767, '\P{Is_Bc=_NSM}', "");
Expect(0, 767, '\P{^Is_Bc=_NSM}', "");
Error('\p{Bidi_Class=/a/_european Separator}');
Error('\P{Bidi_Class=/a/_european Separator}');
Expect(1, 43, '\p{Bidi_Class=europeanseparator}', "");
Expect(0, 43, '\p{^Bidi_Class=europeanseparator}', "");
Expect(0, 43, '\P{Bidi_Class=europeanseparator}', "");
Expect(1, 43, '\P{^Bidi_Class=europeanseparator}', "");
Expect(0, 42, '\p{Bidi_Class=europeanseparator}', "");
Expect(1, 42, '\p{^Bidi_Class=europeanseparator}', "");
Expect(1, 42, '\P{Bidi_Class=europeanseparator}', "");
Expect(0, 42, '\P{^Bidi_Class=europeanseparator}', "");
Expect(1, 43, '\p{Bidi_Class= -European-Separator}', "");
Expect(0, 43, '\p{^Bidi_Class= -European-Separator}', "");
Expect(0, 43, '\P{Bidi_Class= -European-Separator}', "");
Expect(1, 43, '\P{^Bidi_Class= -European-Separator}', "");
Expect(0, 42, '\p{Bidi_Class= -European-Separator}', "");
Expect(1, 42, '\p{^Bidi_Class= -European-Separator}', "");
Expect(1, 42, '\P{Bidi_Class= -European-Separator}', "");
Expect(0, 42, '\P{^Bidi_Class= -European-Separator}', "");
Error('\p{Bc=-	ES/a/}');
Error('\P{Bc=-	ES/a/}');
Expect(1, 43, '\p{Bc=es}', "");
Expect(0, 43, '\p{^Bc=es}', "");
Expect(0, 43, '\P{Bc=es}', "");
Expect(1, 43, '\P{^Bc=es}', "");
Expect(0, 42, '\p{Bc=es}', "");
Expect(1, 42, '\p{^Bc=es}', "");
Expect(1, 42, '\P{Bc=es}', "");
Expect(0, 42, '\P{^Bc=es}', "");
Expect(1, 43, '\p{Bc= ES}', "");
Expect(0, 43, '\p{^Bc= ES}', "");
Expect(0, 43, '\P{Bc= ES}', "");
Expect(1, 43, '\P{^Bc= ES}', "");
Expect(0, 42, '\p{Bc= ES}', "");
Expect(1, 42, '\p{^Bc= ES}', "");
Expect(1, 42, '\P{Bc= ES}', "");
Expect(0, 42, '\P{^Bc= ES}', "");
Error('\p{Is_Bidi_Class:/a/-_EUROPEAN	Separator}');
Error('\P{Is_Bidi_Class:/a/-_EUROPEAN	Separator}');
Expect(1, 43, '\p{Is_Bidi_Class: europeanseparator}', "");
Expect(0, 43, '\p{^Is_Bidi_Class: europeanseparator}', "");
Expect(0, 43, '\P{Is_Bidi_Class: europeanseparator}', "");
Expect(1, 43, '\P{^Is_Bidi_Class: europeanseparator}', "");
Expect(0, 42, '\p{Is_Bidi_Class: europeanseparator}', "");
Expect(1, 42, '\p{^Is_Bidi_Class: europeanseparator}', "");
Expect(1, 42, '\P{Is_Bidi_Class: europeanseparator}', "");
Expect(0, 42, '\P{^Is_Bidi_Class: europeanseparator}', "");
Expect(1, 43, '\p{Is_Bidi_Class=		european separator}', "");
Expect(0, 43, '\p{^Is_Bidi_Class=		european separator}', "");
Expect(0, 43, '\P{Is_Bidi_Class=		european separator}', "");
Expect(1, 43, '\P{^Is_Bidi_Class=		european separator}', "");
Expect(0, 42, '\p{Is_Bidi_Class=		european separator}', "");
Expect(1, 42, '\p{^Is_Bidi_Class=		european separator}', "");
Expect(1, 42, '\P{Is_Bidi_Class=		european separator}', "");
Expect(0, 42, '\P{^Is_Bidi_Class=		european separator}', "");
Error('\p{Is_Bc: /a/ ES}');
Error('\P{Is_Bc: /a/ ES}');
Expect(1, 43, '\p{Is_Bc=es}', "");
Expect(0, 43, '\p{^Is_Bc=es}', "");
Expect(0, 43, '\P{Is_Bc=es}', "");
Expect(1, 43, '\P{^Is_Bc=es}', "");
Expect(0, 42, '\p{Is_Bc=es}', "");
Expect(1, 42, '\p{^Is_Bc=es}', "");
Expect(1, 42, '\P{Is_Bc=es}', "");
Expect(0, 42, '\P{^Is_Bc=es}', "");
Expect(1, 43, '\p{Is_Bc=- ES}', "");
Expect(0, 43, '\p{^Is_Bc=- ES}', "");
Expect(0, 43, '\P{Is_Bc=- ES}', "");
Expect(1, 43, '\P{^Is_Bc=- ES}', "");
Expect(0, 42, '\p{Is_Bc=- ES}', "");
Expect(1, 42, '\p{^Is_Bc=- ES}', "");
Expect(1, 42, '\P{Is_Bc=- ES}', "");
Expect(0, 42, '\P{^Is_Bc=- ES}', "");
Error('\p{Bidi_Class=	/a/EUROPEAN	Number}');
Error('\P{Bidi_Class=	/a/EUROPEAN	Number}');
Expect(1, 57, '\p{Bidi_Class: europeannumber}', "");
Expect(0, 57, '\p{^Bidi_Class: europeannumber}', "");
Expect(0, 57, '\P{Bidi_Class: europeannumber}', "");
Expect(1, 57, '\P{^Bidi_Class: europeannumber}', "");
Expect(0, 47, '\p{Bidi_Class: europeannumber}', "");
Expect(1, 47, '\p{^Bidi_Class: europeannumber}', "");
Expect(1, 47, '\P{Bidi_Class: europeannumber}', "");
Expect(0, 47, '\P{^Bidi_Class: europeannumber}', "");
Expect(1, 57, '\p{Bidi_Class=--european_NUMBER}', "");
Expect(0, 57, '\p{^Bidi_Class=--european_NUMBER}', "");
Expect(0, 57, '\P{Bidi_Class=--european_NUMBER}', "");
Expect(1, 57, '\P{^Bidi_Class=--european_NUMBER}', "");
Expect(0, 47, '\p{Bidi_Class=--european_NUMBER}', "");
Expect(1, 47, '\p{^Bidi_Class=--european_NUMBER}', "");
Expect(1, 47, '\P{Bidi_Class=--european_NUMBER}', "");
Expect(0, 47, '\P{^Bidi_Class=--european_NUMBER}', "");
Error('\p{Bc=_-EN/a/}');
Error('\P{Bc=_-EN/a/}');
Expect(1, 57, '\p{Bc=en}', "");
Expect(0, 57, '\p{^Bc=en}', "");
Expect(0, 57, '\P{Bc=en}', "");
Expect(1, 57, '\P{^Bc=en}', "");
Expect(0, 47, '\p{Bc=en}', "");
Expect(1, 47, '\p{^Bc=en}', "");
Expect(1, 47, '\P{Bc=en}', "");
Expect(0, 47, '\P{^Bc=en}', "");
Expect(1, 57, '\p{Bc:	 _EN}', "");
Expect(0, 57, '\p{^Bc:	 _EN}', "");
Expect(0, 57, '\P{Bc:	 _EN}', "");
Expect(1, 57, '\P{^Bc:	 _EN}', "");
Expect(0, 47, '\p{Bc:	 _EN}', "");
Expect(1, 47, '\p{^Bc:	 _EN}', "");
Expect(1, 47, '\P{Bc:	 _EN}', "");
Expect(0, 47, '\P{^Bc:	 _EN}', "");
Error('\p{Is_Bidi_Class=:= 	EUROPEAN number}');
Error('\P{Is_Bidi_Class=:= 	EUROPEAN number}');
Expect(1, 57, '\p{Is_Bidi_Class:europeannumber}', "");
Expect(0, 57, '\p{^Is_Bidi_Class:europeannumber}', "");
Expect(0, 57, '\P{Is_Bidi_Class:europeannumber}', "");
Expect(1, 57, '\P{^Is_Bidi_Class:europeannumber}', "");
Expect(0, 47, '\p{Is_Bidi_Class:europeannumber}', "");
Expect(1, 47, '\p{^Is_Bidi_Class:europeannumber}', "");
Expect(1, 47, '\P{Is_Bidi_Class:europeannumber}', "");
Expect(0, 47, '\P{^Is_Bidi_Class:europeannumber}', "");
Expect(1, 57, '\p{Is_Bidi_Class= -european	number}', "");
Expect(0, 57, '\p{^Is_Bidi_Class= -european	number}', "");
Expect(0, 57, '\P{Is_Bidi_Class= -european	number}', "");
Expect(1, 57, '\P{^Is_Bidi_Class= -european	number}', "");
Expect(0, 47, '\p{Is_Bidi_Class= -european	number}', "");
Expect(1, 47, '\p{^Is_Bidi_Class= -european	number}', "");
Expect(1, 47, '\P{Is_Bidi_Class= -european	number}', "");
Expect(0, 47, '\P{^Is_Bidi_Class= -european	number}', "");
Error('\p{Is_Bc=_ EN:=}');
Error('\P{Is_Bc=_ EN:=}');
Expect(1, 57, '\p{Is_Bc=en}', "");
Expect(0, 57, '\p{^Is_Bc=en}', "");
Expect(0, 57, '\P{Is_Bc=en}', "");
Expect(1, 57, '\P{^Is_Bc=en}', "");
Expect(0, 47, '\p{Is_Bc=en}', "");
Expect(1, 47, '\p{^Is_Bc=en}', "");
Expect(1, 47, '\P{Is_Bc=en}', "");
Expect(0, 47, '\P{^Is_Bc=en}', "");
Expect(1, 57, '\p{Is_Bc= -EN}', "");
Expect(0, 57, '\p{^Is_Bc= -EN}', "");
Expect(0, 57, '\P{Is_Bc= -EN}', "");
Expect(1, 57, '\P{^Is_Bc= -EN}', "");
Expect(0, 47, '\p{Is_Bc= -EN}', "");
Expect(1, 47, '\p{^Is_Bc= -EN}', "");
Expect(1, 47, '\P{Is_Bc= -EN}', "");
Expect(0, 47, '\P{^Is_Bc= -EN}', "");
Error('\p{Bidi_Class=	:=European_Terminator}');
Error('\P{Bidi_Class=	:=European_Terminator}');
Expect(1, 37, '\p{Bidi_Class=europeanterminator}', "");
Expect(0, 37, '\p{^Bidi_Class=europeanterminator}', "");
Expect(0, 37, '\P{Bidi_Class=europeanterminator}', "");
Expect(1, 37, '\P{^Bidi_Class=europeanterminator}', "");
Expect(0, 34, '\p{Bidi_Class=europeanterminator}', "");
Expect(1, 34, '\p{^Bidi_Class=europeanterminator}', "");
Expect(1, 34, '\P{Bidi_Class=europeanterminator}', "");
Expect(0, 34, '\P{^Bidi_Class=europeanterminator}', "");
Expect(1, 37, '\p{Bidi_Class= EUROPEAN Terminator}', "");
Expect(0, 37, '\p{^Bidi_Class= EUROPEAN Terminator}', "");
Expect(0, 37, '\P{Bidi_Class= EUROPEAN Terminator}', "");
Expect(1, 37, '\P{^Bidi_Class= EUROPEAN Terminator}', "");
Expect(0, 34, '\p{Bidi_Class= EUROPEAN Terminator}', "");
Expect(1, 34, '\p{^Bidi_Class= EUROPEAN Terminator}', "");
Expect(1, 34, '\P{Bidi_Class= EUROPEAN Terminator}', "");
Expect(0, 34, '\P{^Bidi_Class= EUROPEAN Terminator}', "");
Error('\p{Bc=/a/ET}');
Error('\P{Bc=/a/ET}');
Expect(1, 37, '\p{Bc=et}', "");
Expect(0, 37, '\p{^Bc=et}', "");
Expect(0, 37, '\P{Bc=et}', "");
Expect(1, 37, '\P{^Bc=et}', "");
Expect(0, 34, '\p{Bc=et}', "");
Expect(1, 34, '\p{^Bc=et}', "");
Expect(1, 34, '\P{Bc=et}', "");
Expect(0, 34, '\P{^Bc=et}', "");
Expect(1, 37, '\p{Bc= ET}', "");
Expect(0, 37, '\p{^Bc= ET}', "");
Expect(0, 37, '\P{Bc= ET}', "");
Expect(1, 37, '\P{^Bc= ET}', "");
Expect(0, 34, '\p{Bc= ET}', "");
Expect(1, 34, '\p{^Bc= ET}', "");
Expect(1, 34, '\P{Bc= ET}', "");
Expect(0, 34, '\P{^Bc= ET}', "");
Error('\p{Is_Bidi_Class= 	EuropeanTERMINATOR/a/}');
Error('\P{Is_Bidi_Class= 	EuropeanTERMINATOR/a/}');
Expect(1, 37, '\p{Is_Bidi_Class=europeanterminator}', "");
Expect(0, 37, '\p{^Is_Bidi_Class=europeanterminator}', "");
Expect(0, 37, '\P{Is_Bidi_Class=europeanterminator}', "");
Expect(1, 37, '\P{^Is_Bidi_Class=europeanterminator}', "");
Expect(0, 34, '\p{Is_Bidi_Class=europeanterminator}', "");
Expect(1, 34, '\p{^Is_Bidi_Class=europeanterminator}', "");
Expect(1, 34, '\P{Is_Bidi_Class=europeanterminator}', "");
Expect(0, 34, '\P{^Is_Bidi_Class=europeanterminator}', "");
Expect(1, 37, '\p{Is_Bidi_Class=	europeanterminator}', "");
Expect(0, 37, '\p{^Is_Bidi_Class=	europeanterminator}', "");
Expect(0, 37, '\P{Is_Bidi_Class=	europeanterminator}', "");
Expect(1, 37, '\P{^Is_Bidi_Class=	europeanterminator}', "");
Expect(0, 34, '\p{Is_Bidi_Class=	europeanterminator}', "");
Expect(1, 34, '\p{^Is_Bidi_Class=	europeanterminator}', "");
Expect(1, 34, '\P{Is_Bidi_Class=	europeanterminator}', "");
Expect(0, 34, '\P{^Is_Bidi_Class=	europeanterminator}', "");
Error('\p{Is_Bc=	/a/ET}');
Error('\P{Is_Bc=	/a/ET}');
Expect(1, 37, '\p{Is_Bc=et}', "");
Expect(0, 37, '\p{^Is_Bc=et}', "");
Expect(0, 37, '\P{Is_Bc=et}', "");
Expect(1, 37, '\P{^Is_Bc=et}', "");
Expect(0, 34, '\p{Is_Bc=et}', "");
Expect(1, 34, '\p{^Is_Bc=et}', "");
Expect(1, 34, '\P{Is_Bc=et}', "");
Expect(0, 34, '\P{^Is_Bc=et}', "");
Expect(1, 37, '\p{Is_Bc=__ET}', "");
Expect(0, 37, '\p{^Is_Bc=__ET}', "");
Expect(0, 37, '\P{Is_Bc=__ET}', "");
Expect(1, 37, '\P{^Is_Bc=__ET}', "");
Expect(0, 34, '\p{Is_Bc=__ET}', "");
Expect(1, 34, '\p{^Is_Bc=__ET}', "");
Expect(1, 34, '\P{Is_Bc=__ET}', "");
Expect(0, 34, '\P{^Is_Bc=__ET}', "");
Error('\p{Bidi_Class= _arabicNumber/a/}');
Error('\P{Bidi_Class= _arabicNumber/a/}');
Expect(1, 1539, '\p{Bidi_Class: arabicnumber}', "");
Expect(0, 1539, '\p{^Bidi_Class: arabicnumber}', "");
Expect(0, 1539, '\P{Bidi_Class: arabicnumber}', "");
Expect(1, 1539, '\P{^Bidi_Class: arabicnumber}', "");
Expect(0, 1535, '\p{Bidi_Class: arabicnumber}', "");
Expect(1, 1535, '\p{^Bidi_Class: arabicnumber}', "");
Expect(1, 1535, '\P{Bidi_Class: arabicnumber}', "");
Expect(0, 1535, '\P{^Bidi_Class: arabicnumber}', "");
Expect(1, 1539, '\p{Bidi_Class=-	arabicnumber}', "");
Expect(0, 1539, '\p{^Bidi_Class=-	arabicnumber}', "");
Expect(0, 1539, '\P{Bidi_Class=-	arabicnumber}', "");
Expect(1, 1539, '\P{^Bidi_Class=-	arabicnumber}', "");
Expect(0, 1535, '\p{Bidi_Class=-	arabicnumber}', "");
Expect(1, 1535, '\p{^Bidi_Class=-	arabicnumber}', "");
Expect(1, 1535, '\P{Bidi_Class=-	arabicnumber}', "");
Expect(0, 1535, '\P{^Bidi_Class=-	arabicnumber}', "");
Error('\p{Bc=:=_-AN}');
Error('\P{Bc=:=_-AN}');
Expect(1, 1539, '\p{Bc=an}', "");
Expect(0, 1539, '\p{^Bc=an}', "");
Expect(0, 1539, '\P{Bc=an}', "");
Expect(1, 1539, '\P{^Bc=an}', "");
Expect(0, 1535, '\p{Bc=an}', "");
Expect(1, 1535, '\p{^Bc=an}', "");
Expect(1, 1535, '\P{Bc=an}', "");
Expect(0, 1535, '\P{^Bc=an}', "");
Expect(1, 1539, '\p{Bc=--AN}', "");
Expect(0, 1539, '\p{^Bc=--AN}', "");
Expect(0, 1539, '\P{Bc=--AN}', "");
Expect(1, 1539, '\P{^Bc=--AN}', "");
Expect(0, 1535, '\p{Bc=--AN}', "");
Expect(1, 1535, '\p{^Bc=--AN}', "");
Expect(1, 1535, '\P{Bc=--AN}', "");
Expect(0, 1535, '\P{^Bc=--AN}', "");
Error('\p{Is_Bidi_Class= -ARABIC-number:=}');
Error('\P{Is_Bidi_Class= -ARABIC-number:=}');
Expect(1, 1539, '\p{Is_Bidi_Class:arabicnumber}', "");
Expect(0, 1539, '\p{^Is_Bidi_Class:arabicnumber}', "");
Expect(0, 1539, '\P{Is_Bidi_Class:arabicnumber}', "");
Expect(1, 1539, '\P{^Is_Bidi_Class:arabicnumber}', "");
Expect(0, 1535, '\p{Is_Bidi_Class:arabicnumber}', "");
Expect(1, 1535, '\p{^Is_Bidi_Class:arabicnumber}', "");
Expect(1, 1535, '\P{Is_Bidi_Class:arabicnumber}', "");
Expect(0, 1535, '\P{^Is_Bidi_Class:arabicnumber}', "");
Expect(1, 1539, '\p{Is_Bidi_Class=	 Arabic	Number}', "");
Expect(0, 1539, '\p{^Is_Bidi_Class=	 Arabic	Number}', "");
Expect(0, 1539, '\P{Is_Bidi_Class=	 Arabic	Number}', "");
Expect(1, 1539, '\P{^Is_Bidi_Class=	 Arabic	Number}', "");
Expect(0, 1535, '\p{Is_Bidi_Class=	 Arabic	Number}', "");
Expect(1, 1535, '\p{^Is_Bidi_Class=	 Arabic	Number}', "");
Expect(1, 1535, '\P{Is_Bidi_Class=	 Arabic	Number}', "");
Expect(0, 1535, '\P{^Is_Bidi_Class=	 Arabic	Number}', "");
Error('\p{Is_Bc:   /a/AN}');
Error('\P{Is_Bc:   /a/AN}');
Expect(1, 1539, '\p{Is_Bc=an}', "");
Expect(0, 1539, '\p{^Is_Bc=an}', "");
Expect(0, 1539, '\P{Is_Bc=an}', "");
Expect(1, 1539, '\P{^Is_Bc=an}', "");
Expect(0, 1535, '\p{Is_Bc=an}', "");
Expect(1, 1535, '\p{^Is_Bc=an}', "");
Expect(1, 1535, '\P{Is_Bc=an}', "");
Expect(0, 1535, '\P{^Is_Bc=an}', "");
Expect(1, 1539, '\p{Is_Bc=		AN}', "");
Expect(0, 1539, '\p{^Is_Bc=		AN}', "");
Expect(0, 1539, '\P{Is_Bc=		AN}', "");
Expect(1, 1539, '\P{^Is_Bc=		AN}', "");
Expect(0, 1535, '\p{Is_Bc=		AN}', "");
Expect(1, 1535, '\p{^Is_Bc=		AN}', "");
Expect(1, 1535, '\P{Is_Bc=		AN}', "");
Expect(0, 1535, '\P{^Is_Bc=		AN}', "");
Error('\p{Bidi_Class=Right:=To Left}');
Error('\P{Bidi_Class=Right:=To Left}');
Expect(1, 1424, '\p{Bidi_Class=righttoleft}', "");
Expect(0, 1424, '\p{^Bidi_Class=righttoleft}', "");
Expect(0, 1424, '\P{Bidi_Class=righttoleft}', "");
Expect(1, 1424, '\P{^Bidi_Class=righttoleft}', "");
Expect(0, 1423, '\p{Bidi_Class=righttoleft}', "");
Expect(1, 1423, '\p{^Bidi_Class=righttoleft}', "");
Expect(1, 1423, '\P{Bidi_Class=righttoleft}', "");
Expect(0, 1423, '\P{^Bidi_Class=righttoleft}', "");
Expect(1, 1424, '\p{Bidi_Class=--Right To_LEFT}', "");
Expect(0, 1424, '\p{^Bidi_Class=--Right To_LEFT}', "");
Expect(0, 1424, '\P{Bidi_Class=--Right To_LEFT}', "");
Expect(1, 1424, '\P{^Bidi_Class=--Right To_LEFT}', "");
Expect(0, 1423, '\p{Bidi_Class=--Right To_LEFT}', "");
Expect(1, 1423, '\p{^Bidi_Class=--Right To_LEFT}', "");
Expect(1, 1423, '\P{Bidi_Class=--Right To_LEFT}', "");
Expect(0, 1423, '\P{^Bidi_Class=--Right To_LEFT}', "");
Error('\p{Bc=/a/R}');
Error('\P{Bc=/a/R}');
Expect(1, 1424, '\p{Bc=r}', "");
Expect(0, 1424, '\p{^Bc=r}', "");
Expect(0, 1424, '\P{Bc=r}', "");
Expect(1, 1424, '\P{^Bc=r}', "");
Expect(0, 1423, '\p{Bc=r}', "");
Expect(1, 1423, '\p{^Bc=r}', "");
Expect(1, 1423, '\P{Bc=r}', "");
Expect(0, 1423, '\P{^Bc=r}', "");
Expect(1, 1424, '\p{Bc=  r}', "");
Expect(0, 1424, '\p{^Bc=  r}', "");
Expect(0, 1424, '\P{Bc=  r}', "");
Expect(1, 1424, '\P{^Bc=  r}', "");
Expect(0, 1423, '\p{Bc=  r}', "");
Expect(1, 1423, '\p{^Bc=  r}', "");
Expect(1, 1423, '\P{Bc=  r}', "");
Expect(0, 1423, '\P{^Bc=  r}', "");
Error('\p{Is_Bidi_Class:   -Right:=to-LEFT}');
Error('\P{Is_Bidi_Class:   -Right:=to-LEFT}');
Expect(1, 1424, '\p{Is_Bidi_Class: righttoleft}', "");
Expect(0, 1424, '\p{^Is_Bidi_Class: righttoleft}', "");
Expect(0, 1424, '\P{Is_Bidi_Class: righttoleft}', "");
Expect(1, 1424, '\P{^Is_Bidi_Class: righttoleft}', "");
Expect(0, 1423, '\p{Is_Bidi_Class: righttoleft}', "");
Expect(1, 1423, '\p{^Is_Bidi_Class: righttoleft}', "");
Expect(1, 1423, '\P{Is_Bidi_Class: righttoleft}', "");
Expect(0, 1423, '\P{^Is_Bidi_Class: righttoleft}', "");
Expect(1, 1424, '\p{Is_Bidi_Class=_RightTOLEFT}', "");
Expect(0, 1424, '\p{^Is_Bidi_Class=_RightTOLEFT}', "");
Expect(0, 1424, '\P{Is_Bidi_Class=_RightTOLEFT}', "");
Expect(1, 1424, '\P{^Is_Bidi_Class=_RightTOLEFT}', "");
Expect(0, 1423, '\p{Is_Bidi_Class=_RightTOLEFT}', "");
Expect(1, 1423, '\p{^Is_Bidi_Class=_RightTOLEFT}', "");
Expect(1, 1423, '\P{Is_Bidi_Class=_RightTOLEFT}', "");
Expect(0, 1423, '\P{^Is_Bidi_Class=_RightTOLEFT}', "");
Error('\p{Is_Bc=	:=r}');
Error('\P{Is_Bc=	:=r}');
Expect(1, 1424, '\p{Is_Bc=r}', "");
Expect(0, 1424, '\p{^Is_Bc=r}', "");
Expect(0, 1424, '\P{Is_Bc=r}', "");
Expect(1, 1424, '\P{^Is_Bc=r}', "");
Expect(0, 1423, '\p{Is_Bc=r}', "");
Expect(1, 1423, '\p{^Is_Bc=r}', "");
Expect(1, 1423, '\P{Is_Bc=r}', "");
Expect(0, 1423, '\P{^Is_Bc=r}', "");
Expect(1, 1424, '\p{Is_Bc=_r}', "");
Expect(0, 1424, '\p{^Is_Bc=_r}', "");
Expect(0, 1424, '\P{Is_Bc=_r}', "");
Expect(1, 1424, '\P{^Is_Bc=_r}', "");
Expect(0, 1423, '\p{Is_Bc=_r}', "");
Expect(1, 1423, '\p{^Is_Bc=_r}', "");
Expect(1, 1423, '\P{Is_Bc=_r}', "");
Expect(0, 1423, '\P{^Is_Bc=_r}', "");
Error('\p{Radical= _yes/a/}');
Error('\P{Radical= _yes/a/}');
Expect(1, 11929, '\p{Radical=yes}', "");
Expect(0, 11929, '\p{^Radical=yes}', "");
Expect(0, 11929, '\P{Radical=yes}', "");
Expect(1, 11929, '\P{^Radical=yes}', "");
Expect(0, 11903, '\p{Radical=yes}', "");
Expect(1, 11903, '\p{^Radical=yes}', "");
Expect(1, 11903, '\P{Radical=yes}', "");
Expect(0, 11903, '\P{^Radical=yes}', "");
Expect(1, 11929, '\p{Radical=__yes}', "");
Expect(0, 11929, '\p{^Radical=__yes}', "");
Expect(0, 11929, '\P{Radical=__yes}', "");
Expect(1, 11929, '\P{^Radical=__yes}', "");
Expect(0, 11903, '\p{Radical=__yes}', "");
Expect(1, 11903, '\p{^Radical=__yes}', "");
Expect(1, 11903, '\P{Radical=__yes}', "");
Expect(0, 11903, '\P{^Radical=__yes}', "");
Error('\p{Is_Radical=:=- Y}');
Error('\P{Is_Radical=:=- Y}');
Expect(1, 11929, '\p{Is_Radical=y}', "");
Expect(0, 11929, '\p{^Is_Radical=y}', "");
Expect(0, 11929, '\P{Is_Radical=y}', "");
Expect(1, 11929, '\P{^Is_Radical=y}', "");
Expect(0, 11903, '\p{Is_Radical=y}', "");
Expect(1, 11903, '\p{^Is_Radical=y}', "");
Expect(1, 11903, '\P{Is_Radical=y}', "");
Expect(0, 11903, '\P{^Is_Radical=y}', "");
Expect(1, 11929, '\p{Is_Radical:   -y}', "");
Expect(0, 11929, '\p{^Is_Radical:   -y}', "");
Expect(0, 11929, '\P{Is_Radical:   -y}', "");
Expect(1, 11929, '\P{^Is_Radical:   -y}', "");
Expect(0, 11903, '\p{Is_Radical:   -y}', "");
Expect(1, 11903, '\p{^Is_Radical:   -y}', "");
Expect(1, 11903, '\P{Is_Radical:   -y}', "");
Expect(0, 11903, '\P{^Is_Radical:   -y}', "");
Error('\p{Radical=_T:=}');
Error('\P{Radical=_T:=}');
Expect(1, 11929, '\p{Radical=t}', "");
Expect(0, 11929, '\p{^Radical=t}', "");
Expect(0, 11929, '\P{Radical=t}', "");
Expect(1, 11929, '\P{^Radical=t}', "");
Expect(0, 11903, '\p{Radical=t}', "");
Expect(1, 11903, '\p{^Radical=t}', "");
Expect(1, 11903, '\P{Radical=t}', "");
Expect(0, 11903, '\P{^Radical=t}', "");
Expect(1, 11929, '\p{Radical=- t}', "");
Expect(0, 11929, '\p{^Radical=- t}', "");
Expect(0, 11929, '\P{Radical=- t}', "");
Expect(1, 11929, '\P{^Radical=- t}', "");
Expect(0, 11903, '\p{Radical=- t}', "");
Expect(1, 11903, '\p{^Radical=- t}', "");
Expect(1, 11903, '\P{Radical=- t}', "");
Expect(0, 11903, '\P{^Radical=- t}', "");
Error('\p{Is_Radical:	:=	True}');
Error('\P{Is_Radical:	:=	True}');
Expect(1, 11929, '\p{Is_Radical=true}', "");
Expect(0, 11929, '\p{^Is_Radical=true}', "");
Expect(0, 11929, '\P{Is_Radical=true}', "");
Expect(1, 11929, '\P{^Is_Radical=true}', "");
Expect(0, 11903, '\p{Is_Radical=true}', "");
Expect(1, 11903, '\p{^Is_Radical=true}', "");
Expect(1, 11903, '\P{Is_Radical=true}', "");
Expect(0, 11903, '\P{^Is_Radical=true}', "");
Expect(1, 11929, '\p{Is_Radical=_True}', "");
Expect(0, 11929, '\p{^Is_Radical=_True}', "");
Expect(0, 11929, '\P{Is_Radical=_True}', "");
Expect(1, 11929, '\P{^Is_Radical=_True}', "");
Expect(0, 11903, '\p{Is_Radical=_True}', "");
Expect(1, 11903, '\p{^Is_Radical=_True}', "");
Expect(1, 11903, '\P{Is_Radical=_True}', "");
Expect(0, 11903, '\P{^Is_Radical=_True}', "");
Error('\p{Radical: /a/_	No}');
Error('\P{Radical: /a/_	No}');
Expect(1, 11903, '\p{Radical=no}', "");
Expect(0, 11903, '\p{^Radical=no}', "");
Expect(0, 11903, '\P{Radical=no}', "");
Expect(1, 11903, '\P{^Radical=no}', "");
Expect(0, 11929, '\p{Radical=no}', "");
Expect(1, 11929, '\p{^Radical=no}', "");
Expect(1, 11929, '\P{Radical=no}', "");
Expect(0, 11929, '\P{^Radical=no}', "");
Expect(1, 11903, '\p{Radical=-No}', "");
Expect(0, 11903, '\p{^Radical=-No}', "");
Expect(0, 11903, '\P{Radical=-No}', "");
Expect(1, 11903, '\P{^Radical=-No}', "");
Expect(0, 11929, '\p{Radical=-No}', "");
Expect(1, 11929, '\p{^Radical=-No}', "");
Expect(1, 11929, '\P{Radical=-No}', "");
Expect(0, 11929, '\P{^Radical=-No}', "");
Error('\p{Is_Radical=:= 	N}');
Error('\P{Is_Radical=:= 	N}');
Expect(1, 11903, '\p{Is_Radical=n}', "");
Expect(0, 11903, '\p{^Is_Radical=n}', "");
Expect(0, 11903, '\P{Is_Radical=n}', "");
Expect(1, 11903, '\P{^Is_Radical=n}', "");
Expect(0, 11929, '\p{Is_Radical=n}', "");
Expect(1, 11929, '\p{^Is_Radical=n}', "");
Expect(1, 11929, '\P{Is_Radical=n}', "");
Expect(0, 11929, '\P{^Is_Radical=n}', "");
Expect(1, 11903, '\p{Is_Radical= -n}', "");
Expect(0, 11903, '\p{^Is_Radical= -n}', "");
Expect(0, 11903, '\P{Is_Radical= -n}', "");
Expect(1, 11903, '\P{^Is_Radical= -n}', "");
Expect(0, 11929, '\p{Is_Radical= -n}', "");
Expect(1, 11929, '\p{^Is_Radical= -n}', "");
Expect(1, 11929, '\P{Is_Radical= -n}', "");
Expect(0, 11929, '\P{^Is_Radical= -n}', "");
Error('\p{Radical=/a/--f}');
Error('\P{Radical=/a/--f}');
Expect(1, 11903, '\p{Radical=f}', "");
Expect(0, 11903, '\p{^Radical=f}', "");
Expect(0, 11903, '\P{Radical=f}', "");
Expect(1, 11903, '\P{^Radical=f}', "");
Expect(0, 11929, '\p{Radical=f}', "");
Expect(1, 11929, '\p{^Radical=f}', "");
Expect(1, 11929, '\P{Radical=f}', "");
Expect(0, 11929, '\P{^Radical=f}', "");
Expect(1, 11903, '\p{Radical=_f}', "");
Expect(0, 11903, '\p{^Radical=_f}', "");
Expect(0, 11903, '\P{Radical=_f}', "");
Expect(1, 11903, '\P{^Radical=_f}', "");
Expect(0, 11929, '\p{Radical=_f}', "");
Expect(1, 11929, '\p{^Radical=_f}', "");
Expect(1, 11929, '\P{Radical=_f}', "");
Expect(0, 11929, '\P{^Radical=_f}', "");
Error('\p{Is_Radical=_False:=}');
Error('\P{Is_Radical=_False:=}');
Expect(1, 11903, '\p{Is_Radical=false}', "");
Expect(0, 11903, '\p{^Is_Radical=false}', "");
Expect(0, 11903, '\P{Is_Radical=false}', "");
Expect(1, 11903, '\P{^Is_Radical=false}', "");
Expect(0, 11929, '\p{Is_Radical=false}', "");
Expect(1, 11929, '\p{^Is_Radical=false}', "");
Expect(1, 11929, '\P{Is_Radical=false}', "");
Expect(0, 11929, '\P{^Is_Radical=false}', "");
Expect(1, 11903, '\p{Is_Radical=		false}', "");
Expect(0, 11903, '\p{^Is_Radical=		false}', "");
Expect(0, 11903, '\P{Is_Radical=		false}', "");
Expect(1, 11903, '\P{^Is_Radical=		false}', "");
Expect(0, 11929, '\p{Is_Radical=		false}', "");
Expect(1, 11929, '\p{^Is_Radical=		false}', "");
Expect(1, 11929, '\P{Is_Radical=		false}', "");
Expect(0, 11929, '\P{^Is_Radical=		false}', "");
Error('\p{Quotation_Mark=-_Yes:=}');
Error('\P{Quotation_Mark=-_Yes:=}');
Expect(1, 34, '\p{Quotation_Mark=yes}', "");
Expect(0, 34, '\p{^Quotation_Mark=yes}', "");
Expect(0, 34, '\P{Quotation_Mark=yes}', "");
Expect(1, 34, '\P{^Quotation_Mark=yes}', "");
Expect(0, 33, '\p{Quotation_Mark=yes}', "");
Expect(1, 33, '\p{^Quotation_Mark=yes}', "");
Expect(1, 33, '\P{Quotation_Mark=yes}', "");
Expect(0, 33, '\P{^Quotation_Mark=yes}', "");
Expect(1, 34, '\p{Quotation_Mark=_yes}', "");
Expect(0, 34, '\p{^Quotation_Mark=_yes}', "");
Expect(0, 34, '\P{Quotation_Mark=_yes}', "");
Expect(1, 34, '\P{^Quotation_Mark=_yes}', "");
Expect(0, 33, '\p{Quotation_Mark=_yes}', "");
Expect(1, 33, '\p{^Quotation_Mark=_yes}', "");
Expect(1, 33, '\P{Quotation_Mark=_yes}', "");
Expect(0, 33, '\P{^Quotation_Mark=_yes}', "");
Error('\p{QMark=	:=y}');
Error('\P{QMark=	:=y}');
Expect(1, 34, '\p{QMark=y}', "");
Expect(0, 34, '\p{^QMark=y}', "");
Expect(0, 34, '\P{QMark=y}', "");
Expect(1, 34, '\P{^QMark=y}', "");
Expect(0, 33, '\p{QMark=y}', "");
Expect(1, 33, '\p{^QMark=y}', "");
Expect(1, 33, '\P{QMark=y}', "");
Expect(0, 33, '\P{^QMark=y}', "");
Expect(1, 34, '\p{QMark=--y}', "");
Expect(0, 34, '\p{^QMark=--y}', "");
Expect(0, 34, '\P{QMark=--y}', "");
Expect(1, 34, '\P{^QMark=--y}', "");
Expect(0, 33, '\p{QMark=--y}', "");
Expect(1, 33, '\p{^QMark=--y}', "");
Expect(1, 33, '\P{QMark=--y}', "");
Expect(0, 33, '\P{^QMark=--y}', "");
Error('\p{Is_Quotation_Mark=_t/a/}');
Error('\P{Is_Quotation_Mark=_t/a/}');
Expect(1, 34, '\p{Is_Quotation_Mark=t}', "");
Expect(0, 34, '\p{^Is_Quotation_Mark=t}', "");
Expect(0, 34, '\P{Is_Quotation_Mark=t}', "");
Expect(1, 34, '\P{^Is_Quotation_Mark=t}', "");
Expect(0, 33, '\p{Is_Quotation_Mark=t}', "");
Expect(1, 33, '\p{^Is_Quotation_Mark=t}', "");
Expect(1, 33, '\P{Is_Quotation_Mark=t}', "");
Expect(0, 33, '\P{^Is_Quotation_Mark=t}', "");
Expect(1, 34, '\p{Is_Quotation_Mark=		T}', "");
Expect(0, 34, '\p{^Is_Quotation_Mark=		T}', "");
Expect(0, 34, '\P{Is_Quotation_Mark=		T}', "");
Expect(1, 34, '\P{^Is_Quotation_Mark=		T}', "");
Expect(0, 33, '\p{Is_Quotation_Mark=		T}', "");
Expect(1, 33, '\p{^Is_Quotation_Mark=		T}', "");
Expect(1, 33, '\P{Is_Quotation_Mark=		T}', "");
Expect(0, 33, '\P{^Is_Quotation_Mark=		T}', "");
Error('\p{Is_QMark=:=__TRUE}');
Error('\P{Is_QMark=:=__TRUE}');
Expect(1, 34, '\p{Is_QMark=true}', "");
Expect(0, 34, '\p{^Is_QMark=true}', "");
Expect(0, 34, '\P{Is_QMark=true}', "");
Expect(1, 34, '\P{^Is_QMark=true}', "");
Expect(0, 33, '\p{Is_QMark=true}', "");
Expect(1, 33, '\p{^Is_QMark=true}', "");
Expect(1, 33, '\P{Is_QMark=true}', "");
Expect(0, 33, '\P{^Is_QMark=true}', "");
Expect(1, 34, '\p{Is_QMark=_true}', "");
Expect(0, 34, '\p{^Is_QMark=_true}', "");
Expect(0, 34, '\P{Is_QMark=_true}', "");
Expect(1, 34, '\P{^Is_QMark=_true}', "");
Expect(0, 33, '\p{Is_QMark=_true}', "");
Expect(1, 33, '\p{^Is_QMark=_true}', "");
Expect(1, 33, '\P{Is_QMark=_true}', "");
Expect(0, 33, '\P{^Is_QMark=_true}', "");
Error('\p{Quotation_Mark=/a/-_No}');
Error('\P{Quotation_Mark=/a/-_No}');
Expect(1, 33, '\p{Quotation_Mark=no}', "");
Expect(0, 33, '\p{^Quotation_Mark=no}', "");
Expect(0, 33, '\P{Quotation_Mark=no}', "");
Expect(1, 33, '\P{^Quotation_Mark=no}', "");
Expect(0, 34, '\p{Quotation_Mark=no}', "");
Expect(1, 34, '\p{^Quotation_Mark=no}', "");
Expect(1, 34, '\P{Quotation_Mark=no}', "");
Expect(0, 34, '\P{^Quotation_Mark=no}', "");
Expect(1, 33, '\p{Quotation_Mark=	No}', "");
Expect(0, 33, '\p{^Quotation_Mark=	No}', "");
Expect(0, 33, '\P{Quotation_Mark=	No}', "");
Expect(1, 33, '\P{^Quotation_Mark=	No}', "");
Expect(0, 34, '\p{Quotation_Mark=	No}', "");
Expect(1, 34, '\p{^Quotation_Mark=	No}', "");
Expect(1, 34, '\P{Quotation_Mark=	No}', "");
Expect(0, 34, '\P{^Quotation_Mark=	No}', "");
Error('\p{QMark=	N/a/}');
Error('\P{QMark=	N/a/}');
Expect(1, 33, '\p{QMark=n}', "");
Expect(0, 33, '\p{^QMark=n}', "");
Expect(0, 33, '\P{QMark=n}', "");
Expect(1, 33, '\P{^QMark=n}', "");
Expect(0, 34, '\p{QMark=n}', "");
Expect(1, 34, '\p{^QMark=n}', "");
Expect(1, 34, '\P{QMark=n}', "");
Expect(0, 34, '\P{^QMark=n}', "");
Expect(1, 33, '\p{QMark: 	N}', "");
Expect(0, 33, '\p{^QMark: 	N}', "");
Expect(0, 33, '\P{QMark: 	N}', "");
Expect(1, 33, '\P{^QMark: 	N}', "");
Expect(0, 34, '\p{QMark: 	N}', "");
Expect(1, 34, '\p{^QMark: 	N}', "");
Expect(1, 34, '\P{QMark: 	N}', "");
Expect(0, 34, '\P{^QMark: 	N}', "");
Error('\p{Is_Quotation_Mark= /a/F}');
Error('\P{Is_Quotation_Mark= /a/F}');
Expect(1, 33, '\p{Is_Quotation_Mark=f}', "");
Expect(0, 33, '\p{^Is_Quotation_Mark=f}', "");
Expect(0, 33, '\P{Is_Quotation_Mark=f}', "");
Expect(1, 33, '\P{^Is_Quotation_Mark=f}', "");
Expect(0, 34, '\p{Is_Quotation_Mark=f}', "");
Expect(1, 34, '\p{^Is_Quotation_Mark=f}', "");
Expect(1, 34, '\P{Is_Quotation_Mark=f}', "");
Expect(0, 34, '\P{^Is_Quotation_Mark=f}', "");
Expect(1, 33, '\p{Is_Quotation_Mark:   - F}', "");
Expect(0, 33, '\p{^Is_Quotation_Mark:   - F}', "");
Expect(0, 33, '\P{Is_Quotation_Mark:   - F}', "");
Expect(1, 33, '\P{^Is_Quotation_Mark:   - F}', "");
Expect(0, 34, '\p{Is_Quotation_Mark:   - F}', "");
Expect(1, 34, '\p{^Is_Quotation_Mark:   - F}', "");
Expect(1, 34, '\P{Is_Quotation_Mark:   - F}', "");
Expect(0, 34, '\P{^Is_Quotation_Mark:   - F}', "");
Error('\p{Is_QMark=_ false:=}');
Error('\P{Is_QMark=_ false:=}');
Expect(1, 33, '\p{Is_QMark=false}', "");
Expect(0, 33, '\p{^Is_QMark=false}', "");
Expect(0, 33, '\P{Is_QMark=false}', "");
Expect(1, 33, '\P{^Is_QMark=false}', "");
Expect(0, 34, '\p{Is_QMark=false}', "");
Expect(1, 34, '\p{^Is_QMark=false}', "");
Expect(1, 34, '\P{Is_QMark=false}', "");
Expect(0, 34, '\P{^Is_QMark=false}', "");
Expect(1, 33, '\p{Is_QMark:	-False}', "");
Expect(0, 33, '\p{^Is_QMark:	-False}', "");
Expect(0, 33, '\P{Is_QMark:	-False}', "");
Expect(1, 33, '\P{^Is_QMark:	-False}', "");
Expect(0, 34, '\p{Is_QMark:	-False}', "");
Expect(1, 34, '\p{^Is_QMark:	-False}', "");
Expect(1, 34, '\P{Is_QMark:	-False}', "");
Expect(0, 34, '\P{^Is_QMark:	-False}', "");
Error('\p{Expands_On_NFD=Yes}');
Error('\P{Expands_On_NFD=Yes}');
Error('\p{XO_NFD=Y}');
Error('\P{XO_NFD=Y}');
Error('\p{Is_Expands_On_NFD=T}');
Error('\P{Is_Expands_On_NFD=T}');
Error('\p{Is_XO_NFD=True}');
Error('\P{Is_XO_NFD=True}');
Error('\p{Expands_On_NFD=No}');
Error('\P{Expands_On_NFD=No}');
Error('\p{XO_NFD=N}');
Error('\P{XO_NFD=N}');
Error('\p{Is_Expands_On_NFD=F}');
Error('\P{Is_Expands_On_NFD=F}');
Error('\p{Is_XO_NFD=False}');
Error('\P{Is_XO_NFD=False}');
Error('\p{Soft_Dotted=-_Yes/a/}');
Error('\P{Soft_Dotted=-_Yes/a/}');
Expect(1, 106, '\p{Soft_Dotted=yes}', "");
Expect(0, 106, '\p{^Soft_Dotted=yes}', "");
Expect(0, 106, '\P{Soft_Dotted=yes}', "");
Expect(1, 106, '\P{^Soft_Dotted=yes}', "");
Expect(0, 104, '\p{Soft_Dotted=yes}', "");
Expect(1, 104, '\p{^Soft_Dotted=yes}', "");
Expect(1, 104, '\P{Soft_Dotted=yes}', "");
Expect(0, 104, '\P{^Soft_Dotted=yes}', "");
Expect(1, 106, '\p{Soft_Dotted=_yes}', "");
Expect(0, 106, '\p{^Soft_Dotted=_yes}', "");
Expect(0, 106, '\P{Soft_Dotted=_yes}', "");
Expect(1, 106, '\P{^Soft_Dotted=_yes}', "");
Expect(0, 104, '\p{Soft_Dotted=_yes}', "");
Expect(1, 104, '\p{^Soft_Dotted=_yes}', "");
Expect(1, 104, '\P{Soft_Dotted=_yes}', "");
Expect(0, 104, '\P{^Soft_Dotted=_yes}', "");
Error('\p{SD=	/a/Y}');
Error('\P{SD=	/a/Y}');
Expect(1, 106, '\p{SD=y}', "");
Expect(0, 106, '\p{^SD=y}', "");
Expect(0, 106, '\P{SD=y}', "");
Expect(1, 106, '\P{^SD=y}', "");
Expect(0, 104, '\p{SD=y}', "");
Expect(1, 104, '\p{^SD=y}', "");
Expect(1, 104, '\P{SD=y}', "");
Expect(0, 104, '\P{^SD=y}', "");
Expect(1, 106, '\p{SD=_y}', "");
Expect(0, 106, '\p{^SD=_y}', "");
Expect(0, 106, '\P{SD=_y}', "");
Expect(1, 106, '\P{^SD=_y}', "");
Expect(0, 104, '\p{SD=_y}', "");
Expect(1, 104, '\p{^SD=_y}', "");
Expect(1, 104, '\P{SD=_y}', "");
Expect(0, 104, '\P{^SD=_y}', "");
Error('\p{Is_Soft_Dotted=-_t/a/}');
Error('\P{Is_Soft_Dotted=-_t/a/}');
Expect(1, 106, '\p{Is_Soft_Dotted=t}', "");
Expect(0, 106, '\p{^Is_Soft_Dotted=t}', "");
Expect(0, 106, '\P{Is_Soft_Dotted=t}', "");
Expect(1, 106, '\P{^Is_Soft_Dotted=t}', "");
Expect(0, 104, '\p{Is_Soft_Dotted=t}', "");
Expect(1, 104, '\p{^Is_Soft_Dotted=t}', "");
Expect(1, 104, '\P{Is_Soft_Dotted=t}', "");
Expect(0, 104, '\P{^Is_Soft_Dotted=t}', "");
Expect(1, 106, '\p{Is_Soft_Dotted=- T}', "");
Expect(0, 106, '\p{^Is_Soft_Dotted=- T}', "");
Expect(0, 106, '\P{Is_Soft_Dotted=- T}', "");
Expect(1, 106, '\P{^Is_Soft_Dotted=- T}', "");
Expect(0, 104, '\p{Is_Soft_Dotted=- T}', "");
Expect(1, 104, '\p{^Is_Soft_Dotted=- T}', "");
Expect(1, 104, '\P{Is_Soft_Dotted=- T}', "");
Expect(0, 104, '\P{^Is_Soft_Dotted=- T}', "");
Error('\p{Is_SD: _/a/True}');
Error('\P{Is_SD: _/a/True}');
Expect(1, 106, '\p{Is_SD=true}', "");
Expect(0, 106, '\p{^Is_SD=true}', "");
Expect(0, 106, '\P{Is_SD=true}', "");
Expect(1, 106, '\P{^Is_SD=true}', "");
Expect(0, 104, '\p{Is_SD=true}', "");
Expect(1, 104, '\p{^Is_SD=true}', "");
Expect(1, 104, '\P{Is_SD=true}', "");
Expect(0, 104, '\P{^Is_SD=true}', "");
Expect(1, 106, '\p{Is_SD=_TRUE}', "");
Expect(0, 106, '\p{^Is_SD=_TRUE}', "");
Expect(0, 106, '\P{Is_SD=_TRUE}', "");
Expect(1, 106, '\P{^Is_SD=_TRUE}', "");
Expect(0, 104, '\p{Is_SD=_TRUE}', "");
Expect(1, 104, '\p{^Is_SD=_TRUE}', "");
Expect(1, 104, '\P{Is_SD=_TRUE}', "");
Expect(0, 104, '\P{^Is_SD=_TRUE}', "");
Error('\p{Soft_Dotted:	-No/a/}');
Error('\P{Soft_Dotted:	-No/a/}');
Expect(1, 104, '\p{Soft_Dotted=no}', "");
Expect(0, 104, '\p{^Soft_Dotted=no}', "");
Expect(0, 104, '\P{Soft_Dotted=no}', "");
Expect(1, 104, '\P{^Soft_Dotted=no}', "");
Expect(0, 106, '\p{Soft_Dotted=no}', "");
Expect(1, 106, '\p{^Soft_Dotted=no}', "");
Expect(1, 106, '\P{Soft_Dotted=no}', "");
Expect(0, 106, '\P{^Soft_Dotted=no}', "");
Expect(1, 104, '\p{Soft_Dotted=	 no}', "");
Expect(0, 104, '\p{^Soft_Dotted=	 no}', "");
Expect(0, 104, '\P{Soft_Dotted=	 no}', "");
Expect(1, 104, '\P{^Soft_Dotted=	 no}', "");
Expect(0, 106, '\p{Soft_Dotted=	 no}', "");
Expect(1, 106, '\p{^Soft_Dotted=	 no}', "");
Expect(1, 106, '\P{Soft_Dotted=	 no}', "");
Expect(0, 106, '\P{^Soft_Dotted=	 no}', "");
Error('\p{SD=_	N/a/}');
Error('\P{SD=_	N/a/}');
Expect(1, 104, '\p{SD=n}', "");
Expect(0, 104, '\p{^SD=n}', "");
Expect(0, 104, '\P{SD=n}', "");
Expect(1, 104, '\P{^SD=n}', "");
Expect(0, 106, '\p{SD=n}', "");
Expect(1, 106, '\p{^SD=n}', "");
Expect(1, 106, '\P{SD=n}', "");
Expect(0, 106, '\P{^SD=n}', "");
Expect(1, 104, '\p{SD=-	N}', "");
Expect(0, 104, '\p{^SD=-	N}', "");
Expect(0, 104, '\P{SD=-	N}', "");
Expect(1, 104, '\P{^SD=-	N}', "");
Expect(0, 106, '\p{SD=-	N}', "");
Expect(1, 106, '\p{^SD=-	N}', "");
Expect(1, 106, '\P{SD=-	N}', "");
Expect(0, 106, '\P{^SD=-	N}', "");
Error('\p{Is_Soft_Dotted:			f/a/}');
Error('\P{Is_Soft_Dotted:			f/a/}');
Expect(1, 104, '\p{Is_Soft_Dotted=f}', "");
Expect(0, 104, '\p{^Is_Soft_Dotted=f}', "");
Expect(0, 104, '\P{Is_Soft_Dotted=f}', "");
Expect(1, 104, '\P{^Is_Soft_Dotted=f}', "");
Expect(0, 106, '\p{Is_Soft_Dotted=f}', "");
Expect(1, 106, '\p{^Is_Soft_Dotted=f}', "");
Expect(1, 106, '\P{Is_Soft_Dotted=f}', "");
Expect(0, 106, '\P{^Is_Soft_Dotted=f}', "");
Expect(1, 104, '\p{Is_Soft_Dotted=_F}', "");
Expect(0, 104, '\p{^Is_Soft_Dotted=_F}', "");
Expect(0, 104, '\P{Is_Soft_Dotted=_F}', "");
Expect(1, 104, '\P{^Is_Soft_Dotted=_F}', "");
Expect(0, 106, '\p{Is_Soft_Dotted=_F}', "");
Expect(1, 106, '\p{^Is_Soft_Dotted=_F}', "");
Expect(1, 106, '\P{Is_Soft_Dotted=_F}', "");
Expect(0, 106, '\P{^Is_Soft_Dotted=_F}', "");
Error('\p{Is_SD:	_:=false}');
Error('\P{Is_SD:	_:=false}');
Expect(1, 104, '\p{Is_SD=false}', "");
Expect(0, 104, '\p{^Is_SD=false}', "");
Expect(0, 104, '\P{Is_SD=false}', "");
Expect(1, 104, '\P{^Is_SD=false}', "");
Expect(0, 106, '\p{Is_SD=false}', "");
Expect(1, 106, '\p{^Is_SD=false}', "");
Expect(1, 106, '\P{Is_SD=false}', "");
Expect(0, 106, '\P{^Is_SD=false}', "");
Expect(1, 104, '\p{Is_SD=	false}', "");
Expect(0, 104, '\p{^Is_SD=	false}', "");
Expect(0, 104, '\P{Is_SD=	false}', "");
Expect(1, 104, '\P{^Is_SD=	false}', "");
Expect(0, 106, '\p{Is_SD=	false}', "");
Expect(1, 106, '\p{^Is_SD=	false}', "");
Expect(1, 106, '\P{Is_SD=	false}', "");
Expect(0, 106, '\P{^Is_SD=	false}', "");
Error('\p{Other_ID_Start=	/a/Yes}');
Error('\P{Other_ID_Start=	/a/Yes}');
Expect(1, 8472, '\p{Other_ID_Start=yes}', 'deprecated');
Expect(0, 8472, '\p{^Other_ID_Start=yes}', 'deprecated');
Expect(0, 8472, '\P{Other_ID_Start=yes}', 'deprecated');
Expect(1, 8472, '\P{^Other_ID_Start=yes}', 'deprecated');
Expect(0, 8471, '\p{Other_ID_Start=yes}', 'deprecated');
Expect(1, 8471, '\p{^Other_ID_Start=yes}', 'deprecated');
Expect(1, 8471, '\P{Other_ID_Start=yes}', 'deprecated');
Expect(0, 8471, '\P{^Other_ID_Start=yes}', 'deprecated');
Expect(1, 8472, '\p{Other_ID_Start=__Yes}', 'deprecated');
Expect(0, 8472, '\p{^Other_ID_Start=__Yes}', 'deprecated');
Expect(0, 8472, '\P{Other_ID_Start=__Yes}', 'deprecated');
Expect(1, 8472, '\P{^Other_ID_Start=__Yes}', 'deprecated');
Expect(0, 8471, '\p{Other_ID_Start=__Yes}', 'deprecated');
Expect(1, 8471, '\p{^Other_ID_Start=__Yes}', 'deprecated');
Expect(1, 8471, '\P{Other_ID_Start=__Yes}', 'deprecated');
Expect(0, 8471, '\P{^Other_ID_Start=__Yes}', 'deprecated');
Error('\p{OIDS:  Y:=}');
Error('\P{OIDS:  Y:=}');
Expect(1, 8472, '\p{OIDS=y}', 'deprecated');
Expect(0, 8472, '\p{^OIDS=y}', 'deprecated');
Expect(0, 8472, '\P{OIDS=y}', 'deprecated');
Expect(1, 8472, '\P{^OIDS=y}', 'deprecated');
Expect(0, 8471, '\p{OIDS=y}', 'deprecated');
Expect(1, 8471, '\p{^OIDS=y}', 'deprecated');
Expect(1, 8471, '\P{OIDS=y}', 'deprecated');
Expect(0, 8471, '\P{^OIDS=y}', 'deprecated');
Expect(1, 8472, '\p{OIDS= Y}', 'deprecated');
Expect(0, 8472, '\p{^OIDS= Y}', 'deprecated');
Expect(0, 8472, '\P{OIDS= Y}', 'deprecated');
Expect(1, 8472, '\P{^OIDS= Y}', 'deprecated');
Expect(0, 8471, '\p{OIDS= Y}', 'deprecated');
Expect(1, 8471, '\p{^OIDS= Y}', 'deprecated');
Expect(1, 8471, '\P{OIDS= Y}', 'deprecated');
Expect(0, 8471, '\P{^OIDS= Y}', 'deprecated');
Error('\p{Is_Other_ID_Start=_:=T}');
Error('\P{Is_Other_ID_Start=_:=T}');
Expect(1, 8472, '\p{Is_Other_ID_Start=t}', 'deprecated');
Expect(0, 8472, '\p{^Is_Other_ID_Start=t}', 'deprecated');
Expect(0, 8472, '\P{Is_Other_ID_Start=t}', 'deprecated');
Expect(1, 8472, '\P{^Is_Other_ID_Start=t}', 'deprecated');
Expect(0, 8471, '\p{Is_Other_ID_Start=t}', 'deprecated');
Expect(1, 8471, '\p{^Is_Other_ID_Start=t}', 'deprecated');
Expect(1, 8471, '\P{Is_Other_ID_Start=t}', 'deprecated');
Expect(0, 8471, '\P{^Is_Other_ID_Start=t}', 'deprecated');
Expect(1, 8472, '\p{Is_Other_ID_Start: _T}', 'deprecated');
Expect(0, 8472, '\p{^Is_Other_ID_Start: _T}', 'deprecated');
Expect(0, 8472, '\P{Is_Other_ID_Start: _T}', 'deprecated');
Expect(1, 8472, '\P{^Is_Other_ID_Start: _T}', 'deprecated');
Expect(0, 8471, '\p{Is_Other_ID_Start: _T}', 'deprecated');
Expect(1, 8471, '\p{^Is_Other_ID_Start: _T}', 'deprecated');
Expect(1, 8471, '\P{Is_Other_ID_Start: _T}', 'deprecated');
Expect(0, 8471, '\P{^Is_Other_ID_Start: _T}', 'deprecated');
Error('\p{Is_OIDS=-True/a/}');
Error('\P{Is_OIDS=-True/a/}');
Expect(1, 8472, '\p{Is_OIDS=true}', 'deprecated');
Expect(0, 8472, '\p{^Is_OIDS=true}', 'deprecated');
Expect(0, 8472, '\P{Is_OIDS=true}', 'deprecated');
Expect(1, 8472, '\P{^Is_OIDS=true}', 'deprecated');
Expect(0, 8471, '\p{Is_OIDS=true}', 'deprecated');
Expect(1, 8471, '\p{^Is_OIDS=true}', 'deprecated');
Expect(1, 8471, '\P{Is_OIDS=true}', 'deprecated');
Expect(0, 8471, '\P{^Is_OIDS=true}', 'deprecated');
Expect(1, 8472, '\p{Is_OIDS= -TRUE}', 'deprecated');
Expect(0, 8472, '\p{^Is_OIDS= -TRUE}', 'deprecated');
Expect(0, 8472, '\P{Is_OIDS= -TRUE}', 'deprecated');
Expect(1, 8472, '\P{^Is_OIDS= -TRUE}', 'deprecated');
Expect(0, 8471, '\p{Is_OIDS= -TRUE}', 'deprecated');
Expect(1, 8471, '\p{^Is_OIDS= -TRUE}', 'deprecated');
Expect(1, 8471, '\P{Is_OIDS= -TRUE}', 'deprecated');
Expect(0, 8471, '\P{^Is_OIDS= -TRUE}', 'deprecated');
Error('\p{Other_ID_Start=	-no:=}');
Error('\P{Other_ID_Start=	-no:=}');
Expect(1, 8471, '\p{Other_ID_Start=no}', 'deprecated');
Expect(0, 8471, '\p{^Other_ID_Start=no}', 'deprecated');
Expect(0, 8471, '\P{Other_ID_Start=no}', 'deprecated');
Expect(1, 8471, '\P{^Other_ID_Start=no}', 'deprecated');
Expect(0, 8472, '\p{Other_ID_Start=no}', 'deprecated');
Expect(1, 8472, '\p{^Other_ID_Start=no}', 'deprecated');
Expect(1, 8472, '\P{Other_ID_Start=no}', 'deprecated');
Expect(0, 8472, '\P{^Other_ID_Start=no}', 'deprecated');
Expect(1, 8471, '\p{Other_ID_Start= -No}', 'deprecated');
Expect(0, 8471, '\p{^Other_ID_Start= -No}', 'deprecated');
Expect(0, 8471, '\P{Other_ID_Start= -No}', 'deprecated');
Expect(1, 8471, '\P{^Other_ID_Start= -No}', 'deprecated');
Expect(0, 8472, '\p{Other_ID_Start= -No}', 'deprecated');
Expect(1, 8472, '\p{^Other_ID_Start= -No}', 'deprecated');
Expect(1, 8472, '\P{Other_ID_Start= -No}', 'deprecated');
Expect(0, 8472, '\P{^Other_ID_Start= -No}', 'deprecated');
Error('\p{OIDS=_:=N}');
Error('\P{OIDS=_:=N}');
Expect(1, 8471, '\p{OIDS=n}', 'deprecated');
Expect(0, 8471, '\p{^OIDS=n}', 'deprecated');
Expect(0, 8471, '\P{OIDS=n}', 'deprecated');
Expect(1, 8471, '\P{^OIDS=n}', 'deprecated');
Expect(0, 8472, '\p{OIDS=n}', 'deprecated');
Expect(1, 8472, '\p{^OIDS=n}', 'deprecated');
Expect(1, 8472, '\P{OIDS=n}', 'deprecated');
Expect(0, 8472, '\P{^OIDS=n}', 'deprecated');
Expect(1, 8471, '\p{OIDS=N}', 'deprecated');
Expect(0, 8471, '\p{^OIDS=N}', 'deprecated');
Expect(0, 8471, '\P{OIDS=N}', 'deprecated');
Expect(1, 8471, '\P{^OIDS=N}', 'deprecated');
Expect(0, 8472, '\p{OIDS=N}', 'deprecated');
Expect(1, 8472, '\p{^OIDS=N}', 'deprecated');
Expect(1, 8472, '\P{OIDS=N}', 'deprecated');
Expect(0, 8472, '\P{^OIDS=N}', 'deprecated');
Error('\p{Is_Other_ID_Start=/a/_ f}');
Error('\P{Is_Other_ID_Start=/a/_ f}');
Expect(1, 8471, '\p{Is_Other_ID_Start=f}', 'deprecated');
Expect(0, 8471, '\p{^Is_Other_ID_Start=f}', 'deprecated');
Expect(0, 8471, '\P{Is_Other_ID_Start=f}', 'deprecated');
Expect(1, 8471, '\P{^Is_Other_ID_Start=f}', 'deprecated');
Expect(0, 8472, '\p{Is_Other_ID_Start=f}', 'deprecated');
Expect(1, 8472, '\p{^Is_Other_ID_Start=f}', 'deprecated');
Expect(1, 8472, '\P{Is_Other_ID_Start=f}', 'deprecated');
Expect(0, 8472, '\P{^Is_Other_ID_Start=f}', 'deprecated');
Expect(1, 8471, '\p{Is_Other_ID_Start=	F}', 'deprecated');
Expect(0, 8471, '\p{^Is_Other_ID_Start=	F}', 'deprecated');
Expect(0, 8471, '\P{Is_Other_ID_Start=	F}', 'deprecated');
Expect(1, 8471, '\P{^Is_Other_ID_Start=	F}', 'deprecated');
Expect(0, 8472, '\p{Is_Other_ID_Start=	F}', 'deprecated');
Expect(1, 8472, '\p{^Is_Other_ID_Start=	F}', 'deprecated');
Expect(1, 8472, '\P{Is_Other_ID_Start=	F}', 'deprecated');
Expect(0, 8472, '\P{^Is_Other_ID_Start=	F}', 'deprecated');
Error('\p{Is_OIDS=/a/	False}');
Error('\P{Is_OIDS=/a/	False}');
Expect(1, 8471, '\p{Is_OIDS=false}', 'deprecated');
Expect(0, 8471, '\p{^Is_OIDS=false}', 'deprecated');
Expect(0, 8471, '\P{Is_OIDS=false}', 'deprecated');
Expect(1, 8471, '\P{^Is_OIDS=false}', 'deprecated');
Expect(0, 8472, '\p{Is_OIDS=false}', 'deprecated');
Expect(1, 8472, '\p{^Is_OIDS=false}', 'deprecated');
Expect(1, 8472, '\P{Is_OIDS=false}', 'deprecated');
Expect(0, 8472, '\P{^Is_OIDS=false}', 'deprecated');
Expect(1, 8471, '\p{Is_OIDS=- false}', 'deprecated');
Expect(0, 8471, '\p{^Is_OIDS=- false}', 'deprecated');
Expect(0, 8471, '\P{Is_OIDS=- false}', 'deprecated');
Expect(1, 8471, '\P{^Is_OIDS=- false}', 'deprecated');
Expect(0, 8472, '\p{Is_OIDS=- false}', 'deprecated');
Expect(1, 8472, '\p{^Is_OIDS=- false}', 'deprecated');
Expect(1, 8472, '\P{Is_OIDS=- false}', 'deprecated');
Expect(0, 8472, '\P{^Is_OIDS=- false}', 'deprecated');
Error('\p{Grapheme_Base=	Yes/a/}');
Error('\P{Grapheme_Base=	Yes/a/}');
Expect(1, 126, '\p{Grapheme_Base=yes}', "");
Expect(0, 126, '\p{^Grapheme_Base=yes}', "");
Expect(0, 126, '\P{Grapheme_Base=yes}', "");
Expect(1, 126, '\P{^Grapheme_Base=yes}', "");
Expect(0, 31, '\p{Grapheme_Base=yes}', "");
Expect(1, 31, '\p{^Grapheme_Base=yes}', "");
Expect(1, 31, '\P{Grapheme_Base=yes}', "");
Expect(0, 31, '\P{^Grapheme_Base=yes}', "");
Expect(1, 126, '\p{Grapheme_Base= Yes}', "");
Expect(0, 126, '\p{^Grapheme_Base= Yes}', "");
Expect(0, 126, '\P{Grapheme_Base= Yes}', "");
Expect(1, 126, '\P{^Grapheme_Base= Yes}', "");
Expect(0, 31, '\p{Grapheme_Base= Yes}', "");
Expect(1, 31, '\p{^Grapheme_Base= Yes}', "");
Expect(1, 31, '\P{Grapheme_Base= Yes}', "");
Expect(0, 31, '\P{^Grapheme_Base= Yes}', "");
Error('\p{Gr_Base= -Y:=}');
Error('\P{Gr_Base= -Y:=}');
Expect(1, 126, '\p{Gr_Base=y}', "");
Expect(0, 126, '\p{^Gr_Base=y}', "");
Expect(0, 126, '\P{Gr_Base=y}', "");
Expect(1, 126, '\P{^Gr_Base=y}', "");
Expect(0, 31, '\p{Gr_Base=y}', "");
Expect(1, 31, '\p{^Gr_Base=y}', "");
Expect(1, 31, '\P{Gr_Base=y}', "");
Expect(0, 31, '\P{^Gr_Base=y}', "");
Expect(1, 126, '\p{Gr_Base=	Y}', "");
Expect(0, 126, '\p{^Gr_Base=	Y}', "");
Expect(0, 126, '\P{Gr_Base=	Y}', "");
Expect(1, 126, '\P{^Gr_Base=	Y}', "");
Expect(0, 31, '\p{Gr_Base=	Y}', "");
Expect(1, 31, '\p{^Gr_Base=	Y}', "");
Expect(1, 31, '\P{Gr_Base=	Y}', "");
Expect(0, 31, '\P{^Gr_Base=	Y}', "");
Error('\p{Is_Grapheme_Base: :=_-T}');
Error('\P{Is_Grapheme_Base: :=_-T}');
Expect(1, 126, '\p{Is_Grapheme_Base=t}', "");
Expect(0, 126, '\p{^Is_Grapheme_Base=t}', "");
Expect(0, 126, '\P{Is_Grapheme_Base=t}', "");
Expect(1, 126, '\P{^Is_Grapheme_Base=t}', "");
Expect(0, 31, '\p{Is_Grapheme_Base=t}', "");
Expect(1, 31, '\p{^Is_Grapheme_Base=t}', "");
Expect(1, 31, '\P{Is_Grapheme_Base=t}', "");
Expect(0, 31, '\P{^Is_Grapheme_Base=t}', "");
Expect(1, 126, '\p{Is_Grapheme_Base=--T}', "");
Expect(0, 126, '\p{^Is_Grapheme_Base=--T}', "");
Expect(0, 126, '\P{Is_Grapheme_Base=--T}', "");
Expect(1, 126, '\P{^Is_Grapheme_Base=--T}', "");
Expect(0, 31, '\p{Is_Grapheme_Base=--T}', "");
Expect(1, 31, '\p{^Is_Grapheme_Base=--T}', "");
Expect(1, 31, '\P{Is_Grapheme_Base=--T}', "");
Expect(0, 31, '\P{^Is_Grapheme_Base=--T}', "");
Error('\p{Is_Gr_Base=_true/a/}');
Error('\P{Is_Gr_Base=_true/a/}');
Expect(1, 126, '\p{Is_Gr_Base=true}', "");
Expect(0, 126, '\p{^Is_Gr_Base=true}', "");
Expect(0, 126, '\P{Is_Gr_Base=true}', "");
Expect(1, 126, '\P{^Is_Gr_Base=true}', "");
Expect(0, 31, '\p{Is_Gr_Base=true}', "");
Expect(1, 31, '\p{^Is_Gr_Base=true}', "");
Expect(1, 31, '\P{Is_Gr_Base=true}', "");
Expect(0, 31, '\P{^Is_Gr_Base=true}', "");
Expect(1, 126, '\p{Is_Gr_Base=_-true}', "");
Expect(0, 126, '\p{^Is_Gr_Base=_-true}', "");
Expect(0, 126, '\P{Is_Gr_Base=_-true}', "");
Expect(1, 126, '\P{^Is_Gr_Base=_-true}', "");
Expect(0, 31, '\p{Is_Gr_Base=_-true}', "");
Expect(1, 31, '\p{^Is_Gr_Base=_-true}', "");
Expect(1, 31, '\P{Is_Gr_Base=_-true}', "");
Expect(0, 31, '\P{^Is_Gr_Base=_-true}', "");
Error('\p{Grapheme_Base=/a/_-NO}');
Error('\P{Grapheme_Base=/a/_-NO}');
Expect(1, 31, '\p{Grapheme_Base=no}', "");
Expect(0, 31, '\p{^Grapheme_Base=no}', "");
Expect(0, 31, '\P{Grapheme_Base=no}', "");
Expect(1, 31, '\P{^Grapheme_Base=no}', "");
Expect(0, 126, '\p{Grapheme_Base=no}', "");
Expect(1, 126, '\p{^Grapheme_Base=no}', "");
Expect(1, 126, '\P{Grapheme_Base=no}', "");
Expect(0, 126, '\P{^Grapheme_Base=no}', "");
Expect(1, 31, '\p{Grapheme_Base=No}', "");
Expect(0, 31, '\p{^Grapheme_Base=No}', "");
Expect(0, 31, '\P{Grapheme_Base=No}', "");
Expect(1, 31, '\P{^Grapheme_Base=No}', "");
Expect(0, 126, '\p{Grapheme_Base=No}', "");
Expect(1, 126, '\p{^Grapheme_Base=No}', "");
Expect(1, 126, '\P{Grapheme_Base=No}', "");
Expect(0, 126, '\P{^Grapheme_Base=No}', "");
Error('\p{Gr_Base=-/a/N}');
Error('\P{Gr_Base=-/a/N}');
Expect(1, 31, '\p{Gr_Base=n}', "");
Expect(0, 31, '\p{^Gr_Base=n}', "");
Expect(0, 31, '\P{Gr_Base=n}', "");
Expect(1, 31, '\P{^Gr_Base=n}', "");
Expect(0, 126, '\p{Gr_Base=n}', "");
Expect(1, 126, '\p{^Gr_Base=n}', "");
Expect(1, 126, '\P{Gr_Base=n}', "");
Expect(0, 126, '\P{^Gr_Base=n}', "");
Expect(1, 31, '\p{Gr_Base=_-N}', "");
Expect(0, 31, '\p{^Gr_Base=_-N}', "");
Expect(0, 31, '\P{Gr_Base=_-N}', "");
Expect(1, 31, '\P{^Gr_Base=_-N}', "");
Expect(0, 126, '\p{Gr_Base=_-N}', "");
Expect(1, 126, '\p{^Gr_Base=_-N}', "");
Expect(1, 126, '\P{Gr_Base=_-N}', "");
Expect(0, 126, '\P{^Gr_Base=_-N}', "");
Error('\p{Is_Grapheme_Base=/a/__F}');
Error('\P{Is_Grapheme_Base=/a/__F}');
Expect(1, 31, '\p{Is_Grapheme_Base=f}', "");
Expect(0, 31, '\p{^Is_Grapheme_Base=f}', "");
Expect(0, 31, '\P{Is_Grapheme_Base=f}', "");
Expect(1, 31, '\P{^Is_Grapheme_Base=f}', "");
Expect(0, 126, '\p{Is_Grapheme_Base=f}', "");
Expect(1, 126, '\p{^Is_Grapheme_Base=f}', "");
Expect(1, 126, '\P{Is_Grapheme_Base=f}', "");
Expect(0, 126, '\P{^Is_Grapheme_Base=f}', "");
Expect(1, 31, '\p{Is_Grapheme_Base= F}', "");
Expect(0, 31, '\p{^Is_Grapheme_Base= F}', "");
Expect(0, 31, '\P{Is_Grapheme_Base= F}', "");
Expect(1, 31, '\P{^Is_Grapheme_Base= F}', "");
Expect(0, 126, '\p{Is_Grapheme_Base= F}', "");
Expect(1, 126, '\p{^Is_Grapheme_Base= F}', "");
Expect(1, 126, '\P{Is_Grapheme_Base= F}', "");
Expect(0, 126, '\P{^Is_Grapheme_Base= F}', "");
Error('\p{Is_Gr_Base= /a/False}');
Error('\P{Is_Gr_Base= /a/False}');
Expect(1, 31, '\p{Is_Gr_Base:false}', "");
Expect(0, 31, '\p{^Is_Gr_Base:false}', "");
Expect(0, 31, '\P{Is_Gr_Base:false}', "");
Expect(1, 31, '\P{^Is_Gr_Base:false}', "");
Expect(0, 126, '\p{Is_Gr_Base:false}', "");
Expect(1, 126, '\p{^Is_Gr_Base:false}', "");
Expect(1, 126, '\P{Is_Gr_Base:false}', "");
Expect(0, 126, '\P{^Is_Gr_Base:false}', "");
Expect(1, 31, '\p{Is_Gr_Base=_FALSE}', "");
Expect(0, 31, '\p{^Is_Gr_Base=_FALSE}', "");
Expect(0, 31, '\P{Is_Gr_Base=_FALSE}', "");
Expect(1, 31, '\P{^Is_Gr_Base=_FALSE}', "");
Expect(0, 126, '\p{Is_Gr_Base=_FALSE}', "");
Expect(1, 126, '\p{^Is_Gr_Base=_FALSE}', "");
Expect(1, 126, '\P{Is_Gr_Base=_FALSE}', "");
Expect(0, 126, '\P{^Is_Gr_Base=_FALSE}', "");
Error('\p{Numeric_Value=-_0000:=0000_33}');
Error('\P{Numeric_Value=-_0000:=0000_33}');
Expect(1, 12893, '\p{Numeric_Value=00033}', "");
Expect(0, 12893, '\p{^Numeric_Value=00033}', "");
Expect(0, 12893, '\P{Numeric_Value=00033}', "");
Expect(1, 12893, '\P{^Numeric_Value=00033}', "");
Expect(0, 12892, '\p{Numeric_Value=00033}', "");
Expect(1, 12892, '\p{^Numeric_Value=00033}', "");
Expect(1, 12892, '\P{Numeric_Value=00033}', "");
Expect(0, 12892, '\P{^Numeric_Value=00033}', "");
Error('\p{Nv=:= _00_03-3}');
Error('\P{Nv=:= _00_03-3}');
Expect(1, 12893, '\p{Nv=+00033}', "");
Expect(0, 12893, '\p{^Nv=+00033}', "");
Expect(0, 12893, '\P{Nv=+00033}', "");
Expect(1, 12893, '\P{^Nv=+00033}', "");
Expect(0, 12892, '\p{Nv=+00033}', "");
Expect(1, 12892, '\p{^Nv=+00033}', "");
Expect(1, 12892, '\P{Nv=+00033}', "");
Expect(0, 12892, '\P{^Nv=+00033}', "");
Error('\p{Is_Numeric_Value= -+0000-0003:=3}');
Error('\P{Is_Numeric_Value= -+0000-0003:=3}');
Expect(1, 12893, '\p{Is_Numeric_Value:   00033}', "");
Expect(0, 12893, '\p{^Is_Numeric_Value:   00033}', "");
Expect(0, 12893, '\P{Is_Numeric_Value:   00033}', "");
Expect(1, 12893, '\P{^Is_Numeric_Value:   00033}', "");
Expect(0, 12892, '\p{Is_Numeric_Value:   00033}', "");
Expect(1, 12892, '\p{^Is_Numeric_Value:   00033}', "");
Expect(1, 12892, '\P{Is_Numeric_Value:   00033}', "");
Expect(0, 12892, '\P{^Is_Numeric_Value:   00033}', "");
Error('\p{Is_Nv: - 0-0:=0 0	0_0033}');
Error('\P{Is_Nv: - 0-0:=0 0	0_0033}');
Expect(1, 12893, '\p{Is_Nv=+0_0_0_0_33}', "");
Expect(0, 12893, '\p{^Is_Nv=+0_0_0_0_33}', "");
Expect(0, 12893, '\P{Is_Nv=+0_0_0_0_33}', "");
Expect(1, 12893, '\P{^Is_Nv=+0_0_0_0_33}', "");
Expect(0, 12892, '\p{Is_Nv=+0_0_0_0_33}', "");
Expect(1, 12892, '\p{^Is_Nv=+0_0_0_0_33}', "");
Expect(1, 12892, '\P{Is_Nv=+0_0_0_0_33}', "");
Expect(0, 12892, '\P{^Is_Nv=+0_0_0_0_33}', "");
Error('\p{Numeric_Value:   _:=00000032}');
Error('\P{Numeric_Value:   _:=00000032}');
Expect(1, 12892, '\p{Numeric_Value=00032}', "");
Expect(0, 12892, '\p{^Numeric_Value=00032}', "");
Expect(0, 12892, '\P{Numeric_Value=00032}', "");
Expect(1, 12892, '\P{^Numeric_Value=00032}', "");
Expect(0, 12891, '\p{Numeric_Value=00032}', "");
Expect(1, 12891, '\p{^Numeric_Value=00032}', "");
Expect(1, 12891, '\P{Numeric_Value=00032}', "");
Expect(0, 12891, '\P{^Numeric_Value=00032}', "");
Error('\p{Nv=	:=0_0-0 0-0 0 0_0-032}');
Error('\P{Nv=	:=0_0-0 0-0 0 0_0-032}');
Expect(1, 12892, '\p{Nv=3_2}', "");
Expect(0, 12892, '\p{^Nv=3_2}', "");
Expect(0, 12892, '\P{Nv=3_2}', "");
Expect(1, 12892, '\P{^Nv=3_2}', "");
Expect(0, 12891, '\p{Nv=3_2}', "");
Expect(1, 12891, '\p{^Nv=3_2}', "");
Expect(1, 12891, '\P{Nv=3_2}', "");
Expect(0, 12891, '\P{^Nv=3_2}', "");
Error('\p{Is_Numeric_Value=:=	-+00000000032}');
Error('\P{Is_Numeric_Value=:=	-+00000000032}');
Expect(1, 12892, '\p{Is_Numeric_Value=0032}', "");
Expect(0, 12892, '\p{^Is_Numeric_Value=0032}', "");
Expect(0, 12892, '\P{Is_Numeric_Value=0032}', "");
Expect(1, 12892, '\P{^Is_Numeric_Value=0032}', "");
Expect(0, 12891, '\p{Is_Numeric_Value=0032}', "");
Expect(1, 12891, '\p{^Is_Numeric_Value=0032}', "");
Expect(1, 12891, '\P{Is_Numeric_Value=0032}', "");
Expect(0, 12891, '\P{^Is_Numeric_Value=0032}', "");
Error('\p{Is_Nv=_+000000003 2/a/}');
Error('\P{Is_Nv=_+000000003 2/a/}');
Expect(1, 12892, '\p{Is_Nv=+0_0_0_0_0_32}', "");
Expect(0, 12892, '\p{^Is_Nv=+0_0_0_0_0_32}', "");
Expect(0, 12892, '\P{Is_Nv=+0_0_0_0_0_32}', "");
Expect(1, 12892, '\P{^Is_Nv=+0_0_0_0_0_32}', "");
Expect(0, 12891, '\p{Is_Nv=+0_0_0_0_0_32}', "");
Expect(1, 12891, '\p{^Is_Nv=+0_0_0_0_0_32}', "");
Expect(1, 12891, '\P{Is_Nv=+0_0_0_0_0_32}', "");
Expect(0, 12891, '\P{^Is_Nv=+0_0_0_0_0_32}', "");
Error('\p{Numeric_Value=/a/+0000000003/00000000016}');
Error('\P{Numeric_Value=/a/+0000000003/00000000016}');
Expect(1, 2550, '\p{Numeric_Value=000003/00000016}', "");
Expect(0, 2550, '\p{^Numeric_Value=000003/00000016}', "");
Expect(0, 2550, '\P{Numeric_Value=000003/00000016}', "");
Expect(1, 2550, '\P{^Numeric_Value=000003/00000016}', "");
Expect(0, 2549, '\p{Numeric_Value=000003/00000016}', "");
Expect(1, 2549, '\p{^Numeric_Value=000003/00000016}', "");
Expect(1, 2549, '\P{Numeric_Value=000003/00000016}', "");
Expect(0, 2549, '\P{^Numeric_Value=000003/00000016}', "");
Error('\p{Numeric_Value=0.19}');
Error('\P{Numeric_Value=0.19}');
Expect(1, 2550, '\p{Numeric_Value:   0.188}', "");
Expect(0, 2550, '\p{^Numeric_Value:   0.188}', "");
Expect(0, 2550, '\P{Numeric_Value:   0.188}', "");
Expect(1, 2550, '\P{^Numeric_Value:   0.188}', "");
Expect(0, 2549, '\p{Numeric_Value:   0.188}', "");
Expect(1, 2549, '\p{^Numeric_Value:   0.188}', "");
Expect(1, 2549, '\P{Numeric_Value:   0.188}', "");
Expect(0, 2549, '\P{^Numeric_Value:   0.188}', "");
Error('\p{Nv=:=_+003/000000016}');
Error('\P{Nv=:=_+003/000000016}');
Expect(1, 2550, '\p{Nv=0003/000016}', "");
Expect(0, 2550, '\p{^Nv=0003/000016}', "");
Expect(0, 2550, '\P{Nv=0003/000016}', "");
Expect(1, 2550, '\P{^Nv=0003/000016}', "");
Expect(0, 2549, '\p{Nv=0003/000016}', "");
Expect(1, 2549, '\p{^Nv=0003/000016}', "");
Expect(1, 2549, '\P{Nv=0003/000016}', "");
Expect(0, 2549, '\P{^Nv=0003/000016}', "");
Error('\p{Nv=0.19}');
Error('\P{Nv=0.19}');
Expect(1, 2550, '\p{Nv: 0.188}', "");
Expect(0, 2550, '\p{^Nv: 0.188}', "");
Expect(0, 2550, '\P{Nv: 0.188}', "");
Expect(1, 2550, '\P{^Nv: 0.188}', "");
Expect(0, 2549, '\p{Nv: 0.188}', "");
Expect(1, 2549, '\p{^Nv: 0.188}', "");
Expect(1, 2549, '\P{Nv: 0.188}', "");
Expect(0, 2549, '\P{^Nv: 0.188}', "");
Error('\p{Is_Numeric_Value=	:=+00003/16}');
Error('\P{Is_Numeric_Value=	:=+00003/16}');
Expect(1, 2550, '\p{Is_Numeric_Value=+003/0000000016}', "");
Expect(0, 2550, '\p{^Is_Numeric_Value=+003/0000000016}', "");
Expect(0, 2550, '\P{Is_Numeric_Value=+003/0000000016}', "");
Expect(1, 2550, '\P{^Is_Numeric_Value=+003/0000000016}', "");
Expect(0, 2549, '\p{Is_Numeric_Value=+003/0000000016}', "");
Expect(1, 2549, '\p{^Is_Numeric_Value=+003/0000000016}', "");
Expect(1, 2549, '\P{Is_Numeric_Value=+003/0000000016}', "");
Expect(0, 2549, '\P{^Is_Numeric_Value=+003/0000000016}', "");
Error('\p{Is_Numeric_Value=0.19}');
Error('\P{Is_Numeric_Value=0.19}');
Expect(1, 2550, '\p{Is_Numeric_Value=0.188}', "");
Expect(0, 2550, '\p{^Is_Numeric_Value=0.188}', "");
Expect(0, 2550, '\P{Is_Numeric_Value=0.188}', "");
Expect(1, 2550, '\P{^Is_Numeric_Value=0.188}', "");
Expect(0, 2549, '\p{Is_Numeric_Value=0.188}', "");
Expect(1, 2549, '\p{^Is_Numeric_Value=0.188}', "");
Expect(1, 2549, '\P{Is_Numeric_Value=0.188}', "");
Expect(0, 2549, '\P{^Is_Numeric_Value=0.188}', "");
Error('\p{Is_Nv=/a/ _3/16}');
Error('\P{Is_Nv=/a/ _3/16}');
Expect(1, 2550, '\p{Is_Nv:	003/000016}', "");
Expect(0, 2550, '\p{^Is_Nv:	003/000016}', "");
Expect(0, 2550, '\P{Is_Nv:	003/000016}', "");
Expect(1, 2550, '\P{^Is_Nv:	003/000016}', "");
Expect(0, 2549, '\p{Is_Nv:	003/000016}', "");
Expect(1, 2549, '\p{^Is_Nv:	003/000016}', "");
Expect(1, 2549, '\P{Is_Nv:	003/000016}', "");
Expect(0, 2549, '\P{^Is_Nv:	003/000016}', "");
Error('\p{Is_Nv=0.19}');
Error('\P{Is_Nv=0.19}');
Expect(1, 2550, '\p{Is_Nv=0.188}', "");
Expect(0, 2550, '\p{^Is_Nv=0.188}', "");
Expect(0, 2550, '\P{Is_Nv=0.188}', "");
Expect(1, 2550, '\P{^Is_Nv=0.188}', "");
Expect(0, 2549, '\p{Is_Nv=0.188}', "");
Expect(1, 2549, '\p{^Is_Nv=0.188}', "");
Expect(1, 2549, '\P{Is_Nv=0.188}', "");
Expect(0, 2549, '\P{^Is_Nv=0.188}', "");
Error('\p{Numeric_Value=:=-_00000000021}');
Error('\P{Numeric_Value=:=-_00000000021}');
Expect(1, 12881, '\p{Numeric_Value=+000021}', "");
Expect(0, 12881, '\p{^Numeric_Value=+000021}', "");
Expect(0, 12881, '\P{Numeric_Value=+000021}', "");
Expect(1, 12881, '\P{^Numeric_Value=+000021}', "");
Expect(0, 12880, '\p{Numeric_Value=+000021}', "");
Expect(1, 12880, '\p{^Numeric_Value=+000021}', "");
Expect(1, 12880, '\P{Numeric_Value=+000021}', "");
Expect(0, 12880, '\P{^Numeric_Value=+000021}', "");
Error('\p{Nv=:=-	00	00 02 1}');
Error('\P{Nv=:=-	00	00 02 1}');
Expect(1, 12881, '\p{Nv=2_1}', "");
Expect(0, 12881, '\p{^Nv=2_1}', "");
Expect(0, 12881, '\P{Nv=2_1}', "");
Expect(1, 12881, '\P{^Nv=2_1}', "");
Expect(0, 12880, '\p{Nv=2_1}', "");
Expect(1, 12880, '\p{^Nv=2_1}', "");
Expect(1, 12880, '\P{Nv=2_1}', "");
Expect(0, 12880, '\P{^Nv=2_1}', "");
Error('\p{Is_Numeric_Value=+00000021:=}');
Error('\P{Is_Numeric_Value=+00000021:=}');
Expect(1, 12881, '\p{Is_Numeric_Value=0_0_0_0_0_0_21}', "");
Expect(0, 12881, '\p{^Is_Numeric_Value=0_0_0_0_0_0_21}', "");
Expect(0, 12881, '\P{Is_Numeric_Value=0_0_0_0_0_0_21}', "");
Expect(1, 12881, '\P{^Is_Numeric_Value=0_0_0_0_0_0_21}', "");
Expect(0, 12880, '\p{Is_Numeric_Value=0_0_0_0_0_0_21}', "");
Expect(1, 12880, '\p{^Is_Numeric_Value=0_0_0_0_0_0_21}', "");
Expect(1, 12880, '\P{Is_Numeric_Value=0_0_0_0_0_0_21}', "");
Expect(0, 12880, '\P{^Is_Numeric_Value=0_0_0_0_0_0_21}', "");
Error('\p{Is_Nv=	:=0000000021}');
Error('\P{Is_Nv=	:=0000000021}');
Expect(1, 12881, '\p{Is_Nv:	00_00_00_21}', "");
Expect(0, 12881, '\p{^Is_Nv:	00_00_00_21}', "");
Expect(0, 12881, '\P{Is_Nv:	00_00_00_21}', "");
Expect(1, 12881, '\P{^Is_Nv:	00_00_00_21}', "");
Expect(0, 12880, '\p{Is_Nv:	00_00_00_21}', "");
Expect(1, 12880, '\p{^Is_Nv:	00_00_00_21}', "");
Expect(1, 12880, '\P{Is_Nv:	00_00_00_21}', "");
Expect(0, 12880, '\P{^Is_Nv:	00_00_00_21}', "");
Error('\p{Numeric_Value=-_000000/a/90}');
Error('\P{Numeric_Value=-_000000/a/90}');
Expect(1, 4986, '\p{Numeric_Value=+09_0}', "");
Expect(0, 4986, '\p{^Numeric_Value=+09_0}', "");
Expect(0, 4986, '\P{Numeric_Value=+09_0}', "");
Expect(1, 4986, '\P{^Numeric_Value=+09_0}', "");
Expect(0, 4985, '\p{Numeric_Value=+09_0}', "");
Expect(1, 4985, '\p{^Numeric_Value=+09_0}', "");
Expect(1, 4985, '\P{Numeric_Value=+09_0}', "");
Expect(0, 4985, '\P{^Numeric_Value=+09_0}', "");
Error('\p{Nv:--000090:=}');
Error('\P{Nv:--000090:=}');
Expect(1, 4986, '\p{Nv=0009_0}', "");
Expect(0, 4986, '\p{^Nv=0009_0}', "");
Expect(0, 4986, '\P{Nv=0009_0}', "");
Expect(1, 4986, '\P{^Nv=0009_0}', "");
Expect(0, 4985, '\p{Nv=0009_0}', "");
Expect(1, 4985, '\p{^Nv=0009_0}', "");
Expect(1, 4985, '\P{Nv=0009_0}', "");
Expect(0, 4985, '\P{^Nv=0009_0}', "");
Error('\p{Is_Numeric_Value=:=	 000009_0}');
Error('\P{Is_Numeric_Value=:=	 000009_0}');
Expect(1, 4986, '\p{Is_Numeric_Value=00090}', "");
Expect(0, 4986, '\p{^Is_Numeric_Value=00090}', "");
Expect(0, 4986, '\P{Is_Numeric_Value=00090}', "");
Expect(1, 4986, '\P{^Is_Numeric_Value=00090}', "");
Expect(0, 4985, '\p{Is_Numeric_Value=00090}', "");
Expect(1, 4985, '\p{^Is_Numeric_Value=00090}', "");
Expect(1, 4985, '\P{Is_Numeric_Value=00090}', "");
Expect(0, 4985, '\P{^Is_Numeric_Value=00090}', "");
Error('\p{Is_Nv=_ 000090/a/}');
Error('\P{Is_Nv=_ 000090/a/}');
Expect(1, 4986, '\p{Is_Nv=000090}', "");
Expect(0, 4986, '\p{^Is_Nv=000090}', "");
Expect(0, 4986, '\P{Is_Nv=000090}', "");
Expect(1, 4986, '\P{^Is_Nv=000090}', "");
Expect(0, 4985, '\p{Is_Nv=000090}', "");
Expect(1, 4985, '\p{^Is_Nv=000090}', "");
Expect(1, 4985, '\P{Is_Nv=000090}', "");
Expect(0, 4985, '\P{^Is_Nv=000090}', "");
Error('\p{Numeric_Value=_/a/0000007}');
Error('\P{Numeric_Value=_/a/0000007}');
Expect(1, 55, '\p{Numeric_Value=+000007}', "");
Expect(0, 55, '\p{^Numeric_Value=+000007}', "");
Expect(0, 55, '\P{Numeric_Value=+000007}', "");
Expect(1, 55, '\P{^Numeric_Value=+000007}', "");
Expect(0, 54, '\p{Numeric_Value=+000007}', "");
Expect(1, 54, '\p{^Numeric_Value=+000007}', "");
Expect(1, 54, '\P{Numeric_Value=+000007}', "");
Expect(0, 54, '\P{^Numeric_Value=+000007}', "");
Error('\p{Nv=:=- +0000000007}');
Error('\P{Nv=:=- +0000000007}');
Expect(1, 55, '\p{Nv=+7}', "");
Expect(0, 55, '\p{^Nv=+7}', "");
Expect(0, 55, '\P{Nv=+7}', "");
Expect(1, 55, '\P{^Nv=+7}', "");
Expect(0, 54, '\p{Nv=+7}', "");
Expect(1, 54, '\p{^Nv=+7}', "");
Expect(1, 54, '\P{Nv=+7}', "");
Expect(0, 54, '\P{^Nv=+7}', "");
Error('\p{Is_Numeric_Value=	-0000007/a/}');
Error('\P{Is_Numeric_Value=	-0000007/a/}');
Expect(1, 55, '\p{Is_Numeric_Value=+7}', "");
Expect(0, 55, '\p{^Is_Numeric_Value=+7}', "");
Expect(0, 55, '\P{Is_Numeric_Value=+7}', "");
Expect(1, 55, '\P{^Is_Numeric_Value=+7}', "");
Expect(0, 54, '\p{Is_Numeric_Value=+7}', "");
Expect(1, 54, '\p{^Is_Numeric_Value=+7}', "");
Expect(1, 54, '\P{Is_Numeric_Value=+7}', "");
Expect(0, 54, '\P{^Is_Numeric_Value=+7}', "");
Error('\p{Is_Nv:	-/a/7}');
Error('\P{Is_Nv:	-/a/7}');
Expect(1, 55, '\p{Is_Nv=007}', "");
Expect(0, 55, '\p{^Is_Nv=007}', "");
Expect(0, 55, '\P{Is_Nv=007}', "");
Expect(1, 55, '\P{^Is_Nv=007}', "");
Expect(0, 54, '\p{Is_Nv=007}', "");
Expect(1, 54, '\p{^Is_Nv=007}', "");
Expect(1, 54, '\P{Is_Nv=007}', "");
Expect(0, 54, '\P{^Is_Nv=007}', "");
Error('\p{Numeric_Value= +0600/a/}');
Error('\P{Numeric_Value= +0600/a/}');
Expect(1, 65822, '\p{Numeric_Value=+00_00_00_00_60_0}', "");
Expect(0, 65822, '\p{^Numeric_Value=+00_00_00_00_60_0}', "");
Expect(0, 65822, '\P{Numeric_Value=+00_00_00_00_60_0}', "");
Expect(1, 65822, '\P{^Numeric_Value=+00_00_00_00_60_0}', "");
Expect(0, 65821, '\p{Numeric_Value=+00_00_00_00_60_0}', "");
Expect(1, 65821, '\p{^Numeric_Value=+00_00_00_00_60_0}', "");
Expect(1, 65821, '\P{Numeric_Value=+00_00_00_00_60_0}', "");
Expect(0, 65821, '\P{^Numeric_Value=+00_00_00_00_60_0}', "");
Error('\p{Nv=__+0000600/a/}');
Error('\P{Nv=__+0000600/a/}');
Expect(1, 65822, '\p{Nv=+0000000600}', "");
Expect(0, 65822, '\p{^Nv=+0000000600}', "");
Expect(0, 65822, '\P{Nv=+0000000600}', "");
Expect(1, 65822, '\P{^Nv=+0000000600}', "");
Expect(0, 65821, '\p{Nv=+0000000600}', "");
Expect(1, 65821, '\p{^Nv=+0000000600}', "");
Expect(1, 65821, '\P{Nv=+0000000600}', "");
Expect(0, 65821, '\P{^Nv=+0000000600}', "");
Error('\p{Is_Numeric_Value=	 0_0_0	00_0/a/00600}');
Error('\P{Is_Numeric_Value=	 0_0_0	00_0/a/00600}');
Expect(1, 65822, '\p{Is_Numeric_Value=00060_0}', "");
Expect(0, 65822, '\p{^Is_Numeric_Value=00060_0}', "");
Expect(0, 65822, '\P{Is_Numeric_Value=00060_0}', "");
Expect(1, 65822, '\P{^Is_Numeric_Value=00060_0}', "");
Expect(0, 65821, '\p{Is_Numeric_Value=00060_0}', "");
Expect(1, 65821, '\p{^Is_Numeric_Value=00060_0}', "");
Expect(1, 65821, '\P{Is_Numeric_Value=00060_0}', "");
Expect(0, 65821, '\P{^Is_Numeric_Value=00060_0}', "");
Error('\p{Is_Nv=	_+60/a/0}');
Error('\P{Is_Nv=	_+60/a/0}');
Expect(1, 65822, '\p{Is_Nv=+00000000060_0}', "");
Expect(0, 65822, '\p{^Is_Nv=+00000000060_0}', "");
Expect(0, 65822, '\P{Is_Nv=+00000000060_0}', "");
Expect(1, 65822, '\P{^Is_Nv=+00000000060_0}', "");
Expect(0, 65821, '\p{Is_Nv=+00000000060_0}', "");
Expect(1, 65821, '\p{^Is_Nv=+00000000060_0}', "");
Expect(1, 65821, '\P{Is_Nv=+00000000060_0}', "");
Expect(0, 65821, '\P{^Is_Nv=+00000000060_0}', "");
Error('\p{Numeric_Value=:= _00000000026}');
Error('\P{Numeric_Value=:= _00000000026}');
Expect(1, 12886, '\p{Numeric_Value=0000026}', "");
Expect(0, 12886, '\p{^Numeric_Value=0000026}', "");
Expect(0, 12886, '\P{Numeric_Value=0000026}', "");
Expect(1, 12886, '\P{^Numeric_Value=0000026}', "");
Expect(0, 12885, '\p{Numeric_Value=0000026}', "");
Expect(1, 12885, '\p{^Numeric_Value=0000026}', "");
Expect(1, 12885, '\P{Numeric_Value=0000026}', "");
Expect(0, 12885, '\P{^Numeric_Value=0000026}', "");
Error('\p{Nv=/a/		00000000026}');
Error('\P{Nv=/a/		00000000026}');
Expect(1, 12886, '\p{Nv=00026}', "");
Expect(0, 12886, '\p{^Nv=00026}', "");
Expect(0, 12886, '\P{Nv=00026}', "");
Expect(1, 12886, '\P{^Nv=00026}', "");
Expect(0, 12885, '\p{Nv=00026}', "");
Expect(1, 12885, '\p{^Nv=00026}', "");
Expect(1, 12885, '\P{Nv=00026}', "");
Expect(0, 12885, '\P{^Nv=00026}', "");
Error('\p{Is_Numeric_Value=-/a/+0	0	0	0 0-0_0	026}');
Error('\P{Is_Numeric_Value=-/a/+0	0	0	0 0-0_0	026}');
Expect(1, 12886, '\p{Is_Numeric_Value=+00_02_6}', "");
Expect(0, 12886, '\p{^Is_Numeric_Value=+00_02_6}', "");
Expect(0, 12886, '\P{Is_Numeric_Value=+00_02_6}', "");
Expect(1, 12886, '\P{^Is_Numeric_Value=+00_02_6}', "");
Expect(0, 12885, '\p{Is_Numeric_Value=+00_02_6}', "");
Expect(1, 12885, '\p{^Is_Numeric_Value=+00_02_6}', "");
Expect(1, 12885, '\P{Is_Numeric_Value=+00_02_6}', "");
Expect(0, 12885, '\P{^Is_Numeric_Value=+00_02_6}', "");
Error('\p{Is_Nv= /a/00026}');
Error('\P{Is_Nv= /a/00026}');
Expect(1, 12886, '\p{Is_Nv=+0000026}', "");
Expect(0, 12886, '\p{^Is_Nv=+0000026}', "");
Expect(0, 12886, '\P{Is_Nv=+0000026}', "");
Expect(1, 12886, '\P{^Is_Nv=+0000026}', "");
Expect(0, 12885, '\p{Is_Nv=+0000026}', "");
Expect(1, 12885, '\p{^Is_Nv=+0000026}', "");
Expect(1, 12885, '\P{Is_Nv=+0000026}', "");
Expect(0, 12885, '\P{^Is_Nv=+0000026}', "");
Error('\p{Numeric_Value= :=00000080}');
Error('\P{Numeric_Value= :=00000080}');
Expect(1, 4985, '\p{Numeric_Value=0080}', "");
Expect(0, 4985, '\p{^Numeric_Value=0080}', "");
Expect(0, 4985, '\P{Numeric_Value=0080}', "");
Expect(1, 4985, '\P{^Numeric_Value=0080}', "");
Expect(0, 4984, '\p{Numeric_Value=0080}', "");
Expect(1, 4984, '\p{^Numeric_Value=0080}', "");
Expect(1, 4984, '\P{Numeric_Value=0080}', "");
Expect(0, 4984, '\P{^Numeric_Value=0080}', "");
Error('\p{Nv=-08/a/0}');
Error('\P{Nv=-08/a/0}');
Expect(1, 4985, '\p{Nv=0000000080}', "");
Expect(0, 4985, '\p{^Nv=0000000080}', "");
Expect(0, 4985, '\P{Nv=0000000080}', "");
Expect(1, 4985, '\P{^Nv=0000000080}', "");
Expect(0, 4984, '\p{Nv=0000000080}', "");
Expect(1, 4984, '\p{^Nv=0000000080}', "");
Expect(1, 4984, '\P{Nv=0000000080}', "");
Expect(0, 4984, '\P{^Nv=0000000080}', "");
Error('\p{Is_Numeric_Value=-:=+0008	0}');
Error('\P{Is_Numeric_Value=-:=+0008	0}');
Expect(1, 4985, '\p{Is_Numeric_Value=080}', "");
Expect(0, 4985, '\p{^Is_Numeric_Value=080}', "");
Expect(0, 4985, '\P{Is_Numeric_Value=080}', "");
Expect(1, 4985, '\P{^Is_Numeric_Value=080}', "");
Expect(0, 4984, '\p{Is_Numeric_Value=080}', "");
Expect(1, 4984, '\p{^Is_Numeric_Value=080}', "");
Expect(1, 4984, '\P{Is_Numeric_Value=080}', "");
Expect(0, 4984, '\P{^Is_Numeric_Value=080}', "");
Error('\p{Is_Nv=-	8:=0}');
Error('\P{Is_Nv=-	8:=0}');
Expect(1, 4985, '\p{Is_Nv=0080}', "");
Expect(0, 4985, '\p{^Is_Nv=0080}', "");
Expect(0, 4985, '\P{Is_Nv=0080}', "");
Expect(1, 4985, '\P{^Is_Nv=0080}', "");
Expect(0, 4984, '\p{Is_Nv=0080}', "");
Expect(1, 4984, '\p{^Is_Nv=0080}', "");
Expect(1, 4984, '\P{Is_Nv=0080}', "");
Expect(0, 4984, '\P{^Is_Nv=0080}', "");
Error('\p{Numeric_Value=:= +0	0_2	00}');
Error('\P{Numeric_Value=:= +0	0_2	00}');
Expect(1, 65818, '\p{Numeric_Value=200}', "");
Expect(0, 65818, '\p{^Numeric_Value=200}', "");
Expect(0, 65818, '\P{Numeric_Value=200}', "");
Expect(1, 65818, '\P{^Numeric_Value=200}', "");
Expect(0, 65817, '\p{Numeric_Value=200}', "");
Expect(1, 65817, '\p{^Numeric_Value=200}', "");
Expect(1, 65817, '\P{Numeric_Value=200}', "");
Expect(0, 65817, '\P{^Numeric_Value=200}', "");
Error('\p{Nv=:=	 00000000200}');
Error('\P{Nv=:=	 00000000200}');
Expect(1, 65818, '\p{Nv=000000000200}', "");
Expect(0, 65818, '\p{^Nv=000000000200}', "");
Expect(0, 65818, '\P{Nv=000000000200}', "");
Expect(1, 65818, '\P{^Nv=000000000200}', "");
Expect(0, 65817, '\p{Nv=000000000200}', "");
Expect(1, 65817, '\p{^Nv=000000000200}', "");
Expect(1, 65817, '\P{Nv=000000000200}', "");
Expect(0, 65817, '\P{^Nv=000000000200}', "");
Error('\p{Is_Numeric_Value=- 020	0:=}');
Error('\P{Is_Numeric_Value=- 020	0:=}');
Expect(1, 65818, '\p{Is_Numeric_Value=0_0_0_0_0_200}', "");
Expect(0, 65818, '\p{^Is_Numeric_Value=0_0_0_0_0_200}', "");
Expect(0, 65818, '\P{Is_Numeric_Value=0_0_0_0_0_200}', "");
Expect(1, 65818, '\P{^Is_Numeric_Value=0_0_0_0_0_200}', "");
Expect(0, 65817, '\p{Is_Numeric_Value=0_0_0_0_0_200}', "");
Expect(1, 65817, '\p{^Is_Numeric_Value=0_0_0_0_0_200}', "");
Expect(1, 65817, '\P{Is_Numeric_Value=0_0_0_0_0_200}', "");
Expect(0, 65817, '\P{^Is_Numeric_Value=0_0_0_0_0_200}', "");
Error('\p{Is_Nv= :=+0020-0}');
Error('\P{Is_Nv= :=+0020-0}');
Expect(1, 65818, '\p{Is_Nv=+0000000200}', "");
Expect(0, 65818, '\p{^Is_Nv=+0000000200}', "");
Expect(0, 65818, '\P{Is_Nv=+0000000200}', "");
Expect(1, 65818, '\P{^Is_Nv=+0000000200}', "");
Expect(0, 65817, '\p{Is_Nv=+0000000200}', "");
Expect(1, 65817, '\p{^Is_Nv=+0000000200}', "");
Expect(1, 65817, '\P{Is_Nv=+0000000200}', "");
Expect(0, 65817, '\P{^Is_Nv=+0000000200}', "");
Error('\p{Numeric_Value:	-/a/00 0001_8}');
Error('\P{Numeric_Value:	-/a/00 0001_8}');
Expect(1, 5871, '\p{Numeric_Value=00018}', "");
Expect(0, 5871, '\p{^Numeric_Value=00018}', "");
Expect(0, 5871, '\P{Numeric_Value=00018}', "");
Expect(1, 5871, '\P{^Numeric_Value=00018}', "");
Expect(0, 5870, '\p{Numeric_Value=00018}', "");
Expect(1, 5870, '\p{^Numeric_Value=00018}', "");
Expect(1, 5870, '\P{Numeric_Value=00018}', "");
Expect(0, 5870, '\P{^Numeric_Value=00018}', "");
Error('\p{Nv= /a/00018}');
Error('\P{Nv= /a/00018}');
Expect(1, 5871, '\p{Nv=000018}', "");
Expect(0, 5871, '\p{^Nv=000018}', "");
Expect(0, 5871, '\P{Nv=000018}', "");
Expect(1, 5871, '\P{^Nv=000018}', "");
Expect(0, 5870, '\p{Nv=000018}', "");
Expect(1, 5870, '\p{^Nv=000018}', "");
Expect(1, 5870, '\P{Nv=000018}', "");
Expect(0, 5870, '\P{^Nv=000018}', "");
Error('\p{Is_Numeric_Value=_	+000018:=}');
Error('\P{Is_Numeric_Value=_	+000018:=}');
Expect(1, 5871, '\p{Is_Numeric_Value=00000018}', "");
Expect(0, 5871, '\p{^Is_Numeric_Value=00000018}', "");
Expect(0, 5871, '\P{Is_Numeric_Value=00000018}', "");
Expect(1, 5871, '\P{^Is_Numeric_Value=00000018}', "");
Expect(0, 5870, '\p{Is_Numeric_Value=00000018}', "");
Expect(1, 5870, '\p{^Is_Numeric_Value=00000018}', "");
Expect(1, 5870, '\P{Is_Numeric_Value=00000018}', "");
Expect(0, 5870, '\P{^Is_Numeric_Value=00000018}', "");
Error('\p{Is_Nv= 0000000018:=}');
Error('\P{Is_Nv= 0000000018:=}');
Expect(1, 5871, '\p{Is_Nv=000018}', "");
Expect(0, 5871, '\p{^Is_Nv=000018}', "");
Expect(0, 5871, '\P{Is_Nv=000018}', "");
Expect(1, 5871, '\P{^Is_Nv=000018}', "");
Expect(0, 5870, '\p{Is_Nv=000018}', "");
Expect(1, 5870, '\p{^Is_Nv=000018}', "");
Expect(1, 5870, '\P{Is_Nv=000018}', "");
Expect(0, 5870, '\P{^Is_Nv=000018}', "");
Error('\p{Numeric_Value=-00000003/00000008/a/}');
Error('\P{Numeric_Value=-00000003/00000008/a/}');
Expect(1, 8540, '\p{Numeric_Value=+0003/8}', "");
Expect(0, 8540, '\p{^Numeric_Value=+0003/8}', "");
Expect(0, 8540, '\P{Numeric_Value=+0003/8}', "");
Expect(1, 8540, '\P{^Numeric_Value=+0003/8}', "");
Expect(0, 8539, '\p{Numeric_Value=+0003/8}', "");
Expect(1, 8539, '\p{^Numeric_Value=+0003/8}', "");
Expect(1, 8539, '\P{Numeric_Value=+0003/8}', "");
Expect(0, 8539, '\P{^Numeric_Value=+0003/8}', "");
Error('\p{Numeric_Value=0.38}');
Error('\P{Numeric_Value=0.38}');
Expect(1, 8540, '\p{Numeric_Value=0.375}', "");
Expect(0, 8540, '\p{^Numeric_Value=0.375}', "");
Expect(0, 8540, '\P{Numeric_Value=0.375}', "");
Expect(1, 8540, '\P{^Numeric_Value=0.375}', "");
Expect(0, 8539, '\p{Numeric_Value=0.375}', "");
Expect(1, 8539, '\p{^Numeric_Value=0.375}', "");
Expect(1, 8539, '\P{Numeric_Value=0.375}', "");
Expect(0, 8539, '\P{^Numeric_Value=0.375}', "");
Error('\p{Nv=:=--3/008}');
Error('\P{Nv=:=--3/008}');
Expect(1, 8540, '\p{Nv:	+0000003/000008}', "");
Expect(0, 8540, '\p{^Nv:	+0000003/000008}', "");
Expect(0, 8540, '\P{Nv:	+0000003/000008}', "");
Expect(1, 8540, '\P{^Nv:	+0000003/000008}', "");
Expect(0, 8539, '\p{Nv:	+0000003/000008}', "");
Expect(1, 8539, '\p{^Nv:	+0000003/000008}', "");
Expect(1, 8539, '\P{Nv:	+0000003/000008}', "");
Expect(0, 8539, '\P{^Nv:	+0000003/000008}', "");
Error('\p{Nv=0.38}');
Error('\P{Nv=0.38}');
Expect(1, 8540, '\p{Nv:	0.375}', "");
Expect(0, 8540, '\p{^Nv:	0.375}', "");
Expect(0, 8540, '\P{Nv:	0.375}', "");
Expect(1, 8540, '\P{^Nv:	0.375}', "");
Expect(0, 8539, '\p{Nv:	0.375}', "");
Expect(1, 8539, '\p{^Nv:	0.375}', "");
Expect(1, 8539, '\P{Nv:	0.375}', "");
Expect(0, 8539, '\P{^Nv:	0.375}', "");
Error('\p{Is_Numeric_Value=_000000003/00000008:=}');
Error('\P{Is_Numeric_Value=_000000003/00000008:=}');
Expect(1, 8540, '\p{Is_Numeric_Value=0000000003/00000008}', "");
Expect(0, 8540, '\p{^Is_Numeric_Value=0000000003/00000008}', "");
Expect(0, 8540, '\P{Is_Numeric_Value=0000000003/00000008}', "");
Expect(1, 8540, '\P{^Is_Numeric_Value=0000000003/00000008}', "");
Expect(0, 8539, '\p{Is_Numeric_Value=0000000003/00000008}', "");
Expect(1, 8539, '\p{^Is_Numeric_Value=0000000003/00000008}', "");
Expect(1, 8539, '\P{Is_Numeric_Value=0000000003/00000008}', "");
Expect(0, 8539, '\P{^Is_Numeric_Value=0000000003/00000008}', "");
Error('\p{Is_Numeric_Value:	0.38}');
Error('\P{Is_Numeric_Value:	0.38}');
Expect(1, 8540, '\p{Is_Numeric_Value=0.375}', "");
Expect(0, 8540, '\p{^Is_Numeric_Value=0.375}', "");
Expect(0, 8540, '\P{Is_Numeric_Value=0.375}', "");
Expect(1, 8540, '\P{^Is_Numeric_Value=0.375}', "");
Expect(0, 8539, '\p{Is_Numeric_Value=0.375}', "");
Expect(1, 8539, '\p{^Is_Numeric_Value=0.375}', "");
Expect(1, 8539, '\P{Is_Numeric_Value=0.375}', "");
Expect(0, 8539, '\P{^Is_Numeric_Value=0.375}', "");
Error('\p{Is_Nv=/a/ 0003/0000000008}');
Error('\P{Is_Nv=/a/ 0003/0000000008}');
Expect(1, 8540, '\p{Is_Nv:   0003/008}', "");
Expect(0, 8540, '\p{^Is_Nv:   0003/008}', "");
Expect(0, 8540, '\P{Is_Nv:   0003/008}', "");
Expect(1, 8540, '\P{^Is_Nv:   0003/008}', "");
Expect(0, 8539, '\p{Is_Nv:   0003/008}', "");
Expect(1, 8539, '\p{^Is_Nv:   0003/008}', "");
Expect(1, 8539, '\P{Is_Nv:   0003/008}', "");
Expect(0, 8539, '\P{^Is_Nv:   0003/008}', "");
Error('\p{Is_Nv:   0.38}');
Error('\P{Is_Nv:   0.38}');
Expect(1, 8540, '\p{Is_Nv=0.375}', "");
Expect(0, 8540, '\p{^Is_Nv=0.375}', "");
Expect(0, 8540, '\P{Is_Nv=0.375}', "");
Expect(1, 8540, '\P{^Is_Nv=0.375}', "");
Expect(0, 8539, '\p{Is_Nv=0.375}', "");
Expect(1, 8539, '\p{^Is_Nv=0.375}', "");
Expect(1, 8539, '\P{Is_Nv=0.375}', "");
Expect(0, 8539, '\P{^Is_Nv=0.375}', "");
Error('\p{Numeric_Value:   :=--0500}');
Error('\P{Numeric_Value:   :=--0500}');
Expect(1, 8558, '\p{Numeric_Value: +0_5_00}', "");
Expect(0, 8558, '\p{^Numeric_Value: +0_5_00}', "");
Expect(0, 8558, '\P{Numeric_Value: +0_5_00}', "");
Expect(1, 8558, '\P{^Numeric_Value: +0_5_00}', "");
Expect(0, 8557, '\p{Numeric_Value: +0_5_00}', "");
Expect(1, 8557, '\p{^Numeric_Value: +0_5_00}', "");
Expect(1, 8557, '\P{Numeric_Value: +0_5_00}', "");
Expect(0, 8557, '\P{^Numeric_Value: +0_5_00}', "");
Error('\p{Nv=:= 0000500}');
Error('\P{Nv=:= 0000500}');
Expect(1, 8558, '\p{Nv=+0000000500}', "");
Expect(0, 8558, '\p{^Nv=+0000000500}', "");
Expect(0, 8558, '\P{Nv=+0000000500}', "");
Expect(1, 8558, '\P{^Nv=+0000000500}', "");
Expect(0, 8557, '\p{Nv=+0000000500}', "");
Expect(1, 8557, '\p{^Nv=+0000000500}', "");
Expect(1, 8557, '\P{Nv=+0000000500}', "");
Expect(0, 8557, '\P{^Nv=+0000000500}', "");
Error('\p{Is_Numeric_Value=		+0/a/0_0 0	0_0	0_5	00}');
Error('\P{Is_Numeric_Value=		+0/a/0_0 0	0_0	0_5	00}');
Expect(1, 8558, '\p{Is_Numeric_Value=0_0_0_0_500}', "");
Expect(0, 8558, '\p{^Is_Numeric_Value=0_0_0_0_500}', "");
Expect(0, 8558, '\P{Is_Numeric_Value=0_0_0_0_500}', "");
Expect(1, 8558, '\P{^Is_Numeric_Value=0_0_0_0_500}', "");
Expect(0, 8557, '\p{Is_Numeric_Value=0_0_0_0_500}', "");
Expect(1, 8557, '\p{^Is_Numeric_Value=0_0_0_0_500}', "");
Expect(1, 8557, '\P{Is_Numeric_Value=0_0_0_0_500}', "");
Expect(0, 8557, '\P{^Is_Numeric_Value=0_0_0_0_500}', "");
Error('\p{Is_Nv=	 +0000500/a/}');
Error('\P{Is_Nv=	 +0000500/a/}');
Expect(1, 8558, '\p{Is_Nv=50_0}', "");
Expect(0, 8558, '\p{^Is_Nv=50_0}', "");
Expect(0, 8558, '\P{Is_Nv=50_0}', "");
Expect(1, 8558, '\P{^Is_Nv=50_0}', "");
Expect(0, 8557, '\p{Is_Nv=50_0}', "");
Expect(1, 8557, '\p{^Is_Nv=50_0}', "");
Expect(1, 8557, '\P{Is_Nv=50_0}', "");
Expect(0, 8557, '\P{^Is_Nv=50_0}', "");
Error('\p{Numeric_Value:	 +0:=0-0 0-0 0	0_0-0_16}');
Error('\P{Numeric_Value:	 +0:=0-0 0-0 0	0_0-0_16}');
Expect(1, 2553, '\p{Numeric_Value=+000000016}', "");
Expect(0, 2553, '\p{^Numeric_Value=+000000016}', "");
Expect(0, 2553, '\P{Numeric_Value=+000000016}', "");
Expect(1, 2553, '\P{^Numeric_Value=+000000016}', "");
Expect(0, 2552, '\p{Numeric_Value=+000000016}', "");
Expect(1, 2552, '\p{^Numeric_Value=+000000016}', "");
Expect(1, 2552, '\P{Numeric_Value=+000000016}', "");
Expect(0, 2552, '\P{^Numeric_Value=+000000016}', "");
Error('\p{Nv=	_0016/a/}');
Error('\P{Nv=	_0016/a/}');
Expect(1, 2553, '\p{Nv=00000000016}', "");
Expect(0, 2553, '\p{^Nv=00000000016}', "");
Expect(0, 2553, '\P{Nv=00000000016}', "");
Expect(1, 2553, '\P{^Nv=00000000016}', "");
Expect(0, 2552, '\p{Nv=00000000016}', "");
Expect(1, 2552, '\p{^Nv=00000000016}', "");
Expect(1, 2552, '\P{Nv=00000000016}', "");
Expect(0, 2552, '\P{^Nv=00000000016}', "");
Error('\p{Is_Numeric_Value:	/a/ _0000000016}');
Error('\P{Is_Numeric_Value:	/a/ _0000000016}');
Expect(1, 2553, '\p{Is_Numeric_Value=00000000016}', "");
Expect(0, 2553, '\p{^Is_Numeric_Value=00000000016}', "");
Expect(0, 2553, '\P{Is_Numeric_Value=00000000016}', "");
Expect(1, 2553, '\P{^Is_Numeric_Value=00000000016}', "");
Expect(0, 2552, '\p{Is_Numeric_Value=00000000016}', "");
Expect(1, 2552, '\p{^Is_Numeric_Value=00000000016}', "");
Expect(1, 2552, '\P{Is_Numeric_Value=00000000016}', "");
Expect(0, 2552, '\P{^Is_Numeric_Value=00000000016}', "");
Error('\p{Is_Nv=	 016:=}');
Error('\P{Is_Nv=	 016:=}');
Expect(1, 2553, '\p{Is_Nv=+0000000016}', "");
Expect(0, 2553, '\p{^Is_Nv=+0000000016}', "");
Expect(0, 2553, '\P{Is_Nv=+0000000016}', "");
Expect(1, 2553, '\P{^Is_Nv=+0000000016}', "");
Expect(0, 2552, '\p{Is_Nv=+0000000016}', "");
Expect(1, 2552, '\p{^Is_Nv=+0000000016}', "");
Expect(1, 2552, '\P{Is_Nv=+0000000016}', "");
Expect(0, 2552, '\P{^Is_Nv=+0000000016}', "");
Error('\p{Numeric_Value=/a/ _+04 4}');
Error('\P{Numeric_Value=/a/ _+04 4}');
Expect(1, 12985, '\p{Numeric_Value=00044}', "");
Expect(0, 12985, '\p{^Numeric_Value=00044}', "");
Expect(0, 12985, '\P{Numeric_Value=00044}', "");
Expect(1, 12985, '\P{^Numeric_Value=00044}', "");
Expect(0, 12984, '\p{Numeric_Value=00044}', "");
Expect(1, 12984, '\p{^Numeric_Value=00044}', "");
Expect(1, 12984, '\P{Numeric_Value=00044}', "");
Expect(0, 12984, '\P{^Numeric_Value=00044}', "");
Error('\p{Nv=-44:=}');
Error('\P{Nv=-44:=}');
Expect(1, 12985, '\p{Nv=0_0_0_0_0_0_0_044}', "");
Expect(0, 12985, '\p{^Nv=0_0_0_0_0_0_0_044}', "");
Expect(0, 12985, '\P{Nv=0_0_0_0_0_0_0_044}', "");
Expect(1, 12985, '\P{^Nv=0_0_0_0_0_0_0_044}', "");
Expect(0, 12984, '\p{Nv=0_0_0_0_0_0_0_044}', "");
Expect(1, 12984, '\p{^Nv=0_0_0_0_0_0_0_044}', "");
Expect(1, 12984, '\P{Nv=0_0_0_0_0_0_0_044}', "");
Expect(0, 12984, '\P{^Nv=0_0_0_0_0_0_0_044}', "");
Error('\p{Is_Numeric_Value=-4-4:=}');
Error('\P{Is_Numeric_Value=-4-4:=}');
Expect(1, 12985, '\p{Is_Numeric_Value:	00000044}', "");
Expect(0, 12985, '\p{^Is_Numeric_Value:	00000044}', "");
Expect(0, 12985, '\P{Is_Numeric_Value:	00000044}', "");
Expect(1, 12985, '\P{^Is_Numeric_Value:	00000044}', "");
Expect(0, 12984, '\p{Is_Numeric_Value:	00000044}', "");
Expect(1, 12984, '\p{^Is_Numeric_Value:	00000044}', "");
Expect(1, 12984, '\P{Is_Numeric_Value:	00000044}', "");
Expect(0, 12984, '\P{^Is_Numeric_Value:	00000044}', "");
Error('\p{Is_Nv=/a/00000044}');
Error('\P{Is_Nv=/a/00000044}');
Expect(1, 12985, '\p{Is_Nv=0000044}', "");
Expect(0, 12985, '\p{^Is_Nv=0000044}', "");
Expect(0, 12985, '\P{Is_Nv=0000044}', "");
Expect(1, 12985, '\P{^Is_Nv=0000044}', "");
Expect(0, 12984, '\p{Is_Nv=0000044}', "");
Expect(1, 12984, '\p{^Is_Nv=0000044}', "");
Expect(1, 12984, '\P{Is_Nv=0000044}', "");
Expect(0, 12984, '\P{^Is_Nv=0000044}', "");
Error('\p{Numeric_Value=	/a/027}');
Error('\P{Numeric_Value=	/a/027}');
Expect(1, 12887, '\p{Numeric_Value=000_000_27}', "");
Expect(0, 12887, '\p{^Numeric_Value=000_000_27}', "");
Expect(0, 12887, '\P{Numeric_Value=000_000_27}', "");
Expect(1, 12887, '\P{^Numeric_Value=000_000_27}', "");
Expect(0, 12886, '\p{Numeric_Value=000_000_27}', "");
Expect(1, 12886, '\p{^Numeric_Value=000_000_27}', "");
Expect(1, 12886, '\P{Numeric_Value=000_000_27}', "");
Expect(0, 12886, '\P{^Numeric_Value=000_000_27}', "");
Error('\p{Nv=	:=0000027}');
Error('\P{Nv=	:=0000027}');
Expect(1, 12887, '\p{Nv=0000027}', "");
Expect(0, 12887, '\p{^Nv=0000027}', "");
Expect(0, 12887, '\P{Nv=0000027}', "");
Expect(1, 12887, '\P{^Nv=0000027}', "");
Expect(0, 12886, '\p{Nv=0000027}', "");
Expect(1, 12886, '\p{^Nv=0000027}', "");
Expect(1, 12886, '\P{Nv=0000027}', "");
Expect(0, 12886, '\P{^Nv=0000027}', "");
Error('\p{Is_Numeric_Value:-	+27/a/}');
Error('\P{Is_Numeric_Value:-	+27/a/}');
Expect(1, 12887, '\p{Is_Numeric_Value=+00_02_7}', "");
Expect(0, 12887, '\p{^Is_Numeric_Value=+00_02_7}', "");
Expect(0, 12887, '\P{Is_Numeric_Value=+00_02_7}', "");
Expect(1, 12887, '\P{^Is_Numeric_Value=+00_02_7}', "");
Expect(0, 12886, '\p{Is_Numeric_Value=+00_02_7}', "");
Expect(1, 12886, '\p{^Is_Numeric_Value=+00_02_7}', "");
Expect(1, 12886, '\P{Is_Numeric_Value=+00_02_7}', "");
Expect(0, 12886, '\P{^Is_Numeric_Value=+00_02_7}', "");
Error('\p{Is_Nv=_:=+27}');
Error('\P{Is_Nv=_:=+27}');
Expect(1, 12887, '\p{Is_Nv=0000027}', "");
Expect(0, 12887, '\p{^Is_Nv=0000027}', "");
Expect(0, 12887, '\P{Is_Nv=0000027}', "");
Expect(1, 12887, '\P{^Is_Nv=0000027}', "");
Expect(0, 12886, '\p{Is_Nv=0000027}', "");
Expect(1, 12886, '\p{^Is_Nv=0000027}', "");
Expect(1, 12886, '\P{Is_Nv=0000027}', "");
Expect(0, 12886, '\P{^Is_Nv=0000027}', "");
Error('\p{Numeric_Value=--+0	0_0	0	01-0_0_000000/a/}');
Error('\P{Numeric_Value=--+0	0_0	0	01-0_0_000000/a/}');
Expect(1, 20159, '\p{Numeric_Value: 0000000100000000}', "");
Expect(0, 20159, '\p{^Numeric_Value: 0000000100000000}', "");
Expect(0, 20159, '\P{Numeric_Value: 0000000100000000}', "");
Expect(1, 20159, '\P{^Numeric_Value: 0000000100000000}', "");
Expect(0, 20158, '\p{Numeric_Value: 0000000100000000}', "");
Expect(1, 20158, '\p{^Numeric_Value: 0000000100000000}', "");
Expect(1, 20158, '\P{Numeric_Value: 0000000100000000}', "");
Expect(0, 20158, '\P{^Numeric_Value: 0000000100000000}', "");
Error('\p{Nv=:=001 000_000 00}');
Error('\P{Nv=:=001 000_000 00}');
Expect(1, 20159, '\p{Nv=+000100000000}', "");
Expect(0, 20159, '\p{^Nv=+000100000000}', "");
Expect(0, 20159, '\P{Nv=+000100000000}', "");
Expect(1, 20159, '\P{^Nv=+000100000000}', "");
Expect(0, 20158, '\p{Nv=+000100000000}', "");
Expect(1, 20158, '\p{^Nv=+000100000000}', "");
Expect(1, 20158, '\P{Nv=+000100000000}', "");
Expect(0, 20158, '\P{^Nv=+000100000000}', "");
Error('\p{Is_Numeric_Value=		000000100000000/a/}');
Error('\P{Is_Numeric_Value=		000000100000000/a/}');
Expect(1, 20159, '\p{Is_Numeric_Value=+000000000100000000}', "");
Expect(0, 20159, '\p{^Is_Numeric_Value=+000000000100000000}', "");
Expect(0, 20159, '\P{Is_Numeric_Value=+000000000100000000}', "");
Expect(1, 20159, '\P{^Is_Numeric_Value=+000000000100000000}', "");
Expect(0, 20158, '\p{Is_Numeric_Value=+000000000100000000}', "");
Expect(1, 20158, '\p{^Is_Numeric_Value=+000000000100000000}', "");
Expect(1, 20158, '\P{Is_Numeric_Value=+000000000100000000}', "");
Expect(0, 20158, '\P{^Is_Numeric_Value=+000000000100000000}', "");
Error('\p{Is_Nv=-+000	0/a/0-0-00_1_0000	0-000}');
Error('\P{Is_Nv=-+000	0/a/0-0-00_1_0000	0-000}');
Expect(1, 20159, '\p{Is_Nv=+0_0_0_0_0_0_0_0_1_0_0000000}', "");
Expect(0, 20159, '\p{^Is_Nv=+0_0_0_0_0_0_0_0_1_0_0000000}', "");
Expect(0, 20159, '\P{Is_Nv=+0_0_0_0_0_0_0_0_1_0_0000000}', "");
Expect(1, 20159, '\P{^Is_Nv=+0_0_0_0_0_0_0_0_1_0_0000000}', "");
Expect(0, 20158, '\p{Is_Nv=+0_0_0_0_0_0_0_0_1_0_0000000}', "");
Expect(1, 20158, '\p{^Is_Nv=+0_0_0_0_0_0_0_0_1_0_0000000}', "");
Expect(1, 20158, '\P{Is_Nv=+0_0_0_0_0_0_0_0_1_0_0000000}', "");
Expect(0, 20158, '\P{^Is_Nv=+0_0_0_0_0_0_0_0_1_0_0000000}', "");
Error('\p{Numeric_Value=  +00000001/000010:=}');
Error('\P{Numeric_Value=  +00000001/000010:=}');
Expect(1, 8530, '\p{Numeric_Value=+000001/010}', "");
Expect(0, 8530, '\p{^Numeric_Value=+000001/010}', "");
Expect(0, 8530, '\P{Numeric_Value=+000001/010}', "");
Expect(1, 8530, '\P{^Numeric_Value=+000001/010}', "");
Expect(0, 8529, '\p{Numeric_Value=+000001/010}', "");
Expect(1, 8529, '\p{^Numeric_Value=+000001/010}', "");
Expect(1, 8529, '\P{Numeric_Value=+000001/010}', "");
Expect(0, 8529, '\P{^Numeric_Value=+000001/010}', "");
Expect(1, 8530, '\p{Numeric_Value=0.100}', "");
Expect(0, 8530, '\p{^Numeric_Value=0.100}', "");
Expect(0, 8530, '\P{Numeric_Value=0.100}', "");
Expect(1, 8530, '\P{^Numeric_Value=0.100}', "");
Expect(0, 8529, '\p{Numeric_Value=0.100}', "");
Expect(1, 8529, '\p{^Numeric_Value=0.100}', "");
Expect(1, 8529, '\P{Numeric_Value=0.100}', "");
Expect(0, 8529, '\P{^Numeric_Value=0.100}', "");
Error('\p{Nv=	:=00000001/000010}');
Error('\P{Nv=	:=00000001/000010}');
Expect(1, 8530, '\p{Nv=+00001/000010}', "");
Expect(0, 8530, '\p{^Nv=+00001/000010}', "");
Expect(0, 8530, '\P{Nv=+00001/000010}', "");
Expect(1, 8530, '\P{^Nv=+00001/000010}', "");
Expect(0, 8529, '\p{Nv=+00001/000010}', "");
Expect(1, 8529, '\p{^Nv=+00001/000010}', "");
Expect(1, 8529, '\P{Nv=+00001/000010}', "");
Expect(0, 8529, '\P{^Nv=+00001/000010}', "");
Expect(1, 8530, '\p{Nv=0.100}', "");
Expect(0, 8530, '\p{^Nv=0.100}', "");
Expect(0, 8530, '\P{Nv=0.100}', "");
Expect(1, 8530, '\P{^Nv=0.100}', "");
Expect(0, 8529, '\p{Nv=0.100}', "");
Expect(1, 8529, '\p{^Nv=0.100}', "");
Expect(1, 8529, '\P{Nv=0.100}', "");
Expect(0, 8529, '\P{^Nv=0.100}', "");
Error('\p{Is_Numeric_Value=	/a/00001/0000010}');
Error('\P{Is_Numeric_Value=	/a/00001/0000010}');
Expect(1, 8530, '\p{Is_Numeric_Value=00001/0010}', "");
Expect(0, 8530, '\p{^Is_Numeric_Value=00001/0010}', "");
Expect(0, 8530, '\P{Is_Numeric_Value=00001/0010}', "");
Expect(1, 8530, '\P{^Is_Numeric_Value=00001/0010}', "");
Expect(0, 8529, '\p{Is_Numeric_Value=00001/0010}', "");
Expect(1, 8529, '\p{^Is_Numeric_Value=00001/0010}', "");
Expect(1, 8529, '\P{Is_Numeric_Value=00001/0010}', "");
Expect(0, 8529, '\P{^Is_Numeric_Value=00001/0010}', "");
Expect(1, 8530, '\p{Is_Numeric_Value=0.100}', "");
Expect(0, 8530, '\p{^Is_Numeric_Value=0.100}', "");
Expect(0, 8530, '\P{Is_Numeric_Value=0.100}', "");
Expect(1, 8530, '\P{^Is_Numeric_Value=0.100}', "");
Expect(0, 8529, '\p{Is_Numeric_Value=0.100}', "");
Expect(1, 8529, '\p{^Is_Numeric_Value=0.100}', "");
Expect(1, 8529, '\P{Is_Numeric_Value=0.100}', "");
Expect(0, 8529, '\P{^Is_Numeric_Value=0.100}', "");
Error('\p{Is_Nv= :=00000001/010}');
Error('\P{Is_Nv= :=00000001/010}');
Expect(1, 8530, '\p{Is_Nv=00000001/00000000010}', "");
Expect(0, 8530, '\p{^Is_Nv=00000001/00000000010}', "");
Expect(0, 8530, '\P{Is_Nv=00000001/00000000010}', "");
Expect(1, 8530, '\P{^Is_Nv=00000001/00000000010}', "");
Expect(0, 8529, '\p{Is_Nv=00000001/00000000010}', "");
Expect(1, 8529, '\p{^Is_Nv=00000001/00000000010}', "");
Expect(1, 8529, '\P{Is_Nv=00000001/00000000010}', "");
Expect(0, 8529, '\P{^Is_Nv=00000001/00000000010}', "");
Expect(1, 8530, '\p{Is_Nv=0.100}', "");
Expect(0, 8530, '\p{^Is_Nv=0.100}', "");
Expect(0, 8530, '\P{Is_Nv=0.100}', "");
Expect(1, 8530, '\P{^Is_Nv=0.100}', "");
Expect(0, 8529, '\p{Is_Nv=0.100}', "");
Expect(1, 8529, '\p{^Is_Nv=0.100}', "");
Expect(1, 8529, '\P{Is_Nv=0.100}', "");
Expect(0, 8529, '\P{^Is_Nv=0.100}', "");
Error('\p{Numeric_Value=_0000400/a/}');
Error('\P{Numeric_Value=_0000400/a/}');
Expect(1, 65820, '\p{Numeric_Value=0000400}', "");
Expect(0, 65820, '\p{^Numeric_Value=0000400}', "");
Expect(0, 65820, '\P{Numeric_Value=0000400}', "");
Expect(1, 65820, '\P{^Numeric_Value=0000400}', "");
Expect(0, 65819, '\p{Numeric_Value=0000400}', "");
Expect(1, 65819, '\p{^Numeric_Value=0000400}', "");
Expect(1, 65819, '\P{Numeric_Value=0000400}', "");
Expect(0, 65819, '\P{^Numeric_Value=0000400}', "");
Error('\p{Nv=:=+00000400}');
Error('\P{Nv=:=+00000400}');
Expect(1, 65820, '\p{Nv=0000000400}', "");
Expect(0, 65820, '\p{^Nv=0000000400}', "");
Expect(0, 65820, '\P{Nv=0000000400}', "");
Expect(1, 65820, '\P{^Nv=0000000400}', "");
Expect(0, 65819, '\p{Nv=0000000400}', "");
Expect(1, 65819, '\p{^Nv=0000000400}', "");
Expect(1, 65819, '\P{Nv=0000000400}', "");
Expect(0, 65819, '\P{^Nv=0000000400}', "");
Error('\p{Is_Numeric_Value=0000000400:=}');
Error('\P{Is_Numeric_Value=0000000400:=}');
Expect(1, 65820, '\p{Is_Numeric_Value=+0000000400}', "");
Expect(0, 65820, '\p{^Is_Numeric_Value=+0000000400}', "");
Expect(0, 65820, '\P{Is_Numeric_Value=+0000000400}', "");
Expect(1, 65820, '\P{^Is_Numeric_Value=+0000000400}', "");
Expect(0, 65819, '\p{Is_Numeric_Value=+0000000400}', "");
Expect(1, 65819, '\p{^Is_Numeric_Value=+0000000400}', "");
Expect(1, 65819, '\P{Is_Numeric_Value=+0000000400}', "");
Expect(0, 65819, '\P{^Is_Numeric_Value=+0000000400}', "");
Error('\p{Is_Nv:   _/a/400}');
Error('\P{Is_Nv:   _/a/400}');
Expect(1, 65820, '\p{Is_Nv=0000400}', "");
Expect(0, 65820, '\p{^Is_Nv=0000400}', "");
Expect(0, 65820, '\P{Is_Nv=0000400}', "");
Expect(1, 65820, '\P{^Is_Nv=0000400}', "");
Expect(0, 65819, '\p{Is_Nv=0000400}', "");
Expect(1, 65819, '\p{^Is_Nv=0000400}', "");
Expect(1, 65819, '\P{Is_Nv=0000400}', "");
Expect(0, 65819, '\P{^Is_Nv=0000400}', "");
Error('\p{Numeric_Value= 000000005/00000008:=}');
Error('\P{Numeric_Value= 000000005/00000008:=}');
Expect(1, 8541, '\p{Numeric_Value=+05/00008}', "");
Expect(0, 8541, '\p{^Numeric_Value=+05/00008}', "");
Expect(0, 8541, '\P{Numeric_Value=+05/00008}', "");
Expect(1, 8541, '\P{^Numeric_Value=+05/00008}', "");
Expect(0, 8540, '\p{Numeric_Value=+05/00008}', "");
Expect(1, 8540, '\p{^Numeric_Value=+05/00008}', "");
Expect(1, 8540, '\P{Numeric_Value=+05/00008}', "");
Expect(0, 8540, '\P{^Numeric_Value=+05/00008}', "");
Error('\p{Numeric_Value=0.62}');
Error('\P{Numeric_Value=0.62}');
Expect(1, 8541, '\p{Numeric_Value=0.625}', "");
Expect(0, 8541, '\p{^Numeric_Value=0.625}', "");
Expect(0, 8541, '\P{Numeric_Value=0.625}', "");
Expect(1, 8541, '\P{^Numeric_Value=0.625}', "");
Expect(0, 8540, '\p{Numeric_Value=0.625}', "");
Expect(1, 8540, '\p{^Numeric_Value=0.625}', "");
Expect(1, 8540, '\P{Numeric_Value=0.625}', "");
Expect(0, 8540, '\P{^Numeric_Value=0.625}', "");
Error('\p{Nv=000005/08:=}');
Error('\P{Nv=000005/08:=}');
Expect(1, 8541, '\p{Nv: +000000005/000000008}', "");
Expect(0, 8541, '\p{^Nv: +000000005/000000008}', "");
Expect(0, 8541, '\P{Nv: +000000005/000000008}', "");
Expect(1, 8541, '\P{^Nv: +000000005/000000008}', "");
Expect(0, 8540, '\p{Nv: +000000005/000000008}', "");
Expect(1, 8540, '\p{^Nv: +000000005/000000008}', "");
Expect(1, 8540, '\P{Nv: +000000005/000000008}', "");
Expect(0, 8540, '\P{^Nv: +000000005/000000008}', "");
Error('\p{Nv:	0.62}');
Error('\P{Nv:	0.62}');
Expect(1, 8541, '\p{Nv=0.625}', "");
Expect(0, 8541, '\p{^Nv=0.625}', "");
Expect(0, 8541, '\P{Nv=0.625}', "");
Expect(1, 8541, '\P{^Nv=0.625}', "");
Expect(0, 8540, '\p{Nv=0.625}', "");
Expect(1, 8540, '\p{^Nv=0.625}', "");
Expect(1, 8540, '\P{Nv=0.625}', "");
Expect(0, 8540, '\P{^Nv=0.625}', "");
Error('\p{Is_Numeric_Value:   		+00005/0000000008:=}');
Error('\P{Is_Numeric_Value:   		+00005/0000000008:=}');
Expect(1, 8541, '\p{Is_Numeric_Value=05/0000000008}', "");
Expect(0, 8541, '\p{^Is_Numeric_Value=05/0000000008}', "");
Expect(0, 8541, '\P{Is_Numeric_Value=05/0000000008}', "");
Expect(1, 8541, '\P{^Is_Numeric_Value=05/0000000008}', "");
Expect(0, 8540, '\p{Is_Numeric_Value=05/0000000008}', "");
Expect(1, 8540, '\p{^Is_Numeric_Value=05/0000000008}', "");
Expect(1, 8540, '\P{Is_Numeric_Value=05/0000000008}', "");
Expect(0, 8540, '\P{^Is_Numeric_Value=05/0000000008}', "");
Error('\p{Is_Numeric_Value=0.62}');
Error('\P{Is_Numeric_Value=0.62}');
Expect(1, 8541, '\p{Is_Numeric_Value=0.625}', "");
Expect(0, 8541, '\p{^Is_Numeric_Value=0.625}', "");
Expect(0, 8541, '\P{Is_Numeric_Value=0.625}', "");
Expect(1, 8541, '\P{^Is_Numeric_Value=0.625}', "");
Expect(0, 8540, '\p{Is_Numeric_Value=0.625}', "");
Expect(1, 8540, '\p{^Is_Numeric_Value=0.625}', "");
Expect(1, 8540, '\P{Is_Numeric_Value=0.625}', "");
Expect(0, 8540, '\P{^Is_Numeric_Value=0.625}', "");
Error('\p{Is_Nv=:=+000005/008}');
Error('\P{Is_Nv=:=+000005/008}');
Expect(1, 8541, '\p{Is_Nv=00000005/000008}', "");
Expect(0, 8541, '\p{^Is_Nv=00000005/000008}', "");
Expect(0, 8541, '\P{Is_Nv=00000005/000008}', "");
Expect(1, 8541, '\P{^Is_Nv=00000005/000008}', "");
Expect(0, 8540, '\p{Is_Nv=00000005/000008}', "");
Expect(1, 8540, '\p{^Is_Nv=00000005/000008}', "");
Expect(1, 8540, '\P{Is_Nv=00000005/000008}', "");
Expect(0, 8540, '\P{^Is_Nv=00000005/000008}', "");
Error('\p{Is_Nv=0.62}');
Error('\P{Is_Nv=0.62}');
Expect(1, 8541, '\p{Is_Nv=0.625}', "");
Expect(0, 8541, '\p{^Is_Nv=0.625}', "");
Expect(0, 8541, '\P{Is_Nv=0.625}', "");
Expect(1, 8541, '\P{^Is_Nv=0.625}', "");
Expect(0, 8540, '\p{Is_Nv=0.625}', "");
Expect(1, 8540, '\p{^Is_Nv=0.625}', "");
Expect(1, 8540, '\P{Is_Nv=0.625}', "");
Expect(0, 8540, '\P{^Is_Nv=0.625}', "");
Error('\p{Numeric_Value=:=- +000020}');
Error('\P{Numeric_Value=:=- +000020}');
Expect(1, 4979, '\p{Numeric_Value:2_0}', "");
Expect(0, 4979, '\p{^Numeric_Value:2_0}', "");
Expect(0, 4979, '\P{Numeric_Value:2_0}', "");
Expect(1, 4979, '\P{^Numeric_Value:2_0}', "");
Expect(0, 4978, '\p{Numeric_Value:2_0}', "");
Expect(1, 4978, '\p{^Numeric_Value:2_0}', "");
Expect(1, 4978, '\P{Numeric_Value:2_0}', "");
Expect(0, 4978, '\P{^Numeric_Value:2_0}', "");
Error('\p{Nv=	:=000000020}');
Error('\P{Nv=	:=000000020}');
Expect(1, 4979, '\p{Nv=+0000020}', "");
Expect(0, 4979, '\p{^Nv=+0000020}', "");
Expect(0, 4979, '\P{Nv=+0000020}', "");
Expect(1, 4979, '\P{^Nv=+0000020}', "");
Expect(0, 4978, '\p{Nv=+0000020}', "");
Expect(1, 4978, '\p{^Nv=+0000020}', "");
Expect(1, 4978, '\P{Nv=+0000020}', "");
Expect(0, 4978, '\P{^Nv=+0000020}', "");
Error('\p{Is_Numeric_Value= /a/0-0	0020}');
Error('\P{Is_Numeric_Value= /a/0-0	0020}');
Expect(1, 4979, '\p{Is_Numeric_Value=020}', "");
Expect(0, 4979, '\p{^Is_Numeric_Value=020}', "");
Expect(0, 4979, '\P{Is_Numeric_Value=020}', "");
Expect(1, 4979, '\P{^Is_Numeric_Value=020}', "");
Expect(0, 4978, '\p{Is_Numeric_Value=020}', "");
Expect(1, 4978, '\p{^Is_Numeric_Value=020}', "");
Expect(1, 4978, '\P{Is_Numeric_Value=020}', "");
Expect(0, 4978, '\P{^Is_Numeric_Value=020}', "");
Error('\p{Is_Nv=_0-0-00:=0	020}');
Error('\P{Is_Nv=_0-0-00:=0	020}');
Expect(1, 4979, '\p{Is_Nv=2_0}', "");
Expect(0, 4979, '\p{^Is_Nv=2_0}', "");
Expect(0, 4979, '\P{Is_Nv=2_0}', "");
Expect(1, 4979, '\P{^Is_Nv=2_0}', "");
Expect(0, 4978, '\p{Is_Nv=2_0}', "");
Expect(1, 4978, '\p{^Is_Nv=2_0}', "");
Expect(1, 4978, '\P{Is_Nv=2_0}', "");
Expect(0, 4978, '\P{^Is_Nv=2_0}', "");
Error('\p{Numeric_Value=/a/000_000	300 00}');
Error('\P{Numeric_Value=/a/000_000	300 00}');
Expect(1, 65837, '\p{Numeric_Value=0000_3000_0}', "");
Expect(0, 65837, '\p{^Numeric_Value=0000_3000_0}', "");
Expect(0, 65837, '\P{Numeric_Value=0000_3000_0}', "");
Expect(1, 65837, '\P{^Numeric_Value=0000_3000_0}', "");
Expect(0, 65836, '\p{Numeric_Value=0000_3000_0}', "");
Expect(1, 65836, '\p{^Numeric_Value=0000_3000_0}', "");
Expect(1, 65836, '\P{Numeric_Value=0000_3000_0}', "");
Expect(0, 65836, '\P{^Numeric_Value=0000_3000_0}', "");
Error('\p{Nv= 0/a/0 0	0-0	300_00}');
Error('\P{Nv= 0/a/0 0	0-0	300_00}');
Expect(1, 65837, '\p{Nv=00000000030000}', "");
Expect(0, 65837, '\p{^Nv=00000000030000}', "");
Expect(0, 65837, '\P{Nv=00000000030000}', "");
Expect(1, 65837, '\P{^Nv=00000000030000}', "");
Expect(0, 65836, '\p{Nv=00000000030000}', "");
Expect(1, 65836, '\p{^Nv=00000000030000}', "");
Expect(1, 65836, '\P{Nv=00000000030000}', "");
Expect(0, 65836, '\P{^Nv=00000000030000}', "");
Error('\p{Is_Numeric_Value=:=  00030000}');
Error('\P{Is_Numeric_Value=:=  00030000}');
Expect(1, 65837, '\p{Is_Numeric_Value=00000000030000}', "");
Expect(0, 65837, '\p{^Is_Numeric_Value=00000000030000}', "");
Expect(0, 65837, '\P{Is_Numeric_Value=00000000030000}', "");
Expect(1, 65837, '\P{^Is_Numeric_Value=00000000030000}', "");
Expect(0, 65836, '\p{Is_Numeric_Value=00000000030000}', "");
Expect(1, 65836, '\p{^Is_Numeric_Value=00000000030000}', "");
Expect(1, 65836, '\P{Is_Numeric_Value=00000000030000}', "");
Expect(0, 65836, '\P{^Is_Numeric_Value=00000000030000}', "");
Error('\p{Is_Nv=--0-00	00/a/000030000}');
Error('\P{Is_Nv=--0-00	00/a/000030000}');
Expect(1, 65837, '\p{Is_Nv=3_0_0_00}', "");
Expect(0, 65837, '\p{^Is_Nv=3_0_0_00}', "");
Expect(0, 65837, '\P{Is_Nv=3_0_0_00}', "");
Expect(1, 65837, '\P{^Is_Nv=3_0_0_00}', "");
Expect(0, 65836, '\p{Is_Nv=3_0_0_00}', "");
Expect(1, 65836, '\p{^Is_Nv=3_0_0_00}', "");
Expect(1, 65836, '\P{Is_Nv=3_0_0_00}', "");
Expect(0, 65836, '\P{^Is_Nv=3_0_0_00}', "");
Error('\p{Numeric_Value=__0:=0 0	0 0-0010}');
Error('\P{Numeric_Value=__0:=0 0	0 0-0010}');
Expect(1, 3056, '\p{Numeric_Value=00010}', "");
Expect(0, 3056, '\p{^Numeric_Value=00010}', "");
Expect(0, 3056, '\P{Numeric_Value=00010}', "");
Expect(1, 3056, '\P{^Numeric_Value=00010}', "");
Expect(0, 3055, '\p{Numeric_Value=00010}', "");
Expect(1, 3055, '\p{^Numeric_Value=00010}', "");
Expect(1, 3055, '\P{Numeric_Value=00010}', "");
Expect(0, 3055, '\P{^Numeric_Value=00010}', "");
Error('\p{Nv=	/a/+0_0	0-10}');
Error('\P{Nv=	/a/+0_0	0-10}');
Expect(1, 3056, '\p{Nv=00010}', "");
Expect(0, 3056, '\p{^Nv=00010}', "");
Expect(0, 3056, '\P{Nv=00010}', "");
Expect(1, 3056, '\P{^Nv=00010}', "");
Expect(0, 3055, '\p{Nv=00010}', "");
Expect(1, 3055, '\p{^Nv=00010}', "");
Expect(1, 3055, '\P{Nv=00010}', "");
Expect(0, 3055, '\P{^Nv=00010}', "");
Error('\p{Is_Numeric_Value= 	0 0-0:=0_010}');
Error('\P{Is_Numeric_Value= 	0 0-0:=0_010}');
Expect(1, 3056, '\p{Is_Numeric_Value=+1_0}', "");
Expect(0, 3056, '\p{^Is_Numeric_Value=+1_0}', "");
Expect(0, 3056, '\P{Is_Numeric_Value=+1_0}', "");
Expect(1, 3056, '\P{^Is_Numeric_Value=+1_0}', "");
Expect(0, 3055, '\p{Is_Numeric_Value=+1_0}', "");
Expect(1, 3055, '\p{^Is_Numeric_Value=+1_0}', "");
Expect(1, 3055, '\P{Is_Numeric_Value=+1_0}', "");
Expect(0, 3055, '\P{^Is_Numeric_Value=+1_0}', "");
Error('\p{Is_Nv:		1-0/a/}');
Error('\P{Is_Nv:		1-0/a/}');
Expect(1, 3056, '\p{Is_Nv=00_00_01_0}', "");
Expect(0, 3056, '\p{^Is_Nv=00_00_01_0}', "");
Expect(0, 3056, '\P{Is_Nv=00_00_01_0}', "");
Expect(1, 3056, '\P{^Is_Nv=00_00_01_0}', "");
Expect(0, 3055, '\p{Is_Nv=00_00_01_0}', "");
Expect(1, 3055, '\p{^Is_Nv=00_00_01_0}', "");
Expect(1, 3055, '\P{Is_Nv=00_00_01_0}', "");
Expect(0, 3055, '\P{^Is_Nv=00_00_01_0}', "");
Error('\p{Numeric_Value=_ 031/a/}');
Error('\P{Numeric_Value=_ 031/a/}');
Expect(1, 12891, '\p{Numeric_Value=0_0_31}', "");
Expect(0, 12891, '\p{^Numeric_Value=0_0_31}', "");
Expect(0, 12891, '\P{Numeric_Value=0_0_31}', "");
Expect(1, 12891, '\P{^Numeric_Value=0_0_31}', "");
Expect(0, 12890, '\p{Numeric_Value=0_0_31}', "");
Expect(1, 12890, '\p{^Numeric_Value=0_0_31}', "");
Expect(1, 12890, '\P{Numeric_Value=0_0_31}', "");
Expect(0, 12890, '\P{^Numeric_Value=0_0_31}', "");
Error('\p{Nv= :=0000031}');
Error('\P{Nv= :=0000031}');
Expect(1, 12891, '\p{Nv=+31}', "");
Expect(0, 12891, '\p{^Nv=+31}', "");
Expect(0, 12891, '\P{Nv=+31}', "");
Expect(1, 12891, '\P{^Nv=+31}', "");
Expect(0, 12890, '\p{Nv=+31}', "");
Expect(1, 12890, '\p{^Nv=+31}', "");
Expect(1, 12890, '\P{Nv=+31}', "");
Expect(0, 12890, '\P{^Nv=+31}', "");
Error('\p{Is_Numeric_Value=- 0 0:=00-0 0031}');
Error('\P{Is_Numeric_Value=- 0 0:=00-0 0031}');
Expect(1, 12891, '\p{Is_Numeric_Value=000_003_1}', "");
Expect(0, 12891, '\p{^Is_Numeric_Value=000_003_1}', "");
Expect(0, 12891, '\P{Is_Numeric_Value=000_003_1}', "");
Expect(1, 12891, '\P{^Is_Numeric_Value=000_003_1}', "");
Expect(0, 12890, '\p{Is_Numeric_Value=000_003_1}', "");
Expect(1, 12890, '\p{^Is_Numeric_Value=000_003_1}', "");
Expect(1, 12890, '\P{Is_Numeric_Value=000_003_1}', "");
Expect(0, 12890, '\P{^Is_Numeric_Value=000_003_1}', "");
Error('\p{Is_Nv=	0000 31:=}');
Error('\P{Is_Nv=	0000 31:=}');
Expect(1, 12891, '\p{Is_Nv=0_0_0_0_0_0_0_0031}', "");
Expect(0, 12891, '\p{^Is_Nv=0_0_0_0_0_0_0_0031}', "");
Expect(0, 12891, '\P{Is_Nv=0_0_0_0_0_0_0_0031}', "");
Expect(1, 12891, '\P{^Is_Nv=0_0_0_0_0_0_0_0031}', "");
Expect(0, 12890, '\p{Is_Nv=0_0_0_0_0_0_0_0031}', "");
Expect(1, 12890, '\p{^Is_Nv=0_0_0_0_0_0_0_0031}', "");
Expect(1, 12890, '\P{Is_Nv=0_0_0_0_0_0_0_0031}', "");
Expect(0, 12890, '\P{^Is_Nv=0_0_0_0_0_0_0_0031}', "");
Error('\p{Numeric_Value=	0_0-0	0	8000:=}');
Error('\P{Numeric_Value=	0_0-0	0	8000:=}');
Expect(1, 65833, '\p{Numeric_Value=08_00_0}', "");
Expect(0, 65833, '\p{^Numeric_Value=08_00_0}', "");
Expect(0, 65833, '\P{Numeric_Value=08_00_0}', "");
Expect(1, 65833, '\P{^Numeric_Value=08_00_0}', "");
Expect(0, 65832, '\p{Numeric_Value=08_00_0}', "");
Expect(1, 65832, '\p{^Numeric_Value=08_00_0}', "");
Expect(1, 65832, '\P{Numeric_Value=08_00_0}', "");
Expect(0, 65832, '\P{^Numeric_Value=08_00_0}', "");
Error('\p{Nv=-_+0:=0	8	0_00}');
Error('\P{Nv=-_+0:=0	8	0_00}');
Expect(1, 65833, '\p{Nv=0000000008000}', "");
Expect(0, 65833, '\p{^Nv=0000000008000}', "");
Expect(0, 65833, '\P{Nv=0000000008000}', "");
Expect(1, 65833, '\P{^Nv=0000000008000}', "");
Expect(0, 65832, '\p{Nv=0000000008000}', "");
Expect(1, 65832, '\p{^Nv=0000000008000}', "");
Expect(1, 65832, '\P{Nv=0000000008000}', "");
Expect(0, 65832, '\P{^Nv=0000000008000}', "");
Error('\p{Is_Numeric_Value=/a/ _800_0}');
Error('\P{Is_Numeric_Value=/a/ _800_0}');
Expect(1, 65833, '\p{Is_Numeric_Value=+00008000}', "");
Expect(0, 65833, '\p{^Is_Numeric_Value=+00008000}', "");
Expect(0, 65833, '\P{Is_Numeric_Value=+00008000}', "");
Expect(1, 65833, '\P{^Is_Numeric_Value=+00008000}', "");
Expect(0, 65832, '\p{Is_Numeric_Value=+00008000}', "");
Expect(1, 65832, '\p{^Is_Numeric_Value=+00008000}', "");
Expect(1, 65832, '\P{Is_Numeric_Value=+00008000}', "");
Expect(0, 65832, '\P{^Is_Numeric_Value=+00008000}', "");
Error('\p{Is_Nv:   __008000/a/}');
Error('\P{Is_Nv:   __008000/a/}');
Expect(1, 65833, '\p{Is_Nv=+0_0_0_0_0_0_0_0_8000}', "");
Expect(0, 65833, '\p{^Is_Nv=+0_0_0_0_0_0_0_0_8000}', "");
Expect(0, 65833, '\P{Is_Nv=+0_0_0_0_0_0_0_0_8000}', "");
Expect(1, 65833, '\P{^Is_Nv=+0_0_0_0_0_0_0_0_8000}', "");
Expect(0, 65832, '\p{Is_Nv=+0_0_0_0_0_0_0_0_8000}', "");
Expect(1, 65832, '\p{^Is_Nv=+0_0_0_0_0_0_0_0_8000}', "");
Expect(1, 65832, '\P{Is_Nv=+0_0_0_0_0_0_0_0_8000}', "");
Expect(0, 65832, '\P{^Is_Nv=+0_0_0_0_0_0_0_0_8000}', "");
Error('\p{Numeric_Value=:=__0000001000000000000}');
Error('\P{Numeric_Value=:=__0000001000000000000}');
Expect(1, 20806, '\p{Numeric_Value:   000_000_010_000_000_000_00}', "");
Expect(0, 20806, '\p{^Numeric_Value:   000_000_010_000_000_000_00}', "");
Expect(0, 20806, '\P{Numeric_Value:   000_000_010_000_000_000_00}', "");
Expect(1, 20806, '\P{^Numeric_Value:   000_000_010_000_000_000_00}', "");
Expect(0, 20805, '\p{Numeric_Value:   000_000_010_000_000_000_00}', "");
Expect(1, 20805, '\p{^Numeric_Value:   000_000_010_000_000_000_00}', "");
Expect(1, 20805, '\P{Numeric_Value:   000_000_010_000_000_000_00}', "");
Expect(0, 20805, '\P{^Numeric_Value:   000_000_010_000_000_000_00}', "");
Error('\p{Nv=-/a/0001000000000000}');
Error('\P{Nv=-/a/0001000000000000}');
Expect(1, 20806, '\p{Nv=1000000000000}', "");
Expect(0, 20806, '\p{^Nv=1000000000000}', "");
Expect(0, 20806, '\P{Nv=1000000000000}', "");
Expect(1, 20806, '\P{^Nv=1000000000000}', "");
Expect(0, 20805, '\p{Nv=1000000000000}', "");
Expect(1, 20805, '\p{^Nv=1000000000000}', "");
Expect(1, 20805, '\P{Nv=1000000000000}', "");
Expect(0, 20805, '\P{^Nv=1000000000000}', "");
Error('\p{Is_Numeric_Value= _00001000000000000/a/}');
Error('\P{Is_Numeric_Value= _00001000000000000/a/}');
Expect(1, 20806, '\p{Is_Numeric_Value=0_0_1_0_0_0_0_0_0_0_0_0000}', "");
Expect(0, 20806, '\p{^Is_Numeric_Value=0_0_1_0_0_0_0_0_0_0_0_0000}', "");
Expect(0, 20806, '\P{Is_Numeric_Value=0_0_1_0_0_0_0_0_0_0_0_0000}', "");
Expect(1, 20806, '\P{^Is_Numeric_Value=0_0_1_0_0_0_0_0_0_0_0_0000}', "");
Expect(0, 20805, '\p{Is_Numeric_Value=0_0_1_0_0_0_0_0_0_0_0_0000}', "");
Expect(1, 20805, '\p{^Is_Numeric_Value=0_0_1_0_0_0_0_0_0_0_0_0000}', "");
Expect(1, 20805, '\P{Is_Numeric_Value=0_0_1_0_0_0_0_0_0_0_0_0000}', "");
Expect(0, 20805, '\P{^Is_Numeric_Value=0_0_1_0_0_0_0_0_0_0_0_0000}', "");
Error('\p{Is_Nv=_0000:=0010 0000	0000-000}');
Error('\P{Is_Nv=_0000:=0010 0000	0000-000}');
Expect(1, 20806, '\p{Is_Nv=0_0_0_0_0_0_1_0_0_0_0_0_0_0_00000}', "");
Expect(0, 20806, '\p{^Is_Nv=0_0_0_0_0_0_1_0_0_0_0_0_0_0_00000}', "");
Expect(0, 20806, '\P{Is_Nv=0_0_0_0_0_0_1_0_0_0_0_0_0_0_00000}', "");
Expect(1, 20806, '\P{^Is_Nv=0_0_0_0_0_0_1_0_0_0_0_0_0_0_00000}', "");
Expect(0, 20805, '\p{Is_Nv=0_0_0_0_0_0_1_0_0_0_0_0_0_0_00000}', "");
Expect(1, 20805, '\p{^Is_Nv=0_0_0_0_0_0_1_0_0_0_0_0_0_0_00000}', "");
Expect(1, 20805, '\P{Is_Nv=0_0_0_0_0_0_1_0_0_0_0_0_0_0_00000}', "");
Expect(0, 20805, '\P{^Is_Nv=0_0_0_0_0_0_1_0_0_0_0_0_0_0_00000}', "");
Error('\p{Numeric_Value=-_0_0_0-0	0-0	035:=}');
Error('\P{Numeric_Value=-_0_0_0-0	0-0	035:=}');
Expect(1, 12895, '\p{Numeric_Value=00000035}', "");
Expect(0, 12895, '\p{^Numeric_Value=00000035}', "");
Expect(0, 12895, '\P{Numeric_Value=00000035}', "");
Expect(1, 12895, '\P{^Numeric_Value=00000035}', "");
Expect(0, 12894, '\p{Numeric_Value=00000035}', "");
Expect(1, 12894, '\p{^Numeric_Value=00000035}', "");
Expect(1, 12894, '\P{Numeric_Value=00000035}', "");
Expect(0, 12894, '\P{^Numeric_Value=00000035}', "");
Error('\p{Nv=__+3/a/5}');
Error('\P{Nv=__+3/a/5}');
Expect(1, 12895, '\p{Nv=035}', "");
Expect(0, 12895, '\p{^Nv=035}', "");
Expect(0, 12895, '\P{Nv=035}', "");
Expect(1, 12895, '\P{^Nv=035}', "");
Expect(0, 12894, '\p{Nv=035}', "");
Expect(1, 12894, '\p{^Nv=035}', "");
Expect(1, 12894, '\P{Nv=035}', "");
Expect(0, 12894, '\P{^Nv=035}', "");
Error('\p{Is_Numeric_Value=-03 5:=}');
Error('\P{Is_Numeric_Value=-03 5:=}');
Expect(1, 12895, '\p{Is_Numeric_Value=+3_5}', "");
Expect(0, 12895, '\p{^Is_Numeric_Value=+3_5}', "");
Expect(0, 12895, '\P{Is_Numeric_Value=+3_5}', "");
Expect(1, 12895, '\P{^Is_Numeric_Value=+3_5}', "");
Expect(0, 12894, '\p{Is_Numeric_Value=+3_5}', "");
Expect(1, 12894, '\p{^Is_Numeric_Value=+3_5}', "");
Expect(1, 12894, '\P{Is_Numeric_Value=+3_5}', "");
Expect(0, 12894, '\P{^Is_Numeric_Value=+3_5}', "");
Error('\p{Is_Nv=:=+0_0-0 035}');
Error('\P{Is_Nv=:=+0_0-0 035}');
Expect(1, 12895, '\p{Is_Nv=+3_5}', "");
Expect(0, 12895, '\p{^Is_Nv=+3_5}', "");
Expect(0, 12895, '\P{Is_Nv=+3_5}', "");
Expect(1, 12895, '\P{^Is_Nv=+3_5}', "");
Expect(0, 12894, '\p{Is_Nv=+3_5}', "");
Expect(1, 12894, '\p{^Is_Nv=+3_5}', "");
Expect(1, 12894, '\P{Is_Nv=+3_5}', "");
Expect(0, 12894, '\P{^Is_Nv=+3_5}', "");
Error('\p{Numeric_Value=:=	-01	1}');
Error('\P{Numeric_Value=:=	-01	1}');
Expect(1, 8554, '\p{Numeric_Value=00001_1}', "");
Expect(0, 8554, '\p{^Numeric_Value=00001_1}', "");
Expect(0, 8554, '\P{Numeric_Value=00001_1}', "");
Expect(1, 8554, '\P{^Numeric_Value=00001_1}', "");
Expect(0, 8553, '\p{Numeric_Value=00001_1}', "");
Expect(1, 8553, '\p{^Numeric_Value=00001_1}', "");
Expect(1, 8553, '\P{Numeric_Value=00001_1}', "");
Expect(0, 8553, '\P{^Numeric_Value=00001_1}', "");
Error('\p{Nv=_ +00_00 00 11:=}');
Error('\P{Nv=_ +00_00 00 11:=}');
Expect(1, 8554, '\p{Nv=011}', "");
Expect(0, 8554, '\p{^Nv=011}', "");
Expect(0, 8554, '\P{Nv=011}', "");
Expect(1, 8554, '\P{^Nv=011}', "");
Expect(0, 8553, '\p{Nv=011}', "");
Expect(1, 8553, '\p{^Nv=011}', "");
Expect(1, 8553, '\P{Nv=011}', "");
Expect(0, 8553, '\P{^Nv=011}', "");
Error('\p{Is_Numeric_Value:   /a/_	00011}');
Error('\P{Is_Numeric_Value:   /a/_	00011}');
Expect(1, 8554, '\p{Is_Numeric_Value=0000011}', "");
Expect(0, 8554, '\p{^Is_Numeric_Value=0000011}', "");
Expect(0, 8554, '\P{Is_Numeric_Value=0000011}', "");
Expect(1, 8554, '\P{^Is_Numeric_Value=0000011}', "");
Expect(0, 8553, '\p{Is_Numeric_Value=0000011}', "");
Expect(1, 8553, '\p{^Is_Numeric_Value=0000011}', "");
Expect(1, 8553, '\P{Is_Numeric_Value=0000011}', "");
Expect(0, 8553, '\P{^Is_Numeric_Value=0000011}', "");
Error('\p{Is_Nv=	+0:=0-11}');
Error('\P{Is_Nv=	+0:=0-11}');
Expect(1, 8554, '\p{Is_Nv=+00_00_11}', "");
Expect(0, 8554, '\p{^Is_Nv=+00_00_11}', "");
Expect(0, 8554, '\P{Is_Nv=+00_00_11}', "");
Expect(1, 8554, '\P{^Is_Nv=+00_00_11}', "");
Expect(0, 8553, '\p{Is_Nv=+00_00_11}', "");
Expect(1, 8553, '\p{^Is_Nv=+00_00_11}', "");
Expect(1, 8553, '\P{Is_Nv=+00_00_11}', "");
Expect(0, 8553, '\P{^Is_Nv=+00_00_11}', "");
Error('\p{Numeric_Value=:=- +0000001/000005}');
Error('\P{Numeric_Value=:=- +0000001/000005}');
Expect(1, 8533, '\p{Numeric_Value=1/5}', "");
Expect(0, 8533, '\p{^Numeric_Value=1/5}', "");
Expect(0, 8533, '\P{Numeric_Value=1/5}', "");
Expect(1, 8533, '\P{^Numeric_Value=1/5}', "");
Expect(0, 8532, '\p{Numeric_Value=1/5}', "");
Expect(1, 8532, '\p{^Numeric_Value=1/5}', "");
Expect(1, 8532, '\P{Numeric_Value=1/5}', "");
Expect(0, 8532, '\P{^Numeric_Value=1/5}', "");
Expect(1, 8533, '\p{Numeric_Value:	0.200}', "");
Expect(0, 8533, '\p{^Numeric_Value:	0.200}', "");
Expect(0, 8533, '\P{Numeric_Value:	0.200}', "");
Expect(1, 8533, '\P{^Numeric_Value:	0.200}', "");
Expect(0, 8532, '\p{Numeric_Value:	0.200}', "");
Expect(1, 8532, '\p{^Numeric_Value:	0.200}', "");
Expect(1, 8532, '\P{Numeric_Value:	0.200}', "");
Expect(0, 8532, '\P{^Numeric_Value:	0.200}', "");
Error('\p{Nv= -+01/00000005/a/}');
Error('\P{Nv= -+01/00000005/a/}');
Expect(1, 8533, '\p{Nv=01/0000000005}', "");
Expect(0, 8533, '\p{^Nv=01/0000000005}', "");
Expect(0, 8533, '\P{Nv=01/0000000005}', "");
Expect(1, 8533, '\P{^Nv=01/0000000005}', "");
Expect(0, 8532, '\p{Nv=01/0000000005}', "");
Expect(1, 8532, '\p{^Nv=01/0000000005}', "");
Expect(1, 8532, '\P{Nv=01/0000000005}', "");
Expect(0, 8532, '\P{^Nv=01/0000000005}', "");
Expect(1, 8533, '\p{Nv=0.200}', "");
Expect(0, 8533, '\p{^Nv=0.200}', "");
Expect(0, 8533, '\P{Nv=0.200}', "");
Expect(1, 8533, '\P{^Nv=0.200}', "");
Expect(0, 8532, '\p{Nv=0.200}', "");
Expect(1, 8532, '\p{^Nv=0.200}', "");
Expect(1, 8532, '\P{Nv=0.200}', "");
Expect(0, 8532, '\P{^Nv=0.200}', "");
Error('\p{Is_Numeric_Value=- 00000001/005:=}');
Error('\P{Is_Numeric_Value=- 00000001/005:=}');
Expect(1, 8533, '\p{Is_Numeric_Value=0001/0000005}', "");
Expect(0, 8533, '\p{^Is_Numeric_Value=0001/0000005}', "");
Expect(0, 8533, '\P{Is_Numeric_Value=0001/0000005}', "");
Expect(1, 8533, '\P{^Is_Numeric_Value=0001/0000005}', "");
Expect(0, 8532, '\p{Is_Numeric_Value=0001/0000005}', "");
Expect(1, 8532, '\p{^Is_Numeric_Value=0001/0000005}', "");
Expect(1, 8532, '\P{Is_Numeric_Value=0001/0000005}', "");
Expect(0, 8532, '\P{^Is_Numeric_Value=0001/0000005}', "");
Expect(1, 8533, '\p{Is_Numeric_Value=0.200}', "");
Expect(0, 8533, '\p{^Is_Numeric_Value=0.200}', "");
Expect(0, 8533, '\P{Is_Numeric_Value=0.200}', "");
Expect(1, 8533, '\P{^Is_Numeric_Value=0.200}', "");
Expect(0, 8532, '\p{Is_Numeric_Value=0.200}', "");
Expect(1, 8532, '\p{^Is_Numeric_Value=0.200}', "");
Expect(1, 8532, '\P{Is_Numeric_Value=0.200}', "");
Expect(0, 8532, '\P{^Is_Numeric_Value=0.200}', "");
Error('\p{Is_Nv=:= 	00001/00005}');
Error('\P{Is_Nv=:= 	00001/00005}');
Expect(1, 8533, '\p{Is_Nv=000000001/0005}', "");
Expect(0, 8533, '\p{^Is_Nv=000000001/0005}', "");
Expect(0, 8533, '\P{Is_Nv=000000001/0005}', "");
Expect(1, 8533, '\P{^Is_Nv=000000001/0005}', "");
Expect(0, 8532, '\p{Is_Nv=000000001/0005}', "");
Expect(1, 8532, '\p{^Is_Nv=000000001/0005}', "");
Expect(1, 8532, '\P{Is_Nv=000000001/0005}', "");
Expect(0, 8532, '\P{^Is_Nv=000000001/0005}', "");
Expect(1, 8533, '\p{Is_Nv=0.200}', "");
Expect(0, 8533, '\p{^Is_Nv=0.200}', "");
Expect(0, 8533, '\P{Is_Nv=0.200}', "");
Expect(1, 8533, '\P{^Is_Nv=0.200}', "");
Expect(0, 8532, '\p{Is_Nv=0.200}', "");
Expect(1, 8532, '\p{^Is_Nv=0.200}', "");
Expect(1, 8532, '\P{Is_Nv=0.200}', "");
Expect(0, 8532, '\P{^Is_Nv=0.200}', "");
Error('\p{Numeric_Value=NaN/a/}');
Error('\P{Numeric_Value=NaN/a/}');
Expect(1, 47, '\p{Numeric_Value=nan}', "");
Expect(0, 47, '\p{^Numeric_Value=nan}', "");
Expect(0, 47, '\P{Numeric_Value=nan}', "");
Expect(1, 47, '\P{^Numeric_Value=nan}', "");
Expect(0, 57, '\p{Numeric_Value=nan}', "");
Expect(1, 57, '\p{^Numeric_Value=nan}', "");
Expect(1, 57, '\P{Numeric_Value=nan}', "");
Expect(0, 57, '\P{^Numeric_Value=nan}', "");
Expect(1, 47, '\p{Numeric_Value=_NaN}', "");
Expect(0, 47, '\p{^Numeric_Value=_NaN}', "");
Expect(0, 47, '\P{Numeric_Value=_NaN}', "");
Expect(1, 47, '\P{^Numeric_Value=_NaN}', "");
Expect(0, 57, '\p{Numeric_Value=_NaN}', "");
Expect(1, 57, '\p{^Numeric_Value=_NaN}', "");
Expect(1, 57, '\P{Numeric_Value=_NaN}', "");
Expect(0, 57, '\P{^Numeric_Value=_NaN}', "");
Error('\p{Nv= _NaN/a/}');
Error('\P{Nv= _NaN/a/}');
Expect(1, 47, '\p{Nv=nan}', "");
Expect(0, 47, '\p{^Nv=nan}', "");
Expect(0, 47, '\P{Nv=nan}', "");
Expect(1, 47, '\P{^Nv=nan}', "");
Expect(0, 57, '\p{Nv=nan}', "");
Expect(1, 57, '\p{^Nv=nan}', "");
Expect(1, 57, '\P{Nv=nan}', "");
Expect(0, 57, '\P{^Nv=nan}', "");
Expect(1, 47, '\p{Nv=	NAN}', "");
Expect(0, 47, '\p{^Nv=	NAN}', "");
Expect(0, 47, '\P{Nv=	NAN}', "");
Expect(1, 47, '\P{^Nv=	NAN}', "");
Expect(0, 57, '\p{Nv=	NAN}', "");
Expect(1, 57, '\p{^Nv=	NAN}', "");
Expect(1, 57, '\P{Nv=	NAN}', "");
Expect(0, 57, '\P{^Nv=	NAN}', "");
Error('\p{Is_Numeric_Value=	NAN:=}');
Error('\P{Is_Numeric_Value=	NAN:=}');
Expect(1, 47, '\p{Is_Numeric_Value=nan}', "");
Expect(0, 47, '\p{^Is_Numeric_Value=nan}', "");
Expect(0, 47, '\P{Is_Numeric_Value=nan}', "");
Expect(1, 47, '\P{^Is_Numeric_Value=nan}', "");
Expect(0, 57, '\p{Is_Numeric_Value=nan}', "");
Expect(1, 57, '\p{^Is_Numeric_Value=nan}', "");
Expect(1, 57, '\P{Is_Numeric_Value=nan}', "");
Expect(0, 57, '\P{^Is_Numeric_Value=nan}', "");
Expect(1, 47, '\p{Is_Numeric_Value= 	nan}', "");
Expect(0, 47, '\p{^Is_Numeric_Value= 	nan}', "");
Expect(0, 47, '\P{Is_Numeric_Value= 	nan}', "");
Expect(1, 47, '\P{^Is_Numeric_Value= 	nan}', "");
Expect(0, 57, '\p{Is_Numeric_Value= 	nan}', "");
Expect(1, 57, '\p{^Is_Numeric_Value= 	nan}', "");
Expect(1, 57, '\P{Is_Numeric_Value= 	nan}', "");
Expect(0, 57, '\P{^Is_Numeric_Value= 	nan}', "");
Error('\p{Is_Nv=-:=NAN}');
Error('\P{Is_Nv=-:=NAN}');
Expect(1, 47, '\p{Is_Nv=nan}', "");
Expect(0, 47, '\p{^Is_Nv=nan}', "");
Expect(0, 47, '\P{Is_Nv=nan}', "");
Expect(1, 47, '\P{^Is_Nv=nan}', "");
Expect(0, 57, '\p{Is_Nv=nan}', "");
Expect(1, 57, '\p{^Is_Nv=nan}', "");
Expect(1, 57, '\P{Is_Nv=nan}', "");
Expect(0, 57, '\P{^Is_Nv=nan}', "");
Expect(1, 47, '\p{Is_Nv=	nan}', "");
Expect(0, 47, '\p{^Is_Nv=	nan}', "");
Expect(0, 47, '\P{Is_Nv=	nan}', "");
Expect(1, 47, '\P{^Is_Nv=	nan}', "");
Expect(0, 57, '\p{Is_Nv=	nan}', "");
Expect(1, 57, '\p{^Is_Nv=	nan}', "");
Expect(1, 57, '\P{Is_Nv=	nan}', "");
Expect(0, 57, '\P{^Is_Nv=	nan}', "");
Error('\p{Numeric_Value=/a/- 015/002}');
Error('\P{Numeric_Value=/a/- 015/002}');
Expect(1, 3889, '\p{Numeric_Value=15/000002}', "");
Expect(0, 3889, '\p{^Numeric_Value=15/000002}', "");
Expect(0, 3889, '\P{Numeric_Value=15/000002}', "");
Expect(1, 3889, '\P{^Numeric_Value=15/000002}', "");
Expect(0, 3888, '\p{Numeric_Value=15/000002}', "");
Expect(1, 3888, '\p{^Numeric_Value=15/000002}', "");
Expect(1, 3888, '\P{Numeric_Value=15/000002}', "");
Expect(0, 3888, '\P{^Numeric_Value=15/000002}', "");
Expect(1, 3889, '\p{Numeric_Value=7.500}', "");
Expect(0, 3889, '\p{^Numeric_Value=7.500}', "");
Expect(0, 3889, '\P{Numeric_Value=7.500}', "");
Expect(1, 3889, '\P{^Numeric_Value=7.500}', "");
Expect(0, 3888, '\p{Numeric_Value=7.500}', "");
Expect(1, 3888, '\p{^Numeric_Value=7.500}', "");
Expect(1, 3888, '\P{Numeric_Value=7.500}', "");
Expect(0, 3888, '\P{^Numeric_Value=7.500}', "");
Error('\p{Nv=/a/	00000015/002}');
Error('\P{Nv=/a/	00000015/002}');
Expect(1, 3889, '\p{Nv=0000000015/0000000002}', "");
Expect(0, 3889, '\p{^Nv=0000000015/0000000002}', "");
Expect(0, 3889, '\P{Nv=0000000015/0000000002}', "");
Expect(1, 3889, '\P{^Nv=0000000015/0000000002}', "");
Expect(0, 3888, '\p{Nv=0000000015/0000000002}', "");
Expect(1, 3888, '\p{^Nv=0000000015/0000000002}', "");
Expect(1, 3888, '\P{Nv=0000000015/0000000002}', "");
Expect(0, 3888, '\P{^Nv=0000000015/0000000002}', "");
Expect(1, 3889, '\p{Nv=7.500}', "");
Expect(0, 3889, '\p{^Nv=7.500}', "");
Expect(0, 3889, '\P{Nv=7.500}', "");
Expect(1, 3889, '\P{^Nv=7.500}', "");
Expect(0, 3888, '\p{Nv=7.500}', "");
Expect(1, 3888, '\p{^Nv=7.500}', "");
Expect(1, 3888, '\P{Nv=7.500}', "");
Expect(0, 3888, '\P{^Nv=7.500}', "");
Error('\p{Is_Numeric_Value=	/a/00015/0000000002}');
Error('\P{Is_Numeric_Value=	/a/00015/0000000002}');
Expect(1, 3889, '\p{Is_Numeric_Value=0015/00002}', "");
Expect(0, 3889, '\p{^Is_Numeric_Value=0015/00002}', "");
Expect(0, 3889, '\P{Is_Numeric_Value=0015/00002}', "");
Expect(1, 3889, '\P{^Is_Numeric_Value=0015/00002}', "");
Expect(0, 3888, '\p{Is_Numeric_Value=0015/00002}', "");
Expect(1, 3888, '\p{^Is_Numeric_Value=0015/00002}', "");
Expect(1, 3888, '\P{Is_Numeric_Value=0015/00002}', "");
Expect(0, 3888, '\P{^Is_Numeric_Value=0015/00002}', "");
Expect(1, 3889, '\p{Is_Numeric_Value: 7.500}', "");
Expect(0, 3889, '\p{^Is_Numeric_Value: 7.500}', "");
Expect(0, 3889, '\P{Is_Numeric_Value: 7.500}', "");
Expect(1, 3889, '\P{^Is_Numeric_Value: 7.500}', "");
Expect(0, 3888, '\p{Is_Numeric_Value: 7.500}', "");
Expect(1, 3888, '\p{^Is_Numeric_Value: 7.500}', "");
Expect(1, 3888, '\P{Is_Numeric_Value: 7.500}', "");
Expect(0, 3888, '\P{^Is_Numeric_Value: 7.500}', "");
Error('\p{Is_Nv=:=_	00000000015/0002}');
Error('\P{Is_Nv=:=_	00000000015/0002}');
Expect(1, 3889, '\p{Is_Nv=0015/002}', "");
Expect(0, 3889, '\p{^Is_Nv=0015/002}', "");
Expect(0, 3889, '\P{Is_Nv=0015/002}', "");
Expect(1, 3889, '\P{^Is_Nv=0015/002}', "");
Expect(0, 3888, '\p{Is_Nv=0015/002}', "");
Expect(1, 3888, '\p{^Is_Nv=0015/002}', "");
Expect(1, 3888, '\P{Is_Nv=0015/002}', "");
Expect(0, 3888, '\P{^Is_Nv=0015/002}', "");
Expect(1, 3889, '\p{Is_Nv=7.500}', "");
Expect(0, 3889, '\p{^Is_Nv=7.500}', "");
Expect(0, 3889, '\P{Is_Nv=7.500}', "");
Expect(1, 3889, '\P{^Is_Nv=7.500}', "");
Expect(0, 3888, '\p{Is_Nv=7.500}', "");
Expect(1, 3888, '\p{^Is_Nv=7.500}', "");
Expect(1, 3888, '\P{Is_Nv=7.500}', "");
Expect(0, 3888, '\P{^Is_Nv=7.500}', "");
Error('\p{Numeric_Value=:=_	0000000007/8}');
Error('\P{Numeric_Value=:=_	0000000007/8}');
Expect(1, 8542, '\p{Numeric_Value=0000000007/08}', "");
Expect(0, 8542, '\p{^Numeric_Value=0000000007/08}', "");
Expect(0, 8542, '\P{Numeric_Value=0000000007/08}', "");
Expect(1, 8542, '\P{^Numeric_Value=0000000007/08}', "");
Expect(0, 8541, '\p{Numeric_Value=0000000007/08}', "");
Expect(1, 8541, '\p{^Numeric_Value=0000000007/08}', "");
Expect(1, 8541, '\P{Numeric_Value=0000000007/08}', "");
Expect(0, 8541, '\P{^Numeric_Value=0000000007/08}', "");
Error('\p{Numeric_Value:0.9}');
Error('\P{Numeric_Value:0.9}');
Error('\p{Numeric_Value=0.88}');
Error('\P{Numeric_Value=0.88}');
Expect(1, 8542, '\p{Numeric_Value=0.875}', "");
Expect(0, 8542, '\p{^Numeric_Value=0.875}', "");
Expect(0, 8542, '\P{Numeric_Value=0.875}', "");
Expect(1, 8542, '\P{^Numeric_Value=0.875}', "");
Expect(0, 8541, '\p{Numeric_Value=0.875}', "");
Expect(1, 8541, '\p{^Numeric_Value=0.875}', "");
Expect(1, 8541, '\P{Numeric_Value=0.875}', "");
Expect(0, 8541, '\P{^Numeric_Value=0.875}', "");
Error('\p{Nv:/a/-00007/00000008}');
Error('\P{Nv:/a/-00007/00000008}');
Expect(1, 8542, '\p{Nv=0000007/000008}', "");
Expect(0, 8542, '\p{^Nv=0000007/000008}', "");
Expect(0, 8542, '\P{Nv=0000007/000008}', "");
Expect(1, 8542, '\P{^Nv=0000007/000008}', "");
Expect(0, 8541, '\p{Nv=0000007/000008}', "");
Expect(1, 8541, '\p{^Nv=0000007/000008}', "");
Expect(1, 8541, '\P{Nv=0000007/000008}', "");
Expect(0, 8541, '\P{^Nv=0000007/000008}', "");
Error('\p{Nv=0.9}');
Error('\P{Nv=0.9}');
Error('\p{Nv=0.88}');
Error('\P{Nv=0.88}');
Expect(1, 8542, '\p{Nv=0.875}', "");
Expect(0, 8542, '\p{^Nv=0.875}', "");
Expect(0, 8542, '\P{Nv=0.875}', "");
Expect(1, 8542, '\P{^Nv=0.875}', "");
Expect(0, 8541, '\p{Nv=0.875}', "");
Expect(1, 8541, '\p{^Nv=0.875}', "");
Expect(1, 8541, '\P{Nv=0.875}', "");
Expect(0, 8541, '\P{^Nv=0.875}', "");
Error('\p{Is_Numeric_Value:00000007/008/a/}');
Error('\P{Is_Numeric_Value:00000007/008/a/}');
Expect(1, 8542, '\p{Is_Numeric_Value=0000007/0000008}', "");
Expect(0, 8542, '\p{^Is_Numeric_Value=0000007/0000008}', "");
Expect(0, 8542, '\P{Is_Numeric_Value=0000007/0000008}', "");
Expect(1, 8542, '\P{^Is_Numeric_Value=0000007/0000008}', "");
Expect(0, 8541, '\p{Is_Numeric_Value=0000007/0000008}', "");
Expect(1, 8541, '\p{^Is_Numeric_Value=0000007/0000008}', "");
Expect(1, 8541, '\P{Is_Numeric_Value=0000007/0000008}', "");
Expect(0, 8541, '\P{^Is_Numeric_Value=0000007/0000008}', "");
Error('\p{Is_Numeric_Value=0.9}');
Error('\P{Is_Numeric_Value=0.9}');
Error('\p{Is_Numeric_Value=0.88}');
Error('\P{Is_Numeric_Value=0.88}');
Expect(1, 8542, '\p{Is_Numeric_Value=0.875}', "");
Expect(0, 8542, '\p{^Is_Numeric_Value=0.875}', "");
Expect(0, 8542, '\P{Is_Numeric_Value=0.875}', "");
Expect(1, 8542, '\P{^Is_Numeric_Value=0.875}', "");
Expect(0, 8541, '\p{Is_Numeric_Value=0.875}', "");
Expect(1, 8541, '\p{^Is_Numeric_Value=0.875}', "");
Expect(1, 8541, '\P{Is_Numeric_Value=0.875}', "");
Expect(0, 8541, '\P{^Is_Numeric_Value=0.875}', "");
Error('\p{Is_Nv=/a/+0000000007/000000008}');
Error('\P{Is_Nv=/a/+0000000007/000000008}');
Expect(1, 8542, '\p{Is_Nv=07/0008}', "");
Expect(0, 8542, '\p{^Is_Nv=07/0008}', "");
Expect(0, 8542, '\P{Is_Nv=07/0008}', "");
Expect(1, 8542, '\P{^Is_Nv=07/0008}', "");
Expect(0, 8541, '\p{Is_Nv=07/0008}', "");
Expect(1, 8541, '\p{^Is_Nv=07/0008}', "");
Expect(1, 8541, '\P{Is_Nv=07/0008}', "");
Expect(0, 8541, '\P{^Is_Nv=07/0008}', "");
Error('\p{Is_Nv=0.9}');
Error('\P{Is_Nv=0.9}');
Error('\p{Is_Nv=0.88}');
Error('\P{Is_Nv=0.88}');
Expect(1, 8542, '\p{Is_Nv=0.875}', "");
Expect(0, 8542, '\p{^Is_Nv=0.875}', "");
Expect(0, 8542, '\P{Is_Nv=0.875}', "");
Expect(1, 8542, '\P{^Is_Nv=0.875}', "");
Expect(0, 8541, '\p{Is_Nv=0.875}', "");
Expect(1, 8541, '\p{^Is_Nv=0.875}', "");
Expect(1, 8541, '\P{Is_Nv=0.875}', "");
Expect(0, 8541, '\P{^Is_Nv=0.875}', "");
Error('\p{Numeric_Value:    000 000:=007 00}');
Error('\P{Numeric_Value:    000 000:=007 00}');
Expect(1, 65823, '\p{Numeric_Value=+0000000700}', "");
Expect(0, 65823, '\p{^Numeric_Value=+0000000700}', "");
Expect(0, 65823, '\P{Numeric_Value=+0000000700}', "");
Expect(1, 65823, '\P{^Numeric_Value=+0000000700}', "");
Expect(0, 65822, '\p{Numeric_Value=+0000000700}', "");
Expect(1, 65822, '\p{^Numeric_Value=+0000000700}', "");
Expect(1, 65822, '\P{Numeric_Value=+0000000700}', "");
Expect(0, 65822, '\P{^Numeric_Value=+0000000700}', "");
Error('\p{Nv=-	70 0:=}');
Error('\P{Nv=-	70 0:=}');
Expect(1, 65823, '\p{Nv=70_0}', "");
Expect(0, 65823, '\p{^Nv=70_0}', "");
Expect(0, 65823, '\P{Nv=70_0}', "");
Expect(1, 65823, '\P{^Nv=70_0}', "");
Expect(0, 65822, '\p{Nv=70_0}', "");
Expect(1, 65822, '\p{^Nv=70_0}', "");
Expect(1, 65822, '\P{Nv=70_0}', "");
Expect(0, 65822, '\P{^Nv=70_0}', "");
Error('\p{Is_Numeric_Value=:=700}');
Error('\P{Is_Numeric_Value=:=700}');
Expect(1, 65823, '\p{Is_Numeric_Value=000000000700}', "");
Expect(0, 65823, '\p{^Is_Numeric_Value=000000000700}', "");
Expect(0, 65823, '\P{Is_Numeric_Value=000000000700}', "");
Expect(1, 65823, '\P{^Is_Numeric_Value=000000000700}', "");
Expect(0, 65822, '\p{Is_Numeric_Value=000000000700}', "");
Expect(1, 65822, '\p{^Is_Numeric_Value=000000000700}', "");
Expect(1, 65822, '\P{Is_Numeric_Value=000000000700}', "");
Expect(0, 65822, '\P{^Is_Numeric_Value=000000000700}', "");
Error('\p{Is_Nv=	-+0_0_0/a/0_700}');
Error('\P{Is_Nv=	-+0_0_0/a/0_700}');
Expect(1, 65823, '\p{Is_Nv=+00700}', "");
Expect(0, 65823, '\p{^Is_Nv=+00700}', "");
Expect(0, 65823, '\P{Is_Nv=+00700}', "");
Expect(1, 65823, '\P{^Is_Nv=+00700}', "");
Expect(0, 65822, '\p{Is_Nv=+00700}', "");
Expect(1, 65822, '\p{^Is_Nv=+00700}', "");
Expect(1, 65822, '\P{Is_Nv=+00700}', "");
Expect(0, 65822, '\P{^Is_Nv=+00700}', "");
Error('\p{Numeric_Value=-/a/13/02}');
Error('\P{Numeric_Value=-/a/13/02}');
Expect(1, 3888, '\p{Numeric_Value=00000000013/2}', "");
Expect(0, 3888, '\p{^Numeric_Value=00000000013/2}', "");
Expect(0, 3888, '\P{Numeric_Value=00000000013/2}', "");
Expect(1, 3888, '\P{^Numeric_Value=00000000013/2}', "");
Expect(0, 3887, '\p{Numeric_Value=00000000013/2}', "");
Expect(1, 3887, '\p{^Numeric_Value=00000000013/2}', "");
Expect(1, 3887, '\P{Numeric_Value=00000000013/2}', "");
Expect(0, 3887, '\P{^Numeric_Value=00000000013/2}', "");
Expect(1, 3888, '\p{Numeric_Value=6.500}', "");
Expect(0, 3888, '\p{^Numeric_Value=6.500}', "");
Expect(0, 3888, '\P{Numeric_Value=6.500}', "");
Expect(1, 3888, '\P{^Numeric_Value=6.500}', "");
Expect(0, 3887, '\p{Numeric_Value=6.500}', "");
Expect(1, 3887, '\p{^Numeric_Value=6.500}', "");
Expect(1, 3887, '\P{Numeric_Value=6.500}', "");
Expect(0, 3887, '\P{^Numeric_Value=6.500}', "");
Error('\p{Nv=:=__+0000013/2}');
Error('\P{Nv=:=__+0000013/2}');
Expect(1, 3888, '\p{Nv=00000000013/02}', "");
Expect(0, 3888, '\p{^Nv=00000000013/02}', "");
Expect(0, 3888, '\P{Nv=00000000013/02}', "");
Expect(1, 3888, '\P{^Nv=00000000013/02}', "");
Expect(0, 3887, '\p{Nv=00000000013/02}', "");
Expect(1, 3887, '\p{^Nv=00000000013/02}', "");
Expect(1, 3887, '\P{Nv=00000000013/02}', "");
Expect(0, 3887, '\P{^Nv=00000000013/02}', "");
Expect(1, 3888, '\p{Nv=6.500}', "");
Expect(0, 3888, '\p{^Nv=6.500}', "");
Expect(0, 3888, '\P{Nv=6.500}', "");
Expect(1, 3888, '\P{^Nv=6.500}', "");
Expect(0, 3887, '\p{Nv=6.500}', "");
Expect(1, 3887, '\p{^Nv=6.500}', "");
Expect(1, 3887, '\P{Nv=6.500}', "");
Expect(0, 3887, '\P{^Nv=6.500}', "");
Error('\p{Is_Numeric_Value=_+000013/2:=}');
Error('\P{Is_Numeric_Value=_+000013/2:=}');
Expect(1, 3888, '\p{Is_Numeric_Value=013/0002}', "");
Expect(0, 3888, '\p{^Is_Numeric_Value=013/0002}', "");
Expect(0, 3888, '\P{Is_Numeric_Value=013/0002}', "");
Expect(1, 3888, '\P{^Is_Numeric_Value=013/0002}', "");
Expect(0, 3887, '\p{Is_Numeric_Value=013/0002}', "");
Expect(1, 3887, '\p{^Is_Numeric_Value=013/0002}', "");
Expect(1, 3887, '\P{Is_Numeric_Value=013/0002}', "");
Expect(0, 3887, '\P{^Is_Numeric_Value=013/0002}', "");
Expect(1, 3888, '\p{Is_Numeric_Value=6.500}', "");
Expect(0, 3888, '\p{^Is_Numeric_Value=6.500}', "");
Expect(0, 3888, '\P{Is_Numeric_Value=6.500}', "");
Expect(1, 3888, '\P{^Is_Numeric_Value=6.500}', "");
Expect(0, 3887, '\p{Is_Numeric_Value=6.500}', "");
Expect(1, 3887, '\p{^Is_Numeric_Value=6.500}', "");
Expect(1, 3887, '\P{Is_Numeric_Value=6.500}', "");
Expect(0, 3887, '\P{^Is_Numeric_Value=6.500}', "");
Error('\p{Is_Nv=/a/_-+13/0002}');
Error('\P{Is_Nv=/a/_-+13/0002}');
Expect(1, 3888, '\p{Is_Nv=0013/00002}', "");
Expect(0, 3888, '\p{^Is_Nv=0013/00002}', "");
Expect(0, 3888, '\P{Is_Nv=0013/00002}', "");
Expect(1, 3888, '\P{^Is_Nv=0013/00002}', "");
Expect(0, 3887, '\p{Is_Nv=0013/00002}', "");
Expect(1, 3887, '\p{^Is_Nv=0013/00002}', "");
Expect(1, 3887, '\P{Is_Nv=0013/00002}', "");
Expect(0, 3887, '\P{^Is_Nv=0013/00002}', "");
Expect(1, 3888, '\p{Is_Nv=6.500}', "");
Expect(0, 3888, '\p{^Is_Nv=6.500}', "");
Expect(0, 3888, '\P{Is_Nv=6.500}', "");
Expect(1, 3888, '\P{^Is_Nv=6.500}', "");
Expect(0, 3887, '\p{Is_Nv=6.500}', "");
Expect(1, 3887, '\p{^Is_Nv=6.500}', "");
Expect(1, 3887, '\P{Is_Nv=6.500}', "");
Expect(0, 3887, '\P{^Is_Nv=6.500}', "");
Error('\p{Numeric_Value= 	48:=}');
Error('\P{Numeric_Value= 	48:=}');
Expect(1, 12989, '\p{Numeric_Value:0_0_0_0_0_0_0_48}', "");
Expect(0, 12989, '\p{^Numeric_Value:0_0_0_0_0_0_0_48}', "");
Expect(0, 12989, '\P{Numeric_Value:0_0_0_0_0_0_0_48}', "");
Expect(1, 12989, '\P{^Numeric_Value:0_0_0_0_0_0_0_48}', "");
Expect(0, 12988, '\p{Numeric_Value:0_0_0_0_0_0_0_48}', "");
Expect(1, 12988, '\p{^Numeric_Value:0_0_0_0_0_0_0_48}', "");
Expect(1, 12988, '\P{Numeric_Value:0_0_0_0_0_0_0_48}', "");
Expect(0, 12988, '\P{^Numeric_Value:0_0_0_0_0_0_0_48}', "");
Error('\p{Nv=	0_0	0:=0 0	48}');
Error('\P{Nv=	0_0	0:=0 0	48}');
Expect(1, 12989, '\p{Nv=+00000048}', "");
Expect(0, 12989, '\p{^Nv=+00000048}', "");
Expect(0, 12989, '\P{Nv=+00000048}', "");
Expect(1, 12989, '\P{^Nv=+00000048}', "");
Expect(0, 12988, '\p{Nv=+00000048}', "");
Expect(1, 12988, '\p{^Nv=+00000048}', "");
Expect(1, 12988, '\P{Nv=+00000048}', "");
Expect(0, 12988, '\P{^Nv=+00000048}', "");
Error('\p{Is_Numeric_Value=	/a/+000	000_48}');
Error('\P{Is_Numeric_Value=	/a/+000	000_48}');
Expect(1, 12989, '\p{Is_Numeric_Value:+4_8}', "");
Expect(0, 12989, '\p{^Is_Numeric_Value:+4_8}', "");
Expect(0, 12989, '\P{Is_Numeric_Value:+4_8}', "");
Expect(1, 12989, '\P{^Is_Numeric_Value:+4_8}', "");
Expect(0, 12988, '\p{Is_Numeric_Value:+4_8}', "");
Expect(1, 12988, '\p{^Is_Numeric_Value:+4_8}', "");
Expect(1, 12988, '\P{Is_Numeric_Value:+4_8}', "");
Expect(0, 12988, '\P{^Is_Numeric_Value:+4_8}', "");
Error('\p{Is_Nv=:=00000004	8}');
Error('\P{Is_Nv=:=00000004	8}');
Expect(1, 12989, '\p{Is_Nv=+000048}', "");
Expect(0, 12989, '\p{^Is_Nv=+000048}', "");
Expect(0, 12989, '\P{Is_Nv=+000048}', "");
Expect(1, 12989, '\P{^Is_Nv=+000048}', "");
Expect(0, 12988, '\p{Is_Nv=+000048}', "");
Expect(1, 12988, '\p{^Is_Nv=+000048}', "");
Expect(1, 12988, '\P{Is_Nv=+000048}', "");
Expect(0, 12988, '\P{^Is_Nv=+000048}', "");
Error('\p{Numeric_Value=/a/_	+0001/0003}');
Error('\P{Numeric_Value=/a/_	+0001/0003}');
Expect(1, 8531, '\p{Numeric_Value=+000001/0000000003}', "");
Expect(0, 8531, '\p{^Numeric_Value=+000001/0000000003}', "");
Expect(0, 8531, '\P{Numeric_Value=+000001/0000000003}', "");
Expect(1, 8531, '\P{^Numeric_Value=+000001/0000000003}', "");
Expect(0, 8530, '\p{Numeric_Value=+000001/0000000003}', "");
Expect(1, 8530, '\p{^Numeric_Value=+000001/0000000003}', "");
Expect(1, 8530, '\P{Numeric_Value=+000001/0000000003}', "");
Expect(0, 8530, '\P{^Numeric_Value=+000001/0000000003}', "");
Error('\p{Numeric_Value: 0.3}');
Error('\P{Numeric_Value: 0.3}');
Error('\p{Numeric_Value=0.33}');
Error('\P{Numeric_Value=0.33}');
Expect(1, 8531, '\p{Numeric_Value=0.333}', "");
Expect(0, 8531, '\p{^Numeric_Value=0.333}', "");
Expect(0, 8531, '\P{Numeric_Value=0.333}', "");
Expect(1, 8531, '\P{^Numeric_Value=0.333}', "");
Expect(0, 8530, '\p{Numeric_Value=0.333}', "");
Expect(1, 8530, '\p{^Numeric_Value=0.333}', "");
Expect(1, 8530, '\P{Numeric_Value=0.333}', "");
Expect(0, 8530, '\P{^Numeric_Value=0.333}', "");
Error('\p{Nv=:=000001/00003}');
Error('\P{Nv=:=000001/00003}');
Expect(1, 8531, '\p{Nv=00000001/00000003}', "");
Expect(0, 8531, '\p{^Nv=00000001/00000003}', "");
Expect(0, 8531, '\P{Nv=00000001/00000003}', "");
Expect(1, 8531, '\P{^Nv=00000001/00000003}', "");
Expect(0, 8530, '\p{Nv=00000001/00000003}', "");
Expect(1, 8530, '\p{^Nv=00000001/00000003}', "");
Expect(1, 8530, '\P{Nv=00000001/00000003}', "");
Expect(0, 8530, '\P{^Nv=00000001/00000003}', "");
Error('\p{Nv=0.3}');
Error('\P{Nv=0.3}');
Error('\p{Nv=0.33}');
Error('\P{Nv=0.33}');
Expect(1, 8531, '\p{Nv=0.333}', "");
Expect(0, 8531, '\p{^Nv=0.333}', "");
Expect(0, 8531, '\P{Nv=0.333}', "");
Expect(1, 8531, '\P{^Nv=0.333}', "");
Expect(0, 8530, '\p{Nv=0.333}', "");
Expect(1, 8530, '\p{^Nv=0.333}', "");
Expect(1, 8530, '\P{Nv=0.333}', "");
Expect(0, 8530, '\P{^Nv=0.333}', "");
Error('\p{Is_Numeric_Value=/a/+00001/0000003}');
Error('\P{Is_Numeric_Value=/a/+00001/0000003}');
Expect(1, 8531, '\p{Is_Numeric_Value=00001/00000003}', "");
Expect(0, 8531, '\p{^Is_Numeric_Value=00001/00000003}', "");
Expect(0, 8531, '\P{Is_Numeric_Value=00001/00000003}', "");
Expect(1, 8531, '\P{^Is_Numeric_Value=00001/00000003}', "");
Expect(0, 8530, '\p{Is_Numeric_Value=00001/00000003}', "");
Expect(1, 8530, '\p{^Is_Numeric_Value=00001/00000003}', "");
Expect(1, 8530, '\P{Is_Numeric_Value=00001/00000003}', "");
Expect(0, 8530, '\P{^Is_Numeric_Value=00001/00000003}', "");
Error('\p{Is_Numeric_Value:   0.3}');
Error('\P{Is_Numeric_Value:   0.3}');
Error('\p{Is_Numeric_Value=0.33}');
Error('\P{Is_Numeric_Value=0.33}');
Expect(1, 8531, '\p{Is_Numeric_Value=0.333}', "");
Expect(0, 8531, '\p{^Is_Numeric_Value=0.333}', "");
Expect(0, 8531, '\P{Is_Numeric_Value=0.333}', "");
Expect(1, 8531, '\P{^Is_Numeric_Value=0.333}', "");
Expect(0, 8530, '\p{Is_Numeric_Value=0.333}', "");
Expect(1, 8530, '\p{^Is_Numeric_Value=0.333}', "");
Expect(1, 8530, '\P{Is_Numeric_Value=0.333}', "");
Expect(0, 8530, '\P{^Is_Numeric_Value=0.333}', "");
Error('\p{Is_Nv=:= -00000001/003}');
Error('\P{Is_Nv=:= -00000001/003}');
Expect(1, 8531, '\p{Is_Nv=01/000003}', "");
Expect(0, 8531, '\p{^Is_Nv=01/000003}', "");
Expect(0, 8531, '\P{Is_Nv=01/000003}', "");
Expect(1, 8531, '\P{^Is_Nv=01/000003}', "");
Expect(0, 8530, '\p{Is_Nv=01/000003}', "");
Expect(1, 8530, '\p{^Is_Nv=01/000003}', "");
Expect(1, 8530, '\P{Is_Nv=01/000003}', "");
Expect(0, 8530, '\P{^Is_Nv=01/000003}', "");
Error('\p{Is_Nv=0.3}');
Error('\P{Is_Nv=0.3}');
Error('\p{Is_Nv=0.33}');
Error('\P{Is_Nv=0.33}');
Expect(1, 8531, '\p{Is_Nv=0.333}', "");
Expect(0, 8531, '\p{^Is_Nv=0.333}', "");
Expect(0, 8531, '\P{Is_Nv=0.333}', "");
Expect(1, 8531, '\P{^Is_Nv=0.333}', "");
Expect(0, 8530, '\p{Is_Nv=0.333}', "");
Expect(1, 8530, '\p{^Is_Nv=0.333}', "");
Expect(1, 8530, '\P{Is_Nv=0.333}', "");
Expect(0, 8530, '\P{^Is_Nv=0.333}', "");
Error('\p{Numeric_Value=/a/_0000000002000}');
Error('\P{Numeric_Value=/a/_0000000002000}');
Expect(1, 65827, '\p{Numeric_Value=000002000}', "");
Expect(0, 65827, '\p{^Numeric_Value=000002000}', "");
Expect(0, 65827, '\P{Numeric_Value=000002000}', "");
Expect(1, 65827, '\P{^Numeric_Value=000002000}', "");
Expect(0, 65826, '\p{Numeric_Value=000002000}', "");
Expect(1, 65826, '\p{^Numeric_Value=000002000}', "");
Expect(1, 65826, '\P{Numeric_Value=000002000}', "");
Expect(0, 65826, '\P{^Numeric_Value=000002000}', "");
Error('\p{Nv=	0 0:=0_00	0_02-0	00}');
Error('\P{Nv=	0 0:=0_00	0_02-0	00}');
Expect(1, 65827, '\p{Nv=00_20_00}', "");
Expect(0, 65827, '\p{^Nv=00_20_00}', "");
Expect(0, 65827, '\P{Nv=00_20_00}', "");
Expect(1, 65827, '\P{^Nv=00_20_00}', "");
Expect(0, 65826, '\p{Nv=00_20_00}', "");
Expect(1, 65826, '\p{^Nv=00_20_00}', "");
Expect(1, 65826, '\P{Nv=00_20_00}', "");
Expect(0, 65826, '\P{^Nv=00_20_00}', "");
Error('\p{Is_Numeric_Value=/a/ 	+00000002000}');
Error('\P{Is_Numeric_Value=/a/ 	+00000002000}');
Expect(1, 65827, '\p{Is_Numeric_Value=002000}', "");
Expect(0, 65827, '\p{^Is_Numeric_Value=002000}', "");
Expect(0, 65827, '\P{Is_Numeric_Value=002000}', "");
Expect(1, 65827, '\P{^Is_Numeric_Value=002000}', "");
Expect(0, 65826, '\p{Is_Numeric_Value=002000}', "");
Expect(1, 65826, '\p{^Is_Numeric_Value=002000}', "");
Expect(1, 65826, '\P{Is_Numeric_Value=002000}', "");
Expect(0, 65826, '\P{^Is_Numeric_Value=002000}', "");
Error('\p{Is_Nv=/a/  002000}');
Error('\P{Is_Nv=/a/  002000}');
Expect(1, 65827, '\p{Is_Nv=0_0_2_000}', "");
Expect(0, 65827, '\p{^Is_Nv=0_0_2_000}', "");
Expect(0, 65827, '\P{Is_Nv=0_0_2_000}', "");
Expect(1, 65827, '\P{^Is_Nv=0_0_2_000}', "");
Expect(0, 65826, '\p{Is_Nv=0_0_2_000}', "");
Expect(1, 65826, '\p{^Is_Nv=0_0_2_000}', "");
Expect(1, 65826, '\P{Is_Nv=0_0_2_000}', "");
Expect(0, 65826, '\P{^Is_Nv=0_0_2_000}', "");
Error('\p{Numeric_Value= _+2 9/a/}');
Error('\P{Numeric_Value= _+2 9/a/}');
Expect(1, 12889, '\p{Numeric_Value=029}', "");
Expect(0, 12889, '\p{^Numeric_Value=029}', "");
Expect(0, 12889, '\P{Numeric_Value=029}', "");
Expect(1, 12889, '\P{^Numeric_Value=029}', "");
Expect(0, 12888, '\p{Numeric_Value=029}', "");
Expect(1, 12888, '\p{^Numeric_Value=029}', "");
Expect(1, 12888, '\P{Numeric_Value=029}', "");
Expect(0, 12888, '\P{^Numeric_Value=029}', "");
Error('\p{Nv: -	02/a/9}');
Error('\P{Nv: -	02/a/9}');
Expect(1, 12889, '\p{Nv=00000000029}', "");
Expect(0, 12889, '\p{^Nv=00000000029}', "");
Expect(0, 12889, '\P{Nv=00000000029}', "");
Expect(1, 12889, '\P{^Nv=00000000029}', "");
Expect(0, 12888, '\p{Nv=00000000029}', "");
Expect(1, 12888, '\p{^Nv=00000000029}', "");
Expect(1, 12888, '\P{Nv=00000000029}', "");
Expect(0, 12888, '\P{^Nv=00000000029}', "");
Error('\p{Is_Numeric_Value= 	00000000029/a/}');
Error('\P{Is_Numeric_Value= 	00000000029/a/}');
Expect(1, 12889, '\p{Is_Numeric_Value=29}', "");
Expect(0, 12889, '\p{^Is_Numeric_Value=29}', "");
Expect(0, 12889, '\P{Is_Numeric_Value=29}', "");
Expect(1, 12889, '\P{^Is_Numeric_Value=29}', "");
Expect(0, 12888, '\p{Is_Numeric_Value=29}', "");
Expect(1, 12888, '\p{^Is_Numeric_Value=29}', "");
Expect(1, 12888, '\P{Is_Numeric_Value=29}', "");
Expect(0, 12888, '\P{^Is_Numeric_Value=29}', "");
Error('\p{Is_Nv:   _0 0/a/0-0_00	0 29}');
Error('\P{Is_Nv:   _0 0/a/0-0_00	0 29}');
Expect(1, 12889, '\p{Is_Nv:   +0029}', "");
Expect(0, 12889, '\p{^Is_Nv:   +0029}', "");
Expect(0, 12889, '\P{Is_Nv:   +0029}', "");
Expect(1, 12889, '\P{^Is_Nv:   +0029}', "");
Expect(0, 12888, '\p{Is_Nv:   +0029}', "");
Expect(1, 12888, '\p{^Is_Nv:   +0029}', "");
Expect(1, 12888, '\P{Is_Nv:   +0029}', "");
Expect(0, 12888, '\P{^Is_Nv:   +0029}', "");
Error('\p{Numeric_Value=_	00100000/a/}');
Error('\P{Numeric_Value=_	00100000/a/}');
Expect(1, 8584, '\p{Numeric_Value=000100000}', "");
Expect(0, 8584, '\p{^Numeric_Value=000100000}', "");
Expect(0, 8584, '\P{Numeric_Value=000100000}', "");
Expect(1, 8584, '\P{^Numeric_Value=000100000}', "");
Expect(0, 8583, '\p{Numeric_Value=000100000}', "");
Expect(1, 8583, '\p{^Numeric_Value=000100000}', "");
Expect(1, 8583, '\P{Numeric_Value=000100000}', "");
Expect(0, 8583, '\P{^Numeric_Value=000100000}', "");
Error('\p{Nv=:=- 0000100000}');
Error('\P{Nv=:=- 0000100000}');
Expect(1, 8584, '\p{Nv=000010000_0}', "");
Expect(0, 8584, '\p{^Nv=000010000_0}', "");
Expect(0, 8584, '\P{Nv=000010000_0}', "");
Expect(1, 8584, '\P{^Nv=000010000_0}', "");
Expect(0, 8583, '\p{Nv=000010000_0}', "");
Expect(1, 8583, '\p{^Nv=000010000_0}', "");
Expect(1, 8583, '\P{Nv=000010000_0}', "");
Expect(0, 8583, '\P{^Nv=000010000_0}', "");
Error('\p{Is_Numeric_Value=	_0 0 0-0:=10-0-000}');
Error('\P{Is_Numeric_Value=	_0 0 0-0:=10-0-000}');
Expect(1, 8584, '\p{Is_Numeric_Value:	+0000000100000}', "");
Expect(0, 8584, '\p{^Is_Numeric_Value:	+0000000100000}', "");
Expect(0, 8584, '\P{Is_Numeric_Value:	+0000000100000}', "");
Expect(1, 8584, '\P{^Is_Numeric_Value:	+0000000100000}', "");
Expect(0, 8583, '\p{Is_Numeric_Value:	+0000000100000}', "");
Expect(1, 8583, '\p{^Is_Numeric_Value:	+0000000100000}', "");
Expect(1, 8583, '\P{Is_Numeric_Value:	+0000000100000}', "");
Expect(0, 8583, '\P{^Is_Numeric_Value:	+0000000100000}', "");
Error('\p{Is_Nv=-:=+0000100000}');
Error('\P{Is_Nv=-:=+0000100000}');
Expect(1, 8584, '\p{Is_Nv=+0_1_0_0_000}', "");
Expect(0, 8584, '\p{^Is_Nv=+0_1_0_0_000}', "");
Expect(0, 8584, '\P{Is_Nv=+0_1_0_0_000}', "");
Expect(1, 8584, '\P{^Is_Nv=+0_1_0_0_000}', "");
Expect(0, 8583, '\p{Is_Nv=+0_1_0_0_000}', "");
Expect(1, 8583, '\p{^Is_Nv=+0_1_0_0_000}', "");
Expect(1, 8583, '\P{Is_Nv=+0_1_0_0_000}', "");
Expect(0, 8583, '\P{^Is_Nv=+0_1_0_0_000}', "");
Error('\p{Numeric_Value=/a/05 0}');
Error('\P{Numeric_Value=/a/05 0}');
Expect(1, 4982, '\p{Numeric_Value=0_0_0_0_0_50}', "");
Expect(0, 4982, '\p{^Numeric_Value=0_0_0_0_0_50}', "");
Expect(0, 4982, '\P{Numeric_Value=0_0_0_0_0_50}', "");
Expect(1, 4982, '\P{^Numeric_Value=0_0_0_0_0_50}', "");
Expect(0, 4981, '\p{Numeric_Value=0_0_0_0_0_50}', "");
Expect(1, 4981, '\p{^Numeric_Value=0_0_0_0_0_50}', "");
Expect(1, 4981, '\P{Numeric_Value=0_0_0_0_0_50}', "");
Expect(0, 4981, '\P{^Numeric_Value=0_0_0_0_0_50}', "");
Error('\p{Nv=-05/a/0}');
Error('\P{Nv=-05/a/0}');
Expect(1, 4982, '\p{Nv=50}', "");
Expect(0, 4982, '\p{^Nv=50}', "");
Expect(0, 4982, '\P{Nv=50}', "");
Expect(1, 4982, '\P{^Nv=50}', "");
Expect(0, 4981, '\p{Nv=50}', "");
Expect(1, 4981, '\p{^Nv=50}', "");
Expect(1, 4981, '\P{Nv=50}', "");
Expect(0, 4981, '\P{^Nv=50}', "");
Error('\p{Is_Numeric_Value=:=	_+0050}');
Error('\P{Is_Numeric_Value=:=	_+0050}');
Expect(1, 4982, '\p{Is_Numeric_Value=00_00_00_00_050}', "");
Expect(0, 4982, '\p{^Is_Numeric_Value=00_00_00_00_050}', "");
Expect(0, 4982, '\P{Is_Numeric_Value=00_00_00_00_050}', "");
Expect(1, 4982, '\P{^Is_Numeric_Value=00_00_00_00_050}', "");
Expect(0, 4981, '\p{Is_Numeric_Value=00_00_00_00_050}', "");
Expect(1, 4981, '\p{^Is_Numeric_Value=00_00_00_00_050}', "");
Expect(1, 4981, '\P{Is_Numeric_Value=00_00_00_00_050}', "");
Expect(0, 4981, '\P{^Is_Numeric_Value=00_00_00_00_050}', "");
Error('\p{Is_Nv=- 05/a/0}');
Error('\P{Is_Nv=- 05/a/0}');
Expect(1, 4982, '\p{Is_Nv=+00000050}', "");
Expect(0, 4982, '\p{^Is_Nv=+00000050}', "");
Expect(0, 4982, '\P{Is_Nv=+00000050}', "");
Expect(1, 4982, '\P{^Is_Nv=+00000050}', "");
Expect(0, 4981, '\p{Is_Nv=+00000050}', "");
Expect(1, 4981, '\p{^Is_Nv=+00000050}', "");
Expect(1, 4981, '\P{Is_Nv=+00000050}', "");
Expect(0, 4981, '\P{^Is_Nv=+00000050}', "");
Error('\p{Numeric_Value=_:=+00000000039}');
Error('\P{Numeric_Value=_:=+00000000039}');
Expect(1, 12980, '\p{Numeric_Value=0000000039}', "");
Expect(0, 12980, '\p{^Numeric_Value=0000000039}', "");
Expect(0, 12980, '\P{Numeric_Value=0000000039}', "");
Expect(1, 12980, '\P{^Numeric_Value=0000000039}', "");
Expect(0, 12979, '\p{Numeric_Value=0000000039}', "");
Expect(1, 12979, '\p{^Numeric_Value=0000000039}', "");
Expect(1, 12979, '\P{Numeric_Value=0000000039}', "");
Expect(0, 12979, '\P{^Numeric_Value=0000000039}', "");
Error('\p{Nv=-_39:=}');
Error('\P{Nv=-_39:=}');
Expect(1, 12980, '\p{Nv=000039}', "");
Expect(0, 12980, '\p{^Nv=000039}', "");
Expect(0, 12980, '\P{Nv=000039}', "");
Expect(1, 12980, '\P{^Nv=000039}', "");
Expect(0, 12979, '\p{Nv=000039}', "");
Expect(1, 12979, '\p{^Nv=000039}', "");
Expect(1, 12979, '\P{Nv=000039}', "");
Expect(0, 12979, '\P{^Nv=000039}', "");
Error('\p{Is_Numeric_Value=-+00-03/a/9}');
Error('\P{Is_Numeric_Value=-+00-03/a/9}');
Expect(1, 12980, '\p{Is_Numeric_Value=39}', "");
Expect(0, 12980, '\p{^Is_Numeric_Value=39}', "");
Expect(0, 12980, '\P{Is_Numeric_Value=39}', "");
Expect(1, 12980, '\P{^Is_Numeric_Value=39}', "");
Expect(0, 12979, '\p{Is_Numeric_Value=39}', "");
Expect(1, 12979, '\p{^Is_Numeric_Value=39}', "");
Expect(1, 12979, '\P{Is_Numeric_Value=39}', "");
Expect(0, 12979, '\P{^Is_Numeric_Value=39}', "");
Error('\p{Is_Nv=-:=0	0	0-0 0 0_0039}');
Error('\P{Is_Nv=-:=0	0	0-0 0 0_0039}');
Expect(1, 12980, '\p{Is_Nv=0_0_0_0_0_0_00039}', "");
Expect(0, 12980, '\p{^Is_Nv=0_0_0_0_0_0_00039}', "");
Expect(0, 12980, '\P{Is_Nv=0_0_0_0_0_0_00039}', "");
Expect(1, 12980, '\P{^Is_Nv=0_0_0_0_0_0_00039}', "");
Expect(0, 12979, '\p{Is_Nv=0_0_0_0_0_0_00039}', "");
Expect(1, 12979, '\p{^Is_Nv=0_0_0_0_0_0_00039}', "");
Expect(1, 12979, '\P{Is_Nv=0_0_0_0_0_0_00039}', "");
Expect(0, 12979, '\P{^Is_Nv=0_0_0_0_0_0_00039}', "");
Error('\p{Numeric_Value=:=	 00000001/00016}');
Error('\P{Numeric_Value=:=	 00000001/00016}');
Expect(1, 2548, '\p{Numeric_Value=00000001/016}', "");
Expect(0, 2548, '\p{^Numeric_Value=00000001/016}', "");
Expect(0, 2548, '\P{Numeric_Value=00000001/016}', "");
Expect(1, 2548, '\P{^Numeric_Value=00000001/016}', "");
Expect(0, 2547, '\p{Numeric_Value=00000001/016}', "");
Expect(1, 2547, '\p{^Numeric_Value=00000001/016}', "");
Expect(1, 2547, '\P{Numeric_Value=00000001/016}', "");
Expect(0, 2547, '\P{^Numeric_Value=00000001/016}', "");
Error('\p{Numeric_Value=0.06}');
Error('\P{Numeric_Value=0.06}');
Expect(1, 2548, '\p{Numeric_Value=0.062}', "");
Expect(0, 2548, '\p{^Numeric_Value=0.062}', "");
Expect(0, 2548, '\P{Numeric_Value=0.062}', "");
Expect(1, 2548, '\P{^Numeric_Value=0.062}', "");
Expect(0, 2547, '\p{Numeric_Value=0.062}', "");
Expect(1, 2547, '\p{^Numeric_Value=0.062}', "");
Expect(1, 2547, '\P{Numeric_Value=0.062}', "");
Expect(0, 2547, '\P{^Numeric_Value=0.062}', "");
Error('\p{Nv:    /a/1/000000016}');
Error('\P{Nv:    /a/1/000000016}');
Expect(1, 2548, '\p{Nv=00001/016}', "");
Expect(0, 2548, '\p{^Nv=00001/016}', "");
Expect(0, 2548, '\P{Nv=00001/016}', "");
Expect(1, 2548, '\P{^Nv=00001/016}', "");
Expect(0, 2547, '\p{Nv=00001/016}', "");
Expect(1, 2547, '\p{^Nv=00001/016}', "");
Expect(1, 2547, '\P{Nv=00001/016}', "");
Expect(0, 2547, '\P{^Nv=00001/016}', "");
Error('\p{Nv=0.06}');
Error('\P{Nv=0.06}');
Expect(1, 2548, '\p{Nv=0.062}', "");
Expect(0, 2548, '\p{^Nv=0.062}', "");
Expect(0, 2548, '\P{Nv=0.062}', "");
Expect(1, 2548, '\P{^Nv=0.062}', "");
Expect(0, 2547, '\p{Nv=0.062}', "");
Expect(1, 2547, '\p{^Nv=0.062}', "");
Expect(1, 2547, '\P{Nv=0.062}', "");
Expect(0, 2547, '\P{^Nv=0.062}', "");
Error('\p{Is_Numeric_Value=  +000000001/0016/a/}');
Error('\P{Is_Numeric_Value=  +000000001/0016/a/}');
Expect(1, 2548, '\p{Is_Numeric_Value:	00001/00000016}', "");
Expect(0, 2548, '\p{^Is_Numeric_Value:	00001/00000016}', "");
Expect(0, 2548, '\P{Is_Numeric_Value:	00001/00000016}', "");
Expect(1, 2548, '\P{^Is_Numeric_Value:	00001/00000016}', "");
Expect(0, 2547, '\p{Is_Numeric_Value:	00001/00000016}', "");
Expect(1, 2547, '\p{^Is_Numeric_Value:	00001/00000016}', "");
Expect(1, 2547, '\P{Is_Numeric_Value:	00001/00000016}', "");
Expect(0, 2547, '\P{^Is_Numeric_Value:	00001/00000016}', "");
Error('\p{Is_Numeric_Value=0.06}');
Error('\P{Is_Numeric_Value=0.06}');
Expect(1, 2548, '\p{Is_Numeric_Value=0.062}', "");
Expect(0, 2548, '\p{^Is_Numeric_Value=0.062}', "");
Expect(0, 2548, '\P{Is_Numeric_Value=0.062}', "");
Expect(1, 2548, '\P{^Is_Numeric_Value=0.062}', "");
Expect(0, 2547, '\p{Is_Numeric_Value=0.062}', "");
Expect(1, 2547, '\p{^Is_Numeric_Value=0.062}', "");
Expect(1, 2547, '\P{Is_Numeric_Value=0.062}', "");
Expect(0, 2547, '\P{^Is_Numeric_Value=0.062}', "");
Error('\p{Is_Nv= 0000000001/00000016/a/}');
Error('\P{Is_Nv= 0000000001/00000016/a/}');
Expect(1, 2548, '\p{Is_Nv=1/16}', "");
Expect(0, 2548, '\p{^Is_Nv=1/16}', "");
Expect(0, 2548, '\P{Is_Nv=1/16}', "");
Expect(1, 2548, '\P{^Is_Nv=1/16}', "");
Expect(0, 2547, '\p{Is_Nv=1/16}', "");
Expect(1, 2547, '\p{^Is_Nv=1/16}', "");
Expect(1, 2547, '\P{Is_Nv=1/16}', "");
Expect(0, 2547, '\P{^Is_Nv=1/16}', "");
Error('\p{Is_Nv=0.06}');
Error('\P{Is_Nv=0.06}');
Expect(1, 2548, '\p{Is_Nv=0.062}', "");
Expect(0, 2548, '\p{^Is_Nv=0.062}', "");
Expect(0, 2548, '\P{Is_Nv=0.062}', "");
Expect(1, 2548, '\P{^Is_Nv=0.062}', "");
Expect(0, 2547, '\p{Is_Nv=0.062}', "");
Expect(1, 2547, '\p{^Is_Nv=0.062}', "");
Expect(1, 2547, '\P{Is_Nv=0.062}', "");
Expect(0, 2547, '\P{^Is_Nv=0.062}', "");
Error('\p{Numeric_Value= 	+000003/2:=}');
Error('\P{Numeric_Value= 	+000003/2:=}');
Expect(1, 3883, '\p{Numeric_Value=+00003/000000002}', "");
Expect(0, 3883, '\p{^Numeric_Value=+00003/000000002}', "");
Expect(0, 3883, '\P{Numeric_Value=+00003/000000002}', "");
Expect(1, 3883, '\P{^Numeric_Value=+00003/000000002}', "");
Expect(0, 3882, '\p{Numeric_Value=+00003/000000002}', "");
Expect(1, 3882, '\p{^Numeric_Value=+00003/000000002}', "");
Expect(1, 3882, '\P{Numeric_Value=+00003/000000002}', "");
Expect(0, 3882, '\P{^Numeric_Value=+00003/000000002}', "");
Expect(1, 3883, '\p{Numeric_Value=1.500}', "");
Expect(0, 3883, '\p{^Numeric_Value=1.500}', "");
Expect(0, 3883, '\P{Numeric_Value=1.500}', "");
Expect(1, 3883, '\P{^Numeric_Value=1.500}', "");
Expect(0, 3882, '\p{Numeric_Value=1.500}', "");
Expect(1, 3882, '\p{^Numeric_Value=1.500}', "");
Expect(1, 3882, '\P{Numeric_Value=1.500}', "");
Expect(0, 3882, '\P{^Numeric_Value=1.500}', "");
Error('\p{Nv=/a/0003/002}');
Error('\P{Nv=/a/0003/002}');
Expect(1, 3883, '\p{Nv=0003/2}', "");
Expect(0, 3883, '\p{^Nv=0003/2}', "");
Expect(0, 3883, '\P{Nv=0003/2}', "");
Expect(1, 3883, '\P{^Nv=0003/2}', "");
Expect(0, 3882, '\p{Nv=0003/2}', "");
Expect(1, 3882, '\p{^Nv=0003/2}', "");
Expect(1, 3882, '\P{Nv=0003/2}', "");
Expect(0, 3882, '\P{^Nv=0003/2}', "");
Expect(1, 3883, '\p{Nv=1.500}', "");
Expect(0, 3883, '\p{^Nv=1.500}', "");
Expect(0, 3883, '\P{Nv=1.500}', "");
Expect(1, 3883, '\P{^Nv=1.500}', "");
Expect(0, 3882, '\p{Nv=1.500}', "");
Expect(1, 3882, '\p{^Nv=1.500}', "");
Expect(1, 3882, '\P{Nv=1.500}', "");
Expect(0, 3882, '\P{^Nv=1.500}', "");
Error('\p{Is_Numeric_Value=:=	_0003/002}');
Error('\P{Is_Numeric_Value=:=	_0003/002}');
Expect(1, 3883, '\p{Is_Numeric_Value=0000000003/002}', "");
Expect(0, 3883, '\p{^Is_Numeric_Value=0000000003/002}', "");
Expect(0, 3883, '\P{Is_Numeric_Value=0000000003/002}', "");
Expect(1, 3883, '\P{^Is_Numeric_Value=0000000003/002}', "");
Expect(0, 3882, '\p{Is_Numeric_Value=0000000003/002}', "");
Expect(1, 3882, '\p{^Is_Numeric_Value=0000000003/002}', "");
Expect(1, 3882, '\P{Is_Numeric_Value=0000000003/002}', "");
Expect(0, 3882, '\P{^Is_Numeric_Value=0000000003/002}', "");
Expect(1, 3883, '\p{Is_Numeric_Value=1.500}', "");
Expect(0, 3883, '\p{^Is_Numeric_Value=1.500}', "");
Expect(0, 3883, '\P{Is_Numeric_Value=1.500}', "");
Expect(1, 3883, '\P{^Is_Numeric_Value=1.500}', "");
Expect(0, 3882, '\p{Is_Numeric_Value=1.500}', "");
Expect(1, 3882, '\p{^Is_Numeric_Value=1.500}', "");
Expect(1, 3882, '\P{Is_Numeric_Value=1.500}', "");
Expect(0, 3882, '\P{^Is_Numeric_Value=1.500}', "");
Error('\p{Is_Nv=_/a/00000003/00002}');
Error('\P{Is_Nv=_/a/00000003/00002}');
Expect(1, 3883, '\p{Is_Nv=0003/0000000002}', "");
Expect(0, 3883, '\p{^Is_Nv=0003/0000000002}', "");
Expect(0, 3883, '\P{Is_Nv=0003/0000000002}', "");
Expect(1, 3883, '\P{^Is_Nv=0003/0000000002}', "");
Expect(0, 3882, '\p{Is_Nv=0003/0000000002}', "");
Expect(1, 3882, '\p{^Is_Nv=0003/0000000002}', "");
Expect(1, 3882, '\P{Is_Nv=0003/0000000002}', "");
Expect(0, 3882, '\P{^Is_Nv=0003/0000000002}', "");
Expect(1, 3883, '\p{Is_Nv=1.500}', "");
Expect(0, 3883, '\p{^Is_Nv=1.500}', "");
Expect(0, 3883, '\P{Is_Nv=1.500}', "");
Expect(1, 3883, '\P{^Is_Nv=1.500}', "");
Expect(0, 3882, '\p{Is_Nv=1.500}', "");
Expect(1, 3882, '\p{^Is_Nv=1.500}', "");
Expect(1, 3882, '\P{Is_Nv=1.500}', "");
Expect(0, 3882, '\P{^Is_Nv=1.500}', "");
Error('\p{Numeric_Value=__0041/a/}');
Error('\P{Numeric_Value=__0041/a/}');
Expect(1, 12982, '\p{Numeric_Value=+0_0_41}', "");
Expect(0, 12982, '\p{^Numeric_Value=+0_0_41}', "");
Expect(0, 12982, '\P{Numeric_Value=+0_0_41}', "");
Expect(1, 12982, '\P{^Numeric_Value=+0_0_41}', "");
Expect(0, 12981, '\p{Numeric_Value=+0_0_41}', "");
Expect(1, 12981, '\p{^Numeric_Value=+0_0_41}', "");
Expect(1, 12981, '\P{Numeric_Value=+0_0_41}', "");
Expect(0, 12981, '\P{^Numeric_Value=+0_0_41}', "");
Error('\p{Nv=_	0000000041/a/}');
Error('\P{Nv=_	0000000041/a/}');
Expect(1, 12982, '\p{Nv=+0000041}', "");
Expect(0, 12982, '\p{^Nv=+0000041}', "");
Expect(0, 12982, '\P{Nv=+0000041}', "");
Expect(1, 12982, '\P{^Nv=+0000041}', "");
Expect(0, 12981, '\p{Nv=+0000041}', "");
Expect(1, 12981, '\p{^Nv=+0000041}', "");
Expect(1, 12981, '\P{Nv=+0000041}', "");
Expect(0, 12981, '\P{^Nv=+0000041}', "");
Error('\p{Is_Numeric_Value=	-000041:=}');
Error('\P{Is_Numeric_Value=	-000041:=}');
Expect(1, 12982, '\p{Is_Numeric_Value=0004_1}', "");
Expect(0, 12982, '\p{^Is_Numeric_Value=0004_1}', "");
Expect(0, 12982, '\P{Is_Numeric_Value=0004_1}', "");
Expect(1, 12982, '\P{^Is_Numeric_Value=0004_1}', "");
Expect(0, 12981, '\p{Is_Numeric_Value=0004_1}', "");
Expect(1, 12981, '\p{^Is_Numeric_Value=0004_1}', "");
Expect(1, 12981, '\P{Is_Numeric_Value=0004_1}', "");
Expect(0, 12981, '\P{^Is_Numeric_Value=0004_1}', "");
Error('\p{Is_Nv=-0/a/0_00-00 0	041}');
Error('\P{Is_Nv=-0/a/0_00-00 0	041}');
Expect(1, 12982, '\p{Is_Nv=41}', "");
Expect(0, 12982, '\p{^Is_Nv=41}', "");
Expect(0, 12982, '\P{Is_Nv=41}', "");
Expect(1, 12982, '\P{^Is_Nv=41}', "");
Expect(0, 12981, '\p{Is_Nv=41}', "");
Expect(1, 12981, '\p{^Is_Nv=41}', "");
Expect(1, 12981, '\P{Is_Nv=41}', "");
Expect(0, 12981, '\P{^Is_Nv=41}', "");
Error('\p{Numeric_Value=:=_01_2}');
Error('\P{Numeric_Value=:=_01_2}');
Expect(1, 8555, '\p{Numeric_Value=+000_000_000_12}', "");
Expect(0, 8555, '\p{^Numeric_Value=+000_000_000_12}', "");
Expect(0, 8555, '\P{Numeric_Value=+000_000_000_12}', "");
Expect(1, 8555, '\P{^Numeric_Value=+000_000_000_12}', "");
Expect(0, 8554, '\p{Numeric_Value=+000_000_000_12}', "");
Expect(1, 8554, '\p{^Numeric_Value=+000_000_000_12}', "");
Expect(1, 8554, '\P{Numeric_Value=+000_000_000_12}', "");
Expect(0, 8554, '\P{^Numeric_Value=+000_000_000_12}', "");
Error('\p{Nv=	_0000000012/a/}');
Error('\P{Nv=	_0000000012/a/}');
Expect(1, 8555, '\p{Nv=1_2}', "");
Expect(0, 8555, '\p{^Nv=1_2}', "");
Expect(0, 8555, '\P{Nv=1_2}', "");
Expect(1, 8555, '\P{^Nv=1_2}', "");
Expect(0, 8554, '\p{Nv=1_2}', "");
Expect(1, 8554, '\p{^Nv=1_2}', "");
Expect(1, 8554, '\P{Nv=1_2}', "");
Expect(0, 8554, '\P{^Nv=1_2}', "");
Error('\p{Is_Numeric_Value= /a/0	0	12}');
Error('\P{Is_Numeric_Value= /a/0	0	12}');
Expect(1, 8555, '\p{Is_Numeric_Value=0_0_0_012}', "");
Expect(0, 8555, '\p{^Is_Numeric_Value=0_0_0_012}', "");
Expect(0, 8555, '\P{Is_Numeric_Value=0_0_0_012}', "");
Expect(1, 8555, '\P{^Is_Numeric_Value=0_0_0_012}', "");
Expect(0, 8554, '\p{Is_Numeric_Value=0_0_0_012}', "");
Expect(1, 8554, '\p{^Is_Numeric_Value=0_0_0_012}', "");
Expect(1, 8554, '\P{Is_Numeric_Value=0_0_0_012}', "");
Expect(0, 8554, '\P{^Is_Numeric_Value=0_0_0_012}', "");
Error('\p{Is_Nv=-_00000000012/a/}');
Error('\P{Is_Nv=-_00000000012/a/}');
Expect(1, 8555, '\p{Is_Nv=+012}', "");
Expect(0, 8555, '\p{^Is_Nv=+012}', "");
Expect(0, 8555, '\P{Is_Nv=+012}', "");
Expect(1, 8555, '\P{^Is_Nv=+012}', "");
Expect(0, 8554, '\p{Is_Nv=+012}', "");
Expect(1, 8554, '\p{^Is_Nv=+012}', "");
Expect(1, 8554, '\P{Is_Nv=+012}', "");
Expect(0, 8554, '\P{^Is_Nv=+012}', "");
Error('\p{Numeric_Value=:=  0000015}');
Error('\P{Numeric_Value=:=  0000015}');
Expect(1, 9326, '\p{Numeric_Value=0000000015}', "");
Expect(0, 9326, '\p{^Numeric_Value=0000000015}', "");
Expect(0, 9326, '\P{Numeric_Value=0000000015}', "");
Expect(1, 9326, '\P{^Numeric_Value=0000000015}', "");
Expect(0, 9325, '\p{Numeric_Value=0000000015}', "");
Expect(1, 9325, '\p{^Numeric_Value=0000000015}', "");
Expect(1, 9325, '\P{Numeric_Value=0000000015}', "");
Expect(0, 9325, '\P{^Numeric_Value=0000000015}', "");
Error('\p{Nv=	/a/0000	0001_5}');
Error('\P{Nv=	/a/0000	0001_5}');
Expect(1, 9326, '\p{Nv=+015}', "");
Expect(0, 9326, '\p{^Nv=+015}', "");
Expect(0, 9326, '\P{Nv=+015}', "");
Expect(1, 9326, '\P{^Nv=+015}', "");
Expect(0, 9325, '\p{Nv=+015}', "");
Expect(1, 9325, '\p{^Nv=+015}', "");
Expect(1, 9325, '\P{Nv=+015}', "");
Expect(0, 9325, '\P{^Nv=+015}', "");
Error('\p{Is_Numeric_Value=--00/a/00_15}');
Error('\P{Is_Numeric_Value=--00/a/00_15}');
Expect(1, 9326, '\p{Is_Numeric_Value=000015}', "");
Expect(0, 9326, '\p{^Is_Numeric_Value=000015}', "");
Expect(0, 9326, '\P{Is_Numeric_Value=000015}', "");
Expect(1, 9326, '\P{^Is_Numeric_Value=000015}', "");
Expect(0, 9325, '\p{Is_Numeric_Value=000015}', "");
Expect(1, 9325, '\p{^Is_Numeric_Value=000015}', "");
Expect(1, 9325, '\P{Is_Numeric_Value=000015}', "");
Expect(0, 9325, '\P{^Is_Numeric_Value=000015}', "");
Error('\p{Is_Nv=	-00_0	15:=}');
Error('\P{Is_Nv=	-00_0	15:=}');
Expect(1, 9326, '\p{Is_Nv=00000015}', "");
Expect(0, 9326, '\p{^Is_Nv=00000015}', "");
Expect(0, 9326, '\P{Is_Nv=00000015}', "");
Expect(1, 9326, '\P{^Is_Nv=00000015}', "");
Expect(0, 9325, '\p{Is_Nv=00000015}', "");
Expect(1, 9325, '\p{^Is_Nv=00000015}', "");
Expect(1, 9325, '\P{Is_Nv=00000015}', "");
Expect(0, 9325, '\P{^Is_Nv=00000015}', "");
Error('\p{Numeric_Value=-_/a/0000001/00000002}');
Error('\P{Numeric_Value=-_/a/0000001/00000002}');
Expect(1, 3891, '\p{Numeric_Value=-00001/0000002}', "");
Expect(0, 3891, '\p{^Numeric_Value=-00001/0000002}', "");
Expect(0, 3891, '\P{Numeric_Value=-00001/0000002}', "");
Expect(1, 3891, '\P{^Numeric_Value=-00001/0000002}', "");
Expect(0, 3890, '\p{Numeric_Value=-00001/0000002}', "");
Expect(1, 3890, '\p{^Numeric_Value=-00001/0000002}', "");
Expect(1, 3890, '\P{Numeric_Value=-00001/0000002}', "");
Expect(0, 3890, '\P{^Numeric_Value=-00001/0000002}', "");
Expect(1, 3891, '\p{Numeric_Value=-0.500}', "");
Expect(0, 3891, '\p{^Numeric_Value=-0.500}', "");
Expect(0, 3891, '\P{Numeric_Value=-0.500}', "");
Expect(1, 3891, '\P{^Numeric_Value=-0.500}', "");
Expect(0, 3890, '\p{Numeric_Value=-0.500}', "");
Expect(1, 3890, '\p{^Numeric_Value=-0.500}', "");
Expect(1, 3890, '\P{Numeric_Value=-0.500}', "");
Expect(0, 3890, '\P{^Numeric_Value=-0.500}', "");
Error('\p{Nv=/a/-0000000001/0000002}');
Error('\P{Nv=/a/-0000000001/0000002}');
Expect(1, 3891, '\p{Nv=-00001/02}', "");
Expect(0, 3891, '\p{^Nv=-00001/02}', "");
Expect(0, 3891, '\P{Nv=-00001/02}', "");
Expect(1, 3891, '\P{^Nv=-00001/02}', "");
Expect(0, 3890, '\p{Nv=-00001/02}', "");
Expect(1, 3890, '\p{^Nv=-00001/02}', "");
Expect(1, 3890, '\P{Nv=-00001/02}', "");
Expect(0, 3890, '\P{^Nv=-00001/02}', "");
Expect(1, 3891, '\p{Nv=-0.500}', "");
Expect(0, 3891, '\p{^Nv=-0.500}', "");
Expect(0, 3891, '\P{Nv=-0.500}', "");
Expect(1, 3891, '\P{^Nv=-0.500}', "");
Expect(0, 3890, '\p{Nv=-0.500}', "");
Expect(1, 3890, '\p{^Nv=-0.500}', "");
Expect(1, 3890, '\P{Nv=-0.500}', "");
Expect(0, 3890, '\P{^Nv=-0.500}', "");
Error('\p{Is_Numeric_Value=_	_0000000001/000000002/a/}');
Error('\P{Is_Numeric_Value=_	_0000000001/000000002/a/}');
Expect(1, 3891, '\p{Is_Numeric_Value=-0000000001/0000000002}', "");
Expect(0, 3891, '\p{^Is_Numeric_Value=-0000000001/0000000002}', "");
Expect(0, 3891, '\P{Is_Numeric_Value=-0000000001/0000000002}', "");
Expect(1, 3891, '\P{^Is_Numeric_Value=-0000000001/0000000002}', "");
Expect(0, 3890, '\p{Is_Numeric_Value=-0000000001/0000000002}', "");
Expect(1, 3890, '\p{^Is_Numeric_Value=-0000000001/0000000002}', "");
Expect(1, 3890, '\P{Is_Numeric_Value=-0000000001/0000000002}', "");
Expect(0, 3890, '\P{^Is_Numeric_Value=-0000000001/0000000002}', "");
Expect(1, 3891, '\p{Is_Numeric_Value=-0.500}', "");
Expect(0, 3891, '\p{^Is_Numeric_Value=-0.500}', "");
Expect(0, 3891, '\P{Is_Numeric_Value=-0.500}', "");
Expect(1, 3891, '\P{^Is_Numeric_Value=-0.500}', "");
Expect(0, 3890, '\p{Is_Numeric_Value=-0.500}', "");
Expect(1, 3890, '\p{^Is_Numeric_Value=-0.500}', "");
Expect(1, 3890, '\P{Is_Numeric_Value=-0.500}', "");
Expect(0, 3890, '\P{^Is_Numeric_Value=-0.500}', "");
Error('\p{Is_Nv=-/a/ 0000000001/00000002}');
Error('\P{Is_Nv=-/a/ 0000000001/00000002}');
Expect(1, 3891, '\p{Is_Nv=-00000001/02}', "");
Expect(0, 3891, '\p{^Is_Nv=-00000001/02}', "");
Expect(0, 3891, '\P{Is_Nv=-00000001/02}', "");
Expect(1, 3891, '\P{^Is_Nv=-00000001/02}', "");
Expect(0, 3890, '\p{Is_Nv=-00000001/02}', "");
Expect(1, 3890, '\p{^Is_Nv=-00000001/02}', "");
Expect(1, 3890, '\P{Is_Nv=-00000001/02}', "");
Expect(0, 3890, '\P{^Is_Nv=-00000001/02}', "");
Expect(1, 3891, '\p{Is_Nv=-0.500}', "");
Expect(0, 3891, '\p{^Is_Nv=-0.500}', "");
Expect(0, 3891, '\P{Is_Nv=-0.500}', "");
Expect(1, 3891, '\P{^Is_Nv=-0.500}', "");
Expect(0, 3890, '\p{Is_Nv=-0.500}', "");
Expect(1, 3890, '\p{^Is_Nv=-0.500}', "");
Expect(1, 3890, '\P{Is_Nv=-0.500}', "");
Expect(0, 3890, '\P{^Is_Nv=-0.500}', "");
Error('\p{Numeric_Value=-_+80000/a/}');
Error('\P{Numeric_Value=-_+80000/a/}');
Expect(1, 65842, '\p{Numeric_Value=0_0_0_0_0_0_8_0000}', "");
Expect(0, 65842, '\p{^Numeric_Value=0_0_0_0_0_0_8_0000}', "");
Expect(0, 65842, '\P{Numeric_Value=0_0_0_0_0_0_8_0000}', "");
Expect(1, 65842, '\P{^Numeric_Value=0_0_0_0_0_0_8_0000}', "");
Expect(0, 65841, '\p{Numeric_Value=0_0_0_0_0_0_8_0000}', "");
Expect(1, 65841, '\p{^Numeric_Value=0_0_0_0_0_0_8_0000}', "");
Expect(1, 65841, '\P{Numeric_Value=0_0_0_0_0_0_8_0000}', "");
Expect(0, 65841, '\P{^Numeric_Value=0_0_0_0_0_0_8_0000}', "");
Error('\p{Nv=_+8 0 0:=00}');
Error('\P{Nv=_+8 0 0:=00}');
Expect(1, 65842, '\p{Nv:   000000080000}', "");
Expect(0, 65842, '\p{^Nv:   000000080000}', "");
Expect(0, 65842, '\P{Nv:   000000080000}', "");
Expect(1, 65842, '\P{^Nv:   000000080000}', "");
Expect(0, 65841, '\p{Nv:   000000080000}', "");
Expect(1, 65841, '\p{^Nv:   000000080000}', "");
Expect(1, 65841, '\P{Nv:   000000080000}', "");
Expect(0, 65841, '\P{^Nv:   000000080000}', "");
Error('\p{Is_Numeric_Value=/a/	80000}');
Error('\P{Is_Numeric_Value=/a/	80000}');
Expect(1, 65842, '\p{Is_Numeric_Value=+00080000}', "");
Expect(0, 65842, '\p{^Is_Numeric_Value=+00080000}', "");
Expect(0, 65842, '\P{Is_Numeric_Value=+00080000}', "");
Expect(1, 65842, '\P{^Is_Numeric_Value=+00080000}', "");
Expect(0, 65841, '\p{Is_Numeric_Value=+00080000}', "");
Expect(1, 65841, '\p{^Is_Numeric_Value=+00080000}', "");
Expect(1, 65841, '\P{Is_Numeric_Value=+00080000}', "");
Expect(0, 65841, '\P{^Is_Numeric_Value=+00080000}', "");
Error('\p{Is_Nv=/a/-	000000080000}');
Error('\P{Is_Nv=/a/-	000000080000}');
Expect(1, 65842, '\p{Is_Nv:   +0008000_0}', "");
Expect(0, 65842, '\p{^Is_Nv:   +0008000_0}', "");
Expect(0, 65842, '\P{Is_Nv:   +0008000_0}', "");
Expect(1, 65842, '\P{^Is_Nv:   +0008000_0}', "");
Expect(0, 65841, '\p{Is_Nv:   +0008000_0}', "");
Expect(1, 65841, '\p{^Is_Nv:   +0008000_0}', "");
Expect(1, 65841, '\P{Is_Nv:   +0008000_0}', "");
Expect(0, 65841, '\P{^Is_Nv:   +0008000_0}', "");
Error('\p{Numeric_Value=:= 	06 0}');
Error('\P{Numeric_Value=:= 	06 0}');
Expect(1, 4983, '\p{Numeric_Value=60}', "");
Expect(0, 4983, '\p{^Numeric_Value=60}', "");
Expect(0, 4983, '\P{Numeric_Value=60}', "");
Expect(1, 4983, '\P{^Numeric_Value=60}', "");
Expect(0, 4982, '\p{Numeric_Value=60}', "");
Expect(1, 4982, '\p{^Numeric_Value=60}', "");
Expect(1, 4982, '\P{Numeric_Value=60}', "");
Expect(0, 4982, '\P{^Numeric_Value=60}', "");
Error('\p{Nv= :=00-000_0-0060}');
Error('\P{Nv= :=00-000_0-0060}');
Expect(1, 4983, '\p{Nv=000000060}', "");
Expect(0, 4983, '\p{^Nv=000000060}', "");
Expect(0, 4983, '\P{Nv=000000060}', "");
Expect(1, 4983, '\P{^Nv=000000060}', "");
Expect(0, 4982, '\p{Nv=000000060}', "");
Expect(1, 4982, '\p{^Nv=000000060}', "");
Expect(1, 4982, '\P{Nv=000000060}', "");
Expect(0, 4982, '\P{^Nv=000000060}', "");
Error('\p{Is_Numeric_Value:	-0 0/a/0 0_0_0 0	0060}');
Error('\P{Is_Numeric_Value:	-0 0/a/0 0_0_0 0	0060}');
Expect(1, 4983, '\p{Is_Numeric_Value=0060}', "");
Expect(0, 4983, '\p{^Is_Numeric_Value=0060}', "");
Expect(0, 4983, '\P{Is_Numeric_Value=0060}', "");
Expect(1, 4983, '\P{^Is_Numeric_Value=0060}', "");
Expect(0, 4982, '\p{Is_Numeric_Value=0060}', "");
Expect(1, 4982, '\p{^Is_Numeric_Value=0060}', "");
Expect(1, 4982, '\P{Is_Numeric_Value=0060}', "");
Expect(0, 4982, '\P{^Is_Numeric_Value=0060}', "");
Error('\p{Is_Nv= /a/00060}');
Error('\P{Is_Nv= /a/00060}');
Expect(1, 4983, '\p{Is_Nv=0000006_0}', "");
Expect(0, 4983, '\p{^Is_Nv=0000006_0}', "");
Expect(0, 4983, '\P{Is_Nv=0000006_0}', "");
Expect(1, 4983, '\P{^Is_Nv=0000006_0}', "");
Expect(0, 4982, '\p{Is_Nv=0000006_0}', "");
Expect(1, 4982, '\p{^Is_Nv=0000006_0}', "");
Expect(1, 4982, '\P{Is_Nv=0000006_0}', "");
Expect(0, 4982, '\P{^Is_Nv=0000006_0}', "");
Error('\p{Numeric_Value:	/a/0000045}');
Error('\P{Numeric_Value:	/a/0000045}');
Expect(1, 12986, '\p{Numeric_Value=0045}', "");
Expect(0, 12986, '\p{^Numeric_Value=0045}', "");
Expect(0, 12986, '\P{Numeric_Value=0045}', "");
Expect(1, 12986, '\P{^Numeric_Value=0045}', "");
Expect(0, 12985, '\p{Numeric_Value=0045}', "");
Expect(1, 12985, '\p{^Numeric_Value=0045}', "");
Expect(1, 12985, '\P{Numeric_Value=0045}', "");
Expect(0, 12985, '\P{^Numeric_Value=0045}', "");
Error('\p{Nv:   --+00-00:=00_045}');
Error('\P{Nv:   --+00-00:=00_045}');
Expect(1, 12986, '\p{Nv=00000045}', "");
Expect(0, 12986, '\p{^Nv=00000045}', "");
Expect(0, 12986, '\P{Nv=00000045}', "");
Expect(1, 12986, '\P{^Nv=00000045}', "");
Expect(0, 12985, '\p{Nv=00000045}', "");
Expect(1, 12985, '\p{^Nv=00000045}', "");
Expect(1, 12985, '\P{Nv=00000045}', "");
Expect(0, 12985, '\P{^Nv=00000045}', "");
Error('\p{Is_Numeric_Value=--0000045/a/}');
Error('\P{Is_Numeric_Value=--0000045/a/}');
Expect(1, 12986, '\p{Is_Numeric_Value=000045}', "");
Expect(0, 12986, '\p{^Is_Numeric_Value=000045}', "");
Expect(0, 12986, '\P{Is_Numeric_Value=000045}', "");
Expect(1, 12986, '\P{^Is_Numeric_Value=000045}', "");
Expect(0, 12985, '\p{Is_Numeric_Value=000045}', "");
Expect(1, 12985, '\p{^Is_Numeric_Value=000045}', "");
Expect(1, 12985, '\P{Is_Numeric_Value=000045}', "");
Expect(0, 12985, '\P{^Is_Numeric_Value=000045}', "");
Error('\p{Is_Nv=	/a/000000 00 04-5}');
Error('\P{Is_Nv=	/a/000000 00 04-5}');
Expect(1, 12986, '\p{Is_Nv=+0045}', "");
Expect(0, 12986, '\p{^Is_Nv=+0045}', "");
Expect(0, 12986, '\P{Is_Nv=+0045}', "");
Expect(1, 12986, '\P{^Is_Nv=+0045}', "");
Expect(0, 12985, '\p{Is_Nv=+0045}', "");
Expect(1, 12985, '\p{^Is_Nv=+0045}', "");
Expect(1, 12985, '\P{Is_Nv=+0045}', "");
Expect(0, 12985, '\P{^Is_Nv=+0045}', "");
Error('\p{Numeric_Value=/a/ 019}');
Error('\P{Numeric_Value=/a/ 019}');
Expect(1, 5872, '\p{Numeric_Value=01_9}', "");
Expect(0, 5872, '\p{^Numeric_Value=01_9}', "");
Expect(0, 5872, '\P{Numeric_Value=01_9}', "");
Expect(1, 5872, '\P{^Numeric_Value=01_9}', "");
Expect(0, 5871, '\p{Numeric_Value=01_9}', "");
Expect(1, 5871, '\p{^Numeric_Value=01_9}', "");
Expect(1, 5871, '\P{Numeric_Value=01_9}', "");
Expect(0, 5871, '\P{^Numeric_Value=01_9}', "");
Error('\p{Nv= /a/+0000000019}');
Error('\P{Nv= /a/+0000000019}');
Expect(1, 5872, '\p{Nv=01_9}', "");
Expect(0, 5872, '\p{^Nv=01_9}', "");
Expect(0, 5872, '\P{Nv=01_9}', "");
Expect(1, 5872, '\P{^Nv=01_9}', "");
Expect(0, 5871, '\p{Nv=01_9}', "");
Expect(1, 5871, '\p{^Nv=01_9}', "");
Expect(1, 5871, '\P{Nv=01_9}', "");
Expect(0, 5871, '\P{^Nv=01_9}', "");
Error('\p{Is_Numeric_Value=:=_	+0000000019}');
Error('\P{Is_Numeric_Value=:=_	+0000000019}');
Expect(1, 5872, '\p{Is_Numeric_Value=1_9}', "");
Expect(0, 5872, '\p{^Is_Numeric_Value=1_9}', "");
Expect(0, 5872, '\P{Is_Numeric_Value=1_9}', "");
Expect(1, 5872, '\P{^Is_Numeric_Value=1_9}', "");
Expect(0, 5871, '\p{Is_Numeric_Value=1_9}', "");
Expect(1, 5871, '\p{^Is_Numeric_Value=1_9}', "");
Expect(1, 5871, '\P{Is_Numeric_Value=1_9}', "");
Expect(0, 5871, '\P{^Is_Numeric_Value=1_9}', "");
Error('\p{Is_Nv=-:=00019}');
Error('\P{Is_Nv=-:=00019}');
Expect(1, 5872, '\p{Is_Nv:   +1_9}', "");
Expect(0, 5872, '\p{^Is_Nv:   +1_9}', "");
Expect(0, 5872, '\P{Is_Nv:   +1_9}', "");
Expect(1, 5872, '\P{^Is_Nv:   +1_9}', "");
Expect(0, 5871, '\p{Is_Nv:   +1_9}', "");
Expect(1, 5871, '\p{^Is_Nv:   +1_9}', "");
Expect(1, 5871, '\P{Is_Nv:   +1_9}', "");
Expect(0, 5871, '\P{^Is_Nv:   +1_9}', "");
Error('\p{Numeric_Value=:= 	+00000000011/0002}');
Error('\P{Numeric_Value=:= 	+00000000011/0002}');
Expect(1, 3887, '\p{Numeric_Value=11/0000000002}', "");
Expect(0, 3887, '\p{^Numeric_Value=11/0000000002}', "");
Expect(0, 3887, '\P{Numeric_Value=11/0000000002}', "");
Expect(1, 3887, '\P{^Numeric_Value=11/0000000002}', "");
Expect(0, 3886, '\p{Numeric_Value=11/0000000002}', "");
Expect(1, 3886, '\p{^Numeric_Value=11/0000000002}', "");
Expect(1, 3886, '\P{Numeric_Value=11/0000000002}', "");
Expect(0, 3886, '\P{^Numeric_Value=11/0000000002}', "");
Expect(1, 3887, '\p{Numeric_Value=5.500}', "");
Expect(0, 3887, '\p{^Numeric_Value=5.500}', "");
Expect(0, 3887, '\P{Numeric_Value=5.500}', "");
Expect(1, 3887, '\P{^Numeric_Value=5.500}', "");
Expect(0, 3886, '\p{Numeric_Value=5.500}', "");
Expect(1, 3886, '\p{^Numeric_Value=5.500}', "");
Expect(1, 3886, '\P{Numeric_Value=5.500}', "");
Expect(0, 3886, '\P{^Numeric_Value=5.500}', "");
Error('\p{Nv=	:=000000011/02}');
Error('\P{Nv=	:=000000011/02}');
Expect(1, 3887, '\p{Nv=0000000011/002}', "");
Expect(0, 3887, '\p{^Nv=0000000011/002}', "");
Expect(0, 3887, '\P{Nv=0000000011/002}', "");
Expect(1, 3887, '\P{^Nv=0000000011/002}', "");
Expect(0, 3886, '\p{Nv=0000000011/002}', "");
Expect(1, 3886, '\p{^Nv=0000000011/002}', "");
Expect(1, 3886, '\P{Nv=0000000011/002}', "");
Expect(0, 3886, '\P{^Nv=0000000011/002}', "");
Expect(1, 3887, '\p{Nv=5.500}', "");
Expect(0, 3887, '\p{^Nv=5.500}', "");
Expect(0, 3887, '\P{Nv=5.500}', "");
Expect(1, 3887, '\P{^Nv=5.500}', "");
Expect(0, 3886, '\p{Nv=5.500}', "");
Expect(1, 3886, '\p{^Nv=5.500}', "");
Expect(1, 3886, '\P{Nv=5.500}', "");
Expect(0, 3886, '\P{^Nv=5.500}', "");
Error('\p{Is_Numeric_Value:   _/a/00000011/002}');
Error('\P{Is_Numeric_Value:   _/a/00000011/002}');
Expect(1, 3887, '\p{Is_Numeric_Value=00000011/00000002}', "");
Expect(0, 3887, '\p{^Is_Numeric_Value=00000011/00000002}', "");
Expect(0, 3887, '\P{Is_Numeric_Value=00000011/00000002}', "");
Expect(1, 3887, '\P{^Is_Numeric_Value=00000011/00000002}', "");
Expect(0, 3886, '\p{Is_Numeric_Value=00000011/00000002}', "");
Expect(1, 3886, '\p{^Is_Numeric_Value=00000011/00000002}', "");
Expect(1, 3886, '\P{Is_Numeric_Value=00000011/00000002}', "");
Expect(0, 3886, '\P{^Is_Numeric_Value=00000011/00000002}', "");
Expect(1, 3887, '\p{Is_Numeric_Value=5.500}', "");
Expect(0, 3887, '\p{^Is_Numeric_Value=5.500}', "");
Expect(0, 3887, '\P{Is_Numeric_Value=5.500}', "");
Expect(1, 3887, '\P{^Is_Numeric_Value=5.500}', "");
Expect(0, 3886, '\p{Is_Numeric_Value=5.500}', "");
Expect(1, 3886, '\p{^Is_Numeric_Value=5.500}', "");
Expect(1, 3886, '\P{Is_Numeric_Value=5.500}', "");
Expect(0, 3886, '\P{^Is_Numeric_Value=5.500}', "");
Error('\p{Is_Nv=_ 000000011/0000002/a/}');
Error('\P{Is_Nv=_ 000000011/0000002/a/}');
Expect(1, 3887, '\p{Is_Nv=000011/0000002}', "");
Expect(0, 3887, '\p{^Is_Nv=000011/0000002}', "");
Expect(0, 3887, '\P{Is_Nv=000011/0000002}', "");
Expect(1, 3887, '\P{^Is_Nv=000011/0000002}', "");
Expect(0, 3886, '\p{Is_Nv=000011/0000002}', "");
Expect(1, 3886, '\p{^Is_Nv=000011/0000002}', "");
Expect(1, 3886, '\P{Is_Nv=000011/0000002}', "");
Expect(0, 3886, '\P{^Is_Nv=000011/0000002}', "");
Expect(1, 3887, '\p{Is_Nv=5.500}', "");
Expect(0, 3887, '\p{^Is_Nv=5.500}', "");
Expect(0, 3887, '\P{Is_Nv=5.500}', "");
Expect(1, 3887, '\P{^Is_Nv=5.500}', "");
Expect(0, 3886, '\p{Is_Nv=5.500}', "");
Expect(1, 3886, '\p{^Is_Nv=5.500}', "");
Expect(1, 3886, '\P{Is_Nv=5.500}', "");
Expect(0, 3886, '\P{^Is_Nv=5.500}', "");
Error('\p{Numeric_Value= /a/0070}');
Error('\P{Numeric_Value= /a/0070}');
Expect(1, 4984, '\p{Numeric_Value=0070}', "");
Expect(0, 4984, '\p{^Numeric_Value=0070}', "");
Expect(0, 4984, '\P{Numeric_Value=0070}', "");
Expect(1, 4984, '\P{^Numeric_Value=0070}', "");
Expect(0, 4983, '\p{Numeric_Value=0070}', "");
Expect(1, 4983, '\p{^Numeric_Value=0070}', "");
Expect(1, 4983, '\P{Numeric_Value=0070}', "");
Expect(0, 4983, '\P{^Numeric_Value=0070}', "");
Error('\p{Nv= :=00070}');
Error('\P{Nv= :=00070}');
Expect(1, 4984, '\p{Nv=+007_0}', "");
Expect(0, 4984, '\p{^Nv=+007_0}', "");
Expect(0, 4984, '\P{Nv=+007_0}', "");
Expect(1, 4984, '\P{^Nv=+007_0}', "");
Expect(0, 4983, '\p{Nv=+007_0}', "");
Expect(1, 4983, '\p{^Nv=+007_0}', "");
Expect(1, 4983, '\P{Nv=+007_0}', "");
Expect(0, 4983, '\P{^Nv=+007_0}', "");
Error('\p{Is_Numeric_Value=-_+7:=0}');
Error('\P{Is_Numeric_Value=-_+7:=0}');
Expect(1, 4984, '\p{Is_Numeric_Value=0070}', "");
Expect(0, 4984, '\p{^Is_Numeric_Value=0070}', "");
Expect(0, 4984, '\P{Is_Numeric_Value=0070}', "");
Expect(1, 4984, '\P{^Is_Numeric_Value=0070}', "");
Expect(0, 4983, '\p{Is_Numeric_Value=0070}', "");
Expect(1, 4983, '\p{^Is_Numeric_Value=0070}', "");
Expect(1, 4983, '\P{Is_Numeric_Value=0070}', "");
Expect(0, 4983, '\P{^Is_Numeric_Value=0070}', "");
Error('\p{Is_Nv=	-07 0:=}');
Error('\P{Is_Nv=	-07 0:=}');
Expect(1, 4984, '\p{Is_Nv=+00_00_00_70}', "");
Expect(0, 4984, '\p{^Is_Nv=+00_00_00_70}', "");
Expect(0, 4984, '\P{Is_Nv=+00_00_00_70}', "");
Expect(1, 4984, '\P{^Is_Nv=+00_00_00_70}', "");
Expect(0, 4983, '\p{Is_Nv=+00_00_00_70}', "");
Expect(1, 4983, '\p{^Is_Nv=+00_00_00_70}', "");
Expect(1, 4983, '\P{Is_Nv=+00_00_00_70}', "");
Expect(0, 4983, '\P{^Is_Nv=+00_00_00_70}', "");
Error('\p{Numeric_Value=-:=0	0	0	0 0	00002}');
Error('\P{Numeric_Value=-:=0	0	0	0 0	00002}');
Expect(1, 50, '\p{Numeric_Value=0000002}', "");
Expect(0, 50, '\p{^Numeric_Value=0000002}', "");
Expect(0, 50, '\P{Numeric_Value=0000002}', "");
Expect(1, 50, '\P{^Numeric_Value=0000002}', "");
Expect(0, 49, '\p{Numeric_Value=0000002}', "");
Expect(1, 49, '\p{^Numeric_Value=0000002}', "");
Expect(1, 49, '\P{Numeric_Value=0000002}', "");
Expect(0, 49, '\P{^Numeric_Value=0000002}', "");
Error('\p{Nv=	0000000002:=}');
Error('\P{Nv=	0000000002:=}');
Expect(1, 50, '\p{Nv=+00000_2}', "");
Expect(0, 50, '\p{^Nv=+00000_2}', "");
Expect(0, 50, '\P{Nv=+00000_2}', "");
Expect(1, 50, '\P{^Nv=+00000_2}', "");
Expect(0, 49, '\p{Nv=+00000_2}', "");
Expect(1, 49, '\p{^Nv=+00000_2}', "");
Expect(1, 49, '\P{Nv=+00000_2}', "");
Expect(0, 49, '\P{^Nv=+00000_2}', "");
Error('\p{Is_Numeric_Value=_/a/0-0 0_002}');
Error('\P{Is_Numeric_Value=_/a/0-0 0_002}');
Expect(1, 50, '\p{Is_Numeric_Value=+0_0_0_0_0_0_002}', "");
Expect(0, 50, '\p{^Is_Numeric_Value=+0_0_0_0_0_0_002}', "");
Expect(0, 50, '\P{Is_Numeric_Value=+0_0_0_0_0_0_002}', "");
Expect(1, 50, '\P{^Is_Numeric_Value=+0_0_0_0_0_0_002}', "");
Expect(0, 49, '\p{Is_Numeric_Value=+0_0_0_0_0_0_002}', "");
Expect(1, 49, '\p{^Is_Numeric_Value=+0_0_0_0_0_0_002}', "");
Expect(1, 49, '\P{Is_Numeric_Value=+0_0_0_0_0_0_002}', "");
Expect(0, 49, '\P{^Is_Numeric_Value=+0_0_0_0_0_0_002}', "");
Error('\p{Is_Nv=-_0000002:=}');
Error('\P{Is_Nv=-_0000002:=}');
Expect(1, 50, '\p{Is_Nv=+0000002}', "");
Expect(0, 50, '\p{^Is_Nv=+0000002}', "");
Expect(0, 50, '\P{Is_Nv=+0000002}', "");
Expect(1, 50, '\P{^Is_Nv=+0000002}', "");
Expect(0, 49, '\p{Is_Nv=+0000002}', "");
Expect(1, 49, '\p{^Is_Nv=+0000002}', "");
Expect(1, 49, '\P{Is_Nv=+0000002}', "");
Expect(0, 49, '\P{^Is_Nv=+0000002}', "");
Error('\p{Numeric_Value=_-00:=01-7}');
Error('\P{Numeric_Value=_-00:=01-7}');
Expect(1, 5870, '\p{Numeric_Value=+1_7}', "");
Expect(0, 5870, '\p{^Numeric_Value=+1_7}', "");
Expect(0, 5870, '\P{Numeric_Value=+1_7}', "");
Expect(1, 5870, '\P{^Numeric_Value=+1_7}', "");
Expect(0, 5869, '\p{Numeric_Value=+1_7}', "");
Expect(1, 5869, '\p{^Numeric_Value=+1_7}', "");
Expect(1, 5869, '\P{Numeric_Value=+1_7}', "");
Expect(0, 5869, '\P{^Numeric_Value=+1_7}', "");
Error('\p{Nv=_/a/017}');
Error('\P{Nv=_/a/017}');
Expect(1, 5870, '\p{Nv=00000017}', "");
Expect(0, 5870, '\p{^Nv=00000017}', "");
Expect(0, 5870, '\P{Nv=00000017}', "");
Expect(1, 5870, '\P{^Nv=00000017}', "");
Expect(0, 5869, '\p{Nv=00000017}', "");
Expect(1, 5869, '\p{^Nv=00000017}', "");
Expect(1, 5869, '\P{Nv=00000017}', "");
Expect(0, 5869, '\P{^Nv=00000017}', "");
Error('\p{Is_Numeric_Value=	-017:=}');
Error('\P{Is_Numeric_Value=	-017:=}');
Expect(1, 5870, '\p{Is_Numeric_Value=00017}', "");
Expect(0, 5870, '\p{^Is_Numeric_Value=00017}', "");
Expect(0, 5870, '\P{Is_Numeric_Value=00017}', "");
Expect(1, 5870, '\P{^Is_Numeric_Value=00017}', "");
Expect(0, 5869, '\p{Is_Numeric_Value=00017}', "");
Expect(1, 5869, '\p{^Is_Numeric_Value=00017}', "");
Expect(1, 5869, '\P{Is_Numeric_Value=00017}', "");
Expect(0, 5869, '\P{^Is_Numeric_Value=00017}', "");
Error('\p{Is_Nv=:=- 000000017}');
Error('\P{Is_Nv=:=- 000000017}');
Expect(1, 5870, '\p{Is_Nv=00017}', "");
Expect(0, 5870, '\p{^Is_Nv=00017}', "");
Expect(0, 5870, '\P{Is_Nv=00017}', "");
Expect(1, 5870, '\P{^Is_Nv=00017}', "");
Expect(0, 5869, '\p{Is_Nv=00017}', "");
Expect(1, 5869, '\p{^Is_Nv=00017}', "");
Expect(1, 5869, '\P{Is_Nv=00017}', "");
Expect(0, 5869, '\P{^Is_Nv=00017}', "");
Error('\p{Numeric_Value=:=_ +020000}');
Error('\P{Numeric_Value=:=_ +020000}');
Expect(1, 65836, '\p{Numeric_Value=0020000}', "");
Expect(0, 65836, '\p{^Numeric_Value=0020000}', "");
Expect(0, 65836, '\P{Numeric_Value=0020000}', "");
Expect(1, 65836, '\P{^Numeric_Value=0020000}', "");
Expect(0, 65835, '\p{Numeric_Value=0020000}', "");
Expect(1, 65835, '\p{^Numeric_Value=0020000}', "");
Expect(1, 65835, '\P{Numeric_Value=0020000}', "");
Expect(0, 65835, '\P{^Numeric_Value=0020000}', "");
Error('\p{Nv=-/a/02000-0}');
Error('\P{Nv=-/a/02000-0}');
Expect(1, 65836, '\p{Nv=+0000000020000}', "");
Expect(0, 65836, '\p{^Nv=+0000000020000}', "");
Expect(0, 65836, '\P{Nv=+0000000020000}', "");
Expect(1, 65836, '\P{^Nv=+0000000020000}', "");
Expect(0, 65835, '\p{Nv=+0000000020000}', "");
Expect(1, 65835, '\p{^Nv=+0000000020000}', "");
Expect(1, 65835, '\P{Nv=+0000000020000}', "");
Expect(0, 65835, '\P{^Nv=+0000000020000}', "");
Error('\p{Is_Numeric_Value=--20000/a/}');
Error('\P{Is_Numeric_Value=--20000/a/}');
Expect(1, 65836, '\p{Is_Numeric_Value=00000000020000}', "");
Expect(0, 65836, '\p{^Is_Numeric_Value=00000000020000}', "");
Expect(0, 65836, '\P{Is_Numeric_Value=00000000020000}', "");
Expect(1, 65836, '\P{^Is_Numeric_Value=00000000020000}', "");
Expect(0, 65835, '\p{Is_Numeric_Value=00000000020000}', "");
Expect(1, 65835, '\p{^Is_Numeric_Value=00000000020000}', "");
Expect(1, 65835, '\P{Is_Numeric_Value=00000000020000}', "");
Expect(0, 65835, '\P{^Is_Numeric_Value=00000000020000}', "");
Error('\p{Is_Nv: 		0 0 00-2 0:=0-00}');
Error('\P{Is_Nv: 		0 0 00-2 0:=0-00}');
Expect(1, 65836, '\p{Is_Nv:	+000000020000}', "");
Expect(0, 65836, '\p{^Is_Nv:	+000000020000}', "");
Expect(0, 65836, '\P{Is_Nv:	+000000020000}', "");
Expect(1, 65836, '\P{^Is_Nv:	+000000020000}', "");
Expect(0, 65835, '\p{Is_Nv:	+000000020000}', "");
Expect(1, 65835, '\p{^Is_Nv:	+000000020000}', "");
Expect(1, 65835, '\P{Is_Nv:	+000000020000}', "");
Expect(0, 65835, '\P{^Is_Nv:	+000000020000}', "");
Error('\p{Numeric_Value=:=_-000-1}');
Error('\P{Numeric_Value=:=_-000-1}');
Expect(1, 49, '\p{Numeric_Value=0_0_0_0_0_0_01}', "");
Expect(0, 49, '\p{^Numeric_Value=0_0_0_0_0_0_01}', "");
Expect(0, 49, '\P{Numeric_Value=0_0_0_0_0_0_01}', "");
Expect(1, 49, '\P{^Numeric_Value=0_0_0_0_0_0_01}', "");
Expect(0, 48, '\p{Numeric_Value=0_0_0_0_0_0_01}', "");
Expect(1, 48, '\p{^Numeric_Value=0_0_0_0_0_0_01}', "");
Expect(1, 48, '\P{Numeric_Value=0_0_0_0_0_0_01}', "");
Expect(0, 48, '\P{^Numeric_Value=0_0_0_0_0_0_01}', "");
Error('\p{Nv=	/a/+0-0 00_0	0_01}');
Error('\P{Nv=	/a/+0-0 00_0	0_01}');
Expect(1, 49, '\p{Nv=0_1}', "");
Expect(0, 49, '\p{^Nv=0_1}', "");
Expect(0, 49, '\P{Nv=0_1}', "");
Expect(1, 49, '\P{^Nv=0_1}', "");
Expect(0, 48, '\p{Nv=0_1}', "");
Expect(1, 48, '\p{^Nv=0_1}', "");
Expect(1, 48, '\P{Nv=0_1}', "");
Expect(0, 48, '\P{^Nv=0_1}', "");
Error('\p{Is_Numeric_Value=:=_ 00000001}');
Error('\P{Is_Numeric_Value=:=_ 00000001}');
Expect(1, 49, '\p{Is_Numeric_Value=+00000001}', "");
Expect(0, 49, '\p{^Is_Numeric_Value=+00000001}', "");
Expect(0, 49, '\P{Is_Numeric_Value=+00000001}', "");
Expect(1, 49, '\P{^Is_Numeric_Value=+00000001}', "");
Expect(0, 48, '\p{Is_Numeric_Value=+00000001}', "");
Expect(1, 48, '\p{^Is_Numeric_Value=+00000001}', "");
Expect(1, 48, '\P{Is_Numeric_Value=+00000001}', "");
Expect(0, 48, '\P{^Is_Numeric_Value=+00000001}', "");
Error('\p{Is_Nv=:=		0001}');
Error('\P{Is_Nv=:=		0001}');
Expect(1, 49, '\p{Is_Nv=+00001}', "");
Expect(0, 49, '\p{^Is_Nv=+00001}', "");
Expect(0, 49, '\P{Is_Nv=+00001}', "");
Expect(1, 49, '\P{^Is_Nv=+00001}', "");
Expect(0, 48, '\p{Is_Nv=+00001}', "");
Expect(1, 48, '\p{^Is_Nv=+00001}', "");
Expect(1, 48, '\P{Is_Nv=+00001}', "");
Expect(0, 48, '\P{^Is_Nv=+00001}', "");
Error('\p{Numeric_Value=/a/00000006000}');
Error('\P{Numeric_Value=/a/00000006000}');
Expect(1, 65831, '\p{Numeric_Value=0_0_0_6_000}', "");
Expect(0, 65831, '\p{^Numeric_Value=0_0_0_6_000}', "");
Expect(0, 65831, '\P{Numeric_Value=0_0_0_6_000}', "");
Expect(1, 65831, '\P{^Numeric_Value=0_0_0_6_000}', "");
Expect(0, 65830, '\p{Numeric_Value=0_0_0_6_000}', "");
Expect(1, 65830, '\p{^Numeric_Value=0_0_0_6_000}', "");
Expect(1, 65830, '\P{Numeric_Value=0_0_0_6_000}', "");
Expect(0, 65830, '\P{^Numeric_Value=0_0_0_6_000}', "");
Error('\p{Nv=	:=+000000600-0}');
Error('\P{Nv=	:=+000000600-0}');
Expect(1, 65831, '\p{Nv=+0000000006000}', "");
Expect(0, 65831, '\p{^Nv=+0000000006000}', "");
Expect(0, 65831, '\P{Nv=+0000000006000}', "");
Expect(1, 65831, '\P{^Nv=+0000000006000}', "");
Expect(0, 65830, '\p{Nv=+0000000006000}', "");
Expect(1, 65830, '\p{^Nv=+0000000006000}', "");
Expect(1, 65830, '\P{Nv=+0000000006000}', "");
Expect(0, 65830, '\P{^Nv=+0000000006000}', "");
Error('\p{Is_Numeric_Value:  :=00 06_000}');
Error('\P{Is_Numeric_Value:  :=00 06_000}');
Expect(1, 65831, '\p{Is_Numeric_Value:06000}', "");
Expect(0, 65831, '\p{^Is_Numeric_Value:06000}', "");
Expect(0, 65831, '\P{Is_Numeric_Value:06000}', "");
Expect(1, 65831, '\P{^Is_Numeric_Value:06000}', "");
Expect(0, 65830, '\p{Is_Numeric_Value:06000}', "");
Expect(1, 65830, '\p{^Is_Numeric_Value:06000}', "");
Expect(1, 65830, '\P{Is_Numeric_Value:06000}', "");
Expect(0, 65830, '\P{^Is_Numeric_Value:06000}', "");
Error('\p{Is_Nv=+6000/a/}');
Error('\P{Is_Nv=+6000/a/}');
Expect(1, 65831, '\p{Is_Nv:   +000000006000}', "");
Expect(0, 65831, '\p{^Is_Nv:   +000000006000}', "");
Expect(0, 65831, '\P{Is_Nv:   +000000006000}', "");
Expect(1, 65831, '\P{^Is_Nv:   +000000006000}', "");
Expect(0, 65830, '\p{Is_Nv:   +000000006000}', "");
Expect(1, 65830, '\p{^Is_Nv:   +000000006000}', "");
Expect(1, 65830, '\P{Is_Nv:   +000000006000}', "");
Expect(0, 65830, '\P{^Is_Nv:   +000000006000}', "");
Error('\p{Numeric_Value=/a/--0000030}');
Error('\P{Numeric_Value=/a/--0000030}');
Expect(1, 4980, '\p{Numeric_Value:	0_0_0_0_0_30}', "");
Expect(0, 4980, '\p{^Numeric_Value:	0_0_0_0_0_30}', "");
Expect(0, 4980, '\P{Numeric_Value:	0_0_0_0_0_30}', "");
Expect(1, 4980, '\P{^Numeric_Value:	0_0_0_0_0_30}', "");
Expect(0, 4979, '\p{Numeric_Value:	0_0_0_0_0_30}', "");
Expect(1, 4979, '\p{^Numeric_Value:	0_0_0_0_0_30}', "");
Expect(1, 4979, '\P{Numeric_Value:	0_0_0_0_0_30}', "");
Expect(0, 4979, '\P{^Numeric_Value:	0_0_0_0_0_30}', "");
Error('\p{Nv=- 30:=}');
Error('\P{Nv=- 30:=}');
Expect(1, 4980, '\p{Nv=0000003_0}', "");
Expect(0, 4980, '\p{^Nv=0000003_0}', "");
Expect(0, 4980, '\P{Nv=0000003_0}', "");
Expect(1, 4980, '\P{^Nv=0000003_0}', "");
Expect(0, 4979, '\p{Nv=0000003_0}', "");
Expect(1, 4979, '\p{^Nv=0000003_0}', "");
Expect(1, 4979, '\P{Nv=0000003_0}', "");
Expect(0, 4979, '\P{^Nv=0000003_0}', "");
Error('\p{Is_Numeric_Value=:=- 00003	0}');
Error('\P{Is_Numeric_Value=:=- 00003	0}');
Expect(1, 4980, '\p{Is_Numeric_Value=0000030}', "");
Expect(0, 4980, '\p{^Is_Numeric_Value=0000030}', "");
Expect(0, 4980, '\P{Is_Numeric_Value=0000030}', "");
Expect(1, 4980, '\P{^Is_Numeric_Value=0000030}', "");
Expect(0, 4979, '\p{Is_Numeric_Value=0000030}', "");
Expect(1, 4979, '\p{^Is_Numeric_Value=0000030}', "");
Expect(1, 4979, '\P{Is_Numeric_Value=0000030}', "");
Expect(0, 4979, '\P{^Is_Numeric_Value=0000030}', "");
Error('\p{Is_Nv= :=+00000030}');
Error('\P{Is_Nv= :=+00000030}');
Expect(1, 4980, '\p{Is_Nv=+0_0_30}', "");
Expect(0, 4980, '\p{^Is_Nv=+0_0_30}', "");
Expect(0, 4980, '\P{Is_Nv=+0_0_30}', "");
Expect(1, 4980, '\P{^Is_Nv=+0_0_30}', "");
Expect(0, 4979, '\p{Is_Nv=+0_0_30}', "");
Expect(1, 4979, '\p{^Is_Nv=+0_0_30}', "");
Expect(1, 4979, '\P{Is_Nv=+0_0_30}', "");
Expect(0, 4979, '\P{^Is_Nv=+0_0_30}', "");
Error('\p{Numeric_Value=-:=02/0000003}');
Error('\P{Numeric_Value=-:=02/0000003}');
Expect(1, 8532, '\p{Numeric_Value=+000000002/003}', "");
Expect(0, 8532, '\p{^Numeric_Value=+000000002/003}', "");
Expect(0, 8532, '\P{Numeric_Value=+000000002/003}', "");
Expect(1, 8532, '\P{^Numeric_Value=+000000002/003}', "");
Expect(0, 8531, '\p{Numeric_Value=+000000002/003}', "");
Expect(1, 8531, '\p{^Numeric_Value=+000000002/003}', "");
Expect(1, 8531, '\P{Numeric_Value=+000000002/003}', "");
Expect(0, 8531, '\P{^Numeric_Value=+000000002/003}', "");
Error('\p{Numeric_Value=0.7}');
Error('\P{Numeric_Value=0.7}');
Error('\p{Numeric_Value=0.67}');
Error('\P{Numeric_Value=0.67}');
Expect(1, 8532, '\p{Numeric_Value=0.667}', "");
Expect(0, 8532, '\p{^Numeric_Value=0.667}', "");
Expect(0, 8532, '\P{Numeric_Value=0.667}', "");
Expect(1, 8532, '\P{^Numeric_Value=0.667}', "");
Expect(0, 8531, '\p{Numeric_Value=0.667}', "");
Expect(1, 8531, '\p{^Numeric_Value=0.667}', "");
Expect(1, 8531, '\P{Numeric_Value=0.667}', "");
Expect(0, 8531, '\P{^Numeric_Value=0.667}', "");
Error('\p{Nv=/a/	_+0000000002/003}');
Error('\P{Nv=/a/	_+0000000002/003}');
Expect(1, 8532, '\p{Nv=+000000002/003}', "");
Expect(0, 8532, '\p{^Nv=+000000002/003}', "");
Expect(0, 8532, '\P{Nv=+000000002/003}', "");
Expect(1, 8532, '\P{^Nv=+000000002/003}', "");
Expect(0, 8531, '\p{Nv=+000000002/003}', "");
Expect(1, 8531, '\p{^Nv=+000000002/003}', "");
Expect(1, 8531, '\P{Nv=+000000002/003}', "");
Expect(0, 8531, '\P{^Nv=+000000002/003}', "");
Error('\p{Nv: 0.7}');
Error('\P{Nv: 0.7}');
Error('\p{Nv=0.67}');
Error('\P{Nv=0.67}');
Expect(1, 8532, '\p{Nv=0.667}', "");
Expect(0, 8532, '\p{^Nv=0.667}', "");
Expect(0, 8532, '\P{Nv=0.667}', "");
Expect(1, 8532, '\P{^Nv=0.667}', "");
Expect(0, 8531, '\p{Nv=0.667}', "");
Expect(1, 8531, '\p{^Nv=0.667}', "");
Expect(1, 8531, '\P{Nv=0.667}', "");
Expect(0, 8531, '\P{^Nv=0.667}', "");
Error('\p{Is_Numeric_Value=:=_002/0000000003}');
Error('\P{Is_Numeric_Value=:=_002/0000000003}');
Expect(1, 8532, '\p{Is_Numeric_Value=0002/00000003}', "");
Expect(0, 8532, '\p{^Is_Numeric_Value=0002/00000003}', "");
Expect(0, 8532, '\P{Is_Numeric_Value=0002/00000003}', "");
Expect(1, 8532, '\P{^Is_Numeric_Value=0002/00000003}', "");
Expect(0, 8531, '\p{Is_Numeric_Value=0002/00000003}', "");
Expect(1, 8531, '\p{^Is_Numeric_Value=0002/00000003}', "");
Expect(1, 8531, '\P{Is_Numeric_Value=0002/00000003}', "");
Expect(0, 8531, '\P{^Is_Numeric_Value=0002/00000003}', "");
Error('\p{Is_Numeric_Value=0.7}');
Error('\P{Is_Numeric_Value=0.7}');
Error('\p{Is_Numeric_Value=0.67}');
Error('\P{Is_Numeric_Value=0.67}');
Expect(1, 8532, '\p{Is_Numeric_Value=0.667}', "");
Expect(0, 8532, '\p{^Is_Numeric_Value=0.667}', "");
Expect(0, 8532, '\P{Is_Numeric_Value=0.667}', "");
Expect(1, 8532, '\P{^Is_Numeric_Value=0.667}', "");
Expect(0, 8531, '\p{Is_Numeric_Value=0.667}', "");
Expect(1, 8531, '\p{^Is_Numeric_Value=0.667}', "");
Expect(1, 8531, '\P{Is_Numeric_Value=0.667}', "");
Expect(0, 8531, '\P{^Is_Numeric_Value=0.667}', "");
Error('\p{Is_Nv=-+00000002/0000000003:=}');
Error('\P{Is_Nv=-+00000002/0000000003:=}');
Expect(1, 8532, '\p{Is_Nv=00000002/03}', "");
Expect(0, 8532, '\p{^Is_Nv=00000002/03}', "");
Expect(0, 8532, '\P{Is_Nv=00000002/03}', "");
Expect(1, 8532, '\P{^Is_Nv=00000002/03}', "");
Expect(0, 8531, '\p{Is_Nv=00000002/03}', "");
Expect(1, 8531, '\p{^Is_Nv=00000002/03}', "");
Expect(1, 8531, '\P{Is_Nv=00000002/03}', "");
Expect(0, 8531, '\P{^Is_Nv=00000002/03}', "");
Error('\p{Is_Nv=0.7}');
Error('\P{Is_Nv=0.7}');
Error('\p{Is_Nv=0.67}');
Error('\P{Is_Nv=0.67}');
Expect(1, 8532, '\p{Is_Nv=0.667}', "");
Expect(0, 8532, '\p{^Is_Nv=0.667}', "");
Expect(0, 8532, '\P{Is_Nv=0.667}', "");
Expect(1, 8532, '\P{^Is_Nv=0.667}', "");
Expect(0, 8531, '\p{Is_Nv=0.667}', "");
Expect(1, 8531, '\p{^Is_Nv=0.667}', "");
Expect(1, 8531, '\P{Is_Nv=0.667}', "");
Expect(0, 8531, '\P{^Is_Nv=0.667}', "");
Error('\p{Numeric_Value: /a/-+000004000}');
Error('\P{Numeric_Value: /a/-+000004000}');
Expect(1, 65829, '\p{Numeric_Value=+0_0_0_0_0_0_0_0_04000}', "");
Expect(0, 65829, '\p{^Numeric_Value=+0_0_0_0_0_0_0_0_04000}', "");
Expect(0, 65829, '\P{Numeric_Value=+0_0_0_0_0_0_0_0_04000}', "");
Expect(1, 65829, '\P{^Numeric_Value=+0_0_0_0_0_0_0_0_04000}', "");
Expect(0, 65828, '\p{Numeric_Value=+0_0_0_0_0_0_0_0_04000}', "");
Expect(1, 65828, '\p{^Numeric_Value=+0_0_0_0_0_0_0_0_04000}', "");
Expect(1, 65828, '\P{Numeric_Value=+0_0_0_0_0_0_0_0_04000}', "");
Expect(0, 65828, '\P{^Numeric_Value=+0_0_0_0_0_0_0_0_04000}', "");
Error('\p{Nv=	0_0-0/a/00-0-0_0	0	4-000}');
Error('\P{Nv=	0_0-0/a/00-0-0_0	0	4-000}');
Expect(1, 65829, '\p{Nv=+000000004000}', "");
Expect(0, 65829, '\p{^Nv=+000000004000}', "");
Expect(0, 65829, '\P{Nv=+000000004000}', "");
Expect(1, 65829, '\P{^Nv=+000000004000}', "");
Expect(0, 65828, '\p{Nv=+000000004000}', "");
Expect(1, 65828, '\p{^Nv=+000000004000}', "");
Expect(1, 65828, '\P{Nv=+000000004000}', "");
Expect(0, 65828, '\P{^Nv=+000000004000}', "");
Error('\p{Is_Numeric_Value=-:=0	4_0-00}');
Error('\P{Is_Numeric_Value=-:=0	4_0-00}');
Expect(1, 65829, '\p{Is_Numeric_Value=+0_0_0_0_0_0_0_04000}', "");
Expect(0, 65829, '\p{^Is_Numeric_Value=+0_0_0_0_0_0_0_04000}', "");
Expect(0, 65829, '\P{Is_Numeric_Value=+0_0_0_0_0_0_0_04000}', "");
Expect(1, 65829, '\P{^Is_Numeric_Value=+0_0_0_0_0_0_0_04000}', "");
Expect(0, 65828, '\p{Is_Numeric_Value=+0_0_0_0_0_0_0_04000}', "");
Expect(1, 65828, '\p{^Is_Numeric_Value=+0_0_0_0_0_0_0_04000}', "");
Expect(1, 65828, '\P{Is_Numeric_Value=+0_0_0_0_0_0_0_04000}', "");
Expect(0, 65828, '\P{^Is_Numeric_Value=+0_0_0_0_0_0_0_04000}', "");
Error('\p{Is_Nv=:=_00004000}');
Error('\P{Is_Nv=:=_00004000}');
Expect(1, 65829, '\p{Is_Nv=400_0}', "");
Expect(0, 65829, '\p{^Is_Nv=400_0}', "");
Expect(0, 65829, '\P{Is_Nv=400_0}', "");
Expect(1, 65829, '\P{^Is_Nv=400_0}', "");
Expect(0, 65828, '\p{Is_Nv=400_0}', "");
Expect(1, 65828, '\p{^Is_Nv=400_0}', "");
Expect(1, 65828, '\P{Is_Nv=400_0}', "");
Expect(0, 65828, '\P{^Is_Nv=400_0}', "");
Error('\p{Numeric_Value=	/a/00100}');
Error('\P{Numeric_Value=	/a/00100}');
Expect(1, 3057, '\p{Numeric_Value=+0_0_0_100}', "");
Expect(0, 3057, '\p{^Numeric_Value=+0_0_0_100}', "");
Expect(0, 3057, '\P{Numeric_Value=+0_0_0_100}', "");
Expect(1, 3057, '\P{^Numeric_Value=+0_0_0_100}', "");
Expect(0, 3056, '\p{Numeric_Value=+0_0_0_100}', "");
Expect(1, 3056, '\p{^Numeric_Value=+0_0_0_100}', "");
Expect(1, 3056, '\P{Numeric_Value=+0_0_0_100}', "");
Expect(0, 3056, '\P{^Numeric_Value=+0_0_0_100}', "");
Error('\p{Nv:   	/a/+0010 0}');
Error('\P{Nv:   	/a/+0010 0}');
Expect(1, 3057, '\p{Nv=0_0_0_0_0_0_0_0_1_00}', "");
Expect(0, 3057, '\p{^Nv=0_0_0_0_0_0_0_0_1_00}', "");
Expect(0, 3057, '\P{Nv=0_0_0_0_0_0_0_0_1_00}', "");
Expect(1, 3057, '\P{^Nv=0_0_0_0_0_0_0_0_1_00}', "");
Expect(0, 3056, '\p{Nv=0_0_0_0_0_0_0_0_1_00}', "");
Expect(1, 3056, '\p{^Nv=0_0_0_0_0_0_0_0_1_00}', "");
Expect(1, 3056, '\P{Nv=0_0_0_0_0_0_0_0_1_00}', "");
Expect(0, 3056, '\P{^Nv=0_0_0_0_0_0_0_0_1_00}', "");
Error('\p{Is_Numeric_Value=	/a/0_0_0	0-0 0-0_00100}');
Error('\P{Is_Numeric_Value=	/a/0_0_0	0-0 0-0_00100}');
Expect(1, 3057, '\p{Is_Numeric_Value=0_0_0_1_00}', "");
Expect(0, 3057, '\p{^Is_Numeric_Value=0_0_0_1_00}', "");
Expect(0, 3057, '\P{Is_Numeric_Value=0_0_0_1_00}', "");
Expect(1, 3057, '\P{^Is_Numeric_Value=0_0_0_1_00}', "");
Expect(0, 3056, '\p{Is_Numeric_Value=0_0_0_1_00}', "");
Expect(1, 3056, '\p{^Is_Numeric_Value=0_0_0_1_00}', "");
Expect(1, 3056, '\P{Is_Numeric_Value=0_0_0_1_00}', "");
Expect(0, 3056, '\P{^Is_Numeric_Value=0_0_0_1_00}', "");
Error('\p{Is_Nv= -00000100/a/}');
Error('\P{Is_Nv= -00000100/a/}');
Expect(1, 3057, '\p{Is_Nv=+00_10_0}', "");
Expect(0, 3057, '\p{^Is_Nv=+00_10_0}', "");
Expect(0, 3057, '\P{Is_Nv=+00_10_0}', "");
Expect(1, 3057, '\P{^Is_Nv=+00_10_0}', "");
Expect(0, 3056, '\p{Is_Nv=+00_10_0}', "");
Expect(1, 3056, '\p{^Is_Nv=+00_10_0}', "");
Expect(1, 3056, '\P{Is_Nv=+00_10_0}', "");
Expect(0, 3056, '\P{^Is_Nv=+00_10_0}', "");
Error('\p{Numeric_Value=-	+00:=0000_00 0300}');
Error('\P{Numeric_Value=-	+00:=0000_00 0300}');
Expect(1, 65819, '\p{Numeric_Value=+00300}', "");
Expect(0, 65819, '\p{^Numeric_Value=+00300}', "");
Expect(0, 65819, '\P{Numeric_Value=+00300}', "");
Expect(1, 65819, '\P{^Numeric_Value=+00300}', "");
Expect(0, 65818, '\p{Numeric_Value=+00300}', "");
Expect(1, 65818, '\p{^Numeric_Value=+00300}', "");
Expect(1, 65818, '\P{Numeric_Value=+00300}', "");
Expect(0, 65818, '\P{^Numeric_Value=+00300}', "");
Error('\p{Nv:/a/ +0_3_00}');
Error('\P{Nv:/a/ +0_3_00}');
Expect(1, 65819, '\p{Nv=0_0_0_3_00}', "");
Expect(0, 65819, '\p{^Nv=0_0_0_3_00}', "");
Expect(0, 65819, '\P{Nv=0_0_0_3_00}', "");
Expect(1, 65819, '\P{^Nv=0_0_0_3_00}', "");
Expect(0, 65818, '\p{Nv=0_0_0_3_00}', "");
Expect(1, 65818, '\p{^Nv=0_0_0_3_00}', "");
Expect(1, 65818, '\P{Nv=0_0_0_3_00}', "");
Expect(0, 65818, '\P{^Nv=0_0_0_3_00}', "");
Error('\p{Is_Numeric_Value=_:=+00000000300}');
Error('\P{Is_Numeric_Value=_:=+00000000300}');
Expect(1, 65819, '\p{Is_Numeric_Value=00000000300}', "");
Expect(0, 65819, '\p{^Is_Numeric_Value=00000000300}', "");
Expect(0, 65819, '\P{Is_Numeric_Value=00000000300}', "");
Expect(1, 65819, '\P{^Is_Numeric_Value=00000000300}', "");
Expect(0, 65818, '\p{Is_Numeric_Value=00000000300}', "");
Expect(1, 65818, '\p{^Is_Numeric_Value=00000000300}', "");
Expect(1, 65818, '\P{Is_Numeric_Value=00000000300}', "");
Expect(0, 65818, '\P{^Is_Numeric_Value=00000000300}', "");
Error('\p{Is_Nv=/a/ -000000 0300}');
Error('\P{Is_Nv=/a/ -000000 0300}');
Expect(1, 65819, '\p{Is_Nv=0000000300}', "");
Expect(0, 65819, '\p{^Is_Nv=0000000300}', "");
Expect(0, 65819, '\P{Is_Nv=0000000300}', "");
Expect(1, 65819, '\P{^Is_Nv=0000000300}', "");
Expect(0, 65818, '\p{Is_Nv=0000000300}', "");
Expect(1, 65818, '\p{^Is_Nv=0000000300}', "");
Expect(1, 65818, '\P{Is_Nv=0000000300}', "");
Expect(0, 65818, '\P{^Is_Nv=0000000300}', "");
Error('\p{Numeric_Value=- +1/00000008/a/}');
Error('\P{Numeric_Value=- +1/00000008/a/}');
Expect(1, 2549, '\p{Numeric_Value=+001/08}', "");
Expect(0, 2549, '\p{^Numeric_Value=+001/08}', "");
Expect(0, 2549, '\P{Numeric_Value=+001/08}', "");
Expect(1, 2549, '\P{^Numeric_Value=+001/08}', "");
Expect(0, 2548, '\p{Numeric_Value=+001/08}', "");
Expect(1, 2548, '\p{^Numeric_Value=+001/08}', "");
Expect(1, 2548, '\P{Numeric_Value=+001/08}', "");
Expect(0, 2548, '\P{^Numeric_Value=+001/08}', "");
Error('\p{Numeric_Value=0.12}');
Error('\P{Numeric_Value=0.12}');
Expect(1, 2549, '\p{Numeric_Value=0.125}', "");
Expect(0, 2549, '\p{^Numeric_Value=0.125}', "");
Expect(0, 2549, '\P{Numeric_Value=0.125}', "");
Expect(1, 2549, '\P{^Numeric_Value=0.125}', "");
Expect(0, 2548, '\p{Numeric_Value=0.125}', "");
Expect(1, 2548, '\p{^Numeric_Value=0.125}', "");
Expect(1, 2548, '\P{Numeric_Value=0.125}', "");
Expect(0, 2548, '\P{^Numeric_Value=0.125}', "");
Error('\p{Nv=/a/	 000001/000008}');
Error('\P{Nv=/a/	 000001/000008}');
Expect(1, 2549, '\p{Nv=0000000001/8}', "");
Expect(0, 2549, '\p{^Nv=0000000001/8}', "");
Expect(0, 2549, '\P{Nv=0000000001/8}', "");
Expect(1, 2549, '\P{^Nv=0000000001/8}', "");
Expect(0, 2548, '\p{Nv=0000000001/8}', "");
Expect(1, 2548, '\p{^Nv=0000000001/8}', "");
Expect(1, 2548, '\P{Nv=0000000001/8}', "");
Expect(0, 2548, '\P{^Nv=0000000001/8}', "");
Error('\p{Nv=0.12}');
Error('\P{Nv=0.12}');
Expect(1, 2549, '\p{Nv=0.125}', "");
Expect(0, 2549, '\p{^Nv=0.125}', "");
Expect(0, 2549, '\P{Nv=0.125}', "");
Expect(1, 2549, '\P{^Nv=0.125}', "");
Expect(0, 2548, '\p{Nv=0.125}', "");
Expect(1, 2548, '\p{^Nv=0.125}', "");
Expect(1, 2548, '\P{Nv=0.125}', "");
Expect(0, 2548, '\P{^Nv=0.125}', "");
Error('\p{Is_Numeric_Value=-_0001/08:=}');
Error('\P{Is_Numeric_Value=-_0001/08:=}');
Expect(1, 2549, '\p{Is_Numeric_Value: 00001/08}', "");
Expect(0, 2549, '\p{^Is_Numeric_Value: 00001/08}', "");
Expect(0, 2549, '\P{Is_Numeric_Value: 00001/08}', "");
Expect(1, 2549, '\P{^Is_Numeric_Value: 00001/08}', "");
Expect(0, 2548, '\p{Is_Numeric_Value: 00001/08}', "");
Expect(1, 2548, '\p{^Is_Numeric_Value: 00001/08}', "");
Expect(1, 2548, '\P{Is_Numeric_Value: 00001/08}', "");
Expect(0, 2548, '\P{^Is_Numeric_Value: 00001/08}', "");
Error('\p{Is_Numeric_Value=0.12}');
Error('\P{Is_Numeric_Value=0.12}');
Expect(1, 2549, '\p{Is_Numeric_Value=0.125}', "");
Expect(0, 2549, '\p{^Is_Numeric_Value=0.125}', "");
Expect(0, 2549, '\P{Is_Numeric_Value=0.125}', "");
Expect(1, 2549, '\P{^Is_Numeric_Value=0.125}', "");
Expect(0, 2548, '\p{Is_Numeric_Value=0.125}', "");
Expect(1, 2548, '\p{^Is_Numeric_Value=0.125}', "");
Expect(1, 2548, '\P{Is_Numeric_Value=0.125}', "");
Expect(0, 2548, '\P{^Is_Numeric_Value=0.125}', "");
Error('\p{Is_Nv=/a/ -00000001/0008}');
Error('\P{Is_Nv=/a/ -00000001/0008}');
Expect(1, 2549, '\p{Is_Nv:   +000001/0008}', "");
Expect(0, 2549, '\p{^Is_Nv:   +000001/0008}', "");
Expect(0, 2549, '\P{Is_Nv:   +000001/0008}', "");
Expect(1, 2549, '\P{^Is_Nv:   +000001/0008}', "");
Expect(0, 2548, '\p{Is_Nv:   +000001/0008}', "");
Expect(1, 2548, '\p{^Is_Nv:   +000001/0008}', "");
Expect(1, 2548, '\P{Is_Nv:   +000001/0008}', "");
Expect(0, 2548, '\P{^Is_Nv:   +000001/0008}', "");
Error('\p{Is_Nv: 0.12}');
Error('\P{Is_Nv: 0.12}');
Expect(1, 2549, '\p{Is_Nv=0.125}', "");
Expect(0, 2549, '\p{^Is_Nv=0.125}', "");
Expect(0, 2549, '\P{Is_Nv=0.125}', "");
Expect(1, 2549, '\P{^Is_Nv=0.125}', "");
Expect(0, 2548, '\p{Is_Nv=0.125}', "");
Expect(1, 2548, '\p{^Is_Nv=0.125}', "");
Expect(1, 2548, '\P{Is_Nv=0.125}', "");
Expect(0, 2548, '\P{^Is_Nv=0.125}', "");
Error('\p{Numeric_Value= :=005/0006}');
Error('\P{Numeric_Value= :=005/0006}');
Expect(1, 8538, '\p{Numeric_Value=5/006}', "");
Expect(0, 8538, '\p{^Numeric_Value=5/006}', "");
Expect(0, 8538, '\P{Numeric_Value=5/006}', "");
Expect(1, 8538, '\P{^Numeric_Value=5/006}', "");
Expect(0, 8537, '\p{Numeric_Value=5/006}', "");
Expect(1, 8537, '\p{^Numeric_Value=5/006}', "");
Expect(1, 8537, '\P{Numeric_Value=5/006}', "");
Expect(0, 8537, '\P{^Numeric_Value=5/006}', "");
Error('\p{Numeric_Value=0.83}');
Error('\P{Numeric_Value=0.83}');
Expect(1, 8538, '\p{Numeric_Value=0.833}', "");
Expect(0, 8538, '\p{^Numeric_Value=0.833}', "");
Expect(0, 8538, '\P{Numeric_Value=0.833}', "");
Expect(1, 8538, '\P{^Numeric_Value=0.833}', "");
Expect(0, 8537, '\p{Numeric_Value=0.833}', "");
Expect(1, 8537, '\p{^Numeric_Value=0.833}', "");
Expect(1, 8537, '\P{Numeric_Value=0.833}', "");
Expect(0, 8537, '\P{^Numeric_Value=0.833}', "");
Error('\p{Nv=_:=000005/0000000006}');
Error('\P{Nv=_:=000005/0000000006}');
Expect(1, 8538, '\p{Nv:   05/000000006}', "");
Expect(0, 8538, '\p{^Nv:   05/000000006}', "");
Expect(0, 8538, '\P{Nv:   05/000000006}', "");
Expect(1, 8538, '\P{^Nv:   05/000000006}', "");
Expect(0, 8537, '\p{Nv:   05/000000006}', "");
Expect(1, 8537, '\p{^Nv:   05/000000006}', "");
Expect(1, 8537, '\P{Nv:   05/000000006}', "");
Expect(0, 8537, '\P{^Nv:   05/000000006}', "");
Error('\p{Nv=0.83}');
Error('\P{Nv=0.83}');
Expect(1, 8538, '\p{Nv:   0.833}', "");
Expect(0, 8538, '\p{^Nv:   0.833}', "");
Expect(0, 8538, '\P{Nv:   0.833}', "");
Expect(1, 8538, '\P{^Nv:   0.833}', "");
Expect(0, 8537, '\p{Nv:   0.833}', "");
Expect(1, 8537, '\p{^Nv:   0.833}', "");
Expect(1, 8537, '\P{Nv:   0.833}', "");
Expect(0, 8537, '\P{^Nv:   0.833}', "");
Error('\p{Is_Numeric_Value=--+0005/0000000006:=}');
Error('\P{Is_Numeric_Value=--+0005/0000000006:=}');
Expect(1, 8538, '\p{Is_Numeric_Value:	0000005/06}', "");
Expect(0, 8538, '\p{^Is_Numeric_Value:	0000005/06}', "");
Expect(0, 8538, '\P{Is_Numeric_Value:	0000005/06}', "");
Expect(1, 8538, '\P{^Is_Numeric_Value:	0000005/06}', "");
Expect(0, 8537, '\p{Is_Numeric_Value:	0000005/06}', "");
Expect(1, 8537, '\p{^Is_Numeric_Value:	0000005/06}', "");
Expect(1, 8537, '\P{Is_Numeric_Value:	0000005/06}', "");
Expect(0, 8537, '\P{^Is_Numeric_Value:	0000005/06}', "");
Error('\p{Is_Numeric_Value=0.83}');
Error('\P{Is_Numeric_Value=0.83}');
Expect(1, 8538, '\p{Is_Numeric_Value=0.833}', "");
Expect(0, 8538, '\p{^Is_Numeric_Value=0.833}', "");
Expect(0, 8538, '\P{Is_Numeric_Value=0.833}', "");
Expect(1, 8538, '\P{^Is_Numeric_Value=0.833}', "");
Expect(0, 8537, '\p{Is_Numeric_Value=0.833}', "");
Expect(1, 8537, '\p{^Is_Numeric_Value=0.833}', "");
Expect(1, 8537, '\P{Is_Numeric_Value=0.833}', "");
Expect(0, 8537, '\P{^Is_Numeric_Value=0.833}', "");
Error('\p{Is_Nv=_:=0000000005/000000006}');
Error('\P{Is_Nv=_:=0000000005/000000006}');
Expect(1, 8538, '\p{Is_Nv=000005/00006}', "");
Expect(0, 8538, '\p{^Is_Nv=000005/00006}', "");
Expect(0, 8538, '\P{Is_Nv=000005/00006}', "");
Expect(1, 8538, '\P{^Is_Nv=000005/00006}', "");
Expect(0, 8537, '\p{Is_Nv=000005/00006}', "");
Expect(1, 8537, '\p{^Is_Nv=000005/00006}', "");
Expect(1, 8537, '\P{Is_Nv=000005/00006}', "");
Expect(0, 8537, '\P{^Is_Nv=000005/00006}', "");
Error('\p{Is_Nv=0.83}');
Error('\P{Is_Nv=0.83}');
Expect(1, 8538, '\p{Is_Nv=0.833}', "");
Expect(0, 8538, '\p{^Is_Nv=0.833}', "");
Expect(0, 8538, '\P{Is_Nv=0.833}', "");
Expect(1, 8538, '\P{^Is_Nv=0.833}', "");
Expect(0, 8537, '\p{Is_Nv=0.833}', "");
Expect(1, 8537, '\p{^Is_Nv=0.833}', "");
Expect(1, 8537, '\P{Is_Nv=0.833}', "");
Expect(0, 8537, '\P{^Is_Nv=0.833}', "");
Error('\p{Numeric_Value=:=0000_00_02-5}');
Error('\P{Numeric_Value=:=0000_00_02-5}');
Expect(1, 12885, '\p{Numeric_Value:   025}', "");
Expect(0, 12885, '\p{^Numeric_Value:   025}', "");
Expect(0, 12885, '\P{Numeric_Value:   025}', "");
Expect(1, 12885, '\P{^Numeric_Value:   025}', "");
Expect(0, 12884, '\p{Numeric_Value:   025}', "");
Expect(1, 12884, '\p{^Numeric_Value:   025}', "");
Expect(1, 12884, '\P{Numeric_Value:   025}', "");
Expect(0, 12884, '\P{^Numeric_Value:   025}', "");
Error('\p{Nv= :=0000025}');
Error('\P{Nv= :=0000025}');
Expect(1, 12885, '\p{Nv=2_5}', "");
Expect(0, 12885, '\p{^Nv=2_5}', "");
Expect(0, 12885, '\P{Nv=2_5}', "");
Expect(1, 12885, '\P{^Nv=2_5}', "");
Expect(0, 12884, '\p{Nv=2_5}', "");
Expect(1, 12884, '\p{^Nv=2_5}', "");
Expect(1, 12884, '\P{Nv=2_5}', "");
Expect(0, 12884, '\P{^Nv=2_5}', "");
Error('\p{Is_Numeric_Value=_/a/+0 00-00	0_0 25}');
Error('\P{Is_Numeric_Value=_/a/+0 00-00	0_0 25}');
Expect(1, 12885, '\p{Is_Numeric_Value=0000025}', "");
Expect(0, 12885, '\p{^Is_Numeric_Value=0000025}', "");
Expect(0, 12885, '\P{Is_Numeric_Value=0000025}', "");
Expect(1, 12885, '\P{^Is_Numeric_Value=0000025}', "");
Expect(0, 12884, '\p{Is_Numeric_Value=0000025}', "");
Expect(1, 12884, '\p{^Is_Numeric_Value=0000025}', "");
Expect(1, 12884, '\P{Is_Numeric_Value=0000025}', "");
Expect(0, 12884, '\P{^Is_Numeric_Value=0000025}', "");
Error('\p{Is_Nv=	/a/00025}');
Error('\P{Is_Nv=	/a/00025}');
Expect(1, 12885, '\p{Is_Nv=02_5}', "");
Expect(0, 12885, '\p{^Is_Nv=02_5}', "");
Expect(0, 12885, '\P{Is_Nv=02_5}', "");
Expect(1, 12885, '\P{^Is_Nv=02_5}', "");
Expect(0, 12884, '\p{Is_Nv=02_5}', "");
Expect(1, 12884, '\p{^Is_Nv=02_5}', "");
Expect(1, 12884, '\P{Is_Nv=02_5}', "");
Expect(0, 12884, '\P{^Is_Nv=02_5}', "");
Error('\p{Numeric_Value=  0 0:=0 28}');
Error('\P{Numeric_Value=  0 0:=0 28}');
Expect(1, 12888, '\p{Numeric_Value: 002_8}', "");
Expect(0, 12888, '\p{^Numeric_Value: 002_8}', "");
Expect(0, 12888, '\P{Numeric_Value: 002_8}', "");
Expect(1, 12888, '\P{^Numeric_Value: 002_8}', "");
Expect(0, 12887, '\p{Numeric_Value: 002_8}', "");
Expect(1, 12887, '\p{^Numeric_Value: 002_8}', "");
Expect(1, 12887, '\P{Numeric_Value: 002_8}', "");
Expect(0, 12887, '\P{^Numeric_Value: 002_8}', "");
Error('\p{Nv=-0000_0002:=8}');
Error('\P{Nv=-0000_0002:=8}');
Expect(1, 12888, '\p{Nv=+028}', "");
Expect(0, 12888, '\p{^Nv=+028}', "");
Expect(0, 12888, '\P{Nv=+028}', "");
Expect(1, 12888, '\P{^Nv=+028}', "");
Expect(0, 12887, '\p{Nv=+028}', "");
Expect(1, 12887, '\p{^Nv=+028}', "");
Expect(1, 12887, '\P{Nv=+028}', "");
Expect(0, 12887, '\P{^Nv=+028}', "");
Error('\p{Is_Numeric_Value=	_0_0-028/a/}');
Error('\P{Is_Numeric_Value=	_0_0-028/a/}');
Expect(1, 12888, '\p{Is_Numeric_Value:	0_0_0_0_028}', "");
Expect(0, 12888, '\p{^Is_Numeric_Value:	0_0_0_0_028}', "");
Expect(0, 12888, '\P{Is_Numeric_Value:	0_0_0_0_028}', "");
Expect(1, 12888, '\P{^Is_Numeric_Value:	0_0_0_0_028}', "");
Expect(0, 12887, '\p{Is_Numeric_Value:	0_0_0_0_028}', "");
Expect(1, 12887, '\p{^Is_Numeric_Value:	0_0_0_0_028}', "");
Expect(1, 12887, '\P{Is_Numeric_Value:	0_0_0_0_028}', "");
Expect(0, 12887, '\P{^Is_Numeric_Value:	0_0_0_0_028}', "");
Error('\p{Is_Nv=/a/028}');
Error('\P{Is_Nv=/a/028}');
Expect(1, 12888, '\p{Is_Nv=+000028}', "");
Expect(0, 12888, '\p{^Is_Nv=+000028}', "");
Expect(0, 12888, '\P{Is_Nv=+000028}', "");
Expect(1, 12888, '\P{^Is_Nv=+000028}', "");
Expect(0, 12887, '\p{Is_Nv=+000028}', "");
Expect(1, 12887, '\p{^Is_Nv=+000028}', "");
Expect(1, 12887, '\P{Is_Nv=+000028}', "");
Expect(0, 12887, '\P{^Is_Nv=+000028}', "");
Error('\p{Numeric_Value=	000000007/002/a/}');
Error('\P{Numeric_Value=	000000007/002/a/}');
Expect(1, 3885, '\p{Numeric_Value=+00007/000002}', "");
Expect(0, 3885, '\p{^Numeric_Value=+00007/000002}', "");
Expect(0, 3885, '\P{Numeric_Value=+00007/000002}', "");
Expect(1, 3885, '\P{^Numeric_Value=+00007/000002}', "");
Expect(0, 3884, '\p{Numeric_Value=+00007/000002}', "");
Expect(1, 3884, '\p{^Numeric_Value=+00007/000002}', "");
Expect(1, 3884, '\P{Numeric_Value=+00007/000002}', "");
Expect(0, 3884, '\P{^Numeric_Value=+00007/000002}', "");
Expect(1, 3885, '\p{Numeric_Value=3.500}', "");
Expect(0, 3885, '\p{^Numeric_Value=3.500}', "");
Expect(0, 3885, '\P{Numeric_Value=3.500}', "");
Expect(1, 3885, '\P{^Numeric_Value=3.500}', "");
Expect(0, 3884, '\p{Numeric_Value=3.500}', "");
Expect(1, 3884, '\p{^Numeric_Value=3.500}', "");
Expect(1, 3884, '\P{Numeric_Value=3.500}', "");
Expect(0, 3884, '\P{^Numeric_Value=3.500}', "");
Error('\p{Nv=0007/00000002/a/}');
Error('\P{Nv=0007/00000002/a/}');
Expect(1, 3885, '\p{Nv=0000007/0002}', "");
Expect(0, 3885, '\p{^Nv=0000007/0002}', "");
Expect(0, 3885, '\P{Nv=0000007/0002}', "");
Expect(1, 3885, '\P{^Nv=0000007/0002}', "");
Expect(0, 3884, '\p{Nv=0000007/0002}', "");
Expect(1, 3884, '\p{^Nv=0000007/0002}', "");
Expect(1, 3884, '\P{Nv=0000007/0002}', "");
Expect(0, 3884, '\P{^Nv=0000007/0002}', "");
Expect(1, 3885, '\p{Nv=3.500}', "");
Expect(0, 3885, '\p{^Nv=3.500}', "");
Expect(0, 3885, '\P{Nv=3.500}', "");
Expect(1, 3885, '\P{^Nv=3.500}', "");
Expect(0, 3884, '\p{Nv=3.500}', "");
Expect(1, 3884, '\p{^Nv=3.500}', "");
Expect(1, 3884, '\P{Nv=3.500}', "");
Expect(0, 3884, '\P{^Nv=3.500}', "");
Error('\p{Is_Numeric_Value=	007/2/a/}');
Error('\P{Is_Numeric_Value=	007/2/a/}');
Expect(1, 3885, '\p{Is_Numeric_Value=0000007/0002}', "");
Expect(0, 3885, '\p{^Is_Numeric_Value=0000007/0002}', "");
Expect(0, 3885, '\P{Is_Numeric_Value=0000007/0002}', "");
Expect(1, 3885, '\P{^Is_Numeric_Value=0000007/0002}', "");
Expect(0, 3884, '\p{Is_Numeric_Value=0000007/0002}', "");
Expect(1, 3884, '\p{^Is_Numeric_Value=0000007/0002}', "");
Expect(1, 3884, '\P{Is_Numeric_Value=0000007/0002}', "");
Expect(0, 3884, '\P{^Is_Numeric_Value=0000007/0002}', "");
Expect(1, 3885, '\p{Is_Numeric_Value=3.500}', "");
Expect(0, 3885, '\p{^Is_Numeric_Value=3.500}', "");
Expect(0, 3885, '\P{Is_Numeric_Value=3.500}', "");
Expect(1, 3885, '\P{^Is_Numeric_Value=3.500}', "");
Expect(0, 3884, '\p{Is_Numeric_Value=3.500}', "");
Expect(1, 3884, '\p{^Is_Numeric_Value=3.500}', "");
Expect(1, 3884, '\P{Is_Numeric_Value=3.500}', "");
Expect(0, 3884, '\P{^Is_Numeric_Value=3.500}', "");
Error('\p{Is_Nv=-/a/000000007/0002}');
Error('\P{Is_Nv=-/a/000000007/0002}');
Expect(1, 3885, '\p{Is_Nv=000000007/02}', "");
Expect(0, 3885, '\p{^Is_Nv=000000007/02}', "");
Expect(0, 3885, '\P{Is_Nv=000000007/02}', "");
Expect(1, 3885, '\P{^Is_Nv=000000007/02}', "");
Expect(0, 3884, '\p{Is_Nv=000000007/02}', "");
Expect(1, 3884, '\p{^Is_Nv=000000007/02}', "");
Expect(1, 3884, '\P{Is_Nv=000000007/02}', "");
Expect(0, 3884, '\P{^Is_Nv=000000007/02}', "");
Expect(1, 3885, '\p{Is_Nv:3.500}', "");
Expect(0, 3885, '\p{^Is_Nv:3.500}', "");
Expect(0, 3885, '\P{Is_Nv:3.500}', "");
Expect(1, 3885, '\P{^Is_Nv:3.500}', "");
Expect(0, 3884, '\p{Is_Nv:3.500}', "");
Expect(1, 3884, '\p{^Is_Nv:3.500}', "");
Expect(1, 3884, '\P{Is_Nv:3.500}', "");
Expect(0, 3884, '\P{^Is_Nv:3.500}', "");
Error('\p{Numeric_Value= -00009/000002/a/}');
Error('\P{Numeric_Value= -00009/000002/a/}');
Expect(1, 3886, '\p{Numeric_Value=+000009/00002}', "");
Expect(0, 3886, '\p{^Numeric_Value=+000009/00002}', "");
Expect(0, 3886, '\P{Numeric_Value=+000009/00002}', "");
Expect(1, 3886, '\P{^Numeric_Value=+000009/00002}', "");
Expect(0, 3885, '\p{Numeric_Value=+000009/00002}', "");
Expect(1, 3885, '\p{^Numeric_Value=+000009/00002}', "");
Expect(1, 3885, '\P{Numeric_Value=+000009/00002}', "");
Expect(0, 3885, '\P{^Numeric_Value=+000009/00002}', "");
Expect(1, 3886, '\p{Numeric_Value=4.500}', "");
Expect(0, 3886, '\p{^Numeric_Value=4.500}', "");
Expect(0, 3886, '\P{Numeric_Value=4.500}', "");
Expect(1, 3886, '\P{^Numeric_Value=4.500}', "");
Expect(0, 3885, '\p{Numeric_Value=4.500}', "");
Expect(1, 3885, '\p{^Numeric_Value=4.500}', "");
Expect(1, 3885, '\P{Numeric_Value=4.500}', "");
Expect(0, 3885, '\P{^Numeric_Value=4.500}', "");
Error('\p{Nv=-	+000009/2/a/}');
Error('\P{Nv=-	+000009/2/a/}');
Expect(1, 3886, '\p{Nv=00009/00002}', "");
Expect(0, 3886, '\p{^Nv=00009/00002}', "");
Expect(0, 3886, '\P{Nv=00009/00002}', "");
Expect(1, 3886, '\P{^Nv=00009/00002}', "");
Expect(0, 3885, '\p{Nv=00009/00002}', "");
Expect(1, 3885, '\p{^Nv=00009/00002}', "");
Expect(1, 3885, '\P{Nv=00009/00002}', "");
Expect(0, 3885, '\P{^Nv=00009/00002}', "");
Expect(1, 3886, '\p{Nv=4.500}', "");
Expect(0, 3886, '\p{^Nv=4.500}', "");
Expect(0, 3886, '\P{Nv=4.500}', "");
Expect(1, 3886, '\P{^Nv=4.500}', "");
Expect(0, 3885, '\p{Nv=4.500}', "");
Expect(1, 3885, '\p{^Nv=4.500}', "");
Expect(1, 3885, '\P{Nv=4.500}', "");
Expect(0, 3885, '\P{^Nv=4.500}', "");
Error('\p{Is_Numeric_Value=/a/_	09/2}');
Error('\P{Is_Numeric_Value=/a/_	09/2}');
Expect(1, 3886, '\p{Is_Numeric_Value=00000009/00000002}', "");
Expect(0, 3886, '\p{^Is_Numeric_Value=00000009/00000002}', "");
Expect(0, 3886, '\P{Is_Numeric_Value=00000009/00000002}', "");
Expect(1, 3886, '\P{^Is_Numeric_Value=00000009/00000002}', "");
Expect(0, 3885, '\p{Is_Numeric_Value=00000009/00000002}', "");
Expect(1, 3885, '\p{^Is_Numeric_Value=00000009/00000002}', "");
Expect(1, 3885, '\P{Is_Numeric_Value=00000009/00000002}', "");
Expect(0, 3885, '\P{^Is_Numeric_Value=00000009/00000002}', "");
Expect(1, 3886, '\p{Is_Numeric_Value=4.500}', "");
Expect(0, 3886, '\p{^Is_Numeric_Value=4.500}', "");
Expect(0, 3886, '\P{Is_Numeric_Value=4.500}', "");
Expect(1, 3886, '\P{^Is_Numeric_Value=4.500}', "");
Expect(0, 3885, '\p{Is_Numeric_Value=4.500}', "");
Expect(1, 3885, '\p{^Is_Numeric_Value=4.500}', "");
Expect(1, 3885, '\P{Is_Numeric_Value=4.500}', "");
Expect(0, 3885, '\P{^Is_Numeric_Value=4.500}', "");
Error('\p{Is_Nv=:= +00009/0000002}');
Error('\P{Is_Nv=:= +00009/0000002}');
Expect(1, 3886, '\p{Is_Nv=9/000002}', "");
Expect(0, 3886, '\p{^Is_Nv=9/000002}', "");
Expect(0, 3886, '\P{Is_Nv=9/000002}', "");
Expect(1, 3886, '\P{^Is_Nv=9/000002}', "");
Expect(0, 3885, '\p{Is_Nv=9/000002}', "");
Expect(1, 3885, '\p{^Is_Nv=9/000002}', "");
Expect(1, 3885, '\P{Is_Nv=9/000002}', "");
Expect(0, 3885, '\P{^Is_Nv=9/000002}', "");
Expect(1, 3886, '\p{Is_Nv=4.500}', "");
Expect(0, 3886, '\p{^Is_Nv=4.500}', "");
Expect(0, 3886, '\P{Is_Nv=4.500}', "");
Expect(1, 3886, '\P{^Is_Nv=4.500}', "");
Expect(0, 3885, '\p{Is_Nv=4.500}', "");
Expect(1, 3885, '\p{^Is_Nv=4.500}', "");
Expect(1, 3885, '\P{Is_Nv=4.500}', "");
Expect(0, 3885, '\P{^Is_Nv=4.500}', "");
Error('\p{Numeric_Value= /a/+0 00-40}');
Error('\P{Numeric_Value= /a/+0 00-40}');
Expect(1, 4981, '\p{Numeric_Value=+000004_0}', "");
Expect(0, 4981, '\p{^Numeric_Value=+000004_0}', "");
Expect(0, 4981, '\P{Numeric_Value=+000004_0}', "");
Expect(1, 4981, '\P{^Numeric_Value=+000004_0}', "");
Expect(0, 4980, '\p{Numeric_Value=+000004_0}', "");
Expect(1, 4980, '\p{^Numeric_Value=+000004_0}', "");
Expect(1, 4980, '\P{Numeric_Value=+000004_0}', "");
Expect(0, 4980, '\P{^Numeric_Value=+000004_0}', "");
Error('\p{Nv=__0000:=00	00	04	0}');
Error('\P{Nv=__0000:=00	00	04	0}');
Expect(1, 4981, '\p{Nv=0000_0004_0}', "");
Expect(0, 4981, '\p{^Nv=0000_0004_0}', "");
Expect(0, 4981, '\P{Nv=0000_0004_0}', "");
Expect(1, 4981, '\P{^Nv=0000_0004_0}', "");
Expect(0, 4980, '\p{Nv=0000_0004_0}', "");
Expect(1, 4980, '\p{^Nv=0000_0004_0}', "");
Expect(1, 4980, '\P{Nv=0000_0004_0}', "");
Expect(0, 4980, '\P{^Nv=0000_0004_0}', "");
Error('\p{Is_Numeric_Value=  +000	000_000-40/a/}');
Error('\P{Is_Numeric_Value=  +000	000_000-40/a/}');
Expect(1, 4981, '\p{Is_Numeric_Value:04_0}', "");
Expect(0, 4981, '\p{^Is_Numeric_Value:04_0}', "");
Expect(0, 4981, '\P{Is_Numeric_Value:04_0}', "");
Expect(1, 4981, '\P{^Is_Numeric_Value:04_0}', "");
Expect(0, 4980, '\p{Is_Numeric_Value:04_0}', "");
Expect(1, 4980, '\p{^Is_Numeric_Value:04_0}', "");
Expect(1, 4980, '\P{Is_Numeric_Value:04_0}', "");
Expect(0, 4980, '\P{^Is_Numeric_Value:04_0}', "");
Error('\p{Is_Nv=/a/		040}');
Error('\P{Is_Nv=/a/		040}');
Expect(1, 4981, '\p{Is_Nv:+04_0}', "");
Expect(0, 4981, '\p{^Is_Nv:+04_0}', "");
Expect(0, 4981, '\P{Is_Nv:+04_0}', "");
Expect(1, 4981, '\P{^Is_Nv:+04_0}', "");
Expect(0, 4980, '\p{Is_Nv:+04_0}', "");
Expect(1, 4980, '\p{^Is_Nv:+04_0}', "");
Expect(1, 4980, '\P{Is_Nv:+04_0}', "");
Expect(0, 4980, '\P{^Is_Nv:+04_0}', "");
Error('\p{Numeric_Value=	+000000/a/300 0}');
Error('\P{Numeric_Value=	+000000/a/300 0}');
Expect(1, 65828, '\p{Numeric_Value=0000000300_0}', "");
Expect(0, 65828, '\p{^Numeric_Value=0000000300_0}', "");
Expect(0, 65828, '\P{Numeric_Value=0000000300_0}', "");
Expect(1, 65828, '\P{^Numeric_Value=0000000300_0}', "");
Expect(0, 65827, '\p{Numeric_Value=0000000300_0}', "");
Expect(1, 65827, '\p{^Numeric_Value=0000000300_0}', "");
Expect(1, 65827, '\P{Numeric_Value=0000000300_0}', "");
Expect(0, 65827, '\P{^Numeric_Value=0000000300_0}', "");
Error('\p{Nv= 000003000:=}');
Error('\P{Nv= 000003000:=}');
Expect(1, 65828, '\p{Nv=+000_000_003_000}', "");
Expect(0, 65828, '\p{^Nv=+000_000_003_000}', "");
Expect(0, 65828, '\P{Nv=+000_000_003_000}', "");
Expect(1, 65828, '\P{^Nv=+000_000_003_000}', "");
Expect(0, 65827, '\p{Nv=+000_000_003_000}', "");
Expect(1, 65827, '\p{^Nv=+000_000_003_000}', "");
Expect(1, 65827, '\P{Nv=+000_000_003_000}', "");
Expect(0, 65827, '\P{^Nv=+000_000_003_000}', "");
Error('\p{Is_Numeric_Value=:= 	+000003000}');
Error('\P{Is_Numeric_Value=:= 	+000003000}');
Expect(1, 65828, '\p{Is_Numeric_Value=+00_00_00_03_00_0}', "");
Expect(0, 65828, '\p{^Is_Numeric_Value=+00_00_00_03_00_0}', "");
Expect(0, 65828, '\P{Is_Numeric_Value=+00_00_00_03_00_0}', "");
Expect(1, 65828, '\P{^Is_Numeric_Value=+00_00_00_03_00_0}', "");
Expect(0, 65827, '\p{Is_Numeric_Value=+00_00_00_03_00_0}', "");
Expect(1, 65827, '\p{^Is_Numeric_Value=+00_00_00_03_00_0}', "");
Expect(1, 65827, '\P{Is_Numeric_Value=+00_00_00_03_00_0}', "");
Expect(0, 65827, '\P{^Is_Numeric_Value=+00_00_00_03_00_0}', "");
Error('\p{Is_Nv:	:=	000000-300_0}');
Error('\P{Is_Nv:	:=	000000-300_0}');
Expect(1, 65828, '\p{Is_Nv=0000_0300_0}', "");
Expect(0, 65828, '\p{^Is_Nv=0000_0300_0}', "");
Expect(0, 65828, '\P{Is_Nv=0000_0300_0}', "");
Expect(1, 65828, '\P{^Is_Nv=0000_0300_0}', "");
Expect(0, 65827, '\p{Is_Nv=0000_0300_0}', "");
Expect(1, 65827, '\p{^Is_Nv=0000_0300_0}', "");
Expect(1, 65827, '\P{Is_Nv=0000_0300_0}', "");
Expect(0, 65827, '\P{^Is_Nv=0000_0300_0}', "");
Error('\p{Numeric_Value=_/a/00 0-0 0800}');
Error('\P{Numeric_Value=_/a/00 0-0 0800}');
Expect(1, 65824, '\p{Numeric_Value=000800}', "");
Expect(0, 65824, '\p{^Numeric_Value=000800}', "");
Expect(0, 65824, '\P{Numeric_Value=000800}', "");
Expect(1, 65824, '\P{^Numeric_Value=000800}', "");
Expect(0, 65823, '\p{Numeric_Value=000800}', "");
Expect(1, 65823, '\p{^Numeric_Value=000800}', "");
Expect(1, 65823, '\P{Numeric_Value=000800}', "");
Expect(0, 65823, '\P{^Numeric_Value=000800}', "");
Error('\p{Nv=__0080:=0}');
Error('\P{Nv=__0080:=0}');
Expect(1, 65824, '\p{Nv=+00000800}', "");
Expect(0, 65824, '\p{^Nv=+00000800}', "");
Expect(0, 65824, '\P{Nv=+00000800}', "");
Expect(1, 65824, '\P{^Nv=+00000800}', "");
Expect(0, 65823, '\p{Nv=+00000800}', "");
Expect(1, 65823, '\p{^Nv=+00000800}', "");
Expect(1, 65823, '\P{Nv=+00000800}', "");
Expect(0, 65823, '\P{^Nv=+00000800}', "");
Error('\p{Is_Numeric_Value= /a/00000000800}');
Error('\P{Is_Numeric_Value= /a/00000000800}');
Expect(1, 65824, '\p{Is_Numeric_Value=+000800}', "");
Expect(0, 65824, '\p{^Is_Numeric_Value=+000800}', "");
Expect(0, 65824, '\P{Is_Numeric_Value=+000800}', "");
Expect(1, 65824, '\P{^Is_Numeric_Value=+000800}', "");
Expect(0, 65823, '\p{Is_Numeric_Value=+000800}', "");
Expect(1, 65823, '\p{^Is_Numeric_Value=+000800}', "");
Expect(1, 65823, '\P{Is_Numeric_Value=+000800}', "");
Expect(0, 65823, '\P{^Is_Numeric_Value=+000800}', "");
Error('\p{Is_Nv=_/a/+000000000800}');
Error('\P{Is_Nv=_/a/+000000000800}');
Expect(1, 65824, '\p{Is_Nv:	+00_00_00_00_80_0}', "");
Expect(0, 65824, '\p{^Is_Nv:	+00_00_00_00_80_0}', "");
Expect(0, 65824, '\P{Is_Nv:	+00_00_00_00_80_0}', "");
Expect(1, 65824, '\P{^Is_Nv:	+00_00_00_00_80_0}', "");
Expect(0, 65823, '\p{Is_Nv:	+00_00_00_00_80_0}', "");
Expect(1, 65823, '\p{^Is_Nv:	+00_00_00_00_80_0}', "");
Expect(1, 65823, '\P{Is_Nv:	+00_00_00_00_80_0}', "");
Expect(0, 65823, '\P{^Is_Nv:	+00_00_00_00_80_0}', "");
Error('\p{Numeric_Value=:=_	000009000}');
Error('\P{Numeric_Value=:=_	000009000}');
Expect(1, 65834, '\p{Numeric_Value:	09000}', "");
Expect(0, 65834, '\p{^Numeric_Value:	09000}', "");
Expect(0, 65834, '\P{Numeric_Value:	09000}', "");
Expect(1, 65834, '\P{^Numeric_Value:	09000}', "");
Expect(0, 65833, '\p{Numeric_Value:	09000}', "");
Expect(1, 65833, '\p{^Numeric_Value:	09000}', "");
Expect(1, 65833, '\P{Numeric_Value:	09000}', "");
Expect(0, 65833, '\P{^Numeric_Value:	09000}', "");
Error('\p{Nv=+0000000009000:=}');
Error('\P{Nv=+0000000009000:=}');
Expect(1, 65834, '\p{Nv=0_0_0_0_0_0_0_9_000}', "");
Expect(0, 65834, '\p{^Nv=0_0_0_0_0_0_0_9_000}', "");
Expect(0, 65834, '\P{Nv=0_0_0_0_0_0_0_9_000}', "");
Expect(1, 65834, '\P{^Nv=0_0_0_0_0_0_0_9_000}', "");
Expect(0, 65833, '\p{Nv=0_0_0_0_0_0_0_9_000}', "");
Expect(1, 65833, '\p{^Nv=0_0_0_0_0_0_0_9_000}', "");
Expect(1, 65833, '\P{Nv=0_0_0_0_0_0_0_9_000}', "");
Expect(0, 65833, '\P{^Nv=0_0_0_0_0_0_0_9_000}', "");
Error('\p{Is_Numeric_Value=-000	0-0-0:=00-9000}');
Error('\P{Is_Numeric_Value=-000	0-0-0:=00-9000}');
Expect(1, 65834, '\p{Is_Numeric_Value=+00000009000}', "");
Expect(0, 65834, '\p{^Is_Numeric_Value=+00000009000}', "");
Expect(0, 65834, '\P{Is_Numeric_Value=+00000009000}', "");
Expect(1, 65834, '\P{^Is_Numeric_Value=+00000009000}', "");
Expect(0, 65833, '\p{Is_Numeric_Value=+00000009000}', "");
Expect(1, 65833, '\p{^Is_Numeric_Value=+00000009000}', "");
Expect(1, 65833, '\P{Is_Numeric_Value=+00000009000}', "");
Expect(0, 65833, '\P{^Is_Numeric_Value=+00000009000}', "");
Error('\p{Is_Nv=	0/a/00_0_0 00009000}');
Error('\P{Is_Nv=	0/a/00_0_0 00009000}');
Expect(1, 65834, '\p{Is_Nv:	00000009000}', "");
Expect(0, 65834, '\p{^Is_Nv:	00000009000}', "");
Expect(0, 65834, '\P{Is_Nv:	00000009000}', "");
Expect(1, 65834, '\P{^Is_Nv:	00000009000}', "");
Expect(0, 65833, '\p{Is_Nv:	00000009000}', "");
Expect(1, 65833, '\p{^Is_Nv:	00000009000}', "");
Expect(1, 65833, '\P{Is_Nv:	00000009000}', "");
Expect(0, 65833, '\P{^Is_Nv:	00000009000}', "");
Error('\p{Numeric_Value=-_00001-4:=}');
Error('\P{Numeric_Value=-_00001-4:=}');
Expect(1, 9325, '\p{Numeric_Value=000014}', "");
Expect(0, 9325, '\p{^Numeric_Value=000014}', "");
Expect(0, 9325, '\P{Numeric_Value=000014}', "");
Expect(1, 9325, '\P{^Numeric_Value=000014}', "");
Expect(0, 9324, '\p{Numeric_Value=000014}', "");
Expect(1, 9324, '\p{^Numeric_Value=000014}', "");
Expect(1, 9324, '\P{Numeric_Value=000014}', "");
Expect(0, 9324, '\P{^Numeric_Value=000014}', "");
Error('\p{Nv:/a/0 0_14}');
Error('\P{Nv:/a/0 0_14}');
Expect(1, 9325, '\p{Nv=+001_4}', "");
Expect(0, 9325, '\p{^Nv=+001_4}', "");
Expect(0, 9325, '\P{Nv=+001_4}', "");
Expect(1, 9325, '\P{^Nv=+001_4}', "");
Expect(0, 9324, '\p{Nv=+001_4}', "");
Expect(1, 9324, '\p{^Nv=+001_4}', "");
Expect(1, 9324, '\P{Nv=+001_4}', "");
Expect(0, 9324, '\P{^Nv=+001_4}', "");
Error('\p{Is_Numeric_Value=-:=+00	0000	00_014}');
Error('\P{Is_Numeric_Value=-:=+00	0000	00_014}');
Expect(1, 9325, '\p{Is_Numeric_Value:01_4}', "");
Expect(0, 9325, '\p{^Is_Numeric_Value:01_4}', "");
Expect(0, 9325, '\P{Is_Numeric_Value:01_4}', "");
Expect(1, 9325, '\P{^Is_Numeric_Value:01_4}', "");
Expect(0, 9324, '\p{Is_Numeric_Value:01_4}', "");
Expect(1, 9324, '\p{^Is_Numeric_Value:01_4}', "");
Expect(1, 9324, '\P{Is_Numeric_Value:01_4}', "");
Expect(0, 9324, '\P{^Is_Numeric_Value:01_4}', "");
Error('\p{Is_Nv=:=  +001-4}');
Error('\P{Is_Nv=:=  +001-4}');
Expect(1, 9325, '\p{Is_Nv=0000014}', "");
Expect(0, 9325, '\p{^Is_Nv=0000014}', "");
Expect(0, 9325, '\P{Is_Nv=0000014}', "");
Expect(1, 9325, '\P{^Is_Nv=0000014}', "");
Expect(0, 9324, '\p{Is_Nv=0000014}', "");
Expect(1, 9324, '\p{^Is_Nv=0000014}', "");
Expect(1, 9324, '\P{Is_Nv=0000014}', "");
Expect(0, 9324, '\P{^Is_Nv=0000014}', "");
Error('\p{Numeric_Value:  	000000060000/a/}');
Error('\P{Numeric_Value:  	000000060000/a/}');
Expect(1, 65840, '\p{Numeric_Value=+006_000_0}', "");
Expect(0, 65840, '\p{^Numeric_Value=+006_000_0}', "");
Expect(0, 65840, '\P{Numeric_Value=+006_000_0}', "");
Expect(1, 65840, '\P{^Numeric_Value=+006_000_0}', "");
Expect(0, 65839, '\p{Numeric_Value=+006_000_0}', "");
Expect(1, 65839, '\p{^Numeric_Value=+006_000_0}', "");
Expect(1, 65839, '\P{Numeric_Value=+006_000_0}', "");
Expect(0, 65839, '\P{^Numeric_Value=+006_000_0}', "");
Error('\p{Nv=	/a/0000060000}');
Error('\P{Nv=	/a/0000060000}');
Expect(1, 65840, '\p{Nv:   +00000060000}', "");
Expect(0, 65840, '\p{^Nv:   +00000060000}', "");
Expect(0, 65840, '\P{Nv:   +00000060000}', "");
Expect(1, 65840, '\P{^Nv:   +00000060000}', "");
Expect(0, 65839, '\p{Nv:   +00000060000}', "");
Expect(1, 65839, '\p{^Nv:   +00000060000}', "");
Expect(1, 65839, '\P{Nv:   +00000060000}', "");
Expect(0, 65839, '\P{^Nv:   +00000060000}', "");
Error('\p{Is_Numeric_Value:   /a/	60000}');
Error('\P{Is_Numeric_Value:   /a/	60000}');
Expect(1, 65840, '\p{Is_Numeric_Value=+0000060000}', "");
Expect(0, 65840, '\p{^Is_Numeric_Value=+0000060000}', "");
Expect(0, 65840, '\P{Is_Numeric_Value=+0000060000}', "");
Expect(1, 65840, '\P{^Is_Numeric_Value=+0000060000}', "");
Expect(0, 65839, '\p{Is_Numeric_Value=+0000060000}', "");
Expect(1, 65839, '\p{^Is_Numeric_Value=+0000060000}', "");
Expect(1, 65839, '\P{Is_Numeric_Value=+0000060000}', "");
Expect(0, 65839, '\P{^Is_Numeric_Value=+0000060000}', "");
Error('\p{Is_Nv: :=-0000 6000_0}');
Error('\P{Is_Nv: :=-0000 6000_0}');
Expect(1, 65840, '\p{Is_Nv=0000_0600_00}', "");
Expect(0, 65840, '\p{^Is_Nv=0000_0600_00}', "");
Expect(0, 65840, '\P{Is_Nv=0000_0600_00}', "");
Expect(1, 65840, '\P{^Is_Nv=0000_0600_00}', "");
Expect(0, 65839, '\p{Is_Nv=0000_0600_00}', "");
Expect(1, 65839, '\p{^Is_Nv=0000_0600_00}', "");
Expect(1, 65839, '\P{Is_Nv=0000_0600_00}', "");
Expect(0, 65839, '\P{^Is_Nv=0000_0600_00}', "");
Error('\p{Numeric_Value=  000049/a/}');
Error('\P{Numeric_Value=  000049/a/}');
Expect(1, 12990, '\p{Numeric_Value=0049}', "");
Expect(0, 12990, '\p{^Numeric_Value=0049}', "");
Expect(0, 12990, '\P{Numeric_Value=0049}', "");
Expect(1, 12990, '\P{^Numeric_Value=0049}', "");
Expect(0, 12989, '\p{Numeric_Value=0049}', "");
Expect(1, 12989, '\p{^Numeric_Value=0049}', "");
Expect(1, 12989, '\P{Numeric_Value=0049}', "");
Expect(0, 12989, '\P{^Numeric_Value=0049}', "");
Error('\p{Nv=:= 	4	9}');
Error('\P{Nv=:= 	4	9}');
Expect(1, 12990, '\p{Nv=+4_9}', "");
Expect(0, 12990, '\p{^Nv=+4_9}', "");
Expect(0, 12990, '\P{Nv=+4_9}', "");
Expect(1, 12990, '\P{^Nv=+4_9}', "");
Expect(0, 12989, '\p{Nv=+4_9}', "");
Expect(1, 12989, '\p{^Nv=+4_9}', "");
Expect(1, 12989, '\P{Nv=+4_9}', "");
Expect(0, 12989, '\P{^Nv=+4_9}', "");
Error('\p{Is_Numeric_Value=-	+0000:=04-9}');
Error('\P{Is_Numeric_Value=-	+0000:=04-9}');
Expect(1, 12990, '\p{Is_Numeric_Value:000000049}', "");
Expect(0, 12990, '\p{^Is_Numeric_Value:000000049}', "");
Expect(0, 12990, '\P{Is_Numeric_Value:000000049}', "");
Expect(1, 12990, '\P{^Is_Numeric_Value:000000049}', "");
Expect(0, 12989, '\p{Is_Numeric_Value:000000049}', "");
Expect(1, 12989, '\p{^Is_Numeric_Value:000000049}', "");
Expect(1, 12989, '\P{Is_Numeric_Value:000000049}', "");
Expect(0, 12989, '\P{^Is_Numeric_Value:000000049}', "");
Error('\p{Is_Nv=	/a/+0000000049}');
Error('\P{Is_Nv=	/a/+0000000049}');
Expect(1, 12990, '\p{Is_Nv=0_0_0_0_0049}', "");
Expect(0, 12990, '\p{^Is_Nv=0_0_0_0_0049}', "");
Expect(0, 12990, '\P{Is_Nv=0_0_0_0_0049}', "");
Expect(1, 12990, '\P{^Is_Nv=0_0_0_0_0049}', "");
Expect(0, 12989, '\p{Is_Nv=0_0_0_0_0049}', "");
Expect(1, 12989, '\p{^Is_Nv=0_0_0_0_0049}', "");
Expect(1, 12989, '\P{Is_Nv=0_0_0_0_0049}', "");
Expect(0, 12989, '\P{^Is_Nv=0_0_0_0_0049}', "");
Error('\p{Numeric_Value=/a/	+000024}');
Error('\P{Numeric_Value=/a/	+000024}');
Expect(1, 12884, '\p{Numeric_Value=0_0_24}', "");
Expect(0, 12884, '\p{^Numeric_Value=0_0_24}', "");
Expect(0, 12884, '\P{Numeric_Value=0_0_24}', "");
Expect(1, 12884, '\P{^Numeric_Value=0_0_24}', "");
Expect(0, 12883, '\p{Numeric_Value=0_0_24}', "");
Expect(1, 12883, '\p{^Numeric_Value=0_0_24}', "");
Expect(1, 12883, '\P{Numeric_Value=0_0_24}', "");
Expect(0, 12883, '\P{^Numeric_Value=0_0_24}', "");
Error('\p{Nv=:=000024}');
Error('\P{Nv=:=000024}');
Expect(1, 12884, '\p{Nv=+002_4}', "");
Expect(0, 12884, '\p{^Nv=+002_4}', "");
Expect(0, 12884, '\P{Nv=+002_4}', "");
Expect(1, 12884, '\P{^Nv=+002_4}', "");
Expect(0, 12883, '\p{Nv=+002_4}', "");
Expect(1, 12883, '\p{^Nv=+002_4}', "");
Expect(1, 12883, '\P{Nv=+002_4}', "");
Expect(0, 12883, '\P{^Nv=+002_4}', "");
Error('\p{Is_Numeric_Value=_/a/+0000024}');
Error('\P{Is_Numeric_Value=_/a/+0000024}');
Expect(1, 12884, '\p{Is_Numeric_Value=24}', "");
Expect(0, 12884, '\p{^Is_Numeric_Value=24}', "");
Expect(0, 12884, '\P{Is_Numeric_Value=24}', "");
Expect(1, 12884, '\P{^Is_Numeric_Value=24}', "");
Expect(0, 12883, '\p{Is_Numeric_Value=24}', "");
Expect(1, 12883, '\p{^Is_Numeric_Value=24}', "");
Expect(1, 12883, '\P{Is_Numeric_Value=24}', "");
Expect(0, 12883, '\P{^Is_Numeric_Value=24}', "");
Error('\p{Is_Nv: /a/-	0	0 0	0-0 00024}');
Error('\P{Is_Nv: /a/-	0	0 0	0-0 00024}');
Expect(1, 12884, '\p{Is_Nv=0000000024}', "");
Expect(0, 12884, '\p{^Is_Nv=0000000024}', "");
Expect(0, 12884, '\P{Is_Nv=0000000024}', "");
Expect(1, 12884, '\P{^Is_Nv=0000000024}', "");
Expect(0, 12883, '\p{Is_Nv=0000000024}', "");
Expect(1, 12883, '\p{^Is_Nv=0000000024}', "");
Expect(1, 12883, '\P{Is_Nv=0000000024}', "");
Expect(0, 12883, '\P{^Is_Nv=0000000024}', "");
Error('\p{Numeric_Value=:=	 +0000000001/0000004}');
Error('\P{Numeric_Value=:=	 +0000000001/0000004}');
Expect(1, 188, '\p{Numeric_Value=000000001/0004}', "");
Expect(0, 188, '\p{^Numeric_Value=000000001/0004}', "");
Expect(0, 188, '\P{Numeric_Value=000000001/0004}', "");
Expect(1, 188, '\P{^Numeric_Value=000000001/0004}', "");
Expect(0, 187, '\p{Numeric_Value=000000001/0004}', "");
Expect(1, 187, '\p{^Numeric_Value=000000001/0004}', "");
Expect(1, 187, '\P{Numeric_Value=000000001/0004}', "");
Expect(0, 187, '\P{^Numeric_Value=000000001/0004}', "");
Expect(1, 188, '\p{Numeric_Value=0.250}', "");
Expect(0, 188, '\p{^Numeric_Value=0.250}', "");
Expect(0, 188, '\P{Numeric_Value=0.250}', "");
Expect(1, 188, '\P{^Numeric_Value=0.250}', "");
Expect(0, 187, '\p{Numeric_Value=0.250}', "");
Expect(1, 187, '\p{^Numeric_Value=0.250}', "");
Expect(1, 187, '\P{Numeric_Value=0.250}', "");
Expect(0, 187, '\P{^Numeric_Value=0.250}', "");
Error('\p{Nv=:=	-+0001/0000004}');
Error('\P{Nv=:=	-+0001/0000004}');
Expect(1, 188, '\p{Nv=01/00004}', "");
Expect(0, 188, '\p{^Nv=01/00004}', "");
Expect(0, 188, '\P{Nv=01/00004}', "");
Expect(1, 188, '\P{^Nv=01/00004}', "");
Expect(0, 187, '\p{Nv=01/00004}', "");
Expect(1, 187, '\p{^Nv=01/00004}', "");
Expect(1, 187, '\P{Nv=01/00004}', "");
Expect(0, 187, '\P{^Nv=01/00004}', "");
Expect(1, 188, '\p{Nv=0.250}', "");
Expect(0, 188, '\p{^Nv=0.250}', "");
Expect(0, 188, '\P{Nv=0.250}', "");
Expect(1, 188, '\P{^Nv=0.250}', "");
Expect(0, 187, '\p{Nv=0.250}', "");
Expect(1, 187, '\p{^Nv=0.250}', "");
Expect(1, 187, '\P{Nv=0.250}', "");
Expect(0, 187, '\P{^Nv=0.250}', "");
Error('\p{Is_Numeric_Value=/a/-	0000001/4}');
Error('\P{Is_Numeric_Value=/a/-	0000001/4}');
Expect(1, 188, '\p{Is_Numeric_Value=0000000001/0000004}', "");
Expect(0, 188, '\p{^Is_Numeric_Value=0000000001/0000004}', "");
Expect(0, 188, '\P{Is_Numeric_Value=0000000001/0000004}', "");
Expect(1, 188, '\P{^Is_Numeric_Value=0000000001/0000004}', "");
Expect(0, 187, '\p{Is_Numeric_Value=0000000001/0000004}', "");
Expect(1, 187, '\p{^Is_Numeric_Value=0000000001/0000004}', "");
Expect(1, 187, '\P{Is_Numeric_Value=0000000001/0000004}', "");
Expect(0, 187, '\P{^Is_Numeric_Value=0000000001/0000004}', "");
Expect(1, 188, '\p{Is_Numeric_Value:0.250}', "");
Expect(0, 188, '\p{^Is_Numeric_Value:0.250}', "");
Expect(0, 188, '\P{Is_Numeric_Value:0.250}', "");
Expect(1, 188, '\P{^Is_Numeric_Value:0.250}', "");
Expect(0, 187, '\p{Is_Numeric_Value:0.250}', "");
Expect(1, 187, '\p{^Is_Numeric_Value:0.250}', "");
Expect(1, 187, '\P{Is_Numeric_Value:0.250}', "");
Expect(0, 187, '\P{^Is_Numeric_Value:0.250}', "");
Error('\p{Is_Nv=:=- +001/0000000004}');
Error('\P{Is_Nv=:=- +001/0000000004}');
Expect(1, 188, '\p{Is_Nv=1/004}', "");
Expect(0, 188, '\p{^Is_Nv=1/004}', "");
Expect(0, 188, '\P{Is_Nv=1/004}', "");
Expect(1, 188, '\P{^Is_Nv=1/004}', "");
Expect(0, 187, '\p{Is_Nv=1/004}', "");
Expect(1, 187, '\p{^Is_Nv=1/004}', "");
Expect(1, 187, '\P{Is_Nv=1/004}', "");
Expect(0, 187, '\P{^Is_Nv=1/004}', "");
Expect(1, 188, '\p{Is_Nv=0.250}', "");
Expect(0, 188, '\p{^Is_Nv=0.250}', "");
Expect(0, 188, '\P{Is_Nv=0.250}', "");
Expect(1, 188, '\P{^Is_Nv=0.250}', "");
Expect(0, 187, '\p{Is_Nv=0.250}', "");
Expect(1, 187, '\p{^Is_Nv=0.250}', "");
Expect(1, 187, '\P{Is_Nv=0.250}', "");
Expect(0, 187, '\P{^Is_Nv=0.250}', "");
Error('\p{Numeric_Value=		9	0_0 00:=}');
Error('\P{Numeric_Value=		9	0_0 00:=}');
Expect(1, 65843, '\p{Numeric_Value=0009000_0}', "");
Expect(0, 65843, '\p{^Numeric_Value=0009000_0}', "");
Expect(0, 65843, '\P{Numeric_Value=0009000_0}', "");
Expect(1, 65843, '\P{^Numeric_Value=0009000_0}', "");
Expect(0, 65842, '\p{Numeric_Value=0009000_0}', "");
Expect(1, 65842, '\p{^Numeric_Value=0009000_0}', "");
Expect(1, 65842, '\P{Numeric_Value=0009000_0}', "");
Expect(0, 65842, '\P{^Numeric_Value=0009000_0}', "");
Error('\p{Nv=:=- +00000000090000}');
Error('\P{Nv=:=- +00000000090000}');
Expect(1, 65843, '\p{Nv=000_000_900_00}', "");
Expect(0, 65843, '\p{^Nv=000_000_900_00}', "");
Expect(0, 65843, '\P{Nv=000_000_900_00}', "");
Expect(1, 65843, '\P{^Nv=000_000_900_00}', "");
Expect(0, 65842, '\p{Nv=000_000_900_00}', "");
Expect(1, 65842, '\p{^Nv=000_000_900_00}', "");
Expect(1, 65842, '\P{Nv=000_000_900_00}', "");
Expect(0, 65842, '\P{^Nv=000_000_900_00}', "");
Error('\p{Is_Numeric_Value=_/a/00000090000}');
Error('\P{Is_Numeric_Value=_/a/00000090000}');
Expect(1, 65843, '\p{Is_Numeric_Value=0_0_0_0_0_9_0_000}', "");
Expect(0, 65843, '\p{^Is_Numeric_Value=0_0_0_0_0_9_0_000}', "");
Expect(0, 65843, '\P{Is_Numeric_Value=0_0_0_0_0_9_0_000}', "");
Expect(1, 65843, '\P{^Is_Numeric_Value=0_0_0_0_0_9_0_000}', "");
Expect(0, 65842, '\p{Is_Numeric_Value=0_0_0_0_0_9_0_000}', "");
Expect(1, 65842, '\p{^Is_Numeric_Value=0_0_0_0_0_9_0_000}', "");
Expect(1, 65842, '\P{Is_Numeric_Value=0_0_0_0_0_9_0_000}', "");
Expect(0, 65842, '\P{^Is_Numeric_Value=0_0_0_0_0_9_0_000}', "");
Error('\p{Is_Nv=/a/0000090000}');
Error('\P{Is_Nv=/a/0000090000}');
Expect(1, 65843, '\p{Is_Nv:   +0000_9000_0}', "");
Expect(0, 65843, '\p{^Is_Nv:   +0000_9000_0}', "");
Expect(0, 65843, '\P{Is_Nv:   +0000_9000_0}', "");
Expect(1, 65843, '\P{^Is_Nv:   +0000_9000_0}', "");
Expect(0, 65842, '\p{Is_Nv:   +0000_9000_0}', "");
Expect(1, 65842, '\p{^Is_Nv:   +0000_9000_0}', "");
Expect(1, 65842, '\P{Is_Nv:   +0000_9000_0}', "");
Expect(0, 65842, '\P{^Is_Nv:   +0000_9000_0}', "");
Error('\p{Numeric_Value=_:=00_05	00 00}');
Error('\P{Numeric_Value=_:=00_05	00 00}');
Expect(1, 8583, '\p{Numeric_Value=+5000_0}', "");
Expect(0, 8583, '\p{^Numeric_Value=+5000_0}', "");
Expect(0, 8583, '\P{Numeric_Value=+5000_0}', "");
Expect(1, 8583, '\P{^Numeric_Value=+5000_0}', "");
Expect(0, 8582, '\p{Numeric_Value=+5000_0}', "");
Expect(1, 8582, '\p{^Numeric_Value=+5000_0}', "");
Expect(1, 8582, '\P{Numeric_Value=+5000_0}', "");
Expect(0, 8582, '\P{^Numeric_Value=+5000_0}', "");
Error('\p{Nv=:=-	00050000}');
Error('\P{Nv=:=-	00050000}');
Expect(1, 8583, '\p{Nv=00_00_00_00_50_000}', "");
Expect(0, 8583, '\p{^Nv=00_00_00_00_50_000}', "");
Expect(0, 8583, '\P{Nv=00_00_00_00_50_000}', "");
Expect(1, 8583, '\P{^Nv=00_00_00_00_50_000}', "");
Expect(0, 8582, '\p{Nv=00_00_00_00_50_000}', "");
Expect(1, 8582, '\p{^Nv=00_00_00_00_50_000}', "");
Expect(1, 8582, '\P{Nv=00_00_00_00_50_000}', "");
Expect(0, 8582, '\P{^Nv=00_00_00_00_50_000}', "");
Error('\p{Is_Numeric_Value=/a/ -0005000_0}');
Error('\P{Is_Numeric_Value=/a/ -0005000_0}');
Expect(1, 8583, '\p{Is_Numeric_Value=+0000050000}', "");
Expect(0, 8583, '\p{^Is_Numeric_Value=+0000050000}', "");
Expect(0, 8583, '\P{Is_Numeric_Value=+0000050000}', "");
Expect(1, 8583, '\P{^Is_Numeric_Value=+0000050000}', "");
Expect(0, 8582, '\p{Is_Numeric_Value=+0000050000}', "");
Expect(1, 8582, '\p{^Is_Numeric_Value=+0000050000}', "");
Expect(1, 8582, '\P{Is_Numeric_Value=+0000050000}', "");
Expect(0, 8582, '\P{^Is_Numeric_Value=+0000050000}', "");
Error('\p{Is_Nv= /a/000 000	050000}');
Error('\P{Is_Nv= /a/000 000	050000}');
Expect(1, 8583, '\p{Is_Nv=5000_0}', "");
Expect(0, 8583, '\p{^Is_Nv=5000_0}', "");
Expect(0, 8583, '\P{Is_Nv=5000_0}', "");
Expect(1, 8583, '\P{^Is_Nv=5000_0}', "");
Expect(0, 8582, '\p{Is_Nv=5000_0}', "");
Expect(1, 8582, '\p{^Is_Nv=5000_0}', "");
Expect(1, 8582, '\P{Is_Nv=5000_0}', "");
Expect(0, 8582, '\P{^Is_Nv=5000_0}', "");
Error('\p{Numeric_Value=:=--0000040000}');
Error('\P{Numeric_Value=:=--0000040000}');
Expect(1, 65838, '\p{Numeric_Value=0_0_0_0_0_0_0_0_040000}', "");
Expect(0, 65838, '\p{^Numeric_Value=0_0_0_0_0_0_0_0_040000}', "");
Expect(0, 65838, '\P{Numeric_Value=0_0_0_0_0_0_0_0_040000}', "");
Expect(1, 65838, '\P{^Numeric_Value=0_0_0_0_0_0_0_0_040000}', "");
Expect(0, 65837, '\p{Numeric_Value=0_0_0_0_0_0_0_0_040000}', "");
Expect(1, 65837, '\p{^Numeric_Value=0_0_0_0_0_0_0_0_040000}', "");
Expect(1, 65837, '\P{Numeric_Value=0_0_0_0_0_0_0_0_040000}', "");
Expect(0, 65837, '\P{^Numeric_Value=0_0_0_0_0_0_0_0_040000}', "");
Error('\p{Nv= /a/+0-0_0_0	0 0	40000}');
Error('\P{Nv= /a/+0-0_0_0	0 0	40000}');
Expect(1, 65838, '\p{Nv=+0_0_0_0_4_0000}', "");
Expect(0, 65838, '\p{^Nv=+0_0_0_0_4_0000}', "");
Expect(0, 65838, '\P{Nv=+0_0_0_0_4_0000}', "");
Expect(1, 65838, '\P{^Nv=+0_0_0_0_4_0000}', "");
Expect(0, 65837, '\p{Nv=+0_0_0_0_4_0000}', "");
Expect(1, 65837, '\p{^Nv=+0_0_0_0_4_0000}', "");
Expect(1, 65837, '\P{Nv=+0_0_0_0_4_0000}', "");
Expect(0, 65837, '\P{^Nv=+0_0_0_0_4_0000}', "");
Error('\p{Is_Numeric_Value= _0:=00_0 00-40_000}');
Error('\P{Is_Numeric_Value= _0:=00_0 00-40_000}');
Expect(1, 65838, '\p{Is_Numeric_Value=+000040000}', "");
Expect(0, 65838, '\p{^Is_Numeric_Value=+000040000}', "");
Expect(0, 65838, '\P{Is_Numeric_Value=+000040000}', "");
Expect(1, 65838, '\P{^Is_Numeric_Value=+000040000}', "");
Expect(0, 65837, '\p{Is_Numeric_Value=+000040000}', "");
Expect(1, 65837, '\p{^Is_Numeric_Value=+000040000}', "");
Expect(1, 65837, '\P{Is_Numeric_Value=+000040000}', "");
Expect(0, 65837, '\P{^Is_Numeric_Value=+000040000}', "");
Error('\p{Is_Nv=-00 00 40/a/000}');
Error('\P{Is_Nv=-00 00 40/a/000}');
Expect(1, 65838, '\p{Is_Nv=0_0_0_0_0_0_4_0_000}', "");
Expect(0, 65838, '\p{^Is_Nv=0_0_0_0_0_0_4_0_000}', "");
Expect(0, 65838, '\P{Is_Nv=0_0_0_0_0_0_4_0_000}', "");
Expect(1, 65838, '\P{^Is_Nv=0_0_0_0_0_0_4_0_000}', "");
Expect(0, 65837, '\p{Is_Nv=0_0_0_0_0_0_4_0_000}', "");
Expect(1, 65837, '\p{^Is_Nv=0_0_0_0_0_0_4_0_000}', "");
Expect(1, 65837, '\P{Is_Nv=0_0_0_0_0_0_4_0_000}', "");
Expect(0, 65837, '\P{^Is_Nv=0_0_0_0_0_0_4_0_000}', "");
Error('\p{Numeric_Value=	:=0000000001/00000002}');
Error('\P{Numeric_Value=	:=0000000001/00000002}');
Expect(1, 189, '\p{Numeric_Value=001/002}', "");
Expect(0, 189, '\p{^Numeric_Value=001/002}', "");
Expect(0, 189, '\P{Numeric_Value=001/002}', "");
Expect(1, 189, '\P{^Numeric_Value=001/002}', "");
Expect(0, 188, '\p{Numeric_Value=001/002}', "");
Expect(1, 188, '\p{^Numeric_Value=001/002}', "");
Expect(1, 188, '\P{Numeric_Value=001/002}', "");
Expect(0, 188, '\P{^Numeric_Value=001/002}', "");
Expect(1, 189, '\p{Numeric_Value=0.500}', "");
Expect(0, 189, '\p{^Numeric_Value=0.500}', "");
Expect(0, 189, '\P{Numeric_Value=0.500}', "");
Expect(1, 189, '\P{^Numeric_Value=0.500}', "");
Expect(0, 188, '\p{Numeric_Value=0.500}', "");
Expect(1, 188, '\p{^Numeric_Value=0.500}', "");
Expect(1, 188, '\P{Numeric_Value=0.500}', "");
Expect(0, 188, '\P{^Numeric_Value=0.500}', "");
Error('\p{Nv=:= -000000001/000002}');
Error('\P{Nv=:= -000000001/000002}');
Expect(1, 189, '\p{Nv=001/002}', "");
Expect(0, 189, '\p{^Nv=001/002}', "");
Expect(0, 189, '\P{Nv=001/002}', "");
Expect(1, 189, '\P{^Nv=001/002}', "");
Expect(0, 188, '\p{Nv=001/002}', "");
Expect(1, 188, '\p{^Nv=001/002}', "");
Expect(1, 188, '\P{Nv=001/002}', "");
Expect(0, 188, '\P{^Nv=001/002}', "");
Expect(1, 189, '\p{Nv=0.500}', "");
Expect(0, 189, '\p{^Nv=0.500}', "");
Expect(0, 189, '\P{Nv=0.500}', "");
Expect(1, 189, '\P{^Nv=0.500}', "");
Expect(0, 188, '\p{Nv=0.500}', "");
Expect(1, 188, '\p{^Nv=0.500}', "");
Expect(1, 188, '\P{Nv=0.500}', "");
Expect(0, 188, '\P{^Nv=0.500}', "");
Error('\p{Is_Numeric_Value= :=001/0000002}');
Error('\P{Is_Numeric_Value= :=001/0000002}');
Expect(1, 189, '\p{Is_Numeric_Value=000001/000002}', "");
Expect(0, 189, '\p{^Is_Numeric_Value=000001/000002}', "");
Expect(0, 189, '\P{Is_Numeric_Value=000001/000002}', "");
Expect(1, 189, '\P{^Is_Numeric_Value=000001/000002}', "");
Expect(0, 188, '\p{Is_Numeric_Value=000001/000002}', "");
Expect(1, 188, '\p{^Is_Numeric_Value=000001/000002}', "");
Expect(1, 188, '\P{Is_Numeric_Value=000001/000002}', "");
Expect(0, 188, '\P{^Is_Numeric_Value=000001/000002}', "");
Expect(1, 189, '\p{Is_Numeric_Value:0.500}', "");
Expect(0, 189, '\p{^Is_Numeric_Value:0.500}', "");
Expect(0, 189, '\P{Is_Numeric_Value:0.500}', "");
Expect(1, 189, '\P{^Is_Numeric_Value:0.500}', "");
Expect(0, 188, '\p{Is_Numeric_Value:0.500}', "");
Expect(1, 188, '\p{^Is_Numeric_Value:0.500}', "");
Expect(1, 188, '\P{Is_Numeric_Value:0.500}', "");
Expect(0, 188, '\P{^Is_Numeric_Value:0.500}', "");
Error('\p{Is_Nv= :=0000001/002}');
Error('\P{Is_Nv= :=0000001/002}');
Expect(1, 189, '\p{Is_Nv=01/00002}', "");
Expect(0, 189, '\p{^Is_Nv=01/00002}', "");
Expect(0, 189, '\P{Is_Nv=01/00002}', "");
Expect(1, 189, '\P{^Is_Nv=01/00002}', "");
Expect(0, 188, '\p{Is_Nv=01/00002}', "");
Expect(1, 188, '\p{^Is_Nv=01/00002}', "");
Expect(1, 188, '\P{Is_Nv=01/00002}', "");
Expect(0, 188, '\P{^Is_Nv=01/00002}', "");
Expect(1, 189, '\p{Is_Nv=0.500}', "");
Expect(0, 189, '\p{^Is_Nv=0.500}', "");
Expect(0, 189, '\P{Is_Nv=0.500}', "");
Expect(1, 189, '\P{^Is_Nv=0.500}', "");
Expect(0, 188, '\p{Is_Nv=0.500}', "");
Expect(1, 188, '\p{^Is_Nv=0.500}', "");
Expect(1, 188, '\P{Is_Nv=0.500}', "");
Expect(0, 188, '\P{^Is_Nv=0.500}', "");
Error('\p{Numeric_Value= :=00007000}');
Error('\P{Numeric_Value= :=00007000}');
Expect(1, 65832, '\p{Numeric_Value=0000_0000_0700_0}', "");
Expect(0, 65832, '\p{^Numeric_Value=0000_0000_0700_0}', "");
Expect(0, 65832, '\P{Numeric_Value=0000_0000_0700_0}', "");
Expect(1, 65832, '\P{^Numeric_Value=0000_0000_0700_0}', "");
Expect(0, 65831, '\p{Numeric_Value=0000_0000_0700_0}', "");
Expect(1, 65831, '\p{^Numeric_Value=0000_0000_0700_0}', "");
Expect(1, 65831, '\P{Numeric_Value=0000_0000_0700_0}', "");
Expect(0, 65831, '\P{^Numeric_Value=0000_0000_0700_0}', "");
Error('\p{Nv= _07000:=}');
Error('\P{Nv= _07000:=}');
Expect(1, 65832, '\p{Nv=+0_0_0_0_0_0_7000}', "");
Expect(0, 65832, '\p{^Nv=+0_0_0_0_0_0_7000}', "");
Expect(0, 65832, '\P{Nv=+0_0_0_0_0_0_7000}', "");
Expect(1, 65832, '\P{^Nv=+0_0_0_0_0_0_7000}', "");
Expect(0, 65831, '\p{Nv=+0_0_0_0_0_0_7000}', "");
Expect(1, 65831, '\p{^Nv=+0_0_0_0_0_0_7000}', "");
Expect(1, 65831, '\P{Nv=+0_0_0_0_0_0_7000}', "");
Expect(0, 65831, '\P{^Nv=+0_0_0_0_0_0_7000}', "");
Error('\p{Is_Numeric_Value= 	0_0:=0	70_00}');
Error('\P{Is_Numeric_Value= 	0_0:=0	70_00}');
Expect(1, 65832, '\p{Is_Numeric_Value=007000}', "");
Expect(0, 65832, '\p{^Is_Numeric_Value=007000}', "");
Expect(0, 65832, '\P{Is_Numeric_Value=007000}', "");
Expect(1, 65832, '\P{^Is_Numeric_Value=007000}', "");
Expect(0, 65831, '\p{Is_Numeric_Value=007000}', "");
Expect(1, 65831, '\p{^Is_Numeric_Value=007000}', "");
Expect(1, 65831, '\P{Is_Numeric_Value=007000}', "");
Expect(0, 65831, '\P{^Is_Numeric_Value=007000}', "");
Error('\p{Is_Nv=/a/	_00000007000}');
Error('\P{Is_Nv=/a/	_00000007000}');
Expect(1, 65832, '\p{Is_Nv=00007000}', "");
Expect(0, 65832, '\p{^Is_Nv=00007000}', "");
Expect(0, 65832, '\P{Is_Nv=00007000}', "");
Expect(1, 65832, '\P{^Is_Nv=00007000}', "");
Expect(0, 65831, '\p{Is_Nv=00007000}', "");
Expect(1, 65831, '\p{^Is_Nv=00007000}', "");
Expect(1, 65831, '\P{Is_Nv=00007000}', "");
Expect(0, 65831, '\P{^Is_Nv=00007000}', "");
Error('\p{Numeric_Value= :=000000003/005}');
Error('\P{Numeric_Value= :=000000003/005}');
Expect(1, 8535, '\p{Numeric_Value=000000003/000005}', "");
Expect(0, 8535, '\p{^Numeric_Value=000000003/000005}', "");
Expect(0, 8535, '\P{Numeric_Value=000000003/000005}', "");
Expect(1, 8535, '\P{^Numeric_Value=000000003/000005}', "");
Expect(0, 8534, '\p{Numeric_Value=000000003/000005}', "");
Expect(1, 8534, '\p{^Numeric_Value=000000003/000005}', "");
Expect(1, 8534, '\P{Numeric_Value=000000003/000005}', "");
Expect(0, 8534, '\P{^Numeric_Value=000000003/000005}', "");
Expect(1, 8535, '\p{Numeric_Value=0.600}', "");
Expect(0, 8535, '\p{^Numeric_Value=0.600}', "");
Expect(0, 8535, '\P{Numeric_Value=0.600}', "");
Expect(1, 8535, '\P{^Numeric_Value=0.600}', "");
Expect(0, 8534, '\p{Numeric_Value=0.600}', "");
Expect(1, 8534, '\p{^Numeric_Value=0.600}', "");
Expect(1, 8534, '\P{Numeric_Value=0.600}', "");
Expect(0, 8534, '\P{^Numeric_Value=0.600}', "");
Error('\p{Nv=/a/ -0003/05}');
Error('\P{Nv=/a/ -0003/05}');
Expect(1, 8535, '\p{Nv=00003/0000005}', "");
Expect(0, 8535, '\p{^Nv=00003/0000005}', "");
Expect(0, 8535, '\P{Nv=00003/0000005}', "");
Expect(1, 8535, '\P{^Nv=00003/0000005}', "");
Expect(0, 8534, '\p{Nv=00003/0000005}', "");
Expect(1, 8534, '\p{^Nv=00003/0000005}', "");
Expect(1, 8534, '\P{Nv=00003/0000005}', "");
Expect(0, 8534, '\P{^Nv=00003/0000005}', "");
Expect(1, 8535, '\p{Nv=0.600}', "");
Expect(0, 8535, '\p{^Nv=0.600}', "");
Expect(0, 8535, '\P{Nv=0.600}', "");
Expect(1, 8535, '\P{^Nv=0.600}', "");
Expect(0, 8534, '\p{Nv=0.600}', "");
Expect(1, 8534, '\p{^Nv=0.600}', "");
Expect(1, 8534, '\P{Nv=0.600}', "");
Expect(0, 8534, '\P{^Nv=0.600}', "");
Error('\p{Is_Numeric_Value=/a/000000003/000000005}');
Error('\P{Is_Numeric_Value=/a/000000003/000000005}');
Expect(1, 8535, '\p{Is_Numeric_Value:	003/05}', "");
Expect(0, 8535, '\p{^Is_Numeric_Value:	003/05}', "");
Expect(0, 8535, '\P{Is_Numeric_Value:	003/05}', "");
Expect(1, 8535, '\P{^Is_Numeric_Value:	003/05}', "");
Expect(0, 8534, '\p{Is_Numeric_Value:	003/05}', "");
Expect(1, 8534, '\p{^Is_Numeric_Value:	003/05}', "");
Expect(1, 8534, '\P{Is_Numeric_Value:	003/05}', "");
Expect(0, 8534, '\P{^Is_Numeric_Value:	003/05}', "");
Expect(1, 8535, '\p{Is_Numeric_Value:	0.600}', "");
Expect(0, 8535, '\p{^Is_Numeric_Value:	0.600}', "");
Expect(0, 8535, '\P{Is_Numeric_Value:	0.600}', "");
Expect(1, 8535, '\P{^Is_Numeric_Value:	0.600}', "");
Expect(0, 8534, '\p{Is_Numeric_Value:	0.600}', "");
Expect(1, 8534, '\p{^Is_Numeric_Value:	0.600}', "");
Expect(1, 8534, '\P{Is_Numeric_Value:	0.600}', "");
Expect(0, 8534, '\P{^Is_Numeric_Value:	0.600}', "");
Error('\p{Is_Nv:		00003/000000005:=}');
Error('\P{Is_Nv:		00003/000000005:=}');
Expect(1, 8535, '\p{Is_Nv=000000003/00005}', "");
Expect(0, 8535, '\p{^Is_Nv=000000003/00005}', "");
Expect(0, 8535, '\P{Is_Nv=000000003/00005}', "");
Expect(1, 8535, '\P{^Is_Nv=000000003/00005}', "");
Expect(0, 8534, '\p{Is_Nv=000000003/00005}', "");
Expect(1, 8534, '\p{^Is_Nv=000000003/00005}', "");
Expect(1, 8534, '\P{Is_Nv=000000003/00005}', "");
Expect(0, 8534, '\P{^Is_Nv=000000003/00005}', "");
Expect(1, 8535, '\p{Is_Nv=0.600}', "");
Expect(0, 8535, '\p{^Is_Nv=0.600}', "");
Expect(0, 8535, '\P{Is_Nv=0.600}', "");
Expect(1, 8535, '\P{^Is_Nv=0.600}', "");
Expect(0, 8534, '\p{Is_Nv=0.600}', "");
Expect(1, 8534, '\p{^Is_Nv=0.600}', "");
Expect(1, 8534, '\P{Is_Nv=0.600}', "");
Expect(0, 8534, '\P{^Is_Nv=0.600}', "");
Error('\p{Numeric_Value=_+000017/02/a/}');
Error('\P{Numeric_Value=_+000017/02/a/}');
Expect(1, 3890, '\p{Numeric_Value=17/02}', "");
Expect(0, 3890, '\p{^Numeric_Value=17/02}', "");
Expect(0, 3890, '\P{Numeric_Value=17/02}', "");
Expect(1, 3890, '\P{^Numeric_Value=17/02}', "");
Expect(0, 3889, '\p{Numeric_Value=17/02}', "");
Expect(1, 3889, '\p{^Numeric_Value=17/02}', "");
Expect(1, 3889, '\P{Numeric_Value=17/02}', "");
Expect(0, 3889, '\P{^Numeric_Value=17/02}', "");
Expect(1, 3890, '\p{Numeric_Value=8.500}', "");
Expect(0, 3890, '\p{^Numeric_Value=8.500}', "");
Expect(0, 3890, '\P{Numeric_Value=8.500}', "");
Expect(1, 3890, '\P{^Numeric_Value=8.500}', "");
Expect(0, 3889, '\p{Numeric_Value=8.500}', "");
Expect(1, 3889, '\p{^Numeric_Value=8.500}', "");
Expect(1, 3889, '\P{Numeric_Value=8.500}', "");
Expect(0, 3889, '\P{^Numeric_Value=8.500}', "");
Error('\p{Nv: :=-+0000017/00000002}');
Error('\P{Nv: :=-+0000017/00000002}');
Expect(1, 3890, '\p{Nv=0000017/0000000002}', "");
Expect(0, 3890, '\p{^Nv=0000017/0000000002}', "");
Expect(0, 3890, '\P{Nv=0000017/0000000002}', "");
Expect(1, 3890, '\P{^Nv=0000017/0000000002}', "");
Expect(0, 3889, '\p{Nv=0000017/0000000002}', "");
Expect(1, 3889, '\p{^Nv=0000017/0000000002}', "");
Expect(1, 3889, '\P{Nv=0000017/0000000002}', "");
Expect(0, 3889, '\P{^Nv=0000017/0000000002}', "");
Expect(1, 3890, '\p{Nv=8.500}', "");
Expect(0, 3890, '\p{^Nv=8.500}', "");
Expect(0, 3890, '\P{Nv=8.500}', "");
Expect(1, 3890, '\P{^Nv=8.500}', "");
Expect(0, 3889, '\p{Nv=8.500}', "");
Expect(1, 3889, '\p{^Nv=8.500}', "");
Expect(1, 3889, '\P{Nv=8.500}', "");
Expect(0, 3889, '\P{^Nv=8.500}', "");
Error('\p{Is_Numeric_Value=-	00000017/00000002:=}');
Error('\P{Is_Numeric_Value=-	00000017/00000002:=}');
Expect(1, 3890, '\p{Is_Numeric_Value=00000000017/00000002}', "");
Expect(0, 3890, '\p{^Is_Numeric_Value=00000000017/00000002}', "");
Expect(0, 3890, '\P{Is_Numeric_Value=00000000017/00000002}', "");
Expect(1, 3890, '\P{^Is_Numeric_Value=00000000017/00000002}', "");
Expect(0, 3889, '\p{Is_Numeric_Value=00000000017/00000002}', "");
Expect(1, 3889, '\p{^Is_Numeric_Value=00000000017/00000002}', "");
Expect(1, 3889, '\P{Is_Numeric_Value=00000000017/00000002}', "");
Expect(0, 3889, '\P{^Is_Numeric_Value=00000000017/00000002}', "");
Expect(1, 3890, '\p{Is_Numeric_Value=8.500}', "");
Expect(0, 3890, '\p{^Is_Numeric_Value=8.500}', "");
Expect(0, 3890, '\P{Is_Numeric_Value=8.500}', "");
Expect(1, 3890, '\P{^Is_Numeric_Value=8.500}', "");
Expect(0, 3889, '\p{Is_Numeric_Value=8.500}', "");
Expect(1, 3889, '\p{^Is_Numeric_Value=8.500}', "");
Expect(1, 3889, '\P{Is_Numeric_Value=8.500}', "");
Expect(0, 3889, '\P{^Is_Numeric_Value=8.500}', "");
Error('\p{Is_Nv=  +017/0000000002:=}');
Error('\P{Is_Nv=  +017/0000000002:=}');
Expect(1, 3890, '\p{Is_Nv=000017/00002}', "");
Expect(0, 3890, '\p{^Is_Nv=000017/00002}', "");
Expect(0, 3890, '\P{Is_Nv=000017/00002}', "");
Expect(1, 3890, '\P{^Is_Nv=000017/00002}', "");
Expect(0, 3889, '\p{Is_Nv=000017/00002}', "");
Expect(1, 3889, '\p{^Is_Nv=000017/00002}', "");
Expect(1, 3889, '\P{Is_Nv=000017/00002}', "");
Expect(0, 3889, '\P{^Is_Nv=000017/00002}', "");
Expect(1, 3890, '\p{Is_Nv=8.500}', "");
Expect(0, 3890, '\p{^Is_Nv=8.500}', "");
Expect(0, 3890, '\P{Is_Nv=8.500}', "");
Expect(1, 3890, '\P{^Is_Nv=8.500}', "");
Expect(0, 3889, '\p{Is_Nv=8.500}', "");
Expect(1, 3889, '\p{^Is_Nv=8.500}', "");
Expect(1, 3889, '\P{Is_Nv=8.500}', "");
Expect(0, 3889, '\P{^Is_Nv=8.500}', "");
Error('\p{Numeric_Value: 	00 00/a/00	00042}');
Error('\P{Numeric_Value: 	00 00/a/00	00042}');
Expect(1, 12983, '\p{Numeric_Value=4_2}', "");
Expect(0, 12983, '\p{^Numeric_Value=4_2}', "");
Expect(0, 12983, '\P{Numeric_Value=4_2}', "");
Expect(1, 12983, '\P{^Numeric_Value=4_2}', "");
Expect(0, 12982, '\p{Numeric_Value=4_2}', "");
Expect(1, 12982, '\p{^Numeric_Value=4_2}', "");
Expect(1, 12982, '\P{Numeric_Value=4_2}', "");
Expect(0, 12982, '\P{^Numeric_Value=4_2}', "");
Error('\p{Nv: /a/_ +0000000042}');
Error('\P{Nv: /a/_ +0000000042}');
Expect(1, 12983, '\p{Nv=+0000000042}', "");
Expect(0, 12983, '\p{^Nv=+0000000042}', "");
Expect(0, 12983, '\P{Nv=+0000000042}', "");
Expect(1, 12983, '\P{^Nv=+0000000042}', "");
Expect(0, 12982, '\p{Nv=+0000000042}', "");
Expect(1, 12982, '\p{^Nv=+0000000042}', "");
Expect(1, 12982, '\P{Nv=+0000000042}', "");
Expect(0, 12982, '\P{^Nv=+0000000042}', "");
Error('\p{Is_Numeric_Value=_:=000000042}');
Error('\P{Is_Numeric_Value=_:=000000042}');
Expect(1, 12983, '\p{Is_Numeric_Value=+0004_2}', "");
Expect(0, 12983, '\p{^Is_Numeric_Value=+0004_2}', "");
Expect(0, 12983, '\P{Is_Numeric_Value=+0004_2}', "");
Expect(1, 12983, '\P{^Is_Numeric_Value=+0004_2}', "");
Expect(0, 12982, '\p{Is_Numeric_Value=+0004_2}', "");
Expect(1, 12982, '\p{^Is_Numeric_Value=+0004_2}', "");
Expect(1, 12982, '\P{Is_Numeric_Value=+0004_2}', "");
Expect(0, 12982, '\P{^Is_Numeric_Value=+0004_2}', "");
Error('\p{Is_Nv=/a/ +000042}');
Error('\P{Is_Nv=/a/ +000042}');
Expect(1, 12983, '\p{Is_Nv=+00000004_2}', "");
Expect(0, 12983, '\p{^Is_Nv=+00000004_2}', "");
Expect(0, 12983, '\P{Is_Nv=+00000004_2}', "");
Expect(1, 12983, '\P{^Is_Nv=+00000004_2}', "");
Expect(0, 12982, '\p{Is_Nv=+00000004_2}', "");
Expect(1, 12982, '\p{^Is_Nv=+00000004_2}', "");
Expect(1, 12982, '\P{Is_Nv=+00000004_2}', "");
Expect(0, 12982, '\P{^Is_Nv=+00000004_2}', "");
Error('\p{Numeric_Value=--+0000022:=}');
Error('\P{Numeric_Value=--+0000022:=}');
Expect(1, 12882, '\p{Numeric_Value=002_2}', "");
Expect(0, 12882, '\p{^Numeric_Value=002_2}', "");
Expect(0, 12882, '\P{Numeric_Value=002_2}', "");
Expect(1, 12882, '\P{^Numeric_Value=002_2}', "");
Expect(0, 12881, '\p{Numeric_Value=002_2}', "");
Expect(1, 12881, '\p{^Numeric_Value=002_2}', "");
Expect(1, 12881, '\P{Numeric_Value=002_2}', "");
Expect(0, 12881, '\P{^Numeric_Value=002_2}', "");
Error('\p{Nv= 0	0/a/0	00	0022}');
Error('\P{Nv= 0	0/a/0	00	0022}');
Expect(1, 12882, '\p{Nv=+0_0_0_0_0022}', "");
Expect(0, 12882, '\p{^Nv=+0_0_0_0_0022}', "");
Expect(0, 12882, '\P{Nv=+0_0_0_0_0022}', "");
Expect(1, 12882, '\P{^Nv=+0_0_0_0_0022}', "");
Expect(0, 12881, '\p{Nv=+0_0_0_0_0022}', "");
Expect(1, 12881, '\p{^Nv=+0_0_0_0_0022}', "");
Expect(1, 12881, '\P{Nv=+0_0_0_0_0022}', "");
Expect(0, 12881, '\P{^Nv=+0_0_0_0_0022}', "");
Error('\p{Is_Numeric_Value=_	+0022/a/}');
Error('\P{Is_Numeric_Value=_	+0022/a/}');
Expect(1, 12882, '\p{Is_Numeric_Value=002_2}', "");
Expect(0, 12882, '\p{^Is_Numeric_Value=002_2}', "");
Expect(0, 12882, '\P{Is_Numeric_Value=002_2}', "");
Expect(1, 12882, '\P{^Is_Numeric_Value=002_2}', "");
Expect(0, 12881, '\p{Is_Numeric_Value=002_2}', "");
Expect(1, 12881, '\p{^Is_Numeric_Value=002_2}', "");
Expect(1, 12881, '\P{Is_Numeric_Value=002_2}', "");
Expect(0, 12881, '\P{^Is_Numeric_Value=002_2}', "");
Error('\p{Is_Nv=:=	-+000000022}');
Error('\P{Is_Nv=:=	-+000000022}');
Expect(1, 12882, '\p{Is_Nv=+002_2}', "");
Expect(0, 12882, '\p{^Is_Nv=+002_2}', "");
Expect(0, 12882, '\P{Is_Nv=+002_2}', "");
Expect(1, 12882, '\P{^Is_Nv=+002_2}', "");
Expect(0, 12881, '\p{Is_Nv=+002_2}', "");
Expect(1, 12881, '\p{^Is_Nv=+002_2}', "");
Expect(1, 12881, '\P{Is_Nv=+002_2}', "");
Expect(0, 12881, '\P{^Is_Nv=+002_2}', "");
Error('\p{Numeric_Value:   -/a/1/000000009}');
Error('\P{Numeric_Value:   -/a/1/000000009}');
Expect(1, 8529, '\p{Numeric_Value=1/0009}', "");
Expect(0, 8529, '\p{^Numeric_Value=1/0009}', "");
Expect(0, 8529, '\P{Numeric_Value=1/0009}', "");
Expect(1, 8529, '\P{^Numeric_Value=1/0009}', "");
Expect(0, 8528, '\p{Numeric_Value=1/0009}', "");
Expect(1, 8528, '\p{^Numeric_Value=1/0009}', "");
Expect(1, 8528, '\P{Numeric_Value=1/0009}', "");
Expect(0, 8528, '\P{^Numeric_Value=1/0009}', "");
Error('\p{Numeric_Value:   0.11}');
Error('\P{Numeric_Value:   0.11}');
Expect(1, 8529, '\p{Numeric_Value=0.111}', "");
Expect(0, 8529, '\p{^Numeric_Value=0.111}', "");
Expect(0, 8529, '\P{Numeric_Value=0.111}', "");
Expect(1, 8529, '\P{^Numeric_Value=0.111}', "");
Expect(0, 8528, '\p{Numeric_Value=0.111}', "");
Expect(1, 8528, '\p{^Numeric_Value=0.111}', "");
Expect(1, 8528, '\P{Numeric_Value=0.111}', "");
Expect(0, 8528, '\P{^Numeric_Value=0.111}', "");
Error('\p{Nv: /a/-1/0000009}');
Error('\P{Nv: /a/-1/0000009}');
Expect(1, 8529, '\p{Nv=+00001/00000009}', "");
Expect(0, 8529, '\p{^Nv=+00001/00000009}', "");
Expect(0, 8529, '\P{Nv=+00001/00000009}', "");
Expect(1, 8529, '\P{^Nv=+00001/00000009}', "");
Expect(0, 8528, '\p{Nv=+00001/00000009}', "");
Expect(1, 8528, '\p{^Nv=+00001/00000009}', "");
Expect(1, 8528, '\P{Nv=+00001/00000009}', "");
Expect(0, 8528, '\P{^Nv=+00001/00000009}', "");
Error('\p{Nv=0.11}');
Error('\P{Nv=0.11}');
Expect(1, 8529, '\p{Nv=0.111}', "");
Expect(0, 8529, '\p{^Nv=0.111}', "");
Expect(0, 8529, '\P{Nv=0.111}', "");
Expect(1, 8529, '\P{^Nv=0.111}', "");
Expect(0, 8528, '\p{Nv=0.111}', "");
Expect(1, 8528, '\p{^Nv=0.111}', "");
Expect(1, 8528, '\P{Nv=0.111}', "");
Expect(0, 8528, '\P{^Nv=0.111}', "");
Error('\p{Is_Numeric_Value=	/a/01/9}');
Error('\P{Is_Numeric_Value=	/a/01/9}');
Expect(1, 8529, '\p{Is_Numeric_Value=+0000000001/000009}', "");
Expect(0, 8529, '\p{^Is_Numeric_Value=+0000000001/000009}', "");
Expect(0, 8529, '\P{Is_Numeric_Value=+0000000001/000009}', "");
Expect(1, 8529, '\P{^Is_Numeric_Value=+0000000001/000009}', "");
Expect(0, 8528, '\p{Is_Numeric_Value=+0000000001/000009}', "");
Expect(1, 8528, '\p{^Is_Numeric_Value=+0000000001/000009}', "");
Expect(1, 8528, '\P{Is_Numeric_Value=+0000000001/000009}', "");
Expect(0, 8528, '\P{^Is_Numeric_Value=+0000000001/000009}', "");
Error('\p{Is_Numeric_Value=0.11}');
Error('\P{Is_Numeric_Value=0.11}');
Expect(1, 8529, '\p{Is_Numeric_Value=0.111}', "");
Expect(0, 8529, '\p{^Is_Numeric_Value=0.111}', "");
Expect(0, 8529, '\P{Is_Numeric_Value=0.111}', "");
Expect(1, 8529, '\P{^Is_Numeric_Value=0.111}', "");
Expect(0, 8528, '\p{Is_Numeric_Value=0.111}', "");
Expect(1, 8528, '\p{^Is_Numeric_Value=0.111}', "");
Expect(1, 8528, '\P{Is_Numeric_Value=0.111}', "");
Expect(0, 8528, '\P{^Is_Numeric_Value=0.111}', "");
Error('\p{Is_Nv=_ 01/00000009:=}');
Error('\P{Is_Nv=_ 01/00000009:=}');
Expect(1, 8529, '\p{Is_Nv=000000001/00000009}', "");
Expect(0, 8529, '\p{^Is_Nv=000000001/00000009}', "");
Expect(0, 8529, '\P{Is_Nv=000000001/00000009}', "");
Expect(1, 8529, '\P{^Is_Nv=000000001/00000009}', "");
Expect(0, 8528, '\p{Is_Nv=000000001/00000009}', "");
Expect(1, 8528, '\p{^Is_Nv=000000001/00000009}', "");
Expect(1, 8528, '\P{Is_Nv=000000001/00000009}', "");
Expect(0, 8528, '\P{^Is_Nv=000000001/00000009}', "");
Error('\p{Is_Nv=0.11}');
Error('\P{Is_Nv=0.11}');
Expect(1, 8529, '\p{Is_Nv=0.111}', "");
Expect(0, 8529, '\p{^Is_Nv=0.111}', "");
Expect(0, 8529, '\P{Is_Nv=0.111}', "");
Expect(1, 8529, '\P{^Is_Nv=0.111}', "");
Expect(0, 8528, '\p{Is_Nv=0.111}', "");
Expect(1, 8528, '\p{^Is_Nv=0.111}', "");
Expect(1, 8528, '\P{Is_Nv=0.111}', "");
Expect(0, 8528, '\P{^Is_Nv=0.111}', "");
Error('\p{Numeric_Value=:=	_000000900}');
Error('\P{Numeric_Value=:=	_000000900}');
Expect(1, 65825, '\p{Numeric_Value: +0_0_0_900}', "");
Expect(0, 65825, '\p{^Numeric_Value: +0_0_0_900}', "");
Expect(0, 65825, '\P{Numeric_Value: +0_0_0_900}', "");
Expect(1, 65825, '\P{^Numeric_Value: +0_0_0_900}', "");
Expect(0, 65824, '\p{Numeric_Value: +0_0_0_900}', "");
Expect(1, 65824, '\p{^Numeric_Value: +0_0_0_900}', "");
Expect(1, 65824, '\P{Numeric_Value: +0_0_0_900}', "");
Expect(0, 65824, '\P{^Numeric_Value: +0_0_0_900}', "");
Error('\p{Nv=:=0 0	0-0_0900}');
Error('\P{Nv=:=0 0	0-0_0900}');
Expect(1, 65825, '\p{Nv=0900}', "");
Expect(0, 65825, '\p{^Nv=0900}', "");
Expect(0, 65825, '\P{Nv=0900}', "");
Expect(1, 65825, '\P{^Nv=0900}', "");
Expect(0, 65824, '\p{Nv=0900}', "");
Expect(1, 65824, '\p{^Nv=0900}', "");
Expect(1, 65824, '\P{Nv=0900}', "");
Expect(0, 65824, '\P{^Nv=0900}', "");
Error('\p{Is_Numeric_Value:-0_0 00:=00_0900}');
Error('\P{Is_Numeric_Value:-0_0 00:=00_0900}');
Expect(1, 65825, '\p{Is_Numeric_Value: +900}', "");
Expect(0, 65825, '\p{^Is_Numeric_Value: +900}', "");
Expect(0, 65825, '\P{Is_Numeric_Value: +900}', "");
Expect(1, 65825, '\P{^Is_Numeric_Value: +900}', "");
Expect(0, 65824, '\p{Is_Numeric_Value: +900}', "");
Expect(1, 65824, '\p{^Is_Numeric_Value: +900}', "");
Expect(1, 65824, '\P{Is_Numeric_Value: +900}', "");
Expect(0, 65824, '\P{^Is_Numeric_Value: +900}', "");
Error('\p{Is_Nv= /a/900}');
Error('\P{Is_Nv= /a/900}');
Expect(1, 65825, '\p{Is_Nv=0090_0}', "");
Expect(0, 65825, '\p{^Is_Nv=0090_0}', "");
Expect(0, 65825, '\P{Is_Nv=0090_0}', "");
Expect(1, 65825, '\P{^Is_Nv=0090_0}', "");
Expect(0, 65824, '\p{Is_Nv=0090_0}', "");
Expect(1, 65824, '\p{^Is_Nv=0090_0}', "");
Expect(1, 65824, '\P{Is_Nv=0090_0}', "");
Expect(0, 65824, '\P{^Is_Nv=0090_0}', "");
Error('\p{Numeric_Value=	:=+0000002/000000005}');
Error('\P{Numeric_Value=	:=+0000002/000000005}');
Expect(1, 8534, '\p{Numeric_Value=+00002/000000005}', "");
Expect(0, 8534, '\p{^Numeric_Value=+00002/000000005}', "");
Expect(0, 8534, '\P{Numeric_Value=+00002/000000005}', "");
Expect(1, 8534, '\P{^Numeric_Value=+00002/000000005}', "");
Expect(0, 8533, '\p{Numeric_Value=+00002/000000005}', "");
Expect(1, 8533, '\p{^Numeric_Value=+00002/000000005}', "");
Expect(1, 8533, '\P{Numeric_Value=+00002/000000005}', "");
Expect(0, 8533, '\P{^Numeric_Value=+00002/000000005}', "");
Expect(1, 8534, '\p{Numeric_Value=0.400}', "");
Expect(0, 8534, '\p{^Numeric_Value=0.400}', "");
Expect(0, 8534, '\P{Numeric_Value=0.400}', "");
Expect(1, 8534, '\P{^Numeric_Value=0.400}', "");
Expect(0, 8533, '\p{Numeric_Value=0.400}', "");
Expect(1, 8533, '\p{^Numeric_Value=0.400}', "");
Expect(1, 8533, '\P{Numeric_Value=0.400}', "");
Expect(0, 8533, '\P{^Numeric_Value=0.400}', "");
Error('\p{Nv=:= _00002/0000005}');
Error('\P{Nv=:= _00002/0000005}');
Expect(1, 8534, '\p{Nv: 000002/0000000005}', "");
Expect(0, 8534, '\p{^Nv: 000002/0000000005}', "");
Expect(0, 8534, '\P{Nv: 000002/0000000005}', "");
Expect(1, 8534, '\P{^Nv: 000002/0000000005}', "");
Expect(0, 8533, '\p{Nv: 000002/0000000005}', "");
Expect(1, 8533, '\p{^Nv: 000002/0000000005}', "");
Expect(1, 8533, '\P{Nv: 000002/0000000005}', "");
Expect(0, 8533, '\P{^Nv: 000002/0000000005}', "");
Expect(1, 8534, '\p{Nv=0.400}', "");
Expect(0, 8534, '\p{^Nv=0.400}', "");
Expect(0, 8534, '\P{Nv=0.400}', "");
Expect(1, 8534, '\P{^Nv=0.400}', "");
Expect(0, 8533, '\p{Nv=0.400}', "");
Expect(1, 8533, '\p{^Nv=0.400}', "");
Expect(1, 8533, '\P{Nv=0.400}', "");
Expect(0, 8533, '\P{^Nv=0.400}', "");
Error('\p{Is_Numeric_Value= :=+2/0000000005}');
Error('\P{Is_Numeric_Value= :=+2/0000000005}');
Expect(1, 8534, '\p{Is_Numeric_Value=000002/5}', "");
Expect(0, 8534, '\p{^Is_Numeric_Value=000002/5}', "");
Expect(0, 8534, '\P{Is_Numeric_Value=000002/5}', "");
Expect(1, 8534, '\P{^Is_Numeric_Value=000002/5}', "");
Expect(0, 8533, '\p{Is_Numeric_Value=000002/5}', "");
Expect(1, 8533, '\p{^Is_Numeric_Value=000002/5}', "");
Expect(1, 8533, '\P{Is_Numeric_Value=000002/5}', "");
Expect(0, 8533, '\P{^Is_Numeric_Value=000002/5}', "");
Expect(1, 8534, '\p{Is_Numeric_Value=0.400}', "");
Expect(0, 8534, '\p{^Is_Numeric_Value=0.400}', "");
Expect(0, 8534, '\P{Is_Numeric_Value=0.400}', "");
Expect(1, 8534, '\P{^Is_Numeric_Value=0.400}', "");
Expect(0, 8533, '\p{Is_Numeric_Value=0.400}', "");
Expect(1, 8533, '\p{^Is_Numeric_Value=0.400}', "");
Expect(1, 8533, '\P{Is_Numeric_Value=0.400}', "");
Expect(0, 8533, '\P{^Is_Numeric_Value=0.400}', "");
Error('\p{Is_Nv=_-+2/0000005:=}');
Error('\P{Is_Nv=_-+2/0000005:=}');
Expect(1, 8534, '\p{Is_Nv=0000000002/00000005}', "");
Expect(0, 8534, '\p{^Is_Nv=0000000002/00000005}', "");
Expect(0, 8534, '\P{Is_Nv=0000000002/00000005}', "");
Expect(1, 8534, '\P{^Is_Nv=0000000002/00000005}', "");
Expect(0, 8533, '\p{Is_Nv=0000000002/00000005}', "");
Expect(1, 8533, '\p{^Is_Nv=0000000002/00000005}', "");
Expect(1, 8533, '\P{Is_Nv=0000000002/00000005}', "");
Expect(0, 8533, '\P{^Is_Nv=0000000002/00000005}', "");
Expect(1, 8534, '\p{Is_Nv=0.400}', "");
Expect(0, 8534, '\p{^Is_Nv=0.400}', "");
Expect(0, 8534, '\P{Is_Nv=0.400}', "");
Expect(1, 8534, '\P{^Is_Nv=0.400}', "");
Expect(0, 8533, '\p{Is_Nv=0.400}', "");
Expect(1, 8533, '\p{^Is_Nv=0.400}', "");
Expect(1, 8533, '\P{Is_Nv=0.400}', "");
Expect(0, 8533, '\P{^Is_Nv=0.400}', "");
Error('\p{Numeric_Value=/a/00000046}');
Error('\P{Numeric_Value=/a/00000046}');
Expect(1, 12987, '\p{Numeric_Value=+00046}', "");
Expect(0, 12987, '\p{^Numeric_Value=+00046}', "");
Expect(0, 12987, '\P{Numeric_Value=+00046}', "");
Expect(1, 12987, '\P{^Numeric_Value=+00046}', "");
Expect(0, 12986, '\p{Numeric_Value=+00046}', "");
Expect(1, 12986, '\p{^Numeric_Value=+00046}', "");
Expect(1, 12986, '\P{Numeric_Value=+00046}', "");
Expect(0, 12986, '\P{^Numeric_Value=+00046}', "");
Error('\p{Nv=	/a/00000000046}');
Error('\P{Nv=	/a/00000000046}');
Expect(1, 12987, '\p{Nv:	+00_00_00_00_046}', "");
Expect(0, 12987, '\p{^Nv:	+00_00_00_00_046}', "");
Expect(0, 12987, '\P{Nv:	+00_00_00_00_046}', "");
Expect(1, 12987, '\P{^Nv:	+00_00_00_00_046}', "");
Expect(0, 12986, '\p{Nv:	+00_00_00_00_046}', "");
Expect(1, 12986, '\p{^Nv:	+00_00_00_00_046}', "");
Expect(1, 12986, '\P{Nv:	+00_00_00_00_046}', "");
Expect(0, 12986, '\P{^Nv:	+00_00_00_00_046}', "");
Error('\p{Is_Numeric_Value=	 46:=}');
Error('\P{Is_Numeric_Value=	 46:=}');
Expect(1, 12987, '\p{Is_Numeric_Value=00004_6}', "");
Expect(0, 12987, '\p{^Is_Numeric_Value=00004_6}', "");
Expect(0, 12987, '\P{Is_Numeric_Value=00004_6}', "");
Expect(1, 12987, '\P{^Is_Numeric_Value=00004_6}', "");
Expect(0, 12986, '\p{Is_Numeric_Value=00004_6}', "");
Expect(1, 12986, '\p{^Is_Numeric_Value=00004_6}', "");
Expect(1, 12986, '\P{Is_Numeric_Value=00004_6}', "");
Expect(0, 12986, '\P{^Is_Numeric_Value=00004_6}', "");
Error('\p{Is_Nv=/a/	000046}');
Error('\P{Is_Nv=/a/	000046}');
Expect(1, 12987, '\p{Is_Nv=000000046}', "");
Expect(0, 12987, '\p{^Is_Nv=000000046}', "");
Expect(0, 12987, '\P{Is_Nv=000000046}', "");
Expect(1, 12987, '\P{^Is_Nv=000000046}', "");
Expect(0, 12986, '\p{Is_Nv=000000046}', "");
Expect(1, 12986, '\p{^Is_Nv=000000046}', "");
Expect(1, 12986, '\P{Is_Nv=000000046}', "");
Expect(0, 12986, '\P{^Is_Nv=000000046}', "");
Error('\p{Numeric_Value=_+0/a/}');
Error('\P{Numeric_Value=_+0/a/}');
Expect(1, 48, '\p{Numeric_Value=0000000000}', "");
Expect(0, 48, '\p{^Numeric_Value=0000000000}', "");
Expect(0, 48, '\P{Numeric_Value=0000000000}', "");
Expect(1, 48, '\P{^Numeric_Value=0000000000}', "");
Expect(0, 47, '\p{Numeric_Value=0000000000}', "");
Expect(1, 47, '\p{^Numeric_Value=0000000000}', "");
Expect(1, 47, '\P{Numeric_Value=0000000000}', "");
Expect(0, 47, '\P{^Numeric_Value=0000000000}', "");
Error('\p{Nv=00000000:=}');
Error('\P{Nv=00000000:=}');
Expect(1, 48, '\p{Nv=0_0_0_0_0_0_0_00}', "");
Expect(0, 48, '\p{^Nv=0_0_0_0_0_0_0_00}', "");
Expect(0, 48, '\P{Nv=0_0_0_0_0_0_0_00}', "");
Expect(1, 48, '\P{^Nv=0_0_0_0_0_0_0_00}', "");
Expect(0, 47, '\p{Nv=0_0_0_0_0_0_0_00}', "");
Expect(1, 47, '\p{^Nv=0_0_0_0_0_0_0_00}', "");
Expect(1, 47, '\P{Nv=0_0_0_0_0_0_0_00}', "");
Expect(0, 47, '\P{^Nv=0_0_0_0_0_0_0_00}', "");
Error('\p{Is_Numeric_Value: /a/+00-00}');
Error('\P{Is_Numeric_Value: /a/+00-00}');
Expect(1, 48, '\p{Is_Numeric_Value=0000_0}', "");
Expect(0, 48, '\p{^Is_Numeric_Value=0000_0}', "");
Expect(0, 48, '\P{Is_Numeric_Value=0000_0}', "");
Expect(1, 48, '\P{^Is_Numeric_Value=0000_0}', "");
Expect(0, 47, '\p{Is_Numeric_Value=0000_0}', "");
Expect(1, 47, '\p{^Is_Numeric_Value=0000_0}', "");
Expect(1, 47, '\P{Is_Numeric_Value=0000_0}', "");
Expect(0, 47, '\P{^Is_Numeric_Value=0000_0}', "");
Error('\p{Is_Nv= _+00/a/}');
Error('\P{Is_Nv= _+00/a/}');
Expect(1, 48, '\p{Is_Nv=000000}', "");
Expect(0, 48, '\p{^Is_Nv=000000}', "");
Expect(0, 48, '\P{Is_Nv=000000}', "");
Expect(1, 48, '\P{^Is_Nv=000000}', "");
Expect(0, 47, '\p{Is_Nv=000000}', "");
Expect(1, 47, '\p{^Is_Nv=000000}', "");
Expect(1, 47, '\P{Is_Nv=000000}', "");
Expect(0, 47, '\P{^Is_Nv=000000}', "");
Error('\p{Numeric_Value=-:=000000023}');
Error('\P{Numeric_Value=-:=000000023}');
Expect(1, 12883, '\p{Numeric_Value=00000023}', "");
Expect(0, 12883, '\p{^Numeric_Value=00000023}', "");
Expect(0, 12883, '\P{Numeric_Value=00000023}', "");
Expect(1, 12883, '\P{^Numeric_Value=00000023}', "");
Expect(0, 12882, '\p{Numeric_Value=00000023}', "");
Expect(1, 12882, '\p{^Numeric_Value=00000023}', "");
Expect(1, 12882, '\P{Numeric_Value=00000023}', "");
Expect(0, 12882, '\P{^Numeric_Value=00000023}', "");
Error('\p{Nv=	_0000023:=}');
Error('\P{Nv=	_0000023:=}');
Expect(1, 12883, '\p{Nv=0002_3}', "");
Expect(0, 12883, '\p{^Nv=0002_3}', "");
Expect(0, 12883, '\P{Nv=0002_3}', "");
Expect(1, 12883, '\P{^Nv=0002_3}', "");
Expect(0, 12882, '\p{Nv=0002_3}', "");
Expect(1, 12882, '\p{^Nv=0002_3}', "");
Expect(1, 12882, '\P{Nv=0002_3}', "");
Expect(0, 12882, '\P{^Nv=0002_3}', "");
Error('\p{Is_Numeric_Value: - 02_3:=}');
Error('\P{Is_Numeric_Value: - 02_3:=}');
Expect(1, 12883, '\p{Is_Numeric_Value=000023}', "");
Expect(0, 12883, '\p{^Is_Numeric_Value=000023}', "");
Expect(0, 12883, '\P{Is_Numeric_Value=000023}', "");
Expect(1, 12883, '\P{^Is_Numeric_Value=000023}', "");
Expect(0, 12882, '\p{Is_Numeric_Value=000023}', "");
Expect(1, 12882, '\p{^Is_Numeric_Value=000023}', "");
Expect(1, 12882, '\P{Is_Numeric_Value=000023}', "");
Expect(0, 12882, '\P{^Is_Numeric_Value=000023}', "");
Error('\p{Is_Nv=:=+0023}');
Error('\P{Is_Nv=:=+0023}');
Expect(1, 12883, '\p{Is_Nv=2_3}', "");
Expect(0, 12883, '\p{^Is_Nv=2_3}', "");
Expect(0, 12883, '\P{Is_Nv=2_3}', "");
Expect(1, 12883, '\P{^Is_Nv=2_3}', "");
Expect(0, 12882, '\p{Is_Nv=2_3}', "");
Expect(1, 12882, '\p{^Is_Nv=2_3}', "");
Expect(1, 12882, '\P{Is_Nv=2_3}', "");
Expect(0, 12882, '\P{^Is_Nv=2_3}', "");
Error('\p{Numeric_Value=--0001/0007:=}');
Error('\P{Numeric_Value=--0001/0007:=}');
Expect(1, 8528, '\p{Numeric_Value=0000000001/000000007}', "");
Expect(0, 8528, '\p{^Numeric_Value=0000000001/000000007}', "");
Expect(0, 8528, '\P{Numeric_Value=0000000001/000000007}', "");
Expect(1, 8528, '\P{^Numeric_Value=0000000001/000000007}', "");
Expect(0, 8527, '\p{Numeric_Value=0000000001/000000007}', "");
Expect(1, 8527, '\p{^Numeric_Value=0000000001/000000007}', "");
Expect(1, 8527, '\P{Numeric_Value=0000000001/000000007}', "");
Expect(0, 8527, '\P{^Numeric_Value=0000000001/000000007}', "");
Error('\p{Numeric_Value=0.14}');
Error('\P{Numeric_Value=0.14}');
Expect(1, 8528, '\p{Numeric_Value=0.143}', "");
Expect(0, 8528, '\p{^Numeric_Value=0.143}', "");
Expect(0, 8528, '\P{Numeric_Value=0.143}', "");
Expect(1, 8528, '\P{^Numeric_Value=0.143}', "");
Expect(0, 8527, '\p{Numeric_Value=0.143}', "");
Expect(1, 8527, '\p{^Numeric_Value=0.143}', "");
Expect(1, 8527, '\P{Numeric_Value=0.143}', "");
Expect(0, 8527, '\P{^Numeric_Value=0.143}', "");
Error('\p{Nv= :=0000000001/0000000007}');
Error('\P{Nv= :=0000000001/0000000007}');
Expect(1, 8528, '\p{Nv=+000001/00000007}', "");
Expect(0, 8528, '\p{^Nv=+000001/00000007}', "");
Expect(0, 8528, '\P{Nv=+000001/00000007}', "");
Expect(1, 8528, '\P{^Nv=+000001/00000007}', "");
Expect(0, 8527, '\p{Nv=+000001/00000007}', "");
Expect(1, 8527, '\p{^Nv=+000001/00000007}', "");
Expect(1, 8527, '\P{Nv=+000001/00000007}', "");
Expect(0, 8527, '\P{^Nv=+000001/00000007}', "");
Error('\p{Nv=0.14}');
Error('\P{Nv=0.14}');
Expect(1, 8528, '\p{Nv=0.143}', "");
Expect(0, 8528, '\p{^Nv=0.143}', "");
Expect(0, 8528, '\P{Nv=0.143}', "");
Expect(1, 8528, '\P{^Nv=0.143}', "");
Expect(0, 8527, '\p{Nv=0.143}', "");
Expect(1, 8527, '\p{^Nv=0.143}', "");
Expect(1, 8527, '\P{Nv=0.143}', "");
Expect(0, 8527, '\P{^Nv=0.143}', "");
Error('\p{Is_Numeric_Value=:=--+001/000007}');
Error('\P{Is_Numeric_Value=:=--+001/000007}');
Expect(1, 8528, '\p{Is_Numeric_Value=00001/0007}', "");
Expect(0, 8528, '\p{^Is_Numeric_Value=00001/0007}', "");
Expect(0, 8528, '\P{Is_Numeric_Value=00001/0007}', "");
Expect(1, 8528, '\P{^Is_Numeric_Value=00001/0007}', "");
Expect(0, 8527, '\p{Is_Numeric_Value=00001/0007}', "");
Expect(1, 8527, '\p{^Is_Numeric_Value=00001/0007}', "");
Expect(1, 8527, '\P{Is_Numeric_Value=00001/0007}', "");
Expect(0, 8527, '\P{^Is_Numeric_Value=00001/0007}', "");
Error('\p{Is_Numeric_Value=0.14}');
Error('\P{Is_Numeric_Value=0.14}');
Expect(1, 8528, '\p{Is_Numeric_Value=0.143}', "");
Expect(0, 8528, '\p{^Is_Numeric_Value=0.143}', "");
Expect(0, 8528, '\P{Is_Numeric_Value=0.143}', "");
Expect(1, 8528, '\P{^Is_Numeric_Value=0.143}', "");
Expect(0, 8527, '\p{Is_Numeric_Value=0.143}', "");
Expect(1, 8527, '\p{^Is_Numeric_Value=0.143}', "");
Expect(1, 8527, '\P{Is_Numeric_Value=0.143}', "");
Expect(0, 8527, '\P{^Is_Numeric_Value=0.143}', "");
Error('\p{Is_Nv:   :=_ 000000001/0007}');
Error('\P{Is_Nv:   :=_ 000000001/0007}');
Expect(1, 8528, '\p{Is_Nv=000001/000000007}', "");
Expect(0, 8528, '\p{^Is_Nv=000001/000000007}', "");
Expect(0, 8528, '\P{Is_Nv=000001/000000007}', "");
Expect(1, 8528, '\P{^Is_Nv=000001/000000007}', "");
Expect(0, 8527, '\p{Is_Nv=000001/000000007}', "");
Expect(1, 8527, '\p{^Is_Nv=000001/000000007}', "");
Expect(1, 8527, '\P{Is_Nv=000001/000000007}', "");
Expect(0, 8527, '\P{^Is_Nv=000001/000000007}', "");
Error('\p{Is_Nv=0.14}');
Error('\P{Is_Nv=0.14}');
Expect(1, 8528, '\p{Is_Nv=0.143}', "");
Expect(0, 8528, '\p{^Is_Nv=0.143}', "");
Expect(0, 8528, '\P{Is_Nv=0.143}', "");
Expect(1, 8528, '\P{^Is_Nv=0.143}', "");
Expect(0, 8527, '\p{Is_Nv=0.143}', "");
Expect(1, 8527, '\p{^Is_Nv=0.143}', "");
Expect(1, 8527, '\P{Is_Nv=0.143}', "");
Expect(0, 8527, '\P{^Is_Nv=0.143}', "");
Error('\p{Numeric_Value=_:=4/0000005}');
Error('\P{Numeric_Value=_:=4/0000005}');
Expect(1, 8536, '\p{Numeric_Value=+00004/0000000005}', "");
Expect(0, 8536, '\p{^Numeric_Value=+00004/0000000005}', "");
Expect(0, 8536, '\P{Numeric_Value=+00004/0000000005}', "");
Expect(1, 8536, '\P{^Numeric_Value=+00004/0000000005}', "");
Expect(0, 8535, '\p{Numeric_Value=+00004/0000000005}', "");
Expect(1, 8535, '\p{^Numeric_Value=+00004/0000000005}', "");
Expect(1, 8535, '\P{Numeric_Value=+00004/0000000005}', "");
Expect(0, 8535, '\P{^Numeric_Value=+00004/0000000005}', "");
Expect(1, 8536, '\p{Numeric_Value=0.800}', "");
Expect(0, 8536, '\p{^Numeric_Value=0.800}', "");
Expect(0, 8536, '\P{Numeric_Value=0.800}', "");
Expect(1, 8536, '\P{^Numeric_Value=0.800}', "");
Expect(0, 8535, '\p{Numeric_Value=0.800}', "");
Expect(1, 8535, '\p{^Numeric_Value=0.800}', "");
Expect(1, 8535, '\P{Numeric_Value=0.800}', "");
Expect(0, 8535, '\P{^Numeric_Value=0.800}', "");
Error('\p{Nv=/a/- 0000000004/000000005}');
Error('\P{Nv=/a/- 0000000004/000000005}');
Expect(1, 8536, '\p{Nv=000004/000000005}', "");
Expect(0, 8536, '\p{^Nv=000004/000000005}', "");
Expect(0, 8536, '\P{Nv=000004/000000005}', "");
Expect(1, 8536, '\P{^Nv=000004/000000005}', "");
Expect(0, 8535, '\p{Nv=000004/000000005}', "");
Expect(1, 8535, '\p{^Nv=000004/000000005}', "");
Expect(1, 8535, '\P{Nv=000004/000000005}', "");
Expect(0, 8535, '\P{^Nv=000004/000000005}', "");
Expect(1, 8536, '\p{Nv=0.800}', "");
Expect(0, 8536, '\p{^Nv=0.800}', "");
Expect(0, 8536, '\P{Nv=0.800}', "");
Expect(1, 8536, '\P{^Nv=0.800}', "");
Expect(0, 8535, '\p{Nv=0.800}', "");
Expect(1, 8535, '\p{^Nv=0.800}', "");
Expect(1, 8535, '\P{Nv=0.800}', "");
Expect(0, 8535, '\P{^Nv=0.800}', "");
Error('\p{Is_Numeric_Value=/a/-_+0004/0000000005}');
Error('\P{Is_Numeric_Value=/a/-_+0004/0000000005}');
Expect(1, 8536, '\p{Is_Numeric_Value=+04/5}', "");
Expect(0, 8536, '\p{^Is_Numeric_Value=+04/5}', "");
Expect(0, 8536, '\P{Is_Numeric_Value=+04/5}', "");
Expect(1, 8536, '\P{^Is_Numeric_Value=+04/5}', "");
Expect(0, 8535, '\p{Is_Numeric_Value=+04/5}', "");
Expect(1, 8535, '\p{^Is_Numeric_Value=+04/5}', "");
Expect(1, 8535, '\P{Is_Numeric_Value=+04/5}', "");
Expect(0, 8535, '\P{^Is_Numeric_Value=+04/5}', "");
Expect(1, 8536, '\p{Is_Numeric_Value=0.800}', "");
Expect(0, 8536, '\p{^Is_Numeric_Value=0.800}', "");
Expect(0, 8536, '\P{Is_Numeric_Value=0.800}', "");
Expect(1, 8536, '\P{^Is_Numeric_Value=0.800}', "");
Expect(0, 8535, '\p{Is_Numeric_Value=0.800}', "");
Expect(1, 8535, '\p{^Is_Numeric_Value=0.800}', "");
Expect(1, 8535, '\P{Is_Numeric_Value=0.800}', "");
Expect(0, 8535, '\P{^Is_Numeric_Value=0.800}', "");
Error('\p{Is_Nv=	:=+04/05}');
Error('\P{Is_Nv=	:=+04/05}');
Expect(1, 8536, '\p{Is_Nv=00004/0000005}', "");
Expect(0, 8536, '\p{^Is_Nv=00004/0000005}', "");
Expect(0, 8536, '\P{Is_Nv=00004/0000005}', "");
Expect(1, 8536, '\P{^Is_Nv=00004/0000005}', "");
Expect(0, 8535, '\p{Is_Nv=00004/0000005}', "");
Expect(1, 8535, '\p{^Is_Nv=00004/0000005}', "");
Expect(1, 8535, '\P{Is_Nv=00004/0000005}', "");
Expect(0, 8535, '\P{^Is_Nv=00004/0000005}', "");
Expect(1, 8536, '\p{Is_Nv=0.800}', "");
Expect(0, 8536, '\p{^Is_Nv=0.800}', "");
Expect(0, 8536, '\P{Is_Nv=0.800}', "");
Expect(1, 8536, '\P{^Is_Nv=0.800}', "");
Expect(0, 8535, '\p{Is_Nv=0.800}', "");
Expect(1, 8535, '\p{^Is_Nv=0.800}', "");
Expect(1, 8535, '\P{Is_Nv=0.800}', "");
Expect(0, 8535, '\P{^Is_Nv=0.800}', "");
Error('\p{Numeric_Value=/a/ _0000013}');
Error('\P{Numeric_Value=/a/ _0000013}');
Expect(1, 9324, '\p{Numeric_Value=1_3}', "");
Expect(0, 9324, '\p{^Numeric_Value=1_3}', "");
Expect(0, 9324, '\P{Numeric_Value=1_3}', "");
Expect(1, 9324, '\P{^Numeric_Value=1_3}', "");
Expect(0, 9323, '\p{Numeric_Value=1_3}', "");
Expect(1, 9323, '\p{^Numeric_Value=1_3}', "");
Expect(1, 9323, '\P{Numeric_Value=1_3}', "");
Expect(0, 9323, '\P{^Numeric_Value=1_3}', "");
Error('\p{Nv=:=		+000013}');
Error('\P{Nv=:=		+000013}');
Expect(1, 9324, '\p{Nv=01_3}', "");
Expect(0, 9324, '\p{^Nv=01_3}', "");
Expect(0, 9324, '\P{Nv=01_3}', "");
Expect(1, 9324, '\P{^Nv=01_3}', "");
Expect(0, 9323, '\p{Nv=01_3}', "");
Expect(1, 9323, '\p{^Nv=01_3}', "");
Expect(1, 9323, '\P{Nv=01_3}', "");
Expect(0, 9323, '\P{^Nv=01_3}', "");
Error('\p{Is_Numeric_Value=-	+01_3/a/}');
Error('\P{Is_Numeric_Value=-	+01_3/a/}');
Expect(1, 9324, '\p{Is_Numeric_Value=013}', "");
Expect(0, 9324, '\p{^Is_Numeric_Value=013}', "");
Expect(0, 9324, '\P{Is_Numeric_Value=013}', "");
Expect(1, 9324, '\P{^Is_Numeric_Value=013}', "");
Expect(0, 9323, '\p{Is_Numeric_Value=013}', "");
Expect(1, 9323, '\p{^Is_Numeric_Value=013}', "");
Expect(1, 9323, '\P{Is_Numeric_Value=013}', "");
Expect(0, 9323, '\P{^Is_Numeric_Value=013}', "");
Error('\p{Is_Nv=-:=01 3}');
Error('\P{Is_Nv=-:=01 3}');
Expect(1, 9324, '\p{Is_Nv=00000013}', "");
Expect(0, 9324, '\p{^Is_Nv=00000013}', "");
Expect(0, 9324, '\P{Is_Nv=00000013}', "");
Expect(1, 9324, '\P{^Is_Nv=00000013}', "");
Expect(0, 9323, '\p{Is_Nv=00000013}', "");
Expect(1, 9323, '\p{^Is_Nv=00000013}', "");
Expect(1, 9323, '\P{Is_Nv=00000013}', "");
Expect(0, 9323, '\P{^Is_Nv=00000013}', "");
Error('\p{Numeric_Value=_/a/0	0 06}');
Error('\P{Numeric_Value=_/a/0	0 06}');
Expect(1, 54, '\p{Numeric_Value=0006}', "");
Expect(0, 54, '\p{^Numeric_Value=0006}', "");
Expect(0, 54, '\P{Numeric_Value=0006}', "");
Expect(1, 54, '\P{^Numeric_Value=0006}', "");
Expect(0, 53, '\p{Numeric_Value=0006}', "");
Expect(1, 53, '\p{^Numeric_Value=0006}', "");
Expect(1, 53, '\P{Numeric_Value=0006}', "");
Expect(0, 53, '\P{^Numeric_Value=0006}', "");
Error('\p{Nv= :=6}');
Error('\P{Nv= :=6}');
Expect(1, 54, '\p{Nv=6}', "");
Expect(0, 54, '\p{^Nv=6}', "");
Expect(0, 54, '\P{Nv=6}', "");
Expect(1, 54, '\P{^Nv=6}', "");
Expect(0, 53, '\p{Nv=6}', "");
Expect(1, 53, '\p{^Nv=6}', "");
Expect(1, 53, '\P{Nv=6}', "");
Expect(0, 53, '\P{^Nv=6}', "");
Error('\p{Is_Numeric_Value= 	6:=}');
Error('\P{Is_Numeric_Value= 	6:=}');
Expect(1, 54, '\p{Is_Numeric_Value=+0_0_0_06}', "");
Expect(0, 54, '\p{^Is_Numeric_Value=+0_0_0_06}', "");
Expect(0, 54, '\P{Is_Numeric_Value=+0_0_0_06}', "");
Expect(1, 54, '\P{^Is_Numeric_Value=+0_0_0_06}', "");
Expect(0, 53, '\p{Is_Numeric_Value=+0_0_0_06}', "");
Expect(1, 53, '\p{^Is_Numeric_Value=+0_0_0_06}', "");
Expect(1, 53, '\P{Is_Numeric_Value=+0_0_0_06}', "");
Expect(0, 53, '\P{^Is_Numeric_Value=+0_0_0_06}', "");
Error('\p{Is_Nv=-	00006/a/}');
Error('\P{Is_Nv=-	00006/a/}');
Expect(1, 54, '\p{Is_Nv=0_6}', "");
Expect(0, 54, '\p{^Is_Nv=0_6}', "");
Expect(0, 54, '\P{Is_Nv=0_6}', "");
Expect(1, 54, '\P{^Is_Nv=0_6}', "");
Expect(0, 53, '\p{Is_Nv=0_6}', "");
Expect(1, 53, '\p{^Is_Nv=0_6}', "");
Expect(1, 53, '\P{Is_Nv=0_6}', "");
Expect(0, 53, '\P{^Is_Nv=0_6}', "");
Error('\p{Numeric_Value=	 0:=0-0_07_0000}');
Error('\P{Numeric_Value=	 0:=0-0_07_0000}');
Expect(1, 65841, '\p{Numeric_Value=00000000070000}', "");
Expect(0, 65841, '\p{^Numeric_Value=00000000070000}', "");
Expect(0, 65841, '\P{Numeric_Value=00000000070000}', "");
Expect(1, 65841, '\P{^Numeric_Value=00000000070000}', "");
Expect(0, 65840, '\p{Numeric_Value=00000000070000}', "");
Expect(1, 65840, '\p{^Numeric_Value=00000000070000}', "");
Expect(1, 65840, '\P{Numeric_Value=00000000070000}', "");
Expect(0, 65840, '\P{^Numeric_Value=00000000070000}', "");
Error('\p{Nv:_/a/007000-0}');
Error('\P{Nv:_/a/007000-0}');
Expect(1, 65841, '\p{Nv=+00000070000}', "");
Expect(0, 65841, '\p{^Nv=+00000070000}', "");
Expect(0, 65841, '\P{Nv=+00000070000}', "");
Expect(1, 65841, '\P{^Nv=+00000070000}', "");
Expect(0, 65840, '\p{Nv=+00000070000}', "");
Expect(1, 65840, '\p{^Nv=+00000070000}', "");
Expect(1, 65840, '\P{Nv=+00000070000}', "");
Expect(0, 65840, '\P{^Nv=+00000070000}', "");
Error('\p{Is_Numeric_Value=_0000	00	0070 00 0/a/}');
Error('\P{Is_Numeric_Value=_0000	00	0070 00 0/a/}');
Expect(1, 65841, '\p{Is_Numeric_Value=000000070000}', "");
Expect(0, 65841, '\p{^Is_Numeric_Value=000000070000}', "");
Expect(0, 65841, '\P{Is_Numeric_Value=000000070000}', "");
Expect(1, 65841, '\P{^Is_Numeric_Value=000000070000}', "");
Expect(0, 65840, '\p{Is_Numeric_Value=000000070000}', "");
Expect(1, 65840, '\p{^Is_Numeric_Value=000000070000}', "");
Expect(1, 65840, '\P{Is_Numeric_Value=000000070000}', "");
Expect(0, 65840, '\P{^Is_Numeric_Value=000000070000}', "");
Error('\p{Is_Nv=_/a/+0070000}');
Error('\P{Is_Nv=_/a/+0070000}');
Expect(1, 65841, '\p{Is_Nv=0_0_0_0_0_0_0_7_0000}', "");
Expect(0, 65841, '\p{^Is_Nv=0_0_0_0_0_0_0_7_0000}', "");
Expect(0, 65841, '\P{Is_Nv=0_0_0_0_0_0_0_7_0000}', "");
Expect(1, 65841, '\P{^Is_Nv=0_0_0_0_0_0_0_7_0000}', "");
Expect(0, 65840, '\p{Is_Nv=0_0_0_0_0_0_0_7_0000}', "");
Expect(1, 65840, '\p{^Is_Nv=0_0_0_0_0_0_0_7_0000}', "");
Expect(1, 65840, '\P{Is_Nv=0_0_0_0_0_0_0_7_0000}', "");
Expect(0, 65840, '\P{^Is_Nv=0_0_0_0_0_0_0_7_0000}', "");
Error('\p{Numeric_Value= _0036:=}');
Error('\P{Numeric_Value= _0036:=}');
Expect(1, 12977, '\p{Numeric_Value=+0_0_0_036}', "");
Expect(0, 12977, '\p{^Numeric_Value=+0_0_0_036}', "");
Expect(0, 12977, '\P{Numeric_Value=+0_0_0_036}', "");
Expect(1, 12977, '\P{^Numeric_Value=+0_0_0_036}', "");
Expect(0, 12976, '\p{Numeric_Value=+0_0_0_036}', "");
Expect(1, 12976, '\p{^Numeric_Value=+0_0_0_036}', "");
Expect(1, 12976, '\P{Numeric_Value=+0_0_0_036}', "");
Expect(0, 12976, '\P{^Numeric_Value=+0_0_0_036}', "");
Error('\p{Nv= /a/+0	00 00 00	36}');
Error('\P{Nv= /a/+0	00 00 00	36}');
Expect(1, 12977, '\p{Nv=0_0_0_0_0036}', "");
Expect(0, 12977, '\p{^Nv=0_0_0_0_0036}', "");
Expect(0, 12977, '\P{Nv=0_0_0_0_0036}', "");
Expect(1, 12977, '\P{^Nv=0_0_0_0_0036}', "");
Expect(0, 12976, '\p{Nv=0_0_0_0_0036}', "");
Expect(1, 12976, '\p{^Nv=0_0_0_0_0036}', "");
Expect(1, 12976, '\P{Nv=0_0_0_0_0036}', "");
Expect(0, 12976, '\P{^Nv=0_0_0_0_0036}', "");
Error('\p{Is_Numeric_Value=	 +00000036:=}');
Error('\P{Is_Numeric_Value=	 +00000036:=}');
Expect(1, 12977, '\p{Is_Numeric_Value=+03_6}', "");
Expect(0, 12977, '\p{^Is_Numeric_Value=+03_6}', "");
Expect(0, 12977, '\P{Is_Numeric_Value=+03_6}', "");
Expect(1, 12977, '\P{^Is_Numeric_Value=+03_6}', "");
Expect(0, 12976, '\p{Is_Numeric_Value=+03_6}', "");
Expect(1, 12976, '\p{^Is_Numeric_Value=+03_6}', "");
Expect(1, 12976, '\P{Is_Numeric_Value=+03_6}', "");
Expect(0, 12976, '\P{^Is_Numeric_Value=+03_6}', "");
Error('\p{Is_Nv=/a/+000036}');
Error('\P{Is_Nv=/a/+000036}');
Expect(1, 12977, '\p{Is_Nv=+3_6}', "");
Expect(0, 12977, '\p{^Is_Nv=+3_6}', "");
Expect(0, 12977, '\P{Is_Nv=+3_6}', "");
Expect(1, 12977, '\P{^Is_Nv=+3_6}', "");
Expect(0, 12976, '\p{Is_Nv=+3_6}', "");
Expect(1, 12976, '\p{^Is_Nv=+3_6}', "");
Expect(1, 12976, '\P{Is_Nv=+3_6}', "");
Expect(0, 12976, '\P{^Is_Nv=+3_6}', "");
Error('\p{Numeric_Value=:=_ +03}');
Error('\P{Numeric_Value=:=_ +03}');
Expect(1, 51, '\p{Numeric_Value=00_00_00_003}', "");
Expect(0, 51, '\p{^Numeric_Value=00_00_00_003}', "");
Expect(0, 51, '\P{Numeric_Value=00_00_00_003}', "");
Expect(1, 51, '\P{^Numeric_Value=00_00_00_003}', "");
Expect(0, 50, '\p{Numeric_Value=00_00_00_003}', "");
Expect(1, 50, '\p{^Numeric_Value=00_00_00_003}', "");
Expect(1, 50, '\P{Numeric_Value=00_00_00_003}', "");
Expect(0, 50, '\P{^Numeric_Value=00_00_00_003}', "");
Error('\p{Nv=:=_-000000003}');
Error('\P{Nv=:=_-000000003}');
Expect(1, 51, '\p{Nv=0_0_0_003}', "");
Expect(0, 51, '\p{^Nv=0_0_0_003}', "");
Expect(0, 51, '\P{Nv=0_0_0_003}', "");
Expect(1, 51, '\P{^Nv=0_0_0_003}', "");
Expect(0, 50, '\p{Nv=0_0_0_003}', "");
Expect(1, 50, '\p{^Nv=0_0_0_003}', "");
Expect(1, 50, '\P{Nv=0_0_0_003}', "");
Expect(0, 50, '\P{^Nv=0_0_0_003}', "");
Error('\p{Is_Numeric_Value=__+0000_3:=}');
Error('\P{Is_Numeric_Value=__+0000_3:=}');
Expect(1, 51, '\p{Is_Numeric_Value:   +00_00_00_00_3}', "");
Expect(0, 51, '\p{^Is_Numeric_Value:   +00_00_00_00_3}', "");
Expect(0, 51, '\P{Is_Numeric_Value:   +00_00_00_00_3}', "");
Expect(1, 51, '\P{^Is_Numeric_Value:   +00_00_00_00_3}', "");
Expect(0, 50, '\p{Is_Numeric_Value:   +00_00_00_00_3}', "");
Expect(1, 50, '\p{^Is_Numeric_Value:   +00_00_00_00_3}', "");
Expect(1, 50, '\P{Is_Numeric_Value:   +00_00_00_00_3}', "");
Expect(0, 50, '\P{^Is_Numeric_Value:   +00_00_00_00_3}', "");
Error('\p{Is_Nv=_:=+03}');
Error('\P{Is_Nv=_:=+03}');
Expect(1, 51, '\p{Is_Nv=00_00_00_03}', "");
Expect(0, 51, '\p{^Is_Nv=00_00_00_03}', "");
Expect(0, 51, '\P{Is_Nv=00_00_00_03}', "");
Expect(1, 51, '\P{^Is_Nv=00_00_00_03}', "");
Expect(0, 50, '\p{Is_Nv=00_00_00_03}', "");
Expect(1, 50, '\p{^Is_Nv=00_00_00_03}', "");
Expect(1, 50, '\P{Is_Nv=00_00_00_03}', "");
Expect(0, 50, '\P{^Is_Nv=00_00_00_03}', "");
Error('\p{Numeric_Value= 000-0	0_0_0/a/0-5 000}');
Error('\P{Numeric_Value= 000-0	0_0_0/a/0-5 000}');
Expect(1, 8577, '\p{Numeric_Value=0_0_0_0_0_0_0_5_000}', "");
Expect(0, 8577, '\p{^Numeric_Value=0_0_0_0_0_0_0_5_000}', "");
Expect(0, 8577, '\P{Numeric_Value=0_0_0_0_0_0_0_5_000}', "");
Expect(1, 8577, '\P{^Numeric_Value=0_0_0_0_0_0_0_5_000}', "");
Expect(0, 8576, '\p{Numeric_Value=0_0_0_0_0_0_0_5_000}', "");
Expect(1, 8576, '\p{^Numeric_Value=0_0_0_0_0_0_0_5_000}', "");
Expect(1, 8576, '\P{Numeric_Value=0_0_0_0_0_0_0_5_000}', "");
Expect(0, 8576, '\P{^Numeric_Value=0_0_0_0_0_0_0_5_000}', "");
Error('\p{Nv=	+0000/a/05000}');
Error('\P{Nv=	+0000/a/05000}');
Expect(1, 8577, '\p{Nv:05000}', "");
Expect(0, 8577, '\p{^Nv:05000}', "");
Expect(0, 8577, '\P{Nv:05000}', "");
Expect(1, 8577, '\P{^Nv:05000}', "");
Expect(0, 8576, '\p{Nv:05000}', "");
Expect(1, 8576, '\p{^Nv:05000}', "");
Expect(1, 8576, '\P{Nv:05000}', "");
Expect(0, 8576, '\P{^Nv:05000}', "");
Error('\p{Is_Numeric_Value=	/a/0 0	0	0_0	0-5_0_00}');
Error('\P{Is_Numeric_Value=	/a/0 0	0	0_0	0-5_0_00}');
Expect(1, 8577, '\p{Is_Numeric_Value=500_0}', "");
Expect(0, 8577, '\p{^Is_Numeric_Value=500_0}', "");
Expect(0, 8577, '\P{Is_Numeric_Value=500_0}', "");
Expect(1, 8577, '\P{^Is_Numeric_Value=500_0}', "");
Expect(0, 8576, '\p{Is_Numeric_Value=500_0}', "");
Expect(1, 8576, '\p{^Is_Numeric_Value=500_0}', "");
Expect(1, 8576, '\P{Is_Numeric_Value=500_0}', "");
Expect(0, 8576, '\P{^Is_Numeric_Value=500_0}', "");
Error('\p{Is_Nv::=  000000500_0}');
Error('\P{Is_Nv::=  000000500_0}');
Expect(1, 8577, '\p{Is_Nv=+00005000}', "");
Expect(0, 8577, '\p{^Is_Nv=+00005000}', "");
Expect(0, 8577, '\P{Is_Nv=+00005000}', "");
Expect(1, 8577, '\P{^Is_Nv=+00005000}', "");
Expect(0, 8576, '\p{Is_Nv=+00005000}', "");
Expect(1, 8576, '\p{^Is_Nv=+00005000}', "");
Expect(1, 8576, '\P{Is_Nv=+00005000}', "");
Expect(0, 8576, '\P{^Is_Nv=+00005000}', "");
Error('\p{Numeric_Value=/a/--0	009}');
Error('\P{Numeric_Value=/a/--0	009}');
Expect(1, 57, '\p{Numeric_Value: 000000000_9}', "");
Expect(0, 57, '\p{^Numeric_Value: 000000000_9}', "");
Expect(0, 57, '\P{Numeric_Value: 000000000_9}', "");
Expect(1, 57, '\P{^Numeric_Value: 000000000_9}', "");
Expect(0, 56, '\p{Numeric_Value: 000000000_9}', "");
Expect(1, 56, '\p{^Numeric_Value: 000000000_9}', "");
Expect(1, 56, '\P{Numeric_Value: 000000000_9}', "");
Expect(0, 56, '\P{^Numeric_Value: 000000000_9}', "");
Error('\p{Nv:		00009/a/}');
Error('\P{Nv:		00009/a/}');
Expect(1, 57, '\p{Nv=+0000000_9}', "");
Expect(0, 57, '\p{^Nv=+0000000_9}', "");
Expect(0, 57, '\P{Nv=+0000000_9}', "");
Expect(1, 57, '\P{^Nv=+0000000_9}', "");
Expect(0, 56, '\p{Nv=+0000000_9}', "");
Expect(1, 56, '\p{^Nv=+0000000_9}', "");
Expect(1, 56, '\P{Nv=+0000000_9}', "");
Expect(0, 56, '\P{^Nv=+0000000_9}', "");
Error('\p{Is_Numeric_Value=-/a/+0	0_0_0	0009}');
Error('\P{Is_Numeric_Value=-/a/+0	0_0_0	0009}');
Expect(1, 57, '\p{Is_Numeric_Value=000009}', "");
Expect(0, 57, '\p{^Is_Numeric_Value=000009}', "");
Expect(0, 57, '\P{Is_Numeric_Value=000009}', "");
Expect(1, 57, '\P{^Is_Numeric_Value=000009}', "");
Expect(0, 56, '\p{Is_Numeric_Value=000009}', "");
Expect(1, 56, '\p{^Is_Numeric_Value=000009}', "");
Expect(1, 56, '\P{Is_Numeric_Value=000009}', "");
Expect(0, 56, '\P{^Is_Numeric_Value=000009}', "");
Error('\p{Is_Nv=	/a/0009}');
Error('\P{Is_Nv=	/a/0009}');
Expect(1, 57, '\p{Is_Nv:	+000000009}', "");
Expect(0, 57, '\p{^Is_Nv:	+000000009}', "");
Expect(0, 57, '\P{Is_Nv:	+000000009}', "");
Expect(1, 57, '\P{^Is_Nv:	+000000009}', "");
Expect(0, 56, '\p{Is_Nv:	+000000009}', "");
Expect(1, 56, '\p{^Is_Nv:	+000000009}', "");
Expect(1, 56, '\P{Is_Nv:	+000000009}', "");
Expect(0, 56, '\P{^Is_Nv:	+000000009}', "");
Error('\p{Numeric_Value=:=	_00000000010000}');
Error('\P{Numeric_Value=:=	_00000000010000}');
Expect(1, 4988, '\p{Numeric_Value=10000}', "");
Expect(0, 4988, '\p{^Numeric_Value=10000}', "");
Expect(0, 4988, '\P{Numeric_Value=10000}', "");
Expect(1, 4988, '\P{^Numeric_Value=10000}', "");
Expect(0, 4987, '\p{Numeric_Value=10000}', "");
Expect(1, 4987, '\p{^Numeric_Value=10000}', "");
Expect(1, 4987, '\P{Numeric_Value=10000}', "");
Expect(0, 4987, '\P{^Numeric_Value=10000}', "");
Error('\p{Nv=--0_0/a/10-000}');
Error('\P{Nv=--0_0/a/10-000}');
Expect(1, 4988, '\p{Nv=+1000_0}', "");
Expect(0, 4988, '\p{^Nv=+1000_0}', "");
Expect(0, 4988, '\P{Nv=+1000_0}', "");
Expect(1, 4988, '\P{^Nv=+1000_0}', "");
Expect(0, 4987, '\p{Nv=+1000_0}', "");
Expect(1, 4987, '\p{^Nv=+1000_0}', "");
Expect(1, 4987, '\P{Nv=+1000_0}', "");
Expect(0, 4987, '\P{^Nv=+1000_0}', "");
Error('\p{Is_Numeric_Value= :=+0000	0_1	0000}');
Error('\P{Is_Numeric_Value= :=+0000	0_1	0000}');
Expect(1, 4988, '\p{Is_Numeric_Value=0000000010000}', "");
Expect(0, 4988, '\p{^Is_Numeric_Value=0000000010000}', "");
Expect(0, 4988, '\P{Is_Numeric_Value=0000000010000}', "");
Expect(1, 4988, '\P{^Is_Numeric_Value=0000000010000}', "");
Expect(0, 4987, '\p{Is_Numeric_Value=0000000010000}', "");
Expect(1, 4987, '\p{^Is_Numeric_Value=0000000010000}', "");
Expect(1, 4987, '\P{Is_Numeric_Value=0000000010000}', "");
Expect(0, 4987, '\P{^Is_Numeric_Value=0000000010000}', "");
Error('\p{Is_Nv=:=00000010000}');
Error('\P{Is_Nv=:=00000010000}');
Expect(1, 4988, '\p{Is_Nv:   010000}', "");
Expect(0, 4988, '\p{^Is_Nv:   010000}', "");
Expect(0, 4988, '\P{Is_Nv:   010000}', "");
Expect(1, 4988, '\P{^Is_Nv:   010000}', "");
Expect(0, 4987, '\p{Is_Nv:   010000}', "");
Expect(1, 4987, '\p{^Is_Nv:   010000}', "");
Expect(1, 4987, '\P{Is_Nv:   010000}', "");
Expect(0, 4987, '\P{^Is_Nv:   010000}', "");
Error('\p{Numeric_Value:	-00000047/a/}');
Error('\P{Numeric_Value:	-00000047/a/}');
Expect(1, 12988, '\p{Numeric_Value=0_0_0_0_0_0_047}', "");
Expect(0, 12988, '\p{^Numeric_Value=0_0_0_0_0_0_047}', "");
Expect(0, 12988, '\P{Numeric_Value=0_0_0_0_0_0_047}', "");
Expect(1, 12988, '\P{^Numeric_Value=0_0_0_0_0_0_047}', "");
Expect(0, 12987, '\p{Numeric_Value=0_0_0_0_0_0_047}', "");
Expect(1, 12987, '\p{^Numeric_Value=0_0_0_0_0_0_047}', "");
Expect(1, 12987, '\P{Numeric_Value=0_0_0_0_0_0_047}', "");
Expect(0, 12987, '\P{^Numeric_Value=0_0_0_0_0_0_047}', "");
Error('\p{Nv=-:=0-00 0 0 0-0_047}');
Error('\P{Nv=-:=0-00 0 0 0-0_047}');
Expect(1, 12988, '\p{Nv=00000047}', "");
Expect(0, 12988, '\p{^Nv=00000047}', "");
Expect(0, 12988, '\P{Nv=00000047}', "");
Expect(1, 12988, '\P{^Nv=00000047}', "");
Expect(0, 12987, '\p{Nv=00000047}', "");
Expect(1, 12987, '\p{^Nv=00000047}', "");
Expect(1, 12987, '\P{Nv=00000047}', "");
Expect(0, 12987, '\P{^Nv=00000047}', "");
Error('\p{Is_Numeric_Value=:=_+000047}');
Error('\P{Is_Numeric_Value=:=_+000047}');
Expect(1, 12988, '\p{Is_Numeric_Value=+0_0_0_0_47}', "");
Expect(0, 12988, '\p{^Is_Numeric_Value=+0_0_0_0_47}', "");
Expect(0, 12988, '\P{Is_Numeric_Value=+0_0_0_0_47}', "");
Expect(1, 12988, '\P{^Is_Numeric_Value=+0_0_0_0_47}', "");
Expect(0, 12987, '\p{Is_Numeric_Value=+0_0_0_0_47}', "");
Expect(1, 12987, '\p{^Is_Numeric_Value=+0_0_0_0_47}', "");
Expect(1, 12987, '\P{Is_Numeric_Value=+0_0_0_0_47}', "");
Expect(0, 12987, '\P{^Is_Numeric_Value=+0_0_0_0_47}', "");
Error('\p{Is_Nv=:=_	047}');
Error('\P{Is_Nv=:=_	047}');
Expect(1, 12988, '\p{Is_Nv:   +0047}', "");
Expect(0, 12988, '\p{^Is_Nv:   +0047}', "");
Expect(0, 12988, '\P{Is_Nv:   +0047}', "");
Expect(1, 12988, '\P{^Is_Nv:   +0047}', "");
Expect(0, 12987, '\p{Is_Nv:   +0047}', "");
Expect(1, 12987, '\p{^Is_Nv:   +0047}', "");
Expect(1, 12987, '\P{Is_Nv:   +0047}', "");
Expect(0, 12987, '\P{^Is_Nv:   +0047}', "");
Error('\p{Numeric_Value=:=-000001/000006}');
Error('\P{Numeric_Value=:=-000001/000006}');
Expect(1, 8537, '\p{Numeric_Value=000000001/06}', "");
Expect(0, 8537, '\p{^Numeric_Value=000000001/06}', "");
Expect(0, 8537, '\P{Numeric_Value=000000001/06}', "");
Expect(1, 8537, '\P{^Numeric_Value=000000001/06}', "");
Expect(0, 8536, '\p{Numeric_Value=000000001/06}', "");
Expect(1, 8536, '\p{^Numeric_Value=000000001/06}', "");
Expect(1, 8536, '\P{Numeric_Value=000000001/06}', "");
Expect(0, 8536, '\P{^Numeric_Value=000000001/06}', "");
Error('\p{Numeric_Value=0.17}');
Error('\P{Numeric_Value=0.17}');
Expect(1, 8537, '\p{Numeric_Value=0.167}', "");
Expect(0, 8537, '\p{^Numeric_Value=0.167}', "");
Expect(0, 8537, '\P{Numeric_Value=0.167}', "");
Expect(1, 8537, '\P{^Numeric_Value=0.167}', "");
Expect(0, 8536, '\p{Numeric_Value=0.167}', "");
Expect(1, 8536, '\p{^Numeric_Value=0.167}', "");
Expect(1, 8536, '\P{Numeric_Value=0.167}', "");
Expect(0, 8536, '\P{^Numeric_Value=0.167}', "");
Error('\p{Nv=/a/	-00000001/000006}');
Error('\P{Nv=/a/	-00000001/000006}');
Expect(1, 8537, '\p{Nv=001/0000006}', "");
Expect(0, 8537, '\p{^Nv=001/0000006}', "");
Expect(0, 8537, '\P{Nv=001/0000006}', "");
Expect(1, 8537, '\P{^Nv=001/0000006}', "");
Expect(0, 8536, '\p{Nv=001/0000006}', "");
Expect(1, 8536, '\p{^Nv=001/0000006}', "");
Expect(1, 8536, '\P{Nv=001/0000006}', "");
Expect(0, 8536, '\P{^Nv=001/0000006}', "");
Error('\p{Nv=0.17}');
Error('\P{Nv=0.17}');
Expect(1, 8537, '\p{Nv=0.167}', "");
Expect(0, 8537, '\p{^Nv=0.167}', "");
Expect(0, 8537, '\P{Nv=0.167}', "");
Expect(1, 8537, '\P{^Nv=0.167}', "");
Expect(0, 8536, '\p{Nv=0.167}', "");
Expect(1, 8536, '\p{^Nv=0.167}', "");
Expect(1, 8536, '\P{Nv=0.167}', "");
Expect(0, 8536, '\P{^Nv=0.167}', "");
Error('\p{Is_Numeric_Value=__00001/0000000006/a/}');
Error('\P{Is_Numeric_Value=__00001/0000000006/a/}');
Expect(1, 8537, '\p{Is_Numeric_Value=001/0006}', "");
Expect(0, 8537, '\p{^Is_Numeric_Value=001/0006}', "");
Expect(0, 8537, '\P{Is_Numeric_Value=001/0006}', "");
Expect(1, 8537, '\P{^Is_Numeric_Value=001/0006}', "");
Expect(0, 8536, '\p{Is_Numeric_Value=001/0006}', "");
Expect(1, 8536, '\p{^Is_Numeric_Value=001/0006}', "");
Expect(1, 8536, '\P{Is_Numeric_Value=001/0006}', "");
Expect(0, 8536, '\P{^Is_Numeric_Value=001/0006}', "");
Error('\p{Is_Numeric_Value=0.17}');
Error('\P{Is_Numeric_Value=0.17}');
Expect(1, 8537, '\p{Is_Numeric_Value=0.167}', "");
Expect(0, 8537, '\p{^Is_Numeric_Value=0.167}', "");
Expect(0, 8537, '\P{Is_Numeric_Value=0.167}', "");
Expect(1, 8537, '\P{^Is_Numeric_Value=0.167}', "");
Expect(0, 8536, '\p{Is_Numeric_Value=0.167}', "");
Expect(1, 8536, '\p{^Is_Numeric_Value=0.167}', "");
Expect(1, 8536, '\P{Is_Numeric_Value=0.167}', "");
Expect(0, 8536, '\P{^Is_Numeric_Value=0.167}', "");
Error('\p{Is_Nv=:=1/000000006}');
Error('\P{Is_Nv=:=1/000000006}');
Expect(1, 8537, '\p{Is_Nv=00001/00000006}', "");
Expect(0, 8537, '\p{^Is_Nv=00001/00000006}', "");
Expect(0, 8537, '\P{Is_Nv=00001/00000006}', "");
Expect(1, 8537, '\P{^Is_Nv=00001/00000006}', "");
Expect(0, 8536, '\p{Is_Nv=00001/00000006}', "");
Expect(1, 8536, '\p{^Is_Nv=00001/00000006}', "");
Expect(1, 8536, '\P{Is_Nv=00001/00000006}', "");
Expect(0, 8536, '\P{^Is_Nv=00001/00000006}', "");
Error('\p{Is_Nv=0.17}');
Error('\P{Is_Nv=0.17}');
Expect(1, 8537, '\p{Is_Nv:0.167}', "");
Expect(0, 8537, '\p{^Is_Nv:0.167}', "");
Expect(0, 8537, '\P{Is_Nv:0.167}', "");
Expect(1, 8537, '\P{^Is_Nv:0.167}', "");
Expect(0, 8536, '\p{Is_Nv:0.167}', "");
Expect(1, 8536, '\p{^Is_Nv:0.167}', "");
Expect(1, 8536, '\P{Is_Nv:0.167}', "");
Expect(0, 8536, '\P{^Is_Nv:0.167}', "");
Error('\p{Numeric_Value=	_+00000000038/a/}');
Error('\P{Numeric_Value=	_+00000000038/a/}');
Expect(1, 12979, '\p{Numeric_Value=0000038}', "");
Expect(0, 12979, '\p{^Numeric_Value=0000038}', "");
Expect(0, 12979, '\P{Numeric_Value=0000038}', "");
Expect(1, 12979, '\P{^Numeric_Value=0000038}', "");
Expect(0, 12978, '\p{Numeric_Value=0000038}', "");
Expect(1, 12978, '\p{^Numeric_Value=0000038}', "");
Expect(1, 12978, '\P{Numeric_Value=0000038}', "");
Expect(0, 12978, '\P{^Numeric_Value=0000038}', "");
Error('\p{Nv= /a/0-00-00-0	0 038}');
Error('\P{Nv= /a/0-00-00-0	0 038}');
Expect(1, 12979, '\p{Nv=000038}', "");
Expect(0, 12979, '\p{^Nv=000038}', "");
Expect(0, 12979, '\P{Nv=000038}', "");
Expect(1, 12979, '\P{^Nv=000038}', "");
Expect(0, 12978, '\p{Nv=000038}', "");
Expect(1, 12978, '\p{^Nv=000038}', "");
Expect(1, 12978, '\P{Nv=000038}', "");
Expect(0, 12978, '\P{^Nv=000038}', "");
Error('\p{Is_Numeric_Value=:=0_0-0-38}');
Error('\P{Is_Numeric_Value=:=0_0-0-38}');
Expect(1, 12979, '\p{Is_Numeric_Value=38}', "");
Expect(0, 12979, '\p{^Is_Numeric_Value=38}', "");
Expect(0, 12979, '\P{Is_Numeric_Value=38}', "");
Expect(1, 12979, '\P{^Is_Numeric_Value=38}', "");
Expect(0, 12978, '\p{Is_Numeric_Value=38}', "");
Expect(1, 12978, '\p{^Is_Numeric_Value=38}', "");
Expect(1, 12978, '\P{Is_Numeric_Value=38}', "");
Expect(0, 12978, '\P{^Is_Numeric_Value=38}', "");
Error('\p{Is_Nv=:=-3_8}');
Error('\P{Is_Nv=:=-3_8}');
Expect(1, 12979, '\p{Is_Nv=000038}', "");
Expect(0, 12979, '\p{^Is_Nv=000038}', "");
Expect(0, 12979, '\P{Is_Nv=000038}', "");
Expect(1, 12979, '\P{^Is_Nv=000038}', "");
Expect(0, 12978, '\p{Is_Nv=000038}', "");
Expect(1, 12978, '\p{^Is_Nv=000038}', "");
Expect(1, 12978, '\P{Is_Nv=000038}', "");
Expect(0, 12978, '\P{^Is_Nv=000038}', "");
Error('\p{Numeric_Value=_-00-00/a/8}');
Error('\P{Numeric_Value=_-00-00/a/8}');
Expect(1, 56, '\p{Numeric_Value=+00_8}', "");
Expect(0, 56, '\p{^Numeric_Value=+00_8}', "");
Expect(0, 56, '\P{Numeric_Value=+00_8}', "");
Expect(1, 56, '\P{^Numeric_Value=+00_8}', "");
Expect(0, 55, '\p{Numeric_Value=+00_8}', "");
Expect(1, 55, '\p{^Numeric_Value=+00_8}', "");
Expect(1, 55, '\P{Numeric_Value=+00_8}', "");
Expect(0, 55, '\P{^Numeric_Value=+00_8}', "");
Error('\p{Nv=_:=8}');
Error('\P{Nv=_:=8}');
Expect(1, 56, '\p{Nv=0000000008}', "");
Expect(0, 56, '\p{^Nv=0000000008}', "");
Expect(0, 56, '\P{Nv=0000000008}', "");
Expect(1, 56, '\P{^Nv=0000000008}', "");
Expect(0, 55, '\p{Nv=0000000008}', "");
Expect(1, 55, '\p{^Nv=0000000008}', "");
Expect(1, 55, '\P{Nv=0000000008}', "");
Expect(0, 55, '\P{^Nv=0000000008}', "");
Error('\p{Is_Numeric_Value=:=+0	00 0-08}');
Error('\P{Is_Numeric_Value=:=+0	00 0-08}');
Expect(1, 56, '\p{Is_Numeric_Value=+00_00_00_008}', "");
Expect(0, 56, '\p{^Is_Numeric_Value=+00_00_00_008}', "");
Expect(0, 56, '\P{Is_Numeric_Value=+00_00_00_008}', "");
Expect(1, 56, '\P{^Is_Numeric_Value=+00_00_00_008}', "");
Expect(0, 55, '\p{Is_Numeric_Value=+00_00_00_008}', "");
Expect(1, 55, '\p{^Is_Numeric_Value=+00_00_00_008}', "");
Expect(1, 55, '\P{Is_Numeric_Value=+00_00_00_008}', "");
Expect(0, 55, '\P{^Is_Numeric_Value=+00_00_00_008}', "");
Error('\p{Is_Nv:   --0/a/8}');
Error('\P{Is_Nv:   --0/a/8}');
Expect(1, 56, '\p{Is_Nv=+8}', "");
Expect(0, 56, '\p{^Is_Nv=+8}', "");
Expect(0, 56, '\P{Is_Nv=+8}', "");
Expect(1, 56, '\P{^Is_Nv=+8}', "");
Expect(0, 55, '\p{Is_Nv=+8}', "");
Expect(1, 55, '\p{^Is_Nv=+8}', "");
Expect(1, 55, '\P{Is_Nv=+8}', "");
Expect(0, 55, '\P{^Is_Nv=+8}', "");
Error('\p{Numeric_Value=	:=0000003/0000000004}');
Error('\P{Numeric_Value=	:=0000003/0000000004}');
Expect(1, 190, '\p{Numeric_Value=0003/4}', "");
Expect(0, 190, '\p{^Numeric_Value=0003/4}', "");
Expect(0, 190, '\P{Numeric_Value=0003/4}', "");
Expect(1, 190, '\P{^Numeric_Value=0003/4}', "");
Expect(0, 189, '\p{Numeric_Value=0003/4}', "");
Expect(1, 189, '\p{^Numeric_Value=0003/4}', "");
Expect(1, 189, '\P{Numeric_Value=0003/4}', "");
Expect(0, 189, '\P{^Numeric_Value=0003/4}', "");
Expect(1, 190, '\p{Numeric_Value:	0.750}', "");
Expect(0, 190, '\p{^Numeric_Value:	0.750}', "");
Expect(0, 190, '\P{Numeric_Value:	0.750}', "");
Expect(1, 190, '\P{^Numeric_Value:	0.750}', "");
Expect(0, 189, '\p{Numeric_Value:	0.750}', "");
Expect(1, 189, '\p{^Numeric_Value:	0.750}', "");
Expect(1, 189, '\P{Numeric_Value:	0.750}', "");
Expect(0, 189, '\P{^Numeric_Value:	0.750}', "");
Error('\p{Nv=/a/3/000004}');
Error('\P{Nv=/a/3/000004}');
Expect(1, 190, '\p{Nv=0003/0000004}', "");
Expect(0, 190, '\p{^Nv=0003/0000004}', "");
Expect(0, 190, '\P{Nv=0003/0000004}', "");
Expect(1, 190, '\P{^Nv=0003/0000004}', "");
Expect(0, 189, '\p{Nv=0003/0000004}', "");
Expect(1, 189, '\p{^Nv=0003/0000004}', "");
Expect(1, 189, '\P{Nv=0003/0000004}', "");
Expect(0, 189, '\P{^Nv=0003/0000004}', "");
Expect(1, 190, '\p{Nv=0.750}', "");
Expect(0, 190, '\p{^Nv=0.750}', "");
Expect(0, 190, '\P{Nv=0.750}', "");
Expect(1, 190, '\P{^Nv=0.750}', "");
Expect(0, 189, '\p{Nv=0.750}', "");
Expect(1, 189, '\p{^Nv=0.750}', "");
Expect(1, 189, '\P{Nv=0.750}', "");
Expect(0, 189, '\P{^Nv=0.750}', "");
Error('\p{Is_Numeric_Value=_0000003/0000004:=}');
Error('\P{Is_Numeric_Value=_0000003/0000004:=}');
Expect(1, 190, '\p{Is_Numeric_Value:   3/00000004}', "");
Expect(0, 190, '\p{^Is_Numeric_Value:   3/00000004}', "");
Expect(0, 190, '\P{Is_Numeric_Value:   3/00000004}', "");
Expect(1, 190, '\P{^Is_Numeric_Value:   3/00000004}', "");
Expect(0, 189, '\p{Is_Numeric_Value:   3/00000004}', "");
Expect(1, 189, '\p{^Is_Numeric_Value:   3/00000004}', "");
Expect(1, 189, '\P{Is_Numeric_Value:   3/00000004}', "");
Expect(0, 189, '\P{^Is_Numeric_Value:   3/00000004}', "");
Expect(1, 190, '\p{Is_Numeric_Value=0.750}', "");
Expect(0, 190, '\p{^Is_Numeric_Value=0.750}', "");
Expect(0, 190, '\P{Is_Numeric_Value=0.750}', "");
Expect(1, 190, '\P{^Is_Numeric_Value=0.750}', "");
Expect(0, 189, '\p{Is_Numeric_Value=0.750}', "");
Expect(1, 189, '\p{^Is_Numeric_Value=0.750}', "");
Expect(1, 189, '\P{Is_Numeric_Value=0.750}', "");
Expect(0, 189, '\P{^Is_Numeric_Value=0.750}', "");
Error('\p{Is_Nv= _00003/00000004/a/}');
Error('\P{Is_Nv= _00003/00000004/a/}');
Expect(1, 190, '\p{Is_Nv:000000003/04}', "");
Expect(0, 190, '\p{^Is_Nv:000000003/04}', "");
Expect(0, 190, '\P{Is_Nv:000000003/04}', "");
Expect(1, 190, '\P{^Is_Nv:000000003/04}', "");
Expect(0, 189, '\p{Is_Nv:000000003/04}', "");
Expect(1, 189, '\p{^Is_Nv:000000003/04}', "");
Expect(1, 189, '\P{Is_Nv:000000003/04}', "");
Expect(0, 189, '\P{^Is_Nv:000000003/04}', "");
Expect(1, 190, '\p{Is_Nv:   0.750}', "");
Expect(0, 190, '\p{^Is_Nv:   0.750}', "");
Expect(0, 190, '\P{Is_Nv:   0.750}', "");
Expect(1, 190, '\P{^Is_Nv:   0.750}', "");
Expect(0, 189, '\p{Is_Nv:   0.750}', "");
Expect(1, 189, '\p{^Is_Nv:   0.750}', "");
Expect(1, 189, '\P{Is_Nv:   0.750}', "");
Expect(0, 189, '\P{^Is_Nv:   0.750}', "");
Error('\p{Numeric_Value= 	000000004:=}');
Error('\P{Numeric_Value= 	000000004:=}');
Expect(1, 52, '\p{Numeric_Value=00_00_00_004}', "");
Expect(0, 52, '\p{^Numeric_Value=00_00_00_004}', "");
Expect(0, 52, '\P{Numeric_Value=00_00_00_004}', "");
Expect(1, 52, '\P{^Numeric_Value=00_00_00_004}', "");
Expect(0, 51, '\p{Numeric_Value=00_00_00_004}', "");
Expect(1, 51, '\p{^Numeric_Value=00_00_00_004}', "");
Expect(1, 51, '\P{Numeric_Value=00_00_00_004}', "");
Expect(0, 51, '\P{^Numeric_Value=00_00_00_004}', "");
Error('\p{Nv::=+0 0-00	0	004}');
Error('\P{Nv::=+0 0-00	0	004}');
Expect(1, 52, '\p{Nv:   0_0_0_0_0_0_04}', "");
Expect(0, 52, '\p{^Nv:   0_0_0_0_0_0_04}', "");
Expect(0, 52, '\P{Nv:   0_0_0_0_0_0_04}', "");
Expect(1, 52, '\P{^Nv:   0_0_0_0_0_0_04}', "");
Expect(0, 51, '\p{Nv:   0_0_0_0_0_0_04}', "");
Expect(1, 51, '\p{^Nv:   0_0_0_0_0_0_04}', "");
Expect(1, 51, '\P{Nv:   0_0_0_0_0_0_04}', "");
Expect(0, 51, '\P{^Nv:   0_0_0_0_0_0_04}', "");
Error('\p{Is_Numeric_Value=-_0000000004:=}');
Error('\P{Is_Numeric_Value=-_0000000004:=}');
Expect(1, 52, '\p{Is_Numeric_Value=004}', "");
Expect(0, 52, '\p{^Is_Numeric_Value=004}', "");
Expect(0, 52, '\P{Is_Numeric_Value=004}', "");
Expect(1, 52, '\P{^Is_Numeric_Value=004}', "");
Expect(0, 51, '\p{Is_Numeric_Value=004}', "");
Expect(1, 51, '\p{^Is_Numeric_Value=004}', "");
Expect(1, 51, '\P{Is_Numeric_Value=004}', "");
Expect(0, 51, '\P{^Is_Numeric_Value=004}', "");
Error('\p{Is_Nv=-	+0/a/0-0-0 0 00004}');
Error('\P{Is_Nv=-	+0/a/0-0-0 0 00004}');
Expect(1, 52, '\p{Is_Nv:+0000_4}', "");
Expect(0, 52, '\p{^Is_Nv:+0000_4}', "");
Expect(0, 52, '\P{Is_Nv:+0000_4}', "");
Expect(1, 52, '\P{^Is_Nv:+0000_4}', "");
Expect(0, 51, '\p{Is_Nv:+0000_4}', "");
Expect(1, 51, '\p{^Is_Nv:+0000_4}', "");
Expect(1, 51, '\P{Is_Nv:+0000_4}', "");
Expect(0, 51, '\P{^Is_Nv:+0000_4}', "");
Error('\p{Numeric_Value=-_+00000000034:=}');
Error('\P{Numeric_Value=-_+00000000034:=}');
Expect(1, 12894, '\p{Numeric_Value=0034}', "");
Expect(0, 12894, '\p{^Numeric_Value=0034}', "");
Expect(0, 12894, '\P{Numeric_Value=0034}', "");
Expect(1, 12894, '\P{^Numeric_Value=0034}', "");
Expect(0, 12893, '\p{Numeric_Value=0034}', "");
Expect(1, 12893, '\p{^Numeric_Value=0034}', "");
Expect(1, 12893, '\P{Numeric_Value=0034}', "");
Expect(0, 12893, '\P{^Numeric_Value=0034}', "");
Error('\p{Nv=	:=34}');
Error('\P{Nv=	:=34}');
Expect(1, 12894, '\p{Nv:	0034}', "");
Expect(0, 12894, '\p{^Nv:	0034}', "");
Expect(0, 12894, '\P{Nv:	0034}', "");
Expect(1, 12894, '\P{^Nv:	0034}', "");
Expect(0, 12893, '\p{Nv:	0034}', "");
Expect(1, 12893, '\p{^Nv:	0034}', "");
Expect(1, 12893, '\P{Nv:	0034}', "");
Expect(0, 12893, '\P{^Nv:	0034}', "");
Error('\p{Is_Numeric_Value=:=0-0 0_0-0 0_0034}');
Error('\P{Is_Numeric_Value=:=0-0 0_0-0 0_0034}');
Expect(1, 12894, '\p{Is_Numeric_Value=34}', "");
Expect(0, 12894, '\p{^Is_Numeric_Value=34}', "");
Expect(0, 12894, '\P{Is_Numeric_Value=34}', "");
Expect(1, 12894, '\P{^Is_Numeric_Value=34}', "");
Expect(0, 12893, '\p{Is_Numeric_Value=34}', "");
Expect(1, 12893, '\p{^Is_Numeric_Value=34}', "");
Expect(1, 12893, '\P{Is_Numeric_Value=34}', "");
Expect(0, 12893, '\P{^Is_Numeric_Value=34}', "");
Error('\p{Is_Nv= 034:=}');
Error('\P{Is_Nv= 034:=}');
Expect(1, 12894, '\p{Is_Nv:03_4}', "");
Expect(0, 12894, '\p{^Is_Nv:03_4}', "");
Expect(0, 12894, '\P{Is_Nv:03_4}', "");
Expect(1, 12894, '\P{^Is_Nv:03_4}', "");
Expect(0, 12893, '\p{Is_Nv:03_4}', "");
Expect(1, 12893, '\p{^Is_Nv:03_4}', "");
Expect(1, 12893, '\P{Is_Nv:03_4}', "");
Expect(0, 12893, '\P{^Is_Nv:03_4}', "");
Error('\p{Numeric_Value=/a/	037}');
Error('\P{Numeric_Value=/a/	037}');
Expect(1, 12978, '\p{Numeric_Value=+00_00_00_03_7}', "");
Expect(0, 12978, '\p{^Numeric_Value=+00_00_00_03_7}', "");
Expect(0, 12978, '\P{Numeric_Value=+00_00_00_03_7}', "");
Expect(1, 12978, '\P{^Numeric_Value=+00_00_00_03_7}', "");
Expect(0, 12977, '\p{Numeric_Value=+00_00_00_03_7}', "");
Expect(1, 12977, '\p{^Numeric_Value=+00_00_00_03_7}', "");
Expect(1, 12977, '\P{Numeric_Value=+00_00_00_03_7}', "");
Expect(0, 12977, '\P{^Numeric_Value=+00_00_00_03_7}', "");
Error('\p{Nv=__000037/a/}');
Error('\P{Nv=__000037/a/}');
Expect(1, 12978, '\p{Nv=00037}', "");
Expect(0, 12978, '\p{^Nv=00037}', "");
Expect(0, 12978, '\P{Nv=00037}', "");
Expect(1, 12978, '\P{^Nv=00037}', "");
Expect(0, 12977, '\p{Nv=00037}', "");
Expect(1, 12977, '\p{^Nv=00037}', "");
Expect(1, 12977, '\P{Nv=00037}', "");
Expect(0, 12977, '\P{^Nv=00037}', "");
Error('\p{Is_Numeric_Value=/a/-_+037}');
Error('\P{Is_Numeric_Value=/a/-_+037}');
Expect(1, 12978, '\p{Is_Numeric_Value=0_0_0_37}', "");
Expect(0, 12978, '\p{^Is_Numeric_Value=0_0_0_37}', "");
Expect(0, 12978, '\P{Is_Numeric_Value=0_0_0_37}', "");
Expect(1, 12978, '\P{^Is_Numeric_Value=0_0_0_37}', "");
Expect(0, 12977, '\p{Is_Numeric_Value=0_0_0_37}', "");
Expect(1, 12977, '\p{^Is_Numeric_Value=0_0_0_37}', "");
Expect(1, 12977, '\P{Is_Numeric_Value=0_0_0_37}', "");
Expect(0, 12977, '\P{^Is_Numeric_Value=0_0_0_37}', "");
Error('\p{Is_Nv=- 0000-00 037:=}');
Error('\P{Is_Nv=- 0000-00 037:=}');
Expect(1, 12978, '\p{Is_Nv:037}', "");
Expect(0, 12978, '\p{^Is_Nv:037}', "");
Expect(0, 12978, '\P{Is_Nv:037}', "");
Expect(1, 12978, '\P{^Is_Nv:037}', "");
Expect(0, 12977, '\p{Is_Nv:037}', "");
Expect(1, 12977, '\p{^Is_Nv:037}', "");
Expect(1, 12977, '\P{Is_Nv:037}', "");
Expect(0, 12977, '\P{^Is_Nv:037}', "");
Error('\p{Numeric_Value=	+00005/00002/a/}');
Error('\P{Numeric_Value=	+00005/00002/a/}');
Expect(1, 3884, '\p{Numeric_Value=0000000005/000000002}', "");
Expect(0, 3884, '\p{^Numeric_Value=0000000005/000000002}', "");
Expect(0, 3884, '\P{Numeric_Value=0000000005/000000002}', "");
Expect(1, 3884, '\P{^Numeric_Value=0000000005/000000002}', "");
Expect(0, 3883, '\p{Numeric_Value=0000000005/000000002}', "");
Expect(1, 3883, '\p{^Numeric_Value=0000000005/000000002}', "");
Expect(1, 3883, '\P{Numeric_Value=0000000005/000000002}', "");
Expect(0, 3883, '\P{^Numeric_Value=0000000005/000000002}', "");
Expect(1, 3884, '\p{Numeric_Value=2.500}', "");
Expect(0, 3884, '\p{^Numeric_Value=2.500}', "");
Expect(0, 3884, '\P{Numeric_Value=2.500}', "");
Expect(1, 3884, '\P{^Numeric_Value=2.500}', "");
Expect(0, 3883, '\p{Numeric_Value=2.500}', "");
Expect(1, 3883, '\p{^Numeric_Value=2.500}', "");
Expect(1, 3883, '\P{Numeric_Value=2.500}', "");
Expect(0, 3883, '\P{^Numeric_Value=2.500}', "");
Error('\p{Nv:     0005/000002:=}');
Error('\P{Nv:     0005/000002:=}');
Expect(1, 3884, '\p{Nv: 5/0000000002}', "");
Expect(0, 3884, '\p{^Nv: 5/0000000002}', "");
Expect(0, 3884, '\P{Nv: 5/0000000002}', "");
Expect(1, 3884, '\P{^Nv: 5/0000000002}', "");
Expect(0, 3883, '\p{Nv: 5/0000000002}', "");
Expect(1, 3883, '\p{^Nv: 5/0000000002}', "");
Expect(1, 3883, '\P{Nv: 5/0000000002}', "");
Expect(0, 3883, '\P{^Nv: 5/0000000002}', "");
Expect(1, 3884, '\p{Nv: 2.500}', "");
Expect(0, 3884, '\p{^Nv: 2.500}', "");
Expect(0, 3884, '\P{Nv: 2.500}', "");
Expect(1, 3884, '\P{^Nv: 2.500}', "");
Expect(0, 3883, '\p{Nv: 2.500}', "");
Expect(1, 3883, '\p{^Nv: 2.500}', "");
Expect(1, 3883, '\P{Nv: 2.500}', "");
Expect(0, 3883, '\P{^Nv: 2.500}', "");
Error('\p{Is_Numeric_Value= _+5/0000000002/a/}');
Error('\P{Is_Numeric_Value= _+5/0000000002/a/}');
Expect(1, 3884, '\p{Is_Numeric_Value=+005/000000002}', "");
Expect(0, 3884, '\p{^Is_Numeric_Value=+005/000000002}', "");
Expect(0, 3884, '\P{Is_Numeric_Value=+005/000000002}', "");
Expect(1, 3884, '\P{^Is_Numeric_Value=+005/000000002}', "");
Expect(0, 3883, '\p{Is_Numeric_Value=+005/000000002}', "");
Expect(1, 3883, '\p{^Is_Numeric_Value=+005/000000002}', "");
Expect(1, 3883, '\P{Is_Numeric_Value=+005/000000002}', "");
Expect(0, 3883, '\P{^Is_Numeric_Value=+005/000000002}', "");
Expect(1, 3884, '\p{Is_Numeric_Value:   2.500}', "");
Expect(0, 3884, '\p{^Is_Numeric_Value:   2.500}', "");
Expect(0, 3884, '\P{Is_Numeric_Value:   2.500}', "");
Expect(1, 3884, '\P{^Is_Numeric_Value:   2.500}', "");
Expect(0, 3883, '\p{Is_Numeric_Value:   2.500}', "");
Expect(1, 3883, '\p{^Is_Numeric_Value:   2.500}', "");
Expect(1, 3883, '\P{Is_Numeric_Value:   2.500}', "");
Expect(0, 3883, '\P{^Is_Numeric_Value:   2.500}', "");
Error('\p{Is_Nv=_:=+000005/002}');
Error('\P{Is_Nv=_:=+000005/002}');
Expect(1, 3884, '\p{Is_Nv=000005/002}', "");
Expect(0, 3884, '\p{^Is_Nv=000005/002}', "");
Expect(0, 3884, '\P{Is_Nv=000005/002}', "");
Expect(1, 3884, '\P{^Is_Nv=000005/002}', "");
Expect(0, 3883, '\p{Is_Nv=000005/002}', "");
Expect(1, 3883, '\p{^Is_Nv=000005/002}', "");
Expect(1, 3883, '\P{Is_Nv=000005/002}', "");
Expect(0, 3883, '\P{^Is_Nv=000005/002}', "");
Expect(1, 3884, '\p{Is_Nv=2.500}', "");
Expect(0, 3884, '\p{^Is_Nv=2.500}', "");
Expect(0, 3884, '\P{Is_Nv=2.500}', "");
Expect(1, 3884, '\P{^Is_Nv=2.500}', "");
Expect(0, 3883, '\p{Is_Nv=2.500}', "");
Expect(1, 3883, '\p{^Is_Nv=2.500}', "");
Expect(1, 3883, '\P{Is_Nv=2.500}', "");
Expect(0, 3883, '\P{^Is_Nv=2.500}', "");
Error('\p{Numeric_Value=	 001000:=}');
Error('\P{Numeric_Value=	 001000:=}');
Expect(1, 3058, '\p{Numeric_Value=0000100_0}', "");
Expect(0, 3058, '\p{^Numeric_Value=0000100_0}', "");
Expect(0, 3058, '\P{Numeric_Value=0000100_0}', "");
Expect(1, 3058, '\P{^Numeric_Value=0000100_0}', "");
Expect(0, 3057, '\p{Numeric_Value=0000100_0}', "");
Expect(1, 3057, '\p{^Numeric_Value=0000100_0}', "");
Expect(1, 3057, '\P{Numeric_Value=0000100_0}', "");
Expect(0, 3057, '\P{^Numeric_Value=0000100_0}', "");
Error('\p{Nv= :=+1000}');
Error('\P{Nv= :=+1000}');
Expect(1, 3058, '\p{Nv: +0_0_0_0_0_0_0_01000}', "");
Expect(0, 3058, '\p{^Nv: +0_0_0_0_0_0_0_01000}', "");
Expect(0, 3058, '\P{Nv: +0_0_0_0_0_0_0_01000}', "");
Expect(1, 3058, '\P{^Nv: +0_0_0_0_0_0_0_01000}', "");
Expect(0, 3057, '\p{Nv: +0_0_0_0_0_0_0_01000}', "");
Expect(1, 3057, '\p{^Nv: +0_0_0_0_0_0_0_01000}', "");
Expect(1, 3057, '\P{Nv: +0_0_0_0_0_0_0_01000}', "");
Expect(0, 3057, '\P{^Nv: +0_0_0_0_0_0_0_01000}', "");
Error('\p{Is_Numeric_Value= -01 00/a/0}');
Error('\P{Is_Numeric_Value= -01 00/a/0}');
Expect(1, 3058, '\p{Is_Numeric_Value: 0000000001000}', "");
Expect(0, 3058, '\p{^Is_Numeric_Value: 0000000001000}', "");
Expect(0, 3058, '\P{Is_Numeric_Value: 0000000001000}', "");
Expect(1, 3058, '\P{^Is_Numeric_Value: 0000000001000}', "");
Expect(0, 3057, '\p{Is_Numeric_Value: 0000000001000}', "");
Expect(1, 3057, '\p{^Is_Numeric_Value: 0000000001000}', "");
Expect(1, 3057, '\P{Is_Numeric_Value: 0000000001000}', "");
Expect(0, 3057, '\P{^Is_Numeric_Value: 0000000001000}', "");
Error('\p{Is_Nv=-/a/+01000}');
Error('\P{Is_Nv=-/a/+01000}');
Expect(1, 3058, '\p{Is_Nv=0_0_0_1_000}', "");
Expect(0, 3058, '\p{^Is_Nv=0_0_0_1_000}', "");
Expect(0, 3058, '\P{Is_Nv=0_0_0_1_000}', "");
Expect(1, 3058, '\P{^Is_Nv=0_0_0_1_000}', "");
Expect(0, 3057, '\p{Is_Nv=0_0_0_1_000}', "");
Expect(1, 3057, '\p{^Is_Nv=0_0_0_1_000}', "");
Expect(1, 3057, '\P{Is_Nv=0_0_0_1_000}', "");
Expect(0, 3057, '\P{^Is_Nv=0_0_0_1_000}', "");
Error('\p{Numeric_Value:   -/a/0000000043}');
Error('\P{Numeric_Value:   -/a/0000000043}');
Expect(1, 12984, '\p{Numeric_Value=0_0_0_0_0_0_0_0_0_43}', "");
Expect(0, 12984, '\p{^Numeric_Value=0_0_0_0_0_0_0_0_0_43}', "");
Expect(0, 12984, '\P{Numeric_Value=0_0_0_0_0_0_0_0_0_43}', "");
Expect(1, 12984, '\P{^Numeric_Value=0_0_0_0_0_0_0_0_0_43}', "");
Expect(0, 12983, '\p{Numeric_Value=0_0_0_0_0_0_0_0_0_43}', "");
Expect(1, 12983, '\p{^Numeric_Value=0_0_0_0_0_0_0_0_0_43}', "");
Expect(1, 12983, '\P{Numeric_Value=0_0_0_0_0_0_0_0_0_43}', "");
Expect(0, 12983, '\P{^Numeric_Value=0_0_0_0_0_0_0_0_0_43}', "");
Error('\p{Nv=--0:=0_00-0	00	043}');
Error('\P{Nv=--0:=0_00-0	00	043}');
Expect(1, 12984, '\p{Nv=000000043}', "");
Expect(0, 12984, '\p{^Nv=000000043}', "");
Expect(0, 12984, '\P{Nv=000000043}', "");
Expect(1, 12984, '\P{^Nv=000000043}', "");
Expect(0, 12983, '\p{Nv=000000043}', "");
Expect(1, 12983, '\p{^Nv=000000043}', "");
Expect(1, 12983, '\P{Nv=000000043}', "");
Expect(0, 12983, '\P{^Nv=000000043}', "");
Error('\p{Is_Numeric_Value=/a/ -+00043}');
Error('\P{Is_Numeric_Value=/a/ -+00043}');
Expect(1, 12984, '\p{Is_Numeric_Value:	+43}', "");
Expect(0, 12984, '\p{^Is_Numeric_Value:	+43}', "");
Expect(0, 12984, '\P{Is_Numeric_Value:	+43}', "");
Expect(1, 12984, '\P{^Is_Numeric_Value:	+43}', "");
Expect(0, 12983, '\p{Is_Numeric_Value:	+43}', "");
Expect(1, 12983, '\p{^Is_Numeric_Value:	+43}', "");
Expect(1, 12983, '\P{Is_Numeric_Value:	+43}', "");
Expect(0, 12983, '\P{^Is_Numeric_Value:	+43}', "");
Error('\p{Is_Nv=-_0 0 0:=0 0-43}');
Error('\P{Is_Nv=-_0 0 0:=0 0-43}');
Expect(1, 12984, '\p{Is_Nv=00000043}', "");
Expect(0, 12984, '\p{^Is_Nv=00000043}', "");
Expect(0, 12984, '\P{Is_Nv=00000043}', "");
Expect(1, 12984, '\P{^Is_Nv=00000043}', "");
Expect(0, 12983, '\p{Is_Nv=00000043}', "");
Expect(1, 12983, '\p{^Is_Nv=00000043}', "");
Expect(1, 12983, '\P{Is_Nv=00000043}', "");
Expect(0, 12983, '\P{^Is_Nv=00000043}', "");
Error('\p{Numeric_Value= 000000005/a/}');
Error('\P{Numeric_Value= 000000005/a/}');
Expect(1, 53, '\p{Numeric_Value=+0000000005}', "");
Expect(0, 53, '\p{^Numeric_Value=+0000000005}', "");
Expect(0, 53, '\P{Numeric_Value=+0000000005}', "");
Expect(1, 53, '\P{^Numeric_Value=+0000000005}', "");
Expect(0, 52, '\p{Numeric_Value=+0000000005}', "");
Expect(1, 52, '\p{^Numeric_Value=+0000000005}', "");
Expect(1, 52, '\P{Numeric_Value=+0000000005}', "");
Expect(0, 52, '\P{^Numeric_Value=+0000000005}', "");
Error('\p{Nv=_:=0	0	0 0_0	0005}');
Error('\P{Nv=_:=0	0	0 0_0	0005}');
Expect(1, 53, '\p{Nv=0_5}', "");
Expect(0, 53, '\p{^Nv=0_5}', "");
Expect(0, 53, '\P{Nv=0_5}', "");
Expect(1, 53, '\P{^Nv=0_5}', "");
Expect(0, 52, '\p{Nv=0_5}', "");
Expect(1, 52, '\p{^Nv=0_5}', "");
Expect(1, 52, '\P{Nv=0_5}', "");
Expect(0, 52, '\P{^Nv=0_5}', "");
Error('\p{Is_Numeric_Value=/a/00000	5}');
Error('\P{Is_Numeric_Value=/a/00000	5}');
Expect(1, 53, '\p{Is_Numeric_Value=+0000000005}', "");
Expect(0, 53, '\p{^Is_Numeric_Value=+0000000005}', "");
Expect(0, 53, '\P{Is_Numeric_Value=+0000000005}', "");
Expect(1, 53, '\P{^Is_Numeric_Value=+0000000005}', "");
Expect(0, 52, '\p{Is_Numeric_Value=+0000000005}', "");
Expect(1, 52, '\p{^Is_Numeric_Value=+0000000005}', "");
Expect(1, 52, '\P{Is_Numeric_Value=+0000000005}', "");
Expect(0, 52, '\P{^Is_Numeric_Value=+0000000005}', "");
Error('\p{Is_Nv=-/a/000000005}');
Error('\P{Is_Nv=-/a/000000005}');
Expect(1, 53, '\p{Is_Nv=000000005}', "");
Expect(0, 53, '\p{^Is_Nv=000000005}', "");
Expect(0, 53, '\P{Is_Nv=000000005}', "");
Expect(1, 53, '\P{^Is_Nv=000000005}', "");
Expect(0, 52, '\p{Is_Nv=000000005}', "");
Expect(1, 52, '\p{^Is_Nv=000000005}', "");
Expect(1, 52, '\P{Is_Nv=000000005}', "");
Expect(0, 52, '\P{^Is_Nv=000000005}', "");
Error('\p{Changes_When_Uppercased=_:=Yes}');
Error('\P{Changes_When_Uppercased=_:=Yes}');
Expect(1, 122, '\p{Changes_When_Uppercased=yes}', "");
Expect(0, 122, '\p{^Changes_When_Uppercased=yes}', "");
Expect(0, 122, '\P{Changes_When_Uppercased=yes}', "");
Expect(1, 122, '\P{^Changes_When_Uppercased=yes}', "");
Expect(0, 96, '\p{Changes_When_Uppercased=yes}', "");
Expect(1, 96, '\p{^Changes_When_Uppercased=yes}', "");
Expect(1, 96, '\P{Changes_When_Uppercased=yes}', "");
Expect(0, 96, '\P{^Changes_When_Uppercased=yes}', "");
Expect(1, 122, '\p{Changes_When_Uppercased=_-yes}', "");
Expect(0, 122, '\p{^Changes_When_Uppercased=_-yes}', "");
Expect(0, 122, '\P{Changes_When_Uppercased=_-yes}', "");
Expect(1, 122, '\P{^Changes_When_Uppercased=_-yes}', "");
Expect(0, 96, '\p{Changes_When_Uppercased=_-yes}', "");
Expect(1, 96, '\p{^Changes_When_Uppercased=_-yes}', "");
Expect(1, 96, '\P{Changes_When_Uppercased=_-yes}', "");
Expect(0, 96, '\P{^Changes_When_Uppercased=_-yes}', "");
Error('\p{CWU=-Y/a/}');
Error('\P{CWU=-Y/a/}');
Expect(1, 122, '\p{CWU=y}', "");
Expect(0, 122, '\p{^CWU=y}', "");
Expect(0, 122, '\P{CWU=y}', "");
Expect(1, 122, '\P{^CWU=y}', "");
Expect(0, 96, '\p{CWU=y}', "");
Expect(1, 96, '\p{^CWU=y}', "");
Expect(1, 96, '\P{CWU=y}', "");
Expect(0, 96, '\P{^CWU=y}', "");
Expect(1, 122, '\p{CWU= Y}', "");
Expect(0, 122, '\p{^CWU= Y}', "");
Expect(0, 122, '\P{CWU= Y}', "");
Expect(1, 122, '\P{^CWU= Y}', "");
Expect(0, 96, '\p{CWU= Y}', "");
Expect(1, 96, '\p{^CWU= Y}', "");
Expect(1, 96, '\P{CWU= Y}', "");
Expect(0, 96, '\P{^CWU= Y}', "");
Error('\p{Is_Changes_When_Uppercased=	:=T}');
Error('\P{Is_Changes_When_Uppercased=	:=T}');
Expect(1, 122, '\p{Is_Changes_When_Uppercased=t}', "");
Expect(0, 122, '\p{^Is_Changes_When_Uppercased=t}', "");
Expect(0, 122, '\P{Is_Changes_When_Uppercased=t}', "");
Expect(1, 122, '\P{^Is_Changes_When_Uppercased=t}', "");
Expect(0, 96, '\p{Is_Changes_When_Uppercased=t}', "");
Expect(1, 96, '\p{^Is_Changes_When_Uppercased=t}', "");
Expect(1, 96, '\P{Is_Changes_When_Uppercased=t}', "");
Expect(0, 96, '\P{^Is_Changes_When_Uppercased=t}', "");
Expect(1, 122, '\p{Is_Changes_When_Uppercased:   	_T}', "");
Expect(0, 122, '\p{^Is_Changes_When_Uppercased:   	_T}', "");
Expect(0, 122, '\P{Is_Changes_When_Uppercased:   	_T}', "");
Expect(1, 122, '\P{^Is_Changes_When_Uppercased:   	_T}', "");
Expect(0, 96, '\p{Is_Changes_When_Uppercased:   	_T}', "");
Expect(1, 96, '\p{^Is_Changes_When_Uppercased:   	_T}', "");
Expect(1, 96, '\P{Is_Changes_When_Uppercased:   	_T}', "");
Expect(0, 96, '\P{^Is_Changes_When_Uppercased:   	_T}', "");
Error('\p{Is_CWU=-	True/a/}');
Error('\P{Is_CWU=-	True/a/}');
Expect(1, 122, '\p{Is_CWU=true}', "");
Expect(0, 122, '\p{^Is_CWU=true}', "");
Expect(0, 122, '\P{Is_CWU=true}', "");
Expect(1, 122, '\P{^Is_CWU=true}', "");
Expect(0, 96, '\p{Is_CWU=true}', "");
Expect(1, 96, '\p{^Is_CWU=true}', "");
Expect(1, 96, '\P{Is_CWU=true}', "");
Expect(0, 96, '\P{^Is_CWU=true}', "");
Expect(1, 122, '\p{Is_CWU= true}', "");
Expect(0, 122, '\p{^Is_CWU= true}', "");
Expect(0, 122, '\P{Is_CWU= true}', "");
Expect(1, 122, '\P{^Is_CWU= true}', "");
Expect(0, 96, '\p{Is_CWU= true}', "");
Expect(1, 96, '\p{^Is_CWU= true}', "");
Expect(1, 96, '\P{Is_CWU= true}', "");
Expect(0, 96, '\P{^Is_CWU= true}', "");
Error('\p{Changes_When_Uppercased=_/a/NO}');
Error('\P{Changes_When_Uppercased=_/a/NO}');
Expect(1, 96, '\p{Changes_When_Uppercased=no}', "");
Expect(0, 96, '\p{^Changes_When_Uppercased=no}', "");
Expect(0, 96, '\P{Changes_When_Uppercased=no}', "");
Expect(1, 96, '\P{^Changes_When_Uppercased=no}', "");
Expect(0, 122, '\p{Changes_When_Uppercased=no}', "");
Expect(1, 122, '\p{^Changes_When_Uppercased=no}', "");
Expect(1, 122, '\P{Changes_When_Uppercased=no}', "");
Expect(0, 122, '\P{^Changes_When_Uppercased=no}', "");
Expect(1, 96, '\p{Changes_When_Uppercased=-NO}', "");
Expect(0, 96, '\p{^Changes_When_Uppercased=-NO}', "");
Expect(0, 96, '\P{Changes_When_Uppercased=-NO}', "");
Expect(1, 96, '\P{^Changes_When_Uppercased=-NO}', "");
Expect(0, 122, '\p{Changes_When_Uppercased=-NO}', "");
Expect(1, 122, '\p{^Changes_When_Uppercased=-NO}', "");
Expect(1, 122, '\P{Changes_When_Uppercased=-NO}', "");
Expect(0, 122, '\P{^Changes_When_Uppercased=-NO}', "");
Error('\p{CWU= _N/a/}');
Error('\P{CWU= _N/a/}');
Expect(1, 96, '\p{CWU=n}', "");
Expect(0, 96, '\p{^CWU=n}', "");
Expect(0, 96, '\P{CWU=n}', "");
Expect(1, 96, '\P{^CWU=n}', "");
Expect(0, 122, '\p{CWU=n}', "");
Expect(1, 122, '\p{^CWU=n}', "");
Expect(1, 122, '\P{CWU=n}', "");
Expect(0, 122, '\P{^CWU=n}', "");
Expect(1, 96, '\p{CWU= n}', "");
Expect(0, 96, '\p{^CWU= n}', "");
Expect(0, 96, '\P{CWU= n}', "");
Expect(1, 96, '\P{^CWU= n}', "");
Expect(0, 122, '\p{CWU= n}', "");
Expect(1, 122, '\p{^CWU= n}', "");
Expect(1, 122, '\P{CWU= n}', "");
Expect(0, 122, '\P{^CWU= n}', "");
Error('\p{Is_Changes_When_Uppercased=:=	F}');
Error('\P{Is_Changes_When_Uppercased=:=	F}');
Expect(1, 96, '\p{Is_Changes_When_Uppercased=f}', "");
Expect(0, 96, '\p{^Is_Changes_When_Uppercased=f}', "");
Expect(0, 96, '\P{Is_Changes_When_Uppercased=f}', "");
Expect(1, 96, '\P{^Is_Changes_When_Uppercased=f}', "");
Expect(0, 122, '\p{Is_Changes_When_Uppercased=f}', "");
Expect(1, 122, '\p{^Is_Changes_When_Uppercased=f}', "");
Expect(1, 122, '\P{Is_Changes_When_Uppercased=f}', "");
Expect(0, 122, '\P{^Is_Changes_When_Uppercased=f}', "");
Expect(1, 96, '\p{Is_Changes_When_Uppercased= 	F}', "");
Expect(0, 96, '\p{^Is_Changes_When_Uppercased= 	F}', "");
Expect(0, 96, '\P{Is_Changes_When_Uppercased= 	F}', "");
Expect(1, 96, '\P{^Is_Changes_When_Uppercased= 	F}', "");
Expect(0, 122, '\p{Is_Changes_When_Uppercased= 	F}', "");
Expect(1, 122, '\p{^Is_Changes_When_Uppercased= 	F}', "");
Expect(1, 122, '\P{Is_Changes_When_Uppercased= 	F}', "");
Expect(0, 122, '\P{^Is_Changes_When_Uppercased= 	F}', "");
Error('\p{Is_CWU=		False:=}');
Error('\P{Is_CWU=		False:=}');
Expect(1, 96, '\p{Is_CWU=false}', "");
Expect(0, 96, '\p{^Is_CWU=false}', "");
Expect(0, 96, '\P{Is_CWU=false}', "");
Expect(1, 96, '\P{^Is_CWU=false}', "");
Expect(0, 122, '\p{Is_CWU=false}', "");
Expect(1, 122, '\p{^Is_CWU=false}', "");
Expect(1, 122, '\P{Is_CWU=false}', "");
Expect(0, 122, '\P{^Is_CWU=false}', "");
Expect(1, 96, '\p{Is_CWU=_	false}', "");
Expect(0, 96, '\p{^Is_CWU=_	false}', "");
Expect(0, 96, '\P{Is_CWU=_	false}', "");
Expect(1, 96, '\P{^Is_CWU=_	false}', "");
Expect(0, 122, '\p{Is_CWU=_	false}', "");
Expect(1, 122, '\p{^Is_CWU=_	false}', "");
Expect(1, 122, '\P{Is_CWU=_	false}', "");
Expect(0, 122, '\P{^Is_CWU=_	false}', "");
Error('\p{Changes_When_Lowercased=	Yes/a/}');
Error('\P{Changes_When_Lowercased=	Yes/a/}');
Expect(1, 90, '\p{Changes_When_Lowercased=yes}', "");
Expect(0, 90, '\p{^Changes_When_Lowercased=yes}', "");
Expect(0, 90, '\P{Changes_When_Lowercased=yes}', "");
Expect(1, 90, '\P{^Changes_When_Lowercased=yes}', "");
Expect(0, 64, '\p{Changes_When_Lowercased=yes}', "");
Expect(1, 64, '\p{^Changes_When_Lowercased=yes}', "");
Expect(1, 64, '\P{Changes_When_Lowercased=yes}', "");
Expect(0, 64, '\P{^Changes_When_Lowercased=yes}', "");
Expect(1, 90, '\p{Changes_When_Lowercased=_Yes}', "");
Expect(0, 90, '\p{^Changes_When_Lowercased=_Yes}', "");
Expect(0, 90, '\P{Changes_When_Lowercased=_Yes}', "");
Expect(1, 90, '\P{^Changes_When_Lowercased=_Yes}', "");
Expect(0, 64, '\p{Changes_When_Lowercased=_Yes}', "");
Expect(1, 64, '\p{^Changes_When_Lowercased=_Yes}', "");
Expect(1, 64, '\P{Changes_When_Lowercased=_Yes}', "");
Expect(0, 64, '\P{^Changes_When_Lowercased=_Yes}', "");
Error('\p{CWL: _ y:=}');
Error('\P{CWL: _ y:=}');
Expect(1, 90, '\p{CWL=y}', "");
Expect(0, 90, '\p{^CWL=y}', "");
Expect(0, 90, '\P{CWL=y}', "");
Expect(1, 90, '\P{^CWL=y}', "");
Expect(0, 64, '\p{CWL=y}', "");
Expect(1, 64, '\p{^CWL=y}', "");
Expect(1, 64, '\P{CWL=y}', "");
Expect(0, 64, '\P{^CWL=y}', "");
Expect(1, 90, '\p{CWL=--Y}', "");
Expect(0, 90, '\p{^CWL=--Y}', "");
Expect(0, 90, '\P{CWL=--Y}', "");
Expect(1, 90, '\P{^CWL=--Y}', "");
Expect(0, 64, '\p{CWL=--Y}', "");
Expect(1, 64, '\p{^CWL=--Y}', "");
Expect(1, 64, '\P{CWL=--Y}', "");
Expect(0, 64, '\P{^CWL=--Y}', "");
Error('\p{Is_Changes_When_Lowercased=:=_T}');
Error('\P{Is_Changes_When_Lowercased=:=_T}');
Expect(1, 90, '\p{Is_Changes_When_Lowercased=t}', "");
Expect(0, 90, '\p{^Is_Changes_When_Lowercased=t}', "");
Expect(0, 90, '\P{Is_Changes_When_Lowercased=t}', "");
Expect(1, 90, '\P{^Is_Changes_When_Lowercased=t}', "");
Expect(0, 64, '\p{Is_Changes_When_Lowercased=t}', "");
Expect(1, 64, '\p{^Is_Changes_When_Lowercased=t}', "");
Expect(1, 64, '\P{Is_Changes_When_Lowercased=t}', "");
Expect(0, 64, '\P{^Is_Changes_When_Lowercased=t}', "");
Expect(1, 90, '\p{Is_Changes_When_Lowercased= T}', "");
Expect(0, 90, '\p{^Is_Changes_When_Lowercased= T}', "");
Expect(0, 90, '\P{Is_Changes_When_Lowercased= T}', "");
Expect(1, 90, '\P{^Is_Changes_When_Lowercased= T}', "");
Expect(0, 64, '\p{Is_Changes_When_Lowercased= T}', "");
Expect(1, 64, '\p{^Is_Changes_When_Lowercased= T}', "");
Expect(1, 64, '\P{Is_Changes_When_Lowercased= T}', "");
Expect(0, 64, '\P{^Is_Changes_When_Lowercased= T}', "");
Error('\p{Is_CWL= -True/a/}');
Error('\P{Is_CWL= -True/a/}');
Expect(1, 90, '\p{Is_CWL: true}', "");
Expect(0, 90, '\p{^Is_CWL: true}', "");
Expect(0, 90, '\P{Is_CWL: true}', "");
Expect(1, 90, '\P{^Is_CWL: true}', "");
Expect(0, 64, '\p{Is_CWL: true}', "");
Expect(1, 64, '\p{^Is_CWL: true}', "");
Expect(1, 64, '\P{Is_CWL: true}', "");
Expect(0, 64, '\P{^Is_CWL: true}', "");
Expect(1, 90, '\p{Is_CWL=__True}', "");
Expect(0, 90, '\p{^Is_CWL=__True}', "");
Expect(0, 90, '\P{Is_CWL=__True}', "");
Expect(1, 90, '\P{^Is_CWL=__True}', "");
Expect(0, 64, '\p{Is_CWL=__True}', "");
Expect(1, 64, '\p{^Is_CWL=__True}', "");
Expect(1, 64, '\P{Is_CWL=__True}', "");
Expect(0, 64, '\P{^Is_CWL=__True}', "");
Error('\p{Changes_When_Lowercased=/a/  No}');
Error('\P{Changes_When_Lowercased=/a/  No}');
Expect(1, 64, '\p{Changes_When_Lowercased=no}', "");
Expect(0, 64, '\p{^Changes_When_Lowercased=no}', "");
Expect(0, 64, '\P{Changes_When_Lowercased=no}', "");
Expect(1, 64, '\P{^Changes_When_Lowercased=no}', "");
Expect(0, 90, '\p{Changes_When_Lowercased=no}', "");
Expect(1, 90, '\p{^Changes_When_Lowercased=no}', "");
Expect(1, 90, '\P{Changes_When_Lowercased=no}', "");
Expect(0, 90, '\P{^Changes_When_Lowercased=no}', "");
Expect(1, 64, '\p{Changes_When_Lowercased= no}', "");
Expect(0, 64, '\p{^Changes_When_Lowercased= no}', "");
Expect(0, 64, '\P{Changes_When_Lowercased= no}', "");
Expect(1, 64, '\P{^Changes_When_Lowercased= no}', "");
Expect(0, 90, '\p{Changes_When_Lowercased= no}', "");
Expect(1, 90, '\p{^Changes_When_Lowercased= no}', "");
Expect(1, 90, '\P{Changes_When_Lowercased= no}', "");
Expect(0, 90, '\P{^Changes_When_Lowercased= no}', "");
Error('\p{CWL=-:=N}');
Error('\P{CWL=-:=N}');
Expect(1, 64, '\p{CWL=n}', "");
Expect(0, 64, '\p{^CWL=n}', "");
Expect(0, 64, '\P{CWL=n}', "");
Expect(1, 64, '\P{^CWL=n}', "");
Expect(0, 90, '\p{CWL=n}', "");
Expect(1, 90, '\p{^CWL=n}', "");
Expect(1, 90, '\P{CWL=n}', "");
Expect(0, 90, '\P{^CWL=n}', "");
Expect(1, 64, '\p{CWL=  N}', "");
Expect(0, 64, '\p{^CWL=  N}', "");
Expect(0, 64, '\P{CWL=  N}', "");
Expect(1, 64, '\P{^CWL=  N}', "");
Expect(0, 90, '\p{CWL=  N}', "");
Expect(1, 90, '\p{^CWL=  N}', "");
Expect(1, 90, '\P{CWL=  N}', "");
Expect(0, 90, '\P{^CWL=  N}', "");
Error('\p{Is_Changes_When_Lowercased=f:=}');
Error('\P{Is_Changes_When_Lowercased=f:=}');
Expect(1, 64, '\p{Is_Changes_When_Lowercased=f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Lowercased=f}', "");
Expect(0, 64, '\P{Is_Changes_When_Lowercased=f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Lowercased=f}', "");
Expect(0, 90, '\p{Is_Changes_When_Lowercased=f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Lowercased=f}', "");
Expect(1, 90, '\P{Is_Changes_When_Lowercased=f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Lowercased=f}', "");
Expect(1, 64, '\p{Is_Changes_When_Lowercased=-	f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Lowercased=-	f}', "");
Expect(0, 64, '\P{Is_Changes_When_Lowercased=-	f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Lowercased=-	f}', "");
Expect(0, 90, '\p{Is_Changes_When_Lowercased=-	f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Lowercased=-	f}', "");
Expect(1, 90, '\P{Is_Changes_When_Lowercased=-	f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Lowercased=-	f}', "");
Error('\p{Is_CWL=:=False}');
Error('\P{Is_CWL=:=False}');
Expect(1, 64, '\p{Is_CWL=false}', "");
Expect(0, 64, '\p{^Is_CWL=false}', "");
Expect(0, 64, '\P{Is_CWL=false}', "");
Expect(1, 64, '\P{^Is_CWL=false}', "");
Expect(0, 90, '\p{Is_CWL=false}', "");
Expect(1, 90, '\p{^Is_CWL=false}', "");
Expect(1, 90, '\P{Is_CWL=false}', "");
Expect(0, 90, '\P{^Is_CWL=false}', "");
Expect(1, 64, '\p{Is_CWL=-false}', "");
Expect(0, 64, '\p{^Is_CWL=-false}', "");
Expect(0, 64, '\P{Is_CWL=-false}', "");
Expect(1, 64, '\P{^Is_CWL=-false}', "");
Expect(0, 90, '\p{Is_CWL=-false}', "");
Expect(1, 90, '\p{^Is_CWL=-false}', "");
Expect(1, 90, '\P{Is_CWL=-false}', "");
Expect(0, 90, '\P{^Is_CWL=-false}', "");
Error('\p{Case_Ignorable=/a/Yes}');
Error('\P{Case_Ignorable=/a/Yes}');
Expect(1, 39, '\p{Case_Ignorable=yes}', "");
Expect(0, 39, '\p{^Case_Ignorable=yes}', "");
Expect(0, 39, '\P{Case_Ignorable=yes}', "");
Expect(1, 39, '\P{^Case_Ignorable=yes}', "");
Expect(0, 38, '\p{Case_Ignorable=yes}', "");
Expect(1, 38, '\p{^Case_Ignorable=yes}', "");
Expect(1, 38, '\P{Case_Ignorable=yes}', "");
Expect(0, 38, '\P{^Case_Ignorable=yes}', "");
Expect(1, 39, '\p{Case_Ignorable=- Yes}', "");
Expect(0, 39, '\p{^Case_Ignorable=- Yes}', "");
Expect(0, 39, '\P{Case_Ignorable=- Yes}', "");
Expect(1, 39, '\P{^Case_Ignorable=- Yes}', "");
Expect(0, 38, '\p{Case_Ignorable=- Yes}', "");
Expect(1, 38, '\p{^Case_Ignorable=- Yes}', "");
Expect(1, 38, '\P{Case_Ignorable=- Yes}', "");
Expect(0, 38, '\P{^Case_Ignorable=- Yes}', "");
Error('\p{CI=	-Y/a/}');
Error('\P{CI=	-Y/a/}');
Expect(1, 39, '\p{CI=y}', "");
Expect(0, 39, '\p{^CI=y}', "");
Expect(0, 39, '\P{CI=y}', "");
Expect(1, 39, '\P{^CI=y}', "");
Expect(0, 38, '\p{CI=y}', "");
Expect(1, 38, '\p{^CI=y}', "");
Expect(1, 38, '\P{CI=y}', "");
Expect(0, 38, '\P{^CI=y}', "");
Expect(1, 39, '\p{CI=__Y}', "");
Expect(0, 39, '\p{^CI=__Y}', "");
Expect(0, 39, '\P{CI=__Y}', "");
Expect(1, 39, '\P{^CI=__Y}', "");
Expect(0, 38, '\p{CI=__Y}', "");
Expect(1, 38, '\p{^CI=__Y}', "");
Expect(1, 38, '\P{CI=__Y}', "");
Expect(0, 38, '\P{^CI=__Y}', "");
Error('\p{Is_Case_Ignorable=/a/T}');
Error('\P{Is_Case_Ignorable=/a/T}');
Expect(1, 39, '\p{Is_Case_Ignorable=t}', "");
Expect(0, 39, '\p{^Is_Case_Ignorable=t}', "");
Expect(0, 39, '\P{Is_Case_Ignorable=t}', "");
Expect(1, 39, '\P{^Is_Case_Ignorable=t}', "");
Expect(0, 38, '\p{Is_Case_Ignorable=t}', "");
Expect(1, 38, '\p{^Is_Case_Ignorable=t}', "");
Expect(1, 38, '\P{Is_Case_Ignorable=t}', "");
Expect(0, 38, '\P{^Is_Case_Ignorable=t}', "");
Expect(1, 39, '\p{Is_Case_Ignorable:  T}', "");
Expect(0, 39, '\p{^Is_Case_Ignorable:  T}', "");
Expect(0, 39, '\P{Is_Case_Ignorable:  T}', "");
Expect(1, 39, '\P{^Is_Case_Ignorable:  T}', "");
Expect(0, 38, '\p{Is_Case_Ignorable:  T}', "");
Expect(1, 38, '\p{^Is_Case_Ignorable:  T}', "");
Expect(1, 38, '\P{Is_Case_Ignorable:  T}', "");
Expect(0, 38, '\P{^Is_Case_Ignorable:  T}', "");
Error('\p{Is_CI= /a/TRUE}');
Error('\P{Is_CI= /a/TRUE}');
Expect(1, 39, '\p{Is_CI=true}', "");
Expect(0, 39, '\p{^Is_CI=true}', "");
Expect(0, 39, '\P{Is_CI=true}', "");
Expect(1, 39, '\P{^Is_CI=true}', "");
Expect(0, 38, '\p{Is_CI=true}', "");
Expect(1, 38, '\p{^Is_CI=true}', "");
Expect(1, 38, '\P{Is_CI=true}', "");
Expect(0, 38, '\P{^Is_CI=true}', "");
Expect(1, 39, '\p{Is_CI=_true}', "");
Expect(0, 39, '\p{^Is_CI=_true}', "");
Expect(0, 39, '\P{Is_CI=_true}', "");
Expect(1, 39, '\P{^Is_CI=_true}', "");
Expect(0, 38, '\p{Is_CI=_true}', "");
Expect(1, 38, '\p{^Is_CI=_true}', "");
Expect(1, 38, '\P{Is_CI=_true}', "");
Expect(0, 38, '\P{^Is_CI=_true}', "");
Error('\p{Case_Ignorable=_	No/a/}');
Error('\P{Case_Ignorable=_	No/a/}');
Expect(1, 38, '\p{Case_Ignorable=no}', "");
Expect(0, 38, '\p{^Case_Ignorable=no}', "");
Expect(0, 38, '\P{Case_Ignorable=no}', "");
Expect(1, 38, '\P{^Case_Ignorable=no}', "");
Expect(0, 39, '\p{Case_Ignorable=no}', "");
Expect(1, 39, '\p{^Case_Ignorable=no}', "");
Expect(1, 39, '\P{Case_Ignorable=no}', "");
Expect(0, 39, '\P{^Case_Ignorable=no}', "");
Expect(1, 38, '\p{Case_Ignorable:    No}', "");
Expect(0, 38, '\p{^Case_Ignorable:    No}', "");
Expect(0, 38, '\P{Case_Ignorable:    No}', "");
Expect(1, 38, '\P{^Case_Ignorable:    No}', "");
Expect(0, 39, '\p{Case_Ignorable:    No}', "");
Expect(1, 39, '\p{^Case_Ignorable:    No}', "");
Expect(1, 39, '\P{Case_Ignorable:    No}', "");
Expect(0, 39, '\P{^Case_Ignorable:    No}', "");
Error('\p{CI=- n/a/}');
Error('\P{CI=- n/a/}');
Expect(1, 38, '\p{CI=n}', "");
Expect(0, 38, '\p{^CI=n}', "");
Expect(0, 38, '\P{CI=n}', "");
Expect(1, 38, '\P{^CI=n}', "");
Expect(0, 39, '\p{CI=n}', "");
Expect(1, 39, '\p{^CI=n}', "");
Expect(1, 39, '\P{CI=n}', "");
Expect(0, 39, '\P{^CI=n}', "");
Expect(1, 38, '\p{CI=_-n}', "");
Expect(0, 38, '\p{^CI=_-n}', "");
Expect(0, 38, '\P{CI=_-n}', "");
Expect(1, 38, '\P{^CI=_-n}', "");
Expect(0, 39, '\p{CI=_-n}', "");
Expect(1, 39, '\p{^CI=_-n}', "");
Expect(1, 39, '\P{CI=_-n}', "");
Expect(0, 39, '\P{^CI=_-n}', "");
Error('\p{Is_Case_Ignorable=:=  F}');
Error('\P{Is_Case_Ignorable=:=  F}');
Expect(1, 38, '\p{Is_Case_Ignorable=f}', "");
Expect(0, 38, '\p{^Is_Case_Ignorable=f}', "");
Expect(0, 38, '\P{Is_Case_Ignorable=f}', "");
Expect(1, 38, '\P{^Is_Case_Ignorable=f}', "");
Expect(0, 39, '\p{Is_Case_Ignorable=f}', "");
Expect(1, 39, '\p{^Is_Case_Ignorable=f}', "");
Expect(1, 39, '\P{Is_Case_Ignorable=f}', "");
Expect(0, 39, '\P{^Is_Case_Ignorable=f}', "");
Expect(1, 38, '\p{Is_Case_Ignorable=-f}', "");
Expect(0, 38, '\p{^Is_Case_Ignorable=-f}', "");
Expect(0, 38, '\P{Is_Case_Ignorable=-f}', "");
Expect(1, 38, '\P{^Is_Case_Ignorable=-f}', "");
Expect(0, 39, '\p{Is_Case_Ignorable=-f}', "");
Expect(1, 39, '\p{^Is_Case_Ignorable=-f}', "");
Expect(1, 39, '\P{Is_Case_Ignorable=-f}', "");
Expect(0, 39, '\P{^Is_Case_Ignorable=-f}', "");
Error('\p{Is_CI:   --FALSE/a/}');
Error('\P{Is_CI:   --FALSE/a/}');
Expect(1, 38, '\p{Is_CI=false}', "");
Expect(0, 38, '\p{^Is_CI=false}', "");
Expect(0, 38, '\P{Is_CI=false}', "");
Expect(1, 38, '\P{^Is_CI=false}', "");
Expect(0, 39, '\p{Is_CI=false}', "");
Expect(1, 39, '\p{^Is_CI=false}', "");
Expect(1, 39, '\P{Is_CI=false}', "");
Expect(0, 39, '\P{^Is_CI=false}', "");
Expect(1, 38, '\p{Is_CI=	-FALSE}', "");
Expect(0, 38, '\p{^Is_CI=	-FALSE}', "");
Expect(0, 38, '\P{Is_CI=	-FALSE}', "");
Expect(1, 38, '\P{^Is_CI=	-FALSE}', "");
Expect(0, 39, '\p{Is_CI=	-FALSE}', "");
Expect(1, 39, '\p{^Is_CI=	-FALSE}', "");
Expect(1, 39, '\P{Is_CI=	-FALSE}', "");
Expect(0, 39, '\P{^Is_CI=	-FALSE}', "");
Error('\p{Pattern_Syntax:   /a/Yes}');
Error('\P{Pattern_Syntax:   /a/Yes}');
Expect(1, 47, '\p{Pattern_Syntax: yes}', "");
Expect(0, 47, '\p{^Pattern_Syntax: yes}', "");
Expect(0, 47, '\P{Pattern_Syntax: yes}', "");
Expect(1, 47, '\P{^Pattern_Syntax: yes}', "");
Expect(0, 32, '\p{Pattern_Syntax: yes}', "");
Expect(1, 32, '\p{^Pattern_Syntax: yes}', "");
Expect(1, 32, '\P{Pattern_Syntax: yes}', "");
Expect(0, 32, '\P{^Pattern_Syntax: yes}', "");
Expect(1, 47, '\p{Pattern_Syntax:_YES}', "");
Expect(0, 47, '\p{^Pattern_Syntax:_YES}', "");
Expect(0, 47, '\P{Pattern_Syntax:_YES}', "");
Expect(1, 47, '\P{^Pattern_Syntax:_YES}', "");
Expect(0, 32, '\p{Pattern_Syntax:_YES}', "");
Expect(1, 32, '\p{^Pattern_Syntax:_YES}', "");
Expect(1, 32, '\P{Pattern_Syntax:_YES}', "");
Expect(0, 32, '\P{^Pattern_Syntax:_YES}', "");
Error('\p{Pat_Syn=/a/- Y}');
Error('\P{Pat_Syn=/a/- Y}');
Expect(1, 47, '\p{Pat_Syn=y}', "");
Expect(0, 47, '\p{^Pat_Syn=y}', "");
Expect(0, 47, '\P{Pat_Syn=y}', "");
Expect(1, 47, '\P{^Pat_Syn=y}', "");
Expect(0, 32, '\p{Pat_Syn=y}', "");
Expect(1, 32, '\p{^Pat_Syn=y}', "");
Expect(1, 32, '\P{Pat_Syn=y}', "");
Expect(0, 32, '\P{^Pat_Syn=y}', "");
Expect(1, 47, '\p{Pat_Syn=_ y}', "");
Expect(0, 47, '\p{^Pat_Syn=_ y}', "");
Expect(0, 47, '\P{Pat_Syn=_ y}', "");
Expect(1, 47, '\P{^Pat_Syn=_ y}', "");
Expect(0, 32, '\p{Pat_Syn=_ y}', "");
Expect(1, 32, '\p{^Pat_Syn=_ y}', "");
Expect(1, 32, '\P{Pat_Syn=_ y}', "");
Expect(0, 32, '\P{^Pat_Syn=_ y}', "");
Error('\p{Is_Pattern_Syntax=/a/ T}');
Error('\P{Is_Pattern_Syntax=/a/ T}');
Expect(1, 47, '\p{Is_Pattern_Syntax=t}', "");
Expect(0, 47, '\p{^Is_Pattern_Syntax=t}', "");
Expect(0, 47, '\P{Is_Pattern_Syntax=t}', "");
Expect(1, 47, '\P{^Is_Pattern_Syntax=t}', "");
Expect(0, 32, '\p{Is_Pattern_Syntax=t}', "");
Expect(1, 32, '\p{^Is_Pattern_Syntax=t}', "");
Expect(1, 32, '\P{Is_Pattern_Syntax=t}', "");
Expect(0, 32, '\P{^Is_Pattern_Syntax=t}', "");
Expect(1, 47, '\p{Is_Pattern_Syntax=_ T}', "");
Expect(0, 47, '\p{^Is_Pattern_Syntax=_ T}', "");
Expect(0, 47, '\P{Is_Pattern_Syntax=_ T}', "");
Expect(1, 47, '\P{^Is_Pattern_Syntax=_ T}', "");
Expect(0, 32, '\p{Is_Pattern_Syntax=_ T}', "");
Expect(1, 32, '\p{^Is_Pattern_Syntax=_ T}', "");
Expect(1, 32, '\P{Is_Pattern_Syntax=_ T}', "");
Expect(0, 32, '\P{^Is_Pattern_Syntax=_ T}', "");
Error('\p{Is_Pat_Syn:   :=	 true}');
Error('\P{Is_Pat_Syn:   :=	 true}');
Expect(1, 47, '\p{Is_Pat_Syn=true}', "");
Expect(0, 47, '\p{^Is_Pat_Syn=true}', "");
Expect(0, 47, '\P{Is_Pat_Syn=true}', "");
Expect(1, 47, '\P{^Is_Pat_Syn=true}', "");
Expect(0, 32, '\p{Is_Pat_Syn=true}', "");
Expect(1, 32, '\p{^Is_Pat_Syn=true}', "");
Expect(1, 32, '\P{Is_Pat_Syn=true}', "");
Expect(0, 32, '\P{^Is_Pat_Syn=true}', "");
Expect(1, 47, '\p{Is_Pat_Syn= _True}', "");
Expect(0, 47, '\p{^Is_Pat_Syn= _True}', "");
Expect(0, 47, '\P{Is_Pat_Syn= _True}', "");
Expect(1, 47, '\P{^Is_Pat_Syn= _True}', "");
Expect(0, 32, '\p{Is_Pat_Syn= _True}', "");
Expect(1, 32, '\p{^Is_Pat_Syn= _True}', "");
Expect(1, 32, '\P{Is_Pat_Syn= _True}', "");
Expect(0, 32, '\P{^Is_Pat_Syn= _True}', "");
Error('\p{Pattern_Syntax=:=-_No}');
Error('\P{Pattern_Syntax=:=-_No}');
Expect(1, 32, '\p{Pattern_Syntax=no}', "");
Expect(0, 32, '\p{^Pattern_Syntax=no}', "");
Expect(0, 32, '\P{Pattern_Syntax=no}', "");
Expect(1, 32, '\P{^Pattern_Syntax=no}', "");
Expect(0, 47, '\p{Pattern_Syntax=no}', "");
Expect(1, 47, '\p{^Pattern_Syntax=no}', "");
Expect(1, 47, '\P{Pattern_Syntax=no}', "");
Expect(0, 47, '\P{^Pattern_Syntax=no}', "");
Expect(1, 32, '\p{Pattern_Syntax= _no}', "");
Expect(0, 32, '\p{^Pattern_Syntax= _no}', "");
Expect(0, 32, '\P{Pattern_Syntax= _no}', "");
Expect(1, 32, '\P{^Pattern_Syntax= _no}', "");
Expect(0, 47, '\p{Pattern_Syntax= _no}', "");
Expect(1, 47, '\p{^Pattern_Syntax= _no}', "");
Expect(1, 47, '\P{Pattern_Syntax= _no}', "");
Expect(0, 47, '\P{^Pattern_Syntax= _no}', "");
Error('\p{Pat_Syn=		n/a/}');
Error('\P{Pat_Syn=		n/a/}');
Expect(1, 32, '\p{Pat_Syn=n}', "");
Expect(0, 32, '\p{^Pat_Syn=n}', "");
Expect(0, 32, '\P{Pat_Syn=n}', "");
Expect(1, 32, '\P{^Pat_Syn=n}', "");
Expect(0, 47, '\p{Pat_Syn=n}', "");
Expect(1, 47, '\p{^Pat_Syn=n}', "");
Expect(1, 47, '\P{Pat_Syn=n}', "");
Expect(0, 47, '\P{^Pat_Syn=n}', "");
Expect(1, 32, '\p{Pat_Syn=  N}', "");
Expect(0, 32, '\p{^Pat_Syn=  N}', "");
Expect(0, 32, '\P{Pat_Syn=  N}', "");
Expect(1, 32, '\P{^Pat_Syn=  N}', "");
Expect(0, 47, '\p{Pat_Syn=  N}', "");
Expect(1, 47, '\p{^Pat_Syn=  N}', "");
Expect(1, 47, '\P{Pat_Syn=  N}', "");
Expect(0, 47, '\P{^Pat_Syn=  N}', "");
Error('\p{Is_Pattern_Syntax= :=f}');
Error('\P{Is_Pattern_Syntax= :=f}');
Expect(1, 32, '\p{Is_Pattern_Syntax=f}', "");
Expect(0, 32, '\p{^Is_Pattern_Syntax=f}', "");
Expect(0, 32, '\P{Is_Pattern_Syntax=f}', "");
Expect(1, 32, '\P{^Is_Pattern_Syntax=f}', "");
Expect(0, 47, '\p{Is_Pattern_Syntax=f}', "");
Expect(1, 47, '\p{^Is_Pattern_Syntax=f}', "");
Expect(1, 47, '\P{Is_Pattern_Syntax=f}', "");
Expect(0, 47, '\P{^Is_Pattern_Syntax=f}', "");
Expect(1, 32, '\p{Is_Pattern_Syntax=-F}', "");
Expect(0, 32, '\p{^Is_Pattern_Syntax=-F}', "");
Expect(0, 32, '\P{Is_Pattern_Syntax=-F}', "");
Expect(1, 32, '\P{^Is_Pattern_Syntax=-F}', "");
Expect(0, 47, '\p{Is_Pattern_Syntax=-F}', "");
Expect(1, 47, '\p{^Is_Pattern_Syntax=-F}', "");
Expect(1, 47, '\P{Is_Pattern_Syntax=-F}', "");
Expect(0, 47, '\P{^Is_Pattern_Syntax=-F}', "");
Error('\p{Is_Pat_Syn=	 false/a/}');
Error('\P{Is_Pat_Syn=	 false/a/}');
Expect(1, 32, '\p{Is_Pat_Syn=false}', "");
Expect(0, 32, '\p{^Is_Pat_Syn=false}', "");
Expect(0, 32, '\P{Is_Pat_Syn=false}', "");
Expect(1, 32, '\P{^Is_Pat_Syn=false}', "");
Expect(0, 47, '\p{Is_Pat_Syn=false}', "");
Expect(1, 47, '\p{^Is_Pat_Syn=false}', "");
Expect(1, 47, '\P{Is_Pat_Syn=false}', "");
Expect(0, 47, '\P{^Is_Pat_Syn=false}', "");
Expect(1, 32, '\p{Is_Pat_Syn= False}', "");
Expect(0, 32, '\p{^Is_Pat_Syn= False}', "");
Expect(0, 32, '\P{Is_Pat_Syn= False}', "");
Expect(1, 32, '\P{^Is_Pat_Syn= False}', "");
Expect(0, 47, '\p{Is_Pat_Syn= False}', "");
Expect(1, 47, '\p{^Is_Pat_Syn= False}', "");
Expect(1, 47, '\P{Is_Pat_Syn= False}', "");
Expect(0, 47, '\P{^Is_Pat_Syn= False}', "");
Error('\p{Numeric_Type:   _-none/a/}');
Error('\P{Numeric_Type:   _-none/a/}');
Expect(1, 47, '\p{Numeric_Type=none}', "");
Expect(0, 47, '\p{^Numeric_Type=none}', "");
Expect(0, 47, '\P{Numeric_Type=none}', "");
Expect(1, 47, '\P{^Numeric_Type=none}', "");
Expect(0, 57, '\p{Numeric_Type=none}', "");
Expect(1, 57, '\p{^Numeric_Type=none}', "");
Expect(1, 57, '\P{Numeric_Type=none}', "");
Expect(0, 57, '\P{^Numeric_Type=none}', "");
Expect(1, 47, '\p{Numeric_Type=__NONE}', "");
Expect(0, 47, '\p{^Numeric_Type=__NONE}', "");
Expect(0, 47, '\P{Numeric_Type=__NONE}', "");
Expect(1, 47, '\P{^Numeric_Type=__NONE}', "");
Expect(0, 57, '\p{Numeric_Type=__NONE}', "");
Expect(1, 57, '\p{^Numeric_Type=__NONE}', "");
Expect(1, 57, '\P{Numeric_Type=__NONE}', "");
Expect(0, 57, '\P{^Numeric_Type=__NONE}', "");
Error('\p{Nt=:=_NONE}');
Error('\P{Nt=:=_NONE}');
Expect(1, 47, '\p{Nt=none}', "");
Expect(0, 47, '\p{^Nt=none}', "");
Expect(0, 47, '\P{Nt=none}', "");
Expect(1, 47, '\P{^Nt=none}', "");
Expect(0, 57, '\p{Nt=none}', "");
Expect(1, 57, '\p{^Nt=none}', "");
Expect(1, 57, '\P{Nt=none}', "");
Expect(0, 57, '\P{^Nt=none}', "");
Expect(1, 47, '\p{Nt=_NONE}', "");
Expect(0, 47, '\p{^Nt=_NONE}', "");
Expect(0, 47, '\P{Nt=_NONE}', "");
Expect(1, 47, '\P{^Nt=_NONE}', "");
Expect(0, 57, '\p{Nt=_NONE}', "");
Expect(1, 57, '\p{^Nt=_NONE}', "");
Expect(1, 57, '\P{Nt=_NONE}', "");
Expect(0, 57, '\P{^Nt=_NONE}', "");
Error('\p{Is_Numeric_Type: :=--None}');
Error('\P{Is_Numeric_Type: :=--None}');
Expect(1, 47, '\p{Is_Numeric_Type=none}', "");
Expect(0, 47, '\p{^Is_Numeric_Type=none}', "");
Expect(0, 47, '\P{Is_Numeric_Type=none}', "");
Expect(1, 47, '\P{^Is_Numeric_Type=none}', "");
Expect(0, 57, '\p{Is_Numeric_Type=none}', "");
Expect(1, 57, '\p{^Is_Numeric_Type=none}', "");
Expect(1, 57, '\P{Is_Numeric_Type=none}', "");
Expect(0, 57, '\P{^Is_Numeric_Type=none}', "");
Expect(1, 47, '\p{Is_Numeric_Type:	 NONE}', "");
Expect(0, 47, '\p{^Is_Numeric_Type:	 NONE}', "");
Expect(0, 47, '\P{Is_Numeric_Type:	 NONE}', "");
Expect(1, 47, '\P{^Is_Numeric_Type:	 NONE}', "");
Expect(0, 57, '\p{Is_Numeric_Type:	 NONE}', "");
Expect(1, 57, '\p{^Is_Numeric_Type:	 NONE}', "");
Expect(1, 57, '\P{Is_Numeric_Type:	 NONE}', "");
Expect(0, 57, '\P{^Is_Numeric_Type:	 NONE}', "");
Error('\p{Is_Nt: _-NONE:=}');
Error('\P{Is_Nt: _-NONE:=}');
Expect(1, 47, '\p{Is_Nt=none}', "");
Expect(0, 47, '\p{^Is_Nt=none}', "");
Expect(0, 47, '\P{Is_Nt=none}', "");
Expect(1, 47, '\P{^Is_Nt=none}', "");
Expect(0, 57, '\p{Is_Nt=none}', "");
Expect(1, 57, '\p{^Is_Nt=none}', "");
Expect(1, 57, '\P{Is_Nt=none}', "");
Expect(0, 57, '\P{^Is_Nt=none}', "");
Expect(1, 47, '\p{Is_Nt=-None}', "");
Expect(0, 47, '\p{^Is_Nt=-None}', "");
Expect(0, 47, '\P{Is_Nt=-None}', "");
Expect(1, 47, '\P{^Is_Nt=-None}', "");
Expect(0, 57, '\p{Is_Nt=-None}', "");
Expect(1, 57, '\p{^Is_Nt=-None}', "");
Expect(1, 57, '\P{Is_Nt=-None}', "");
Expect(0, 57, '\P{^Is_Nt=-None}', "");
Error('\p{Numeric_Type=/a/	digit}');
Error('\P{Numeric_Type=/a/	digit}');
Expect(1, 179, '\p{Numeric_Type=digit}', "");
Expect(0, 179, '\p{^Numeric_Type=digit}', "");
Expect(0, 179, '\P{Numeric_Type=digit}', "");
Expect(1, 179, '\P{^Numeric_Type=digit}', "");
Expect(0, 177, '\p{Numeric_Type=digit}', "");
Expect(1, 177, '\p{^Numeric_Type=digit}', "");
Expect(1, 177, '\P{Numeric_Type=digit}', "");
Expect(0, 177, '\P{^Numeric_Type=digit}', "");
Expect(1, 179, '\p{Numeric_Type=-	DIGIT}', "");
Expect(0, 179, '\p{^Numeric_Type=-	DIGIT}', "");
Expect(0, 179, '\P{Numeric_Type=-	DIGIT}', "");
Expect(1, 179, '\P{^Numeric_Type=-	DIGIT}', "");
Expect(0, 177, '\p{Numeric_Type=-	DIGIT}', "");
Expect(1, 177, '\p{^Numeric_Type=-	DIGIT}', "");
Expect(1, 177, '\P{Numeric_Type=-	DIGIT}', "");
Expect(0, 177, '\P{^Numeric_Type=-	DIGIT}', "");
Error('\p{Nt=_:=di}');
Error('\P{Nt=_:=di}');
Expect(1, 179, '\p{Nt:   di}', "");
Expect(0, 179, '\p{^Nt:   di}', "");
Expect(0, 179, '\P{Nt:   di}', "");
Expect(1, 179, '\P{^Nt:   di}', "");
Expect(0, 177, '\p{Nt:   di}', "");
Expect(1, 177, '\p{^Nt:   di}', "");
Expect(1, 177, '\P{Nt:   di}', "");
Expect(0, 177, '\P{^Nt:   di}', "");
Expect(1, 179, '\p{Nt=_-di}', "");
Expect(0, 179, '\p{^Nt=_-di}', "");
Expect(0, 179, '\P{Nt=_-di}', "");
Expect(1, 179, '\P{^Nt=_-di}', "");
Expect(0, 177, '\p{Nt=_-di}', "");
Expect(1, 177, '\p{^Nt=_-di}', "");
Expect(1, 177, '\P{Nt=_-di}', "");
Expect(0, 177, '\P{^Nt=_-di}', "");
Error('\p{Is_Numeric_Type=-Digit:=}');
Error('\P{Is_Numeric_Type=-Digit:=}');
Expect(1, 179, '\p{Is_Numeric_Type=digit}', "");
Expect(0, 179, '\p{^Is_Numeric_Type=digit}', "");
Expect(0, 179, '\P{Is_Numeric_Type=digit}', "");
Expect(1, 179, '\P{^Is_Numeric_Type=digit}', "");
Expect(0, 177, '\p{Is_Numeric_Type=digit}', "");
Expect(1, 177, '\p{^Is_Numeric_Type=digit}', "");
Expect(1, 177, '\P{Is_Numeric_Type=digit}', "");
Expect(0, 177, '\P{^Is_Numeric_Type=digit}', "");
Expect(1, 179, '\p{Is_Numeric_Type= 	Digit}', "");
Expect(0, 179, '\p{^Is_Numeric_Type= 	Digit}', "");
Expect(0, 179, '\P{Is_Numeric_Type= 	Digit}', "");
Expect(1, 179, '\P{^Is_Numeric_Type= 	Digit}', "");
Expect(0, 177, '\p{Is_Numeric_Type= 	Digit}', "");
Expect(1, 177, '\p{^Is_Numeric_Type= 	Digit}', "");
Expect(1, 177, '\P{Is_Numeric_Type= 	Digit}', "");
Expect(0, 177, '\P{^Is_Numeric_Type= 	Digit}', "");
Error('\p{Is_Nt=	:=Di}');
Error('\P{Is_Nt=	:=Di}');
Expect(1, 179, '\p{Is_Nt=di}', "");
Expect(0, 179, '\p{^Is_Nt=di}', "");
Expect(0, 179, '\P{Is_Nt=di}', "");
Expect(1, 179, '\P{^Is_Nt=di}', "");
Expect(0, 177, '\p{Is_Nt=di}', "");
Expect(1, 177, '\p{^Is_Nt=di}', "");
Expect(1, 177, '\P{Is_Nt=di}', "");
Expect(0, 177, '\P{^Is_Nt=di}', "");
Expect(1, 179, '\p{Is_Nt= -di}', "");
Expect(0, 179, '\p{^Is_Nt= -di}', "");
Expect(0, 179, '\P{Is_Nt= -di}', "");
Expect(1, 179, '\P{^Is_Nt= -di}', "");
Expect(0, 177, '\p{Is_Nt= -di}', "");
Expect(1, 177, '\p{^Is_Nt= -di}', "");
Expect(1, 177, '\P{Is_Nt= -di}', "");
Expect(0, 177, '\P{^Is_Nt= -di}', "");
Error('\p{Numeric_Type=/a/-	DECIMAL}');
Error('\P{Numeric_Type=/a/-	DECIMAL}');
Expect(1, 57, '\p{Numeric_Type=decimal}', "");
Expect(0, 57, '\p{^Numeric_Type=decimal}', "");
Expect(0, 57, '\P{Numeric_Type=decimal}', "");
Expect(1, 57, '\P{^Numeric_Type=decimal}', "");
Expect(0, 47, '\p{Numeric_Type=decimal}', "");
Expect(1, 47, '\p{^Numeric_Type=decimal}', "");
Expect(1, 47, '\P{Numeric_Type=decimal}', "");
Expect(0, 47, '\P{^Numeric_Type=decimal}', "");
Expect(1, 57, '\p{Numeric_Type=	decimal}', "");
Expect(0, 57, '\p{^Numeric_Type=	decimal}', "");
Expect(0, 57, '\P{Numeric_Type=	decimal}', "");
Expect(1, 57, '\P{^Numeric_Type=	decimal}', "");
Expect(0, 47, '\p{Numeric_Type=	decimal}', "");
Expect(1, 47, '\p{^Numeric_Type=	decimal}', "");
Expect(1, 47, '\P{Numeric_Type=	decimal}', "");
Expect(0, 47, '\P{^Numeric_Type=	decimal}', "");
Error('\p{Nt=	De:=}');
Error('\P{Nt=	De:=}');
Expect(1, 57, '\p{Nt=de}', "");
Expect(0, 57, '\p{^Nt=de}', "");
Expect(0, 57, '\P{Nt=de}', "");
Expect(1, 57, '\P{^Nt=de}', "");
Expect(0, 47, '\p{Nt=de}', "");
Expect(1, 47, '\p{^Nt=de}', "");
Expect(1, 47, '\P{Nt=de}', "");
Expect(0, 47, '\P{^Nt=de}', "");
Expect(1, 57, '\p{Nt=	-de}', "");
Expect(0, 57, '\p{^Nt=	-de}', "");
Expect(0, 57, '\P{Nt=	-de}', "");
Expect(1, 57, '\P{^Nt=	-de}', "");
Expect(0, 47, '\p{Nt=	-de}', "");
Expect(1, 47, '\p{^Nt=	-de}', "");
Expect(1, 47, '\P{Nt=	-de}', "");
Expect(0, 47, '\P{^Nt=	-de}', "");
Error('\p{Is_Numeric_Type: /a/_DECIMAL}');
Error('\P{Is_Numeric_Type: /a/_DECIMAL}');
Expect(1, 57, '\p{Is_Numeric_Type:   decimal}', "");
Expect(0, 57, '\p{^Is_Numeric_Type:   decimal}', "");
Expect(0, 57, '\P{Is_Numeric_Type:   decimal}', "");
Expect(1, 57, '\P{^Is_Numeric_Type:   decimal}', "");
Expect(0, 47, '\p{Is_Numeric_Type:   decimal}', "");
Expect(1, 47, '\p{^Is_Numeric_Type:   decimal}', "");
Expect(1, 47, '\P{Is_Numeric_Type:   decimal}', "");
Expect(0, 47, '\P{^Is_Numeric_Type:   decimal}', "");
Expect(1, 57, '\p{Is_Numeric_Type= 	decimal}', "");
Expect(0, 57, '\p{^Is_Numeric_Type= 	decimal}', "");
Expect(0, 57, '\P{Is_Numeric_Type= 	decimal}', "");
Expect(1, 57, '\P{^Is_Numeric_Type= 	decimal}', "");
Expect(0, 47, '\p{Is_Numeric_Type= 	decimal}', "");
Expect(1, 47, '\p{^Is_Numeric_Type= 	decimal}', "");
Expect(1, 47, '\P{Is_Numeric_Type= 	decimal}', "");
Expect(0, 47, '\P{^Is_Numeric_Type= 	decimal}', "");
Error('\p{Is_Nt=_	De/a/}');
Error('\P{Is_Nt=_	De/a/}');
Expect(1, 57, '\p{Is_Nt=de}', "");
Expect(0, 57, '\p{^Is_Nt=de}', "");
Expect(0, 57, '\P{Is_Nt=de}', "");
Expect(1, 57, '\P{^Is_Nt=de}', "");
Expect(0, 47, '\p{Is_Nt=de}', "");
Expect(1, 47, '\p{^Is_Nt=de}', "");
Expect(1, 47, '\P{Is_Nt=de}', "");
Expect(0, 47, '\P{^Is_Nt=de}', "");
Expect(1, 57, '\p{Is_Nt=-_de}', "");
Expect(0, 57, '\p{^Is_Nt=-_de}', "");
Expect(0, 57, '\P{Is_Nt=-_de}', "");
Expect(1, 57, '\P{^Is_Nt=-_de}', "");
Expect(0, 47, '\p{Is_Nt=-_de}', "");
Expect(1, 47, '\p{^Is_Nt=-_de}', "");
Expect(1, 47, '\P{Is_Nt=-_de}', "");
Expect(0, 47, '\P{^Is_Nt=-_de}', "");
Error('\p{Numeric_Type=-:=Numeric}');
Error('\P{Numeric_Type=-:=Numeric}');
Expect(1, 190, '\p{Numeric_Type=numeric}', "");
Expect(0, 190, '\p{^Numeric_Type=numeric}', "");
Expect(0, 190, '\P{Numeric_Type=numeric}', "");
Expect(1, 190, '\P{^Numeric_Type=numeric}', "");
Expect(0, 187, '\p{Numeric_Type=numeric}', "");
Expect(1, 187, '\p{^Numeric_Type=numeric}', "");
Expect(1, 187, '\P{Numeric_Type=numeric}', "");
Expect(0, 187, '\P{^Numeric_Type=numeric}', "");
Expect(1, 190, '\p{Numeric_Type=-	Numeric}', "");
Expect(0, 190, '\p{^Numeric_Type=-	Numeric}', "");
Expect(0, 190, '\P{Numeric_Type=-	Numeric}', "");
Expect(1, 190, '\P{^Numeric_Type=-	Numeric}', "");
Expect(0, 187, '\p{Numeric_Type=-	Numeric}', "");
Expect(1, 187, '\p{^Numeric_Type=-	Numeric}', "");
Expect(1, 187, '\P{Numeric_Type=-	Numeric}', "");
Expect(0, 187, '\P{^Numeric_Type=-	Numeric}', "");
Error('\p{Nt=	 NU:=}');
Error('\P{Nt=	 NU:=}');
Expect(1, 190, '\p{Nt=nu}', "");
Expect(0, 190, '\p{^Nt=nu}', "");
Expect(0, 190, '\P{Nt=nu}', "");
Expect(1, 190, '\P{^Nt=nu}', "");
Expect(0, 187, '\p{Nt=nu}', "");
Expect(1, 187, '\p{^Nt=nu}', "");
Expect(1, 187, '\P{Nt=nu}', "");
Expect(0, 187, '\P{^Nt=nu}', "");
Expect(1, 190, '\p{Nt= 	nu}', "");
Expect(0, 190, '\p{^Nt= 	nu}', "");
Expect(0, 190, '\P{Nt= 	nu}', "");
Expect(1, 190, '\P{^Nt= 	nu}', "");
Expect(0, 187, '\p{Nt= 	nu}', "");
Expect(1, 187, '\p{^Nt= 	nu}', "");
Expect(1, 187, '\P{Nt= 	nu}', "");
Expect(0, 187, '\P{^Nt= 	nu}', "");
Error('\p{Is_Numeric_Type= /a/NUMERIC}');
Error('\P{Is_Numeric_Type= /a/NUMERIC}');
Expect(1, 190, '\p{Is_Numeric_Type=numeric}', "");
Expect(0, 190, '\p{^Is_Numeric_Type=numeric}', "");
Expect(0, 190, '\P{Is_Numeric_Type=numeric}', "");
Expect(1, 190, '\P{^Is_Numeric_Type=numeric}', "");
Expect(0, 187, '\p{Is_Numeric_Type=numeric}', "");
Expect(1, 187, '\p{^Is_Numeric_Type=numeric}', "");
Expect(1, 187, '\P{Is_Numeric_Type=numeric}', "");
Expect(0, 187, '\P{^Is_Numeric_Type=numeric}', "");
Expect(1, 190, '\p{Is_Numeric_Type=_NUMERIC}', "");
Expect(0, 190, '\p{^Is_Numeric_Type=_NUMERIC}', "");
Expect(0, 190, '\P{Is_Numeric_Type=_NUMERIC}', "");
Expect(1, 190, '\P{^Is_Numeric_Type=_NUMERIC}', "");
Expect(0, 187, '\p{Is_Numeric_Type=_NUMERIC}', "");
Expect(1, 187, '\p{^Is_Numeric_Type=_NUMERIC}', "");
Expect(1, 187, '\P{Is_Numeric_Type=_NUMERIC}', "");
Expect(0, 187, '\P{^Is_Numeric_Type=_NUMERIC}', "");
Error('\p{Is_Nt=:=	 Nu}');
Error('\P{Is_Nt=:=	 Nu}');
Expect(1, 190, '\p{Is_Nt=nu}', "");
Expect(0, 190, '\p{^Is_Nt=nu}', "");
Expect(0, 190, '\P{Is_Nt=nu}', "");
Expect(1, 190, '\P{^Is_Nt=nu}', "");
Expect(0, 187, '\p{Is_Nt=nu}', "");
Expect(1, 187, '\p{^Is_Nt=nu}', "");
Expect(1, 187, '\P{Is_Nt=nu}', "");
Expect(0, 187, '\P{^Is_Nt=nu}', "");
Expect(1, 190, '\p{Is_Nt=--NU}', "");
Expect(0, 190, '\p{^Is_Nt=--NU}', "");
Expect(0, 190, '\P{Is_Nt=--NU}', "");
Expect(1, 190, '\P{^Is_Nt=--NU}', "");
Expect(0, 187, '\p{Is_Nt=--NU}', "");
Expect(1, 187, '\p{^Is_Nt=--NU}', "");
Expect(1, 187, '\P{Is_Nt=--NU}', "");
Expect(0, 187, '\P{^Is_Nt=--NU}', "");
Error('\p{Expands_On_NFC=Yes}');
Error('\P{Expands_On_NFC=Yes}');
Error('\p{XO_NFC=Y}');
Error('\P{XO_NFC=Y}');
Error('\p{Is_Expands_On_NFC=T}');
Error('\P{Is_Expands_On_NFC=T}');
Error('\p{Is_XO_NFC=True}');
Error('\P{Is_XO_NFC=True}');
Error('\p{Expands_On_NFC=No}');
Error('\P{Expands_On_NFC=No}');
Error('\p{XO_NFC=N}');
Error('\P{XO_NFC=N}');
Error('\p{Is_Expands_On_NFC:F}');
Error('\P{Is_Expands_On_NFC:F}');
Error('\p{Is_XO_NFC=False}');
Error('\P{Is_XO_NFC=False}');
Error('\p{Dash=:=  Yes}');
Error('\P{Dash=:=  Yes}');
Expect(1, 45, '\p{Dash: yes}', "");
Expect(0, 45, '\p{^Dash: yes}', "");
Expect(0, 45, '\P{Dash: yes}', "");
Expect(1, 45, '\P{^Dash: yes}', "");
Expect(0, 44, '\p{Dash: yes}', "");
Expect(1, 44, '\p{^Dash: yes}', "");
Expect(1, 44, '\P{Dash: yes}', "");
Expect(0, 44, '\P{^Dash: yes}', "");
Expect(1, 45, '\p{Dash: Yes}', "");
Expect(0, 45, '\p{^Dash: Yes}', "");
Expect(0, 45, '\P{Dash: Yes}', "");
Expect(1, 45, '\P{^Dash: Yes}', "");
Expect(0, 44, '\p{Dash: Yes}', "");
Expect(1, 44, '\p{^Dash: Yes}', "");
Expect(1, 44, '\P{Dash: Yes}', "");
Expect(0, 44, '\P{^Dash: Yes}', "");
Error('\p{Is_Dash=:=-_Y}');
Error('\P{Is_Dash=:=-_Y}');
Expect(1, 45, '\p{Is_Dash=y}', "");
Expect(0, 45, '\p{^Is_Dash=y}', "");
Expect(0, 45, '\P{Is_Dash=y}', "");
Expect(1, 45, '\P{^Is_Dash=y}', "");
Expect(0, 44, '\p{Is_Dash=y}', "");
Expect(1, 44, '\p{^Is_Dash=y}', "");
Expect(1, 44, '\P{Is_Dash=y}', "");
Expect(0, 44, '\P{^Is_Dash=y}', "");
Expect(1, 45, '\p{Is_Dash:    y}', "");
Expect(0, 45, '\p{^Is_Dash:    y}', "");
Expect(0, 45, '\P{Is_Dash:    y}', "");
Expect(1, 45, '\P{^Is_Dash:    y}', "");
Expect(0, 44, '\p{Is_Dash:    y}', "");
Expect(1, 44, '\p{^Is_Dash:    y}', "");
Expect(1, 44, '\P{Is_Dash:    y}', "");
Expect(0, 44, '\P{^Is_Dash:    y}', "");
Error('\p{Dash=:=_-t}');
Error('\P{Dash=:=_-t}');
Expect(1, 45, '\p{Dash=t}', "");
Expect(0, 45, '\p{^Dash=t}', "");
Expect(0, 45, '\P{Dash=t}', "");
Expect(1, 45, '\P{^Dash=t}', "");
Expect(0, 44, '\p{Dash=t}', "");
Expect(1, 44, '\p{^Dash=t}', "");
Expect(1, 44, '\P{Dash=t}', "");
Expect(0, 44, '\P{^Dash=t}', "");
Expect(1, 45, '\p{Dash=_-T}', "");
Expect(0, 45, '\p{^Dash=_-T}', "");
Expect(0, 45, '\P{Dash=_-T}', "");
Expect(1, 45, '\P{^Dash=_-T}', "");
Expect(0, 44, '\p{Dash=_-T}', "");
Expect(1, 44, '\p{^Dash=_-T}', "");
Expect(1, 44, '\P{Dash=_-T}', "");
Expect(0, 44, '\P{^Dash=_-T}', "");
Error('\p{Is_Dash= :=True}');
Error('\P{Is_Dash= :=True}');
Expect(1, 45, '\p{Is_Dash=true}', "");
Expect(0, 45, '\p{^Is_Dash=true}', "");
Expect(0, 45, '\P{Is_Dash=true}', "");
Expect(1, 45, '\P{^Is_Dash=true}', "");
Expect(0, 44, '\p{Is_Dash=true}', "");
Expect(1, 44, '\p{^Is_Dash=true}', "");
Expect(1, 44, '\P{Is_Dash=true}', "");
Expect(0, 44, '\P{^Is_Dash=true}', "");
Expect(1, 45, '\p{Is_Dash=-TRUE}', "");
Expect(0, 45, '\p{^Is_Dash=-TRUE}', "");
Expect(0, 45, '\P{Is_Dash=-TRUE}', "");
Expect(1, 45, '\P{^Is_Dash=-TRUE}', "");
Expect(0, 44, '\p{Is_Dash=-TRUE}', "");
Expect(1, 44, '\p{^Is_Dash=-TRUE}', "");
Expect(1, 44, '\P{Is_Dash=-TRUE}', "");
Expect(0, 44, '\P{^Is_Dash=-TRUE}', "");
Error('\p{Dash= /a/NO}');
Error('\P{Dash= /a/NO}');
Expect(1, 44, '\p{Dash=no}', "");
Expect(0, 44, '\p{^Dash=no}', "");
Expect(0, 44, '\P{Dash=no}', "");
Expect(1, 44, '\P{^Dash=no}', "");
Expect(0, 45, '\p{Dash=no}', "");
Expect(1, 45, '\p{^Dash=no}', "");
Expect(1, 45, '\P{Dash=no}', "");
Expect(0, 45, '\P{^Dash=no}', "");
Expect(1, 44, '\p{Dash=-NO}', "");
Expect(0, 44, '\p{^Dash=-NO}', "");
Expect(0, 44, '\P{Dash=-NO}', "");
Expect(1, 44, '\P{^Dash=-NO}', "");
Expect(0, 45, '\p{Dash=-NO}', "");
Expect(1, 45, '\p{^Dash=-NO}', "");
Expect(1, 45, '\P{Dash=-NO}', "");
Expect(0, 45, '\P{^Dash=-NO}', "");
Error('\p{Is_Dash=_:=N}');
Error('\P{Is_Dash=_:=N}');
Expect(1, 44, '\p{Is_Dash: n}', "");
Expect(0, 44, '\p{^Is_Dash: n}', "");
Expect(0, 44, '\P{Is_Dash: n}', "");
Expect(1, 44, '\P{^Is_Dash: n}', "");
Expect(0, 45, '\p{Is_Dash: n}', "");
Expect(1, 45, '\p{^Is_Dash: n}', "");
Expect(1, 45, '\P{Is_Dash: n}', "");
Expect(0, 45, '\P{^Is_Dash: n}', "");
Expect(1, 44, '\p{Is_Dash: _n}', "");
Expect(0, 44, '\p{^Is_Dash: _n}', "");
Expect(0, 44, '\P{Is_Dash: _n}', "");
Expect(1, 44, '\P{^Is_Dash: _n}', "");
Expect(0, 45, '\p{Is_Dash: _n}', "");
Expect(1, 45, '\p{^Is_Dash: _n}', "");
Expect(1, 45, '\P{Is_Dash: _n}', "");
Expect(0, 45, '\P{^Is_Dash: _n}', "");
Error('\p{Dash=/a/ 	F}');
Error('\P{Dash=/a/ 	F}');
Expect(1, 44, '\p{Dash=f}', "");
Expect(0, 44, '\p{^Dash=f}', "");
Expect(0, 44, '\P{Dash=f}', "");
Expect(1, 44, '\P{^Dash=f}', "");
Expect(0, 45, '\p{Dash=f}', "");
Expect(1, 45, '\p{^Dash=f}', "");
Expect(1, 45, '\P{Dash=f}', "");
Expect(0, 45, '\P{^Dash=f}', "");
Expect(1, 44, '\p{Dash=- f}', "");
Expect(0, 44, '\p{^Dash=- f}', "");
Expect(0, 44, '\P{Dash=- f}', "");
Expect(1, 44, '\P{^Dash=- f}', "");
Expect(0, 45, '\p{Dash=- f}', "");
Expect(1, 45, '\p{^Dash=- f}', "");
Expect(1, 45, '\P{Dash=- f}', "");
Expect(0, 45, '\P{^Dash=- f}', "");
Error('\p{Is_Dash=:=_False}');
Error('\P{Is_Dash=:=_False}');
Expect(1, 44, '\p{Is_Dash=false}', "");
Expect(0, 44, '\p{^Is_Dash=false}', "");
Expect(0, 44, '\P{Is_Dash=false}', "");
Expect(1, 44, '\P{^Is_Dash=false}', "");
Expect(0, 45, '\p{Is_Dash=false}', "");
Expect(1, 45, '\p{^Is_Dash=false}', "");
Expect(1, 45, '\P{Is_Dash=false}', "");
Expect(0, 45, '\P{^Is_Dash=false}', "");
Expect(1, 44, '\p{Is_Dash=_False}', "");
Expect(0, 44, '\p{^Is_Dash=_False}', "");
Expect(0, 44, '\P{Is_Dash=_False}', "");
Expect(1, 44, '\P{^Is_Dash=_False}', "");
Expect(0, 45, '\p{Is_Dash=_False}', "");
Expect(1, 45, '\p{^Is_Dash=_False}', "");
Expect(1, 45, '\P{Is_Dash=_False}', "");
Expect(0, 45, '\P{^Is_Dash=_False}', "");
Error('\p{Changes_When_Titlecased:   - Yes/a/}');
Error('\P{Changes_When_Titlecased:   - Yes/a/}');
Expect(1, 122, '\p{Changes_When_Titlecased=yes}', "");
Expect(0, 122, '\p{^Changes_When_Titlecased=yes}', "");
Expect(0, 122, '\P{Changes_When_Titlecased=yes}', "");
Expect(1, 122, '\P{^Changes_When_Titlecased=yes}', "");
Expect(0, 96, '\p{Changes_When_Titlecased=yes}', "");
Expect(1, 96, '\p{^Changes_When_Titlecased=yes}', "");
Expect(1, 96, '\P{Changes_When_Titlecased=yes}', "");
Expect(0, 96, '\P{^Changes_When_Titlecased=yes}', "");
Expect(1, 122, '\p{Changes_When_Titlecased:	 _Yes}', "");
Expect(0, 122, '\p{^Changes_When_Titlecased:	 _Yes}', "");
Expect(0, 122, '\P{Changes_When_Titlecased:	 _Yes}', "");
Expect(1, 122, '\P{^Changes_When_Titlecased:	 _Yes}', "");
Expect(0, 96, '\p{Changes_When_Titlecased:	 _Yes}', "");
Expect(1, 96, '\p{^Changes_When_Titlecased:	 _Yes}', "");
Expect(1, 96, '\P{Changes_When_Titlecased:	 _Yes}', "");
Expect(0, 96, '\P{^Changes_When_Titlecased:	 _Yes}', "");
Error('\p{CWT=/a/_-Y}');
Error('\P{CWT=/a/_-Y}');
Expect(1, 122, '\p{CWT:y}', "");
Expect(0, 122, '\p{^CWT:y}', "");
Expect(0, 122, '\P{CWT:y}', "");
Expect(1, 122, '\P{^CWT:y}', "");
Expect(0, 96, '\p{CWT:y}', "");
Expect(1, 96, '\p{^CWT:y}', "");
Expect(1, 96, '\P{CWT:y}', "");
Expect(0, 96, '\P{^CWT:y}', "");
Expect(1, 122, '\p{CWT=_y}', "");
Expect(0, 122, '\p{^CWT=_y}', "");
Expect(0, 122, '\P{CWT=_y}', "");
Expect(1, 122, '\P{^CWT=_y}', "");
Expect(0, 96, '\p{CWT=_y}', "");
Expect(1, 96, '\p{^CWT=_y}', "");
Expect(1, 96, '\P{CWT=_y}', "");
Expect(0, 96, '\P{^CWT=_y}', "");
Error('\p{Is_Changes_When_Titlecased=_:=T}');
Error('\P{Is_Changes_When_Titlecased=_:=T}');
Expect(1, 122, '\p{Is_Changes_When_Titlecased=t}', "");
Expect(0, 122, '\p{^Is_Changes_When_Titlecased=t}', "");
Expect(0, 122, '\P{Is_Changes_When_Titlecased=t}', "");
Expect(1, 122, '\P{^Is_Changes_When_Titlecased=t}', "");
Expect(0, 96, '\p{Is_Changes_When_Titlecased=t}', "");
Expect(1, 96, '\p{^Is_Changes_When_Titlecased=t}', "");
Expect(1, 96, '\P{Is_Changes_When_Titlecased=t}', "");
Expect(0, 96, '\P{^Is_Changes_When_Titlecased=t}', "");
Expect(1, 122, '\p{Is_Changes_When_Titlecased= -T}', "");
Expect(0, 122, '\p{^Is_Changes_When_Titlecased= -T}', "");
Expect(0, 122, '\P{Is_Changes_When_Titlecased= -T}', "");
Expect(1, 122, '\P{^Is_Changes_When_Titlecased= -T}', "");
Expect(0, 96, '\p{Is_Changes_When_Titlecased= -T}', "");
Expect(1, 96, '\p{^Is_Changes_When_Titlecased= -T}', "");
Expect(1, 96, '\P{Is_Changes_When_Titlecased= -T}', "");
Expect(0, 96, '\P{^Is_Changes_When_Titlecased= -T}', "");
Error('\p{Is_CWT=:=_TRUE}');
Error('\P{Is_CWT=:=_TRUE}');
Expect(1, 122, '\p{Is_CWT=true}', "");
Expect(0, 122, '\p{^Is_CWT=true}', "");
Expect(0, 122, '\P{Is_CWT=true}', "");
Expect(1, 122, '\P{^Is_CWT=true}', "");
Expect(0, 96, '\p{Is_CWT=true}', "");
Expect(1, 96, '\p{^Is_CWT=true}', "");
Expect(1, 96, '\P{Is_CWT=true}', "");
Expect(0, 96, '\P{^Is_CWT=true}', "");
Expect(1, 122, '\p{Is_CWT=- TRUE}', "");
Expect(0, 122, '\p{^Is_CWT=- TRUE}', "");
Expect(0, 122, '\P{Is_CWT=- TRUE}', "");
Expect(1, 122, '\P{^Is_CWT=- TRUE}', "");
Expect(0, 96, '\p{Is_CWT=- TRUE}', "");
Expect(1, 96, '\p{^Is_CWT=- TRUE}', "");
Expect(1, 96, '\P{Is_CWT=- TRUE}', "");
Expect(0, 96, '\P{^Is_CWT=- TRUE}', "");
Error('\p{Changes_When_Titlecased=		No:=}');
Error('\P{Changes_When_Titlecased=		No:=}');
Expect(1, 96, '\p{Changes_When_Titlecased:no}', "");
Expect(0, 96, '\p{^Changes_When_Titlecased:no}', "");
Expect(0, 96, '\P{Changes_When_Titlecased:no}', "");
Expect(1, 96, '\P{^Changes_When_Titlecased:no}', "");
Expect(0, 122, '\p{Changes_When_Titlecased:no}', "");
Expect(1, 122, '\p{^Changes_When_Titlecased:no}', "");
Expect(1, 122, '\P{Changes_When_Titlecased:no}', "");
Expect(0, 122, '\P{^Changes_When_Titlecased:no}', "");
Expect(1, 96, '\p{Changes_When_Titlecased=		no}', "");
Expect(0, 96, '\p{^Changes_When_Titlecased=		no}', "");
Expect(0, 96, '\P{Changes_When_Titlecased=		no}', "");
Expect(1, 96, '\P{^Changes_When_Titlecased=		no}', "");
Expect(0, 122, '\p{Changes_When_Titlecased=		no}', "");
Expect(1, 122, '\p{^Changes_When_Titlecased=		no}', "");
Expect(1, 122, '\P{Changes_When_Titlecased=		no}', "");
Expect(0, 122, '\P{^Changes_When_Titlecased=		no}', "");
Error('\p{CWT=:=		N}');
Error('\P{CWT=:=		N}');
Expect(1, 96, '\p{CWT=n}', "");
Expect(0, 96, '\p{^CWT=n}', "");
Expect(0, 96, '\P{CWT=n}', "");
Expect(1, 96, '\P{^CWT=n}', "");
Expect(0, 122, '\p{CWT=n}', "");
Expect(1, 122, '\p{^CWT=n}', "");
Expect(1, 122, '\P{CWT=n}', "");
Expect(0, 122, '\P{^CWT=n}', "");
Expect(1, 96, '\p{CWT=		N}', "");
Expect(0, 96, '\p{^CWT=		N}', "");
Expect(0, 96, '\P{CWT=		N}', "");
Expect(1, 96, '\P{^CWT=		N}', "");
Expect(0, 122, '\p{CWT=		N}', "");
Expect(1, 122, '\p{^CWT=		N}', "");
Expect(1, 122, '\P{CWT=		N}', "");
Expect(0, 122, '\P{^CWT=		N}', "");
Error('\p{Is_Changes_When_Titlecased=/a/_-F}');
Error('\P{Is_Changes_When_Titlecased=/a/_-F}');
Expect(1, 96, '\p{Is_Changes_When_Titlecased=f}', "");
Expect(0, 96, '\p{^Is_Changes_When_Titlecased=f}', "");
Expect(0, 96, '\P{Is_Changes_When_Titlecased=f}', "");
Expect(1, 96, '\P{^Is_Changes_When_Titlecased=f}', "");
Expect(0, 122, '\p{Is_Changes_When_Titlecased=f}', "");
Expect(1, 122, '\p{^Is_Changes_When_Titlecased=f}', "");
Expect(1, 122, '\P{Is_Changes_When_Titlecased=f}', "");
Expect(0, 122, '\P{^Is_Changes_When_Titlecased=f}', "");
Expect(1, 96, '\p{Is_Changes_When_Titlecased= _F}', "");
Expect(0, 96, '\p{^Is_Changes_When_Titlecased= _F}', "");
Expect(0, 96, '\P{Is_Changes_When_Titlecased= _F}', "");
Expect(1, 96, '\P{^Is_Changes_When_Titlecased= _F}', "");
Expect(0, 122, '\p{Is_Changes_When_Titlecased= _F}', "");
Expect(1, 122, '\p{^Is_Changes_When_Titlecased= _F}', "");
Expect(1, 122, '\P{Is_Changes_When_Titlecased= _F}', "");
Expect(0, 122, '\P{^Is_Changes_When_Titlecased= _F}', "");
Error('\p{Is_CWT=	/a/false}');
Error('\P{Is_CWT=	/a/false}');
Expect(1, 96, '\p{Is_CWT=false}', "");
Expect(0, 96, '\p{^Is_CWT=false}', "");
Expect(0, 96, '\P{Is_CWT=false}', "");
Expect(1, 96, '\P{^Is_CWT=false}', "");
Expect(0, 122, '\p{Is_CWT=false}', "");
Expect(1, 122, '\p{^Is_CWT=false}', "");
Expect(1, 122, '\P{Is_CWT=false}', "");
Expect(0, 122, '\P{^Is_CWT=false}', "");
Expect(1, 96, '\p{Is_CWT=  false}', "");
Expect(0, 96, '\p{^Is_CWT=  false}', "");
Expect(0, 96, '\P{Is_CWT=  false}', "");
Expect(1, 96, '\P{^Is_CWT=  false}', "");
Expect(0, 122, '\p{Is_CWT=  false}', "");
Expect(1, 122, '\p{^Is_CWT=  false}', "");
Expect(1, 122, '\P{Is_CWT=  false}', "");
Expect(0, 122, '\P{^Is_CWT=  false}', "");
Error('\p{Hangul_Syllable_Type=  Trailing_Jamo:=}');
Error('\P{Hangul_Syllable_Type=  Trailing_Jamo:=}');
Expect(1, 4607, '\p{Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4607, '\p{^Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4607, '\P{Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4607, '\P{^Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4519, '\p{Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4519, '\p{^Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4519, '\P{Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4519, '\P{^Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4607, '\p{Hangul_Syllable_Type:	TRAILING_Jamo}', "");
Expect(0, 4607, '\p{^Hangul_Syllable_Type:	TRAILING_Jamo}', "");
Expect(0, 4607, '\P{Hangul_Syllable_Type:	TRAILING_Jamo}', "");
Expect(1, 4607, '\P{^Hangul_Syllable_Type:	TRAILING_Jamo}', "");
Expect(0, 4519, '\p{Hangul_Syllable_Type:	TRAILING_Jamo}', "");
Expect(1, 4519, '\p{^Hangul_Syllable_Type:	TRAILING_Jamo}', "");
Expect(1, 4519, '\P{Hangul_Syllable_Type:	TRAILING_Jamo}', "");
Expect(0, 4519, '\P{^Hangul_Syllable_Type:	TRAILING_Jamo}', "");
Error('\p{Hst=:=__T}');
Error('\P{Hst=:=__T}');
Expect(1, 4607, '\p{Hst=t}', "");
Expect(0, 4607, '\p{^Hst=t}', "");
Expect(0, 4607, '\P{Hst=t}', "");
Expect(1, 4607, '\P{^Hst=t}', "");
Expect(0, 4519, '\p{Hst=t}', "");
Expect(1, 4519, '\p{^Hst=t}', "");
Expect(1, 4519, '\P{Hst=t}', "");
Expect(0, 4519, '\P{^Hst=t}', "");
Expect(1, 4607, '\p{Hst=_ T}', "");
Expect(0, 4607, '\p{^Hst=_ T}', "");
Expect(0, 4607, '\P{Hst=_ T}', "");
Expect(1, 4607, '\P{^Hst=_ T}', "");
Expect(0, 4519, '\p{Hst=_ T}', "");
Expect(1, 4519, '\p{^Hst=_ T}', "");
Expect(1, 4519, '\P{Hst=_ T}', "");
Expect(0, 4519, '\P{^Hst=_ T}', "");
Error('\p{Is_Hangul_Syllable_Type=:=-	trailing_Jamo}');
Error('\P{Is_Hangul_Syllable_Type=:=-	trailing_Jamo}');
Expect(1, 4607, '\p{Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4607, '\p{^Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4607, '\P{Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4607, '\P{^Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4519, '\p{Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4519, '\p{^Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4519, '\P{Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(0, 4519, '\P{^Is_Hangul_Syllable_Type=trailingjamo}', "");
Expect(1, 4607, '\p{Is_Hangul_Syllable_Type=-TRAILINGJAMO}', "");
Expect(0, 4607, '\p{^Is_Hangul_Syllable_Type=-TRAILINGJAMO}', "");
Expect(0, 4607, '\P{Is_Hangul_Syllable_Type=-TRAILINGJAMO}', "");
Expect(1, 4607, '\P{^Is_Hangul_Syllable_Type=-TRAILINGJAMO}', "");
Expect(0, 4519, '\p{Is_Hangul_Syllable_Type=-TRAILINGJAMO}', "");
Expect(1, 4519, '\p{^Is_Hangul_Syllable_Type=-TRAILINGJAMO}', "");
Expect(1, 4519, '\P{Is_Hangul_Syllable_Type=-TRAILINGJAMO}', "");
Expect(0, 4519, '\P{^Is_Hangul_Syllable_Type=-TRAILINGJAMO}', "");
Error('\p{Is_Hst=:= T}');
Error('\P{Is_Hst=:= T}');
Expect(1, 4607, '\p{Is_Hst=t}', "");
Expect(0, 4607, '\p{^Is_Hst=t}', "");
Expect(0, 4607, '\P{Is_Hst=t}', "");
Expect(1, 4607, '\P{^Is_Hst=t}', "");
Expect(0, 4519, '\p{Is_Hst=t}', "");
Expect(1, 4519, '\p{^Is_Hst=t}', "");
Expect(1, 4519, '\P{Is_Hst=t}', "");
Expect(0, 4519, '\P{^Is_Hst=t}', "");
Expect(1, 4607, '\p{Is_Hst=T}', "");
Expect(0, 4607, '\p{^Is_Hst=T}', "");
Expect(0, 4607, '\P{Is_Hst=T}', "");
Expect(1, 4607, '\P{^Is_Hst=T}', "");
Expect(0, 4519, '\p{Is_Hst=T}', "");
Expect(1, 4519, '\p{^Is_Hst=T}', "");
Expect(1, 4519, '\P{Is_Hst=T}', "");
Expect(0, 4519, '\P{^Is_Hst=T}', "");
Error('\p{Hangul_Syllable_Type=_-lvt:=Syllable}');
Error('\P{Hangul_Syllable_Type=_-lvt:=Syllable}');
Expect(1, 44059, '\p{Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(0, 44059, '\p{^Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(0, 44059, '\P{Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(1, 44059, '\P{^Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(0, 44032, '\p{Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(1, 44032, '\p{^Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(1, 44032, '\P{Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(0, 44032, '\P{^Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(1, 44059, '\p{Hangul_Syllable_Type= lvtSyllable}', "");
Expect(0, 44059, '\p{^Hangul_Syllable_Type= lvtSyllable}', "");
Expect(0, 44059, '\P{Hangul_Syllable_Type= lvtSyllable}', "");
Expect(1, 44059, '\P{^Hangul_Syllable_Type= lvtSyllable}', "");
Expect(0, 44032, '\p{Hangul_Syllable_Type= lvtSyllable}', "");
Expect(1, 44032, '\p{^Hangul_Syllable_Type= lvtSyllable}', "");
Expect(1, 44032, '\P{Hangul_Syllable_Type= lvtSyllable}', "");
Expect(0, 44032, '\P{^Hangul_Syllable_Type= lvtSyllable}', "");
Error('\p{Hst=:=	LVT}');
Error('\P{Hst=:=	LVT}');
Expect(1, 44059, '\p{Hst=lvt}', "");
Expect(0, 44059, '\p{^Hst=lvt}', "");
Expect(0, 44059, '\P{Hst=lvt}', "");
Expect(1, 44059, '\P{^Hst=lvt}', "");
Expect(0, 44032, '\p{Hst=lvt}', "");
Expect(1, 44032, '\p{^Hst=lvt}', "");
Expect(1, 44032, '\P{Hst=lvt}', "");
Expect(0, 44032, '\P{^Hst=lvt}', "");
Expect(1, 44059, '\p{Hst=-lvt}', "");
Expect(0, 44059, '\p{^Hst=-lvt}', "");
Expect(0, 44059, '\P{Hst=-lvt}', "");
Expect(1, 44059, '\P{^Hst=-lvt}', "");
Expect(0, 44032, '\p{Hst=-lvt}', "");
Expect(1, 44032, '\p{^Hst=-lvt}', "");
Expect(1, 44032, '\P{Hst=-lvt}', "");
Expect(0, 44032, '\P{^Hst=-lvt}', "");
Error('\p{Is_Hangul_Syllable_Type= :=LVT-Syllable}');
Error('\P{Is_Hangul_Syllable_Type= :=LVT-Syllable}');
Expect(1, 44059, '\p{Is_Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(0, 44059, '\p{^Is_Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(0, 44059, '\P{Is_Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(1, 44059, '\P{^Is_Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(0, 44032, '\p{Is_Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(1, 44032, '\p{^Is_Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(1, 44032, '\P{Is_Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(0, 44032, '\P{^Is_Hangul_Syllable_Type:   lvtsyllable}', "");
Expect(1, 44059, '\p{Is_Hangul_Syllable_Type= lvt-Syllable}', "");
Expect(0, 44059, '\p{^Is_Hangul_Syllable_Type= lvt-Syllable}', "");
Expect(0, 44059, '\P{Is_Hangul_Syllable_Type= lvt-Syllable}', "");
Expect(1, 44059, '\P{^Is_Hangul_Syllable_Type= lvt-Syllable}', "");
Expect(0, 44032, '\p{Is_Hangul_Syllable_Type= lvt-Syllable}', "");
Expect(1, 44032, '\p{^Is_Hangul_Syllable_Type= lvt-Syllable}', "");
Expect(1, 44032, '\P{Is_Hangul_Syllable_Type= lvt-Syllable}', "");
Expect(0, 44032, '\P{^Is_Hangul_Syllable_Type= lvt-Syllable}', "");
Error('\p{Is_Hst=:=--lvt}');
Error('\P{Is_Hst=:=--lvt}');
Expect(1, 44059, '\p{Is_Hst=lvt}', "");
Expect(0, 44059, '\p{^Is_Hst=lvt}', "");
Expect(0, 44059, '\P{Is_Hst=lvt}', "");
Expect(1, 44059, '\P{^Is_Hst=lvt}', "");
Expect(0, 44032, '\p{Is_Hst=lvt}', "");
Expect(1, 44032, '\p{^Is_Hst=lvt}', "");
Expect(1, 44032, '\P{Is_Hst=lvt}', "");
Expect(0, 44032, '\P{^Is_Hst=lvt}', "");
Expect(1, 44059, '\p{Is_Hst= LVT}', "");
Expect(0, 44059, '\p{^Is_Hst= LVT}', "");
Expect(0, 44059, '\P{Is_Hst= LVT}', "");
Expect(1, 44059, '\P{^Is_Hst= LVT}', "");
Expect(0, 44032, '\p{Is_Hst= LVT}', "");
Expect(1, 44032, '\p{^Is_Hst= LVT}', "");
Expect(1, 44032, '\P{Is_Hst= LVT}', "");
Expect(0, 44032, '\P{^Is_Hst= LVT}', "");
Error('\p{Hangul_Syllable_Type=/a/ 	Vowel_jamo}');
Error('\P{Hangul_Syllable_Type=/a/ 	Vowel_jamo}');
Expect(1, 4519, '\p{Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4519, '\p{^Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4519, '\P{Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4519, '\P{^Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4447, '\p{Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4447, '\p{^Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4447, '\P{Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4447, '\P{^Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4519, '\p{Hangul_Syllable_Type=VOWEL-JAMO}', "");
Expect(0, 4519, '\p{^Hangul_Syllable_Type=VOWEL-JAMO}', "");
Expect(0, 4519, '\P{Hangul_Syllable_Type=VOWEL-JAMO}', "");
Expect(1, 4519, '\P{^Hangul_Syllable_Type=VOWEL-JAMO}', "");
Expect(0, 4447, '\p{Hangul_Syllable_Type=VOWEL-JAMO}', "");
Expect(1, 4447, '\p{^Hangul_Syllable_Type=VOWEL-JAMO}', "");
Expect(1, 4447, '\P{Hangul_Syllable_Type=VOWEL-JAMO}', "");
Expect(0, 4447, '\P{^Hangul_Syllable_Type=VOWEL-JAMO}', "");
Error('\p{Hst=_ V:=}');
Error('\P{Hst=_ V:=}');
Expect(1, 4519, '\p{Hst=v}', "");
Expect(0, 4519, '\p{^Hst=v}', "");
Expect(0, 4519, '\P{Hst=v}', "");
Expect(1, 4519, '\P{^Hst=v}', "");
Expect(0, 4447, '\p{Hst=v}', "");
Expect(1, 4447, '\p{^Hst=v}', "");
Expect(1, 4447, '\P{Hst=v}', "");
Expect(0, 4447, '\P{^Hst=v}', "");
Expect(1, 4519, '\p{Hst= V}', "");
Expect(0, 4519, '\p{^Hst= V}', "");
Expect(0, 4519, '\P{Hst= V}', "");
Expect(1, 4519, '\P{^Hst= V}', "");
Expect(0, 4447, '\p{Hst= V}', "");
Expect(1, 4447, '\p{^Hst= V}', "");
Expect(1, 4447, '\P{Hst= V}', "");
Expect(0, 4447, '\P{^Hst= V}', "");
Error('\p{Is_Hangul_Syllable_Type= vowel:=JAMO}');
Error('\P{Is_Hangul_Syllable_Type= vowel:=JAMO}');
Expect(1, 4519, '\p{Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4519, '\p{^Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4519, '\P{Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4519, '\P{^Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4447, '\p{Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4447, '\p{^Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4447, '\P{Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(0, 4447, '\P{^Is_Hangul_Syllable_Type=voweljamo}', "");
Expect(1, 4519, '\p{Is_Hangul_Syllable_Type=	-Vowel Jamo}', "");
Expect(0, 4519, '\p{^Is_Hangul_Syllable_Type=	-Vowel Jamo}', "");
Expect(0, 4519, '\P{Is_Hangul_Syllable_Type=	-Vowel Jamo}', "");
Expect(1, 4519, '\P{^Is_Hangul_Syllable_Type=	-Vowel Jamo}', "");
Expect(0, 4447, '\p{Is_Hangul_Syllable_Type=	-Vowel Jamo}', "");
Expect(1, 4447, '\p{^Is_Hangul_Syllable_Type=	-Vowel Jamo}', "");
Expect(1, 4447, '\P{Is_Hangul_Syllable_Type=	-Vowel Jamo}', "");
Expect(0, 4447, '\P{^Is_Hangul_Syllable_Type=	-Vowel Jamo}', "");
Error('\p{Is_Hst= v:=}');
Error('\P{Is_Hst= v:=}');
Expect(1, 4519, '\p{Is_Hst=v}', "");
Expect(0, 4519, '\p{^Is_Hst=v}', "");
Expect(0, 4519, '\P{Is_Hst=v}', "");
Expect(1, 4519, '\P{^Is_Hst=v}', "");
Expect(0, 4447, '\p{Is_Hst=v}', "");
Expect(1, 4447, '\p{^Is_Hst=v}', "");
Expect(1, 4447, '\P{Is_Hst=v}', "");
Expect(0, 4447, '\P{^Is_Hst=v}', "");
Error('\p{Hangul_Syllable_Type=-/a/LV Syllable}');
Error('\P{Hangul_Syllable_Type=-/a/LV Syllable}');
Expect(1, 44032, '\p{Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44032, '\p{^Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44032, '\P{Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44032, '\P{^Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44031, '\p{Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44031, '\p{^Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44031, '\P{Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44031, '\P{^Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44032, '\p{Hangul_Syllable_Type=-LV syllable}', "");
Expect(0, 44032, '\p{^Hangul_Syllable_Type=-LV syllable}', "");
Expect(0, 44032, '\P{Hangul_Syllable_Type=-LV syllable}', "");
Expect(1, 44032, '\P{^Hangul_Syllable_Type=-LV syllable}', "");
Expect(0, 44031, '\p{Hangul_Syllable_Type=-LV syllable}', "");
Expect(1, 44031, '\p{^Hangul_Syllable_Type=-LV syllable}', "");
Expect(1, 44031, '\P{Hangul_Syllable_Type=-LV syllable}', "");
Expect(0, 44031, '\P{^Hangul_Syllable_Type=-LV syllable}', "");
Error('\p{Hst=/a/ -LV}');
Error('\P{Hst=/a/ -LV}');
Expect(1, 44032, '\p{Hst: lv}', "");
Expect(0, 44032, '\p{^Hst: lv}', "");
Expect(0, 44032, '\P{Hst: lv}', "");
Expect(1, 44032, '\P{^Hst: lv}', "");
Expect(0, 44031, '\p{Hst: lv}', "");
Expect(1, 44031, '\p{^Hst: lv}', "");
Expect(1, 44031, '\P{Hst: lv}', "");
Expect(0, 44031, '\P{^Hst: lv}', "");
Expect(1, 44032, '\p{Hst=-	LV}', "");
Expect(0, 44032, '\p{^Hst=-	LV}', "");
Expect(0, 44032, '\P{Hst=-	LV}', "");
Expect(1, 44032, '\P{^Hst=-	LV}', "");
Expect(0, 44031, '\p{Hst=-	LV}', "");
Expect(1, 44031, '\p{^Hst=-	LV}', "");
Expect(1, 44031, '\P{Hst=-	LV}', "");
Expect(0, 44031, '\P{^Hst=-	LV}', "");
Error('\p{Is_Hangul_Syllable_Type=:=--lv_Syllable}');
Error('\P{Is_Hangul_Syllable_Type=:=--lv_Syllable}');
Expect(1, 44032, '\p{Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44032, '\p{^Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44032, '\P{Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44032, '\P{^Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44031, '\p{Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44031, '\p{^Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44031, '\P{Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(0, 44031, '\P{^Is_Hangul_Syllable_Type=lvsyllable}', "");
Expect(1, 44032, '\p{Is_Hangul_Syllable_Type= _LV	Syllable}', "");
Expect(0, 44032, '\p{^Is_Hangul_Syllable_Type= _LV	Syllable}', "");
Expect(0, 44032, '\P{Is_Hangul_Syllable_Type= _LV	Syllable}', "");
Expect(1, 44032, '\P{^Is_Hangul_Syllable_Type= _LV	Syllable}', "");
Expect(0, 44031, '\p{Is_Hangul_Syllable_Type= _LV	Syllable}', "");
Expect(1, 44031, '\p{^Is_Hangul_Syllable_Type= _LV	Syllable}', "");
Expect(1, 44031, '\P{Is_Hangul_Syllable_Type= _LV	Syllable}', "");
Expect(0, 44031, '\P{^Is_Hangul_Syllable_Type= _LV	Syllable}', "");
Error('\p{Is_Hst=:=_LV}');
Error('\P{Is_Hst=:=_LV}');
Expect(1, 44032, '\p{Is_Hst:   lv}', "");
Expect(0, 44032, '\p{^Is_Hst:   lv}', "");
Expect(0, 44032, '\P{Is_Hst:   lv}', "");
Expect(1, 44032, '\P{^Is_Hst:   lv}', "");
Expect(0, 44031, '\p{Is_Hst:   lv}', "");
Expect(1, 44031, '\p{^Is_Hst:   lv}', "");
Expect(1, 44031, '\P{Is_Hst:   lv}', "");
Expect(0, 44031, '\P{^Is_Hst:   lv}', "");
Expect(1, 44032, '\p{Is_Hst=-_LV}', "");
Expect(0, 44032, '\p{^Is_Hst=-_LV}', "");
Expect(0, 44032, '\P{Is_Hst=-_LV}', "");
Expect(1, 44032, '\P{^Is_Hst=-_LV}', "");
Expect(0, 44031, '\p{Is_Hst=-_LV}', "");
Expect(1, 44031, '\p{^Is_Hst=-_LV}', "");
Expect(1, 44031, '\P{Is_Hst=-_LV}', "");
Expect(0, 44031, '\P{^Is_Hst=-_LV}', "");
Error('\p{Hangul_Syllable_Type=	:=notApplicable}');
Error('\P{Hangul_Syllable_Type=	:=notApplicable}');
Expect(1, 4351, '\p{Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4351, '\p{^Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4351, '\P{Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4351, '\P{^Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4607, '\p{Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4607, '\p{^Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4607, '\P{Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4607, '\P{^Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4351, '\p{Hangul_Syllable_Type:	- Not APPLICABLE}', "");
Expect(0, 4351, '\p{^Hangul_Syllable_Type:	- Not APPLICABLE}', "");
Expect(0, 4351, '\P{Hangul_Syllable_Type:	- Not APPLICABLE}', "");
Expect(1, 4351, '\P{^Hangul_Syllable_Type:	- Not APPLICABLE}', "");
Expect(0, 4607, '\p{Hangul_Syllable_Type:	- Not APPLICABLE}', "");
Expect(1, 4607, '\p{^Hangul_Syllable_Type:	- Not APPLICABLE}', "");
Expect(1, 4607, '\P{Hangul_Syllable_Type:	- Not APPLICABLE}', "");
Expect(0, 4607, '\P{^Hangul_Syllable_Type:	- Not APPLICABLE}', "");
Error('\p{Hst:	_-NA:=}');
Error('\P{Hst:	_-NA:=}');
Expect(1, 4351, '\p{Hst=na}', "");
Expect(0, 4351, '\p{^Hst=na}', "");
Expect(0, 4351, '\P{Hst=na}', "");
Expect(1, 4351, '\P{^Hst=na}', "");
Expect(0, 4607, '\p{Hst=na}', "");
Expect(1, 4607, '\p{^Hst=na}', "");
Expect(1, 4607, '\P{Hst=na}', "");
Expect(0, 4607, '\P{^Hst=na}', "");
Expect(1, 4351, '\p{Hst=_ NA}', "");
Expect(0, 4351, '\p{^Hst=_ NA}', "");
Expect(0, 4351, '\P{Hst=_ NA}', "");
Expect(1, 4351, '\P{^Hst=_ NA}', "");
Expect(0, 4607, '\p{Hst=_ NA}', "");
Expect(1, 4607, '\p{^Hst=_ NA}', "");
Expect(1, 4607, '\P{Hst=_ NA}', "");
Expect(0, 4607, '\P{^Hst=_ NA}', "");
Error('\p{Is_Hangul_Syllable_Type=	:=Not Applicable}');
Error('\P{Is_Hangul_Syllable_Type=	:=Not Applicable}');
Expect(1, 4351, '\p{Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4351, '\p{^Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4351, '\P{Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4351, '\P{^Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4607, '\p{Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4607, '\p{^Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4607, '\P{Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(0, 4607, '\P{^Is_Hangul_Syllable_Type=notapplicable}', "");
Expect(1, 4351, '\p{Is_Hangul_Syllable_Type= _Notapplicable}', "");
Expect(0, 4351, '\p{^Is_Hangul_Syllable_Type= _Notapplicable}', "");
Expect(0, 4351, '\P{Is_Hangul_Syllable_Type= _Notapplicable}', "");
Expect(1, 4351, '\P{^Is_Hangul_Syllable_Type= _Notapplicable}', "");
Expect(0, 4607, '\p{Is_Hangul_Syllable_Type= _Notapplicable}', "");
Expect(1, 4607, '\p{^Is_Hangul_Syllable_Type= _Notapplicable}', "");
Expect(1, 4607, '\P{Is_Hangul_Syllable_Type= _Notapplicable}', "");
Expect(0, 4607, '\P{^Is_Hangul_Syllable_Type= _Notapplicable}', "");
Error('\p{Is_Hst=_ NA:=}');
Error('\P{Is_Hst=_ NA:=}');
Expect(1, 4351, '\p{Is_Hst=na}', "");
Expect(0, 4351, '\p{^Is_Hst=na}', "");
Expect(0, 4351, '\P{Is_Hst=na}', "");
Expect(1, 4351, '\P{^Is_Hst=na}', "");
Expect(0, 4607, '\p{Is_Hst=na}', "");
Expect(1, 4607, '\p{^Is_Hst=na}', "");
Expect(1, 4607, '\P{Is_Hst=na}', "");
Expect(0, 4607, '\P{^Is_Hst=na}', "");
Expect(1, 4351, '\p{Is_Hst:--NA}', "");
Expect(0, 4351, '\p{^Is_Hst:--NA}', "");
Expect(0, 4351, '\P{Is_Hst:--NA}', "");
Expect(1, 4351, '\P{^Is_Hst:--NA}', "");
Expect(0, 4607, '\p{Is_Hst:--NA}', "");
Expect(1, 4607, '\p{^Is_Hst:--NA}', "");
Expect(1, 4607, '\P{Is_Hst:--NA}', "");
Expect(0, 4607, '\P{^Is_Hst:--NA}', "");
Error('\p{Hangul_Syllable_Type=LEADING	Jamo:=}');
Error('\P{Hangul_Syllable_Type=LEADING	Jamo:=}');
Expect(1, 4447, '\p{Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4447, '\p{^Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4447, '\P{Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4447, '\P{^Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4351, '\p{Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4351, '\p{^Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4351, '\P{Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4351, '\P{^Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4447, '\p{Hangul_Syllable_Type=-	leading jamo}', "");
Expect(0, 4447, '\p{^Hangul_Syllable_Type=-	leading jamo}', "");
Expect(0, 4447, '\P{Hangul_Syllable_Type=-	leading jamo}', "");
Expect(1, 4447, '\P{^Hangul_Syllable_Type=-	leading jamo}', "");
Expect(0, 4351, '\p{Hangul_Syllable_Type=-	leading jamo}', "");
Expect(1, 4351, '\p{^Hangul_Syllable_Type=-	leading jamo}', "");
Expect(1, 4351, '\P{Hangul_Syllable_Type=-	leading jamo}', "");
Expect(0, 4351, '\P{^Hangul_Syllable_Type=-	leading jamo}', "");
Error('\p{Hst=l/a/}');
Error('\P{Hst=l/a/}');
Expect(1, 4447, '\p{Hst=l}', "");
Expect(0, 4447, '\p{^Hst=l}', "");
Expect(0, 4447, '\P{Hst=l}', "");
Expect(1, 4447, '\P{^Hst=l}', "");
Expect(0, 4351, '\p{Hst=l}', "");
Expect(1, 4351, '\p{^Hst=l}', "");
Expect(1, 4351, '\P{Hst=l}', "");
Expect(0, 4351, '\P{^Hst=l}', "");
Expect(1, 4447, '\p{Hst=-	L}', "");
Expect(0, 4447, '\p{^Hst=-	L}', "");
Expect(0, 4447, '\P{Hst=-	L}', "");
Expect(1, 4447, '\P{^Hst=-	L}', "");
Expect(0, 4351, '\p{Hst=-	L}', "");
Expect(1, 4351, '\p{^Hst=-	L}', "");
Expect(1, 4351, '\P{Hst=-	L}', "");
Expect(0, 4351, '\P{^Hst=-	L}', "");
Error('\p{Is_Hangul_Syllable_Type=:=leading_jamo}');
Error('\P{Is_Hangul_Syllable_Type=:=leading_jamo}');
Expect(1, 4447, '\p{Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4447, '\p{^Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4447, '\P{Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4447, '\P{^Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4351, '\p{Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4351, '\p{^Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4351, '\P{Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(0, 4351, '\P{^Is_Hangul_Syllable_Type=leadingjamo}', "");
Expect(1, 4447, '\p{Is_Hangul_Syllable_Type:-	LEADING Jamo}', "");
Expect(0, 4447, '\p{^Is_Hangul_Syllable_Type:-	LEADING Jamo}', "");
Expect(0, 4447, '\P{Is_Hangul_Syllable_Type:-	LEADING Jamo}', "");
Expect(1, 4447, '\P{^Is_Hangul_Syllable_Type:-	LEADING Jamo}', "");
Expect(0, 4351, '\p{Is_Hangul_Syllable_Type:-	LEADING Jamo}', "");
Expect(1, 4351, '\p{^Is_Hangul_Syllable_Type:-	LEADING Jamo}', "");
Expect(1, 4351, '\P{Is_Hangul_Syllable_Type:-	LEADING Jamo}', "");
Expect(0, 4351, '\P{^Is_Hangul_Syllable_Type:-	LEADING Jamo}', "");
Error('\p{Is_Hst=-/a/l}');
Error('\P{Is_Hst=-/a/l}');
Expect(1, 4447, '\p{Is_Hst=l}', "");
Expect(0, 4447, '\p{^Is_Hst=l}', "");
Expect(0, 4447, '\P{Is_Hst=l}', "");
Expect(1, 4447, '\P{^Is_Hst=l}', "");
Expect(0, 4351, '\p{Is_Hst=l}', "");
Expect(1, 4351, '\p{^Is_Hst=l}', "");
Expect(1, 4351, '\P{Is_Hst=l}', "");
Expect(0, 4351, '\P{^Is_Hst=l}', "");
Expect(1, 4447, '\p{Is_Hst=-L}', "");
Expect(0, 4447, '\p{^Is_Hst=-L}', "");
Expect(0, 4447, '\P{Is_Hst=-L}', "");
Expect(1, 4447, '\P{^Is_Hst=-L}', "");
Expect(0, 4351, '\p{Is_Hst=-L}', "");
Expect(1, 4351, '\p{^Is_Hst=-L}', "");
Expect(1, 4351, '\P{Is_Hst=-L}', "");
Expect(0, 4351, '\P{^Is_Hst=-L}', "");
Error('\p{Noncharacter_Code_Point= :=Yes}');
Error('\P{Noncharacter_Code_Point= :=Yes}');
Expect(0, 64975, '\p{Noncharacter_Code_Point=yes}', "");
Expect(1, 64975, '\p{^Noncharacter_Code_Point=yes}', "");
Expect(1, 64975, '\P{Noncharacter_Code_Point=yes}', "");
Expect(0, 64975, '\P{^Noncharacter_Code_Point=yes}', "");
Expect(0, 64975, '\p{Noncharacter_Code_Point=-Yes}', "");
Expect(1, 64975, '\p{^Noncharacter_Code_Point=-Yes}', "");
Expect(1, 64975, '\P{Noncharacter_Code_Point=-Yes}', "");
Expect(0, 64975, '\P{^Noncharacter_Code_Point=-Yes}', "");
Error('\p{NChar=_Y/a/}');
Error('\P{NChar=_Y/a/}');
Expect(0, 64975, '\p{NChar=y}', "");
Expect(1, 64975, '\p{^NChar=y}', "");
Expect(1, 64975, '\P{NChar=y}', "");
Expect(0, 64975, '\P{^NChar=y}', "");
Expect(0, 64975, '\p{NChar=--Y}', "");
Expect(1, 64975, '\p{^NChar=--Y}', "");
Expect(1, 64975, '\P{NChar=--Y}', "");
Expect(0, 64975, '\P{^NChar=--Y}', "");
Error('\p{Is_Noncharacter_Code_Point= t/a/}');
Error('\P{Is_Noncharacter_Code_Point= t/a/}');
Expect(0, 64975, '\p{Is_Noncharacter_Code_Point=t}', "");
Expect(1, 64975, '\p{^Is_Noncharacter_Code_Point=t}', "");
Expect(1, 64975, '\P{Is_Noncharacter_Code_Point=t}', "");
Expect(0, 64975, '\P{^Is_Noncharacter_Code_Point=t}', "");
Expect(0, 64975, '\p{Is_Noncharacter_Code_Point=-T}', "");
Expect(1, 64975, '\p{^Is_Noncharacter_Code_Point=-T}', "");
Expect(1, 64975, '\P{Is_Noncharacter_Code_Point=-T}', "");
Expect(0, 64975, '\P{^Is_Noncharacter_Code_Point=-T}', "");
Error('\p{Is_NChar=-/a/True}');
Error('\P{Is_NChar=-/a/True}');
Expect(0, 64975, '\p{Is_NChar=true}', "");
Expect(1, 64975, '\p{^Is_NChar=true}', "");
Expect(1, 64975, '\P{Is_NChar=true}', "");
Expect(0, 64975, '\P{^Is_NChar=true}', "");
Expect(0, 64975, '\p{Is_NChar= -TRUE}', "");
Expect(1, 64975, '\p{^Is_NChar= -TRUE}', "");
Expect(1, 64975, '\P{Is_NChar= -TRUE}', "");
Expect(0, 64975, '\P{^Is_NChar= -TRUE}', "");
Error('\p{Noncharacter_Code_Point=-_No:=}');
Error('\P{Noncharacter_Code_Point=-_No:=}');
Expect(1, 64975, '\p{Noncharacter_Code_Point=no}', "");
Expect(0, 64975, '\p{^Noncharacter_Code_Point=no}', "");
Expect(0, 64975, '\P{Noncharacter_Code_Point=no}', "");
Expect(1, 64975, '\P{^Noncharacter_Code_Point=no}', "");
Expect(1, 64975, '\p{Noncharacter_Code_Point=-_NO}', "");
Expect(0, 64975, '\p{^Noncharacter_Code_Point=-_NO}', "");
Expect(0, 64975, '\P{Noncharacter_Code_Point=-_NO}', "");
Expect(1, 64975, '\P{^Noncharacter_Code_Point=-_NO}', "");
Error('\p{NChar=--N/a/}');
Error('\P{NChar=--N/a/}');
Expect(1, 64975, '\p{NChar=n}', "");
Expect(0, 64975, '\p{^NChar=n}', "");
Expect(0, 64975, '\P{NChar=n}', "");
Expect(1, 64975, '\P{^NChar=n}', "");
Expect(1, 64975, '\p{NChar=	-N}', "");
Expect(0, 64975, '\p{^NChar=	-N}', "");
Expect(0, 64975, '\P{NChar=	-N}', "");
Expect(1, 64975, '\P{^NChar=	-N}', "");
Error('\p{Is_Noncharacter_Code_Point=_:=F}');
Error('\P{Is_Noncharacter_Code_Point=_:=F}');
Expect(1, 64975, '\p{Is_Noncharacter_Code_Point=f}', "");
Expect(0, 64975, '\p{^Is_Noncharacter_Code_Point=f}', "");
Expect(0, 64975, '\P{Is_Noncharacter_Code_Point=f}', "");
Expect(1, 64975, '\P{^Is_Noncharacter_Code_Point=f}', "");
Expect(1, 64975, '\p{Is_Noncharacter_Code_Point=- F}', "");
Expect(0, 64975, '\p{^Is_Noncharacter_Code_Point=- F}', "");
Expect(0, 64975, '\P{Is_Noncharacter_Code_Point=- F}', "");
Expect(1, 64975, '\P{^Is_Noncharacter_Code_Point=- F}', "");
Error('\p{Is_NChar: _	false/a/}');
Error('\P{Is_NChar: _	false/a/}');
Expect(1, 64975, '\p{Is_NChar=false}', "");
Expect(0, 64975, '\p{^Is_NChar=false}', "");
Expect(0, 64975, '\P{Is_NChar=false}', "");
Expect(1, 64975, '\P{^Is_NChar=false}', "");
Expect(1, 64975, '\p{Is_NChar=_-false}', "");
Expect(0, 64975, '\p{^Is_NChar=_-false}', "");
Expect(0, 64975, '\P{Is_NChar=_-false}', "");
Expect(1, 64975, '\P{^Is_NChar=_-false}', "");
Error('\p{Unified_Ideograph:    /a/Yes}');
Error('\P{Unified_Ideograph:    /a/Yes}');
Expect(1, 19893, '\p{Unified_Ideograph=yes}', "");
Expect(0, 19893, '\p{^Unified_Ideograph=yes}', "");
Expect(0, 19893, '\P{Unified_Ideograph=yes}', "");
Expect(1, 19893, '\P{^Unified_Ideograph=yes}', "");
Expect(0, 13311, '\p{Unified_Ideograph=yes}', "");
Expect(1, 13311, '\p{^Unified_Ideograph=yes}', "");
Expect(1, 13311, '\P{Unified_Ideograph=yes}', "");
Expect(0, 13311, '\P{^Unified_Ideograph=yes}', "");
Expect(1, 19893, '\p{Unified_Ideograph=  Yes}', "");
Expect(0, 19893, '\p{^Unified_Ideograph=  Yes}', "");
Expect(0, 19893, '\P{Unified_Ideograph=  Yes}', "");
Expect(1, 19893, '\P{^Unified_Ideograph=  Yes}', "");
Expect(0, 13311, '\p{Unified_Ideograph=  Yes}', "");
Expect(1, 13311, '\p{^Unified_Ideograph=  Yes}', "");
Expect(1, 13311, '\P{Unified_Ideograph=  Yes}', "");
Expect(0, 13311, '\P{^Unified_Ideograph=  Yes}', "");
Error('\p{UIdeo=-	Y/a/}');
Error('\P{UIdeo=-	Y/a/}');
Expect(1, 19893, '\p{UIdeo=y}', "");
Expect(0, 19893, '\p{^UIdeo=y}', "");
Expect(0, 19893, '\P{UIdeo=y}', "");
Expect(1, 19893, '\P{^UIdeo=y}', "");
Expect(0, 13311, '\p{UIdeo=y}', "");
Expect(1, 13311, '\p{^UIdeo=y}', "");
Expect(1, 13311, '\P{UIdeo=y}', "");
Expect(0, 13311, '\P{^UIdeo=y}', "");
Expect(1, 19893, '\p{UIdeo=-	Y}', "");
Expect(0, 19893, '\p{^UIdeo=-	Y}', "");
Expect(0, 19893, '\P{UIdeo=-	Y}', "");
Expect(1, 19893, '\P{^UIdeo=-	Y}', "");
Expect(0, 13311, '\p{UIdeo=-	Y}', "");
Expect(1, 13311, '\p{^UIdeo=-	Y}', "");
Expect(1, 13311, '\P{UIdeo=-	Y}', "");
Expect(0, 13311, '\P{^UIdeo=-	Y}', "");
Error('\p{Is_Unified_Ideograph=	-T/a/}');
Error('\P{Is_Unified_Ideograph=	-T/a/}');
Expect(1, 19893, '\p{Is_Unified_Ideograph=t}', "");
Expect(0, 19893, '\p{^Is_Unified_Ideograph=t}', "");
Expect(0, 19893, '\P{Is_Unified_Ideograph=t}', "");
Expect(1, 19893, '\P{^Is_Unified_Ideograph=t}', "");
Expect(0, 13311, '\p{Is_Unified_Ideograph=t}', "");
Expect(1, 13311, '\p{^Is_Unified_Ideograph=t}', "");
Expect(1, 13311, '\P{Is_Unified_Ideograph=t}', "");
Expect(0, 13311, '\P{^Is_Unified_Ideograph=t}', "");
Expect(1, 19893, '\p{Is_Unified_Ideograph=  T}', "");
Expect(0, 19893, '\p{^Is_Unified_Ideograph=  T}', "");
Expect(0, 19893, '\P{Is_Unified_Ideograph=  T}', "");
Expect(1, 19893, '\P{^Is_Unified_Ideograph=  T}', "");
Expect(0, 13311, '\p{Is_Unified_Ideograph=  T}', "");
Expect(1, 13311, '\p{^Is_Unified_Ideograph=  T}', "");
Expect(1, 13311, '\P{Is_Unified_Ideograph=  T}', "");
Expect(0, 13311, '\P{^Is_Unified_Ideograph=  T}', "");
Error('\p{Is_UIdeo=:=_ true}');
Error('\P{Is_UIdeo=:=_ true}');
Expect(1, 19893, '\p{Is_UIdeo=true}', "");
Expect(0, 19893, '\p{^Is_UIdeo=true}', "");
Expect(0, 19893, '\P{Is_UIdeo=true}', "");
Expect(1, 19893, '\P{^Is_UIdeo=true}', "");
Expect(0, 13311, '\p{Is_UIdeo=true}', "");
Expect(1, 13311, '\p{^Is_UIdeo=true}', "");
Expect(1, 13311, '\P{Is_UIdeo=true}', "");
Expect(0, 13311, '\P{^Is_UIdeo=true}', "");
Expect(1, 19893, '\p{Is_UIdeo=-True}', "");
Expect(0, 19893, '\p{^Is_UIdeo=-True}', "");
Expect(0, 19893, '\P{Is_UIdeo=-True}', "");
Expect(1, 19893, '\P{^Is_UIdeo=-True}', "");
Expect(0, 13311, '\p{Is_UIdeo=-True}', "");
Expect(1, 13311, '\p{^Is_UIdeo=-True}', "");
Expect(1, 13311, '\P{Is_UIdeo=-True}', "");
Expect(0, 13311, '\P{^Is_UIdeo=-True}', "");
Error('\p{Unified_Ideograph=/a/- No}');
Error('\P{Unified_Ideograph=/a/- No}');
Expect(1, 13311, '\p{Unified_Ideograph=no}', "");
Expect(0, 13311, '\p{^Unified_Ideograph=no}', "");
Expect(0, 13311, '\P{Unified_Ideograph=no}', "");
Expect(1, 13311, '\P{^Unified_Ideograph=no}', "");
Expect(0, 19893, '\p{Unified_Ideograph=no}', "");
Expect(1, 19893, '\p{^Unified_Ideograph=no}', "");
Expect(1, 19893, '\P{Unified_Ideograph=no}', "");
Expect(0, 19893, '\P{^Unified_Ideograph=no}', "");
Expect(1, 13311, '\p{Unified_Ideograph=_NO}', "");
Expect(0, 13311, '\p{^Unified_Ideograph=_NO}', "");
Expect(0, 13311, '\P{Unified_Ideograph=_NO}', "");
Expect(1, 13311, '\P{^Unified_Ideograph=_NO}', "");
Expect(0, 19893, '\p{Unified_Ideograph=_NO}', "");
Expect(1, 19893, '\p{^Unified_Ideograph=_NO}', "");
Expect(1, 19893, '\P{Unified_Ideograph=_NO}', "");
Expect(0, 19893, '\P{^Unified_Ideograph=_NO}', "");
Error('\p{UIdeo=:=__n}');
Error('\P{UIdeo=:=__n}');
Expect(1, 13311, '\p{UIdeo=n}', "");
Expect(0, 13311, '\p{^UIdeo=n}', "");
Expect(0, 13311, '\P{UIdeo=n}', "");
Expect(1, 13311, '\P{^UIdeo=n}', "");
Expect(0, 19893, '\p{UIdeo=n}', "");
Expect(1, 19893, '\p{^UIdeo=n}', "");
Expect(1, 19893, '\P{UIdeo=n}', "");
Expect(0, 19893, '\P{^UIdeo=n}', "");
Expect(1, 13311, '\p{UIdeo=-N}', "");
Expect(0, 13311, '\p{^UIdeo=-N}', "");
Expect(0, 13311, '\P{UIdeo=-N}', "");
Expect(1, 13311, '\P{^UIdeo=-N}', "");
Expect(0, 19893, '\p{UIdeo=-N}', "");
Expect(1, 19893, '\p{^UIdeo=-N}', "");
Expect(1, 19893, '\P{UIdeo=-N}', "");
Expect(0, 19893, '\P{^UIdeo=-N}', "");
Error('\p{Is_Unified_Ideograph=	/a/F}');
Error('\P{Is_Unified_Ideograph=	/a/F}');
Expect(1, 13311, '\p{Is_Unified_Ideograph=f}', "");
Expect(0, 13311, '\p{^Is_Unified_Ideograph=f}', "");
Expect(0, 13311, '\P{Is_Unified_Ideograph=f}', "");
Expect(1, 13311, '\P{^Is_Unified_Ideograph=f}', "");
Expect(0, 19893, '\p{Is_Unified_Ideograph=f}', "");
Expect(1, 19893, '\p{^Is_Unified_Ideograph=f}', "");
Expect(1, 19893, '\P{Is_Unified_Ideograph=f}', "");
Expect(0, 19893, '\P{^Is_Unified_Ideograph=f}', "");
Expect(1, 13311, '\p{Is_Unified_Ideograph=--F}', "");
Expect(0, 13311, '\p{^Is_Unified_Ideograph=--F}', "");
Expect(0, 13311, '\P{Is_Unified_Ideograph=--F}', "");
Expect(1, 13311, '\P{^Is_Unified_Ideograph=--F}', "");
Expect(0, 19893, '\p{Is_Unified_Ideograph=--F}', "");
Expect(1, 19893, '\p{^Is_Unified_Ideograph=--F}', "");
Expect(1, 19893, '\P{Is_Unified_Ideograph=--F}', "");
Expect(0, 19893, '\P{^Is_Unified_Ideograph=--F}', "");
Error('\p{Is_UIdeo=-FALSE:=}');
Error('\P{Is_UIdeo=-FALSE:=}');
Expect(1, 13311, '\p{Is_UIdeo=false}', "");
Expect(0, 13311, '\p{^Is_UIdeo=false}', "");
Expect(0, 13311, '\P{Is_UIdeo=false}', "");
Expect(1, 13311, '\P{^Is_UIdeo=false}', "");
Expect(0, 19893, '\p{Is_UIdeo=false}', "");
Expect(1, 19893, '\p{^Is_UIdeo=false}', "");
Expect(1, 19893, '\P{Is_UIdeo=false}', "");
Expect(0, 19893, '\P{^Is_UIdeo=false}', "");
Expect(1, 13311, '\p{Is_UIdeo=-FALSE}', "");
Expect(0, 13311, '\p{^Is_UIdeo=-FALSE}', "");
Expect(0, 13311, '\P{Is_UIdeo=-FALSE}', "");
Expect(1, 13311, '\P{^Is_UIdeo=-FALSE}', "");
Expect(0, 19893, '\p{Is_UIdeo=-FALSE}', "");
Expect(1, 19893, '\p{^Is_UIdeo=-FALSE}', "");
Expect(1, 19893, '\P{Is_UIdeo=-FALSE}', "");
Expect(0, 19893, '\P{^Is_UIdeo=-FALSE}', "");
Error('\p{Diacritic= Yes/a/}');
Error('\P{Diacritic= Yes/a/}');
Expect(1, 94, '\p{Diacritic=yes}', "");
Expect(0, 94, '\p{^Diacritic=yes}', "");
Expect(0, 94, '\P{Diacritic=yes}', "");
Expect(1, 94, '\P{^Diacritic=yes}', "");
Expect(0, 93, '\p{Diacritic=yes}', "");
Expect(1, 93, '\p{^Diacritic=yes}', "");
Expect(1, 93, '\P{Diacritic=yes}', "");
Expect(0, 93, '\P{^Diacritic=yes}', "");
Expect(1, 94, '\p{Diacritic=Yes}', "");
Expect(0, 94, '\p{^Diacritic=Yes}', "");
Expect(0, 94, '\P{Diacritic=Yes}', "");
Expect(1, 94, '\P{^Diacritic=Yes}', "");
Expect(0, 93, '\p{Diacritic=Yes}', "");
Expect(1, 93, '\p{^Diacritic=Yes}', "");
Expect(1, 93, '\P{Diacritic=Yes}', "");
Expect(0, 93, '\P{^Diacritic=Yes}', "");
Error('\p{Dia=/a/	-Y}');
Error('\P{Dia=/a/	-Y}');
Expect(1, 94, '\p{Dia=y}', "");
Expect(0, 94, '\p{^Dia=y}', "");
Expect(0, 94, '\P{Dia=y}', "");
Expect(1, 94, '\P{^Dia=y}', "");
Expect(0, 93, '\p{Dia=y}', "");
Expect(1, 93, '\p{^Dia=y}', "");
Expect(1, 93, '\P{Dia=y}', "");
Expect(0, 93, '\P{^Dia=y}', "");
Expect(1, 94, '\p{Dia=	y}', "");
Expect(0, 94, '\p{^Dia=	y}', "");
Expect(0, 94, '\P{Dia=	y}', "");
Expect(1, 94, '\P{^Dia=	y}', "");
Expect(0, 93, '\p{Dia=	y}', "");
Expect(1, 93, '\p{^Dia=	y}', "");
Expect(1, 93, '\P{Dia=	y}', "");
Expect(0, 93, '\P{^Dia=	y}', "");
Error('\p{Is_Diacritic=  t:=}');
Error('\P{Is_Diacritic=  t:=}');
Expect(1, 94, '\p{Is_Diacritic=t}', "");
Expect(0, 94, '\p{^Is_Diacritic=t}', "");
Expect(0, 94, '\P{Is_Diacritic=t}', "");
Expect(1, 94, '\P{^Is_Diacritic=t}', "");
Expect(0, 93, '\p{Is_Diacritic=t}', "");
Expect(1, 93, '\p{^Is_Diacritic=t}', "");
Expect(1, 93, '\P{Is_Diacritic=t}', "");
Expect(0, 93, '\P{^Is_Diacritic=t}', "");
Expect(1, 94, '\p{Is_Diacritic=_	T}', "");
Expect(0, 94, '\p{^Is_Diacritic=_	T}', "");
Expect(0, 94, '\P{Is_Diacritic=_	T}', "");
Expect(1, 94, '\P{^Is_Diacritic=_	T}', "");
Expect(0, 93, '\p{Is_Diacritic=_	T}', "");
Expect(1, 93, '\p{^Is_Diacritic=_	T}', "");
Expect(1, 93, '\P{Is_Diacritic=_	T}', "");
Expect(0, 93, '\P{^Is_Diacritic=_	T}', "");
Error('\p{Is_Dia:   -true/a/}');
Error('\P{Is_Dia:   -true/a/}');
Expect(1, 94, '\p{Is_Dia=true}', "");
Expect(0, 94, '\p{^Is_Dia=true}', "");
Expect(0, 94, '\P{Is_Dia=true}', "");
Expect(1, 94, '\P{^Is_Dia=true}', "");
Expect(0, 93, '\p{Is_Dia=true}', "");
Expect(1, 93, '\p{^Is_Dia=true}', "");
Expect(1, 93, '\P{Is_Dia=true}', "");
Expect(0, 93, '\P{^Is_Dia=true}', "");
Expect(1, 94, '\p{Is_Dia=	True}', "");
Expect(0, 94, '\p{^Is_Dia=	True}', "");
Expect(0, 94, '\P{Is_Dia=	True}', "");
Expect(1, 94, '\P{^Is_Dia=	True}', "");
Expect(0, 93, '\p{Is_Dia=	True}', "");
Expect(1, 93, '\p{^Is_Dia=	True}', "");
Expect(1, 93, '\P{Is_Dia=	True}', "");
Expect(0, 93, '\P{^Is_Dia=	True}', "");
Error('\p{Diacritic=	:=No}');
Error('\P{Diacritic=	:=No}');
Expect(1, 93, '\p{Diacritic=no}', "");
Expect(0, 93, '\p{^Diacritic=no}', "");
Expect(0, 93, '\P{Diacritic=no}', "");
Expect(1, 93, '\P{^Diacritic=no}', "");
Expect(0, 94, '\p{Diacritic=no}', "");
Expect(1, 94, '\p{^Diacritic=no}', "");
Expect(1, 94, '\P{Diacritic=no}', "");
Expect(0, 94, '\P{^Diacritic=no}', "");
Expect(1, 93, '\p{Diacritic=_-NO}', "");
Expect(0, 93, '\p{^Diacritic=_-NO}', "");
Expect(0, 93, '\P{Diacritic=_-NO}', "");
Expect(1, 93, '\P{^Diacritic=_-NO}', "");
Expect(0, 94, '\p{Diacritic=_-NO}', "");
Expect(1, 94, '\p{^Diacritic=_-NO}', "");
Expect(1, 94, '\P{Diacritic=_-NO}', "");
Expect(0, 94, '\P{^Diacritic=_-NO}', "");
Error('\p{Dia=/a/n}');
Error('\P{Dia=/a/n}');
Expect(1, 93, '\p{Dia=n}', "");
Expect(0, 93, '\p{^Dia=n}', "");
Expect(0, 93, '\P{Dia=n}', "");
Expect(1, 93, '\P{^Dia=n}', "");
Expect(0, 94, '\p{Dia=n}', "");
Expect(1, 94, '\p{^Dia=n}', "");
Expect(1, 94, '\P{Dia=n}', "");
Expect(0, 94, '\P{^Dia=n}', "");
Expect(1, 93, '\p{Dia=	N}', "");
Expect(0, 93, '\p{^Dia=	N}', "");
Expect(0, 93, '\P{Dia=	N}', "");
Expect(1, 93, '\P{^Dia=	N}', "");
Expect(0, 94, '\p{Dia=	N}', "");
Expect(1, 94, '\p{^Dia=	N}', "");
Expect(1, 94, '\P{Dia=	N}', "");
Expect(0, 94, '\P{^Dia=	N}', "");
Error('\p{Is_Diacritic=_/a/f}');
Error('\P{Is_Diacritic=_/a/f}');
Expect(1, 93, '\p{Is_Diacritic=f}', "");
Expect(0, 93, '\p{^Is_Diacritic=f}', "");
Expect(0, 93, '\P{Is_Diacritic=f}', "");
Expect(1, 93, '\P{^Is_Diacritic=f}', "");
Expect(0, 94, '\p{Is_Diacritic=f}', "");
Expect(1, 94, '\p{^Is_Diacritic=f}', "");
Expect(1, 94, '\P{Is_Diacritic=f}', "");
Expect(0, 94, '\P{^Is_Diacritic=f}', "");
Expect(1, 93, '\p{Is_Diacritic=-F}', "");
Expect(0, 93, '\p{^Is_Diacritic=-F}', "");
Expect(0, 93, '\P{Is_Diacritic=-F}', "");
Expect(1, 93, '\P{^Is_Diacritic=-F}', "");
Expect(0, 94, '\p{Is_Diacritic=-F}', "");
Expect(1, 94, '\p{^Is_Diacritic=-F}', "");
Expect(1, 94, '\P{Is_Diacritic=-F}', "");
Expect(0, 94, '\P{^Is_Diacritic=-F}', "");
Error('\p{Is_Dia=/a/_-False}');
Error('\P{Is_Dia=/a/_-False}');
Expect(1, 93, '\p{Is_Dia=false}', "");
Expect(0, 93, '\p{^Is_Dia=false}', "");
Expect(0, 93, '\P{Is_Dia=false}', "");
Expect(1, 93, '\P{^Is_Dia=false}', "");
Expect(0, 94, '\p{Is_Dia=false}', "");
Expect(1, 94, '\p{^Is_Dia=false}', "");
Expect(1, 94, '\P{Is_Dia=false}', "");
Expect(0, 94, '\P{^Is_Dia=false}', "");
Expect(1, 93, '\p{Is_Dia=	_false}', "");
Expect(0, 93, '\p{^Is_Dia=	_false}', "");
Expect(0, 93, '\P{Is_Dia=	_false}', "");
Expect(1, 93, '\P{^Is_Dia=	_false}', "");
Expect(0, 94, '\p{Is_Dia=	_false}', "");
Expect(1, 94, '\p{^Is_Dia=	_false}', "");
Expect(1, 94, '\P{Is_Dia=	_false}', "");
Expect(0, 94, '\P{^Is_Dia=	_false}', "");
Error('\p{Perl_Canonical_Combining_Class=0}');
Error('\P{Perl_Canonical_Combining_Class=0}');
Error('\p{Perl_ccc=0}');
Error('\P{Perl_ccc=0}');
Error('\p{Grapheme_Extend=/a/Yes}');
Error('\P{Grapheme_Extend=/a/Yes}');
Expect(1, 879, '\p{Grapheme_Extend=yes}', "");
Expect(0, 879, '\p{^Grapheme_Extend=yes}', "");
Expect(0, 879, '\P{Grapheme_Extend=yes}', "");
Expect(1, 879, '\P{^Grapheme_Extend=yes}', "");
Expect(0, 767, '\p{Grapheme_Extend=yes}', "");
Expect(1, 767, '\p{^Grapheme_Extend=yes}', "");
Expect(1, 767, '\P{Grapheme_Extend=yes}', "");
Expect(0, 767, '\P{^Grapheme_Extend=yes}', "");
Expect(1, 879, '\p{Grapheme_Extend:   	_YES}', "");
Expect(0, 879, '\p{^Grapheme_Extend:   	_YES}', "");
Expect(0, 879, '\P{Grapheme_Extend:   	_YES}', "");
Expect(1, 879, '\P{^Grapheme_Extend:   	_YES}', "");
Expect(0, 767, '\p{Grapheme_Extend:   	_YES}', "");
Expect(1, 767, '\p{^Grapheme_Extend:   	_YES}', "");
Expect(1, 767, '\P{Grapheme_Extend:   	_YES}', "");
Expect(0, 767, '\P{^Grapheme_Extend:   	_YES}', "");
Error('\p{Gr_Ext=:=_-Y}');
Error('\P{Gr_Ext=:=_-Y}');
Expect(1, 879, '\p{Gr_Ext=y}', "");
Expect(0, 879, '\p{^Gr_Ext=y}', "");
Expect(0, 879, '\P{Gr_Ext=y}', "");
Expect(1, 879, '\P{^Gr_Ext=y}', "");
Expect(0, 767, '\p{Gr_Ext=y}', "");
Expect(1, 767, '\p{^Gr_Ext=y}', "");
Expect(1, 767, '\P{Gr_Ext=y}', "");
Expect(0, 767, '\P{^Gr_Ext=y}', "");
Expect(1, 879, '\p{Gr_Ext:		Y}', "");
Expect(0, 879, '\p{^Gr_Ext:		Y}', "");
Expect(0, 879, '\P{Gr_Ext:		Y}', "");
Expect(1, 879, '\P{^Gr_Ext:		Y}', "");
Expect(0, 767, '\p{Gr_Ext:		Y}', "");
Expect(1, 767, '\p{^Gr_Ext:		Y}', "");
Expect(1, 767, '\P{Gr_Ext:		Y}', "");
Expect(0, 767, '\P{^Gr_Ext:		Y}', "");
Error('\p{Is_Grapheme_Extend=	/a/t}');
Error('\P{Is_Grapheme_Extend=	/a/t}');
Expect(1, 879, '\p{Is_Grapheme_Extend=t}', "");
Expect(0, 879, '\p{^Is_Grapheme_Extend=t}', "");
Expect(0, 879, '\P{Is_Grapheme_Extend=t}', "");
Expect(1, 879, '\P{^Is_Grapheme_Extend=t}', "");
Expect(0, 767, '\p{Is_Grapheme_Extend=t}', "");
Expect(1, 767, '\p{^Is_Grapheme_Extend=t}', "");
Expect(1, 767, '\P{Is_Grapheme_Extend=t}', "");
Expect(0, 767, '\P{^Is_Grapheme_Extend=t}', "");
Expect(1, 879, '\p{Is_Grapheme_Extend=_-t}', "");
Expect(0, 879, '\p{^Is_Grapheme_Extend=_-t}', "");
Expect(0, 879, '\P{Is_Grapheme_Extend=_-t}', "");
Expect(1, 879, '\P{^Is_Grapheme_Extend=_-t}', "");
Expect(0, 767, '\p{Is_Grapheme_Extend=_-t}', "");
Expect(1, 767, '\p{^Is_Grapheme_Extend=_-t}', "");
Expect(1, 767, '\P{Is_Grapheme_Extend=_-t}', "");
Expect(0, 767, '\P{^Is_Grapheme_Extend=_-t}', "");
Error('\p{Is_Gr_Ext=-_TRUE/a/}');
Error('\P{Is_Gr_Ext=-_TRUE/a/}');
Expect(1, 879, '\p{Is_Gr_Ext:true}', "");
Expect(0, 879, '\p{^Is_Gr_Ext:true}', "");
Expect(0, 879, '\P{Is_Gr_Ext:true}', "");
Expect(1, 879, '\P{^Is_Gr_Ext:true}', "");
Expect(0, 767, '\p{Is_Gr_Ext:true}', "");
Expect(1, 767, '\p{^Is_Gr_Ext:true}', "");
Expect(1, 767, '\P{Is_Gr_Ext:true}', "");
Expect(0, 767, '\P{^Is_Gr_Ext:true}', "");
Expect(1, 879, '\p{Is_Gr_Ext=	-True}', "");
Expect(0, 879, '\p{^Is_Gr_Ext=	-True}', "");
Expect(0, 879, '\P{Is_Gr_Ext=	-True}', "");
Expect(1, 879, '\P{^Is_Gr_Ext=	-True}', "");
Expect(0, 767, '\p{Is_Gr_Ext=	-True}', "");
Expect(1, 767, '\p{^Is_Gr_Ext=	-True}', "");
Expect(1, 767, '\P{Is_Gr_Ext=	-True}', "");
Expect(0, 767, '\P{^Is_Gr_Ext=	-True}', "");
Error('\p{Grapheme_Extend: /a/No}');
Error('\P{Grapheme_Extend: /a/No}');
Expect(1, 767, '\p{Grapheme_Extend=no}', "");
Expect(0, 767, '\p{^Grapheme_Extend=no}', "");
Expect(0, 767, '\P{Grapheme_Extend=no}', "");
Expect(1, 767, '\P{^Grapheme_Extend=no}', "");
Expect(0, 879, '\p{Grapheme_Extend=no}', "");
Expect(1, 879, '\p{^Grapheme_Extend=no}', "");
Expect(1, 879, '\P{Grapheme_Extend=no}', "");
Expect(0, 879, '\P{^Grapheme_Extend=no}', "");
Expect(1, 767, '\p{Grapheme_Extend=- No}', "");
Expect(0, 767, '\p{^Grapheme_Extend=- No}', "");
Expect(0, 767, '\P{Grapheme_Extend=- No}', "");
Expect(1, 767, '\P{^Grapheme_Extend=- No}', "");
Expect(0, 879, '\p{Grapheme_Extend=- No}', "");
Expect(1, 879, '\p{^Grapheme_Extend=- No}', "");
Expect(1, 879, '\P{Grapheme_Extend=- No}', "");
Expect(0, 879, '\P{^Grapheme_Extend=- No}', "");
Error('\p{Gr_Ext=:= _n}');
Error('\P{Gr_Ext=:= _n}');
Expect(1, 767, '\p{Gr_Ext=n}', "");
Expect(0, 767, '\p{^Gr_Ext=n}', "");
Expect(0, 767, '\P{Gr_Ext=n}', "");
Expect(1, 767, '\P{^Gr_Ext=n}', "");
Expect(0, 879, '\p{Gr_Ext=n}', "");
Expect(1, 879, '\p{^Gr_Ext=n}', "");
Expect(1, 879, '\P{Gr_Ext=n}', "");
Expect(0, 879, '\P{^Gr_Ext=n}', "");
Expect(1, 767, '\p{Gr_Ext=	N}', "");
Expect(0, 767, '\p{^Gr_Ext=	N}', "");
Expect(0, 767, '\P{Gr_Ext=	N}', "");
Expect(1, 767, '\P{^Gr_Ext=	N}', "");
Expect(0, 879, '\p{Gr_Ext=	N}', "");
Expect(1, 879, '\p{^Gr_Ext=	N}', "");
Expect(1, 879, '\P{Gr_Ext=	N}', "");
Expect(0, 879, '\P{^Gr_Ext=	N}', "");
Error('\p{Is_Grapheme_Extend=_F:=}');
Error('\P{Is_Grapheme_Extend=_F:=}');
Expect(1, 767, '\p{Is_Grapheme_Extend=f}', "");
Expect(0, 767, '\p{^Is_Grapheme_Extend=f}', "");
Expect(0, 767, '\P{Is_Grapheme_Extend=f}', "");
Expect(1, 767, '\P{^Is_Grapheme_Extend=f}', "");
Expect(0, 879, '\p{Is_Grapheme_Extend=f}', "");
Expect(1, 879, '\p{^Is_Grapheme_Extend=f}', "");
Expect(1, 879, '\P{Is_Grapheme_Extend=f}', "");
Expect(0, 879, '\P{^Is_Grapheme_Extend=f}', "");
Expect(1, 767, '\p{Is_Grapheme_Extend: _-f}', "");
Expect(0, 767, '\p{^Is_Grapheme_Extend: _-f}', "");
Expect(0, 767, '\P{Is_Grapheme_Extend: _-f}', "");
Expect(1, 767, '\P{^Is_Grapheme_Extend: _-f}', "");
Expect(0, 879, '\p{Is_Grapheme_Extend: _-f}', "");
Expect(1, 879, '\p{^Is_Grapheme_Extend: _-f}', "");
Expect(1, 879, '\P{Is_Grapheme_Extend: _-f}', "");
Expect(0, 879, '\P{^Is_Grapheme_Extend: _-f}', "");
Error('\p{Is_Gr_Ext:	:= false}');
Error('\P{Is_Gr_Ext:	:= false}');
Expect(1, 767, '\p{Is_Gr_Ext=false}', "");
Expect(0, 767, '\p{^Is_Gr_Ext=false}', "");
Expect(0, 767, '\P{Is_Gr_Ext=false}', "");
Expect(1, 767, '\P{^Is_Gr_Ext=false}', "");
Expect(0, 879, '\p{Is_Gr_Ext=false}', "");
Expect(1, 879, '\p{^Is_Gr_Ext=false}', "");
Expect(1, 879, '\P{Is_Gr_Ext=false}', "");
Expect(0, 879, '\P{^Is_Gr_Ext=false}', "");
Expect(1, 767, '\p{Is_Gr_Ext=_	FALSE}', "");
Expect(0, 767, '\p{^Is_Gr_Ext=_	FALSE}', "");
Expect(0, 767, '\P{Is_Gr_Ext=_	FALSE}', "");
Expect(1, 767, '\P{^Is_Gr_Ext=_	FALSE}', "");
Expect(0, 879, '\p{Is_Gr_Ext=_	FALSE}', "");
Expect(1, 879, '\p{^Is_Gr_Ext=_	FALSE}', "");
Expect(1, 879, '\P{Is_Gr_Ext=_	FALSE}', "");
Expect(0, 879, '\P{^Is_Gr_Ext=_	FALSE}', "");
Error('\p{Other_ID_Continue=	 YES:=}');
Error('\P{Other_ID_Continue=	 YES:=}');
Expect(1, 183, '\p{Other_ID_Continue=yes}', 'deprecated');
Expect(0, 183, '\p{^Other_ID_Continue=yes}', 'deprecated');
Expect(0, 183, '\P{Other_ID_Continue=yes}', 'deprecated');
Expect(1, 183, '\P{^Other_ID_Continue=yes}', 'deprecated');
Expect(0, 182, '\p{Other_ID_Continue=yes}', 'deprecated');
Expect(1, 182, '\p{^Other_ID_Continue=yes}', 'deprecated');
Expect(1, 182, '\P{Other_ID_Continue=yes}', 'deprecated');
Expect(0, 182, '\P{^Other_ID_Continue=yes}', 'deprecated');
Expect(1, 183, '\p{Other_ID_Continue=_yes}', 'deprecated');
Expect(0, 183, '\p{^Other_ID_Continue=_yes}', 'deprecated');
Expect(0, 183, '\P{Other_ID_Continue=_yes}', 'deprecated');
Expect(1, 183, '\P{^Other_ID_Continue=_yes}', 'deprecated');
Expect(0, 182, '\p{Other_ID_Continue=_yes}', 'deprecated');
Expect(1, 182, '\p{^Other_ID_Continue=_yes}', 'deprecated');
Expect(1, 182, '\P{Other_ID_Continue=_yes}', 'deprecated');
Expect(0, 182, '\P{^Other_ID_Continue=_yes}', 'deprecated');
Error('\p{OIDC=	-Y/a/}');
Error('\P{OIDC=	-Y/a/}');
Expect(1, 183, '\p{OIDC=y}', 'deprecated');
Expect(0, 183, '\p{^OIDC=y}', 'deprecated');
Expect(0, 183, '\P{OIDC=y}', 'deprecated');
Expect(1, 183, '\P{^OIDC=y}', 'deprecated');
Expect(0, 182, '\p{OIDC=y}', 'deprecated');
Expect(1, 182, '\p{^OIDC=y}', 'deprecated');
Expect(1, 182, '\P{OIDC=y}', 'deprecated');
Expect(0, 182, '\P{^OIDC=y}', 'deprecated');
Expect(1, 183, '\p{OIDC=		y}', 'deprecated');
Expect(0, 183, '\p{^OIDC=		y}', 'deprecated');
Expect(0, 183, '\P{OIDC=		y}', 'deprecated');
Expect(1, 183, '\P{^OIDC=		y}', 'deprecated');
Expect(0, 182, '\p{OIDC=		y}', 'deprecated');
Expect(1, 182, '\p{^OIDC=		y}', 'deprecated');
Expect(1, 182, '\P{OIDC=		y}', 'deprecated');
Expect(0, 182, '\P{^OIDC=		y}', 'deprecated');
Error('\p{Is_Other_ID_Continue=	/a/T}');
Error('\P{Is_Other_ID_Continue=	/a/T}');
Expect(1, 183, '\p{Is_Other_ID_Continue=t}', 'deprecated');
Expect(0, 183, '\p{^Is_Other_ID_Continue=t}', 'deprecated');
Expect(0, 183, '\P{Is_Other_ID_Continue=t}', 'deprecated');
Expect(1, 183, '\P{^Is_Other_ID_Continue=t}', 'deprecated');
Expect(0, 182, '\p{Is_Other_ID_Continue=t}', 'deprecated');
Expect(1, 182, '\p{^Is_Other_ID_Continue=t}', 'deprecated');
Expect(1, 182, '\P{Is_Other_ID_Continue=t}', 'deprecated');
Expect(0, 182, '\P{^Is_Other_ID_Continue=t}', 'deprecated');
Expect(1, 183, '\p{Is_Other_ID_Continue=_	T}', 'deprecated');
Expect(0, 183, '\p{^Is_Other_ID_Continue=_	T}', 'deprecated');
Expect(0, 183, '\P{Is_Other_ID_Continue=_	T}', 'deprecated');
Expect(1, 183, '\P{^Is_Other_ID_Continue=_	T}', 'deprecated');
Expect(0, 182, '\p{Is_Other_ID_Continue=_	T}', 'deprecated');
Expect(1, 182, '\p{^Is_Other_ID_Continue=_	T}', 'deprecated');
Expect(1, 182, '\P{Is_Other_ID_Continue=_	T}', 'deprecated');
Expect(0, 182, '\P{^Is_Other_ID_Continue=_	T}', 'deprecated');
Error('\p{Is_OIDC=	:=True}');
Error('\P{Is_OIDC=	:=True}');
Expect(1, 183, '\p{Is_OIDC=true}', 'deprecated');
Expect(0, 183, '\p{^Is_OIDC=true}', 'deprecated');
Expect(0, 183, '\P{Is_OIDC=true}', 'deprecated');
Expect(1, 183, '\P{^Is_OIDC=true}', 'deprecated');
Expect(0, 182, '\p{Is_OIDC=true}', 'deprecated');
Expect(1, 182, '\p{^Is_OIDC=true}', 'deprecated');
Expect(1, 182, '\P{Is_OIDC=true}', 'deprecated');
Expect(0, 182, '\P{^Is_OIDC=true}', 'deprecated');
Expect(1, 183, '\p{Is_OIDC=True}', 'deprecated');
Expect(0, 183, '\p{^Is_OIDC=True}', 'deprecated');
Expect(0, 183, '\P{Is_OIDC=True}', 'deprecated');
Expect(1, 183, '\P{^Is_OIDC=True}', 'deprecated');
Expect(0, 182, '\p{Is_OIDC=True}', 'deprecated');
Expect(1, 182, '\p{^Is_OIDC=True}', 'deprecated');
Expect(1, 182, '\P{Is_OIDC=True}', 'deprecated');
Expect(0, 182, '\P{^Is_OIDC=True}', 'deprecated');
Error('\p{Other_ID_Continue=-:=NO}');
Error('\P{Other_ID_Continue=-:=NO}');
Expect(1, 182, '\p{Other_ID_Continue=no}', 'deprecated');
Expect(0, 182, '\p{^Other_ID_Continue=no}', 'deprecated');
Expect(0, 182, '\P{Other_ID_Continue=no}', 'deprecated');
Expect(1, 182, '\P{^Other_ID_Continue=no}', 'deprecated');
Expect(0, 183, '\p{Other_ID_Continue=no}', 'deprecated');
Expect(1, 183, '\p{^Other_ID_Continue=no}', 'deprecated');
Expect(1, 183, '\P{Other_ID_Continue=no}', 'deprecated');
Expect(0, 183, '\P{^Other_ID_Continue=no}', 'deprecated');
Expect(1, 182, '\p{Other_ID_Continue=-No}', 'deprecated');
Expect(0, 182, '\p{^Other_ID_Continue=-No}', 'deprecated');
Expect(0, 182, '\P{Other_ID_Continue=-No}', 'deprecated');
Expect(1, 182, '\P{^Other_ID_Continue=-No}', 'deprecated');
Expect(0, 183, '\p{Other_ID_Continue=-No}', 'deprecated');
Expect(1, 183, '\p{^Other_ID_Continue=-No}', 'deprecated');
Expect(1, 183, '\P{Other_ID_Continue=-No}', 'deprecated');
Expect(0, 183, '\P{^Other_ID_Continue=-No}', 'deprecated');
Error('\p{OIDC:	 /a/n}');
Error('\P{OIDC:	 /a/n}');
Expect(1, 182, '\p{OIDC=n}', 'deprecated');
Expect(0, 182, '\p{^OIDC=n}', 'deprecated');
Expect(0, 182, '\P{OIDC=n}', 'deprecated');
Expect(1, 182, '\P{^OIDC=n}', 'deprecated');
Expect(0, 183, '\p{OIDC=n}', 'deprecated');
Expect(1, 183, '\p{^OIDC=n}', 'deprecated');
Expect(1, 183, '\P{OIDC=n}', 'deprecated');
Expect(0, 183, '\P{^OIDC=n}', 'deprecated');
Expect(1, 182, '\p{OIDC: N}', 'deprecated');
Expect(0, 182, '\p{^OIDC: N}', 'deprecated');
Expect(0, 182, '\P{OIDC: N}', 'deprecated');
Expect(1, 182, '\P{^OIDC: N}', 'deprecated');
Expect(0, 183, '\p{OIDC: N}', 'deprecated');
Expect(1, 183, '\p{^OIDC: N}', 'deprecated');
Expect(1, 183, '\P{OIDC: N}', 'deprecated');
Expect(0, 183, '\P{^OIDC: N}', 'deprecated');
Error('\p{Is_Other_ID_Continue=	-f/a/}');
Error('\P{Is_Other_ID_Continue=	-f/a/}');
Expect(1, 182, '\p{Is_Other_ID_Continue=f}', 'deprecated');
Expect(0, 182, '\p{^Is_Other_ID_Continue=f}', 'deprecated');
Expect(0, 182, '\P{Is_Other_ID_Continue=f}', 'deprecated');
Expect(1, 182, '\P{^Is_Other_ID_Continue=f}', 'deprecated');
Expect(0, 183, '\p{Is_Other_ID_Continue=f}', 'deprecated');
Expect(1, 183, '\p{^Is_Other_ID_Continue=f}', 'deprecated');
Expect(1, 183, '\P{Is_Other_ID_Continue=f}', 'deprecated');
Expect(0, 183, '\P{^Is_Other_ID_Continue=f}', 'deprecated');
Expect(1, 182, '\p{Is_Other_ID_Continue= F}', 'deprecated');
Expect(0, 182, '\p{^Is_Other_ID_Continue= F}', 'deprecated');
Expect(0, 182, '\P{Is_Other_ID_Continue= F}', 'deprecated');
Expect(1, 182, '\P{^Is_Other_ID_Continue= F}', 'deprecated');
Expect(0, 183, '\p{Is_Other_ID_Continue= F}', 'deprecated');
Expect(1, 183, '\p{^Is_Other_ID_Continue= F}', 'deprecated');
Expect(1, 183, '\P{Is_Other_ID_Continue= F}', 'deprecated');
Expect(0, 183, '\P{^Is_Other_ID_Continue= F}', 'deprecated');
Error('\p{Is_OIDC=/a/  false}');
Error('\P{Is_OIDC=/a/  false}');
Expect(1, 182, '\p{Is_OIDC=false}', 'deprecated');
Expect(0, 182, '\p{^Is_OIDC=false}', 'deprecated');
Expect(0, 182, '\P{Is_OIDC=false}', 'deprecated');
Expect(1, 182, '\P{^Is_OIDC=false}', 'deprecated');
Expect(0, 183, '\p{Is_OIDC=false}', 'deprecated');
Expect(1, 183, '\p{^Is_OIDC=false}', 'deprecated');
Expect(1, 183, '\P{Is_OIDC=false}', 'deprecated');
Expect(0, 183, '\P{^Is_OIDC=false}', 'deprecated');
Expect(1, 182, '\p{Is_OIDC:	 _false}', 'deprecated');
Expect(0, 182, '\p{^Is_OIDC:	 _false}', 'deprecated');
Expect(0, 182, '\P{Is_OIDC:	 _false}', 'deprecated');
Expect(1, 182, '\P{^Is_OIDC:	 _false}', 'deprecated');
Expect(0, 183, '\p{Is_OIDC:	 _false}', 'deprecated');
Expect(1, 183, '\p{^Is_OIDC:	 _false}', 'deprecated');
Expect(1, 183, '\P{Is_OIDC:	 _false}', 'deprecated');
Expect(0, 183, '\P{^Is_OIDC:	 _false}', 'deprecated');
Error('\p{Joining_Group=:=swash	Kaf}');
Error('\P{Joining_Group=:=swash	Kaf}');
Expect(1, 1706, '\p{Joining_Group=swashkaf}', "");
Expect(0, 1706, '\p{^Joining_Group=swashkaf}', "");
Expect(0, 1706, '\P{Joining_Group=swashkaf}', "");
Expect(1, 1706, '\P{^Joining_Group=swashkaf}', "");
Expect(0, 1705, '\p{Joining_Group=swashkaf}', "");
Expect(1, 1705, '\p{^Joining_Group=swashkaf}', "");
Expect(1, 1705, '\P{Joining_Group=swashkaf}', "");
Expect(0, 1705, '\P{^Joining_Group=swashkaf}', "");
Expect(1, 1706, '\p{Joining_Group=_	SwashKaf}', "");
Expect(0, 1706, '\p{^Joining_Group=_	SwashKaf}', "");
Expect(0, 1706, '\P{Joining_Group=_	SwashKaf}', "");
Expect(1, 1706, '\P{^Joining_Group=_	SwashKaf}', "");
Expect(0, 1705, '\p{Joining_Group=_	SwashKaf}', "");
Expect(1, 1705, '\p{^Joining_Group=_	SwashKaf}', "");
Expect(1, 1705, '\P{Joining_Group=_	SwashKaf}', "");
Expect(0, 1705, '\P{^Joining_Group=_	SwashKaf}', "");
Error('\p{Jg=:=swashkaf}');
Error('\P{Jg=:=swashkaf}');
Expect(1, 1706, '\p{Jg=swashkaf}', "");
Expect(0, 1706, '\p{^Jg=swashkaf}', "");
Expect(0, 1706, '\P{Jg=swashkaf}', "");
Expect(1, 1706, '\P{^Jg=swashkaf}', "");
Expect(0, 1705, '\p{Jg=swashkaf}', "");
Expect(1, 1705, '\p{^Jg=swashkaf}', "");
Expect(1, 1705, '\P{Jg=swashkaf}', "");
Expect(0, 1705, '\P{^Jg=swashkaf}', "");
Expect(1, 1706, '\p{Jg=SWASH	Kaf}', "");
Expect(0, 1706, '\p{^Jg=SWASH	Kaf}', "");
Expect(0, 1706, '\P{Jg=SWASH	Kaf}', "");
Expect(1, 1706, '\P{^Jg=SWASH	Kaf}', "");
Expect(0, 1705, '\p{Jg=SWASH	Kaf}', "");
Expect(1, 1705, '\p{^Jg=SWASH	Kaf}', "");
Expect(1, 1705, '\P{Jg=SWASH	Kaf}', "");
Expect(0, 1705, '\P{^Jg=SWASH	Kaf}', "");
Error('\p{Is_Joining_Group:	_:=Swash_kaf}');
Error('\P{Is_Joining_Group:	_:=Swash_kaf}');
Expect(1, 1706, '\p{Is_Joining_Group=swashkaf}', "");
Expect(0, 1706, '\p{^Is_Joining_Group=swashkaf}', "");
Expect(0, 1706, '\P{Is_Joining_Group=swashkaf}', "");
Expect(1, 1706, '\P{^Is_Joining_Group=swashkaf}', "");
Expect(0, 1705, '\p{Is_Joining_Group=swashkaf}', "");
Expect(1, 1705, '\p{^Is_Joining_Group=swashkaf}', "");
Expect(1, 1705, '\P{Is_Joining_Group=swashkaf}', "");
Expect(0, 1705, '\P{^Is_Joining_Group=swashkaf}', "");
Expect(1, 1706, '\p{Is_Joining_Group=_-SWASH-Kaf}', "");
Expect(0, 1706, '\p{^Is_Joining_Group=_-SWASH-Kaf}', "");
Expect(0, 1706, '\P{Is_Joining_Group=_-SWASH-Kaf}', "");
Expect(1, 1706, '\P{^Is_Joining_Group=_-SWASH-Kaf}', "");
Expect(0, 1705, '\p{Is_Joining_Group=_-SWASH-Kaf}', "");
Expect(1, 1705, '\p{^Is_Joining_Group=_-SWASH-Kaf}', "");
Expect(1, 1705, '\P{Is_Joining_Group=_-SWASH-Kaf}', "");
Expect(0, 1705, '\P{^Is_Joining_Group=_-SWASH-Kaf}', "");
Error('\p{Is_Jg=  swash	Kaf/a/}');
Error('\P{Is_Jg=  swash	Kaf/a/}');
Expect(1, 1706, '\p{Is_Jg: swashkaf}', "");
Expect(0, 1706, '\p{^Is_Jg: swashkaf}', "");
Expect(0, 1706, '\P{Is_Jg: swashkaf}', "");
Expect(1, 1706, '\P{^Is_Jg: swashkaf}', "");
Expect(0, 1705, '\p{Is_Jg: swashkaf}', "");
Expect(1, 1705, '\p{^Is_Jg: swashkaf}', "");
Expect(1, 1705, '\P{Is_Jg: swashkaf}', "");
Expect(0, 1705, '\P{^Is_Jg: swashkaf}', "");
Expect(1, 1706, '\p{Is_Jg=--SWASH kaf}', "");
Expect(0, 1706, '\p{^Is_Jg=--SWASH kaf}', "");
Expect(0, 1706, '\P{Is_Jg=--SWASH kaf}', "");
Expect(1, 1706, '\P{^Is_Jg=--SWASH kaf}', "");
Expect(0, 1705, '\p{Is_Jg=--SWASH kaf}', "");
Expect(1, 1705, '\p{^Is_Jg=--SWASH kaf}', "");
Expect(1, 1705, '\P{Is_Jg=--SWASH kaf}', "");
Expect(0, 1705, '\P{^Is_Jg=--SWASH kaf}', "");
Error('\p{Joining_Group=-:=Seen}');
Error('\P{Joining_Group=-:=Seen}');
Expect(1, 1588, '\p{Joining_Group=seen}', "");
Expect(0, 1588, '\p{^Joining_Group=seen}', "");
Expect(0, 1588, '\P{Joining_Group=seen}', "");
Expect(1, 1588, '\P{^Joining_Group=seen}', "");
Expect(0, 1586, '\p{Joining_Group=seen}', "");
Expect(1, 1586, '\p{^Joining_Group=seen}', "");
Expect(1, 1586, '\P{Joining_Group=seen}', "");
Expect(0, 1586, '\P{^Joining_Group=seen}', "");
Expect(1, 1588, '\p{Joining_Group=-Seen}', "");
Expect(0, 1588, '\p{^Joining_Group=-Seen}', "");
Expect(0, 1588, '\P{Joining_Group=-Seen}', "");
Expect(1, 1588, '\P{^Joining_Group=-Seen}', "");
Expect(0, 1586, '\p{Joining_Group=-Seen}', "");
Expect(1, 1586, '\p{^Joining_Group=-Seen}', "");
Expect(1, 1586, '\P{Joining_Group=-Seen}', "");
Expect(0, 1586, '\P{^Joining_Group=-Seen}', "");
Error('\p{Jg=:=  Seen}');
Error('\P{Jg=:=  Seen}');
Expect(1, 1588, '\p{Jg=seen}', "");
Expect(0, 1588, '\p{^Jg=seen}', "");
Expect(0, 1588, '\P{Jg=seen}', "");
Expect(1, 1588, '\P{^Jg=seen}', "");
Expect(0, 1586, '\p{Jg=seen}', "");
Expect(1, 1586, '\p{^Jg=seen}', "");
Expect(1, 1586, '\P{Jg=seen}', "");
Expect(0, 1586, '\P{^Jg=seen}', "");
Expect(1, 1588, '\p{Jg=_-Seen}', "");
Expect(0, 1588, '\p{^Jg=_-Seen}', "");
Expect(0, 1588, '\P{Jg=_-Seen}', "");
Expect(1, 1588, '\P{^Jg=_-Seen}', "");
Expect(0, 1586, '\p{Jg=_-Seen}', "");
Expect(1, 1586, '\p{^Jg=_-Seen}', "");
Expect(1, 1586, '\P{Jg=_-Seen}', "");
Expect(0, 1586, '\P{^Jg=_-Seen}', "");
Error('\p{Is_Joining_Group=-/a/Seen}');
Error('\P{Is_Joining_Group=-/a/Seen}');
Expect(1, 1588, '\p{Is_Joining_Group=seen}', "");
Expect(0, 1588, '\p{^Is_Joining_Group=seen}', "");
Expect(0, 1588, '\P{Is_Joining_Group=seen}', "");
Expect(1, 1588, '\P{^Is_Joining_Group=seen}', "");
Expect(0, 1586, '\p{Is_Joining_Group=seen}', "");
Expect(1, 1586, '\p{^Is_Joining_Group=seen}', "");
Expect(1, 1586, '\P{Is_Joining_Group=seen}', "");
Expect(0, 1586, '\P{^Is_Joining_Group=seen}', "");
Expect(1, 1588, '\p{Is_Joining_Group:_ Seen}', "");
Expect(0, 1588, '\p{^Is_Joining_Group:_ Seen}', "");
Expect(0, 1588, '\P{Is_Joining_Group:_ Seen}', "");
Expect(1, 1588, '\P{^Is_Joining_Group:_ Seen}', "");
Expect(0, 1586, '\p{Is_Joining_Group:_ Seen}', "");
Expect(1, 1586, '\p{^Is_Joining_Group:_ Seen}', "");
Expect(1, 1586, '\P{Is_Joining_Group:_ Seen}', "");
Expect(0, 1586, '\P{^Is_Joining_Group:_ Seen}', "");
Error('\p{Is_Jg=:=Seen}');
Error('\P{Is_Jg=:=Seen}');
Expect(1, 1588, '\p{Is_Jg=seen}', "");
Expect(0, 1588, '\p{^Is_Jg=seen}', "");
Expect(0, 1588, '\P{Is_Jg=seen}', "");
Expect(1, 1588, '\P{^Is_Jg=seen}', "");
Expect(0, 1586, '\p{Is_Jg=seen}', "");
Expect(1, 1586, '\p{^Is_Jg=seen}', "");
Expect(1, 1586, '\P{Is_Jg=seen}', "");
Expect(0, 1586, '\P{^Is_Jg=seen}', "");
Expect(1, 1588, '\p{Is_Jg=	SEEN}', "");
Expect(0, 1588, '\p{^Is_Jg=	SEEN}', "");
Expect(0, 1588, '\P{Is_Jg=	SEEN}', "");
Expect(1, 1588, '\P{^Is_Jg=	SEEN}', "");
Expect(0, 1586, '\p{Is_Jg=	SEEN}', "");
Expect(1, 1586, '\p{^Is_Jg=	SEEN}', "");
Expect(1, 1586, '\P{Is_Jg=	SEEN}', "");
Expect(0, 1586, '\P{^Is_Jg=	SEEN}', "");
Error('\p{Joining_Group=/a/_BETH}');
Error('\P{Joining_Group=/a/_BETH}');
Expect(1, 1810, '\p{Joining_Group=beth}', "");
Expect(0, 1810, '\p{^Joining_Group=beth}', "");
Expect(0, 1810, '\P{Joining_Group=beth}', "");
Expect(1, 1810, '\P{^Joining_Group=beth}', "");
Expect(0, 1809, '\p{Joining_Group=beth}', "");
Expect(1, 1809, '\p{^Joining_Group=beth}', "");
Expect(1, 1809, '\P{Joining_Group=beth}', "");
Expect(0, 1809, '\P{^Joining_Group=beth}', "");
Expect(1, 1810, '\p{Joining_Group=_	beth}', "");
Expect(0, 1810, '\p{^Joining_Group=_	beth}', "");
Expect(0, 1810, '\P{Joining_Group=_	beth}', "");
Expect(1, 1810, '\P{^Joining_Group=_	beth}', "");
Expect(0, 1809, '\p{Joining_Group=_	beth}', "");
Expect(1, 1809, '\p{^Joining_Group=_	beth}', "");
Expect(1, 1809, '\P{Joining_Group=_	beth}', "");
Expect(0, 1809, '\P{^Joining_Group=_	beth}', "");
Error('\p{Jg=-_BETH:=}');
Error('\P{Jg=-_BETH:=}');
Expect(1, 1810, '\p{Jg=beth}', "");
Expect(0, 1810, '\p{^Jg=beth}', "");
Expect(0, 1810, '\P{Jg=beth}', "");
Expect(1, 1810, '\P{^Jg=beth}', "");
Expect(0, 1809, '\p{Jg=beth}', "");
Expect(1, 1809, '\p{^Jg=beth}', "");
Expect(1, 1809, '\P{Jg=beth}', "");
Expect(0, 1809, '\P{^Jg=beth}', "");
Expect(1, 1810, '\p{Jg= -BETH}', "");
Expect(0, 1810, '\p{^Jg= -BETH}', "");
Expect(0, 1810, '\P{Jg= -BETH}', "");
Expect(1, 1810, '\P{^Jg= -BETH}', "");
Expect(0, 1809, '\p{Jg= -BETH}', "");
Expect(1, 1809, '\p{^Jg= -BETH}', "");
Expect(1, 1809, '\P{Jg= -BETH}', "");
Expect(0, 1809, '\P{^Jg= -BETH}', "");
Error('\p{Is_Joining_Group=/a/ 	Beth}');
Error('\P{Is_Joining_Group=/a/ 	Beth}');
Expect(1, 1810, '\p{Is_Joining_Group=beth}', "");
Expect(0, 1810, '\p{^Is_Joining_Group=beth}', "");
Expect(0, 1810, '\P{Is_Joining_Group=beth}', "");
Expect(1, 1810, '\P{^Is_Joining_Group=beth}', "");
Expect(0, 1809, '\p{Is_Joining_Group=beth}', "");
Expect(1, 1809, '\p{^Is_Joining_Group=beth}', "");
Expect(1, 1809, '\P{Is_Joining_Group=beth}', "");
Expect(0, 1809, '\P{^Is_Joining_Group=beth}', "");
Expect(1, 1810, '\p{Is_Joining_Group=_ Beth}', "");
Expect(0, 1810, '\p{^Is_Joining_Group=_ Beth}', "");
Expect(0, 1810, '\P{Is_Joining_Group=_ Beth}', "");
Expect(1, 1810, '\P{^Is_Joining_Group=_ Beth}', "");
Expect(0, 1809, '\p{Is_Joining_Group=_ Beth}', "");
Expect(1, 1809, '\p{^Is_Joining_Group=_ Beth}', "");
Expect(1, 1809, '\P{Is_Joining_Group=_ Beth}', "");
Expect(0, 1809, '\P{^Is_Joining_Group=_ Beth}', "");
Error('\p{Is_Jg=--beth:=}');
Error('\P{Is_Jg=--beth:=}');
Expect(1, 1810, '\p{Is_Jg=beth}', "");
Expect(0, 1810, '\p{^Is_Jg=beth}', "");
Expect(0, 1810, '\P{Is_Jg=beth}', "");
Expect(1, 1810, '\P{^Is_Jg=beth}', "");
Expect(0, 1809, '\p{Is_Jg=beth}', "");
Expect(1, 1809, '\p{^Is_Jg=beth}', "");
Expect(1, 1809, '\P{Is_Jg=beth}', "");
Expect(0, 1809, '\P{^Is_Jg=beth}', "");
Expect(1, 1810, '\p{Is_Jg=--Beth}', "");
Expect(0, 1810, '\p{^Is_Jg=--Beth}', "");
Expect(0, 1810, '\P{Is_Jg=--Beth}', "");
Expect(1, 1810, '\P{^Is_Jg=--Beth}', "");
Expect(0, 1809, '\p{Is_Jg=--Beth}', "");
Expect(1, 1809, '\p{^Is_Jg=--Beth}', "");
Expect(1, 1809, '\P{Is_Jg=--Beth}', "");
Expect(0, 1809, '\P{^Is_Jg=--Beth}', "");
Error('\p{Joining_Group=  Semkath/a/}');
Error('\P{Joining_Group=  Semkath/a/}');
Expect(1, 1827, '\p{Joining_Group=semkath}', "");
Expect(0, 1827, '\p{^Joining_Group=semkath}', "");
Expect(0, 1827, '\P{Joining_Group=semkath}', "");
Expect(1, 1827, '\P{^Joining_Group=semkath}', "");
Expect(0, 1826, '\p{Joining_Group=semkath}', "");
Expect(1, 1826, '\p{^Joining_Group=semkath}', "");
Expect(1, 1826, '\P{Joining_Group=semkath}', "");
Expect(0, 1826, '\P{^Joining_Group=semkath}', "");
Expect(1, 1827, '\p{Joining_Group=-SEMKATH}', "");
Expect(0, 1827, '\p{^Joining_Group=-SEMKATH}', "");
Expect(0, 1827, '\P{Joining_Group=-SEMKATH}', "");
Expect(1, 1827, '\P{^Joining_Group=-SEMKATH}', "");
Expect(0, 1826, '\p{Joining_Group=-SEMKATH}', "");
Expect(1, 1826, '\p{^Joining_Group=-SEMKATH}', "");
Expect(1, 1826, '\P{Joining_Group=-SEMKATH}', "");
Expect(0, 1826, '\P{^Joining_Group=-SEMKATH}', "");
Error('\p{Jg=/a/ Semkath}');
Error('\P{Jg=/a/ Semkath}');
Expect(1, 1827, '\p{Jg=semkath}', "");
Expect(0, 1827, '\p{^Jg=semkath}', "");
Expect(0, 1827, '\P{Jg=semkath}', "");
Expect(1, 1827, '\P{^Jg=semkath}', "");
Expect(0, 1826, '\p{Jg=semkath}', "");
Expect(1, 1826, '\p{^Jg=semkath}', "");
Expect(1, 1826, '\P{Jg=semkath}', "");
Expect(0, 1826, '\P{^Jg=semkath}', "");
Expect(1, 1827, '\p{Jg=	-semkath}', "");
Expect(0, 1827, '\p{^Jg=	-semkath}', "");
Expect(0, 1827, '\P{Jg=	-semkath}', "");
Expect(1, 1827, '\P{^Jg=	-semkath}', "");
Expect(0, 1826, '\p{Jg=	-semkath}', "");
Expect(1, 1826, '\p{^Jg=	-semkath}', "");
Expect(1, 1826, '\P{Jg=	-semkath}', "");
Expect(0, 1826, '\P{^Jg=	-semkath}', "");
Error('\p{Is_Joining_Group=-:=Semkath}');
Error('\P{Is_Joining_Group=-:=Semkath}');
Expect(1, 1827, '\p{Is_Joining_Group=semkath}', "");
Expect(0, 1827, '\p{^Is_Joining_Group=semkath}', "");
Expect(0, 1827, '\P{Is_Joining_Group=semkath}', "");
Expect(1, 1827, '\P{^Is_Joining_Group=semkath}', "");
Expect(0, 1826, '\p{Is_Joining_Group=semkath}', "");
Expect(1, 1826, '\p{^Is_Joining_Group=semkath}', "");
Expect(1, 1826, '\P{Is_Joining_Group=semkath}', "");
Expect(0, 1826, '\P{^Is_Joining_Group=semkath}', "");
Expect(1, 1827, '\p{Is_Joining_Group= -Semkath}', "");
Expect(0, 1827, '\p{^Is_Joining_Group= -Semkath}', "");
Expect(0, 1827, '\P{Is_Joining_Group= -Semkath}', "");
Expect(1, 1827, '\P{^Is_Joining_Group= -Semkath}', "");
Expect(0, 1826, '\p{Is_Joining_Group= -Semkath}', "");
Expect(1, 1826, '\p{^Is_Joining_Group= -Semkath}', "");
Expect(1, 1826, '\P{Is_Joining_Group= -Semkath}', "");
Expect(0, 1826, '\P{^Is_Joining_Group= -Semkath}', "");
Error('\p{Is_Jg=-Semkath/a/}');
Error('\P{Is_Jg=-Semkath/a/}');
Expect(1, 1827, '\p{Is_Jg=semkath}', "");
Expect(0, 1827, '\p{^Is_Jg=semkath}', "");
Expect(0, 1827, '\P{Is_Jg=semkath}', "");
Expect(1, 1827, '\P{^Is_Jg=semkath}', "");
Expect(0, 1826, '\p{Is_Jg=semkath}', "");
Expect(1, 1826, '\p{^Is_Jg=semkath}', "");
Expect(1, 1826, '\P{Is_Jg=semkath}', "");
Expect(0, 1826, '\P{^Is_Jg=semkath}', "");
Expect(1, 1827, '\p{Is_Jg=- SEMKATH}', "");
Expect(0, 1827, '\p{^Is_Jg=- SEMKATH}', "");
Expect(0, 1827, '\P{Is_Jg=- SEMKATH}', "");
Expect(1, 1827, '\P{^Is_Jg=- SEMKATH}', "");
Expect(0, 1826, '\p{Is_Jg=- SEMKATH}', "");
Expect(1, 1826, '\p{^Is_Jg=- SEMKATH}', "");
Expect(1, 1826, '\P{Is_Jg=- SEMKATH}', "");
Expect(0, 1826, '\P{^Is_Jg=- SEMKATH}', "");
Error('\p{Joining_Group=	:=Hah}');
Error('\P{Joining_Group=	:=Hah}');
Expect(1, 1582, '\p{Joining_Group: hah}', "");
Expect(0, 1582, '\p{^Joining_Group: hah}', "");
Expect(0, 1582, '\P{Joining_Group: hah}', "");
Expect(1, 1582, '\P{^Joining_Group: hah}', "");
Expect(0, 1579, '\p{Joining_Group: hah}', "");
Expect(1, 1579, '\p{^Joining_Group: hah}', "");
Expect(1, 1579, '\P{Joining_Group: hah}', "");
Expect(0, 1579, '\P{^Joining_Group: hah}', "");
Expect(1, 1582, '\p{Joining_Group= HAH}', "");
Expect(0, 1582, '\p{^Joining_Group= HAH}', "");
Expect(0, 1582, '\P{Joining_Group= HAH}', "");
Expect(1, 1582, '\P{^Joining_Group= HAH}', "");
Expect(0, 1579, '\p{Joining_Group= HAH}', "");
Expect(1, 1579, '\p{^Joining_Group= HAH}', "");
Expect(1, 1579, '\P{Joining_Group= HAH}', "");
Expect(0, 1579, '\P{^Joining_Group= HAH}', "");
Error('\p{Jg=:=__HAH}');
Error('\P{Jg=:=__HAH}');
Expect(1, 1582, '\p{Jg=hah}', "");
Expect(0, 1582, '\p{^Jg=hah}', "");
Expect(0, 1582, '\P{Jg=hah}', "");
Expect(1, 1582, '\P{^Jg=hah}', "");
Expect(0, 1579, '\p{Jg=hah}', "");
Expect(1, 1579, '\p{^Jg=hah}', "");
Expect(1, 1579, '\P{Jg=hah}', "");
Expect(0, 1579, '\P{^Jg=hah}', "");
Expect(1, 1582, '\p{Jg=	Hah}', "");
Expect(0, 1582, '\p{^Jg=	Hah}', "");
Expect(0, 1582, '\P{Jg=	Hah}', "");
Expect(1, 1582, '\P{^Jg=	Hah}', "");
Expect(0, 1579, '\p{Jg=	Hah}', "");
Expect(1, 1579, '\p{^Jg=	Hah}', "");
Expect(1, 1579, '\P{Jg=	Hah}', "");
Expect(0, 1579, '\P{^Jg=	Hah}', "");
Error('\p{Is_Joining_Group=	Hah:=}');
Error('\P{Is_Joining_Group=	Hah:=}');
Expect(1, 1582, '\p{Is_Joining_Group=hah}', "");
Expect(0, 1582, '\p{^Is_Joining_Group=hah}', "");
Expect(0, 1582, '\P{Is_Joining_Group=hah}', "");
Expect(1, 1582, '\P{^Is_Joining_Group=hah}', "");
Expect(0, 1579, '\p{Is_Joining_Group=hah}', "");
Expect(1, 1579, '\p{^Is_Joining_Group=hah}', "");
Expect(1, 1579, '\P{Is_Joining_Group=hah}', "");
Expect(0, 1579, '\P{^Is_Joining_Group=hah}', "");
Expect(1, 1582, '\p{Is_Joining_Group=_-Hah}', "");
Expect(0, 1582, '\p{^Is_Joining_Group=_-Hah}', "");
Expect(0, 1582, '\P{Is_Joining_Group=_-Hah}', "");
Expect(1, 1582, '\P{^Is_Joining_Group=_-Hah}', "");
Expect(0, 1579, '\p{Is_Joining_Group=_-Hah}', "");
Expect(1, 1579, '\p{^Is_Joining_Group=_-Hah}', "");
Expect(1, 1579, '\P{Is_Joining_Group=_-Hah}', "");
Expect(0, 1579, '\P{^Is_Joining_Group=_-Hah}', "");
Error('\p{Is_Jg=	/a/hah}');
Error('\P{Is_Jg=	/a/hah}');
Expect(1, 1582, '\p{Is_Jg=hah}', "");
Expect(0, 1582, '\p{^Is_Jg=hah}', "");
Expect(0, 1582, '\P{Is_Jg=hah}', "");
Expect(1, 1582, '\P{^Is_Jg=hah}', "");
Expect(0, 1579, '\p{Is_Jg=hah}', "");
Expect(1, 1579, '\p{^Is_Jg=hah}', "");
Expect(1, 1579, '\P{Is_Jg=hah}', "");
Expect(0, 1579, '\P{^Is_Jg=hah}', "");
Expect(1, 1582, '\p{Is_Jg=		Hah}', "");
Expect(0, 1582, '\p{^Is_Jg=		Hah}', "");
Expect(0, 1582, '\P{Is_Jg=		Hah}', "");
Expect(1, 1582, '\P{^Is_Jg=		Hah}', "");
Expect(0, 1579, '\p{Is_Jg=		Hah}', "");
Expect(1, 1579, '\p{^Is_Jg=		Hah}', "");
Expect(1, 1579, '\P{Is_Jg=		Hah}', "");
Expect(0, 1579, '\P{^Is_Jg=		Hah}', "");
Error('\p{Joining_Group=:= _Syriac Waw}');
Error('\P{Joining_Group=:= _Syriac Waw}');
Expect(1, 1816, '\p{Joining_Group=syriacwaw}', "");
Expect(0, 1816, '\p{^Joining_Group=syriacwaw}', "");
Expect(0, 1816, '\P{Joining_Group=syriacwaw}', "");
Expect(1, 1816, '\P{^Joining_Group=syriacwaw}', "");
Expect(0, 1815, '\p{Joining_Group=syriacwaw}', "");
Expect(1, 1815, '\p{^Joining_Group=syriacwaw}', "");
Expect(1, 1815, '\P{Joining_Group=syriacwaw}', "");
Expect(0, 1815, '\P{^Joining_Group=syriacwaw}', "");
Expect(1, 1816, '\p{Joining_Group=		syriac-WAW}', "");
Expect(0, 1816, '\p{^Joining_Group=		syriac-WAW}', "");
Expect(0, 1816, '\P{Joining_Group=		syriac-WAW}', "");
Expect(1, 1816, '\P{^Joining_Group=		syriac-WAW}', "");
Expect(0, 1815, '\p{Joining_Group=		syriac-WAW}', "");
Expect(1, 1815, '\p{^Joining_Group=		syriac-WAW}', "");
Expect(1, 1815, '\P{Joining_Group=		syriac-WAW}', "");
Expect(0, 1815, '\P{^Joining_Group=		syriac-WAW}', "");
Error('\p{Jg=	Syriac_waw/a/}');
Error('\P{Jg=	Syriac_waw/a/}');
Expect(1, 1816, '\p{Jg=syriacwaw}', "");
Expect(0, 1816, '\p{^Jg=syriacwaw}', "");
Expect(0, 1816, '\P{Jg=syriacwaw}', "");
Expect(1, 1816, '\P{^Jg=syriacwaw}', "");
Expect(0, 1815, '\p{Jg=syriacwaw}', "");
Expect(1, 1815, '\p{^Jg=syriacwaw}', "");
Expect(1, 1815, '\P{Jg=syriacwaw}', "");
Expect(0, 1815, '\P{^Jg=syriacwaw}', "");
Expect(1, 1816, '\p{Jg=	 Syriac_WAW}', "");
Expect(0, 1816, '\p{^Jg=	 Syriac_WAW}', "");
Expect(0, 1816, '\P{Jg=	 Syriac_WAW}', "");
Expect(1, 1816, '\P{^Jg=	 Syriac_WAW}', "");
Expect(0, 1815, '\p{Jg=	 Syriac_WAW}', "");
Expect(1, 1815, '\p{^Jg=	 Syriac_WAW}', "");
Expect(1, 1815, '\P{Jg=	 Syriac_WAW}', "");
Expect(0, 1815, '\P{^Jg=	 Syriac_WAW}', "");
Error('\p{Is_Joining_Group=/a/-Syriac_WAW}');
Error('\P{Is_Joining_Group=/a/-Syriac_WAW}');
Expect(1, 1816, '\p{Is_Joining_Group=syriacwaw}', "");
Expect(0, 1816, '\p{^Is_Joining_Group=syriacwaw}', "");
Expect(0, 1816, '\P{Is_Joining_Group=syriacwaw}', "");
Expect(1, 1816, '\P{^Is_Joining_Group=syriacwaw}', "");
Expect(0, 1815, '\p{Is_Joining_Group=syriacwaw}', "");
Expect(1, 1815, '\p{^Is_Joining_Group=syriacwaw}', "");
Expect(1, 1815, '\P{Is_Joining_Group=syriacwaw}', "");
Expect(0, 1815, '\P{^Is_Joining_Group=syriacwaw}', "");
Expect(1, 1816, '\p{Is_Joining_Group=_-Syriac-Waw}', "");
Expect(0, 1816, '\p{^Is_Joining_Group=_-Syriac-Waw}', "");
Expect(0, 1816, '\P{Is_Joining_Group=_-Syriac-Waw}', "");
Expect(1, 1816, '\P{^Is_Joining_Group=_-Syriac-Waw}', "");
Expect(0, 1815, '\p{Is_Joining_Group=_-Syriac-Waw}', "");
Expect(1, 1815, '\p{^Is_Joining_Group=_-Syriac-Waw}', "");
Expect(1, 1815, '\P{Is_Joining_Group=_-Syriac-Waw}', "");
Expect(0, 1815, '\P{^Is_Joining_Group=_-Syriac-Waw}', "");
Error('\p{Is_Jg:	/a/ 	syriac-WAW}');
Error('\P{Is_Jg:	/a/ 	syriac-WAW}');
Expect(1, 1816, '\p{Is_Jg=syriacwaw}', "");
Expect(0, 1816, '\p{^Is_Jg=syriacwaw}', "");
Expect(0, 1816, '\P{Is_Jg=syriacwaw}', "");
Expect(1, 1816, '\P{^Is_Jg=syriacwaw}', "");
Expect(0, 1815, '\p{Is_Jg=syriacwaw}', "");
Expect(1, 1815, '\p{^Is_Jg=syriacwaw}', "");
Expect(1, 1815, '\P{Is_Jg=syriacwaw}', "");
Expect(0, 1815, '\P{^Is_Jg=syriacwaw}', "");
Expect(1, 1816, '\p{Is_Jg=_syriac_WAW}', "");
Expect(0, 1816, '\p{^Is_Jg=_syriac_WAW}', "");
Expect(0, 1816, '\P{Is_Jg=_syriac_WAW}', "");
Expect(1, 1816, '\P{^Is_Jg=_syriac_WAW}', "");
Expect(0, 1815, '\p{Is_Jg=_syriac_WAW}', "");
Expect(1, 1815, '\p{^Is_Jg=_syriac_WAW}', "");
Expect(1, 1815, '\P{Is_Jg=_syriac_WAW}', "");
Expect(0, 1815, '\P{^Is_Jg=_syriac_WAW}', "");
Error('\p{Joining_Group=/a/Taw}');
Error('\P{Joining_Group=/a/Taw}');
Expect(1, 1836, '\p{Joining_Group=taw}', "");
Expect(0, 1836, '\p{^Joining_Group=taw}', "");
Expect(0, 1836, '\P{Joining_Group=taw}', "");
Expect(1, 1836, '\P{^Joining_Group=taw}', "");
Expect(0, 1835, '\p{Joining_Group=taw}', "");
Expect(1, 1835, '\p{^Joining_Group=taw}', "");
Expect(1, 1835, '\P{Joining_Group=taw}', "");
Expect(0, 1835, '\P{^Joining_Group=taw}', "");
Expect(1, 1836, '\p{Joining_Group= Taw}', "");
Expect(0, 1836, '\p{^Joining_Group= Taw}', "");
Expect(0, 1836, '\P{Joining_Group= Taw}', "");
Expect(1, 1836, '\P{^Joining_Group= Taw}', "");
Expect(0, 1835, '\p{Joining_Group= Taw}', "");
Expect(1, 1835, '\p{^Joining_Group= Taw}', "");
Expect(1, 1835, '\P{Joining_Group= Taw}', "");
Expect(0, 1835, '\P{^Joining_Group= Taw}', "");
Error('\p{Jg=:= 	taw}');
Error('\P{Jg=:= 	taw}');
Expect(1, 1836, '\p{Jg: taw}', "");
Expect(0, 1836, '\p{^Jg: taw}', "");
Expect(0, 1836, '\P{Jg: taw}', "");
Expect(1, 1836, '\P{^Jg: taw}', "");
Expect(0, 1835, '\p{Jg: taw}', "");
Expect(1, 1835, '\p{^Jg: taw}', "");
Expect(1, 1835, '\P{Jg: taw}', "");
Expect(0, 1835, '\P{^Jg: taw}', "");
Expect(1, 1836, '\p{Jg=	-Taw}', "");
Expect(0, 1836, '\p{^Jg=	-Taw}', "");
Expect(0, 1836, '\P{Jg=	-Taw}', "");
Expect(1, 1836, '\P{^Jg=	-Taw}', "");
Expect(0, 1835, '\p{Jg=	-Taw}', "");
Expect(1, 1835, '\p{^Jg=	-Taw}', "");
Expect(1, 1835, '\P{Jg=	-Taw}', "");
Expect(0, 1835, '\P{^Jg=	-Taw}', "");
Error('\p{Is_Joining_Group= TAW/a/}');
Error('\P{Is_Joining_Group= TAW/a/}');
Expect(1, 1836, '\p{Is_Joining_Group=taw}', "");
Expect(0, 1836, '\p{^Is_Joining_Group=taw}', "");
Expect(0, 1836, '\P{Is_Joining_Group=taw}', "");
Expect(1, 1836, '\P{^Is_Joining_Group=taw}', "");
Expect(0, 1835, '\p{Is_Joining_Group=taw}', "");
Expect(1, 1835, '\p{^Is_Joining_Group=taw}', "");
Expect(1, 1835, '\P{Is_Joining_Group=taw}', "");
Expect(0, 1835, '\P{^Is_Joining_Group=taw}', "");
Expect(1, 1836, '\p{Is_Joining_Group= -Taw}', "");
Expect(0, 1836, '\p{^Is_Joining_Group= -Taw}', "");
Expect(0, 1836, '\P{Is_Joining_Group= -Taw}', "");
Expect(1, 1836, '\P{^Is_Joining_Group= -Taw}', "");
Expect(0, 1835, '\p{Is_Joining_Group= -Taw}', "");
Expect(1, 1835, '\p{^Is_Joining_Group= -Taw}', "");
Expect(1, 1835, '\P{Is_Joining_Group= -Taw}', "");
Expect(0, 1835, '\P{^Is_Joining_Group= -Taw}', "");
Error('\p{Is_Jg=_/a/TAW}');
Error('\P{Is_Jg=_/a/TAW}');
Expect(1, 1836, '\p{Is_Jg=taw}', "");
Expect(0, 1836, '\p{^Is_Jg=taw}', "");
Expect(0, 1836, '\P{Is_Jg=taw}', "");
Expect(1, 1836, '\P{^Is_Jg=taw}', "");
Expect(0, 1835, '\p{Is_Jg=taw}', "");
Expect(1, 1835, '\p{^Is_Jg=taw}', "");
Expect(1, 1835, '\P{Is_Jg=taw}', "");
Expect(0, 1835, '\P{^Is_Jg=taw}', "");
Expect(1, 1836, '\p{Is_Jg=	_Taw}', "");
Expect(0, 1836, '\p{^Is_Jg=	_Taw}', "");
Expect(0, 1836, '\P{Is_Jg=	_Taw}', "");
Expect(1, 1836, '\P{^Is_Jg=	_Taw}', "");
Expect(0, 1835, '\p{Is_Jg=	_Taw}', "");
Expect(1, 1835, '\p{^Is_Jg=	_Taw}', "");
Expect(1, 1835, '\P{Is_Jg=	_Taw}', "");
Expect(0, 1835, '\P{^Is_Jg=	_Taw}', "");
Error('\p{Joining_Group=:= Finalsemkath}');
Error('\P{Joining_Group=:= Finalsemkath}');
Expect(1, 1828, '\p{Joining_Group=finalsemkath}', "");
Expect(0, 1828, '\p{^Joining_Group=finalsemkath}', "");
Expect(0, 1828, '\P{Joining_Group=finalsemkath}', "");
Expect(1, 1828, '\P{^Joining_Group=finalsemkath}', "");
Expect(0, 1827, '\p{Joining_Group=finalsemkath}', "");
Expect(1, 1827, '\p{^Joining_Group=finalsemkath}', "");
Expect(1, 1827, '\P{Joining_Group=finalsemkath}', "");
Expect(0, 1827, '\P{^Joining_Group=finalsemkath}', "");
Expect(1, 1828, '\p{Joining_Group=-Final	Semkath}', "");
Expect(0, 1828, '\p{^Joining_Group=-Final	Semkath}', "");
Expect(0, 1828, '\P{Joining_Group=-Final	Semkath}', "");
Expect(1, 1828, '\P{^Joining_Group=-Final	Semkath}', "");
Expect(0, 1827, '\p{Joining_Group=-Final	Semkath}', "");
Expect(1, 1827, '\p{^Joining_Group=-Final	Semkath}', "");
Expect(1, 1827, '\P{Joining_Group=-Final	Semkath}', "");
Expect(0, 1827, '\P{^Joining_Group=-Final	Semkath}', "");
Error('\p{Jg=	-FINAL-semkath/a/}');
Error('\P{Jg=	-FINAL-semkath/a/}');
Expect(1, 1828, '\p{Jg=finalsemkath}', "");
Expect(0, 1828, '\p{^Jg=finalsemkath}', "");
Expect(0, 1828, '\P{Jg=finalsemkath}', "");
Expect(1, 1828, '\P{^Jg=finalsemkath}', "");
Expect(0, 1827, '\p{Jg=finalsemkath}', "");
Expect(1, 1827, '\p{^Jg=finalsemkath}', "");
Expect(1, 1827, '\P{Jg=finalsemkath}', "");
Expect(0, 1827, '\P{^Jg=finalsemkath}', "");
Expect(1, 1828, '\p{Jg=		final-semkath}', "");
Expect(0, 1828, '\p{^Jg=		final-semkath}', "");
Expect(0, 1828, '\P{Jg=		final-semkath}', "");
Expect(1, 1828, '\P{^Jg=		final-semkath}', "");
Expect(0, 1827, '\p{Jg=		final-semkath}', "");
Expect(1, 1827, '\p{^Jg=		final-semkath}', "");
Expect(1, 1827, '\P{Jg=		final-semkath}', "");
Expect(0, 1827, '\P{^Jg=		final-semkath}', "");
Error('\p{Is_Joining_Group=__FINAL Semkath/a/}');
Error('\P{Is_Joining_Group=__FINAL Semkath/a/}');
Expect(1, 1828, '\p{Is_Joining_Group=finalsemkath}', "");
Expect(0, 1828, '\p{^Is_Joining_Group=finalsemkath}', "");
Expect(0, 1828, '\P{Is_Joining_Group=finalsemkath}', "");
Expect(1, 1828, '\P{^Is_Joining_Group=finalsemkath}', "");
Expect(0, 1827, '\p{Is_Joining_Group=finalsemkath}', "");
Expect(1, 1827, '\p{^Is_Joining_Group=finalsemkath}', "");
Expect(1, 1827, '\P{Is_Joining_Group=finalsemkath}', "");
Expect(0, 1827, '\P{^Is_Joining_Group=finalsemkath}', "");
Expect(1, 1828, '\p{Is_Joining_Group=-FINALSEMKATH}', "");
Expect(0, 1828, '\p{^Is_Joining_Group=-FINALSEMKATH}', "");
Expect(0, 1828, '\P{Is_Joining_Group=-FINALSEMKATH}', "");
Expect(1, 1828, '\P{^Is_Joining_Group=-FINALSEMKATH}', "");
Expect(0, 1827, '\p{Is_Joining_Group=-FINALSEMKATH}', "");
Expect(1, 1827, '\p{^Is_Joining_Group=-FINALSEMKATH}', "");
Expect(1, 1827, '\P{Is_Joining_Group=-FINALSEMKATH}', "");
Expect(0, 1827, '\P{^Is_Joining_Group=-FINALSEMKATH}', "");
Error('\p{Is_Jg= :=FINAL_Semkath}');
Error('\P{Is_Jg= :=FINAL_Semkath}');
Expect(1, 1828, '\p{Is_Jg:finalsemkath}', "");
Expect(0, 1828, '\p{^Is_Jg:finalsemkath}', "");
Expect(0, 1828, '\P{Is_Jg:finalsemkath}', "");
Expect(1, 1828, '\P{^Is_Jg:finalsemkath}', "");
Expect(0, 1827, '\p{Is_Jg:finalsemkath}', "");
Expect(1, 1827, '\p{^Is_Jg:finalsemkath}', "");
Expect(1, 1827, '\P{Is_Jg:finalsemkath}', "");
Expect(0, 1827, '\P{^Is_Jg:finalsemkath}', "");
Expect(1, 1828, '\p{Is_Jg=-_Final SEMKATH}', "");
Expect(0, 1828, '\p{^Is_Jg=-_Final SEMKATH}', "");
Expect(0, 1828, '\P{Is_Jg=-_Final SEMKATH}', "");
Expect(1, 1828, '\P{^Is_Jg=-_Final SEMKATH}', "");
Expect(0, 1827, '\p{Is_Jg=-_Final SEMKATH}', "");
Expect(1, 1827, '\p{^Is_Jg=-_Final SEMKATH}', "");
Expect(1, 1827, '\P{Is_Jg=-_Final SEMKATH}', "");
Expect(0, 1827, '\P{^Is_Jg=-_Final SEMKATH}', "");
Error('\p{Joining_Group= Knotted:=heh}');
Error('\P{Joining_Group= Knotted:=heh}');
Expect(1, 1726, '\p{Joining_Group=knottedheh}', "");
Expect(0, 1726, '\p{^Joining_Group=knottedheh}', "");
Expect(0, 1726, '\P{Joining_Group=knottedheh}', "");
Expect(1, 1726, '\P{^Joining_Group=knottedheh}', "");
Expect(0, 1725, '\p{Joining_Group=knottedheh}', "");
Expect(1, 1725, '\p{^Joining_Group=knottedheh}', "");
Expect(1, 1725, '\P{Joining_Group=knottedheh}', "");
Expect(0, 1725, '\P{^Joining_Group=knottedheh}', "");
Expect(1, 1726, '\p{Joining_Group=-_knotted_Heh}', "");
Expect(0, 1726, '\p{^Joining_Group=-_knotted_Heh}', "");
Expect(0, 1726, '\P{Joining_Group=-_knotted_Heh}', "");
Expect(1, 1726, '\P{^Joining_Group=-_knotted_Heh}', "");
Expect(0, 1725, '\p{Joining_Group=-_knotted_Heh}', "");
Expect(1, 1725, '\p{^Joining_Group=-_knotted_Heh}', "");
Expect(1, 1725, '\P{Joining_Group=-_knotted_Heh}', "");
Expect(0, 1725, '\P{^Joining_Group=-_knotted_Heh}', "");
Error('\p{Jg=_Knotted/a/HEH}');
Error('\P{Jg=_Knotted/a/HEH}');
Expect(1, 1726, '\p{Jg=knottedheh}', "");
Expect(0, 1726, '\p{^Jg=knottedheh}', "");
Expect(0, 1726, '\P{Jg=knottedheh}', "");
Expect(1, 1726, '\P{^Jg=knottedheh}', "");
Expect(0, 1725, '\p{Jg=knottedheh}', "");
Expect(1, 1725, '\p{^Jg=knottedheh}', "");
Expect(1, 1725, '\P{Jg=knottedheh}', "");
Expect(0, 1725, '\P{^Jg=knottedheh}', "");
Expect(1, 1726, '\p{Jg=-KNOTTED_HEH}', "");
Expect(0, 1726, '\p{^Jg=-KNOTTED_HEH}', "");
Expect(0, 1726, '\P{Jg=-KNOTTED_HEH}', "");
Expect(1, 1726, '\P{^Jg=-KNOTTED_HEH}', "");
Expect(0, 1725, '\p{Jg=-KNOTTED_HEH}', "");
Expect(1, 1725, '\p{^Jg=-KNOTTED_HEH}', "");
Expect(1, 1725, '\P{Jg=-KNOTTED_HEH}', "");
Expect(0, 1725, '\P{^Jg=-KNOTTED_HEH}', "");
Error('\p{Is_Joining_Group=-:=KnottedHeh}');
Error('\P{Is_Joining_Group=-:=KnottedHeh}');
Expect(1, 1726, '\p{Is_Joining_Group=knottedheh}', "");
Expect(0, 1726, '\p{^Is_Joining_Group=knottedheh}', "");
Expect(0, 1726, '\P{Is_Joining_Group=knottedheh}', "");
Expect(1, 1726, '\P{^Is_Joining_Group=knottedheh}', "");
Expect(0, 1725, '\p{Is_Joining_Group=knottedheh}', "");
Expect(1, 1725, '\p{^Is_Joining_Group=knottedheh}', "");
Expect(1, 1725, '\P{Is_Joining_Group=knottedheh}', "");
Expect(0, 1725, '\P{^Is_Joining_Group=knottedheh}', "");
Expect(1, 1726, '\p{Is_Joining_Group=-Knotted Heh}', "");
Expect(0, 1726, '\p{^Is_Joining_Group=-Knotted Heh}', "");
Expect(0, 1726, '\P{Is_Joining_Group=-Knotted Heh}', "");
Expect(1, 1726, '\P{^Is_Joining_Group=-Knotted Heh}', "");
Expect(0, 1725, '\p{Is_Joining_Group=-Knotted Heh}', "");
Expect(1, 1725, '\p{^Is_Joining_Group=-Knotted Heh}', "");
Expect(1, 1725, '\P{Is_Joining_Group=-Knotted Heh}', "");
Expect(0, 1725, '\P{^Is_Joining_Group=-Knotted Heh}', "");
Error('\p{Is_Jg=_ knotted:=Heh}');
Error('\P{Is_Jg=_ knotted:=Heh}');
Expect(1, 1726, '\p{Is_Jg=knottedheh}', "");
Expect(0, 1726, '\p{^Is_Jg=knottedheh}', "");
Expect(0, 1726, '\P{Is_Jg=knottedheh}', "");
Expect(1, 1726, '\P{^Is_Jg=knottedheh}', "");
Expect(0, 1725, '\p{Is_Jg=knottedheh}', "");
Expect(1, 1725, '\p{^Is_Jg=knottedheh}', "");
Expect(1, 1725, '\P{Is_Jg=knottedheh}', "");
Expect(0, 1725, '\P{^Is_Jg=knottedheh}', "");
Expect(1, 1726, '\p{Is_Jg=	 KNOTTEDheh}', "");
Expect(0, 1726, '\p{^Is_Jg=	 KNOTTEDheh}', "");
Expect(0, 1726, '\P{Is_Jg=	 KNOTTEDheh}', "");
Expect(1, 1726, '\P{^Is_Jg=	 KNOTTEDheh}', "");
Expect(0, 1725, '\p{Is_Jg=	 KNOTTEDheh}', "");
Expect(1, 1725, '\p{^Is_Jg=	 KNOTTEDheh}', "");
Expect(1, 1725, '\P{Is_Jg=	 KNOTTEDheh}', "");
Expect(0, 1725, '\P{^Is_Jg=	 KNOTTEDheh}', "");
Error('\p{Joining_Group= _Kaf:=}');
Error('\P{Joining_Group= _Kaf:=}');
Expect(1, 1603, '\p{Joining_Group=kaf}', "");
Expect(0, 1603, '\p{^Joining_Group=kaf}', "");
Expect(0, 1603, '\P{Joining_Group=kaf}', "");
Expect(1, 1603, '\P{^Joining_Group=kaf}', "");
Expect(0, 1602, '\p{Joining_Group=kaf}', "");
Expect(1, 1602, '\p{^Joining_Group=kaf}', "");
Expect(1, 1602, '\P{Joining_Group=kaf}', "");
Expect(0, 1602, '\P{^Joining_Group=kaf}', "");
Expect(1, 1603, '\p{Joining_Group=	 Kaf}', "");
Expect(0, 1603, '\p{^Joining_Group=	 Kaf}', "");
Expect(0, 1603, '\P{Joining_Group=	 Kaf}', "");
Expect(1, 1603, '\P{^Joining_Group=	 Kaf}', "");
Expect(0, 1602, '\p{Joining_Group=	 Kaf}', "");
Expect(1, 1602, '\p{^Joining_Group=	 Kaf}', "");
Expect(1, 1602, '\P{Joining_Group=	 Kaf}', "");
Expect(0, 1602, '\P{^Joining_Group=	 Kaf}', "");
Error('\p{Jg:   _:=kaf}');
Error('\P{Jg:   _:=kaf}');
Expect(1, 1603, '\p{Jg:	kaf}', "");
Expect(0, 1603, '\p{^Jg:	kaf}', "");
Expect(0, 1603, '\P{Jg:	kaf}', "");
Expect(1, 1603, '\P{^Jg:	kaf}', "");
Expect(0, 1602, '\p{Jg:	kaf}', "");
Expect(1, 1602, '\p{^Jg:	kaf}', "");
Expect(1, 1602, '\P{Jg:	kaf}', "");
Expect(0, 1602, '\P{^Jg:	kaf}', "");
Expect(1, 1603, '\p{Jg:	 Kaf}', "");
Expect(0, 1603, '\p{^Jg:	 Kaf}', "");
Expect(0, 1603, '\P{Jg:	 Kaf}', "");
Expect(1, 1603, '\P{^Jg:	 Kaf}', "");
Expect(0, 1602, '\p{Jg:	 Kaf}', "");
Expect(1, 1602, '\p{^Jg:	 Kaf}', "");
Expect(1, 1602, '\P{Jg:	 Kaf}', "");
Expect(0, 1602, '\P{^Jg:	 Kaf}', "");
Error('\p{Is_Joining_Group=--Kaf:=}');
Error('\P{Is_Joining_Group=--Kaf:=}');
Expect(1, 1603, '\p{Is_Joining_Group=kaf}', "");
Expect(0, 1603, '\p{^Is_Joining_Group=kaf}', "");
Expect(0, 1603, '\P{Is_Joining_Group=kaf}', "");
Expect(1, 1603, '\P{^Is_Joining_Group=kaf}', "");
Expect(0, 1602, '\p{Is_Joining_Group=kaf}', "");
Expect(1, 1602, '\p{^Is_Joining_Group=kaf}', "");
Expect(1, 1602, '\P{Is_Joining_Group=kaf}', "");
Expect(0, 1602, '\P{^Is_Joining_Group=kaf}', "");
Expect(1, 1603, '\p{Is_Joining_Group=-_kaf}', "");
Expect(0, 1603, '\p{^Is_Joining_Group=-_kaf}', "");
Expect(0, 1603, '\P{Is_Joining_Group=-_kaf}', "");
Expect(1, 1603, '\P{^Is_Joining_Group=-_kaf}', "");
Expect(0, 1602, '\p{Is_Joining_Group=-_kaf}', "");
Expect(1, 1602, '\p{^Is_Joining_Group=-_kaf}', "");
Expect(1, 1602, '\P{Is_Joining_Group=-_kaf}', "");
Expect(0, 1602, '\P{^Is_Joining_Group=-_kaf}', "");
Error('\p{Is_Jg= Kaf/a/}');
Error('\P{Is_Jg= Kaf/a/}');
Expect(1, 1603, '\p{Is_Jg=kaf}', "");
Expect(0, 1603, '\p{^Is_Jg=kaf}', "");
Expect(0, 1603, '\P{Is_Jg=kaf}', "");
Expect(1, 1603, '\P{^Is_Jg=kaf}', "");
Expect(0, 1602, '\p{Is_Jg=kaf}', "");
Expect(1, 1602, '\p{^Is_Jg=kaf}', "");
Expect(1, 1602, '\P{Is_Jg=kaf}', "");
Expect(0, 1602, '\P{^Is_Jg=kaf}', "");
Expect(1, 1603, '\p{Is_Jg=-	KAF}', "");
Expect(0, 1603, '\p{^Is_Jg=-	KAF}', "");
Expect(0, 1603, '\P{Is_Jg=-	KAF}', "");
Expect(1, 1603, '\P{^Is_Jg=-	KAF}', "");
Expect(0, 1602, '\p{Is_Jg=-	KAF}', "");
Expect(1, 1602, '\p{^Is_Jg=-	KAF}', "");
Expect(1, 1602, '\P{Is_Jg=-	KAF}', "");
Expect(0, 1602, '\P{^Is_Jg=-	KAF}', "");
Error('\p{Joining_Group=_:=FE}');
Error('\P{Joining_Group=_:=FE}');
Expect(1, 1871, '\p{Joining_Group=fe}', "");
Expect(0, 1871, '\p{^Joining_Group=fe}', "");
Expect(0, 1871, '\P{Joining_Group=fe}', "");
Expect(1, 1871, '\P{^Joining_Group=fe}', "");
Expect(0, 1870, '\p{Joining_Group=fe}', "");
Expect(1, 1870, '\p{^Joining_Group=fe}', "");
Expect(1, 1870, '\P{Joining_Group=fe}', "");
Expect(0, 1870, '\P{^Joining_Group=fe}', "");
Expect(1, 1871, '\p{Joining_Group=FE}', "");
Expect(0, 1871, '\p{^Joining_Group=FE}', "");
Expect(0, 1871, '\P{Joining_Group=FE}', "");
Expect(1, 1871, '\P{^Joining_Group=FE}', "");
Expect(0, 1870, '\p{Joining_Group=FE}', "");
Expect(1, 1870, '\p{^Joining_Group=FE}', "");
Expect(1, 1870, '\P{Joining_Group=FE}', "");
Expect(0, 1870, '\P{^Joining_Group=FE}', "");
Error('\p{Jg=/a/-Fe}');
Error('\P{Jg=/a/-Fe}');
Expect(1, 1871, '\p{Jg:fe}', "");
Expect(0, 1871, '\p{^Jg:fe}', "");
Expect(0, 1871, '\P{Jg:fe}', "");
Expect(1, 1871, '\P{^Jg:fe}', "");
Expect(0, 1870, '\p{Jg:fe}', "");
Expect(1, 1870, '\p{^Jg:fe}', "");
Expect(1, 1870, '\P{Jg:fe}', "");
Expect(0, 1870, '\P{^Jg:fe}', "");
Expect(1, 1871, '\p{Jg:-_Fe}', "");
Expect(0, 1871, '\p{^Jg:-_Fe}', "");
Expect(0, 1871, '\P{Jg:-_Fe}', "");
Expect(1, 1871, '\P{^Jg:-_Fe}', "");
Expect(0, 1870, '\p{Jg:-_Fe}', "");
Expect(1, 1870, '\p{^Jg:-_Fe}', "");
Expect(1, 1870, '\P{Jg:-_Fe}', "");
Expect(0, 1870, '\P{^Jg:-_Fe}', "");
Error('\p{Is_Joining_Group=/a/ _FE}');
Error('\P{Is_Joining_Group=/a/ _FE}');
Expect(1, 1871, '\p{Is_Joining_Group=fe}', "");
Expect(0, 1871, '\p{^Is_Joining_Group=fe}', "");
Expect(0, 1871, '\P{Is_Joining_Group=fe}', "");
Expect(1, 1871, '\P{^Is_Joining_Group=fe}', "");
Expect(0, 1870, '\p{Is_Joining_Group=fe}', "");
Expect(1, 1870, '\p{^Is_Joining_Group=fe}', "");
Expect(1, 1870, '\P{Is_Joining_Group=fe}', "");
Expect(0, 1870, '\P{^Is_Joining_Group=fe}', "");
Expect(1, 1871, '\p{Is_Joining_Group=__fe}', "");
Expect(0, 1871, '\p{^Is_Joining_Group=__fe}', "");
Expect(0, 1871, '\P{Is_Joining_Group=__fe}', "");
Expect(1, 1871, '\P{^Is_Joining_Group=__fe}', "");
Expect(0, 1870, '\p{Is_Joining_Group=__fe}', "");
Expect(1, 1870, '\p{^Is_Joining_Group=__fe}', "");
Expect(1, 1870, '\P{Is_Joining_Group=__fe}', "");
Expect(0, 1870, '\P{^Is_Joining_Group=__fe}', "");
Error('\p{Is_Jg=- fe:=}');
Error('\P{Is_Jg=- fe:=}');
Expect(1, 1871, '\p{Is_Jg=fe}', "");
Expect(0, 1871, '\p{^Is_Jg=fe}', "");
Expect(0, 1871, '\P{Is_Jg=fe}', "");
Expect(1, 1871, '\P{^Is_Jg=fe}', "");
Expect(0, 1870, '\p{Is_Jg=fe}', "");
Expect(1, 1870, '\p{^Is_Jg=fe}', "");
Expect(1, 1870, '\P{Is_Jg=fe}', "");
Expect(0, 1870, '\P{^Is_Jg=fe}', "");
Expect(1, 1871, '\p{Is_Jg=--fe}', "");
Expect(0, 1871, '\p{^Is_Jg=--fe}', "");
Expect(0, 1871, '\P{Is_Jg=--fe}', "");
Expect(1, 1871, '\P{^Is_Jg=--fe}', "");
Expect(0, 1870, '\p{Is_Jg=--fe}', "");
Expect(1, 1870, '\p{^Is_Jg=--fe}', "");
Expect(1, 1870, '\P{Is_Jg=--fe}', "");
Expect(0, 1870, '\P{^Is_Jg=--fe}', "");
Error('\p{Joining_Group=/a/_	Alaph}');
Error('\P{Joining_Group=/a/_	Alaph}');
Expect(1, 1808, '\p{Joining_Group=alaph}', "");
Expect(0, 1808, '\p{^Joining_Group=alaph}', "");
Expect(0, 1808, '\P{Joining_Group=alaph}', "");
Expect(1, 1808, '\P{^Joining_Group=alaph}', "");
Expect(0, 1807, '\p{Joining_Group=alaph}', "");
Expect(1, 1807, '\p{^Joining_Group=alaph}', "");
Expect(1, 1807, '\P{Joining_Group=alaph}', "");
Expect(0, 1807, '\P{^Joining_Group=alaph}', "");
Expect(1, 1808, '\p{Joining_Group=_ Alaph}', "");
Expect(0, 1808, '\p{^Joining_Group=_ Alaph}', "");
Expect(0, 1808, '\P{Joining_Group=_ Alaph}', "");
Expect(1, 1808, '\P{^Joining_Group=_ Alaph}', "");
Expect(0, 1807, '\p{Joining_Group=_ Alaph}', "");
Expect(1, 1807, '\p{^Joining_Group=_ Alaph}', "");
Expect(1, 1807, '\P{Joining_Group=_ Alaph}', "");
Expect(0, 1807, '\P{^Joining_Group=_ Alaph}', "");
Error('\p{Jg=-Alaph/a/}');
Error('\P{Jg=-Alaph/a/}');
Expect(1, 1808, '\p{Jg=alaph}', "");
Expect(0, 1808, '\p{^Jg=alaph}', "");
Expect(0, 1808, '\P{Jg=alaph}', "");
Expect(1, 1808, '\P{^Jg=alaph}', "");
Expect(0, 1807, '\p{Jg=alaph}', "");
Expect(1, 1807, '\p{^Jg=alaph}', "");
Expect(1, 1807, '\P{Jg=alaph}', "");
Expect(0, 1807, '\P{^Jg=alaph}', "");
Expect(1, 1808, '\p{Jg=-Alaph}', "");
Expect(0, 1808, '\p{^Jg=-Alaph}', "");
Expect(0, 1808, '\P{Jg=-Alaph}', "");
Expect(1, 1808, '\P{^Jg=-Alaph}', "");
Expect(0, 1807, '\p{Jg=-Alaph}', "");
Expect(1, 1807, '\p{^Jg=-Alaph}', "");
Expect(1, 1807, '\P{Jg=-Alaph}', "");
Expect(0, 1807, '\P{^Jg=-Alaph}', "");
Error('\p{Is_Joining_Group=	:=ALAPH}');
Error('\P{Is_Joining_Group=	:=ALAPH}');
Expect(1, 1808, '\p{Is_Joining_Group=alaph}', "");
Expect(0, 1808, '\p{^Is_Joining_Group=alaph}', "");
Expect(0, 1808, '\P{Is_Joining_Group=alaph}', "");
Expect(1, 1808, '\P{^Is_Joining_Group=alaph}', "");
Expect(0, 1807, '\p{Is_Joining_Group=alaph}', "");
Expect(1, 1807, '\p{^Is_Joining_Group=alaph}', "");
Expect(1, 1807, '\P{Is_Joining_Group=alaph}', "");
Expect(0, 1807, '\P{^Is_Joining_Group=alaph}', "");
Expect(1, 1808, '\p{Is_Joining_Group=-	Alaph}', "");
Expect(0, 1808, '\p{^Is_Joining_Group=-	Alaph}', "");
Expect(0, 1808, '\P{Is_Joining_Group=-	Alaph}', "");
Expect(1, 1808, '\P{^Is_Joining_Group=-	Alaph}', "");
Expect(0, 1807, '\p{Is_Joining_Group=-	Alaph}', "");
Expect(1, 1807, '\p{^Is_Joining_Group=-	Alaph}', "");
Expect(1, 1807, '\P{Is_Joining_Group=-	Alaph}', "");
Expect(0, 1807, '\P{^Is_Joining_Group=-	Alaph}', "");
Error('\p{Is_Jg=_/a/Alaph}');
Error('\P{Is_Jg=_/a/Alaph}');
Expect(1, 1808, '\p{Is_Jg=alaph}', "");
Expect(0, 1808, '\p{^Is_Jg=alaph}', "");
Expect(0, 1808, '\P{Is_Jg=alaph}', "");
Expect(1, 1808, '\P{^Is_Jg=alaph}', "");
Expect(0, 1807, '\p{Is_Jg=alaph}', "");
Expect(1, 1807, '\p{^Is_Jg=alaph}', "");
Expect(1, 1807, '\P{Is_Jg=alaph}', "");
Expect(0, 1807, '\P{^Is_Jg=alaph}', "");
Expect(1, 1808, '\p{Is_Jg=Alaph}', "");
Expect(0, 1808, '\p{^Is_Jg=Alaph}', "");
Expect(0, 1808, '\P{Is_Jg=Alaph}', "");
Expect(1, 1808, '\P{^Is_Jg=Alaph}', "");
Expect(0, 1807, '\p{Is_Jg=Alaph}', "");
Expect(1, 1807, '\p{^Is_Jg=Alaph}', "");
Expect(1, 1807, '\P{Is_Jg=Alaph}', "");
Expect(0, 1807, '\P{^Is_Jg=Alaph}', "");
Error('\p{Joining_Group= Lamadh:=}');
Error('\P{Joining_Group= Lamadh:=}');
Expect(1, 1824, '\p{Joining_Group=lamadh}', "");
Expect(0, 1824, '\p{^Joining_Group=lamadh}', "");
Expect(0, 1824, '\P{Joining_Group=lamadh}', "");
Expect(1, 1824, '\P{^Joining_Group=lamadh}', "");
Expect(0, 1823, '\p{Joining_Group=lamadh}', "");
Expect(1, 1823, '\p{^Joining_Group=lamadh}', "");
Expect(1, 1823, '\P{Joining_Group=lamadh}', "");
Expect(0, 1823, '\P{^Joining_Group=lamadh}', "");
Expect(1, 1824, '\p{Joining_Group= Lamadh}', "");
Expect(0, 1824, '\p{^Joining_Group= Lamadh}', "");
Expect(0, 1824, '\P{Joining_Group= Lamadh}', "");
Expect(1, 1824, '\P{^Joining_Group= Lamadh}', "");
Expect(0, 1823, '\p{Joining_Group= Lamadh}', "");
Expect(1, 1823, '\p{^Joining_Group= Lamadh}', "");
Expect(1, 1823, '\P{Joining_Group= Lamadh}', "");
Expect(0, 1823, '\P{^Joining_Group= Lamadh}', "");
Error('\p{Jg=:=	-Lamadh}');
Error('\P{Jg=:=	-Lamadh}');
Expect(1, 1824, '\p{Jg=lamadh}', "");
Expect(0, 1824, '\p{^Jg=lamadh}', "");
Expect(0, 1824, '\P{Jg=lamadh}', "");
Expect(1, 1824, '\P{^Jg=lamadh}', "");
Expect(0, 1823, '\p{Jg=lamadh}', "");
Expect(1, 1823, '\p{^Jg=lamadh}', "");
Expect(1, 1823, '\P{Jg=lamadh}', "");
Expect(0, 1823, '\P{^Jg=lamadh}', "");
Expect(1, 1824, '\p{Jg= lamadh}', "");
Expect(0, 1824, '\p{^Jg= lamadh}', "");
Expect(0, 1824, '\P{Jg= lamadh}', "");
Expect(1, 1824, '\P{^Jg= lamadh}', "");
Expect(0, 1823, '\p{Jg= lamadh}', "");
Expect(1, 1823, '\p{^Jg= lamadh}', "");
Expect(1, 1823, '\P{Jg= lamadh}', "");
Expect(0, 1823, '\P{^Jg= lamadh}', "");
Error('\p{Is_Joining_Group=:=- Lamadh}');
Error('\P{Is_Joining_Group=:=- Lamadh}');
Expect(1, 1824, '\p{Is_Joining_Group=lamadh}', "");
Expect(0, 1824, '\p{^Is_Joining_Group=lamadh}', "");
Expect(0, 1824, '\P{Is_Joining_Group=lamadh}', "");
Expect(1, 1824, '\P{^Is_Joining_Group=lamadh}', "");
Expect(0, 1823, '\p{Is_Joining_Group=lamadh}', "");
Expect(1, 1823, '\p{^Is_Joining_Group=lamadh}', "");
Expect(1, 1823, '\P{Is_Joining_Group=lamadh}', "");
Expect(0, 1823, '\P{^Is_Joining_Group=lamadh}', "");
Expect(1, 1824, '\p{Is_Joining_Group=	_LAMADH}', "");
Expect(0, 1824, '\p{^Is_Joining_Group=	_LAMADH}', "");
Expect(0, 1824, '\P{Is_Joining_Group=	_LAMADH}', "");
Expect(1, 1824, '\P{^Is_Joining_Group=	_LAMADH}', "");
Expect(0, 1823, '\p{Is_Joining_Group=	_LAMADH}', "");
Expect(1, 1823, '\p{^Is_Joining_Group=	_LAMADH}', "");
Expect(1, 1823, '\P{Is_Joining_Group=	_LAMADH}', "");
Expect(0, 1823, '\P{^Is_Joining_Group=	_LAMADH}', "");
Error('\p{Is_Jg=LAMADH:=}');
Error('\P{Is_Jg=LAMADH:=}');
Expect(1, 1824, '\p{Is_Jg=lamadh}', "");
Expect(0, 1824, '\p{^Is_Jg=lamadh}', "");
Expect(0, 1824, '\P{Is_Jg=lamadh}', "");
Expect(1, 1824, '\P{^Is_Jg=lamadh}', "");
Expect(0, 1823, '\p{Is_Jg=lamadh}', "");
Expect(1, 1823, '\p{^Is_Jg=lamadh}', "");
Expect(1, 1823, '\P{Is_Jg=lamadh}', "");
Expect(0, 1823, '\P{^Is_Jg=lamadh}', "");
Expect(1, 1824, '\p{Is_Jg=	_Lamadh}', "");
Expect(0, 1824, '\p{^Is_Jg=	_Lamadh}', "");
Expect(0, 1824, '\P{Is_Jg=	_Lamadh}', "");
Expect(1, 1824, '\P{^Is_Jg=	_Lamadh}', "");
Expect(0, 1823, '\p{Is_Jg=	_Lamadh}', "");
Expect(1, 1823, '\p{^Is_Jg=	_Lamadh}', "");
Expect(1, 1823, '\P{Is_Jg=	_Lamadh}', "");
Expect(0, 1823, '\P{^Is_Jg=	_Lamadh}', "");
Error('\p{Joining_Group=	/a/E}');
Error('\P{Joining_Group=	/a/E}');
Expect(1, 1829, '\p{Joining_Group=e}', "");
Expect(0, 1829, '\p{^Joining_Group=e}', "");
Expect(0, 1829, '\P{Joining_Group=e}', "");
Expect(1, 1829, '\P{^Joining_Group=e}', "");
Expect(0, 1828, '\p{Joining_Group=e}', "");
Expect(1, 1828, '\p{^Joining_Group=e}', "");
Expect(1, 1828, '\P{Joining_Group=e}', "");
Expect(0, 1828, '\P{^Joining_Group=e}', "");
Expect(1, 1829, '\p{Joining_Group=--E}', "");
Expect(0, 1829, '\p{^Joining_Group=--E}', "");
Expect(0, 1829, '\P{Joining_Group=--E}', "");
Expect(1, 1829, '\P{^Joining_Group=--E}', "");
Expect(0, 1828, '\p{Joining_Group=--E}', "");
Expect(1, 1828, '\p{^Joining_Group=--E}', "");
Expect(1, 1828, '\P{Joining_Group=--E}', "");
Expect(0, 1828, '\P{^Joining_Group=--E}', "");
Error('\p{Jg:   /a/	E}');
Error('\P{Jg:   /a/	E}');
Expect(1, 1829, '\p{Jg:   e}', "");
Expect(0, 1829, '\p{^Jg:   e}', "");
Expect(0, 1829, '\P{Jg:   e}', "");
Expect(1, 1829, '\P{^Jg:   e}', "");
Expect(0, 1828, '\p{Jg:   e}', "");
Expect(1, 1828, '\p{^Jg:   e}', "");
Expect(1, 1828, '\P{Jg:   e}', "");
Expect(0, 1828, '\P{^Jg:   e}', "");
Error('\p{Is_Joining_Group= e:=}');
Error('\P{Is_Joining_Group= e:=}');
Expect(1, 1829, '\p{Is_Joining_Group=e}', "");
Expect(0, 1829, '\p{^Is_Joining_Group=e}', "");
Expect(0, 1829, '\P{Is_Joining_Group=e}', "");
Expect(1, 1829, '\P{^Is_Joining_Group=e}', "");
Expect(0, 1828, '\p{Is_Joining_Group=e}', "");
Expect(1, 1828, '\p{^Is_Joining_Group=e}', "");
Expect(1, 1828, '\P{Is_Joining_Group=e}', "");
Expect(0, 1828, '\P{^Is_Joining_Group=e}', "");
Expect(1, 1829, '\p{Is_Joining_Group:   	 e}', "");
Expect(0, 1829, '\p{^Is_Joining_Group:   	 e}', "");
Expect(0, 1829, '\P{Is_Joining_Group:   	 e}', "");
Expect(1, 1829, '\P{^Is_Joining_Group:   	 e}', "");
Expect(0, 1828, '\p{Is_Joining_Group:   	 e}', "");
Expect(1, 1828, '\p{^Is_Joining_Group:   	 e}', "");
Expect(1, 1828, '\P{Is_Joining_Group:   	 e}', "");
Expect(0, 1828, '\P{^Is_Joining_Group:   	 e}', "");
Error('\p{Is_Jg=/a/_ E}');
Error('\P{Is_Jg=/a/_ E}');
Expect(1, 1829, '\p{Is_Jg=e}', "");
Expect(0, 1829, '\p{^Is_Jg=e}', "");
Expect(0, 1829, '\P{Is_Jg=e}', "");
Expect(1, 1829, '\P{^Is_Jg=e}', "");
Expect(0, 1828, '\p{Is_Jg=e}', "");
Expect(1, 1828, '\p{^Is_Jg=e}', "");
Expect(1, 1828, '\P{Is_Jg=e}', "");
Expect(0, 1828, '\P{^Is_Jg=e}', "");
Expect(1, 1829, '\p{Is_Jg=_E}', "");
Expect(0, 1829, '\p{^Is_Jg=_E}', "");
Expect(0, 1829, '\P{Is_Jg=_E}', "");
Expect(1, 1829, '\P{^Is_Jg=_E}', "");
Expect(0, 1828, '\p{Is_Jg=_E}', "");
Expect(1, 1828, '\p{^Is_Jg=_E}', "");
Expect(1, 1828, '\P{Is_Jg=_E}', "");
Expect(0, 1828, '\P{^Is_Jg=_E}', "");
Error('\p{Joining_Group=-yeh/a/BARREE}');
Error('\P{Joining_Group=-yeh/a/BARREE}');
Expect(1, 1747, '\p{Joining_Group=yehbarree}', "");
Expect(0, 1747, '\p{^Joining_Group=yehbarree}', "");
Expect(0, 1747, '\P{Joining_Group=yehbarree}', "");
Expect(1, 1747, '\P{^Joining_Group=yehbarree}', "");
Expect(0, 1745, '\p{Joining_Group=yehbarree}', "");
Expect(1, 1745, '\p{^Joining_Group=yehbarree}', "");
Expect(1, 1745, '\P{Joining_Group=yehbarree}', "");
Expect(0, 1745, '\P{^Joining_Group=yehbarree}', "");
Expect(1, 1747, '\p{Joining_Group=	-YEH_barree}', "");
Expect(0, 1747, '\p{^Joining_Group=	-YEH_barree}', "");
Expect(0, 1747, '\P{Joining_Group=	-YEH_barree}', "");
Expect(1, 1747, '\P{^Joining_Group=	-YEH_barree}', "");
Expect(0, 1745, '\p{Joining_Group=	-YEH_barree}', "");
Expect(1, 1745, '\p{^Joining_Group=	-YEH_barree}', "");
Expect(1, 1745, '\P{Joining_Group=	-YEH_barree}', "");
Expect(0, 1745, '\P{^Joining_Group=	-YEH_barree}', "");
Error('\p{Jg=:=  yeh	Barree}');
Error('\P{Jg=:=  yeh	Barree}');
Expect(1, 1747, '\p{Jg=yehbarree}', "");
Expect(0, 1747, '\p{^Jg=yehbarree}', "");
Expect(0, 1747, '\P{Jg=yehbarree}', "");
Expect(1, 1747, '\P{^Jg=yehbarree}', "");
Expect(0, 1745, '\p{Jg=yehbarree}', "");
Expect(1, 1745, '\p{^Jg=yehbarree}', "");
Expect(1, 1745, '\P{Jg=yehbarree}', "");
Expect(0, 1745, '\P{^Jg=yehbarree}', "");
Expect(1, 1747, '\p{Jg:-Yeh_barree}', "");
Expect(0, 1747, '\p{^Jg:-Yeh_barree}', "");
Expect(0, 1747, '\P{Jg:-Yeh_barree}', "");
Expect(1, 1747, '\P{^Jg:-Yeh_barree}', "");
Expect(0, 1745, '\p{Jg:-Yeh_barree}', "");
Expect(1, 1745, '\p{^Jg:-Yeh_barree}', "");
Expect(1, 1745, '\P{Jg:-Yeh_barree}', "");
Expect(0, 1745, '\P{^Jg:-Yeh_barree}', "");
Error('\p{Is_Joining_Group=	Yeh barree:=}');
Error('\P{Is_Joining_Group=	Yeh barree:=}');
Expect(1, 1747, '\p{Is_Joining_Group=yehbarree}', "");
Expect(0, 1747, '\p{^Is_Joining_Group=yehbarree}', "");
Expect(0, 1747, '\P{Is_Joining_Group=yehbarree}', "");
Expect(1, 1747, '\P{^Is_Joining_Group=yehbarree}', "");
Expect(0, 1745, '\p{Is_Joining_Group=yehbarree}', "");
Expect(1, 1745, '\p{^Is_Joining_Group=yehbarree}', "");
Expect(1, 1745, '\P{Is_Joining_Group=yehbarree}', "");
Expect(0, 1745, '\P{^Is_Joining_Group=yehbarree}', "");
Expect(1, 1747, '\p{Is_Joining_Group=-_Yeh Barree}', "");
Expect(0, 1747, '\p{^Is_Joining_Group=-_Yeh Barree}', "");
Expect(0, 1747, '\P{Is_Joining_Group=-_Yeh Barree}', "");
Expect(1, 1747, '\P{^Is_Joining_Group=-_Yeh Barree}', "");
Expect(0, 1745, '\p{Is_Joining_Group=-_Yeh Barree}', "");
Expect(1, 1745, '\p{^Is_Joining_Group=-_Yeh Barree}', "");
Expect(1, 1745, '\P{Is_Joining_Group=-_Yeh Barree}', "");
Expect(0, 1745, '\P{^Is_Joining_Group=-_Yeh Barree}', "");
Error('\p{Is_Jg=	 Yeh	BARREE/a/}');
Error('\P{Is_Jg=	 Yeh	BARREE/a/}');
Expect(1, 1747, '\p{Is_Jg=yehbarree}', "");
Expect(0, 1747, '\p{^Is_Jg=yehbarree}', "");
Expect(0, 1747, '\P{Is_Jg=yehbarree}', "");
Expect(1, 1747, '\P{^Is_Jg=yehbarree}', "");
Expect(0, 1745, '\p{Is_Jg=yehbarree}', "");
Expect(1, 1745, '\p{^Is_Jg=yehbarree}', "");
Expect(1, 1745, '\P{Is_Jg=yehbarree}', "");
Expect(0, 1745, '\P{^Is_Jg=yehbarree}', "");
Expect(1, 1747, '\p{Is_Jg=  YEH	barree}', "");
Expect(0, 1747, '\p{^Is_Jg=  YEH	barree}', "");
Expect(0, 1747, '\P{Is_Jg=  YEH	barree}', "");
Expect(1, 1747, '\P{^Is_Jg=  YEH	barree}', "");
Expect(0, 1745, '\p{Is_Jg=  YEH	barree}', "");
Expect(1, 1745, '\p{^Is_Jg=  YEH	barree}', "");
Expect(1, 1745, '\P{Is_Jg=  YEH	barree}', "");
Expect(0, 1745, '\P{^Is_Jg=  YEH	barree}', "");
Error('\p{Joining_Group=/a/_Nya}');
Error('\P{Joining_Group=/a/_Nya}');
Expect(1, 1725, '\p{Joining_Group=nya}', "");
Expect(0, 1725, '\p{^Joining_Group=nya}', "");
Expect(0, 1725, '\P{Joining_Group=nya}', "");
Expect(1, 1725, '\P{^Joining_Group=nya}', "");
Expect(0, 1724, '\p{Joining_Group=nya}', "");
Expect(1, 1724, '\p{^Joining_Group=nya}', "");
Expect(1, 1724, '\P{Joining_Group=nya}', "");
Expect(0, 1724, '\P{^Joining_Group=nya}', "");
Expect(1, 1725, '\p{Joining_Group=_nya}', "");
Expect(0, 1725, '\p{^Joining_Group=_nya}', "");
Expect(0, 1725, '\P{Joining_Group=_nya}', "");
Expect(1, 1725, '\P{^Joining_Group=_nya}', "");
Expect(0, 1724, '\p{Joining_Group=_nya}', "");
Expect(1, 1724, '\p{^Joining_Group=_nya}', "");
Expect(1, 1724, '\P{Joining_Group=_nya}', "");
Expect(0, 1724, '\P{^Joining_Group=_nya}', "");
Error('\p{Jg=	 nya/a/}');
Error('\P{Jg=	 nya/a/}');
Expect(1, 1725, '\p{Jg=nya}', "");
Expect(0, 1725, '\p{^Jg=nya}', "");
Expect(0, 1725, '\P{Jg=nya}', "");
Expect(1, 1725, '\P{^Jg=nya}', "");
Expect(0, 1724, '\p{Jg=nya}', "");
Expect(1, 1724, '\p{^Jg=nya}', "");
Expect(1, 1724, '\P{Jg=nya}', "");
Expect(0, 1724, '\P{^Jg=nya}', "");
Expect(1, 1725, '\p{Jg: Nya}', "");
Expect(0, 1725, '\p{^Jg: Nya}', "");
Expect(0, 1725, '\P{Jg: Nya}', "");
Expect(1, 1725, '\P{^Jg: Nya}', "");
Expect(0, 1724, '\p{Jg: Nya}', "");
Expect(1, 1724, '\p{^Jg: Nya}', "");
Expect(1, 1724, '\P{Jg: Nya}', "");
Expect(0, 1724, '\P{^Jg: Nya}', "");
Error('\p{Is_Joining_Group=/a/ _Nya}');
Error('\P{Is_Joining_Group=/a/ _Nya}');
Expect(1, 1725, '\p{Is_Joining_Group=nya}', "");
Expect(0, 1725, '\p{^Is_Joining_Group=nya}', "");
Expect(0, 1725, '\P{Is_Joining_Group=nya}', "");
Expect(1, 1725, '\P{^Is_Joining_Group=nya}', "");
Expect(0, 1724, '\p{Is_Joining_Group=nya}', "");
Expect(1, 1724, '\p{^Is_Joining_Group=nya}', "");
Expect(1, 1724, '\P{Is_Joining_Group=nya}', "");
Expect(0, 1724, '\P{^Is_Joining_Group=nya}', "");
Expect(1, 1725, '\p{Is_Joining_Group:    _NYA}', "");
Expect(0, 1725, '\p{^Is_Joining_Group:    _NYA}', "");
Expect(0, 1725, '\P{Is_Joining_Group:    _NYA}', "");
Expect(1, 1725, '\P{^Is_Joining_Group:    _NYA}', "");
Expect(0, 1724, '\p{Is_Joining_Group:    _NYA}', "");
Expect(1, 1724, '\p{^Is_Joining_Group:    _NYA}', "");
Expect(1, 1724, '\P{Is_Joining_Group:    _NYA}', "");
Expect(0, 1724, '\P{^Is_Joining_Group:    _NYA}', "");
Error('\p{Is_Jg=	Nya/a/}');
Error('\P{Is_Jg=	Nya/a/}');
Expect(1, 1725, '\p{Is_Jg=nya}', "");
Expect(0, 1725, '\p{^Is_Jg=nya}', "");
Expect(0, 1725, '\P{Is_Jg=nya}', "");
Expect(1, 1725, '\P{^Is_Jg=nya}', "");
Expect(0, 1724, '\p{Is_Jg=nya}', "");
Expect(1, 1724, '\p{^Is_Jg=nya}', "");
Expect(1, 1724, '\P{Is_Jg=nya}', "");
Expect(0, 1724, '\P{^Is_Jg=nya}', "");
Expect(1, 1725, '\p{Is_Jg= -Nya}', "");
Expect(0, 1725, '\p{^Is_Jg= -Nya}', "");
Expect(0, 1725, '\P{Is_Jg= -Nya}', "");
Expect(1, 1725, '\P{^Is_Jg= -Nya}', "");
Expect(0, 1724, '\p{Is_Jg= -Nya}', "");
Expect(1, 1724, '\p{^Is_Jg= -Nya}', "");
Expect(1, 1724, '\P{Is_Jg= -Nya}', "");
Expect(0, 1724, '\P{^Is_Jg= -Nya}', "");
Error('\p{Joining_Group=  Nun:=}');
Error('\P{Joining_Group=  Nun:=}');
Expect(1, 1826, '\p{Joining_Group=nun}', "");
Expect(0, 1826, '\p{^Joining_Group=nun}', "");
Expect(0, 1826, '\P{Joining_Group=nun}', "");
Expect(1, 1826, '\P{^Joining_Group=nun}', "");
Expect(0, 1825, '\p{Joining_Group=nun}', "");
Expect(1, 1825, '\p{^Joining_Group=nun}', "");
Expect(1, 1825, '\P{Joining_Group=nun}', "");
Expect(0, 1825, '\P{^Joining_Group=nun}', "");
Expect(1, 1826, '\p{Joining_Group=  NUN}', "");
Expect(0, 1826, '\p{^Joining_Group=  NUN}', "");
Expect(0, 1826, '\P{Joining_Group=  NUN}', "");
Expect(1, 1826, '\P{^Joining_Group=  NUN}', "");
Expect(0, 1825, '\p{Joining_Group=  NUN}', "");
Expect(1, 1825, '\p{^Joining_Group=  NUN}', "");
Expect(1, 1825, '\P{Joining_Group=  NUN}', "");
Expect(0, 1825, '\P{^Joining_Group=  NUN}', "");
Error('\p{Jg= :=NUN}');
Error('\P{Jg= :=NUN}');
Expect(1, 1826, '\p{Jg=nun}', "");
Expect(0, 1826, '\p{^Jg=nun}', "");
Expect(0, 1826, '\P{Jg=nun}', "");
Expect(1, 1826, '\P{^Jg=nun}', "");
Expect(0, 1825, '\p{Jg=nun}', "");
Expect(1, 1825, '\p{^Jg=nun}', "");
Expect(1, 1825, '\P{Jg=nun}', "");
Expect(0, 1825, '\P{^Jg=nun}', "");
Error('\p{Is_Joining_Group:  -NUN/a/}');
Error('\P{Is_Joining_Group:  -NUN/a/}');
Expect(1, 1826, '\p{Is_Joining_Group=nun}', "");
Expect(0, 1826, '\p{^Is_Joining_Group=nun}', "");
Expect(0, 1826, '\P{Is_Joining_Group=nun}', "");
Expect(1, 1826, '\P{^Is_Joining_Group=nun}', "");
Expect(0, 1825, '\p{Is_Joining_Group=nun}', "");
Expect(1, 1825, '\p{^Is_Joining_Group=nun}', "");
Expect(1, 1825, '\P{Is_Joining_Group=nun}', "");
Expect(0, 1825, '\P{^Is_Joining_Group=nun}', "");
Expect(1, 1826, '\p{Is_Joining_Group=	 Nun}', "");
Expect(0, 1826, '\p{^Is_Joining_Group=	 Nun}', "");
Expect(0, 1826, '\P{Is_Joining_Group=	 Nun}', "");
Expect(1, 1826, '\P{^Is_Joining_Group=	 Nun}', "");
Expect(0, 1825, '\p{Is_Joining_Group=	 Nun}', "");
Expect(1, 1825, '\p{^Is_Joining_Group=	 Nun}', "");
Expect(1, 1825, '\P{Is_Joining_Group=	 Nun}', "");
Expect(0, 1825, '\P{^Is_Joining_Group=	 Nun}', "");
Error('\p{Is_Jg= :=nun}');
Error('\P{Is_Jg= :=nun}');
Expect(1, 1826, '\p{Is_Jg=nun}', "");
Expect(0, 1826, '\p{^Is_Jg=nun}', "");
Expect(0, 1826, '\P{Is_Jg=nun}', "");
Expect(1, 1826, '\P{^Is_Jg=nun}', "");
Expect(0, 1825, '\p{Is_Jg=nun}', "");
Expect(1, 1825, '\p{^Is_Jg=nun}', "");
Expect(1, 1825, '\P{Is_Jg=nun}', "");
Expect(0, 1825, '\P{^Is_Jg=nun}', "");
Expect(1, 1826, '\p{Is_Jg=- nun}', "");
Expect(0, 1826, '\p{^Is_Jg=- nun}', "");
Expect(0, 1826, '\P{Is_Jg=- nun}', "");
Expect(1, 1826, '\P{^Is_Jg=- nun}', "");
Expect(0, 1825, '\p{Is_Jg=- nun}', "");
Expect(1, 1825, '\p{^Is_Jg=- nun}', "");
Expect(1, 1825, '\P{Is_Jg=- nun}', "");
Expect(0, 1825, '\P{^Is_Jg=- nun}', "");
Error('\p{Joining_Group=/a/-_Lam}');
Error('\P{Joining_Group=/a/-_Lam}');
Expect(1, 1604, '\p{Joining_Group:lam}', "");
Expect(0, 1604, '\p{^Joining_Group:lam}', "");
Expect(0, 1604, '\P{Joining_Group:lam}', "");
Expect(1, 1604, '\P{^Joining_Group:lam}', "");
Expect(0, 1603, '\p{Joining_Group:lam}', "");
Expect(1, 1603, '\p{^Joining_Group:lam}', "");
Expect(1, 1603, '\P{Joining_Group:lam}', "");
Expect(0, 1603, '\P{^Joining_Group:lam}', "");
Expect(1, 1604, '\p{Joining_Group= 	Lam}', "");
Expect(0, 1604, '\p{^Joining_Group= 	Lam}', "");
Expect(0, 1604, '\P{Joining_Group= 	Lam}', "");
Expect(1, 1604, '\P{^Joining_Group= 	Lam}', "");
Expect(0, 1603, '\p{Joining_Group= 	Lam}', "");
Expect(1, 1603, '\p{^Joining_Group= 	Lam}', "");
Expect(1, 1603, '\P{Joining_Group= 	Lam}', "");
Expect(0, 1603, '\P{^Joining_Group= 	Lam}', "");
Error('\p{Jg=_-Lam:=}');
Error('\P{Jg=_-Lam:=}');
Expect(1, 1604, '\p{Jg=lam}', "");
Expect(0, 1604, '\p{^Jg=lam}', "");
Expect(0, 1604, '\P{Jg=lam}', "");
Expect(1, 1604, '\P{^Jg=lam}', "");
Expect(0, 1603, '\p{Jg=lam}', "");
Expect(1, 1603, '\p{^Jg=lam}', "");
Expect(1, 1603, '\P{Jg=lam}', "");
Expect(0, 1603, '\P{^Jg=lam}', "");
Expect(1, 1604, '\p{Jg= lam}', "");
Expect(0, 1604, '\p{^Jg= lam}', "");
Expect(0, 1604, '\P{Jg= lam}', "");
Expect(1, 1604, '\P{^Jg= lam}', "");
Expect(0, 1603, '\p{Jg= lam}', "");
Expect(1, 1603, '\p{^Jg= lam}', "");
Expect(1, 1603, '\P{Jg= lam}', "");
Expect(0, 1603, '\P{^Jg= lam}', "");
Error('\p{Is_Joining_Group=_lam/a/}');
Error('\P{Is_Joining_Group=_lam/a/}');
Expect(1, 1604, '\p{Is_Joining_Group:   lam}', "");
Expect(0, 1604, '\p{^Is_Joining_Group:   lam}', "");
Expect(0, 1604, '\P{Is_Joining_Group:   lam}', "");
Expect(1, 1604, '\P{^Is_Joining_Group:   lam}', "");
Expect(0, 1603, '\p{Is_Joining_Group:   lam}', "");
Expect(1, 1603, '\p{^Is_Joining_Group:   lam}', "");
Expect(1, 1603, '\P{Is_Joining_Group:   lam}', "");
Expect(0, 1603, '\P{^Is_Joining_Group:   lam}', "");
Expect(1, 1604, '\p{Is_Joining_Group=_lam}', "");
Expect(0, 1604, '\p{^Is_Joining_Group=_lam}', "");
Expect(0, 1604, '\P{Is_Joining_Group=_lam}', "");
Expect(1, 1604, '\P{^Is_Joining_Group=_lam}', "");
Expect(0, 1603, '\p{Is_Joining_Group=_lam}', "");
Expect(1, 1603, '\p{^Is_Joining_Group=_lam}', "");
Expect(1, 1603, '\P{Is_Joining_Group=_lam}', "");
Expect(0, 1603, '\P{^Is_Joining_Group=_lam}', "");
Error('\p{Is_Jg=	 LAM:=}');
Error('\P{Is_Jg=	 LAM:=}');
Expect(1, 1604, '\p{Is_Jg: lam}', "");
Expect(0, 1604, '\p{^Is_Jg: lam}', "");
Expect(0, 1604, '\P{Is_Jg: lam}', "");
Expect(1, 1604, '\P{^Is_Jg: lam}', "");
Expect(0, 1603, '\p{Is_Jg: lam}', "");
Expect(1, 1603, '\p{^Is_Jg: lam}', "");
Expect(1, 1603, '\P{Is_Jg: lam}', "");
Expect(0, 1603, '\P{^Is_Jg: lam}', "");
Expect(1, 1604, '\p{Is_Jg=-	lam}', "");
Expect(0, 1604, '\p{^Is_Jg=-	lam}', "");
Expect(0, 1604, '\P{Is_Jg=-	lam}', "");
Expect(1, 1604, '\P{^Is_Jg=-	lam}', "");
Expect(0, 1603, '\p{Is_Jg=-	lam}', "");
Expect(1, 1603, '\p{^Is_Jg=-	lam}', "");
Expect(1, 1603, '\P{Is_Jg=-	lam}', "");
Expect(0, 1603, '\P{^Is_Jg=-	lam}', "");
Error('\p{Joining_Group=	_Ain/a/}');
Error('\P{Joining_Group=	_Ain/a/}');
Expect(1, 1594, '\p{Joining_Group=ain}', "");
Expect(0, 1594, '\p{^Joining_Group=ain}', "");
Expect(0, 1594, '\P{Joining_Group=ain}', "");
Expect(1, 1594, '\P{^Joining_Group=ain}', "");
Expect(0, 1592, '\p{Joining_Group=ain}', "");
Expect(1, 1592, '\p{^Joining_Group=ain}', "");
Expect(1, 1592, '\P{Joining_Group=ain}', "");
Expect(0, 1592, '\P{^Joining_Group=ain}', "");
Expect(1, 1594, '\p{Joining_Group= 	Ain}', "");
Expect(0, 1594, '\p{^Joining_Group= 	Ain}', "");
Expect(0, 1594, '\P{Joining_Group= 	Ain}', "");
Expect(1, 1594, '\P{^Joining_Group= 	Ain}', "");
Expect(0, 1592, '\p{Joining_Group= 	Ain}', "");
Expect(1, 1592, '\p{^Joining_Group= 	Ain}', "");
Expect(1, 1592, '\P{Joining_Group= 	Ain}', "");
Expect(0, 1592, '\P{^Joining_Group= 	Ain}', "");
Error('\p{Jg=/a/_Ain}');
Error('\P{Jg=/a/_Ain}');
Expect(1, 1594, '\p{Jg=ain}', "");
Expect(0, 1594, '\p{^Jg=ain}', "");
Expect(0, 1594, '\P{Jg=ain}', "");
Expect(1, 1594, '\P{^Jg=ain}', "");
Expect(0, 1592, '\p{Jg=ain}', "");
Expect(1, 1592, '\p{^Jg=ain}', "");
Expect(1, 1592, '\P{Jg=ain}', "");
Expect(0, 1592, '\P{^Jg=ain}', "");
Expect(1, 1594, '\p{Jg=_Ain}', "");
Expect(0, 1594, '\p{^Jg=_Ain}', "");
Expect(0, 1594, '\P{Jg=_Ain}', "");
Expect(1, 1594, '\P{^Jg=_Ain}', "");
Expect(0, 1592, '\p{Jg=_Ain}', "");
Expect(1, 1592, '\p{^Jg=_Ain}', "");
Expect(1, 1592, '\P{Jg=_Ain}', "");
Expect(0, 1592, '\P{^Jg=_Ain}', "");
Error('\p{Is_Joining_Group= :=Ain}');
Error('\P{Is_Joining_Group= :=Ain}');
Expect(1, 1594, '\p{Is_Joining_Group=ain}', "");
Expect(0, 1594, '\p{^Is_Joining_Group=ain}', "");
Expect(0, 1594, '\P{Is_Joining_Group=ain}', "");
Expect(1, 1594, '\P{^Is_Joining_Group=ain}', "");
Expect(0, 1592, '\p{Is_Joining_Group=ain}', "");
Expect(1, 1592, '\p{^Is_Joining_Group=ain}', "");
Expect(1, 1592, '\P{Is_Joining_Group=ain}', "");
Expect(0, 1592, '\P{^Is_Joining_Group=ain}', "");
Expect(1, 1594, '\p{Is_Joining_Group=_ Ain}', "");
Expect(0, 1594, '\p{^Is_Joining_Group=_ Ain}', "");
Expect(0, 1594, '\P{Is_Joining_Group=_ Ain}', "");
Expect(1, 1594, '\P{^Is_Joining_Group=_ Ain}', "");
Expect(0, 1592, '\p{Is_Joining_Group=_ Ain}', "");
Expect(1, 1592, '\p{^Is_Joining_Group=_ Ain}', "");
Expect(1, 1592, '\P{Is_Joining_Group=_ Ain}', "");
Expect(0, 1592, '\P{^Is_Joining_Group=_ Ain}', "");
Error('\p{Is_Jg=/a/ain}');
Error('\P{Is_Jg=/a/ain}');
Expect(1, 1594, '\p{Is_Jg=ain}', "");
Expect(0, 1594, '\p{^Is_Jg=ain}', "");
Expect(0, 1594, '\P{Is_Jg=ain}', "");
Expect(1, 1594, '\P{^Is_Jg=ain}', "");
Expect(0, 1592, '\p{Is_Jg=ain}', "");
Expect(1, 1592, '\p{^Is_Jg=ain}', "");
Expect(1, 1592, '\P{Is_Jg=ain}', "");
Expect(0, 1592, '\P{^Is_Jg=ain}', "");
Expect(1, 1594, '\p{Is_Jg=Ain}', "");
Expect(0, 1594, '\p{^Is_Jg=Ain}', "");
Expect(0, 1594, '\P{Is_Jg=Ain}', "");
Expect(1, 1594, '\P{^Is_Jg=Ain}', "");
Expect(0, 1592, '\p{Is_Jg=Ain}', "");
Expect(1, 1592, '\p{^Is_Jg=Ain}', "");
Expect(1, 1592, '\P{Is_Jg=Ain}', "");
Expect(0, 1592, '\P{^Is_Jg=Ain}', "");
Error('\p{Joining_Group=:=-	Heh}');
Error('\P{Joining_Group=:=-	Heh}');
Expect(1, 1607, '\p{Joining_Group=heh}', "");
Expect(0, 1607, '\p{^Joining_Group=heh}', "");
Expect(0, 1607, '\P{Joining_Group=heh}', "");
Expect(1, 1607, '\P{^Joining_Group=heh}', "");
Expect(0, 1606, '\p{Joining_Group=heh}', "");
Expect(1, 1606, '\p{^Joining_Group=heh}', "");
Expect(1, 1606, '\P{Joining_Group=heh}', "");
Expect(0, 1606, '\P{^Joining_Group=heh}', "");
Expect(1, 1607, '\p{Joining_Group=_ heh}', "");
Expect(0, 1607, '\p{^Joining_Group=_ heh}', "");
Expect(0, 1607, '\P{Joining_Group=_ heh}', "");
Expect(1, 1607, '\P{^Joining_Group=_ heh}', "");
Expect(0, 1606, '\p{Joining_Group=_ heh}', "");
Expect(1, 1606, '\p{^Joining_Group=_ heh}', "");
Expect(1, 1606, '\P{Joining_Group=_ heh}', "");
Expect(0, 1606, '\P{^Joining_Group=_ heh}', "");
Error('\p{Jg:/a/ Heh}');
Error('\P{Jg:/a/ Heh}');
Expect(1, 1607, '\p{Jg=heh}', "");
Expect(0, 1607, '\p{^Jg=heh}', "");
Expect(0, 1607, '\P{Jg=heh}', "");
Expect(1, 1607, '\P{^Jg=heh}', "");
Expect(0, 1606, '\p{Jg=heh}', "");
Expect(1, 1606, '\p{^Jg=heh}', "");
Expect(1, 1606, '\P{Jg=heh}', "");
Expect(0, 1606, '\P{^Jg=heh}', "");
Expect(1, 1607, '\p{Jg= Heh}', "");
Expect(0, 1607, '\p{^Jg= Heh}', "");
Expect(0, 1607, '\P{Jg= Heh}', "");
Expect(1, 1607, '\P{^Jg= Heh}', "");
Expect(0, 1606, '\p{Jg= Heh}', "");
Expect(1, 1606, '\p{^Jg= Heh}', "");
Expect(1, 1606, '\P{Jg= Heh}', "");
Expect(0, 1606, '\P{^Jg= Heh}', "");
Error('\p{Is_Joining_Group= -Heh/a/}');
Error('\P{Is_Joining_Group= -Heh/a/}');
Expect(1, 1607, '\p{Is_Joining_Group=heh}', "");
Expect(0, 1607, '\p{^Is_Joining_Group=heh}', "");
Expect(0, 1607, '\P{Is_Joining_Group=heh}', "");
Expect(1, 1607, '\P{^Is_Joining_Group=heh}', "");
Expect(0, 1606, '\p{Is_Joining_Group=heh}', "");
Expect(1, 1606, '\p{^Is_Joining_Group=heh}', "");
Expect(1, 1606, '\P{Is_Joining_Group=heh}', "");
Expect(0, 1606, '\P{^Is_Joining_Group=heh}', "");
Expect(1, 1607, '\p{Is_Joining_Group= HEH}', "");
Expect(0, 1607, '\p{^Is_Joining_Group= HEH}', "");
Expect(0, 1607, '\P{Is_Joining_Group= HEH}', "");
Expect(1, 1607, '\P{^Is_Joining_Group= HEH}', "");
Expect(0, 1606, '\p{Is_Joining_Group= HEH}', "");
Expect(1, 1606, '\p{^Is_Joining_Group= HEH}', "");
Expect(1, 1606, '\P{Is_Joining_Group= HEH}', "");
Expect(0, 1606, '\P{^Is_Joining_Group= HEH}', "");
Error('\p{Is_Jg=Heh/a/}');
Error('\P{Is_Jg=Heh/a/}');
Expect(1, 1607, '\p{Is_Jg=heh}', "");
Expect(0, 1607, '\p{^Is_Jg=heh}', "");
Expect(0, 1607, '\P{Is_Jg=heh}', "");
Expect(1, 1607, '\P{^Is_Jg=heh}', "");
Expect(0, 1606, '\p{Is_Jg=heh}', "");
Expect(1, 1606, '\p{^Is_Jg=heh}', "");
Expect(1, 1606, '\P{Is_Jg=heh}', "");
Expect(0, 1606, '\P{^Is_Jg=heh}', "");
Expect(1, 1607, '\p{Is_Jg=-_Heh}', "");
Expect(0, 1607, '\p{^Is_Jg=-_Heh}', "");
Expect(0, 1607, '\P{Is_Jg=-_Heh}', "");
Expect(1, 1607, '\P{^Is_Jg=-_Heh}', "");
Expect(0, 1606, '\p{Is_Jg=-_Heh}', "");
Expect(1, 1606, '\p{^Is_Jg=-_Heh}', "");
Expect(1, 1606, '\P{Is_Jg=-_Heh}', "");
Expect(0, 1606, '\P{^Is_Jg=-_Heh}', "");
Error('\p{Joining_Group=QAPH/a/}');
Error('\P{Joining_Group=QAPH/a/}');
Expect(1, 1833, '\p{Joining_Group=qaph}', "");
Expect(0, 1833, '\p{^Joining_Group=qaph}', "");
Expect(0, 1833, '\P{Joining_Group=qaph}', "");
Expect(1, 1833, '\P{^Joining_Group=qaph}', "");
Expect(0, 1832, '\p{Joining_Group=qaph}', "");
Expect(1, 1832, '\p{^Joining_Group=qaph}', "");
Expect(1, 1832, '\P{Joining_Group=qaph}', "");
Expect(0, 1832, '\P{^Joining_Group=qaph}', "");
Expect(1, 1833, '\p{Joining_Group=--Qaph}', "");
Expect(0, 1833, '\p{^Joining_Group=--Qaph}', "");
Expect(0, 1833, '\P{Joining_Group=--Qaph}', "");
Expect(1, 1833, '\P{^Joining_Group=--Qaph}', "");
Expect(0, 1832, '\p{Joining_Group=--Qaph}', "");
Expect(1, 1832, '\p{^Joining_Group=--Qaph}', "");
Expect(1, 1832, '\P{Joining_Group=--Qaph}', "");
Expect(0, 1832, '\P{^Joining_Group=--Qaph}', "");
Error('\p{Jg=-Qaph/a/}');
Error('\P{Jg=-Qaph/a/}');
Expect(1, 1833, '\p{Jg=qaph}', "");
Expect(0, 1833, '\p{^Jg=qaph}', "");
Expect(0, 1833, '\P{Jg=qaph}', "");
Expect(1, 1833, '\P{^Jg=qaph}', "");
Expect(0, 1832, '\p{Jg=qaph}', "");
Expect(1, 1832, '\p{^Jg=qaph}', "");
Expect(1, 1832, '\P{Jg=qaph}', "");
Expect(0, 1832, '\P{^Jg=qaph}', "");
Expect(1, 1833, '\p{Jg=-	qaph}', "");
Expect(0, 1833, '\p{^Jg=-	qaph}', "");
Expect(0, 1833, '\P{Jg=-	qaph}', "");
Expect(1, 1833, '\P{^Jg=-	qaph}', "");
Expect(0, 1832, '\p{Jg=-	qaph}', "");
Expect(1, 1832, '\p{^Jg=-	qaph}', "");
Expect(1, 1832, '\P{Jg=-	qaph}', "");
Expect(0, 1832, '\P{^Jg=-	qaph}', "");
Error('\p{Is_Joining_Group=-_qaph:=}');
Error('\P{Is_Joining_Group=-_qaph:=}');
Expect(1, 1833, '\p{Is_Joining_Group=qaph}', "");
Expect(0, 1833, '\p{^Is_Joining_Group=qaph}', "");
Expect(0, 1833, '\P{Is_Joining_Group=qaph}', "");
Expect(1, 1833, '\P{^Is_Joining_Group=qaph}', "");
Expect(0, 1832, '\p{Is_Joining_Group=qaph}', "");
Expect(1, 1832, '\p{^Is_Joining_Group=qaph}', "");
Expect(1, 1832, '\P{Is_Joining_Group=qaph}', "");
Expect(0, 1832, '\P{^Is_Joining_Group=qaph}', "");
Expect(1, 1833, '\p{Is_Joining_Group=__Qaph}', "");
Expect(0, 1833, '\p{^Is_Joining_Group=__Qaph}', "");
Expect(0, 1833, '\P{Is_Joining_Group=__Qaph}', "");
Expect(1, 1833, '\P{^Is_Joining_Group=__Qaph}', "");
Expect(0, 1832, '\p{Is_Joining_Group=__Qaph}', "");
Expect(1, 1832, '\p{^Is_Joining_Group=__Qaph}', "");
Expect(1, 1832, '\P{Is_Joining_Group=__Qaph}', "");
Expect(0, 1832, '\P{^Is_Joining_Group=__Qaph}', "");
Error('\p{Is_Jg=/a/		QAPH}');
Error('\P{Is_Jg=/a/		QAPH}');
Expect(1, 1833, '\p{Is_Jg=qaph}', "");
Expect(0, 1833, '\p{^Is_Jg=qaph}', "");
Expect(0, 1833, '\P{Is_Jg=qaph}', "");
Expect(1, 1833, '\P{^Is_Jg=qaph}', "");
Expect(0, 1832, '\p{Is_Jg=qaph}', "");
Expect(1, 1832, '\p{^Is_Jg=qaph}', "");
Expect(1, 1832, '\P{Is_Jg=qaph}', "");
Expect(0, 1832, '\P{^Is_Jg=qaph}', "");
Expect(1, 1833, '\p{Is_Jg=-	Qaph}', "");
Expect(0, 1833, '\p{^Is_Jg=-	Qaph}', "");
Expect(0, 1833, '\P{Is_Jg=-	Qaph}', "");
Expect(1, 1833, '\P{^Is_Jg=-	Qaph}', "");
Expect(0, 1832, '\p{Is_Jg=-	Qaph}', "");
Expect(1, 1832, '\p{^Is_Jg=-	Qaph}', "");
Expect(1, 1832, '\P{Is_Jg=-	Qaph}', "");
Expect(0, 1832, '\P{^Is_Jg=-	Qaph}', "");
Error('\p{Joining_Group=_	HETH:=}');
Error('\P{Joining_Group=_	HETH:=}');
Expect(1, 1818, '\p{Joining_Group=heth}', "");
Expect(0, 1818, '\p{^Joining_Group=heth}', "");
Expect(0, 1818, '\P{Joining_Group=heth}', "");
Expect(1, 1818, '\P{^Joining_Group=heth}', "");
Expect(0, 1817, '\p{Joining_Group=heth}', "");
Expect(1, 1817, '\p{^Joining_Group=heth}', "");
Expect(1, 1817, '\P{Joining_Group=heth}', "");
Expect(0, 1817, '\P{^Joining_Group=heth}', "");
Expect(1, 1818, '\p{Joining_Group= 	heth}', "");
Expect(0, 1818, '\p{^Joining_Group= 	heth}', "");
Expect(0, 1818, '\P{Joining_Group= 	heth}', "");
Expect(1, 1818, '\P{^Joining_Group= 	heth}', "");
Expect(0, 1817, '\p{Joining_Group= 	heth}', "");
Expect(1, 1817, '\p{^Joining_Group= 	heth}', "");
Expect(1, 1817, '\P{Joining_Group= 	heth}', "");
Expect(0, 1817, '\P{^Joining_Group= 	heth}', "");
Error('\p{Jg= _Heth/a/}');
Error('\P{Jg= _Heth/a/}');
Expect(1, 1818, '\p{Jg=heth}', "");
Expect(0, 1818, '\p{^Jg=heth}', "");
Expect(0, 1818, '\P{Jg=heth}', "");
Expect(1, 1818, '\P{^Jg=heth}', "");
Expect(0, 1817, '\p{Jg=heth}', "");
Expect(1, 1817, '\p{^Jg=heth}', "");
Expect(1, 1817, '\P{Jg=heth}', "");
Expect(0, 1817, '\P{^Jg=heth}', "");
Expect(1, 1818, '\p{Jg= Heth}', "");
Expect(0, 1818, '\p{^Jg= Heth}', "");
Expect(0, 1818, '\P{Jg= Heth}', "");
Expect(1, 1818, '\P{^Jg= Heth}', "");
Expect(0, 1817, '\p{Jg= Heth}', "");
Expect(1, 1817, '\p{^Jg= Heth}', "");
Expect(1, 1817, '\P{Jg= Heth}', "");
Expect(0, 1817, '\P{^Jg= Heth}', "");
Error('\p{Is_Joining_Group=_:=Heth}');
Error('\P{Is_Joining_Group=_:=Heth}');
Expect(1, 1818, '\p{Is_Joining_Group=heth}', "");
Expect(0, 1818, '\p{^Is_Joining_Group=heth}', "");
Expect(0, 1818, '\P{Is_Joining_Group=heth}', "");
Expect(1, 1818, '\P{^Is_Joining_Group=heth}', "");
Expect(0, 1817, '\p{Is_Joining_Group=heth}', "");
Expect(1, 1817, '\p{^Is_Joining_Group=heth}', "");
Expect(1, 1817, '\P{Is_Joining_Group=heth}', "");
Expect(0, 1817, '\P{^Is_Joining_Group=heth}', "");
Expect(1, 1818, '\p{Is_Joining_Group= heth}', "");
Expect(0, 1818, '\p{^Is_Joining_Group= heth}', "");
Expect(0, 1818, '\P{Is_Joining_Group= heth}', "");
Expect(1, 1818, '\P{^Is_Joining_Group= heth}', "");
Expect(0, 1817, '\p{Is_Joining_Group= heth}', "");
Expect(1, 1817, '\p{^Is_Joining_Group= heth}', "");
Expect(1, 1817, '\P{Is_Joining_Group= heth}', "");
Expect(0, 1817, '\P{^Is_Joining_Group= heth}', "");
Error('\p{Is_Jg=:=	-Heth}');
Error('\P{Is_Jg=:=	-Heth}');
Expect(1, 1818, '\p{Is_Jg=heth}', "");
Expect(0, 1818, '\p{^Is_Jg=heth}', "");
Expect(0, 1818, '\P{Is_Jg=heth}', "");
Expect(1, 1818, '\P{^Is_Jg=heth}', "");
Expect(0, 1817, '\p{Is_Jg=heth}', "");
Expect(1, 1817, '\p{^Is_Jg=heth}', "");
Expect(1, 1817, '\P{Is_Jg=heth}', "");
Expect(0, 1817, '\P{^Is_Jg=heth}', "");
Expect(1, 1818, '\p{Is_Jg=		heth}', "");
Expect(0, 1818, '\p{^Is_Jg=		heth}', "");
Expect(0, 1818, '\P{Is_Jg=		heth}', "");
Expect(1, 1818, '\P{^Is_Jg=		heth}', "");
Expect(0, 1817, '\p{Is_Jg=		heth}', "");
Expect(1, 1817, '\p{^Is_Jg=		heth}', "");
Expect(1, 1817, '\P{Is_Jg=		heth}', "");
Expect(0, 1817, '\P{^Is_Jg=		heth}', "");
Error('\p{Joining_Group=/a/Teth}');
Error('\P{Joining_Group=/a/Teth}');
Expect(1, 1820, '\p{Joining_Group=teth}', "");
Expect(0, 1820, '\p{^Joining_Group=teth}', "");
Expect(0, 1820, '\P{Joining_Group=teth}', "");
Expect(1, 1820, '\P{^Joining_Group=teth}', "");
Expect(0, 1818, '\p{Joining_Group=teth}', "");
Expect(1, 1818, '\p{^Joining_Group=teth}', "");
Expect(1, 1818, '\P{Joining_Group=teth}', "");
Expect(0, 1818, '\P{^Joining_Group=teth}', "");
Expect(1, 1820, '\p{Joining_Group=	teth}', "");
Expect(0, 1820, '\p{^Joining_Group=	teth}', "");
Expect(0, 1820, '\P{Joining_Group=	teth}', "");
Expect(1, 1820, '\P{^Joining_Group=	teth}', "");
Expect(0, 1818, '\p{Joining_Group=	teth}', "");
Expect(1, 1818, '\p{^Joining_Group=	teth}', "");
Expect(1, 1818, '\P{Joining_Group=	teth}', "");
Expect(0, 1818, '\P{^Joining_Group=	teth}', "");
Error('\p{Jg=/a/ -Teth}');
Error('\P{Jg=/a/ -Teth}');
Expect(1, 1820, '\p{Jg=teth}', "");
Expect(0, 1820, '\p{^Jg=teth}', "");
Expect(0, 1820, '\P{Jg=teth}', "");
Expect(1, 1820, '\P{^Jg=teth}', "");
Expect(0, 1818, '\p{Jg=teth}', "");
Expect(1, 1818, '\p{^Jg=teth}', "");
Expect(1, 1818, '\P{Jg=teth}', "");
Expect(0, 1818, '\P{^Jg=teth}', "");
Expect(1, 1820, '\p{Jg=-	Teth}', "");
Expect(0, 1820, '\p{^Jg=-	Teth}', "");
Expect(0, 1820, '\P{Jg=-	Teth}', "");
Expect(1, 1820, '\P{^Jg=-	Teth}', "");
Expect(0, 1818, '\p{Jg=-	Teth}', "");
Expect(1, 1818, '\p{^Jg=-	Teth}', "");
Expect(1, 1818, '\P{Jg=-	Teth}', "");
Expect(0, 1818, '\P{^Jg=-	Teth}', "");
Error('\p{Is_Joining_Group:	:=_ teth}');
Error('\P{Is_Joining_Group:	:=_ teth}');
Expect(1, 1820, '\p{Is_Joining_Group=teth}', "");
Expect(0, 1820, '\p{^Is_Joining_Group=teth}', "");
Expect(0, 1820, '\P{Is_Joining_Group=teth}', "");
Expect(1, 1820, '\P{^Is_Joining_Group=teth}', "");
Expect(0, 1818, '\p{Is_Joining_Group=teth}', "");
Expect(1, 1818, '\p{^Is_Joining_Group=teth}', "");
Expect(1, 1818, '\P{Is_Joining_Group=teth}', "");
Expect(0, 1818, '\P{^Is_Joining_Group=teth}', "");
Expect(1, 1820, '\p{Is_Joining_Group:	_Teth}', "");
Expect(0, 1820, '\p{^Is_Joining_Group:	_Teth}', "");
Expect(0, 1820, '\P{Is_Joining_Group:	_Teth}', "");
Expect(1, 1820, '\P{^Is_Joining_Group:	_Teth}', "");
Expect(0, 1818, '\p{Is_Joining_Group:	_Teth}', "");
Expect(1, 1818, '\p{^Is_Joining_Group:	_Teth}', "");
Expect(1, 1818, '\P{Is_Joining_Group:	_Teth}', "");
Expect(0, 1818, '\P{^Is_Joining_Group:	_Teth}', "");
Error('\p{Is_Jg=	Teth/a/}');
Error('\P{Is_Jg=	Teth/a/}');
Expect(1, 1820, '\p{Is_Jg=teth}', "");
Expect(0, 1820, '\p{^Is_Jg=teth}', "");
Expect(0, 1820, '\P{Is_Jg=teth}', "");
Expect(1, 1820, '\P{^Is_Jg=teth}', "");
Expect(0, 1818, '\p{Is_Jg=teth}', "");
Expect(1, 1818, '\p{^Is_Jg=teth}', "");
Expect(1, 1818, '\P{Is_Jg=teth}', "");
Expect(0, 1818, '\P{^Is_Jg=teth}', "");
Expect(1, 1820, '\p{Is_Jg= _Teth}', "");
Expect(0, 1820, '\p{^Is_Jg= _Teth}', "");
Expect(0, 1820, '\P{Is_Jg= _Teth}', "");
Expect(1, 1820, '\P{^Is_Jg= _Teth}', "");
Expect(0, 1818, '\p{Is_Jg= _Teth}', "");
Expect(1, 1818, '\p{^Is_Jg= _Teth}', "");
Expect(1, 1818, '\P{Is_Jg= _Teth}', "");
Expect(0, 1818, '\P{^Is_Jg= _Teth}', "");
Error('\p{Joining_Group:	-	DALATH RISH/a/}');
Error('\P{Joining_Group:	-	DALATH RISH/a/}');
Expect(1, 1814, '\p{Joining_Group=dalathrish}', "");
Expect(0, 1814, '\p{^Joining_Group=dalathrish}', "");
Expect(0, 1814, '\P{Joining_Group=dalathrish}', "");
Expect(1, 1814, '\P{^Joining_Group=dalathrish}', "");
Expect(0, 1812, '\p{Joining_Group=dalathrish}', "");
Expect(1, 1812, '\p{^Joining_Group=dalathrish}', "");
Expect(1, 1812, '\P{Joining_Group=dalathrish}', "");
Expect(0, 1812, '\P{^Joining_Group=dalathrish}', "");
Expect(1, 1814, '\p{Joining_Group=--DALATHRish}', "");
Expect(0, 1814, '\p{^Joining_Group=--DALATHRish}', "");
Expect(0, 1814, '\P{Joining_Group=--DALATHRish}', "");
Expect(1, 1814, '\P{^Joining_Group=--DALATHRish}', "");
Expect(0, 1812, '\p{Joining_Group=--DALATHRish}', "");
Expect(1, 1812, '\p{^Joining_Group=--DALATHRish}', "");
Expect(1, 1812, '\P{Joining_Group=--DALATHRish}', "");
Expect(0, 1812, '\P{^Joining_Group=--DALATHRish}', "");
Error('\p{Jg=/a/ _dalath-RISH}');
Error('\P{Jg=/a/ _dalath-RISH}');
Expect(1, 1814, '\p{Jg=dalathrish}', "");
Expect(0, 1814, '\p{^Jg=dalathrish}', "");
Expect(0, 1814, '\P{Jg=dalathrish}', "");
Expect(1, 1814, '\P{^Jg=dalathrish}', "");
Expect(0, 1812, '\p{Jg=dalathrish}', "");
Expect(1, 1812, '\p{^Jg=dalathrish}', "");
Expect(1, 1812, '\P{Jg=dalathrish}', "");
Expect(0, 1812, '\P{^Jg=dalathrish}', "");
Expect(1, 1814, '\p{Jg=		Dalath Rish}', "");
Expect(0, 1814, '\p{^Jg=		Dalath Rish}', "");
Expect(0, 1814, '\P{Jg=		Dalath Rish}', "");
Expect(1, 1814, '\P{^Jg=		Dalath Rish}', "");
Expect(0, 1812, '\p{Jg=		Dalath Rish}', "");
Expect(1, 1812, '\p{^Jg=		Dalath Rish}', "");
Expect(1, 1812, '\P{Jg=		Dalath Rish}', "");
Expect(0, 1812, '\P{^Jg=		Dalath Rish}', "");
Error('\p{Is_Joining_Group=-_dalath/a/RISH}');
Error('\P{Is_Joining_Group=-_dalath/a/RISH}');
Expect(1, 1814, '\p{Is_Joining_Group=dalathrish}', "");
Expect(0, 1814, '\p{^Is_Joining_Group=dalathrish}', "");
Expect(0, 1814, '\P{Is_Joining_Group=dalathrish}', "");
Expect(1, 1814, '\P{^Is_Joining_Group=dalathrish}', "");
Expect(0, 1812, '\p{Is_Joining_Group=dalathrish}', "");
Expect(1, 1812, '\p{^Is_Joining_Group=dalathrish}', "");
Expect(1, 1812, '\P{Is_Joining_Group=dalathrish}', "");
Expect(0, 1812, '\P{^Is_Joining_Group=dalathrish}', "");
Expect(1, 1814, '\p{Is_Joining_Group=_	Dalath_Rish}', "");
Expect(0, 1814, '\p{^Is_Joining_Group=_	Dalath_Rish}', "");
Expect(0, 1814, '\P{Is_Joining_Group=_	Dalath_Rish}', "");
Expect(1, 1814, '\P{^Is_Joining_Group=_	Dalath_Rish}', "");
Expect(0, 1812, '\p{Is_Joining_Group=_	Dalath_Rish}', "");
Expect(1, 1812, '\p{^Is_Joining_Group=_	Dalath_Rish}', "");
Expect(1, 1812, '\P{Is_Joining_Group=_	Dalath_Rish}', "");
Expect(0, 1812, '\P{^Is_Joining_Group=_	Dalath_Rish}', "");
Error('\p{Is_Jg=_:=DALATHRISH}');
Error('\P{Is_Jg=_:=DALATHRISH}');
Expect(1, 1814, '\p{Is_Jg=dalathrish}', "");
Expect(0, 1814, '\p{^Is_Jg=dalathrish}', "");
Expect(0, 1814, '\P{Is_Jg=dalathrish}', "");
Expect(1, 1814, '\P{^Is_Jg=dalathrish}', "");
Expect(0, 1812, '\p{Is_Jg=dalathrish}', "");
Expect(1, 1812, '\p{^Is_Jg=dalathrish}', "");
Expect(1, 1812, '\P{Is_Jg=dalathrish}', "");
Expect(0, 1812, '\P{^Is_Jg=dalathrish}', "");
Expect(1, 1814, '\p{Is_Jg=- DalathRISH}', "");
Expect(0, 1814, '\p{^Is_Jg=- DalathRISH}', "");
Expect(0, 1814, '\P{Is_Jg=- DalathRISH}', "");
Expect(1, 1814, '\P{^Is_Jg=- DalathRISH}', "");
Expect(0, 1812, '\p{Is_Jg=- DalathRISH}', "");
Expect(1, 1812, '\p{^Is_Jg=- DalathRISH}', "");
Expect(1, 1812, '\P{Is_Jg=- DalathRISH}', "");
Expect(0, 1812, '\P{^Is_Jg=- DalathRISH}', "");
Error('\p{Joining_Group= 	Yudh_he:=}');
Error('\P{Joining_Group= 	Yudh_he:=}');
Expect(1, 1822, '\p{Joining_Group=yudhhe}', "");
Expect(0, 1822, '\p{^Joining_Group=yudhhe}', "");
Expect(0, 1822, '\P{Joining_Group=yudhhe}', "");
Expect(1, 1822, '\P{^Joining_Group=yudhhe}', "");
Expect(0, 1821, '\p{Joining_Group=yudhhe}', "");
Expect(1, 1821, '\p{^Joining_Group=yudhhe}', "");
Expect(1, 1821, '\P{Joining_Group=yudhhe}', "");
Expect(0, 1821, '\P{^Joining_Group=yudhhe}', "");
Expect(1, 1822, '\p{Joining_Group=-_Yudh_HE}', "");
Expect(0, 1822, '\p{^Joining_Group=-_Yudh_HE}', "");
Expect(0, 1822, '\P{Joining_Group=-_Yudh_HE}', "");
Expect(1, 1822, '\P{^Joining_Group=-_Yudh_HE}', "");
Expect(0, 1821, '\p{Joining_Group=-_Yudh_HE}', "");
Expect(1, 1821, '\p{^Joining_Group=-_Yudh_HE}', "");
Expect(1, 1821, '\P{Joining_Group=-_Yudh_HE}', "");
Expect(0, 1821, '\P{^Joining_Group=-_Yudh_HE}', "");
Error('\p{Jg=	:=Yudh he}');
Error('\P{Jg=	:=Yudh he}');
Expect(1, 1822, '\p{Jg: yudhhe}', "");
Expect(0, 1822, '\p{^Jg: yudhhe}', "");
Expect(0, 1822, '\P{Jg: yudhhe}', "");
Expect(1, 1822, '\P{^Jg: yudhhe}', "");
Expect(0, 1821, '\p{Jg: yudhhe}', "");
Expect(1, 1821, '\p{^Jg: yudhhe}', "");
Expect(1, 1821, '\P{Jg: yudhhe}', "");
Expect(0, 1821, '\P{^Jg: yudhhe}', "");
Expect(1, 1822, '\p{Jg=Yudh_he}', "");
Expect(0, 1822, '\p{^Jg=Yudh_he}', "");
Expect(0, 1822, '\P{Jg=Yudh_he}', "");
Expect(1, 1822, '\P{^Jg=Yudh_he}', "");
Expect(0, 1821, '\p{Jg=Yudh_he}', "");
Expect(1, 1821, '\p{^Jg=Yudh_he}', "");
Expect(1, 1821, '\P{Jg=Yudh_he}', "");
Expect(0, 1821, '\P{^Jg=Yudh_he}', "");
Error('\p{Is_Joining_Group=	:=Yudh-HE}');
Error('\P{Is_Joining_Group=	:=Yudh-HE}');
Expect(1, 1822, '\p{Is_Joining_Group=yudhhe}', "");
Expect(0, 1822, '\p{^Is_Joining_Group=yudhhe}', "");
Expect(0, 1822, '\P{Is_Joining_Group=yudhhe}', "");
Expect(1, 1822, '\P{^Is_Joining_Group=yudhhe}', "");
Expect(0, 1821, '\p{Is_Joining_Group=yudhhe}', "");
Expect(1, 1821, '\p{^Is_Joining_Group=yudhhe}', "");
Expect(1, 1821, '\P{Is_Joining_Group=yudhhe}', "");
Expect(0, 1821, '\P{^Is_Joining_Group=yudhhe}', "");
Expect(1, 1822, '\p{Is_Joining_Group:__yudh_He}', "");
Expect(0, 1822, '\p{^Is_Joining_Group:__yudh_He}', "");
Expect(0, 1822, '\P{Is_Joining_Group:__yudh_He}', "");
Expect(1, 1822, '\P{^Is_Joining_Group:__yudh_He}', "");
Expect(0, 1821, '\p{Is_Joining_Group:__yudh_He}', "");
Expect(1, 1821, '\p{^Is_Joining_Group:__yudh_He}', "");
Expect(1, 1821, '\P{Is_Joining_Group:__yudh_He}', "");
Expect(0, 1821, '\P{^Is_Joining_Group:__yudh_He}', "");
Error('\p{Is_Jg=-YUDH/a/He}');
Error('\P{Is_Jg=-YUDH/a/He}');
Expect(1, 1822, '\p{Is_Jg:   yudhhe}', "");
Expect(0, 1822, '\p{^Is_Jg:   yudhhe}', "");
Expect(0, 1822, '\P{Is_Jg:   yudhhe}', "");
Expect(1, 1822, '\P{^Is_Jg:   yudhhe}', "");
Expect(0, 1821, '\p{Is_Jg:   yudhhe}', "");
Expect(1, 1821, '\p{^Is_Jg:   yudhhe}', "");
Expect(1, 1821, '\P{Is_Jg:   yudhhe}', "");
Expect(0, 1821, '\P{^Is_Jg:   yudhhe}', "");
Expect(1, 1822, '\p{Is_Jg: -_YudhHe}', "");
Expect(0, 1822, '\p{^Is_Jg: -_YudhHe}', "");
Expect(0, 1822, '\P{Is_Jg: -_YudhHe}', "");
Expect(1, 1822, '\P{^Is_Jg: -_YudhHe}', "");
Expect(0, 1821, '\p{Is_Jg: -_YudhHe}', "");
Expect(1, 1821, '\p{^Is_Jg: -_YudhHe}', "");
Expect(1, 1821, '\P{Is_Jg: -_YudhHe}', "");
Expect(0, 1821, '\P{^Is_Jg: -_YudhHe}', "");
Error('\p{Joining_Group=:=NOON}');
Error('\P{Joining_Group=:=NOON}');
Expect(1, 1606, '\p{Joining_Group=noon}', "");
Expect(0, 1606, '\p{^Joining_Group=noon}', "");
Expect(0, 1606, '\P{Joining_Group=noon}', "");
Expect(1, 1606, '\P{^Joining_Group=noon}', "");
Expect(0, 1605, '\p{Joining_Group=noon}', "");
Expect(1, 1605, '\p{^Joining_Group=noon}', "");
Expect(1, 1605, '\P{Joining_Group=noon}', "");
Expect(0, 1605, '\P{^Joining_Group=noon}', "");
Expect(1, 1606, '\p{Joining_Group=-Noon}', "");
Expect(0, 1606, '\p{^Joining_Group=-Noon}', "");
Expect(0, 1606, '\P{Joining_Group=-Noon}', "");
Expect(1, 1606, '\P{^Joining_Group=-Noon}', "");
Expect(0, 1605, '\p{Joining_Group=-Noon}', "");
Expect(1, 1605, '\p{^Joining_Group=-Noon}', "");
Expect(1, 1605, '\P{Joining_Group=-Noon}', "");
Expect(0, 1605, '\P{^Joining_Group=-Noon}', "");
Error('\p{Jg=/a/ _noon}');
Error('\P{Jg=/a/ _noon}');
Expect(1, 1606, '\p{Jg=noon}', "");
Expect(0, 1606, '\p{^Jg=noon}', "");
Expect(0, 1606, '\P{Jg=noon}', "");
Expect(1, 1606, '\P{^Jg=noon}', "");
Expect(0, 1605, '\p{Jg=noon}', "");
Expect(1, 1605, '\p{^Jg=noon}', "");
Expect(1, 1605, '\P{Jg=noon}', "");
Expect(0, 1605, '\P{^Jg=noon}', "");
Expect(1, 1606, '\p{Jg=  NOON}', "");
Expect(0, 1606, '\p{^Jg=  NOON}', "");
Expect(0, 1606, '\P{Jg=  NOON}', "");
Expect(1, 1606, '\P{^Jg=  NOON}', "");
Expect(0, 1605, '\p{Jg=  NOON}', "");
Expect(1, 1605, '\p{^Jg=  NOON}', "");
Expect(1, 1605, '\P{Jg=  NOON}', "");
Expect(0, 1605, '\P{^Jg=  NOON}', "");
Error('\p{Is_Joining_Group=/a/ Noon}');
Error('\P{Is_Joining_Group=/a/ Noon}');
Expect(1, 1606, '\p{Is_Joining_Group=noon}', "");
Expect(0, 1606, '\p{^Is_Joining_Group=noon}', "");
Expect(0, 1606, '\P{Is_Joining_Group=noon}', "");
Expect(1, 1606, '\P{^Is_Joining_Group=noon}', "");
Expect(0, 1605, '\p{Is_Joining_Group=noon}', "");
Expect(1, 1605, '\p{^Is_Joining_Group=noon}', "");
Expect(1, 1605, '\P{Is_Joining_Group=noon}', "");
Expect(0, 1605, '\P{^Is_Joining_Group=noon}', "");
Expect(1, 1606, '\p{Is_Joining_Group=_NOON}', "");
Expect(0, 1606, '\p{^Is_Joining_Group=_NOON}', "");
Expect(0, 1606, '\P{Is_Joining_Group=_NOON}', "");
Expect(1, 1606, '\P{^Is_Joining_Group=_NOON}', "");
Expect(0, 1605, '\p{Is_Joining_Group=_NOON}', "");
Expect(1, 1605, '\p{^Is_Joining_Group=_NOON}', "");
Expect(1, 1605, '\P{Is_Joining_Group=_NOON}', "");
Expect(0, 1605, '\P{^Is_Joining_Group=_NOON}', "");
Error('\p{Is_Jg=		Noon:=}');
Error('\P{Is_Jg=		Noon:=}');
Expect(1, 1606, '\p{Is_Jg:   noon}', "");
Expect(0, 1606, '\p{^Is_Jg:   noon}', "");
Expect(0, 1606, '\P{Is_Jg:   noon}', "");
Expect(1, 1606, '\P{^Is_Jg:   noon}', "");
Expect(0, 1605, '\p{Is_Jg:   noon}', "");
Expect(1, 1605, '\p{^Is_Jg:   noon}', "");
Expect(1, 1605, '\P{Is_Jg:   noon}', "");
Expect(0, 1605, '\P{^Is_Jg:   noon}', "");
Expect(1, 1606, '\p{Is_Jg=-NOON}', "");
Expect(0, 1606, '\p{^Is_Jg=-NOON}', "");
Expect(0, 1606, '\P{Is_Jg=-NOON}', "");
Expect(1, 1606, '\P{^Is_Jg=-NOON}', "");
Expect(0, 1605, '\p{Is_Jg=-NOON}', "");
Expect(1, 1605, '\p{^Is_Jg=-NOON}', "");
Expect(1, 1605, '\P{Is_Jg=-NOON}', "");
Expect(0, 1605, '\P{^Is_Jg=-NOON}', "");
Error('\p{Joining_Group=	/a/Mim}');
Error('\P{Joining_Group=	/a/Mim}');
Expect(1, 1825, '\p{Joining_Group=mim}', "");
Expect(0, 1825, '\p{^Joining_Group=mim}', "");
Expect(0, 1825, '\P{Joining_Group=mim}', "");
Expect(1, 1825, '\P{^Joining_Group=mim}', "");
Expect(0, 1824, '\p{Joining_Group=mim}', "");
Expect(1, 1824, '\p{^Joining_Group=mim}', "");
Expect(1, 1824, '\P{Joining_Group=mim}', "");
Expect(0, 1824, '\P{^Joining_Group=mim}', "");
Expect(1, 1825, '\p{Joining_Group=	MIM}', "");
Expect(0, 1825, '\p{^Joining_Group=	MIM}', "");
Expect(0, 1825, '\P{Joining_Group=	MIM}', "");
Expect(1, 1825, '\P{^Joining_Group=	MIM}', "");
Expect(0, 1824, '\p{Joining_Group=	MIM}', "");
Expect(1, 1824, '\p{^Joining_Group=	MIM}', "");
Expect(1, 1824, '\P{Joining_Group=	MIM}', "");
Expect(0, 1824, '\P{^Joining_Group=	MIM}', "");
Error('\p{Jg=/a/Mim}');
Error('\P{Jg=/a/Mim}');
Expect(1, 1825, '\p{Jg=mim}', "");
Expect(0, 1825, '\p{^Jg=mim}', "");
Expect(0, 1825, '\P{Jg=mim}', "");
Expect(1, 1825, '\P{^Jg=mim}', "");
Expect(0, 1824, '\p{Jg=mim}', "");
Expect(1, 1824, '\p{^Jg=mim}', "");
Expect(1, 1824, '\P{Jg=mim}', "");
Expect(0, 1824, '\P{^Jg=mim}', "");
Expect(1, 1825, '\p{Jg= -MIM}', "");
Expect(0, 1825, '\p{^Jg= -MIM}', "");
Expect(0, 1825, '\P{Jg= -MIM}', "");
Expect(1, 1825, '\P{^Jg= -MIM}', "");
Expect(0, 1824, '\p{Jg= -MIM}', "");
Expect(1, 1824, '\p{^Jg= -MIM}', "");
Expect(1, 1824, '\P{Jg= -MIM}', "");
Expect(0, 1824, '\P{^Jg= -MIM}', "");
Error('\p{Is_Joining_Group=/a/-	MIM}');
Error('\P{Is_Joining_Group=/a/-	MIM}');
Expect(1, 1825, '\p{Is_Joining_Group:	mim}', "");
Expect(0, 1825, '\p{^Is_Joining_Group:	mim}', "");
Expect(0, 1825, '\P{Is_Joining_Group:	mim}', "");
Expect(1, 1825, '\P{^Is_Joining_Group:	mim}', "");
Expect(0, 1824, '\p{Is_Joining_Group:	mim}', "");
Expect(1, 1824, '\p{^Is_Joining_Group:	mim}', "");
Expect(1, 1824, '\P{Is_Joining_Group:	mim}', "");
Expect(0, 1824, '\P{^Is_Joining_Group:	mim}', "");
Expect(1, 1825, '\p{Is_Joining_Group= Mim}', "");
Expect(0, 1825, '\p{^Is_Joining_Group= Mim}', "");
Expect(0, 1825, '\P{Is_Joining_Group= Mim}', "");
Expect(1, 1825, '\P{^Is_Joining_Group= Mim}', "");
Expect(0, 1824, '\p{Is_Joining_Group= Mim}', "");
Expect(1, 1824, '\p{^Is_Joining_Group= Mim}', "");
Expect(1, 1824, '\P{Is_Joining_Group= Mim}', "");
Expect(0, 1824, '\P{^Is_Joining_Group= Mim}', "");
Error('\p{Is_Jg=	-MIM:=}');
Error('\P{Is_Jg=	-MIM:=}');
Expect(1, 1825, '\p{Is_Jg:mim}', "");
Expect(0, 1825, '\p{^Is_Jg:mim}', "");
Expect(0, 1825, '\P{Is_Jg:mim}', "");
Expect(1, 1825, '\P{^Is_Jg:mim}', "");
Expect(0, 1824, '\p{Is_Jg:mim}', "");
Expect(1, 1824, '\p{^Is_Jg:mim}', "");
Expect(1, 1824, '\P{Is_Jg:mim}', "");
Expect(0, 1824, '\P{^Is_Jg:mim}', "");
Expect(1, 1825, '\p{Is_Jg=	_Mim}', "");
Expect(0, 1825, '\p{^Is_Jg=	_Mim}', "");
Expect(0, 1825, '\P{Is_Jg=	_Mim}', "");
Expect(1, 1825, '\P{^Is_Jg=	_Mim}', "");
Expect(0, 1824, '\p{Is_Jg=	_Mim}', "");
Expect(1, 1824, '\p{^Is_Jg=	_Mim}', "");
Expect(1, 1824, '\P{Is_Jg=	_Mim}', "");
Expect(0, 1824, '\P{^Is_Jg=	_Mim}', "");
Error('\p{Joining_Group=:=	heh_goal}');
Error('\P{Joining_Group=:=	heh_goal}');
Expect(1, 1730, '\p{Joining_Group=hehgoal}', "");
Expect(0, 1730, '\p{^Joining_Group=hehgoal}', "");
Expect(0, 1730, '\P{Joining_Group=hehgoal}', "");
Expect(1, 1730, '\P{^Joining_Group=hehgoal}', "");
Expect(0, 1728, '\p{Joining_Group=hehgoal}', "");
Expect(1, 1728, '\p{^Joining_Group=hehgoal}', "");
Expect(1, 1728, '\P{Joining_Group=hehgoal}', "");
Expect(0, 1728, '\P{^Joining_Group=hehgoal}', "");
Expect(1, 1730, '\p{Joining_Group=_HEHGoal}', "");
Expect(0, 1730, '\p{^Joining_Group=_HEHGoal}', "");
Expect(0, 1730, '\P{Joining_Group=_HEHGoal}', "");
Expect(1, 1730, '\P{^Joining_Group=_HEHGoal}', "");
Expect(0, 1728, '\p{Joining_Group=_HEHGoal}', "");
Expect(1, 1728, '\p{^Joining_Group=_HEHGoal}', "");
Expect(1, 1728, '\P{Joining_Group=_HEHGoal}', "");
Expect(0, 1728, '\P{^Joining_Group=_HEHGoal}', "");
Error('\p{Jg=:=__heh GOAL}');
Error('\P{Jg=:=__heh GOAL}');
Expect(1, 1730, '\p{Jg=hehgoal}', "");
Expect(0, 1730, '\p{^Jg=hehgoal}', "");
Expect(0, 1730, '\P{Jg=hehgoal}', "");
Expect(1, 1730, '\P{^Jg=hehgoal}', "");
Expect(0, 1728, '\p{Jg=hehgoal}', "");
Expect(1, 1728, '\p{^Jg=hehgoal}', "");
Expect(1, 1728, '\P{Jg=hehgoal}', "");
Expect(0, 1728, '\P{^Jg=hehgoal}', "");
Expect(1, 1730, '\p{Jg=-	HEHGoal}', "");
Expect(0, 1730, '\p{^Jg=-	HEHGoal}', "");
Expect(0, 1730, '\P{Jg=-	HEHGoal}', "");
Expect(1, 1730, '\P{^Jg=-	HEHGoal}', "");
Expect(0, 1728, '\p{Jg=-	HEHGoal}', "");
Expect(1, 1728, '\p{^Jg=-	HEHGoal}', "");
Expect(1, 1728, '\P{Jg=-	HEHGoal}', "");
Expect(0, 1728, '\P{^Jg=-	HEHGoal}', "");
Error('\p{Is_Joining_Group=:= HehGoal}');
Error('\P{Is_Joining_Group=:= HehGoal}');
Expect(1, 1730, '\p{Is_Joining_Group=hehgoal}', "");
Expect(0, 1730, '\p{^Is_Joining_Group=hehgoal}', "");
Expect(0, 1730, '\P{Is_Joining_Group=hehgoal}', "");
Expect(1, 1730, '\P{^Is_Joining_Group=hehgoal}', "");
Expect(0, 1728, '\p{Is_Joining_Group=hehgoal}', "");
Expect(1, 1728, '\p{^Is_Joining_Group=hehgoal}', "");
Expect(1, 1728, '\P{Is_Joining_Group=hehgoal}', "");
Expect(0, 1728, '\P{^Is_Joining_Group=hehgoal}', "");
Expect(1, 1730, '\p{Is_Joining_Group=-	heh-goal}', "");
Expect(0, 1730, '\p{^Is_Joining_Group=-	heh-goal}', "");
Expect(0, 1730, '\P{Is_Joining_Group=-	heh-goal}', "");
Expect(1, 1730, '\P{^Is_Joining_Group=-	heh-goal}', "");
Expect(0, 1728, '\p{Is_Joining_Group=-	heh-goal}', "");
Expect(1, 1728, '\p{^Is_Joining_Group=-	heh-goal}', "");
Expect(1, 1728, '\P{Is_Joining_Group=-	heh-goal}', "");
Expect(0, 1728, '\P{^Is_Joining_Group=-	heh-goal}', "");
Error('\p{Is_Jg=-	heh_goal/a/}');
Error('\P{Is_Jg=-	heh_goal/a/}');
Expect(1, 1730, '\p{Is_Jg=hehgoal}', "");
Expect(0, 1730, '\p{^Is_Jg=hehgoal}', "");
Expect(0, 1730, '\P{Is_Jg=hehgoal}', "");
Expect(1, 1730, '\P{^Is_Jg=hehgoal}', "");
Expect(0, 1728, '\p{Is_Jg=hehgoal}', "");
Expect(1, 1728, '\p{^Is_Jg=hehgoal}', "");
Expect(1, 1728, '\P{Is_Jg=hehgoal}', "");
Expect(0, 1728, '\P{^Is_Jg=hehgoal}', "");
Expect(1, 1730, '\p{Is_Jg= 	HEHGoal}', "");
Expect(0, 1730, '\p{^Is_Jg= 	HEHGoal}', "");
Expect(0, 1730, '\P{Is_Jg= 	HEHGoal}', "");
Expect(1, 1730, '\P{^Is_Jg= 	HEHGoal}', "");
Expect(0, 1728, '\p{Is_Jg= 	HEHGoal}', "");
Expect(1, 1728, '\p{^Is_Jg= 	HEHGoal}', "");
Expect(1, 1728, '\P{Is_Jg= 	HEHGoal}', "");
Expect(0, 1728, '\P{^Is_Jg= 	HEHGoal}', "");
Error('\p{Joining_Group=		Khaph/a/}');
Error('\P{Joining_Group=		Khaph/a/}');
Expect(1, 1870, '\p{Joining_Group=khaph}', "");
Expect(0, 1870, '\p{^Joining_Group=khaph}', "");
Expect(0, 1870, '\P{Joining_Group=khaph}', "");
Expect(1, 1870, '\P{^Joining_Group=khaph}', "");
Expect(0, 1869, '\p{Joining_Group=khaph}', "");
Expect(1, 1869, '\p{^Joining_Group=khaph}', "");
Expect(1, 1869, '\P{Joining_Group=khaph}', "");
Expect(0, 1869, '\P{^Joining_Group=khaph}', "");
Expect(1, 1870, '\p{Joining_Group=--KHAPH}', "");
Expect(0, 1870, '\p{^Joining_Group=--KHAPH}', "");
Expect(0, 1870, '\P{Joining_Group=--KHAPH}', "");
Expect(1, 1870, '\P{^Joining_Group=--KHAPH}', "");
Expect(0, 1869, '\p{Joining_Group=--KHAPH}', "");
Expect(1, 1869, '\p{^Joining_Group=--KHAPH}', "");
Expect(1, 1869, '\P{Joining_Group=--KHAPH}', "");
Expect(0, 1869, '\P{^Joining_Group=--KHAPH}', "");
Error('\p{Jg=_/a/KHAPH}');
Error('\P{Jg=_/a/KHAPH}');
Expect(1, 1870, '\p{Jg=khaph}', "");
Expect(0, 1870, '\p{^Jg=khaph}', "");
Expect(0, 1870, '\P{Jg=khaph}', "");
Expect(1, 1870, '\P{^Jg=khaph}', "");
Expect(0, 1869, '\p{Jg=khaph}', "");
Expect(1, 1869, '\p{^Jg=khaph}', "");
Expect(1, 1869, '\P{Jg=khaph}', "");
Expect(0, 1869, '\P{^Jg=khaph}', "");
Expect(1, 1870, '\p{Jg=_khaph}', "");
Expect(0, 1870, '\p{^Jg=_khaph}', "");
Expect(0, 1870, '\P{Jg=_khaph}', "");
Expect(1, 1870, '\P{^Jg=_khaph}', "");
Expect(0, 1869, '\p{Jg=_khaph}', "");
Expect(1, 1869, '\p{^Jg=_khaph}', "");
Expect(1, 1869, '\P{Jg=_khaph}', "");
Expect(0, 1869, '\P{^Jg=_khaph}', "");
Error('\p{Is_Joining_Group=-/a/KHAPH}');
Error('\P{Is_Joining_Group=-/a/KHAPH}');
Expect(1, 1870, '\p{Is_Joining_Group=khaph}', "");
Expect(0, 1870, '\p{^Is_Joining_Group=khaph}', "");
Expect(0, 1870, '\P{Is_Joining_Group=khaph}', "");
Expect(1, 1870, '\P{^Is_Joining_Group=khaph}', "");
Expect(0, 1869, '\p{Is_Joining_Group=khaph}', "");
Expect(1, 1869, '\p{^Is_Joining_Group=khaph}', "");
Expect(1, 1869, '\P{Is_Joining_Group=khaph}', "");
Expect(0, 1869, '\P{^Is_Joining_Group=khaph}', "");
Expect(1, 1870, '\p{Is_Joining_Group=- KHAPH}', "");
Expect(0, 1870, '\p{^Is_Joining_Group=- KHAPH}', "");
Expect(0, 1870, '\P{Is_Joining_Group=- KHAPH}', "");
Expect(1, 1870, '\P{^Is_Joining_Group=- KHAPH}', "");
Expect(0, 1869, '\p{Is_Joining_Group=- KHAPH}', "");
Expect(1, 1869, '\p{^Is_Joining_Group=- KHAPH}', "");
Expect(1, 1869, '\P{Is_Joining_Group=- KHAPH}', "");
Expect(0, 1869, '\P{^Is_Joining_Group=- KHAPH}', "");
Error('\p{Is_Jg=:=	-khaph}');
Error('\P{Is_Jg=:=	-khaph}');
Expect(1, 1870, '\p{Is_Jg=khaph}', "");
Expect(0, 1870, '\p{^Is_Jg=khaph}', "");
Expect(0, 1870, '\P{Is_Jg=khaph}', "");
Expect(1, 1870, '\P{^Is_Jg=khaph}', "");
Expect(0, 1869, '\p{Is_Jg=khaph}', "");
Expect(1, 1869, '\p{^Is_Jg=khaph}', "");
Expect(1, 1869, '\P{Is_Jg=khaph}', "");
Expect(0, 1869, '\P{^Is_Jg=khaph}', "");
Expect(1, 1870, '\p{Is_Jg:__KHAPH}', "");
Expect(0, 1870, '\p{^Is_Jg:__KHAPH}', "");
Expect(0, 1870, '\P{Is_Jg:__KHAPH}', "");
Expect(1, 1870, '\P{^Is_Jg:__KHAPH}', "");
Expect(0, 1869, '\p{Is_Jg:__KHAPH}', "");
Expect(1, 1869, '\p{^Is_Jg:__KHAPH}', "");
Expect(1, 1869, '\P{Is_Jg:__KHAPH}', "");
Expect(0, 1869, '\P{^Is_Jg:__KHAPH}', "");
Error('\p{Joining_Group=  Sad:=}');
Error('\P{Joining_Group=  Sad:=}');
Expect(1, 1590, '\p{Joining_Group=sad}', "");
Expect(0, 1590, '\p{^Joining_Group=sad}', "");
Expect(0, 1590, '\P{Joining_Group=sad}', "");
Expect(1, 1590, '\P{^Joining_Group=sad}', "");
Expect(0, 1588, '\p{Joining_Group=sad}', "");
Expect(1, 1588, '\p{^Joining_Group=sad}', "");
Expect(1, 1588, '\P{Joining_Group=sad}', "");
Expect(0, 1588, '\P{^Joining_Group=sad}', "");
Expect(1, 1590, '\p{Joining_Group=  SAD}', "");
Expect(0, 1590, '\p{^Joining_Group=  SAD}', "");
Expect(0, 1590, '\P{Joining_Group=  SAD}', "");
Expect(1, 1590, '\P{^Joining_Group=  SAD}', "");
Expect(0, 1588, '\p{Joining_Group=  SAD}', "");
Expect(1, 1588, '\p{^Joining_Group=  SAD}', "");
Expect(1, 1588, '\P{Joining_Group=  SAD}', "");
Expect(0, 1588, '\P{^Joining_Group=  SAD}', "");
Error('\p{Jg=/a/ Sad}');
Error('\P{Jg=/a/ Sad}');
Expect(1, 1590, '\p{Jg=sad}', "");
Expect(0, 1590, '\p{^Jg=sad}', "");
Expect(0, 1590, '\P{Jg=sad}', "");
Expect(1, 1590, '\P{^Jg=sad}', "");
Expect(0, 1588, '\p{Jg=sad}', "");
Expect(1, 1588, '\p{^Jg=sad}', "");
Expect(1, 1588, '\P{Jg=sad}', "");
Expect(0, 1588, '\P{^Jg=sad}', "");
Expect(1, 1590, '\p{Jg:	Sad}', "");
Expect(0, 1590, '\p{^Jg:	Sad}', "");
Expect(0, 1590, '\P{Jg:	Sad}', "");
Expect(1, 1590, '\P{^Jg:	Sad}', "");
Expect(0, 1588, '\p{Jg:	Sad}', "");
Expect(1, 1588, '\p{^Jg:	Sad}', "");
Expect(1, 1588, '\P{Jg:	Sad}', "");
Expect(0, 1588, '\P{^Jg:	Sad}', "");
Error('\p{Is_Joining_Group= /a/Sad}');
Error('\P{Is_Joining_Group= /a/Sad}');
Expect(1, 1590, '\p{Is_Joining_Group=sad}', "");
Expect(0, 1590, '\p{^Is_Joining_Group=sad}', "");
Expect(0, 1590, '\P{Is_Joining_Group=sad}', "");
Expect(1, 1590, '\P{^Is_Joining_Group=sad}', "");
Expect(0, 1588, '\p{Is_Joining_Group=sad}', "");
Expect(1, 1588, '\p{^Is_Joining_Group=sad}', "");
Expect(1, 1588, '\P{Is_Joining_Group=sad}', "");
Expect(0, 1588, '\P{^Is_Joining_Group=sad}', "");
Expect(1, 1590, '\p{Is_Joining_Group=-_Sad}', "");
Expect(0, 1590, '\p{^Is_Joining_Group=-_Sad}', "");
Expect(0, 1590, '\P{Is_Joining_Group=-_Sad}', "");
Expect(1, 1590, '\P{^Is_Joining_Group=-_Sad}', "");
Expect(0, 1588, '\p{Is_Joining_Group=-_Sad}', "");
Expect(1, 1588, '\p{^Is_Joining_Group=-_Sad}', "");
Expect(1, 1588, '\P{Is_Joining_Group=-_Sad}', "");
Expect(0, 1588, '\P{^Is_Joining_Group=-_Sad}', "");
Error('\p{Is_Jg=sad:=}');
Error('\P{Is_Jg=sad:=}');
Expect(1, 1590, '\p{Is_Jg=sad}', "");
Expect(0, 1590, '\p{^Is_Jg=sad}', "");
Expect(0, 1590, '\P{Is_Jg=sad}', "");
Expect(1, 1590, '\P{^Is_Jg=sad}', "");
Expect(0, 1588, '\p{Is_Jg=sad}', "");
Expect(1, 1588, '\p{^Is_Jg=sad}', "");
Expect(1, 1588, '\P{Is_Jg=sad}', "");
Expect(0, 1588, '\P{^Is_Jg=sad}', "");
Expect(1, 1590, '\p{Is_Jg:   -_Sad}', "");
Expect(0, 1590, '\p{^Is_Jg:   -_Sad}', "");
Expect(0, 1590, '\P{Is_Jg:   -_Sad}', "");
Expect(1, 1590, '\P{^Is_Jg:   -_Sad}', "");
Expect(0, 1588, '\p{Is_Jg:   -_Sad}', "");
Expect(1, 1588, '\p{^Is_Jg:   -_Sad}', "");
Expect(1, 1588, '\P{Is_Jg:   -_Sad}', "");
Expect(0, 1588, '\P{^Is_Jg:   -_Sad}', "");
Error('\p{Joining_Group=/a/__qaf}');
Error('\P{Joining_Group=/a/__qaf}');
Expect(1, 1602, '\p{Joining_Group=qaf}', "");
Expect(0, 1602, '\p{^Joining_Group=qaf}', "");
Expect(0, 1602, '\P{Joining_Group=qaf}', "");
Expect(1, 1602, '\P{^Joining_Group=qaf}', "");
Expect(0, 1601, '\p{Joining_Group=qaf}', "");
Expect(1, 1601, '\p{^Joining_Group=qaf}', "");
Expect(1, 1601, '\P{Joining_Group=qaf}', "");
Expect(0, 1601, '\P{^Joining_Group=qaf}', "");
Expect(1, 1602, '\p{Joining_Group=__qaf}', "");
Expect(0, 1602, '\p{^Joining_Group=__qaf}', "");
Expect(0, 1602, '\P{Joining_Group=__qaf}', "");
Expect(1, 1602, '\P{^Joining_Group=__qaf}', "");
Expect(0, 1601, '\p{Joining_Group=__qaf}', "");
Expect(1, 1601, '\p{^Joining_Group=__qaf}', "");
Expect(1, 1601, '\P{Joining_Group=__qaf}', "");
Expect(0, 1601, '\P{^Joining_Group=__qaf}', "");
Error('\p{Jg=	Qaf/a/}');
Error('\P{Jg=	Qaf/a/}');
Expect(1, 1602, '\p{Jg=qaf}', "");
Expect(0, 1602, '\p{^Jg=qaf}', "");
Expect(0, 1602, '\P{Jg=qaf}', "");
Expect(1, 1602, '\P{^Jg=qaf}', "");
Expect(0, 1601, '\p{Jg=qaf}', "");
Expect(1, 1601, '\p{^Jg=qaf}', "");
Expect(1, 1601, '\P{Jg=qaf}', "");
Expect(0, 1601, '\P{^Jg=qaf}', "");
Expect(1, 1602, '\p{Jg=_QAF}', "");
Expect(0, 1602, '\p{^Jg=_QAF}', "");
Expect(0, 1602, '\P{Jg=_QAF}', "");
Expect(1, 1602, '\P{^Jg=_QAF}', "");
Expect(0, 1601, '\p{Jg=_QAF}', "");
Expect(1, 1601, '\p{^Jg=_QAF}', "");
Expect(1, 1601, '\P{Jg=_QAF}', "");
Expect(0, 1601, '\P{^Jg=_QAF}', "");
Error('\p{Is_Joining_Group=:=-	Qaf}');
Error('\P{Is_Joining_Group=:=-	Qaf}');
Expect(1, 1602, '\p{Is_Joining_Group:   qaf}', "");
Expect(0, 1602, '\p{^Is_Joining_Group:   qaf}', "");
Expect(0, 1602, '\P{Is_Joining_Group:   qaf}', "");
Expect(1, 1602, '\P{^Is_Joining_Group:   qaf}', "");
Expect(0, 1601, '\p{Is_Joining_Group:   qaf}', "");
Expect(1, 1601, '\p{^Is_Joining_Group:   qaf}', "");
Expect(1, 1601, '\P{Is_Joining_Group:   qaf}', "");
Expect(0, 1601, '\P{^Is_Joining_Group:   qaf}', "");
Expect(1, 1602, '\p{Is_Joining_Group:  -Qaf}', "");
Expect(0, 1602, '\p{^Is_Joining_Group:  -Qaf}', "");
Expect(0, 1602, '\P{Is_Joining_Group:  -Qaf}', "");
Expect(1, 1602, '\P{^Is_Joining_Group:  -Qaf}', "");
Expect(0, 1601, '\p{Is_Joining_Group:  -Qaf}', "");
Expect(1, 1601, '\p{^Is_Joining_Group:  -Qaf}', "");
Expect(1, 1601, '\P{Is_Joining_Group:  -Qaf}', "");
Expect(0, 1601, '\P{^Is_Joining_Group:  -Qaf}', "");
Error('\p{Is_Jg=	/a/Qaf}');
Error('\P{Is_Jg=	/a/Qaf}');
Expect(1, 1602, '\p{Is_Jg=qaf}', "");
Expect(0, 1602, '\p{^Is_Jg=qaf}', "");
Expect(0, 1602, '\P{Is_Jg=qaf}', "");
Expect(1, 1602, '\P{^Is_Jg=qaf}', "");
Expect(0, 1601, '\p{Is_Jg=qaf}', "");
Expect(1, 1601, '\p{^Is_Jg=qaf}', "");
Expect(1, 1601, '\P{Is_Jg=qaf}', "");
Expect(0, 1601, '\P{^Is_Jg=qaf}', "");
Expect(1, 1602, '\p{Is_Jg=	Qaf}', "");
Expect(0, 1602, '\p{^Is_Jg=	Qaf}', "");
Expect(0, 1602, '\P{Is_Jg=	Qaf}', "");
Expect(1, 1602, '\P{^Is_Jg=	Qaf}', "");
Expect(0, 1601, '\p{Is_Jg=	Qaf}', "");
Expect(1, 1601, '\p{^Is_Jg=	Qaf}', "");
Expect(1, 1601, '\P{Is_Jg=	Qaf}', "");
Expect(0, 1601, '\P{^Is_Jg=	Qaf}', "");
Error('\p{Joining_Group:	:=	_KAPH}');
Error('\P{Joining_Group:	:=	_KAPH}');
Expect(1, 1823, '\p{Joining_Group=kaph}', "");
Expect(0, 1823, '\p{^Joining_Group=kaph}', "");
Expect(0, 1823, '\P{Joining_Group=kaph}', "");
Expect(1, 1823, '\P{^Joining_Group=kaph}', "");
Expect(0, 1822, '\p{Joining_Group=kaph}', "");
Expect(1, 1822, '\p{^Joining_Group=kaph}', "");
Expect(1, 1822, '\P{Joining_Group=kaph}', "");
Expect(0, 1822, '\P{^Joining_Group=kaph}', "");
Expect(1, 1823, '\p{Joining_Group= KAPH}', "");
Expect(0, 1823, '\p{^Joining_Group= KAPH}', "");
Expect(0, 1823, '\P{Joining_Group= KAPH}', "");
Expect(1, 1823, '\P{^Joining_Group= KAPH}', "");
Expect(0, 1822, '\p{Joining_Group= KAPH}', "");
Expect(1, 1822, '\p{^Joining_Group= KAPH}', "");
Expect(1, 1822, '\P{Joining_Group= KAPH}', "");
Expect(0, 1822, '\P{^Joining_Group= KAPH}', "");
Error('\p{Jg=	/a/kaph}');
Error('\P{Jg=	/a/kaph}');
Expect(1, 1823, '\p{Jg=kaph}', "");
Expect(0, 1823, '\p{^Jg=kaph}', "");
Expect(0, 1823, '\P{Jg=kaph}', "");
Expect(1, 1823, '\P{^Jg=kaph}', "");
Expect(0, 1822, '\p{Jg=kaph}', "");
Expect(1, 1822, '\p{^Jg=kaph}', "");
Expect(1, 1822, '\P{Jg=kaph}', "");
Expect(0, 1822, '\P{^Jg=kaph}', "");
Expect(1, 1823, '\p{Jg=-kaph}', "");
Expect(0, 1823, '\p{^Jg=-kaph}', "");
Expect(0, 1823, '\P{Jg=-kaph}', "");
Expect(1, 1823, '\P{^Jg=-kaph}', "");
Expect(0, 1822, '\p{Jg=-kaph}', "");
Expect(1, 1822, '\p{^Jg=-kaph}', "");
Expect(1, 1822, '\P{Jg=-kaph}', "");
Expect(0, 1822, '\P{^Jg=-kaph}', "");
Error('\p{Is_Joining_Group=	KAPH:=}');
Error('\P{Is_Joining_Group=	KAPH:=}');
Expect(1, 1823, '\p{Is_Joining_Group=kaph}', "");
Expect(0, 1823, '\p{^Is_Joining_Group=kaph}', "");
Expect(0, 1823, '\P{Is_Joining_Group=kaph}', "");
Expect(1, 1823, '\P{^Is_Joining_Group=kaph}', "");
Expect(0, 1822, '\p{Is_Joining_Group=kaph}', "");
Expect(1, 1822, '\p{^Is_Joining_Group=kaph}', "");
Expect(1, 1822, '\P{Is_Joining_Group=kaph}', "");
Expect(0, 1822, '\P{^Is_Joining_Group=kaph}', "");
Expect(1, 1823, '\p{Is_Joining_Group=--kaph}', "");
Expect(0, 1823, '\p{^Is_Joining_Group=--kaph}', "");
Expect(0, 1823, '\P{Is_Joining_Group=--kaph}', "");
Expect(1, 1823, '\P{^Is_Joining_Group=--kaph}', "");
Expect(0, 1822, '\p{Is_Joining_Group=--kaph}', "");
Expect(1, 1822, '\p{^Is_Joining_Group=--kaph}', "");
Expect(1, 1822, '\P{Is_Joining_Group=--kaph}', "");
Expect(0, 1822, '\P{^Is_Joining_Group=--kaph}', "");
Error('\p{Is_Jg=:=_Kaph}');
Error('\P{Is_Jg=:=_Kaph}');
Expect(1, 1823, '\p{Is_Jg=kaph}', "");
Expect(0, 1823, '\p{^Is_Jg=kaph}', "");
Expect(0, 1823, '\P{Is_Jg=kaph}', "");
Expect(1, 1823, '\P{^Is_Jg=kaph}', "");
Expect(0, 1822, '\p{Is_Jg=kaph}', "");
Expect(1, 1822, '\p{^Is_Jg=kaph}', "");
Expect(1, 1822, '\P{Is_Jg=kaph}', "");
Expect(0, 1822, '\P{^Is_Jg=kaph}', "");
Expect(1, 1823, '\p{Is_Jg:	kaph}', "");
Expect(0, 1823, '\p{^Is_Jg:	kaph}', "");
Expect(0, 1823, '\P{Is_Jg:	kaph}', "");
Expect(1, 1823, '\P{^Is_Jg:	kaph}', "");
Expect(0, 1822, '\p{Is_Jg:	kaph}', "");
Expect(1, 1822, '\p{^Is_Jg:	kaph}', "");
Expect(1, 1822, '\P{Is_Jg:	kaph}', "");
Expect(0, 1822, '\P{^Is_Jg:	kaph}', "");
Error('\p{Joining_Group=_:=feh}');
Error('\P{Joining_Group=_:=feh}');
Expect(1, 1601, '\p{Joining_Group=feh}', "");
Expect(0, 1601, '\p{^Joining_Group=feh}', "");
Expect(0, 1601, '\P{Joining_Group=feh}', "");
Expect(1, 1601, '\P{^Joining_Group=feh}', "");
Expect(0, 1600, '\p{Joining_Group=feh}', "");
Expect(1, 1600, '\p{^Joining_Group=feh}', "");
Expect(1, 1600, '\P{Joining_Group=feh}', "");
Expect(0, 1600, '\P{^Joining_Group=feh}', "");
Expect(1, 1601, '\p{Joining_Group=_-Feh}', "");
Expect(0, 1601, '\p{^Joining_Group=_-Feh}', "");
Expect(0, 1601, '\P{Joining_Group=_-Feh}', "");
Expect(1, 1601, '\P{^Joining_Group=_-Feh}', "");
Expect(0, 1600, '\p{Joining_Group=_-Feh}', "");
Expect(1, 1600, '\p{^Joining_Group=_-Feh}', "");
Expect(1, 1600, '\P{Joining_Group=_-Feh}', "");
Expect(0, 1600, '\P{^Joining_Group=_-Feh}', "");
Error('\p{Jg=/a/_	Feh}');
Error('\P{Jg=/a/_	Feh}');
Expect(1, 1601, '\p{Jg=feh}', "");
Expect(0, 1601, '\p{^Jg=feh}', "");
Expect(0, 1601, '\P{Jg=feh}', "");
Expect(1, 1601, '\P{^Jg=feh}', "");
Expect(0, 1600, '\p{Jg=feh}', "");
Expect(1, 1600, '\p{^Jg=feh}', "");
Expect(1, 1600, '\P{Jg=feh}', "");
Expect(0, 1600, '\P{^Jg=feh}', "");
Expect(1, 1601, '\p{Jg=-	Feh}', "");
Expect(0, 1601, '\p{^Jg=-	Feh}', "");
Expect(0, 1601, '\P{Jg=-	Feh}', "");
Expect(1, 1601, '\P{^Jg=-	Feh}', "");
Expect(0, 1600, '\p{Jg=-	Feh}', "");
Expect(1, 1600, '\p{^Jg=-	Feh}', "");
Expect(1, 1600, '\P{Jg=-	Feh}', "");
Expect(0, 1600, '\P{^Jg=-	Feh}', "");
Error('\p{Is_Joining_Group= :=Feh}');
Error('\P{Is_Joining_Group= :=Feh}');
Expect(1, 1601, '\p{Is_Joining_Group=feh}', "");
Expect(0, 1601, '\p{^Is_Joining_Group=feh}', "");
Expect(0, 1601, '\P{Is_Joining_Group=feh}', "");
Expect(1, 1601, '\P{^Is_Joining_Group=feh}', "");
Expect(0, 1600, '\p{Is_Joining_Group=feh}', "");
Expect(1, 1600, '\p{^Is_Joining_Group=feh}', "");
Expect(1, 1600, '\P{Is_Joining_Group=feh}', "");
Expect(0, 1600, '\P{^Is_Joining_Group=feh}', "");
Expect(1, 1601, '\p{Is_Joining_Group=		Feh}', "");
Expect(0, 1601, '\p{^Is_Joining_Group=		Feh}', "");
Expect(0, 1601, '\P{Is_Joining_Group=		Feh}', "");
Expect(1, 1601, '\P{^Is_Joining_Group=		Feh}', "");
Expect(0, 1600, '\p{Is_Joining_Group=		Feh}', "");
Expect(1, 1600, '\p{^Is_Joining_Group=		Feh}', "");
Expect(1, 1600, '\P{Is_Joining_Group=		Feh}', "");
Expect(0, 1600, '\P{^Is_Joining_Group=		Feh}', "");
Error('\p{Is_Jg:    :=FEH}');
Error('\P{Is_Jg:    :=FEH}');
Expect(1, 1601, '\p{Is_Jg=feh}', "");
Expect(0, 1601, '\p{^Is_Jg=feh}', "");
Expect(0, 1601, '\P{Is_Jg=feh}', "");
Expect(1, 1601, '\P{^Is_Jg=feh}', "");
Expect(0, 1600, '\p{Is_Jg=feh}', "");
Expect(1, 1600, '\p{^Is_Jg=feh}', "");
Expect(1, 1600, '\P{Is_Jg=feh}', "");
Expect(0, 1600, '\P{^Is_Jg=feh}', "");
Expect(1, 1601, '\p{Is_Jg=--Feh}', "");
Expect(0, 1601, '\p{^Is_Jg=--Feh}', "");
Expect(0, 1601, '\P{Is_Jg=--Feh}', "");
Expect(1, 1601, '\P{^Is_Jg=--Feh}', "");
Expect(0, 1600, '\p{Is_Jg=--Feh}', "");
Expect(1, 1600, '\p{^Is_Jg=--Feh}', "");
Expect(1, 1600, '\P{Is_Jg=--Feh}', "");
Expect(0, 1600, '\P{^Is_Jg=--Feh}', "");
Error('\p{Joining_Group=	/a/FARSI-YEH}');
Error('\P{Joining_Group=	/a/FARSI-YEH}');
Expect(1, 1599, '\p{Joining_Group=farsiyeh}', "");
Expect(0, 1599, '\p{^Joining_Group=farsiyeh}', "");
Expect(0, 1599, '\P{Joining_Group=farsiyeh}', "");
Expect(1, 1599, '\P{^Joining_Group=farsiyeh}', "");
Expect(0, 1596, '\p{Joining_Group=farsiyeh}', "");
Expect(1, 1596, '\p{^Joining_Group=farsiyeh}', "");
Expect(1, 1596, '\P{Joining_Group=farsiyeh}', "");
Expect(0, 1596, '\P{^Joining_Group=farsiyeh}', "");
Expect(1, 1599, '\p{Joining_Group=		FarsiYeh}', "");
Expect(0, 1599, '\p{^Joining_Group=		FarsiYeh}', "");
Expect(0, 1599, '\P{Joining_Group=		FarsiYeh}', "");
Expect(1, 1599, '\P{^Joining_Group=		FarsiYeh}', "");
Expect(0, 1596, '\p{Joining_Group=		FarsiYeh}', "");
Expect(1, 1596, '\p{^Joining_Group=		FarsiYeh}', "");
Expect(1, 1596, '\P{Joining_Group=		FarsiYeh}', "");
Expect(0, 1596, '\P{^Joining_Group=		FarsiYeh}', "");
Error('\p{Jg=-farsiYeh:=}');
Error('\P{Jg=-farsiYeh:=}');
Expect(1, 1599, '\p{Jg=farsiyeh}', "");
Expect(0, 1599, '\p{^Jg=farsiyeh}', "");
Expect(0, 1599, '\P{Jg=farsiyeh}', "");
Expect(1, 1599, '\P{^Jg=farsiyeh}', "");
Expect(0, 1596, '\p{Jg=farsiyeh}', "");
Expect(1, 1596, '\p{^Jg=farsiyeh}', "");
Expect(1, 1596, '\P{Jg=farsiyeh}', "");
Expect(0, 1596, '\P{^Jg=farsiyeh}', "");
Expect(1, 1599, '\p{Jg=_FARSIyeh}', "");
Expect(0, 1599, '\p{^Jg=_FARSIyeh}', "");
Expect(0, 1599, '\P{Jg=_FARSIyeh}', "");
Expect(1, 1599, '\P{^Jg=_FARSIyeh}', "");
Expect(0, 1596, '\p{Jg=_FARSIyeh}', "");
Expect(1, 1596, '\p{^Jg=_FARSIyeh}', "");
Expect(1, 1596, '\P{Jg=_FARSIyeh}', "");
Expect(0, 1596, '\P{^Jg=_FARSIyeh}', "");
Error('\p{Is_Joining_Group=/a/farsiYeh}');
Error('\P{Is_Joining_Group=/a/farsiYeh}');
Expect(1, 1599, '\p{Is_Joining_Group=farsiyeh}', "");
Expect(0, 1599, '\p{^Is_Joining_Group=farsiyeh}', "");
Expect(0, 1599, '\P{Is_Joining_Group=farsiyeh}', "");
Expect(1, 1599, '\P{^Is_Joining_Group=farsiyeh}', "");
Expect(0, 1596, '\p{Is_Joining_Group=farsiyeh}', "");
Expect(1, 1596, '\p{^Is_Joining_Group=farsiyeh}', "");
Expect(1, 1596, '\P{Is_Joining_Group=farsiyeh}', "");
Expect(0, 1596, '\P{^Is_Joining_Group=farsiyeh}', "");
Expect(1, 1599, '\p{Is_Joining_Group=-FARSI-YEH}', "");
Expect(0, 1599, '\p{^Is_Joining_Group=-FARSI-YEH}', "");
Expect(0, 1599, '\P{Is_Joining_Group=-FARSI-YEH}', "");
Expect(1, 1599, '\P{^Is_Joining_Group=-FARSI-YEH}', "");
Expect(0, 1596, '\p{Is_Joining_Group=-FARSI-YEH}', "");
Expect(1, 1596, '\p{^Is_Joining_Group=-FARSI-YEH}', "");
Expect(1, 1596, '\P{Is_Joining_Group=-FARSI-YEH}', "");
Expect(0, 1596, '\P{^Is_Joining_Group=-FARSI-YEH}', "");
Error('\p{Is_Jg=__Farsi_yeh:=}');
Error('\P{Is_Jg=__Farsi_yeh:=}');
Expect(1, 1599, '\p{Is_Jg=farsiyeh}', "");
Expect(0, 1599, '\p{^Is_Jg=farsiyeh}', "");
Expect(0, 1599, '\P{Is_Jg=farsiyeh}', "");
Expect(1, 1599, '\P{^Is_Jg=farsiyeh}', "");
Expect(0, 1596, '\p{Is_Jg=farsiyeh}', "");
Expect(1, 1596, '\p{^Is_Jg=farsiyeh}', "");
Expect(1, 1596, '\P{Is_Jg=farsiyeh}', "");
Expect(0, 1596, '\P{^Is_Jg=farsiyeh}', "");
Expect(1, 1599, '\p{Is_Jg=_farsi_Yeh}', "");
Expect(0, 1599, '\p{^Is_Jg=_farsi_Yeh}', "");
Expect(0, 1599, '\P{Is_Jg=_farsi_Yeh}', "");
Expect(1, 1599, '\P{^Is_Jg=_farsi_Yeh}', "");
Expect(0, 1596, '\p{Is_Jg=_farsi_Yeh}', "");
Expect(1, 1596, '\p{^Is_Jg=_farsi_Yeh}', "");
Expect(1, 1596, '\P{Is_Jg=_farsi_Yeh}', "");
Expect(0, 1596, '\P{^Is_Jg=_farsi_Yeh}', "");
Error('\p{Joining_Group=-:=reversed-Pe}');
Error('\P{Joining_Group=-:=reversed-Pe}');
Expect(1, 1831, '\p{Joining_Group=reversedpe}', "");
Expect(0, 1831, '\p{^Joining_Group=reversedpe}', "");
Expect(0, 1831, '\P{Joining_Group=reversedpe}', "");
Expect(1, 1831, '\P{^Joining_Group=reversedpe}', "");
Expect(0, 1830, '\p{Joining_Group=reversedpe}', "");
Expect(1, 1830, '\p{^Joining_Group=reversedpe}', "");
Expect(1, 1830, '\P{Joining_Group=reversedpe}', "");
Expect(0, 1830, '\P{^Joining_Group=reversedpe}', "");
Expect(1, 1831, '\p{Joining_Group=	-REVERSED-Pe}', "");
Expect(0, 1831, '\p{^Joining_Group=	-REVERSED-Pe}', "");
Expect(0, 1831, '\P{Joining_Group=	-REVERSED-Pe}', "");
Expect(1, 1831, '\P{^Joining_Group=	-REVERSED-Pe}', "");
Expect(0, 1830, '\p{Joining_Group=	-REVERSED-Pe}', "");
Expect(1, 1830, '\p{^Joining_Group=	-REVERSED-Pe}', "");
Expect(1, 1830, '\P{Joining_Group=	-REVERSED-Pe}', "");
Expect(0, 1830, '\P{^Joining_Group=	-REVERSED-Pe}', "");
Error('\p{Jg= _REVERSED/a/pe}');
Error('\P{Jg= _REVERSED/a/pe}');
Expect(1, 1831, '\p{Jg=reversedpe}', "");
Expect(0, 1831, '\p{^Jg=reversedpe}', "");
Expect(0, 1831, '\P{Jg=reversedpe}', "");
Expect(1, 1831, '\P{^Jg=reversedpe}', "");
Expect(0, 1830, '\p{Jg=reversedpe}', "");
Expect(1, 1830, '\p{^Jg=reversedpe}', "");
Expect(1, 1830, '\P{Jg=reversedpe}', "");
Expect(0, 1830, '\P{^Jg=reversedpe}', "");
Expect(1, 1831, '\p{Jg= _reversed	Pe}', "");
Expect(0, 1831, '\p{^Jg= _reversed	Pe}', "");
Expect(0, 1831, '\P{Jg= _reversed	Pe}', "");
Expect(1, 1831, '\P{^Jg= _reversed	Pe}', "");
Expect(0, 1830, '\p{Jg= _reversed	Pe}', "");
Expect(1, 1830, '\p{^Jg= _reversed	Pe}', "");
Expect(1, 1830, '\P{Jg= _reversed	Pe}', "");
Expect(0, 1830, '\P{^Jg= _reversed	Pe}', "");
Error('\p{Is_Joining_Group=-ReversedPe:=}');
Error('\P{Is_Joining_Group=-ReversedPe:=}');
Expect(1, 1831, '\p{Is_Joining_Group=reversedpe}', "");
Expect(0, 1831, '\p{^Is_Joining_Group=reversedpe}', "");
Expect(0, 1831, '\P{Is_Joining_Group=reversedpe}', "");
Expect(1, 1831, '\P{^Is_Joining_Group=reversedpe}', "");
Expect(0, 1830, '\p{Is_Joining_Group=reversedpe}', "");
Expect(1, 1830, '\p{^Is_Joining_Group=reversedpe}', "");
Expect(1, 1830, '\P{Is_Joining_Group=reversedpe}', "");
Expect(0, 1830, '\P{^Is_Joining_Group=reversedpe}', "");
Expect(1, 1831, '\p{Is_Joining_Group= -Reversed_Pe}', "");
Expect(0, 1831, '\p{^Is_Joining_Group= -Reversed_Pe}', "");
Expect(0, 1831, '\P{Is_Joining_Group= -Reversed_Pe}', "");
Expect(1, 1831, '\P{^Is_Joining_Group= -Reversed_Pe}', "");
Expect(0, 1830, '\p{Is_Joining_Group= -Reversed_Pe}', "");
Expect(1, 1830, '\p{^Is_Joining_Group= -Reversed_Pe}', "");
Expect(1, 1830, '\P{Is_Joining_Group= -Reversed_Pe}', "");
Expect(0, 1830, '\P{^Is_Joining_Group= -Reversed_Pe}', "");
Error('\p{Is_Jg=/a/_-REVERSEDpe}');
Error('\P{Is_Jg=/a/_-REVERSEDpe}');
Expect(1, 1831, '\p{Is_Jg=reversedpe}', "");
Expect(0, 1831, '\p{^Is_Jg=reversedpe}', "");
Expect(0, 1831, '\P{Is_Jg=reversedpe}', "");
Expect(1, 1831, '\P{^Is_Jg=reversedpe}', "");
Expect(0, 1830, '\p{Is_Jg=reversedpe}', "");
Expect(1, 1830, '\p{^Is_Jg=reversedpe}', "");
Expect(1, 1830, '\P{Is_Jg=reversedpe}', "");
Expect(0, 1830, '\P{^Is_Jg=reversedpe}', "");
Expect(1, 1831, '\p{Is_Jg=	Reversed PE}', "");
Expect(0, 1831, '\p{^Is_Jg=	Reversed PE}', "");
Expect(0, 1831, '\P{Is_Jg=	Reversed PE}', "");
Expect(1, 1831, '\P{^Is_Jg=	Reversed PE}', "");
Expect(0, 1830, '\p{Is_Jg=	Reversed PE}', "");
Expect(1, 1830, '\p{^Is_Jg=	Reversed PE}', "");
Expect(1, 1830, '\P{Is_Jg=	Reversed PE}', "");
Expect(0, 1830, '\P{^Is_Jg=	Reversed PE}', "");
Error('\p{Joining_Group=-:=Shin}');
Error('\P{Joining_Group=-:=Shin}');
Expect(1, 1835, '\p{Joining_Group=shin}', "");
Expect(0, 1835, '\p{^Joining_Group=shin}', "");
Expect(0, 1835, '\P{Joining_Group=shin}', "");
Expect(1, 1835, '\P{^Joining_Group=shin}', "");
Expect(0, 1834, '\p{Joining_Group=shin}', "");
Expect(1, 1834, '\p{^Joining_Group=shin}', "");
Expect(1, 1834, '\P{Joining_Group=shin}', "");
Expect(0, 1834, '\P{^Joining_Group=shin}', "");
Expect(1, 1835, '\p{Joining_Group=--Shin}', "");
Expect(0, 1835, '\p{^Joining_Group=--Shin}', "");
Expect(0, 1835, '\P{Joining_Group=--Shin}', "");
Expect(1, 1835, '\P{^Joining_Group=--Shin}', "");
Expect(0, 1834, '\p{Joining_Group=--Shin}', "");
Expect(1, 1834, '\p{^Joining_Group=--Shin}', "");
Expect(1, 1834, '\P{Joining_Group=--Shin}', "");
Expect(0, 1834, '\P{^Joining_Group=--Shin}', "");
Error('\p{Jg=/a/_Shin}');
Error('\P{Jg=/a/_Shin}');
Expect(1, 1835, '\p{Jg:shin}', "");
Expect(0, 1835, '\p{^Jg:shin}', "");
Expect(0, 1835, '\P{Jg:shin}', "");
Expect(1, 1835, '\P{^Jg:shin}', "");
Expect(0, 1834, '\p{Jg:shin}', "");
Expect(1, 1834, '\p{^Jg:shin}', "");
Expect(1, 1834, '\P{Jg:shin}', "");
Expect(0, 1834, '\P{^Jg:shin}', "");
Expect(1, 1835, '\p{Jg=	 shin}', "");
Expect(0, 1835, '\p{^Jg=	 shin}', "");
Expect(0, 1835, '\P{Jg=	 shin}', "");
Expect(1, 1835, '\P{^Jg=	 shin}', "");
Expect(0, 1834, '\p{Jg=	 shin}', "");
Expect(1, 1834, '\p{^Jg=	 shin}', "");
Expect(1, 1834, '\P{Jg=	 shin}', "");
Expect(0, 1834, '\P{^Jg=	 shin}', "");
Error('\p{Is_Joining_Group= /a/shin}');
Error('\P{Is_Joining_Group= /a/shin}');
Expect(1, 1835, '\p{Is_Joining_Group=shin}', "");
Expect(0, 1835, '\p{^Is_Joining_Group=shin}', "");
Expect(0, 1835, '\P{Is_Joining_Group=shin}', "");
Expect(1, 1835, '\P{^Is_Joining_Group=shin}', "");
Expect(0, 1834, '\p{Is_Joining_Group=shin}', "");
Expect(1, 1834, '\p{^Is_Joining_Group=shin}', "");
Expect(1, 1834, '\P{Is_Joining_Group=shin}', "");
Expect(0, 1834, '\P{^Is_Joining_Group=shin}', "");
Expect(1, 1835, '\p{Is_Joining_Group=_SHIN}', "");
Expect(0, 1835, '\p{^Is_Joining_Group=_SHIN}', "");
Expect(0, 1835, '\P{Is_Joining_Group=_SHIN}', "");
Expect(1, 1835, '\P{^Is_Joining_Group=_SHIN}', "");
Expect(0, 1834, '\p{Is_Joining_Group=_SHIN}', "");
Expect(1, 1834, '\p{^Is_Joining_Group=_SHIN}', "");
Expect(1, 1834, '\P{Is_Joining_Group=_SHIN}', "");
Expect(0, 1834, '\P{^Is_Joining_Group=_SHIN}', "");
Error('\p{Is_Jg=:=-	Shin}');
Error('\P{Is_Jg=:=-	Shin}');
Expect(1, 1835, '\p{Is_Jg=shin}', "");
Expect(0, 1835, '\p{^Is_Jg=shin}', "");
Expect(0, 1835, '\P{Is_Jg=shin}', "");
Expect(1, 1835, '\P{^Is_Jg=shin}', "");
Expect(0, 1834, '\p{Is_Jg=shin}', "");
Expect(1, 1834, '\p{^Is_Jg=shin}', "");
Expect(1, 1834, '\P{Is_Jg=shin}', "");
Expect(0, 1834, '\P{^Is_Jg=shin}', "");
Expect(1, 1835, '\p{Is_Jg=	 Shin}', "");
Expect(0, 1835, '\p{^Is_Jg=	 Shin}', "");
Expect(0, 1835, '\P{Is_Jg=	 Shin}', "");
Expect(1, 1835, '\P{^Is_Jg=	 Shin}', "");
Expect(0, 1834, '\p{Is_Jg=	 Shin}', "");
Expect(1, 1834, '\p{^Is_Jg=	 Shin}', "");
Expect(1, 1834, '\P{Is_Jg=	 Shin}', "");
Expect(0, 1834, '\P{^Is_Jg=	 Shin}', "");
Error('\p{Joining_Group=:=	_yeh}');
Error('\P{Joining_Group=:=	_yeh}');
Expect(1, 1574, '\p{Joining_Group=yeh}', "");
Expect(0, 1574, '\p{^Joining_Group=yeh}', "");
Expect(0, 1574, '\P{Joining_Group=yeh}', "");
Expect(1, 1574, '\P{^Joining_Group=yeh}', "");
Expect(0, 1573, '\p{Joining_Group=yeh}', "");
Expect(1, 1573, '\p{^Joining_Group=yeh}', "");
Expect(1, 1573, '\P{Joining_Group=yeh}', "");
Expect(0, 1573, '\P{^Joining_Group=yeh}', "");
Expect(1, 1574, '\p{Joining_Group= Yeh}', "");
Expect(0, 1574, '\p{^Joining_Group= Yeh}', "");
Expect(0, 1574, '\P{Joining_Group= Yeh}', "");
Expect(1, 1574, '\P{^Joining_Group= Yeh}', "");
Expect(0, 1573, '\p{Joining_Group= Yeh}', "");
Expect(1, 1573, '\p{^Joining_Group= Yeh}', "");
Expect(1, 1573, '\P{Joining_Group= Yeh}', "");
Expect(0, 1573, '\P{^Joining_Group= Yeh}', "");
Error('\p{Jg: :=-Yeh}');
Error('\P{Jg: :=-Yeh}');
Expect(1, 1574, '\p{Jg=yeh}', "");
Expect(0, 1574, '\p{^Jg=yeh}', "");
Expect(0, 1574, '\P{Jg=yeh}', "");
Expect(1, 1574, '\P{^Jg=yeh}', "");
Expect(0, 1573, '\p{Jg=yeh}', "");
Expect(1, 1573, '\p{^Jg=yeh}', "");
Expect(1, 1573, '\P{Jg=yeh}', "");
Expect(0, 1573, '\P{^Jg=yeh}', "");
Expect(1, 1574, '\p{Jg= 	YEH}', "");
Expect(0, 1574, '\p{^Jg= 	YEH}', "");
Expect(0, 1574, '\P{Jg= 	YEH}', "");
Expect(1, 1574, '\P{^Jg= 	YEH}', "");
Expect(0, 1573, '\p{Jg= 	YEH}', "");
Expect(1, 1573, '\p{^Jg= 	YEH}', "");
Expect(1, 1573, '\P{Jg= 	YEH}', "");
Expect(0, 1573, '\P{^Jg= 	YEH}', "");
Error('\p{Is_Joining_Group=	yeh/a/}');
Error('\P{Is_Joining_Group=	yeh/a/}');
Expect(1, 1574, '\p{Is_Joining_Group=yeh}', "");
Expect(0, 1574, '\p{^Is_Joining_Group=yeh}', "");
Expect(0, 1574, '\P{Is_Joining_Group=yeh}', "");
Expect(1, 1574, '\P{^Is_Joining_Group=yeh}', "");
Expect(0, 1573, '\p{Is_Joining_Group=yeh}', "");
Expect(1, 1573, '\p{^Is_Joining_Group=yeh}', "");
Expect(1, 1573, '\P{Is_Joining_Group=yeh}', "");
Expect(0, 1573, '\P{^Is_Joining_Group=yeh}', "");
Expect(1, 1574, '\p{Is_Joining_Group:			Yeh}', "");
Expect(0, 1574, '\p{^Is_Joining_Group:			Yeh}', "");
Expect(0, 1574, '\P{Is_Joining_Group:			Yeh}', "");
Expect(1, 1574, '\P{^Is_Joining_Group:			Yeh}', "");
Expect(0, 1573, '\p{Is_Joining_Group:			Yeh}', "");
Expect(1, 1573, '\p{^Is_Joining_Group:			Yeh}', "");
Expect(1, 1573, '\P{Is_Joining_Group:			Yeh}', "");
Expect(0, 1573, '\P{^Is_Joining_Group:			Yeh}', "");
Error('\p{Is_Jg= :=Yeh}');
Error('\P{Is_Jg= :=Yeh}');
Expect(1, 1574, '\p{Is_Jg=yeh}', "");
Expect(0, 1574, '\p{^Is_Jg=yeh}', "");
Expect(0, 1574, '\P{Is_Jg=yeh}', "");
Expect(1, 1574, '\P{^Is_Jg=yeh}', "");
Expect(0, 1573, '\p{Is_Jg=yeh}', "");
Expect(1, 1573, '\p{^Is_Jg=yeh}', "");
Expect(1, 1573, '\P{Is_Jg=yeh}', "");
Expect(0, 1573, '\P{^Is_Jg=yeh}', "");
Expect(1, 1574, '\p{Is_Jg=_ yeh}', "");
Expect(0, 1574, '\p{^Is_Jg=_ yeh}', "");
Expect(0, 1574, '\P{Is_Jg=_ yeh}', "");
Expect(1, 1574, '\P{^Is_Jg=_ yeh}', "");
Expect(0, 1573, '\p{Is_Jg=_ yeh}', "");
Expect(1, 1573, '\p{^Is_Jg=_ yeh}', "");
Expect(1, 1573, '\P{Is_Jg=_ yeh}', "");
Expect(0, 1573, '\P{^Is_Jg=_ yeh}', "");
Error('\p{Joining_Group=:= Dal}');
Error('\P{Joining_Group=:= Dal}');
Expect(1, 1584, '\p{Joining_Group=dal}', "");
Expect(0, 1584, '\p{^Joining_Group=dal}', "");
Expect(0, 1584, '\P{Joining_Group=dal}', "");
Expect(1, 1584, '\P{^Joining_Group=dal}', "");
Expect(0, 1582, '\p{Joining_Group=dal}', "");
Expect(1, 1582, '\p{^Joining_Group=dal}', "");
Expect(1, 1582, '\P{Joining_Group=dal}', "");
Expect(0, 1582, '\P{^Joining_Group=dal}', "");
Expect(1, 1584, '\p{Joining_Group=-_dal}', "");
Expect(0, 1584, '\p{^Joining_Group=-_dal}', "");
Expect(0, 1584, '\P{Joining_Group=-_dal}', "");
Expect(1, 1584, '\P{^Joining_Group=-_dal}', "");
Expect(0, 1582, '\p{Joining_Group=-_dal}', "");
Expect(1, 1582, '\p{^Joining_Group=-_dal}', "");
Expect(1, 1582, '\P{Joining_Group=-_dal}', "");
Expect(0, 1582, '\P{^Joining_Group=-_dal}', "");
Error('\p{Jg=	:=DAL}');
Error('\P{Jg=	:=DAL}');
Expect(1, 1584, '\p{Jg=dal}', "");
Expect(0, 1584, '\p{^Jg=dal}', "");
Expect(0, 1584, '\P{Jg=dal}', "");
Expect(1, 1584, '\P{^Jg=dal}', "");
Expect(0, 1582, '\p{Jg=dal}', "");
Expect(1, 1582, '\p{^Jg=dal}', "");
Expect(1, 1582, '\P{Jg=dal}', "");
Expect(0, 1582, '\P{^Jg=dal}', "");
Expect(1, 1584, '\p{Jg= 	Dal}', "");
Expect(0, 1584, '\p{^Jg= 	Dal}', "");
Expect(0, 1584, '\P{Jg= 	Dal}', "");
Expect(1, 1584, '\P{^Jg= 	Dal}', "");
Expect(0, 1582, '\p{Jg= 	Dal}', "");
Expect(1, 1582, '\p{^Jg= 	Dal}', "");
Expect(1, 1582, '\P{Jg= 	Dal}', "");
Expect(0, 1582, '\P{^Jg= 	Dal}', "");
Error('\p{Is_Joining_Group=:=- dal}');
Error('\P{Is_Joining_Group=:=- dal}');
Expect(1, 1584, '\p{Is_Joining_Group=dal}', "");
Expect(0, 1584, '\p{^Is_Joining_Group=dal}', "");
Expect(0, 1584, '\P{Is_Joining_Group=dal}', "");
Expect(1, 1584, '\P{^Is_Joining_Group=dal}', "");
Expect(0, 1582, '\p{Is_Joining_Group=dal}', "");
Expect(1, 1582, '\p{^Is_Joining_Group=dal}', "");
Expect(1, 1582, '\P{Is_Joining_Group=dal}', "");
Expect(0, 1582, '\P{^Is_Joining_Group=dal}', "");
Expect(1, 1584, '\p{Is_Joining_Group=-	DAL}', "");
Expect(0, 1584, '\p{^Is_Joining_Group=-	DAL}', "");
Expect(0, 1584, '\P{Is_Joining_Group=-	DAL}', "");
Expect(1, 1584, '\P{^Is_Joining_Group=-	DAL}', "");
Expect(0, 1582, '\p{Is_Joining_Group=-	DAL}', "");
Expect(1, 1582, '\p{^Is_Joining_Group=-	DAL}', "");
Expect(1, 1582, '\P{Is_Joining_Group=-	DAL}', "");
Expect(0, 1582, '\P{^Is_Joining_Group=-	DAL}', "");
Error('\p{Is_Jg=	:=Dal}');
Error('\P{Is_Jg=	:=Dal}');
Expect(1, 1584, '\p{Is_Jg=dal}', "");
Expect(0, 1584, '\p{^Is_Jg=dal}', "");
Expect(0, 1584, '\P{Is_Jg=dal}', "");
Expect(1, 1584, '\P{^Is_Jg=dal}', "");
Expect(0, 1582, '\p{Is_Jg=dal}', "");
Expect(1, 1582, '\p{^Is_Jg=dal}', "");
Expect(1, 1582, '\P{Is_Jg=dal}', "");
Expect(0, 1582, '\P{^Is_Jg=dal}', "");
Expect(1, 1584, '\p{Is_Jg=Dal}', "");
Expect(0, 1584, '\p{^Is_Jg=Dal}', "");
Expect(0, 1584, '\P{Is_Jg=Dal}', "");
Expect(1, 1584, '\P{^Is_Jg=Dal}', "");
Expect(0, 1582, '\p{Is_Jg=Dal}', "");
Expect(1, 1582, '\p{^Is_Jg=Dal}', "");
Expect(1, 1582, '\P{Is_Jg=Dal}', "");
Expect(0, 1582, '\P{^Is_Jg=Dal}', "");
Error('\p{Joining_Group=_:=Hamza_On-HEH-GOAL}');
Error('\P{Joining_Group=_:=Hamza_On-HEH-GOAL}');
Expect(1, 1731, '\p{Joining_Group=hamzaonhehgoal}', "");
Expect(0, 1731, '\p{^Joining_Group=hamzaonhehgoal}', "");
Expect(0, 1731, '\P{Joining_Group=hamzaonhehgoal}', "");
Expect(1, 1731, '\P{^Joining_Group=hamzaonhehgoal}', "");
Expect(0, 1730, '\p{Joining_Group=hamzaonhehgoal}', "");
Expect(1, 1730, '\p{^Joining_Group=hamzaonhehgoal}', "");
Expect(1, 1730, '\P{Joining_Group=hamzaonhehgoal}', "");
Expect(0, 1730, '\P{^Joining_Group=hamzaonhehgoal}', "");
Expect(1, 1731, '\p{Joining_Group=	 hamzaonHEH Goal}', "");
Expect(0, 1731, '\p{^Joining_Group=	 hamzaonHEH Goal}', "");
Expect(0, 1731, '\P{Joining_Group=	 hamzaonHEH Goal}', "");
Expect(1, 1731, '\P{^Joining_Group=	 hamzaonHEH Goal}', "");
Expect(0, 1730, '\p{Joining_Group=	 hamzaonHEH Goal}', "");
Expect(1, 1730, '\p{^Joining_Group=	 hamzaonHEH Goal}', "");
Expect(1, 1730, '\P{Joining_Group=	 hamzaonHEH Goal}', "");
Expect(0, 1730, '\P{^Joining_Group=	 hamzaonHEH Goal}', "");
Error('\p{Jg=--HAMZA:=ON Heh goal}');
Error('\P{Jg=--HAMZA:=ON Heh goal}');
Expect(1, 1731, '\p{Jg=hamzaonhehgoal}', "");
Expect(0, 1731, '\p{^Jg=hamzaonhehgoal}', "");
Expect(0, 1731, '\P{Jg=hamzaonhehgoal}', "");
Expect(1, 1731, '\P{^Jg=hamzaonhehgoal}', "");
Expect(0, 1730, '\p{Jg=hamzaonhehgoal}', "");
Expect(1, 1730, '\p{^Jg=hamzaonhehgoal}', "");
Expect(1, 1730, '\P{Jg=hamzaonhehgoal}', "");
Expect(0, 1730, '\P{^Jg=hamzaonhehgoal}', "");
Expect(1, 1731, '\p{Jg= hamza ON-heh Goal}', "");
Expect(0, 1731, '\p{^Jg= hamza ON-heh Goal}', "");
Expect(0, 1731, '\P{Jg= hamza ON-heh Goal}', "");
Expect(1, 1731, '\P{^Jg= hamza ON-heh Goal}', "");
Expect(0, 1730, '\p{Jg= hamza ON-heh Goal}', "");
Expect(1, 1730, '\p{^Jg= hamza ON-heh Goal}', "");
Expect(1, 1730, '\P{Jg= hamza ON-heh Goal}', "");
Expect(0, 1730, '\P{^Jg= hamza ON-heh Goal}', "");
Error('\p{Is_Joining_Group=-hamza/a/OnHEH-Goal}');
Error('\P{Is_Joining_Group=-hamza/a/OnHEH-Goal}');
Expect(1, 1731, '\p{Is_Joining_Group=hamzaonhehgoal}', "");
Expect(0, 1731, '\p{^Is_Joining_Group=hamzaonhehgoal}', "");
Expect(0, 1731, '\P{Is_Joining_Group=hamzaonhehgoal}', "");
Expect(1, 1731, '\P{^Is_Joining_Group=hamzaonhehgoal}', "");
Expect(0, 1730, '\p{Is_Joining_Group=hamzaonhehgoal}', "");
Expect(1, 1730, '\p{^Is_Joining_Group=hamzaonhehgoal}', "");
Expect(1, 1730, '\P{Is_Joining_Group=hamzaonhehgoal}', "");
Expect(0, 1730, '\P{^Is_Joining_Group=hamzaonhehgoal}', "");
Expect(1, 1731, '\p{Is_Joining_Group=-Hamza	On Heh	GOAL}', "");
Expect(0, 1731, '\p{^Is_Joining_Group=-Hamza	On Heh	GOAL}', "");
Expect(0, 1731, '\P{Is_Joining_Group=-Hamza	On Heh	GOAL}', "");
Expect(1, 1731, '\P{^Is_Joining_Group=-Hamza	On Heh	GOAL}', "");
Expect(0, 1730, '\p{Is_Joining_Group=-Hamza	On Heh	GOAL}', "");
Expect(1, 1730, '\p{^Is_Joining_Group=-Hamza	On Heh	GOAL}', "");
Expect(1, 1730, '\P{Is_Joining_Group=-Hamza	On Heh	GOAL}', "");
Expect(0, 1730, '\P{^Is_Joining_Group=-Hamza	On Heh	GOAL}', "");
Error('\p{Is_Jg=-:=hamzaOn_HEH	Goal}');
Error('\P{Is_Jg=-:=hamzaOn_HEH	Goal}');
Expect(1, 1731, '\p{Is_Jg=hamzaonhehgoal}', "");
Expect(0, 1731, '\p{^Is_Jg=hamzaonhehgoal}', "");
Expect(0, 1731, '\P{Is_Jg=hamzaonhehgoal}', "");
Expect(1, 1731, '\P{^Is_Jg=hamzaonhehgoal}', "");
Expect(0, 1730, '\p{Is_Jg=hamzaonhehgoal}', "");
Expect(1, 1730, '\p{^Is_Jg=hamzaonhehgoal}', "");
Expect(1, 1730, '\P{Is_Jg=hamzaonhehgoal}', "");
Expect(0, 1730, '\P{^Is_Jg=hamzaonhehgoal}', "");
Expect(1, 1731, '\p{Is_Jg=	-hamza	ON	HEH goal}', "");
Expect(0, 1731, '\p{^Is_Jg=	-hamza	ON	HEH goal}', "");
Expect(0, 1731, '\P{Is_Jg=	-hamza	ON	HEH goal}', "");
Expect(1, 1731, '\P{^Is_Jg=	-hamza	ON	HEH goal}', "");
Expect(0, 1730, '\p{Is_Jg=	-hamza	ON	HEH goal}', "");
Expect(1, 1730, '\p{^Is_Jg=	-hamza	ON	HEH goal}', "");
Expect(1, 1730, '\P{Is_Jg=	-hamza	ON	HEH goal}', "");
Expect(0, 1730, '\P{^Is_Jg=	-hamza	ON	HEH goal}', "");
Error('\p{Joining_Group::=He}');
Error('\P{Joining_Group::=He}');
Expect(1, 1815, '\p{Joining_Group=he}', "");
Expect(0, 1815, '\p{^Joining_Group=he}', "");
Expect(0, 1815, '\P{Joining_Group=he}', "");
Expect(1, 1815, '\P{^Joining_Group=he}', "");
Expect(0, 1814, '\p{Joining_Group=he}', "");
Expect(1, 1814, '\p{^Joining_Group=he}', "");
Expect(1, 1814, '\P{Joining_Group=he}', "");
Expect(0, 1814, '\P{^Joining_Group=he}', "");
Error('\p{Jg=/a/ HE}');
Error('\P{Jg=/a/ HE}');
Expect(1, 1815, '\p{Jg=he}', "");
Expect(0, 1815, '\p{^Jg=he}', "");
Expect(0, 1815, '\P{Jg=he}', "");
Expect(1, 1815, '\P{^Jg=he}', "");
Expect(0, 1814, '\p{Jg=he}', "");
Expect(1, 1814, '\p{^Jg=he}', "");
Expect(1, 1814, '\P{Jg=he}', "");
Expect(0, 1814, '\P{^Jg=he}', "");
Expect(1, 1815, '\p{Jg=_He}', "");
Expect(0, 1815, '\p{^Jg=_He}', "");
Expect(0, 1815, '\P{Jg=_He}', "");
Expect(1, 1815, '\P{^Jg=_He}', "");
Expect(0, 1814, '\p{Jg=_He}', "");
Expect(1, 1814, '\p{^Jg=_He}', "");
Expect(1, 1814, '\P{Jg=_He}', "");
Expect(0, 1814, '\P{^Jg=_He}', "");
Error('\p{Is_Joining_Group=	:=HE}');
Error('\P{Is_Joining_Group=	:=HE}');
Expect(1, 1815, '\p{Is_Joining_Group=he}', "");
Expect(0, 1815, '\p{^Is_Joining_Group=he}', "");
Expect(0, 1815, '\P{Is_Joining_Group=he}', "");
Expect(1, 1815, '\P{^Is_Joining_Group=he}', "");
Expect(0, 1814, '\p{Is_Joining_Group=he}', "");
Expect(1, 1814, '\p{^Is_Joining_Group=he}', "");
Expect(1, 1814, '\P{Is_Joining_Group=he}', "");
Expect(0, 1814, '\P{^Is_Joining_Group=he}', "");
Expect(1, 1815, '\p{Is_Joining_Group:  He}', "");
Expect(0, 1815, '\p{^Is_Joining_Group:  He}', "");
Expect(0, 1815, '\P{Is_Joining_Group:  He}', "");
Expect(1, 1815, '\P{^Is_Joining_Group:  He}', "");
Expect(0, 1814, '\p{Is_Joining_Group:  He}', "");
Expect(1, 1814, '\p{^Is_Joining_Group:  He}', "");
Expect(1, 1814, '\P{Is_Joining_Group:  He}', "");
Expect(0, 1814, '\P{^Is_Joining_Group:  He}', "");
Error('\p{Is_Jg:	 he/a/}');
Error('\P{Is_Jg:	 he/a/}');
Expect(1, 1815, '\p{Is_Jg=he}', "");
Expect(0, 1815, '\p{^Is_Jg=he}', "");
Expect(0, 1815, '\P{Is_Jg=he}', "");
Expect(1, 1815, '\P{^Is_Jg=he}', "");
Expect(0, 1814, '\p{Is_Jg=he}', "");
Expect(1, 1814, '\p{^Is_Jg=he}', "");
Expect(1, 1814, '\P{Is_Jg=he}', "");
Expect(0, 1814, '\P{^Is_Jg=he}', "");
Expect(1, 1815, '\p{Is_Jg:	_he}', "");
Expect(0, 1815, '\p{^Is_Jg:	_he}', "");
Expect(0, 1815, '\P{Is_Jg:	_he}', "");
Expect(1, 1815, '\P{^Is_Jg:	_he}', "");
Expect(0, 1814, '\p{Is_Jg:	_he}', "");
Expect(1, 1814, '\p{^Is_Jg:	_he}', "");
Expect(1, 1814, '\P{Is_Jg:	_he}', "");
Expect(0, 1814, '\P{^Is_Jg:	_he}', "");
Error('\p{Joining_Group: :=No-JoiningGroup}');
Error('\P{Joining_Group: :=No-JoiningGroup}');
Expect(1, 1569, '\p{Joining_Group=nojoininggroup}', "");
Expect(0, 1569, '\p{^Joining_Group=nojoininggroup}', "");
Expect(0, 1569, '\P{Joining_Group=nojoininggroup}', "");
Expect(1, 1569, '\P{^Joining_Group=nojoininggroup}', "");
Expect(0, 1599, '\p{Joining_Group=nojoininggroup}', "");
Expect(1, 1599, '\p{^Joining_Group=nojoininggroup}', "");
Expect(1, 1599, '\P{Joining_Group=nojoininggroup}', "");
Expect(0, 1599, '\P{^Joining_Group=nojoininggroup}', "");
Expect(1, 1569, '\p{Joining_Group= No	JOINING_group}', "");
Expect(0, 1569, '\p{^Joining_Group= No	JOINING_group}', "");
Expect(0, 1569, '\P{Joining_Group= No	JOINING_group}', "");
Expect(1, 1569, '\P{^Joining_Group= No	JOINING_group}', "");
Expect(0, 1599, '\p{Joining_Group= No	JOINING_group}', "");
Expect(1, 1599, '\p{^Joining_Group= No	JOINING_group}', "");
Expect(1, 1599, '\P{Joining_Group= No	JOINING_group}', "");
Expect(0, 1599, '\P{^Joining_Group= No	JOINING_group}', "");
Error('\p{Jg= -NO/a/JOININGGROUP}');
Error('\P{Jg= -NO/a/JOININGGROUP}');
Expect(1, 1569, '\p{Jg=nojoininggroup}', "");
Expect(0, 1569, '\p{^Jg=nojoininggroup}', "");
Expect(0, 1569, '\P{Jg=nojoininggroup}', "");
Expect(1, 1569, '\P{^Jg=nojoininggroup}', "");
Expect(0, 1599, '\p{Jg=nojoininggroup}', "");
Expect(1, 1599, '\p{^Jg=nojoininggroup}', "");
Expect(1, 1599, '\P{Jg=nojoininggroup}', "");
Expect(0, 1599, '\P{^Jg=nojoininggroup}', "");
Expect(1, 1569, '\p{Jg=-No JOINING-group}', "");
Expect(0, 1569, '\p{^Jg=-No JOINING-group}', "");
Expect(0, 1569, '\P{Jg=-No JOINING-group}', "");
Expect(1, 1569, '\P{^Jg=-No JOINING-group}', "");
Expect(0, 1599, '\p{Jg=-No JOINING-group}', "");
Expect(1, 1599, '\p{^Jg=-No JOINING-group}', "");
Expect(1, 1599, '\P{Jg=-No JOINING-group}', "");
Expect(0, 1599, '\P{^Jg=-No JOINING-group}', "");
Error('\p{Is_Joining_Group=:=NOJoining_group}');
Error('\P{Is_Joining_Group=:=NOJoining_group}');
Expect(1, 1569, '\p{Is_Joining_Group=nojoininggroup}', "");
Expect(0, 1569, '\p{^Is_Joining_Group=nojoininggroup}', "");
Expect(0, 1569, '\P{Is_Joining_Group=nojoininggroup}', "");
Expect(1, 1569, '\P{^Is_Joining_Group=nojoininggroup}', "");
Expect(0, 1599, '\p{Is_Joining_Group=nojoininggroup}', "");
Expect(1, 1599, '\p{^Is_Joining_Group=nojoininggroup}', "");
Expect(1, 1599, '\P{Is_Joining_Group=nojoininggroup}', "");
Expect(0, 1599, '\P{^Is_Joining_Group=nojoininggroup}', "");
Expect(1, 1569, '\p{Is_Joining_Group=	-NO_Joining_group}', "");
Expect(0, 1569, '\p{^Is_Joining_Group=	-NO_Joining_group}', "");
Expect(0, 1569, '\P{Is_Joining_Group=	-NO_Joining_group}', "");
Expect(1, 1569, '\P{^Is_Joining_Group=	-NO_Joining_group}', "");
Expect(0, 1599, '\p{Is_Joining_Group=	-NO_Joining_group}', "");
Expect(1, 1599, '\p{^Is_Joining_Group=	-NO_Joining_group}', "");
Expect(1, 1599, '\P{Is_Joining_Group=	-NO_Joining_group}', "");
Expect(0, 1599, '\P{^Is_Joining_Group=	-NO_Joining_group}', "");
Error('\p{Is_Jg=_/a/noJoining Group}');
Error('\P{Is_Jg=_/a/noJoining Group}');
Expect(1, 1569, '\p{Is_Jg=nojoininggroup}', "");
Expect(0, 1569, '\p{^Is_Jg=nojoininggroup}', "");
Expect(0, 1569, '\P{Is_Jg=nojoininggroup}', "");
Expect(1, 1569, '\P{^Is_Jg=nojoininggroup}', "");
Expect(0, 1599, '\p{Is_Jg=nojoininggroup}', "");
Expect(1, 1599, '\p{^Is_Jg=nojoininggroup}', "");
Expect(1, 1599, '\P{Is_Jg=nojoininggroup}', "");
Expect(0, 1599, '\P{^Is_Jg=nojoininggroup}', "");
Expect(1, 1569, '\p{Is_Jg=	 no_Joining-group}', "");
Expect(0, 1569, '\p{^Is_Jg=	 no_Joining-group}', "");
Expect(0, 1569, '\P{Is_Jg=	 no_Joining-group}', "");
Expect(1, 1569, '\P{^Is_Jg=	 no_Joining-group}', "");
Expect(0, 1599, '\p{Is_Jg=	 no_Joining-group}', "");
Expect(1, 1599, '\p{^Is_Jg=	 no_Joining-group}', "");
Expect(1, 1599, '\P{Is_Jg=	 no_Joining-group}', "");
Expect(0, 1599, '\P{^Is_Jg=	 no_Joining-group}', "");
Error('\p{Joining_Group=_/a/Burushaski yehBarree}');
Error('\P{Joining_Group=_/a/Burushaski yehBarree}');
Expect(1, 1915, '\p{Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1915, '\p{^Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1915, '\P{Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1915, '\P{^Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1913, '\p{Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1913, '\p{^Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1913, '\P{Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1913, '\P{^Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1915, '\p{Joining_Group= Burushaski_YEH barree}', "");
Expect(0, 1915, '\p{^Joining_Group= Burushaski_YEH barree}', "");
Expect(0, 1915, '\P{Joining_Group= Burushaski_YEH barree}', "");
Expect(1, 1915, '\P{^Joining_Group= Burushaski_YEH barree}', "");
Expect(0, 1913, '\p{Joining_Group= Burushaski_YEH barree}', "");
Expect(1, 1913, '\p{^Joining_Group= Burushaski_YEH barree}', "");
Expect(1, 1913, '\P{Joining_Group= Burushaski_YEH barree}', "");
Expect(0, 1913, '\P{^Joining_Group= Burushaski_YEH barree}', "");
Error('\p{Jg=/a/	 Burushaski-YEHBarree}');
Error('\P{Jg=/a/	 Burushaski-YEHBarree}');
Expect(1, 1915, '\p{Jg=burushaskiyehbarree}', "");
Expect(0, 1915, '\p{^Jg=burushaskiyehbarree}', "");
Expect(0, 1915, '\P{Jg=burushaskiyehbarree}', "");
Expect(1, 1915, '\P{^Jg=burushaskiyehbarree}', "");
Expect(0, 1913, '\p{Jg=burushaskiyehbarree}', "");
Expect(1, 1913, '\p{^Jg=burushaskiyehbarree}', "");
Expect(1, 1913, '\P{Jg=burushaskiyehbarree}', "");
Expect(0, 1913, '\P{^Jg=burushaskiyehbarree}', "");
Expect(1, 1915, '\p{Jg= Burushaski_YehBarree}', "");
Expect(0, 1915, '\p{^Jg= Burushaski_YehBarree}', "");
Expect(0, 1915, '\P{Jg= Burushaski_YehBarree}', "");
Expect(1, 1915, '\P{^Jg= Burushaski_YehBarree}', "");
Expect(0, 1913, '\p{Jg= Burushaski_YehBarree}', "");
Expect(1, 1913, '\p{^Jg= Burushaski_YehBarree}', "");
Expect(1, 1913, '\P{Jg= Burushaski_YehBarree}', "");
Expect(0, 1913, '\P{^Jg= Burushaski_YehBarree}', "");
Error('\p{Is_Joining_Group=/a/Burushaski	YehBarree}');
Error('\P{Is_Joining_Group=/a/Burushaski	YehBarree}');
Expect(1, 1915, '\p{Is_Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1915, '\p{^Is_Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1915, '\P{Is_Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1915, '\P{^Is_Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1913, '\p{Is_Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1913, '\p{^Is_Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1913, '\P{Is_Joining_Group=burushaskiyehbarree}', "");
Expect(0, 1913, '\P{^Is_Joining_Group=burushaskiyehbarree}', "");
Expect(1, 1915, '\p{Is_Joining_Group=_ Burushaski-Yeh	BARREE}', "");
Expect(0, 1915, '\p{^Is_Joining_Group=_ Burushaski-Yeh	BARREE}', "");
Expect(0, 1915, '\P{Is_Joining_Group=_ Burushaski-Yeh	BARREE}', "");
Expect(1, 1915, '\P{^Is_Joining_Group=_ Burushaski-Yeh	BARREE}', "");
Expect(0, 1913, '\p{Is_Joining_Group=_ Burushaski-Yeh	BARREE}', "");
Expect(1, 1913, '\p{^Is_Joining_Group=_ Burushaski-Yeh	BARREE}', "");
Expect(1, 1913, '\P{Is_Joining_Group=_ Burushaski-Yeh	BARREE}', "");
Expect(0, 1913, '\P{^Is_Joining_Group=_ Burushaski-Yeh	BARREE}', "");
Error('\p{Is_Jg=	/a/Burushaski-YehBarree}');
Error('\P{Is_Jg=	/a/Burushaski-YehBarree}');
Expect(1, 1915, '\p{Is_Jg=burushaskiyehbarree}', "");
Expect(0, 1915, '\p{^Is_Jg=burushaskiyehbarree}', "");
Expect(0, 1915, '\P{Is_Jg=burushaskiyehbarree}', "");
Expect(1, 1915, '\P{^Is_Jg=burushaskiyehbarree}', "");
Expect(0, 1913, '\p{Is_Jg=burushaskiyehbarree}', "");
Expect(1, 1913, '\p{^Is_Jg=burushaskiyehbarree}', "");
Expect(1, 1913, '\P{Is_Jg=burushaskiyehbarree}', "");
Expect(0, 1913, '\P{^Is_Jg=burushaskiyehbarree}', "");
Expect(1, 1915, '\p{Is_Jg= _burushaski_YEH_barree}', "");
Expect(0, 1915, '\p{^Is_Jg= _burushaski_YEH_barree}', "");
Expect(0, 1915, '\P{Is_Jg= _burushaski_YEH_barree}', "");
Expect(1, 1915, '\P{^Is_Jg= _burushaski_YEH_barree}', "");
Expect(0, 1913, '\p{Is_Jg= _burushaski_YEH_barree}', "");
Expect(1, 1913, '\p{^Is_Jg= _burushaski_YEH_barree}', "");
Expect(1, 1913, '\P{Is_Jg= _burushaski_YEH_barree}', "");
Expect(0, 1913, '\P{^Is_Jg= _burushaski_YEH_barree}', "");
Error('\p{Joining_Group= 	Teh	MARBUTA/a/}');
Error('\P{Joining_Group= 	Teh	MARBUTA/a/}');
Expect(1, 1577, '\p{Joining_Group=tehmarbuta}', "");
Expect(0, 1577, '\p{^Joining_Group=tehmarbuta}', "");
Expect(0, 1577, '\P{Joining_Group=tehmarbuta}', "");
Expect(1, 1577, '\P{^Joining_Group=tehmarbuta}', "");
Expect(0, 1576, '\p{Joining_Group=tehmarbuta}', "");
Expect(1, 1576, '\p{^Joining_Group=tehmarbuta}', "");
Expect(1, 1576, '\P{Joining_Group=tehmarbuta}', "");
Expect(0, 1576, '\P{^Joining_Group=tehmarbuta}', "");
Expect(1, 1577, '\p{Joining_Group=	_TEHMarbuta}', "");
Expect(0, 1577, '\p{^Joining_Group=	_TEHMarbuta}', "");
Expect(0, 1577, '\P{Joining_Group=	_TEHMarbuta}', "");
Expect(1, 1577, '\P{^Joining_Group=	_TEHMarbuta}', "");
Expect(0, 1576, '\p{Joining_Group=	_TEHMarbuta}', "");
Expect(1, 1576, '\p{^Joining_Group=	_TEHMarbuta}', "");
Expect(1, 1576, '\P{Joining_Group=	_TEHMarbuta}', "");
Expect(0, 1576, '\P{^Joining_Group=	_TEHMarbuta}', "");
Error('\p{Jg: := -Teh	marbuta}');
Error('\P{Jg: := -Teh	marbuta}');
Expect(1, 1577, '\p{Jg=tehmarbuta}', "");
Expect(0, 1577, '\p{^Jg=tehmarbuta}', "");
Expect(0, 1577, '\P{Jg=tehmarbuta}', "");
Expect(1, 1577, '\P{^Jg=tehmarbuta}', "");
Expect(0, 1576, '\p{Jg=tehmarbuta}', "");
Expect(1, 1576, '\p{^Jg=tehmarbuta}', "");
Expect(1, 1576, '\P{Jg=tehmarbuta}', "");
Expect(0, 1576, '\P{^Jg=tehmarbuta}', "");
Expect(1, 1577, '\p{Jg=__TEH-Marbuta}', "");
Expect(0, 1577, '\p{^Jg=__TEH-Marbuta}', "");
Expect(0, 1577, '\P{Jg=__TEH-Marbuta}', "");
Expect(1, 1577, '\P{^Jg=__TEH-Marbuta}', "");
Expect(0, 1576, '\p{Jg=__TEH-Marbuta}', "");
Expect(1, 1576, '\p{^Jg=__TEH-Marbuta}', "");
Expect(1, 1576, '\P{Jg=__TEH-Marbuta}', "");
Expect(0, 1576, '\P{^Jg=__TEH-Marbuta}', "");
Error('\p{Is_Joining_Group=:= _Teh MARBUTA}');
Error('\P{Is_Joining_Group=:= _Teh MARBUTA}');
Expect(1, 1577, '\p{Is_Joining_Group=tehmarbuta}', "");
Expect(0, 1577, '\p{^Is_Joining_Group=tehmarbuta}', "");
Expect(0, 1577, '\P{Is_Joining_Group=tehmarbuta}', "");
Expect(1, 1577, '\P{^Is_Joining_Group=tehmarbuta}', "");
Expect(0, 1576, '\p{Is_Joining_Group=tehmarbuta}', "");
Expect(1, 1576, '\p{^Is_Joining_Group=tehmarbuta}', "");
Expect(1, 1576, '\P{Is_Joining_Group=tehmarbuta}', "");
Expect(0, 1576, '\P{^Is_Joining_Group=tehmarbuta}', "");
Expect(1, 1577, '\p{Is_Joining_Group:	_-Teh-Marbuta}', "");
Expect(0, 1577, '\p{^Is_Joining_Group:	_-Teh-Marbuta}', "");
Expect(0, 1577, '\P{Is_Joining_Group:	_-Teh-Marbuta}', "");
Expect(1, 1577, '\P{^Is_Joining_Group:	_-Teh-Marbuta}', "");
Expect(0, 1576, '\p{Is_Joining_Group:	_-Teh-Marbuta}', "");
Expect(1, 1576, '\p{^Is_Joining_Group:	_-Teh-Marbuta}', "");
Expect(1, 1576, '\P{Is_Joining_Group:	_-Teh-Marbuta}', "");
Expect(0, 1576, '\P{^Is_Joining_Group:	_-Teh-Marbuta}', "");
Error('\p{Is_Jg=_/a/TehMARBUTA}');
Error('\P{Is_Jg=_/a/TehMARBUTA}');
Expect(1, 1577, '\p{Is_Jg=tehmarbuta}', "");
Expect(0, 1577, '\p{^Is_Jg=tehmarbuta}', "");
Expect(0, 1577, '\P{Is_Jg=tehmarbuta}', "");
Expect(1, 1577, '\P{^Is_Jg=tehmarbuta}', "");
Expect(0, 1576, '\p{Is_Jg=tehmarbuta}', "");
Expect(1, 1576, '\p{^Is_Jg=tehmarbuta}', "");
Expect(1, 1576, '\P{Is_Jg=tehmarbuta}', "");
Expect(0, 1576, '\P{^Is_Jg=tehmarbuta}', "");
Expect(1, 1577, '\p{Is_Jg:  -teh	MARBUTA}', "");
Expect(0, 1577, '\p{^Is_Jg:  -teh	MARBUTA}', "");
Expect(0, 1577, '\P{Is_Jg:  -teh	MARBUTA}', "");
Expect(1, 1577, '\P{^Is_Jg:  -teh	MARBUTA}', "");
Expect(0, 1576, '\p{Is_Jg:  -teh	MARBUTA}', "");
Expect(1, 1576, '\p{^Is_Jg:  -teh	MARBUTA}', "");
Expect(1, 1576, '\P{Is_Jg:  -teh	MARBUTA}', "");
Expect(0, 1576, '\P{^Is_Jg:  -teh	MARBUTA}', "");
Error('\p{Joining_Group:	 REH/a/}');
Error('\P{Joining_Group:	 REH/a/}');
Expect(1, 1586, '\p{Joining_Group=reh}', "");
Expect(0, 1586, '\p{^Joining_Group=reh}', "");
Expect(0, 1586, '\P{Joining_Group=reh}', "");
Expect(1, 1586, '\P{^Joining_Group=reh}', "");
Expect(0, 1584, '\p{Joining_Group=reh}', "");
Expect(1, 1584, '\p{^Joining_Group=reh}', "");
Expect(1, 1584, '\P{Joining_Group=reh}', "");
Expect(0, 1584, '\P{^Joining_Group=reh}', "");
Expect(1, 1586, '\p{Joining_Group=	-REH}', "");
Expect(0, 1586, '\p{^Joining_Group=	-REH}', "");
Expect(0, 1586, '\P{Joining_Group=	-REH}', "");
Expect(1, 1586, '\P{^Joining_Group=	-REH}', "");
Expect(0, 1584, '\p{Joining_Group=	-REH}', "");
Expect(1, 1584, '\p{^Joining_Group=	-REH}', "");
Expect(1, 1584, '\P{Joining_Group=	-REH}', "");
Expect(0, 1584, '\P{^Joining_Group=	-REH}', "");
Error('\p{Jg= /a/reh}');
Error('\P{Jg= /a/reh}');
Expect(1, 1586, '\p{Jg=reh}', "");
Expect(0, 1586, '\p{^Jg=reh}', "");
Expect(0, 1586, '\P{Jg=reh}', "");
Expect(1, 1586, '\P{^Jg=reh}', "");
Expect(0, 1584, '\p{Jg=reh}', "");
Expect(1, 1584, '\p{^Jg=reh}', "");
Expect(1, 1584, '\P{Jg=reh}', "");
Expect(0, 1584, '\P{^Jg=reh}', "");
Expect(1, 1586, '\p{Jg=		REH}', "");
Expect(0, 1586, '\p{^Jg=		REH}', "");
Expect(0, 1586, '\P{Jg=		REH}', "");
Expect(1, 1586, '\P{^Jg=		REH}', "");
Expect(0, 1584, '\p{Jg=		REH}', "");
Expect(1, 1584, '\p{^Jg=		REH}', "");
Expect(1, 1584, '\P{Jg=		REH}', "");
Expect(0, 1584, '\P{^Jg=		REH}', "");
Error('\p{Is_Joining_Group:	 reh:=}');
Error('\P{Is_Joining_Group:	 reh:=}');
Expect(1, 1586, '\p{Is_Joining_Group:   reh}', "");
Expect(0, 1586, '\p{^Is_Joining_Group:   reh}', "");
Expect(0, 1586, '\P{Is_Joining_Group:   reh}', "");
Expect(1, 1586, '\P{^Is_Joining_Group:   reh}', "");
Expect(0, 1584, '\p{Is_Joining_Group:   reh}', "");
Expect(1, 1584, '\p{^Is_Joining_Group:   reh}', "");
Expect(1, 1584, '\P{Is_Joining_Group:   reh}', "");
Expect(0, 1584, '\P{^Is_Joining_Group:   reh}', "");
Expect(1, 1586, '\p{Is_Joining_Group=	-REH}', "");
Expect(0, 1586, '\p{^Is_Joining_Group=	-REH}', "");
Expect(0, 1586, '\P{Is_Joining_Group=	-REH}', "");
Expect(1, 1586, '\P{^Is_Joining_Group=	-REH}', "");
Expect(0, 1584, '\p{Is_Joining_Group=	-REH}', "");
Expect(1, 1584, '\p{^Is_Joining_Group=	-REH}', "");
Expect(1, 1584, '\P{Is_Joining_Group=	-REH}', "");
Expect(0, 1584, '\P{^Is_Joining_Group=	-REH}', "");
Error('\p{Is_Jg=_reh:=}');
Error('\P{Is_Jg=_reh:=}');
Expect(1, 1586, '\p{Is_Jg: reh}', "");
Expect(0, 1586, '\p{^Is_Jg: reh}', "");
Expect(0, 1586, '\P{Is_Jg: reh}', "");
Expect(1, 1586, '\P{^Is_Jg: reh}', "");
Expect(0, 1584, '\p{Is_Jg: reh}', "");
Expect(1, 1584, '\p{^Is_Jg: reh}', "");
Expect(1, 1584, '\P{Is_Jg: reh}', "");
Expect(0, 1584, '\P{^Is_Jg: reh}', "");
Expect(1, 1586, '\p{Is_Jg= REH}', "");
Expect(0, 1586, '\p{^Is_Jg= REH}', "");
Expect(0, 1586, '\P{Is_Jg= REH}', "");
Expect(1, 1586, '\P{^Is_Jg= REH}', "");
Expect(0, 1584, '\p{Is_Jg= REH}', "");
Expect(1, 1584, '\p{^Is_Jg= REH}', "");
Expect(1, 1584, '\P{Is_Jg= REH}', "");
Expect(0, 1584, '\P{^Is_Jg= REH}', "");
Error('\p{Joining_Group=Zain/a/}');
Error('\P{Joining_Group=Zain/a/}');
Expect(1, 1817, '\p{Joining_Group=zain}', "");
Expect(0, 1817, '\p{^Joining_Group=zain}', "");
Expect(0, 1817, '\P{Joining_Group=zain}', "");
Expect(1, 1817, '\P{^Joining_Group=zain}', "");
Expect(0, 1816, '\p{Joining_Group=zain}', "");
Expect(1, 1816, '\p{^Joining_Group=zain}', "");
Expect(1, 1816, '\P{Joining_Group=zain}', "");
Expect(0, 1816, '\P{^Joining_Group=zain}', "");
Expect(1, 1817, '\p{Joining_Group= _ZAIN}', "");
Expect(0, 1817, '\p{^Joining_Group= _ZAIN}', "");
Expect(0, 1817, '\P{Joining_Group= _ZAIN}', "");
Expect(1, 1817, '\P{^Joining_Group= _ZAIN}', "");
Expect(0, 1816, '\p{Joining_Group= _ZAIN}', "");
Expect(1, 1816, '\p{^Joining_Group= _ZAIN}', "");
Expect(1, 1816, '\P{Joining_Group= _ZAIN}', "");
Expect(0, 1816, '\P{^Joining_Group= _ZAIN}', "");
Error('\p{Jg=-Zain:=}');
Error('\P{Jg=-Zain:=}');
Expect(1, 1817, '\p{Jg=zain}', "");
Expect(0, 1817, '\p{^Jg=zain}', "");
Expect(0, 1817, '\P{Jg=zain}', "");
Expect(1, 1817, '\P{^Jg=zain}', "");
Expect(0, 1816, '\p{Jg=zain}', "");
Expect(1, 1816, '\p{^Jg=zain}', "");
Expect(1, 1816, '\P{Jg=zain}', "");
Expect(0, 1816, '\P{^Jg=zain}', "");
Expect(1, 1817, '\p{Jg=_ZAIN}', "");
Expect(0, 1817, '\p{^Jg=_ZAIN}', "");
Expect(0, 1817, '\P{Jg=_ZAIN}', "");
Expect(1, 1817, '\P{^Jg=_ZAIN}', "");
Expect(0, 1816, '\p{Jg=_ZAIN}', "");
Expect(1, 1816, '\p{^Jg=_ZAIN}', "");
Expect(1, 1816, '\P{Jg=_ZAIN}', "");
Expect(0, 1816, '\P{^Jg=_ZAIN}', "");
Error('\p{Is_Joining_Group=:=--zain}');
Error('\P{Is_Joining_Group=:=--zain}');
Expect(1, 1817, '\p{Is_Joining_Group: zain}', "");
Expect(0, 1817, '\p{^Is_Joining_Group: zain}', "");
Expect(0, 1817, '\P{Is_Joining_Group: zain}', "");
Expect(1, 1817, '\P{^Is_Joining_Group: zain}', "");
Expect(0, 1816, '\p{Is_Joining_Group: zain}', "");
Expect(1, 1816, '\p{^Is_Joining_Group: zain}', "");
Expect(1, 1816, '\P{Is_Joining_Group: zain}', "");
Expect(0, 1816, '\P{^Is_Joining_Group: zain}', "");
Expect(1, 1817, '\p{Is_Joining_Group=	Zain}', "");
Expect(0, 1817, '\p{^Is_Joining_Group=	Zain}', "");
Expect(0, 1817, '\P{Is_Joining_Group=	Zain}', "");
Expect(1, 1817, '\P{^Is_Joining_Group=	Zain}', "");
Expect(0, 1816, '\p{Is_Joining_Group=	Zain}', "");
Expect(1, 1816, '\p{^Is_Joining_Group=	Zain}', "");
Expect(1, 1816, '\P{Is_Joining_Group=	Zain}', "");
Expect(0, 1816, '\P{^Is_Joining_Group=	Zain}', "");
Error('\p{Is_Jg=_/a/Zain}');
Error('\P{Is_Jg=_/a/Zain}');
Expect(1, 1817, '\p{Is_Jg=zain}', "");
Expect(0, 1817, '\p{^Is_Jg=zain}', "");
Expect(0, 1817, '\P{Is_Jg=zain}', "");
Expect(1, 1817, '\P{^Is_Jg=zain}', "");
Expect(0, 1816, '\p{Is_Jg=zain}', "");
Expect(1, 1816, '\p{^Is_Jg=zain}', "");
Expect(1, 1816, '\P{Is_Jg=zain}', "");
Expect(0, 1816, '\P{^Is_Jg=zain}', "");
Expect(1, 1817, '\p{Is_Jg= 	zain}', "");
Expect(0, 1817, '\p{^Is_Jg= 	zain}', "");
Expect(0, 1817, '\P{Is_Jg= 	zain}', "");
Expect(1, 1817, '\P{^Is_Jg= 	zain}', "");
Expect(0, 1816, '\p{Is_Jg= 	zain}', "");
Expect(1, 1816, '\p{^Is_Jg= 	zain}', "");
Expect(1, 1816, '\P{Is_Jg= 	zain}', "");
Expect(0, 1816, '\P{^Is_Jg= 	zain}', "");
Error('\p{Joining_Group=  ALEF/a/}');
Error('\P{Joining_Group=  ALEF/a/}');
Expect(1, 1571, '\p{Joining_Group=alef}', "");
Expect(0, 1571, '\p{^Joining_Group=alef}', "");
Expect(0, 1571, '\P{Joining_Group=alef}', "");
Expect(1, 1571, '\P{^Joining_Group=alef}', "");
Expect(0, 1569, '\p{Joining_Group=alef}', "");
Expect(1, 1569, '\p{^Joining_Group=alef}', "");
Expect(1, 1569, '\P{Joining_Group=alef}', "");
Expect(0, 1569, '\P{^Joining_Group=alef}', "");
Expect(1, 1571, '\p{Joining_Group=_Alef}', "");
Expect(0, 1571, '\p{^Joining_Group=_Alef}', "");
Expect(0, 1571, '\P{Joining_Group=_Alef}', "");
Expect(1, 1571, '\P{^Joining_Group=_Alef}', "");
Expect(0, 1569, '\p{Joining_Group=_Alef}', "");
Expect(1, 1569, '\p{^Joining_Group=_Alef}', "");
Expect(1, 1569, '\P{Joining_Group=_Alef}', "");
Expect(0, 1569, '\P{^Joining_Group=_Alef}', "");
Error('\p{Jg=-Alef:=}');
Error('\P{Jg=-Alef:=}');
Expect(1, 1571, '\p{Jg=alef}', "");
Expect(0, 1571, '\p{^Jg=alef}', "");
Expect(0, 1571, '\P{Jg=alef}', "");
Expect(1, 1571, '\P{^Jg=alef}', "");
Expect(0, 1569, '\p{Jg=alef}', "");
Expect(1, 1569, '\p{^Jg=alef}', "");
Expect(1, 1569, '\P{Jg=alef}', "");
Expect(0, 1569, '\P{^Jg=alef}', "");
Expect(1, 1571, '\p{Jg=--ALEF}', "");
Expect(0, 1571, '\p{^Jg=--ALEF}', "");
Expect(0, 1571, '\P{Jg=--ALEF}', "");
Expect(1, 1571, '\P{^Jg=--ALEF}', "");
Expect(0, 1569, '\p{Jg=--ALEF}', "");
Expect(1, 1569, '\p{^Jg=--ALEF}', "");
Expect(1, 1569, '\P{Jg=--ALEF}', "");
Expect(0, 1569, '\P{^Jg=--ALEF}', "");
Error('\p{Is_Joining_Group=-ALEF/a/}');
Error('\P{Is_Joining_Group=-ALEF/a/}');
Expect(1, 1571, '\p{Is_Joining_Group=alef}', "");
Expect(0, 1571, '\p{^Is_Joining_Group=alef}', "");
Expect(0, 1571, '\P{Is_Joining_Group=alef}', "");
Expect(1, 1571, '\P{^Is_Joining_Group=alef}', "");
Expect(0, 1569, '\p{Is_Joining_Group=alef}', "");
Expect(1, 1569, '\p{^Is_Joining_Group=alef}', "");
Expect(1, 1569, '\P{Is_Joining_Group=alef}', "");
Expect(0, 1569, '\P{^Is_Joining_Group=alef}', "");
Expect(1, 1571, '\p{Is_Joining_Group= _Alef}', "");
Expect(0, 1571, '\p{^Is_Joining_Group= _Alef}', "");
Expect(0, 1571, '\P{Is_Joining_Group= _Alef}', "");
Expect(1, 1571, '\P{^Is_Joining_Group= _Alef}', "");
Expect(0, 1569, '\p{Is_Joining_Group= _Alef}', "");
Expect(1, 1569, '\p{^Is_Joining_Group= _Alef}', "");
Expect(1, 1569, '\P{Is_Joining_Group= _Alef}', "");
Expect(0, 1569, '\P{^Is_Joining_Group= _Alef}', "");
Error('\p{Is_Jg=_:=Alef}');
Error('\P{Is_Jg=_:=Alef}');
Expect(1, 1571, '\p{Is_Jg=alef}', "");
Expect(0, 1571, '\p{^Is_Jg=alef}', "");
Expect(0, 1571, '\P{Is_Jg=alef}', "");
Expect(1, 1571, '\P{^Is_Jg=alef}', "");
Expect(0, 1569, '\p{Is_Jg=alef}', "");
Expect(1, 1569, '\p{^Is_Jg=alef}', "");
Expect(1, 1569, '\P{Is_Jg=alef}', "");
Expect(0, 1569, '\P{^Is_Jg=alef}', "");
Expect(1, 1571, '\p{Is_Jg=	-alef}', "");
Expect(0, 1571, '\p{^Is_Jg=	-alef}', "");
Expect(0, 1571, '\P{Is_Jg=	-alef}', "");
Expect(1, 1571, '\P{^Is_Jg=	-alef}', "");
Expect(0, 1569, '\p{Is_Jg=	-alef}', "");
Expect(1, 1569, '\p{^Is_Jg=	-alef}', "");
Expect(1, 1569, '\P{Is_Jg=	-alef}', "");
Expect(0, 1569, '\P{^Is_Jg=	-alef}', "");
Error('\p{Joining_Group=-Gamal/a/}');
Error('\P{Joining_Group=-Gamal/a/}');
Expect(1, 1812, '\p{Joining_Group=gamal}', "");
Expect(0, 1812, '\p{^Joining_Group=gamal}', "");
Expect(0, 1812, '\P{Joining_Group=gamal}', "");
Expect(1, 1812, '\P{^Joining_Group=gamal}', "");
Expect(0, 1810, '\p{Joining_Group=gamal}', "");
Expect(1, 1810, '\p{^Joining_Group=gamal}', "");
Expect(1, 1810, '\P{Joining_Group=gamal}', "");
Expect(0, 1810, '\P{^Joining_Group=gamal}', "");
Expect(1, 1812, '\p{Joining_Group= GAMAL}', "");
Expect(0, 1812, '\p{^Joining_Group= GAMAL}', "");
Expect(0, 1812, '\P{Joining_Group= GAMAL}', "");
Expect(1, 1812, '\P{^Joining_Group= GAMAL}', "");
Expect(0, 1810, '\p{Joining_Group= GAMAL}', "");
Expect(1, 1810, '\p{^Joining_Group= GAMAL}', "");
Expect(1, 1810, '\P{Joining_Group= GAMAL}', "");
Expect(0, 1810, '\P{^Joining_Group= GAMAL}', "");
Error('\p{Jg=_	gamal:=}');
Error('\P{Jg=_	gamal:=}');
Expect(1, 1812, '\p{Jg=gamal}', "");
Expect(0, 1812, '\p{^Jg=gamal}', "");
Expect(0, 1812, '\P{Jg=gamal}', "");
Expect(1, 1812, '\P{^Jg=gamal}', "");
Expect(0, 1810, '\p{Jg=gamal}', "");
Expect(1, 1810, '\p{^Jg=gamal}', "");
Expect(1, 1810, '\P{Jg=gamal}', "");
Expect(0, 1810, '\P{^Jg=gamal}', "");
Expect(1, 1812, '\p{Jg= -Gamal}', "");
Expect(0, 1812, '\p{^Jg= -Gamal}', "");
Expect(0, 1812, '\P{Jg= -Gamal}', "");
Expect(1, 1812, '\P{^Jg= -Gamal}', "");
Expect(0, 1810, '\p{Jg= -Gamal}', "");
Expect(1, 1810, '\p{^Jg= -Gamal}', "");
Expect(1, 1810, '\P{Jg= -Gamal}', "");
Expect(0, 1810, '\P{^Jg= -Gamal}', "");
Error('\p{Is_Joining_Group=	Gamal:=}');
Error('\P{Is_Joining_Group=	Gamal:=}');
Expect(1, 1812, '\p{Is_Joining_Group:gamal}', "");
Expect(0, 1812, '\p{^Is_Joining_Group:gamal}', "");
Expect(0, 1812, '\P{Is_Joining_Group:gamal}', "");
Expect(1, 1812, '\P{^Is_Joining_Group:gamal}', "");
Expect(0, 1810, '\p{Is_Joining_Group:gamal}', "");
Expect(1, 1810, '\p{^Is_Joining_Group:gamal}', "");
Expect(1, 1810, '\P{Is_Joining_Group:gamal}', "");
Expect(0, 1810, '\P{^Is_Joining_Group:gamal}', "");
Expect(1, 1812, '\p{Is_Joining_Group=	_Gamal}', "");
Expect(0, 1812, '\p{^Is_Joining_Group=	_Gamal}', "");
Expect(0, 1812, '\P{Is_Joining_Group=	_Gamal}', "");
Expect(1, 1812, '\P{^Is_Joining_Group=	_Gamal}', "");
Expect(0, 1810, '\p{Is_Joining_Group=	_Gamal}', "");
Expect(1, 1810, '\p{^Is_Joining_Group=	_Gamal}', "");
Expect(1, 1810, '\P{Is_Joining_Group=	_Gamal}', "");
Expect(0, 1810, '\P{^Is_Joining_Group=	_Gamal}', "");
Error('\p{Is_Jg=	/a/Gamal}');
Error('\P{Is_Jg=	/a/Gamal}');
Expect(1, 1812, '\p{Is_Jg=gamal}', "");
Expect(0, 1812, '\p{^Is_Jg=gamal}', "");
Expect(0, 1812, '\P{Is_Jg=gamal}', "");
Expect(1, 1812, '\P{^Is_Jg=gamal}', "");
Expect(0, 1810, '\p{Is_Jg=gamal}', "");
Expect(1, 1810, '\p{^Is_Jg=gamal}', "");
Expect(1, 1810, '\P{Is_Jg=gamal}', "");
Expect(0, 1810, '\P{^Is_Jg=gamal}', "");
Expect(1, 1812, '\p{Is_Jg=	 Gamal}', "");
Expect(0, 1812, '\p{^Is_Jg=	 Gamal}', "");
Expect(0, 1812, '\P{Is_Jg=	 Gamal}', "");
Expect(1, 1812, '\P{^Is_Jg=	 Gamal}', "");
Expect(0, 1810, '\p{Is_Jg=	 Gamal}', "");
Expect(1, 1810, '\p{^Is_Jg=	 Gamal}', "");
Expect(1, 1810, '\P{Is_Jg=	 Gamal}', "");
Expect(0, 1810, '\P{^Is_Jg=	 Gamal}', "");
Error('\p{Joining_Group=_Meem:=}');
Error('\P{Joining_Group=_Meem:=}');
Expect(1, 1605, '\p{Joining_Group:   meem}', "");
Expect(0, 1605, '\p{^Joining_Group:   meem}', "");
Expect(0, 1605, '\P{Joining_Group:   meem}', "");
Expect(1, 1605, '\P{^Joining_Group:   meem}', "");
Expect(0, 1604, '\p{Joining_Group:   meem}', "");
Expect(1, 1604, '\p{^Joining_Group:   meem}', "");
Expect(1, 1604, '\P{Joining_Group:   meem}', "");
Expect(0, 1604, '\P{^Joining_Group:   meem}', "");
Expect(1, 1605, '\p{Joining_Group= meem}', "");
Expect(0, 1605, '\p{^Joining_Group= meem}', "");
Expect(0, 1605, '\P{Joining_Group= meem}', "");
Expect(1, 1605, '\P{^Joining_Group= meem}', "");
Expect(0, 1604, '\p{Joining_Group= meem}', "");
Expect(1, 1604, '\p{^Joining_Group= meem}', "");
Expect(1, 1604, '\P{Joining_Group= meem}', "");
Expect(0, 1604, '\P{^Joining_Group= meem}', "");
Error('\p{Jg=:= Meem}');
Error('\P{Jg=:= Meem}');
Expect(1, 1605, '\p{Jg=meem}', "");
Expect(0, 1605, '\p{^Jg=meem}', "");
Expect(0, 1605, '\P{Jg=meem}', "");
Expect(1, 1605, '\P{^Jg=meem}', "");
Expect(0, 1604, '\p{Jg=meem}', "");
Expect(1, 1604, '\p{^Jg=meem}', "");
Expect(1, 1604, '\P{Jg=meem}', "");
Expect(0, 1604, '\P{^Jg=meem}', "");
Expect(1, 1605, '\p{Jg= Meem}', "");
Expect(0, 1605, '\p{^Jg= Meem}', "");
Expect(0, 1605, '\P{Jg= Meem}', "");
Expect(1, 1605, '\P{^Jg= Meem}', "");
Expect(0, 1604, '\p{Jg= Meem}', "");
Expect(1, 1604, '\p{^Jg= Meem}', "");
Expect(1, 1604, '\P{Jg= Meem}', "");
Expect(0, 1604, '\P{^Jg= Meem}', "");
Error('\p{Is_Joining_Group= :=meem}');
Error('\P{Is_Joining_Group= :=meem}');
Expect(1, 1605, '\p{Is_Joining_Group=meem}', "");
Expect(0, 1605, '\p{^Is_Joining_Group=meem}', "");
Expect(0, 1605, '\P{Is_Joining_Group=meem}', "");
Expect(1, 1605, '\P{^Is_Joining_Group=meem}', "");
Expect(0, 1604, '\p{Is_Joining_Group=meem}', "");
Expect(1, 1604, '\p{^Is_Joining_Group=meem}', "");
Expect(1, 1604, '\P{Is_Joining_Group=meem}', "");
Expect(0, 1604, '\P{^Is_Joining_Group=meem}', "");
Expect(1, 1605, '\p{Is_Joining_Group=-Meem}', "");
Expect(0, 1605, '\p{^Is_Joining_Group=-Meem}', "");
Expect(0, 1605, '\P{Is_Joining_Group=-Meem}', "");
Expect(1, 1605, '\P{^Is_Joining_Group=-Meem}', "");
Expect(0, 1604, '\p{Is_Joining_Group=-Meem}', "");
Expect(1, 1604, '\p{^Is_Joining_Group=-Meem}', "");
Expect(1, 1604, '\P{Is_Joining_Group=-Meem}', "");
Expect(0, 1604, '\P{^Is_Joining_Group=-Meem}', "");
Error('\p{Is_Jg=/a/ meem}');
Error('\P{Is_Jg=/a/ meem}');
Expect(1, 1605, '\p{Is_Jg=meem}', "");
Expect(0, 1605, '\p{^Is_Jg=meem}', "");
Expect(0, 1605, '\P{Is_Jg=meem}', "");
Expect(1, 1605, '\P{^Is_Jg=meem}', "");
Expect(0, 1604, '\p{Is_Jg=meem}', "");
Expect(1, 1604, '\p{^Is_Jg=meem}', "");
Expect(1, 1604, '\P{Is_Jg=meem}', "");
Expect(0, 1604, '\P{^Is_Jg=meem}', "");
Expect(1, 1605, '\p{Is_Jg:   Meem}', "");
Expect(0, 1605, '\p{^Is_Jg:   Meem}', "");
Expect(0, 1605, '\P{Is_Jg:   Meem}', "");
Expect(1, 1605, '\P{^Is_Jg:   Meem}', "");
Expect(0, 1604, '\p{Is_Jg:   Meem}', "");
Expect(1, 1604, '\p{^Is_Jg:   Meem}', "");
Expect(1, 1604, '\P{Is_Jg:   Meem}', "");
Expect(0, 1604, '\P{^Is_Jg:   Meem}', "");
Error('\p{Joining_Group= 	SADHE:=}');
Error('\P{Joining_Group= 	SADHE:=}');
Expect(1, 1832, '\p{Joining_Group=sadhe}', "");
Expect(0, 1832, '\p{^Joining_Group=sadhe}', "");
Expect(0, 1832, '\P{Joining_Group=sadhe}', "");
Expect(1, 1832, '\P{^Joining_Group=sadhe}', "");
Expect(0, 1831, '\p{Joining_Group=sadhe}', "");
Expect(1, 1831, '\p{^Joining_Group=sadhe}', "");
Expect(1, 1831, '\P{Joining_Group=sadhe}', "");
Expect(0, 1831, '\P{^Joining_Group=sadhe}', "");
Expect(1, 1832, '\p{Joining_Group=-SADHE}', "");
Expect(0, 1832, '\p{^Joining_Group=-SADHE}', "");
Expect(0, 1832, '\P{Joining_Group=-SADHE}', "");
Expect(1, 1832, '\P{^Joining_Group=-SADHE}', "");
Expect(0, 1831, '\p{Joining_Group=-SADHE}', "");
Expect(1, 1831, '\p{^Joining_Group=-SADHE}', "");
Expect(1, 1831, '\P{Joining_Group=-SADHE}', "");
Expect(0, 1831, '\P{^Joining_Group=-SADHE}', "");
Error('\p{Jg=-:=sadhe}');
Error('\P{Jg=-:=sadhe}');
Expect(1, 1832, '\p{Jg=sadhe}', "");
Expect(0, 1832, '\p{^Jg=sadhe}', "");
Expect(0, 1832, '\P{Jg=sadhe}', "");
Expect(1, 1832, '\P{^Jg=sadhe}', "");
Expect(0, 1831, '\p{Jg=sadhe}', "");
Expect(1, 1831, '\p{^Jg=sadhe}', "");
Expect(1, 1831, '\P{Jg=sadhe}', "");
Expect(0, 1831, '\P{^Jg=sadhe}', "");
Expect(1, 1832, '\p{Jg=--SADHE}', "");
Expect(0, 1832, '\p{^Jg=--SADHE}', "");
Expect(0, 1832, '\P{Jg=--SADHE}', "");
Expect(1, 1832, '\P{^Jg=--SADHE}', "");
Expect(0, 1831, '\p{Jg=--SADHE}', "");
Expect(1, 1831, '\p{^Jg=--SADHE}', "");
Expect(1, 1831, '\P{Jg=--SADHE}', "");
Expect(0, 1831, '\P{^Jg=--SADHE}', "");
Error('\p{Is_Joining_Group= :=Sadhe}');
Error('\P{Is_Joining_Group= :=Sadhe}');
Expect(1, 1832, '\p{Is_Joining_Group=sadhe}', "");
Expect(0, 1832, '\p{^Is_Joining_Group=sadhe}', "");
Expect(0, 1832, '\P{Is_Joining_Group=sadhe}', "");
Expect(1, 1832, '\P{^Is_Joining_Group=sadhe}', "");
Expect(0, 1831, '\p{Is_Joining_Group=sadhe}', "");
Expect(1, 1831, '\p{^Is_Joining_Group=sadhe}', "");
Expect(1, 1831, '\P{Is_Joining_Group=sadhe}', "");
Expect(0, 1831, '\P{^Is_Joining_Group=sadhe}', "");
Expect(1, 1832, '\p{Is_Joining_Group=	_Sadhe}', "");
Expect(0, 1832, '\p{^Is_Joining_Group=	_Sadhe}', "");
Expect(0, 1832, '\P{Is_Joining_Group=	_Sadhe}', "");
Expect(1, 1832, '\P{^Is_Joining_Group=	_Sadhe}', "");
Expect(0, 1831, '\p{Is_Joining_Group=	_Sadhe}', "");
Expect(1, 1831, '\p{^Is_Joining_Group=	_Sadhe}', "");
Expect(1, 1831, '\P{Is_Joining_Group=	_Sadhe}', "");
Expect(0, 1831, '\P{^Is_Joining_Group=	_Sadhe}', "");
Error('\p{Is_Jg=:=_-Sadhe}');
Error('\P{Is_Jg=:=_-Sadhe}');
Expect(1, 1832, '\p{Is_Jg=sadhe}', "");
Expect(0, 1832, '\p{^Is_Jg=sadhe}', "");
Expect(0, 1832, '\P{Is_Jg=sadhe}', "");
Expect(1, 1832, '\P{^Is_Jg=sadhe}', "");
Expect(0, 1831, '\p{Is_Jg=sadhe}', "");
Expect(1, 1831, '\p{^Is_Jg=sadhe}', "");
Expect(1, 1831, '\P{Is_Jg=sadhe}', "");
Expect(0, 1831, '\P{^Is_Jg=sadhe}', "");
Expect(1, 1832, '\p{Is_Jg=Sadhe}', "");
Expect(0, 1832, '\p{^Is_Jg=Sadhe}', "");
Expect(0, 1832, '\P{Is_Jg=Sadhe}', "");
Expect(1, 1832, '\P{^Is_Jg=Sadhe}', "");
Expect(0, 1831, '\p{Is_Jg=Sadhe}', "");
Expect(1, 1831, '\p{^Is_Jg=Sadhe}', "");
Expect(1, 1831, '\P{Is_Jg=Sadhe}', "");
Expect(0, 1831, '\P{^Is_Jg=Sadhe}', "");
Error('\p{Joining_Group=:= Beh}');
Error('\P{Joining_Group=:= Beh}');
Expect(1, 1576, '\p{Joining_Group: beh}', "");
Expect(0, 1576, '\p{^Joining_Group: beh}', "");
Expect(0, 1576, '\P{Joining_Group: beh}', "");
Expect(1, 1576, '\P{^Joining_Group: beh}', "");
Expect(0, 1575, '\p{Joining_Group: beh}', "");
Expect(1, 1575, '\p{^Joining_Group: beh}', "");
Expect(1, 1575, '\P{Joining_Group: beh}', "");
Expect(0, 1575, '\P{^Joining_Group: beh}', "");
Expect(1, 1576, '\p{Joining_Group=		BEH}', "");
Expect(0, 1576, '\p{^Joining_Group=		BEH}', "");
Expect(0, 1576, '\P{Joining_Group=		BEH}', "");
Expect(1, 1576, '\P{^Joining_Group=		BEH}', "");
Expect(0, 1575, '\p{Joining_Group=		BEH}', "");
Expect(1, 1575, '\p{^Joining_Group=		BEH}', "");
Expect(1, 1575, '\P{Joining_Group=		BEH}', "");
Expect(0, 1575, '\P{^Joining_Group=		BEH}', "");
Error('\p{Jg=_:=Beh}');
Error('\P{Jg=_:=Beh}');
Expect(1, 1576, '\p{Jg=beh}', "");
Expect(0, 1576, '\p{^Jg=beh}', "");
Expect(0, 1576, '\P{Jg=beh}', "");
Expect(1, 1576, '\P{^Jg=beh}', "");
Expect(0, 1575, '\p{Jg=beh}', "");
Expect(1, 1575, '\p{^Jg=beh}', "");
Expect(1, 1575, '\P{Jg=beh}', "");
Expect(0, 1575, '\P{^Jg=beh}', "");
Expect(1, 1576, '\p{Jg=- Beh}', "");
Expect(0, 1576, '\p{^Jg=- Beh}', "");
Expect(0, 1576, '\P{Jg=- Beh}', "");
Expect(1, 1576, '\P{^Jg=- Beh}', "");
Expect(0, 1575, '\p{Jg=- Beh}', "");
Expect(1, 1575, '\p{^Jg=- Beh}', "");
Expect(1, 1575, '\P{Jg=- Beh}', "");
Expect(0, 1575, '\P{^Jg=- Beh}', "");
Error('\p{Is_Joining_Group=:= BEH}');
Error('\P{Is_Joining_Group=:= BEH}');
Expect(1, 1576, '\p{Is_Joining_Group=beh}', "");
Expect(0, 1576, '\p{^Is_Joining_Group=beh}', "");
Expect(0, 1576, '\P{Is_Joining_Group=beh}', "");
Expect(1, 1576, '\P{^Is_Joining_Group=beh}', "");
Expect(0, 1575, '\p{Is_Joining_Group=beh}', "");
Expect(1, 1575, '\p{^Is_Joining_Group=beh}', "");
Expect(1, 1575, '\P{Is_Joining_Group=beh}', "");
Expect(0, 1575, '\P{^Is_Joining_Group=beh}', "");
Expect(1, 1576, '\p{Is_Joining_Group=-Beh}', "");
Expect(0, 1576, '\p{^Is_Joining_Group=-Beh}', "");
Expect(0, 1576, '\P{Is_Joining_Group=-Beh}', "");
Expect(1, 1576, '\P{^Is_Joining_Group=-Beh}', "");
Expect(0, 1575, '\p{Is_Joining_Group=-Beh}', "");
Expect(1, 1575, '\p{^Is_Joining_Group=-Beh}', "");
Expect(1, 1575, '\P{Is_Joining_Group=-Beh}', "");
Expect(0, 1575, '\P{^Is_Joining_Group=-Beh}', "");
Error('\p{Is_Jg=--Beh:=}');
Error('\P{Is_Jg=--Beh:=}');
Expect(1, 1576, '\p{Is_Jg: beh}', "");
Expect(0, 1576, '\p{^Is_Jg: beh}', "");
Expect(0, 1576, '\P{Is_Jg: beh}', "");
Expect(1, 1576, '\P{^Is_Jg: beh}', "");
Expect(0, 1575, '\p{Is_Jg: beh}', "");
Expect(1, 1575, '\p{^Is_Jg: beh}', "");
Expect(1, 1575, '\P{Is_Jg: beh}', "");
Expect(0, 1575, '\P{^Is_Jg: beh}', "");
Expect(1, 1576, '\p{Is_Jg:--BEH}', "");
Expect(0, 1576, '\p{^Is_Jg:--BEH}', "");
Expect(0, 1576, '\P{Is_Jg:--BEH}', "");
Expect(1, 1576, '\P{^Is_Jg:--BEH}', "");
Expect(0, 1575, '\p{Is_Jg:--BEH}', "");
Expect(1, 1575, '\p{^Is_Jg:--BEH}', "");
Expect(1, 1575, '\P{Is_Jg:--BEH}', "");
Expect(0, 1575, '\P{^Is_Jg:--BEH}', "");
Error('\p{Joining_Group: 	 yeh/a/WITH_Tail}');
Error('\P{Joining_Group: 	 yeh/a/WITH_Tail}');
Expect(1, 1741, '\p{Joining_Group=yehwithtail}', "");
Expect(0, 1741, '\p{^Joining_Group=yehwithtail}', "");
Expect(0, 1741, '\P{Joining_Group=yehwithtail}', "");
Expect(1, 1741, '\P{^Joining_Group=yehwithtail}', "");
Expect(0, 1740, '\p{Joining_Group=yehwithtail}', "");
Expect(1, 1740, '\p{^Joining_Group=yehwithtail}', "");
Expect(1, 1740, '\P{Joining_Group=yehwithtail}', "");
Expect(0, 1740, '\P{^Joining_Group=yehwithtail}', "");
Expect(1, 1741, '\p{Joining_Group=	_Yeh With_Tail}', "");
Expect(0, 1741, '\p{^Joining_Group=	_Yeh With_Tail}', "");
Expect(0, 1741, '\P{Joining_Group=	_Yeh With_Tail}', "");
Expect(1, 1741, '\P{^Joining_Group=	_Yeh With_Tail}', "");
Expect(0, 1740, '\p{Joining_Group=	_Yeh With_Tail}', "");
Expect(1, 1740, '\p{^Joining_Group=	_Yeh With_Tail}', "");
Expect(1, 1740, '\P{Joining_Group=	_Yeh With_Tail}', "");
Expect(0, 1740, '\P{^Joining_Group=	_Yeh With_Tail}', "");
Error('\p{Jg=_Yeh	With-tail:=}');
Error('\P{Jg=_Yeh	With-tail:=}');
Expect(1, 1741, '\p{Jg=yehwithtail}', "");
Expect(0, 1741, '\p{^Jg=yehwithtail}', "");
Expect(0, 1741, '\P{Jg=yehwithtail}', "");
Expect(1, 1741, '\P{^Jg=yehwithtail}', "");
Expect(0, 1740, '\p{Jg=yehwithtail}', "");
Expect(1, 1740, '\p{^Jg=yehwithtail}', "");
Expect(1, 1740, '\P{Jg=yehwithtail}', "");
Expect(0, 1740, '\P{^Jg=yehwithtail}', "");
Expect(1, 1741, '\p{Jg=  Yeh	WithTAIL}', "");
Expect(0, 1741, '\p{^Jg=  Yeh	WithTAIL}', "");
Expect(0, 1741, '\P{Jg=  Yeh	WithTAIL}', "");
Expect(1, 1741, '\P{^Jg=  Yeh	WithTAIL}', "");
Expect(0, 1740, '\p{Jg=  Yeh	WithTAIL}', "");
Expect(1, 1740, '\p{^Jg=  Yeh	WithTAIL}', "");
Expect(1, 1740, '\P{Jg=  Yeh	WithTAIL}', "");
Expect(0, 1740, '\P{^Jg=  Yeh	WithTAIL}', "");
Error('\p{Is_Joining_Group: 	:=Yeh-With Tail}');
Error('\P{Is_Joining_Group: 	:=Yeh-With Tail}');
Expect(1, 1741, '\p{Is_Joining_Group=yehwithtail}', "");
Expect(0, 1741, '\p{^Is_Joining_Group=yehwithtail}', "");
Expect(0, 1741, '\P{Is_Joining_Group=yehwithtail}', "");
Expect(1, 1741, '\P{^Is_Joining_Group=yehwithtail}', "");
Expect(0, 1740, '\p{Is_Joining_Group=yehwithtail}', "");
Expect(1, 1740, '\p{^Is_Joining_Group=yehwithtail}', "");
Expect(1, 1740, '\P{Is_Joining_Group=yehwithtail}', "");
Expect(0, 1740, '\P{^Is_Joining_Group=yehwithtail}', "");
Expect(1, 1741, '\p{Is_Joining_Group=-Yeh	WITHTail}', "");
Expect(0, 1741, '\p{^Is_Joining_Group=-Yeh	WITHTail}', "");
Expect(0, 1741, '\P{Is_Joining_Group=-Yeh	WITHTail}', "");
Expect(1, 1741, '\P{^Is_Joining_Group=-Yeh	WITHTail}', "");
Expect(0, 1740, '\p{Is_Joining_Group=-Yeh	WITHTail}', "");
Expect(1, 1740, '\p{^Is_Joining_Group=-Yeh	WITHTail}', "");
Expect(1, 1740, '\P{Is_Joining_Group=-Yeh	WITHTail}', "");
Expect(0, 1740, '\P{^Is_Joining_Group=-Yeh	WITHTail}', "");
Error('\p{Is_Jg=		Yeh:=WITH	TAIL}');
Error('\P{Is_Jg=		Yeh:=WITH	TAIL}');
Expect(1, 1741, '\p{Is_Jg:yehwithtail}', "");
Expect(0, 1741, '\p{^Is_Jg:yehwithtail}', "");
Expect(0, 1741, '\P{Is_Jg:yehwithtail}', "");
Expect(1, 1741, '\P{^Is_Jg:yehwithtail}', "");
Expect(0, 1740, '\p{Is_Jg:yehwithtail}', "");
Expect(1, 1740, '\p{^Is_Jg:yehwithtail}', "");
Expect(1, 1740, '\P{Is_Jg:yehwithtail}', "");
Expect(0, 1740, '\P{^Is_Jg:yehwithtail}', "");
Expect(1, 1741, '\p{Is_Jg= YEH-With_Tail}', "");
Expect(0, 1741, '\p{^Is_Jg= YEH-With_Tail}', "");
Expect(0, 1741, '\P{Is_Jg= YEH-With_Tail}', "");
Expect(1, 1741, '\P{^Is_Jg= YEH-With_Tail}', "");
Expect(0, 1740, '\p{Is_Jg= YEH-With_Tail}', "");
Expect(1, 1740, '\p{^Is_Jg= YEH-With_Tail}', "");
Expect(1, 1740, '\P{Is_Jg= YEH-With_Tail}', "");
Expect(0, 1740, '\P{^Is_Jg= YEH-With_Tail}', "");
Error('\p{Joining_Group=_/a/TAH}');
Error('\P{Joining_Group=_/a/TAH}');
Expect(1, 1592, '\p{Joining_Group=tah}', "");
Expect(0, 1592, '\p{^Joining_Group=tah}', "");
Expect(0, 1592, '\P{Joining_Group=tah}', "");
Expect(1, 1592, '\P{^Joining_Group=tah}', "");
Expect(0, 1590, '\p{Joining_Group=tah}', "");
Expect(1, 1590, '\p{^Joining_Group=tah}', "");
Expect(1, 1590, '\P{Joining_Group=tah}', "");
Expect(0, 1590, '\P{^Joining_Group=tah}', "");
Expect(1, 1592, '\p{Joining_Group=-_Tah}', "");
Expect(0, 1592, '\p{^Joining_Group=-_Tah}', "");
Expect(0, 1592, '\P{Joining_Group=-_Tah}', "");
Expect(1, 1592, '\P{^Joining_Group=-_Tah}', "");
Expect(0, 1590, '\p{Joining_Group=-_Tah}', "");
Expect(1, 1590, '\p{^Joining_Group=-_Tah}', "");
Expect(1, 1590, '\P{Joining_Group=-_Tah}', "");
Expect(0, 1590, '\P{^Joining_Group=-_Tah}', "");
Error('\p{Jg=	:=Tah}');
Error('\P{Jg=	:=Tah}');
Expect(1, 1592, '\p{Jg=tah}', "");
Expect(0, 1592, '\p{^Jg=tah}', "");
Expect(0, 1592, '\P{Jg=tah}', "");
Expect(1, 1592, '\P{^Jg=tah}', "");
Expect(0, 1590, '\p{Jg=tah}', "");
Expect(1, 1590, '\p{^Jg=tah}', "");
Expect(1, 1590, '\P{Jg=tah}', "");
Expect(0, 1590, '\P{^Jg=tah}', "");
Expect(1, 1592, '\p{Jg=	-TAH}', "");
Expect(0, 1592, '\p{^Jg=	-TAH}', "");
Expect(0, 1592, '\P{Jg=	-TAH}', "");
Expect(1, 1592, '\P{^Jg=	-TAH}', "");
Expect(0, 1590, '\p{Jg=	-TAH}', "");
Expect(1, 1590, '\p{^Jg=	-TAH}', "");
Expect(1, 1590, '\P{Jg=	-TAH}', "");
Expect(0, 1590, '\P{^Jg=	-TAH}', "");
Error('\p{Is_Joining_Group:    	TAH/a/}');
Error('\P{Is_Joining_Group:    	TAH/a/}');
Expect(1, 1592, '\p{Is_Joining_Group=tah}', "");
Expect(0, 1592, '\p{^Is_Joining_Group=tah}', "");
Expect(0, 1592, '\P{Is_Joining_Group=tah}', "");
Expect(1, 1592, '\P{^Is_Joining_Group=tah}', "");
Expect(0, 1590, '\p{Is_Joining_Group=tah}', "");
Expect(1, 1590, '\p{^Is_Joining_Group=tah}', "");
Expect(1, 1590, '\P{Is_Joining_Group=tah}', "");
Expect(0, 1590, '\P{^Is_Joining_Group=tah}', "");
Expect(1, 1592, '\p{Is_Joining_Group= 	tah}', "");
Expect(0, 1592, '\p{^Is_Joining_Group= 	tah}', "");
Expect(0, 1592, '\P{Is_Joining_Group= 	tah}', "");
Expect(1, 1592, '\P{^Is_Joining_Group= 	tah}', "");
Expect(0, 1590, '\p{Is_Joining_Group= 	tah}', "");
Expect(1, 1590, '\p{^Is_Joining_Group= 	tah}', "");
Expect(1, 1590, '\P{Is_Joining_Group= 	tah}', "");
Expect(0, 1590, '\P{^Is_Joining_Group= 	tah}', "");
Error('\p{Is_Jg:/a/Tah}');
Error('\P{Is_Jg:/a/Tah}');
Expect(1, 1592, '\p{Is_Jg=tah}', "");
Expect(0, 1592, '\p{^Is_Jg=tah}', "");
Expect(0, 1592, '\P{Is_Jg=tah}', "");
Expect(1, 1592, '\P{^Is_Jg=tah}', "");
Expect(0, 1590, '\p{Is_Jg=tah}', "");
Expect(1, 1590, '\p{^Is_Jg=tah}', "");
Expect(1, 1590, '\P{Is_Jg=tah}', "");
Expect(0, 1590, '\P{^Is_Jg=tah}', "");
Expect(1, 1592, '\p{Is_Jg= 	Tah}', "");
Expect(0, 1592, '\p{^Is_Jg= 	Tah}', "");
Expect(0, 1592, '\P{Is_Jg= 	Tah}', "");
Expect(1, 1592, '\P{^Is_Jg= 	Tah}', "");
Expect(0, 1590, '\p{Is_Jg= 	Tah}', "");
Expect(1, 1590, '\p{^Is_Jg= 	Tah}', "");
Expect(1, 1590, '\P{Is_Jg= 	Tah}', "");
Expect(0, 1590, '\P{^Is_Jg= 	Tah}', "");
Error('\p{Joining_Group=:=	Zhain}');
Error('\P{Joining_Group=:=	Zhain}');
Expect(1, 1869, '\p{Joining_Group=zhain}', "");
Expect(0, 1869, '\p{^Joining_Group=zhain}', "");
Expect(0, 1869, '\P{Joining_Group=zhain}', "");
Expect(1, 1869, '\P{^Joining_Group=zhain}', "");
Expect(0, 1868, '\p{Joining_Group=zhain}', "");
Expect(1, 1868, '\p{^Joining_Group=zhain}', "");
Expect(1, 1868, '\P{Joining_Group=zhain}', "");
Expect(0, 1868, '\P{^Joining_Group=zhain}', "");
Expect(1, 1869, '\p{Joining_Group= ZHAIN}', "");
Expect(0, 1869, '\p{^Joining_Group= ZHAIN}', "");
Expect(0, 1869, '\P{Joining_Group= ZHAIN}', "");
Expect(1, 1869, '\P{^Joining_Group= ZHAIN}', "");
Expect(0, 1868, '\p{Joining_Group= ZHAIN}', "");
Expect(1, 1868, '\p{^Joining_Group= ZHAIN}', "");
Expect(1, 1868, '\P{Joining_Group= ZHAIN}', "");
Expect(0, 1868, '\P{^Joining_Group= ZHAIN}', "");
Error('\p{Jg=	_Zhain:=}');
Error('\P{Jg=	_Zhain:=}');
Expect(1, 1869, '\p{Jg=zhain}', "");
Expect(0, 1869, '\p{^Jg=zhain}', "");
Expect(0, 1869, '\P{Jg=zhain}', "");
Expect(1, 1869, '\P{^Jg=zhain}', "");
Expect(0, 1868, '\p{Jg=zhain}', "");
Expect(1, 1868, '\p{^Jg=zhain}', "");
Expect(1, 1868, '\P{Jg=zhain}', "");
Expect(0, 1868, '\P{^Jg=zhain}', "");
Expect(1, 1869, '\p{Jg=_-ZHAIN}', "");
Expect(0, 1869, '\p{^Jg=_-ZHAIN}', "");
Expect(0, 1869, '\P{Jg=_-ZHAIN}', "");
Expect(1, 1869, '\P{^Jg=_-ZHAIN}', "");
Expect(0, 1868, '\p{Jg=_-ZHAIN}', "");
Expect(1, 1868, '\p{^Jg=_-ZHAIN}', "");
Expect(1, 1868, '\P{Jg=_-ZHAIN}', "");
Expect(0, 1868, '\P{^Jg=_-ZHAIN}', "");
Error('\p{Is_Joining_Group= zhain/a/}');
Error('\P{Is_Joining_Group= zhain/a/}');
Expect(1, 1869, '\p{Is_Joining_Group=zhain}', "");
Expect(0, 1869, '\p{^Is_Joining_Group=zhain}', "");
Expect(0, 1869, '\P{Is_Joining_Group=zhain}', "");
Expect(1, 1869, '\P{^Is_Joining_Group=zhain}', "");
Expect(0, 1868, '\p{Is_Joining_Group=zhain}', "");
Expect(1, 1868, '\p{^Is_Joining_Group=zhain}', "");
Expect(1, 1868, '\P{Is_Joining_Group=zhain}', "");
Expect(0, 1868, '\P{^Is_Joining_Group=zhain}', "");
Expect(1, 1869, '\p{Is_Joining_Group= Zhain}', "");
Expect(0, 1869, '\p{^Is_Joining_Group= Zhain}', "");
Expect(0, 1869, '\P{Is_Joining_Group= Zhain}', "");
Expect(1, 1869, '\P{^Is_Joining_Group= Zhain}', "");
Expect(0, 1868, '\p{Is_Joining_Group= Zhain}', "");
Expect(1, 1868, '\p{^Is_Joining_Group= Zhain}', "");
Expect(1, 1868, '\P{Is_Joining_Group= Zhain}', "");
Expect(0, 1868, '\P{^Is_Joining_Group= Zhain}', "");
Error('\p{Is_Jg=-	Zhain/a/}');
Error('\P{Is_Jg=-	Zhain/a/}');
Expect(1, 1869, '\p{Is_Jg=zhain}', "");
Expect(0, 1869, '\p{^Is_Jg=zhain}', "");
Expect(0, 1869, '\P{Is_Jg=zhain}', "");
Expect(1, 1869, '\P{^Is_Jg=zhain}', "");
Expect(0, 1868, '\p{Is_Jg=zhain}', "");
Expect(1, 1868, '\p{^Is_Jg=zhain}', "");
Expect(1, 1868, '\P{Is_Jg=zhain}', "");
Expect(0, 1868, '\P{^Is_Jg=zhain}', "");
Expect(1, 1869, '\p{Is_Jg=-ZHAIN}', "");
Expect(0, 1869, '\p{^Is_Jg=-ZHAIN}', "");
Expect(0, 1869, '\P{Is_Jg=-ZHAIN}', "");
Expect(1, 1869, '\P{^Is_Jg=-ZHAIN}', "");
Expect(0, 1868, '\p{Is_Jg=-ZHAIN}', "");
Expect(1, 1868, '\p{^Is_Jg=-ZHAIN}', "");
Expect(1, 1868, '\P{Is_Jg=-ZHAIN}', "");
Expect(0, 1868, '\P{^Is_Jg=-ZHAIN}', "");
Error('\p{Joining_Group=/a/ Pe}');
Error('\P{Joining_Group=/a/ Pe}');
Expect(1, 1830, '\p{Joining_Group=pe}', "");
Expect(0, 1830, '\p{^Joining_Group=pe}', "");
Expect(0, 1830, '\P{Joining_Group=pe}', "");
Expect(1, 1830, '\P{^Joining_Group=pe}', "");
Expect(0, 1829, '\p{Joining_Group=pe}', "");
Expect(1, 1829, '\p{^Joining_Group=pe}', "");
Expect(1, 1829, '\P{Joining_Group=pe}', "");
Expect(0, 1829, '\P{^Joining_Group=pe}', "");
Expect(1, 1830, '\p{Joining_Group=_-pe}', "");
Expect(0, 1830, '\p{^Joining_Group=_-pe}', "");
Expect(0, 1830, '\P{Joining_Group=_-pe}', "");
Expect(1, 1830, '\P{^Joining_Group=_-pe}', "");
Expect(0, 1829, '\p{Joining_Group=_-pe}', "");
Expect(1, 1829, '\p{^Joining_Group=_-pe}', "");
Expect(1, 1829, '\P{Joining_Group=_-pe}', "");
Expect(0, 1829, '\P{^Joining_Group=_-pe}', "");
Error('\p{Jg=-:=PE}');
Error('\P{Jg=-:=PE}');
Expect(1, 1830, '\p{Jg=pe}', "");
Expect(0, 1830, '\p{^Jg=pe}', "");
Expect(0, 1830, '\P{Jg=pe}', "");
Expect(1, 1830, '\P{^Jg=pe}', "");
Expect(0, 1829, '\p{Jg=pe}', "");
Expect(1, 1829, '\p{^Jg=pe}', "");
Expect(1, 1829, '\P{Jg=pe}', "");
Expect(0, 1829, '\P{^Jg=pe}', "");
Expect(1, 1830, '\p{Jg=_Pe}', "");
Expect(0, 1830, '\p{^Jg=_Pe}', "");
Expect(0, 1830, '\P{Jg=_Pe}', "");
Expect(1, 1830, '\P{^Jg=_Pe}', "");
Expect(0, 1829, '\p{Jg=_Pe}', "");
Expect(1, 1829, '\p{^Jg=_Pe}', "");
Expect(1, 1829, '\P{Jg=_Pe}', "");
Expect(0, 1829, '\P{^Jg=_Pe}', "");
Error('\p{Is_Joining_Group=-Pe/a/}');
Error('\P{Is_Joining_Group=-Pe/a/}');
Expect(1, 1830, '\p{Is_Joining_Group=pe}', "");
Expect(0, 1830, '\p{^Is_Joining_Group=pe}', "");
Expect(0, 1830, '\P{Is_Joining_Group=pe}', "");
Expect(1, 1830, '\P{^Is_Joining_Group=pe}', "");
Expect(0, 1829, '\p{Is_Joining_Group=pe}', "");
Expect(1, 1829, '\p{^Is_Joining_Group=pe}', "");
Expect(1, 1829, '\P{Is_Joining_Group=pe}', "");
Expect(0, 1829, '\P{^Is_Joining_Group=pe}', "");
Expect(1, 1830, '\p{Is_Joining_Group=-pe}', "");
Expect(0, 1830, '\p{^Is_Joining_Group=-pe}', "");
Expect(0, 1830, '\P{Is_Joining_Group=-pe}', "");
Expect(1, 1830, '\P{^Is_Joining_Group=-pe}', "");
Expect(0, 1829, '\p{Is_Joining_Group=-pe}', "");
Expect(1, 1829, '\p{^Is_Joining_Group=-pe}', "");
Expect(1, 1829, '\P{Is_Joining_Group=-pe}', "");
Expect(0, 1829, '\P{^Is_Joining_Group=-pe}', "");
Error('\p{Is_Jg:   :=Pe}');
Error('\P{Is_Jg:   :=Pe}');
Expect(1, 1830, '\p{Is_Jg=pe}', "");
Expect(0, 1830, '\p{^Is_Jg=pe}', "");
Expect(0, 1830, '\P{Is_Jg=pe}', "");
Expect(1, 1830, '\P{^Is_Jg=pe}', "");
Expect(0, 1829, '\p{Is_Jg=pe}', "");
Expect(1, 1829, '\p{^Is_Jg=pe}', "");
Expect(1, 1829, '\P{Is_Jg=pe}', "");
Expect(0, 1829, '\P{^Is_Jg=pe}', "");
Expect(1, 1830, '\p{Is_Jg= Pe}', "");
Expect(0, 1830, '\p{^Is_Jg= Pe}', "");
Expect(0, 1830, '\P{Is_Jg= Pe}', "");
Expect(1, 1830, '\P{^Is_Jg= Pe}', "");
Expect(0, 1829, '\p{Is_Jg= Pe}', "");
Expect(1, 1829, '\p{^Is_Jg= Pe}', "");
Expect(1, 1829, '\P{Is_Jg= Pe}', "");
Expect(0, 1829, '\P{^Is_Jg= Pe}', "");
Error('\p{Joining_Group: :=Gaf}');
Error('\P{Joining_Group: :=Gaf}');
Expect(1, 1596, '\p{Joining_Group=gaf}', "");
Expect(0, 1596, '\p{^Joining_Group=gaf}', "");
Expect(0, 1596, '\P{Joining_Group=gaf}', "");
Expect(1, 1596, '\P{^Joining_Group=gaf}', "");
Expect(0, 1594, '\p{Joining_Group=gaf}', "");
Expect(1, 1594, '\p{^Joining_Group=gaf}', "");
Expect(1, 1594, '\P{Joining_Group=gaf}', "");
Expect(0, 1594, '\P{^Joining_Group=gaf}', "");
Expect(1, 1596, '\p{Joining_Group=__gaf}', "");
Expect(0, 1596, '\p{^Joining_Group=__gaf}', "");
Expect(0, 1596, '\P{Joining_Group=__gaf}', "");
Expect(1, 1596, '\P{^Joining_Group=__gaf}', "");
Expect(0, 1594, '\p{Joining_Group=__gaf}', "");
Expect(1, 1594, '\p{^Joining_Group=__gaf}', "");
Expect(1, 1594, '\P{Joining_Group=__gaf}', "");
Expect(0, 1594, '\P{^Joining_Group=__gaf}', "");
Error('\p{Jg=		Gaf/a/}');
Error('\P{Jg=		Gaf/a/}');
Expect(1, 1596, '\p{Jg=gaf}', "");
Expect(0, 1596, '\p{^Jg=gaf}', "");
Expect(0, 1596, '\P{Jg=gaf}', "");
Expect(1, 1596, '\P{^Jg=gaf}', "");
Expect(0, 1594, '\p{Jg=gaf}', "");
Expect(1, 1594, '\p{^Jg=gaf}', "");
Expect(1, 1594, '\P{Jg=gaf}', "");
Expect(0, 1594, '\P{^Jg=gaf}', "");
Expect(1, 1596, '\p{Jg:_-Gaf}', "");
Expect(0, 1596, '\p{^Jg:_-Gaf}', "");
Expect(0, 1596, '\P{Jg:_-Gaf}', "");
Expect(1, 1596, '\P{^Jg:_-Gaf}', "");
Expect(0, 1594, '\p{Jg:_-Gaf}', "");
Expect(1, 1594, '\p{^Jg:_-Gaf}', "");
Expect(1, 1594, '\P{Jg:_-Gaf}', "");
Expect(0, 1594, '\P{^Jg:_-Gaf}', "");
Error('\p{Is_Joining_Group=:=	 GAF}');
Error('\P{Is_Joining_Group=:=	 GAF}');
Expect(1, 1596, '\p{Is_Joining_Group=gaf}', "");
Expect(0, 1596, '\p{^Is_Joining_Group=gaf}', "");
Expect(0, 1596, '\P{Is_Joining_Group=gaf}', "");
Expect(1, 1596, '\P{^Is_Joining_Group=gaf}', "");
Expect(0, 1594, '\p{Is_Joining_Group=gaf}', "");
Expect(1, 1594, '\p{^Is_Joining_Group=gaf}', "");
Expect(1, 1594, '\P{Is_Joining_Group=gaf}', "");
Expect(0, 1594, '\P{^Is_Joining_Group=gaf}', "");
Expect(1, 1596, '\p{Is_Joining_Group=_ Gaf}', "");
Expect(0, 1596, '\p{^Is_Joining_Group=_ Gaf}', "");
Expect(0, 1596, '\P{Is_Joining_Group=_ Gaf}', "");
Expect(1, 1596, '\P{^Is_Joining_Group=_ Gaf}', "");
Expect(0, 1594, '\p{Is_Joining_Group=_ Gaf}', "");
Expect(1, 1594, '\p{^Is_Joining_Group=_ Gaf}', "");
Expect(1, 1594, '\P{Is_Joining_Group=_ Gaf}', "");
Expect(0, 1594, '\P{^Is_Joining_Group=_ Gaf}', "");
Error('\p{Is_Jg=	gaf/a/}');
Error('\P{Is_Jg=	gaf/a/}');
Expect(1, 1596, '\p{Is_Jg=gaf}', "");
Expect(0, 1596, '\p{^Is_Jg=gaf}', "");
Expect(0, 1596, '\P{Is_Jg=gaf}', "");
Expect(1, 1596, '\P{^Is_Jg=gaf}', "");
Expect(0, 1594, '\p{Is_Jg=gaf}', "");
Expect(1, 1594, '\p{^Is_Jg=gaf}', "");
Expect(1, 1594, '\P{Is_Jg=gaf}', "");
Expect(0, 1594, '\P{^Is_Jg=gaf}', "");
Expect(1, 1596, '\p{Is_Jg=-gaf}', "");
Expect(0, 1596, '\p{^Is_Jg=-gaf}', "");
Expect(0, 1596, '\P{Is_Jg=-gaf}', "");
Expect(1, 1596, '\P{^Is_Jg=-gaf}', "");
Expect(0, 1594, '\p{Is_Jg=-gaf}', "");
Expect(1, 1594, '\p{^Is_Jg=-gaf}', "");
Expect(1, 1594, '\P{Is_Jg=-gaf}', "");
Expect(0, 1594, '\P{^Is_Jg=-gaf}', "");
Error('\p{Joining_Group=/a/-	Waw}');
Error('\P{Joining_Group=/a/-	Waw}');
Expect(1, 1572, '\p{Joining_Group=waw}', "");
Expect(0, 1572, '\p{^Joining_Group=waw}', "");
Expect(0, 1572, '\P{Joining_Group=waw}', "");
Expect(1, 1572, '\P{^Joining_Group=waw}', "");
Expect(0, 1571, '\p{Joining_Group=waw}', "");
Expect(1, 1571, '\p{^Joining_Group=waw}', "");
Expect(1, 1571, '\P{Joining_Group=waw}', "");
Expect(0, 1571, '\P{^Joining_Group=waw}', "");
Expect(1, 1572, '\p{Joining_Group=	Waw}', "");
Expect(0, 1572, '\p{^Joining_Group=	Waw}', "");
Expect(0, 1572, '\P{Joining_Group=	Waw}', "");
Expect(1, 1572, '\P{^Joining_Group=	Waw}', "");
Expect(0, 1571, '\p{Joining_Group=	Waw}', "");
Expect(1, 1571, '\p{^Joining_Group=	Waw}', "");
Expect(1, 1571, '\P{Joining_Group=	Waw}', "");
Expect(0, 1571, '\P{^Joining_Group=	Waw}', "");
Error('\p{Jg=/a/waw}');
Error('\P{Jg=/a/waw}');
Expect(1, 1572, '\p{Jg=waw}', "");
Expect(0, 1572, '\p{^Jg=waw}', "");
Expect(0, 1572, '\P{Jg=waw}', "");
Expect(1, 1572, '\P{^Jg=waw}', "");
Expect(0, 1571, '\p{Jg=waw}', "");
Expect(1, 1571, '\p{^Jg=waw}', "");
Expect(1, 1571, '\P{Jg=waw}', "");
Expect(0, 1571, '\P{^Jg=waw}', "");
Expect(1, 1572, '\p{Jg= _WAW}', "");
Expect(0, 1572, '\p{^Jg= _WAW}', "");
Expect(0, 1572, '\P{Jg= _WAW}', "");
Expect(1, 1572, '\P{^Jg= _WAW}', "");
Expect(0, 1571, '\p{Jg= _WAW}', "");
Expect(1, 1571, '\p{^Jg= _WAW}', "");
Expect(1, 1571, '\P{Jg= _WAW}', "");
Expect(0, 1571, '\P{^Jg= _WAW}', "");
Error('\p{Is_Joining_Group=:=_WAW}');
Error('\P{Is_Joining_Group=:=_WAW}');
Expect(1, 1572, '\p{Is_Joining_Group=waw}', "");
Expect(0, 1572, '\p{^Is_Joining_Group=waw}', "");
Expect(0, 1572, '\P{Is_Joining_Group=waw}', "");
Expect(1, 1572, '\P{^Is_Joining_Group=waw}', "");
Expect(0, 1571, '\p{Is_Joining_Group=waw}', "");
Expect(1, 1571, '\p{^Is_Joining_Group=waw}', "");
Expect(1, 1571, '\P{Is_Joining_Group=waw}', "");
Expect(0, 1571, '\P{^Is_Joining_Group=waw}', "");
Expect(1, 1572, '\p{Is_Joining_Group= WAW}', "");
Expect(0, 1572, '\p{^Is_Joining_Group= WAW}', "");
Expect(0, 1572, '\P{Is_Joining_Group= WAW}', "");
Expect(1, 1572, '\P{^Is_Joining_Group= WAW}', "");
Expect(0, 1571, '\p{Is_Joining_Group= WAW}', "");
Expect(1, 1571, '\p{^Is_Joining_Group= WAW}', "");
Expect(1, 1571, '\P{Is_Joining_Group= WAW}', "");
Expect(0, 1571, '\P{^Is_Joining_Group= WAW}', "");
Error('\p{Is_Jg=:=	Waw}');
Error('\P{Is_Jg=:=	Waw}');
Expect(1, 1572, '\p{Is_Jg=waw}', "");
Expect(0, 1572, '\p{^Is_Jg=waw}', "");
Expect(0, 1572, '\P{Is_Jg=waw}', "");
Expect(1, 1572, '\P{^Is_Jg=waw}', "");
Expect(0, 1571, '\p{Is_Jg=waw}', "");
Expect(1, 1571, '\p{^Is_Jg=waw}', "");
Expect(1, 1571, '\P{Is_Jg=waw}', "");
Expect(0, 1571, '\P{^Is_Jg=waw}', "");
Expect(1, 1572, '\p{Is_Jg=	waw}', "");
Expect(0, 1572, '\p{^Is_Jg=	waw}', "");
Expect(0, 1572, '\P{Is_Jg=	waw}', "");
Expect(1, 1572, '\P{^Is_Jg=	waw}', "");
Expect(0, 1571, '\p{Is_Jg=	waw}', "");
Expect(1, 1571, '\p{^Is_Jg=	waw}', "");
Expect(1, 1571, '\P{Is_Jg=	waw}', "");
Expect(0, 1571, '\P{^Is_Jg=	waw}', "");
Error('\p{Joining_Group=	 Yudh/a/}');
Error('\P{Joining_Group=	 Yudh/a/}');
Expect(1, 1821, '\p{Joining_Group:	yudh}', "");
Expect(0, 1821, '\p{^Joining_Group:	yudh}', "");
Expect(0, 1821, '\P{Joining_Group:	yudh}', "");
Expect(1, 1821, '\P{^Joining_Group:	yudh}', "");
Expect(0, 1820, '\p{Joining_Group:	yudh}', "");
Expect(1, 1820, '\p{^Joining_Group:	yudh}', "");
Expect(1, 1820, '\P{Joining_Group:	yudh}', "");
Expect(0, 1820, '\P{^Joining_Group:	yudh}', "");
Expect(1, 1821, '\p{Joining_Group=	Yudh}', "");
Expect(0, 1821, '\p{^Joining_Group=	Yudh}', "");
Expect(0, 1821, '\P{Joining_Group=	Yudh}', "");
Expect(1, 1821, '\P{^Joining_Group=	Yudh}', "");
Expect(0, 1820, '\p{Joining_Group=	Yudh}', "");
Expect(1, 1820, '\p{^Joining_Group=	Yudh}', "");
Expect(1, 1820, '\P{Joining_Group=	Yudh}', "");
Expect(0, 1820, '\P{^Joining_Group=	Yudh}', "");
Error('\p{Jg=/a/YUDH}');
Error('\P{Jg=/a/YUDH}');
Expect(1, 1821, '\p{Jg=yudh}', "");
Expect(0, 1821, '\p{^Jg=yudh}', "");
Expect(0, 1821, '\P{Jg=yudh}', "");
Expect(1, 1821, '\P{^Jg=yudh}', "");
Expect(0, 1820, '\p{Jg=yudh}', "");
Expect(1, 1820, '\p{^Jg=yudh}', "");
Expect(1, 1820, '\P{Jg=yudh}', "");
Expect(0, 1820, '\P{^Jg=yudh}', "");
Expect(1, 1821, '\p{Jg=__Yudh}', "");
Expect(0, 1821, '\p{^Jg=__Yudh}', "");
Expect(0, 1821, '\P{Jg=__Yudh}', "");
Expect(1, 1821, '\P{^Jg=__Yudh}', "");
Expect(0, 1820, '\p{Jg=__Yudh}', "");
Expect(1, 1820, '\p{^Jg=__Yudh}', "");
Expect(1, 1820, '\P{Jg=__Yudh}', "");
Expect(0, 1820, '\P{^Jg=__Yudh}', "");
Error('\p{Is_Joining_Group=_:=Yudh}');
Error('\P{Is_Joining_Group=_:=Yudh}');
Expect(1, 1821, '\p{Is_Joining_Group=yudh}', "");
Expect(0, 1821, '\p{^Is_Joining_Group=yudh}', "");
Expect(0, 1821, '\P{Is_Joining_Group=yudh}', "");
Expect(1, 1821, '\P{^Is_Joining_Group=yudh}', "");
Expect(0, 1820, '\p{Is_Joining_Group=yudh}', "");
Expect(1, 1820, '\p{^Is_Joining_Group=yudh}', "");
Expect(1, 1820, '\P{Is_Joining_Group=yudh}', "");
Expect(0, 1820, '\P{^Is_Joining_Group=yudh}', "");
Expect(1, 1821, '\p{Is_Joining_Group=  YUDH}', "");
Expect(0, 1821, '\p{^Is_Joining_Group=  YUDH}', "");
Expect(0, 1821, '\P{Is_Joining_Group=  YUDH}', "");
Expect(1, 1821, '\P{^Is_Joining_Group=  YUDH}', "");
Expect(0, 1820, '\p{Is_Joining_Group=  YUDH}', "");
Expect(1, 1820, '\p{^Is_Joining_Group=  YUDH}', "");
Expect(1, 1820, '\P{Is_Joining_Group=  YUDH}', "");
Expect(0, 1820, '\P{^Is_Joining_Group=  YUDH}', "");
Error('\p{Is_Jg:   /a/-	YUDH}');
Error('\P{Is_Jg:   /a/-	YUDH}');
Expect(1, 1821, '\p{Is_Jg=yudh}', "");
Expect(0, 1821, '\p{^Is_Jg=yudh}', "");
Expect(0, 1821, '\P{Is_Jg=yudh}', "");
Expect(1, 1821, '\P{^Is_Jg=yudh}', "");
Expect(0, 1820, '\p{Is_Jg=yudh}', "");
Expect(1, 1820, '\p{^Is_Jg=yudh}', "");
Expect(1, 1820, '\P{Is_Jg=yudh}', "");
Expect(0, 1820, '\P{^Is_Jg=yudh}', "");
Expect(1, 1821, '\p{Is_Jg=_	YUDH}', "");
Expect(0, 1821, '\p{^Is_Jg=_	YUDH}', "");
Expect(0, 1821, '\P{Is_Jg=_	YUDH}', "");
Expect(1, 1821, '\P{^Is_Jg=_	YUDH}', "");
Expect(0, 1820, '\p{Is_Jg=_	YUDH}', "");
Expect(1, 1820, '\p{^Is_Jg=_	YUDH}', "");
Expect(1, 1820, '\P{Is_Jg=_	YUDH}', "");
Expect(0, 1820, '\P{^Is_Jg=_	YUDH}', "");
Error('\p{Pattern_White_Space=:=	_yes}');
Error('\P{Pattern_White_Space=:=	_yes}');
Expect(1, 13, '\p{Pattern_White_Space=yes}', "");
Expect(0, 13, '\p{^Pattern_White_Space=yes}', "");
Expect(0, 13, '\P{Pattern_White_Space=yes}', "");
Expect(1, 13, '\P{^Pattern_White_Space=yes}', "");
Expect(0, 8, '\p{Pattern_White_Space=yes}', "");
Expect(1, 8, '\p{^Pattern_White_Space=yes}', "");
Expect(1, 8, '\P{Pattern_White_Space=yes}', "");
Expect(0, 8, '\P{^Pattern_White_Space=yes}', "");
Expect(1, 13, '\p{Pattern_White_Space=	-Yes}', "");
Expect(0, 13, '\p{^Pattern_White_Space=	-Yes}', "");
Expect(0, 13, '\P{Pattern_White_Space=	-Yes}', "");
Expect(1, 13, '\P{^Pattern_White_Space=	-Yes}', "");
Expect(0, 8, '\p{Pattern_White_Space=	-Yes}', "");
Expect(1, 8, '\p{^Pattern_White_Space=	-Yes}', "");
Expect(1, 8, '\P{Pattern_White_Space=	-Yes}', "");
Expect(0, 8, '\P{^Pattern_White_Space=	-Yes}', "");
Error('\p{Pat_WS:	 /a/Y}');
Error('\P{Pat_WS:	 /a/Y}');
Expect(1, 13, '\p{Pat_WS=y}', "");
Expect(0, 13, '\p{^Pat_WS=y}', "");
Expect(0, 13, '\P{Pat_WS=y}', "");
Expect(1, 13, '\P{^Pat_WS=y}', "");
Expect(0, 8, '\p{Pat_WS=y}', "");
Expect(1, 8, '\p{^Pat_WS=y}', "");
Expect(1, 8, '\P{Pat_WS=y}', "");
Expect(0, 8, '\P{^Pat_WS=y}', "");
Expect(1, 13, '\p{Pat_WS=  y}', "");
Expect(0, 13, '\p{^Pat_WS=  y}', "");
Expect(0, 13, '\P{Pat_WS=  y}', "");
Expect(1, 13, '\P{^Pat_WS=  y}', "");
Expect(0, 8, '\p{Pat_WS=  y}', "");
Expect(1, 8, '\p{^Pat_WS=  y}', "");
Expect(1, 8, '\P{Pat_WS=  y}', "");
Expect(0, 8, '\P{^Pat_WS=  y}', "");
Error('\p{Is_Pattern_White_Space=	 t:=}');
Error('\P{Is_Pattern_White_Space=	 t:=}');
Expect(1, 13, '\p{Is_Pattern_White_Space=t}', "");
Expect(0, 13, '\p{^Is_Pattern_White_Space=t}', "");
Expect(0, 13, '\P{Is_Pattern_White_Space=t}', "");
Expect(1, 13, '\P{^Is_Pattern_White_Space=t}', "");
Expect(0, 8, '\p{Is_Pattern_White_Space=t}', "");
Expect(1, 8, '\p{^Is_Pattern_White_Space=t}', "");
Expect(1, 8, '\P{Is_Pattern_White_Space=t}', "");
Expect(0, 8, '\P{^Is_Pattern_White_Space=t}', "");
Expect(1, 13, '\p{Is_Pattern_White_Space=		T}', "");
Expect(0, 13, '\p{^Is_Pattern_White_Space=		T}', "");
Expect(0, 13, '\P{Is_Pattern_White_Space=		T}', "");
Expect(1, 13, '\P{^Is_Pattern_White_Space=		T}', "");
Expect(0, 8, '\p{Is_Pattern_White_Space=		T}', "");
Expect(1, 8, '\p{^Is_Pattern_White_Space=		T}', "");
Expect(1, 8, '\P{Is_Pattern_White_Space=		T}', "");
Expect(0, 8, '\P{^Is_Pattern_White_Space=		T}', "");
Error('\p{Is_Pat_WS=/a/ true}');
Error('\P{Is_Pat_WS=/a/ true}');
Expect(1, 13, '\p{Is_Pat_WS=true}', "");
Expect(0, 13, '\p{^Is_Pat_WS=true}', "");
Expect(0, 13, '\P{Is_Pat_WS=true}', "");
Expect(1, 13, '\P{^Is_Pat_WS=true}', "");
Expect(0, 8, '\p{Is_Pat_WS=true}', "");
Expect(1, 8, '\p{^Is_Pat_WS=true}', "");
Expect(1, 8, '\P{Is_Pat_WS=true}', "");
Expect(0, 8, '\P{^Is_Pat_WS=true}', "");
Expect(1, 13, '\p{Is_Pat_WS= true}', "");
Expect(0, 13, '\p{^Is_Pat_WS= true}', "");
Expect(0, 13, '\P{Is_Pat_WS= true}', "");
Expect(1, 13, '\P{^Is_Pat_WS= true}', "");
Expect(0, 8, '\p{Is_Pat_WS= true}', "");
Expect(1, 8, '\p{^Is_Pat_WS= true}', "");
Expect(1, 8, '\P{Is_Pat_WS= true}', "");
Expect(0, 8, '\P{^Is_Pat_WS= true}', "");
Error('\p{Pattern_White_Space=-/a/No}');
Error('\P{Pattern_White_Space=-/a/No}');
Expect(1, 8, '\p{Pattern_White_Space=no}', "");
Expect(0, 8, '\p{^Pattern_White_Space=no}', "");
Expect(0, 8, '\P{Pattern_White_Space=no}', "");
Expect(1, 8, '\P{^Pattern_White_Space=no}', "");
Expect(0, 13, '\p{Pattern_White_Space=no}', "");
Expect(1, 13, '\p{^Pattern_White_Space=no}', "");
Expect(1, 13, '\P{Pattern_White_Space=no}', "");
Expect(0, 13, '\P{^Pattern_White_Space=no}', "");
Expect(1, 8, '\p{Pattern_White_Space= -no}', "");
Expect(0, 8, '\p{^Pattern_White_Space= -no}', "");
Expect(0, 8, '\P{Pattern_White_Space= -no}', "");
Expect(1, 8, '\P{^Pattern_White_Space= -no}', "");
Expect(0, 13, '\p{Pattern_White_Space= -no}', "");
Expect(1, 13, '\p{^Pattern_White_Space= -no}', "");
Expect(1, 13, '\P{Pattern_White_Space= -no}', "");
Expect(0, 13, '\P{^Pattern_White_Space= -no}', "");
Error('\p{Pat_WS: 	:=N}');
Error('\P{Pat_WS: 	:=N}');
Expect(1, 8, '\p{Pat_WS:   n}', "");
Expect(0, 8, '\p{^Pat_WS:   n}', "");
Expect(0, 8, '\P{Pat_WS:   n}', "");
Expect(1, 8, '\P{^Pat_WS:   n}', "");
Expect(0, 13, '\p{Pat_WS:   n}', "");
Expect(1, 13, '\p{^Pat_WS:   n}', "");
Expect(1, 13, '\P{Pat_WS:   n}', "");
Expect(0, 13, '\P{^Pat_WS:   n}', "");
Expect(1, 8, '\p{Pat_WS=_N}', "");
Expect(0, 8, '\p{^Pat_WS=_N}', "");
Expect(0, 8, '\P{Pat_WS=_N}', "");
Expect(1, 8, '\P{^Pat_WS=_N}', "");
Expect(0, 13, '\p{Pat_WS=_N}', "");
Expect(1, 13, '\p{^Pat_WS=_N}', "");
Expect(1, 13, '\P{Pat_WS=_N}', "");
Expect(0, 13, '\P{^Pat_WS=_N}', "");
Error('\p{Is_Pattern_White_Space=/a/F}');
Error('\P{Is_Pattern_White_Space=/a/F}');
Expect(1, 8, '\p{Is_Pattern_White_Space=f}', "");
Expect(0, 8, '\p{^Is_Pattern_White_Space=f}', "");
Expect(0, 8, '\P{Is_Pattern_White_Space=f}', "");
Expect(1, 8, '\P{^Is_Pattern_White_Space=f}', "");
Expect(0, 13, '\p{Is_Pattern_White_Space=f}', "");
Expect(1, 13, '\p{^Is_Pattern_White_Space=f}', "");
Expect(1, 13, '\P{Is_Pattern_White_Space=f}', "");
Expect(0, 13, '\P{^Is_Pattern_White_Space=f}', "");
Expect(1, 8, '\p{Is_Pattern_White_Space=--F}', "");
Expect(0, 8, '\p{^Is_Pattern_White_Space=--F}', "");
Expect(0, 8, '\P{Is_Pattern_White_Space=--F}', "");
Expect(1, 8, '\P{^Is_Pattern_White_Space=--F}', "");
Expect(0, 13, '\p{Is_Pattern_White_Space=--F}', "");
Expect(1, 13, '\p{^Is_Pattern_White_Space=--F}', "");
Expect(1, 13, '\P{Is_Pattern_White_Space=--F}', "");
Expect(0, 13, '\P{^Is_Pattern_White_Space=--F}', "");
Error('\p{Is_Pat_WS=:=		False}');
Error('\P{Is_Pat_WS=:=		False}');
Expect(1, 8, '\p{Is_Pat_WS=false}', "");
Expect(0, 8, '\p{^Is_Pat_WS=false}', "");
Expect(0, 8, '\P{Is_Pat_WS=false}', "");
Expect(1, 8, '\P{^Is_Pat_WS=false}', "");
Expect(0, 13, '\p{Is_Pat_WS=false}', "");
Expect(1, 13, '\p{^Is_Pat_WS=false}', "");
Expect(1, 13, '\P{Is_Pat_WS=false}', "");
Expect(0, 13, '\P{^Is_Pat_WS=false}', "");
Expect(1, 8, '\p{Is_Pat_WS=-False}', "");
Expect(0, 8, '\p{^Is_Pat_WS=-False}', "");
Expect(0, 8, '\P{Is_Pat_WS=-False}', "");
Expect(1, 8, '\P{^Is_Pat_WS=-False}', "");
Expect(0, 13, '\p{Is_Pat_WS=-False}', "");
Expect(1, 13, '\p{^Is_Pat_WS=-False}', "");
Expect(1, 13, '\P{Is_Pat_WS=-False}', "");
Expect(0, 13, '\P{^Is_Pat_WS=-False}', "");
Error('\p{Join_Control=-	YES:=}');
Error('\P{Join_Control=-	YES:=}');
Expect(1, 8205, '\p{Join_Control=yes}', "");
Expect(0, 8205, '\p{^Join_Control=yes}', "");
Expect(0, 8205, '\P{Join_Control=yes}', "");
Expect(1, 8205, '\P{^Join_Control=yes}', "");
Expect(0, 8203, '\p{Join_Control=yes}', "");
Expect(1, 8203, '\p{^Join_Control=yes}', "");
Expect(1, 8203, '\P{Join_Control=yes}', "");
Expect(0, 8203, '\P{^Join_Control=yes}', "");
Expect(1, 8205, '\p{Join_Control: __Yes}', "");
Expect(0, 8205, '\p{^Join_Control: __Yes}', "");
Expect(0, 8205, '\P{Join_Control: __Yes}', "");
Expect(1, 8205, '\P{^Join_Control: __Yes}', "");
Expect(0, 8203, '\p{Join_Control: __Yes}', "");
Expect(1, 8203, '\p{^Join_Control: __Yes}', "");
Expect(1, 8203, '\P{Join_Control: __Yes}', "");
Expect(0, 8203, '\P{^Join_Control: __Yes}', "");
Error('\p{Join_C=- Y/a/}');
Error('\P{Join_C=- Y/a/}');
Expect(1, 8205, '\p{Join_C=y}', "");
Expect(0, 8205, '\p{^Join_C=y}', "");
Expect(0, 8205, '\P{Join_C=y}', "");
Expect(1, 8205, '\P{^Join_C=y}', "");
Expect(0, 8203, '\p{Join_C=y}', "");
Expect(1, 8203, '\p{^Join_C=y}', "");
Expect(1, 8203, '\P{Join_C=y}', "");
Expect(0, 8203, '\P{^Join_C=y}', "");
Expect(1, 8205, '\p{Join_C:		Y}', "");
Expect(0, 8205, '\p{^Join_C:		Y}', "");
Expect(0, 8205, '\P{Join_C:		Y}', "");
Expect(1, 8205, '\P{^Join_C:		Y}', "");
Expect(0, 8203, '\p{Join_C:		Y}', "");
Expect(1, 8203, '\p{^Join_C:		Y}', "");
Expect(1, 8203, '\P{Join_C:		Y}', "");
Expect(0, 8203, '\P{^Join_C:		Y}', "");
Error('\p{Is_Join_Control=-_T:=}');
Error('\P{Is_Join_Control=-_T:=}');
Expect(1, 8205, '\p{Is_Join_Control=t}', "");
Expect(0, 8205, '\p{^Is_Join_Control=t}', "");
Expect(0, 8205, '\P{Is_Join_Control=t}', "");
Expect(1, 8205, '\P{^Is_Join_Control=t}', "");
Expect(0, 8203, '\p{Is_Join_Control=t}', "");
Expect(1, 8203, '\p{^Is_Join_Control=t}', "");
Expect(1, 8203, '\P{Is_Join_Control=t}', "");
Expect(0, 8203, '\P{^Is_Join_Control=t}', "");
Expect(1, 8205, '\p{Is_Join_Control=__T}', "");
Expect(0, 8205, '\p{^Is_Join_Control=__T}', "");
Expect(0, 8205, '\P{Is_Join_Control=__T}', "");
Expect(1, 8205, '\P{^Is_Join_Control=__T}', "");
Expect(0, 8203, '\p{Is_Join_Control=__T}', "");
Expect(1, 8203, '\p{^Is_Join_Control=__T}', "");
Expect(1, 8203, '\P{Is_Join_Control=__T}', "");
Expect(0, 8203, '\P{^Is_Join_Control=__T}', "");
Error('\p{Is_Join_C: /a/TRUE}');
Error('\P{Is_Join_C: /a/TRUE}');
Expect(1, 8205, '\p{Is_Join_C=true}', "");
Expect(0, 8205, '\p{^Is_Join_C=true}', "");
Expect(0, 8205, '\P{Is_Join_C=true}', "");
Expect(1, 8205, '\P{^Is_Join_C=true}', "");
Expect(0, 8203, '\p{Is_Join_C=true}', "");
Expect(1, 8203, '\p{^Is_Join_C=true}', "");
Expect(1, 8203, '\P{Is_Join_C=true}', "");
Expect(0, 8203, '\P{^Is_Join_C=true}', "");
Expect(1, 8205, '\p{Is_Join_C=-true}', "");
Expect(0, 8205, '\p{^Is_Join_C=-true}', "");
Expect(0, 8205, '\P{Is_Join_C=-true}', "");
Expect(1, 8205, '\P{^Is_Join_C=-true}', "");
Expect(0, 8203, '\p{Is_Join_C=-true}', "");
Expect(1, 8203, '\p{^Is_Join_C=-true}', "");
Expect(1, 8203, '\P{Is_Join_C=-true}', "");
Expect(0, 8203, '\P{^Is_Join_C=-true}', "");
Error('\p{Join_Control=-:=No}');
Error('\P{Join_Control=-:=No}');
Expect(1, 8203, '\p{Join_Control=no}', "");
Expect(0, 8203, '\p{^Join_Control=no}', "");
Expect(0, 8203, '\P{Join_Control=no}', "");
Expect(1, 8203, '\P{^Join_Control=no}', "");
Expect(0, 8205, '\p{Join_Control=no}', "");
Expect(1, 8205, '\p{^Join_Control=no}', "");
Expect(1, 8205, '\P{Join_Control=no}', "");
Expect(0, 8205, '\P{^Join_Control=no}', "");
Expect(1, 8203, '\p{Join_Control=  no}', "");
Expect(0, 8203, '\p{^Join_Control=  no}', "");
Expect(0, 8203, '\P{Join_Control=  no}', "");
Expect(1, 8203, '\P{^Join_Control=  no}', "");
Expect(0, 8205, '\p{Join_Control=  no}', "");
Expect(1, 8205, '\p{^Join_Control=  no}', "");
Expect(1, 8205, '\P{Join_Control=  no}', "");
Expect(0, 8205, '\P{^Join_Control=  no}', "");
Error('\p{Join_C=/a/ n}');
Error('\P{Join_C=/a/ n}');
Expect(1, 8203, '\p{Join_C=n}', "");
Expect(0, 8203, '\p{^Join_C=n}', "");
Expect(0, 8203, '\P{Join_C=n}', "");
Expect(1, 8203, '\P{^Join_C=n}', "");
Expect(0, 8205, '\p{Join_C=n}', "");
Expect(1, 8205, '\p{^Join_C=n}', "");
Expect(1, 8205, '\P{Join_C=n}', "");
Expect(0, 8205, '\P{^Join_C=n}', "");
Expect(1, 8203, '\p{Join_C=	_n}', "");
Expect(0, 8203, '\p{^Join_C=	_n}', "");
Expect(0, 8203, '\P{Join_C=	_n}', "");
Expect(1, 8203, '\P{^Join_C=	_n}', "");
Expect(0, 8205, '\p{Join_C=	_n}', "");
Expect(1, 8205, '\p{^Join_C=	_n}', "");
Expect(1, 8205, '\P{Join_C=	_n}', "");
Expect(0, 8205, '\P{^Join_C=	_n}', "");
Error('\p{Is_Join_Control=:=F}');
Error('\P{Is_Join_Control=:=F}');
Expect(1, 8203, '\p{Is_Join_Control=f}', "");
Expect(0, 8203, '\p{^Is_Join_Control=f}', "");
Expect(0, 8203, '\P{Is_Join_Control=f}', "");
Expect(1, 8203, '\P{^Is_Join_Control=f}', "");
Expect(0, 8205, '\p{Is_Join_Control=f}', "");
Expect(1, 8205, '\p{^Is_Join_Control=f}', "");
Expect(1, 8205, '\P{Is_Join_Control=f}', "");
Expect(0, 8205, '\P{^Is_Join_Control=f}', "");
Expect(1, 8203, '\p{Is_Join_Control=_ F}', "");
Expect(0, 8203, '\p{^Is_Join_Control=_ F}', "");
Expect(0, 8203, '\P{Is_Join_Control=_ F}', "");
Expect(1, 8203, '\P{^Is_Join_Control=_ F}', "");
Expect(0, 8205, '\p{Is_Join_Control=_ F}', "");
Expect(1, 8205, '\p{^Is_Join_Control=_ F}', "");
Expect(1, 8205, '\P{Is_Join_Control=_ F}', "");
Expect(0, 8205, '\P{^Is_Join_Control=_ F}', "");
Error('\p{Is_Join_C=/a/-	FALSE}');
Error('\P{Is_Join_C=/a/-	FALSE}');
Expect(1, 8203, '\p{Is_Join_C=false}', "");
Expect(0, 8203, '\p{^Is_Join_C=false}', "");
Expect(0, 8203, '\P{Is_Join_C=false}', "");
Expect(1, 8203, '\P{^Is_Join_C=false}', "");
Expect(0, 8205, '\p{Is_Join_C=false}', "");
Expect(1, 8205, '\p{^Is_Join_C=false}', "");
Expect(1, 8205, '\P{Is_Join_C=false}', "");
Expect(0, 8205, '\P{^Is_Join_C=false}', "");
Expect(1, 8203, '\p{Is_Join_C: 	_False}', "");
Expect(0, 8203, '\p{^Is_Join_C: 	_False}', "");
Expect(0, 8203, '\P{Is_Join_C: 	_False}', "");
Expect(1, 8203, '\P{^Is_Join_C: 	_False}', "");
Expect(0, 8205, '\p{Is_Join_C: 	_False}', "");
Expect(1, 8205, '\p{^Is_Join_C: 	_False}', "");
Expect(1, 8205, '\P{Is_Join_C: 	_False}', "");
Expect(0, 8205, '\P{^Is_Join_C: 	_False}', "");
Error('\p{Other_Default_Ignorable_Code_Point=:=yes}');
Error('\P{Other_Default_Ignorable_Code_Point=:=yes}');
Expect(1, 847, '\p{Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(0, 847, '\p{^Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(0, 847, '\P{Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(1, 847, '\P{^Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(0, 846, '\p{Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(1, 846, '\p{^Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(1, 846, '\P{Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(0, 846, '\P{^Other_Default_Ignorable_Code_Point=yes}', 'deprecated');
Expect(1, 847, '\p{Other_Default_Ignorable_Code_Point=_Yes}', 'deprecated');
Expect(0, 847, '\p{^Other_Default_Ignorable_Code_Point=_Yes}', 'deprecated');
Expect(0, 847, '\P{Other_Default_Ignorable_Code_Point=_Yes}', 'deprecated');
Expect(1, 847, '\P{^Other_Default_Ignorable_Code_Point=_Yes}', 'deprecated');
Expect(0, 846, '\p{Other_Default_Ignorable_Code_Point=_Yes}', 'deprecated');
Expect(1, 846, '\p{^Other_Default_Ignorable_Code_Point=_Yes}', 'deprecated');
Expect(1, 846, '\P{Other_Default_Ignorable_Code_Point=_Yes}', 'deprecated');
Expect(0, 846, '\P{^Other_Default_Ignorable_Code_Point=_Yes}', 'deprecated');
Error('\p{ODI=__Y:=}');
Error('\P{ODI=__Y:=}');
Expect(1, 847, '\p{ODI=y}', 'deprecated');
Expect(0, 847, '\p{^ODI=y}', 'deprecated');
Expect(0, 847, '\P{ODI=y}', 'deprecated');
Expect(1, 847, '\P{^ODI=y}', 'deprecated');
Expect(0, 846, '\p{ODI=y}', 'deprecated');
Expect(1, 846, '\p{^ODI=y}', 'deprecated');
Expect(1, 846, '\P{ODI=y}', 'deprecated');
Expect(0, 846, '\P{^ODI=y}', 'deprecated');
Expect(1, 847, '\p{ODI= Y}', 'deprecated');
Expect(0, 847, '\p{^ODI= Y}', 'deprecated');
Expect(0, 847, '\P{ODI= Y}', 'deprecated');
Expect(1, 847, '\P{^ODI= Y}', 'deprecated');
Expect(0, 846, '\p{ODI= Y}', 'deprecated');
Expect(1, 846, '\p{^ODI= Y}', 'deprecated');
Expect(1, 846, '\P{ODI= Y}', 'deprecated');
Expect(0, 846, '\P{^ODI= Y}', 'deprecated');
Error('\p{Is_Other_Default_Ignorable_Code_Point=/a/ T}');
Error('\P{Is_Other_Default_Ignorable_Code_Point=/a/ T}');
Expect(1, 847, '\p{Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(0, 847, '\p{^Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(0, 847, '\P{Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(1, 847, '\P{^Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(0, 846, '\p{Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(1, 846, '\p{^Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(1, 846, '\P{Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(0, 846, '\P{^Is_Other_Default_Ignorable_Code_Point=t}', 'deprecated');
Expect(1, 847, '\p{Is_Other_Default_Ignorable_Code_Point=__T}', 'deprecated');
Expect(0, 847, '\p{^Is_Other_Default_Ignorable_Code_Point=__T}', 'deprecated');
Expect(0, 847, '\P{Is_Other_Default_Ignorable_Code_Point=__T}', 'deprecated');
Expect(1, 847, '\P{^Is_Other_Default_Ignorable_Code_Point=__T}', 'deprecated');
Expect(0, 846, '\p{Is_Other_Default_Ignorable_Code_Point=__T}', 'deprecated');
Expect(1, 846, '\p{^Is_Other_Default_Ignorable_Code_Point=__T}', 'deprecated');
Expect(1, 846, '\P{Is_Other_Default_Ignorable_Code_Point=__T}', 'deprecated');
Expect(0, 846, '\P{^Is_Other_Default_Ignorable_Code_Point=__T}', 'deprecated');
Error('\p{Is_ODI=/a/	true}');
Error('\P{Is_ODI=/a/	true}');
Expect(1, 847, '\p{Is_ODI=true}', 'deprecated');
Expect(0, 847, '\p{^Is_ODI=true}', 'deprecated');
Expect(0, 847, '\P{Is_ODI=true}', 'deprecated');
Expect(1, 847, '\P{^Is_ODI=true}', 'deprecated');
Expect(0, 846, '\p{Is_ODI=true}', 'deprecated');
Expect(1, 846, '\p{^Is_ODI=true}', 'deprecated');
Expect(1, 846, '\P{Is_ODI=true}', 'deprecated');
Expect(0, 846, '\P{^Is_ODI=true}', 'deprecated');
Expect(1, 847, '\p{Is_ODI=_	TRUE}', 'deprecated');
Expect(0, 847, '\p{^Is_ODI=_	TRUE}', 'deprecated');
Expect(0, 847, '\P{Is_ODI=_	TRUE}', 'deprecated');
Expect(1, 847, '\P{^Is_ODI=_	TRUE}', 'deprecated');
Expect(0, 846, '\p{Is_ODI=_	TRUE}', 'deprecated');
Expect(1, 846, '\p{^Is_ODI=_	TRUE}', 'deprecated');
Expect(1, 846, '\P{Is_ODI=_	TRUE}', 'deprecated');
Expect(0, 846, '\P{^Is_ODI=_	TRUE}', 'deprecated');
Error('\p{Other_Default_Ignorable_Code_Point= -No:=}');
Error('\P{Other_Default_Ignorable_Code_Point= -No:=}');
Expect(1, 846, '\p{Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(0, 846, '\p{^Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(0, 846, '\P{Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(1, 846, '\P{^Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(0, 847, '\p{Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(1, 847, '\p{^Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(1, 847, '\P{Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(0, 847, '\P{^Other_Default_Ignorable_Code_Point=no}', 'deprecated');
Expect(1, 846, '\p{Other_Default_Ignorable_Code_Point=-_No}', 'deprecated');
Expect(0, 846, '\p{^Other_Default_Ignorable_Code_Point=-_No}', 'deprecated');
Expect(0, 846, '\P{Other_Default_Ignorable_Code_Point=-_No}', 'deprecated');
Expect(1, 846, '\P{^Other_Default_Ignorable_Code_Point=-_No}', 'deprecated');
Expect(0, 847, '\p{Other_Default_Ignorable_Code_Point=-_No}', 'deprecated');
Expect(1, 847, '\p{^Other_Default_Ignorable_Code_Point=-_No}', 'deprecated');
Expect(1, 847, '\P{Other_Default_Ignorable_Code_Point=-_No}', 'deprecated');
Expect(0, 847, '\P{^Other_Default_Ignorable_Code_Point=-_No}', 'deprecated');
Error('\p{ODI=- n/a/}');
Error('\P{ODI=- n/a/}');
Expect(1, 846, '\p{ODI=n}', 'deprecated');
Expect(0, 846, '\p{^ODI=n}', 'deprecated');
Expect(0, 846, '\P{ODI=n}', 'deprecated');
Expect(1, 846, '\P{^ODI=n}', 'deprecated');
Expect(0, 847, '\p{ODI=n}', 'deprecated');
Expect(1, 847, '\p{^ODI=n}', 'deprecated');
Expect(1, 847, '\P{ODI=n}', 'deprecated');
Expect(0, 847, '\P{^ODI=n}', 'deprecated');
Expect(1, 846, '\p{ODI= 	N}', 'deprecated');
Expect(0, 846, '\p{^ODI= 	N}', 'deprecated');
Expect(0, 846, '\P{ODI= 	N}', 'deprecated');
Expect(1, 846, '\P{^ODI= 	N}', 'deprecated');
Expect(0, 847, '\p{ODI= 	N}', 'deprecated');
Expect(1, 847, '\p{^ODI= 	N}', 'deprecated');
Expect(1, 847, '\P{ODI= 	N}', 'deprecated');
Expect(0, 847, '\P{^ODI= 	N}', 'deprecated');
Error('\p{Is_Other_Default_Ignorable_Code_Point=	 F:=}');
Error('\P{Is_Other_Default_Ignorable_Code_Point=	 F:=}');
Expect(1, 846, '\p{Is_Other_Default_Ignorable_Code_Point:   f}', 'deprecated');
Expect(0, 846, '\p{^Is_Other_Default_Ignorable_Code_Point:   f}', 'deprecated');
Expect(0, 846, '\P{Is_Other_Default_Ignorable_Code_Point:   f}', 'deprecated');
Expect(1, 846, '\P{^Is_Other_Default_Ignorable_Code_Point:   f}', 'deprecated');
Expect(0, 847, '\p{Is_Other_Default_Ignorable_Code_Point:   f}', 'deprecated');
Expect(1, 847, '\p{^Is_Other_Default_Ignorable_Code_Point:   f}', 'deprecated');
Expect(1, 847, '\P{Is_Other_Default_Ignorable_Code_Point:   f}', 'deprecated');
Expect(0, 847, '\P{^Is_Other_Default_Ignorable_Code_Point:   f}', 'deprecated');
Expect(1, 846, '\p{Is_Other_Default_Ignorable_Code_Point=_ F}', 'deprecated');
Expect(0, 846, '\p{^Is_Other_Default_Ignorable_Code_Point=_ F}', 'deprecated');
Expect(0, 846, '\P{Is_Other_Default_Ignorable_Code_Point=_ F}', 'deprecated');
Expect(1, 846, '\P{^Is_Other_Default_Ignorable_Code_Point=_ F}', 'deprecated');
Expect(0, 847, '\p{Is_Other_Default_Ignorable_Code_Point=_ F}', 'deprecated');
Expect(1, 847, '\p{^Is_Other_Default_Ignorable_Code_Point=_ F}', 'deprecated');
Expect(1, 847, '\P{Is_Other_Default_Ignorable_Code_Point=_ F}', 'deprecated');
Expect(0, 847, '\P{^Is_Other_Default_Ignorable_Code_Point=_ F}', 'deprecated');
Error('\p{Is_ODI= -FALSE:=}');
Error('\P{Is_ODI= -FALSE:=}');
Expect(1, 846, '\p{Is_ODI=false}', 'deprecated');
Expect(0, 846, '\p{^Is_ODI=false}', 'deprecated');
Expect(0, 846, '\P{Is_ODI=false}', 'deprecated');
Expect(1, 846, '\P{^Is_ODI=false}', 'deprecated');
Expect(0, 847, '\p{Is_ODI=false}', 'deprecated');
Expect(1, 847, '\p{^Is_ODI=false}', 'deprecated');
Expect(1, 847, '\P{Is_ODI=false}', 'deprecated');
Expect(0, 847, '\P{^Is_ODI=false}', 'deprecated');
Error('\p{Cased=--Yes/a/}');
Error('\P{Cased=--Yes/a/}');
Expect(1, 90, '\p{Cased=yes}', "");
Expect(0, 90, '\p{^Cased=yes}', "");
Expect(0, 90, '\P{Cased=yes}', "");
Expect(1, 90, '\P{^Cased=yes}', "");
Expect(0, 64, '\p{Cased=yes}', "");
Expect(1, 64, '\p{^Cased=yes}', "");
Expect(1, 64, '\P{Cased=yes}', "");
Expect(0, 64, '\P{^Cased=yes}', "");
Expect(1, 90, '\p{Cased=_yes}', "");
Expect(0, 90, '\p{^Cased=_yes}', "");
Expect(0, 90, '\P{Cased=_yes}', "");
Expect(1, 90, '\P{^Cased=_yes}', "");
Expect(0, 64, '\p{Cased=_yes}', "");
Expect(1, 64, '\p{^Cased=_yes}', "");
Expect(1, 64, '\P{Cased=_yes}', "");
Expect(0, 64, '\P{^Cased=_yes}', "");
Error('\p{Is_Cased=_:=y}');
Error('\P{Is_Cased=_:=y}');
Expect(1, 90, '\p{Is_Cased=y}', "");
Expect(0, 90, '\p{^Is_Cased=y}', "");
Expect(0, 90, '\P{Is_Cased=y}', "");
Expect(1, 90, '\P{^Is_Cased=y}', "");
Expect(0, 64, '\p{Is_Cased=y}', "");
Expect(1, 64, '\p{^Is_Cased=y}', "");
Expect(1, 64, '\P{Is_Cased=y}', "");
Expect(0, 64, '\P{^Is_Cased=y}', "");
Expect(1, 90, '\p{Is_Cased=_ Y}', "");
Expect(0, 90, '\p{^Is_Cased=_ Y}', "");
Expect(0, 90, '\P{Is_Cased=_ Y}', "");
Expect(1, 90, '\P{^Is_Cased=_ Y}', "");
Expect(0, 64, '\p{Is_Cased=_ Y}', "");
Expect(1, 64, '\p{^Is_Cased=_ Y}', "");
Expect(1, 64, '\P{Is_Cased=_ Y}', "");
Expect(0, 64, '\P{^Is_Cased=_ Y}', "");
Error('\p{Cased=	T/a/}');
Error('\P{Cased=	T/a/}');
Expect(1, 90, '\p{Cased=t}', "");
Expect(0, 90, '\p{^Cased=t}', "");
Expect(0, 90, '\P{Cased=t}', "");
Expect(1, 90, '\P{^Cased=t}', "");
Expect(0, 64, '\p{Cased=t}', "");
Expect(1, 64, '\p{^Cased=t}', "");
Expect(1, 64, '\P{Cased=t}', "");
Expect(0, 64, '\P{^Cased=t}', "");
Expect(1, 90, '\p{Cased: __T}', "");
Expect(0, 90, '\p{^Cased: __T}', "");
Expect(0, 90, '\P{Cased: __T}', "");
Expect(1, 90, '\P{^Cased: __T}', "");
Expect(0, 64, '\p{Cased: __T}', "");
Expect(1, 64, '\p{^Cased: __T}', "");
Expect(1, 64, '\P{Cased: __T}', "");
Expect(0, 64, '\P{^Cased: __T}', "");
Error('\p{Is_Cased= :=True}');
Error('\P{Is_Cased= :=True}');
Expect(1, 90, '\p{Is_Cased=true}', "");
Expect(0, 90, '\p{^Is_Cased=true}', "");
Expect(0, 90, '\P{Is_Cased=true}', "");
Expect(1, 90, '\P{^Is_Cased=true}', "");
Expect(0, 64, '\p{Is_Cased=true}', "");
Expect(1, 64, '\p{^Is_Cased=true}', "");
Expect(1, 64, '\P{Is_Cased=true}', "");
Expect(0, 64, '\P{^Is_Cased=true}', "");
Expect(1, 90, '\p{Is_Cased: 		true}', "");
Expect(0, 90, '\p{^Is_Cased: 		true}', "");
Expect(0, 90, '\P{Is_Cased: 		true}', "");
Expect(1, 90, '\P{^Is_Cased: 		true}', "");
Expect(0, 64, '\p{Is_Cased: 		true}', "");
Expect(1, 64, '\p{^Is_Cased: 		true}', "");
Expect(1, 64, '\P{Is_Cased: 		true}', "");
Expect(0, 64, '\P{^Is_Cased: 		true}', "");
Error('\p{Cased=:=	_No}');
Error('\P{Cased=:=	_No}');
Expect(1, 64, '\p{Cased=no}', "");
Expect(0, 64, '\p{^Cased=no}', "");
Expect(0, 64, '\P{Cased=no}', "");
Expect(1, 64, '\P{^Cased=no}', "");
Expect(0, 90, '\p{Cased=no}', "");
Expect(1, 90, '\p{^Cased=no}', "");
Expect(1, 90, '\P{Cased=no}', "");
Expect(0, 90, '\P{^Cased=no}', "");
Expect(1, 64, '\p{Cased=_-no}', "");
Expect(0, 64, '\p{^Cased=_-no}', "");
Expect(0, 64, '\P{Cased=_-no}', "");
Expect(1, 64, '\P{^Cased=_-no}', "");
Expect(0, 90, '\p{Cased=_-no}', "");
Expect(1, 90, '\p{^Cased=_-no}', "");
Expect(1, 90, '\P{Cased=_-no}', "");
Expect(0, 90, '\P{^Cased=_-no}', "");
Error('\p{Is_Cased=/a/	_n}');
Error('\P{Is_Cased=/a/	_n}');
Expect(1, 64, '\p{Is_Cased: n}', "");
Expect(0, 64, '\p{^Is_Cased: n}', "");
Expect(0, 64, '\P{Is_Cased: n}', "");
Expect(1, 64, '\P{^Is_Cased: n}', "");
Expect(0, 90, '\p{Is_Cased: n}', "");
Expect(1, 90, '\p{^Is_Cased: n}', "");
Expect(1, 90, '\P{Is_Cased: n}', "");
Expect(0, 90, '\P{^Is_Cased: n}', "");
Expect(1, 64, '\p{Is_Cased= 	n}', "");
Expect(0, 64, '\p{^Is_Cased= 	n}', "");
Expect(0, 64, '\P{Is_Cased= 	n}', "");
Expect(1, 64, '\P{^Is_Cased= 	n}', "");
Expect(0, 90, '\p{Is_Cased= 	n}', "");
Expect(1, 90, '\p{^Is_Cased= 	n}', "");
Expect(1, 90, '\P{Is_Cased= 	n}', "");
Expect(0, 90, '\P{^Is_Cased= 	n}', "");
Error('\p{Cased=-/a/f}');
Error('\P{Cased=-/a/f}');
Expect(1, 64, '\p{Cased:	f}', "");
Expect(0, 64, '\p{^Cased:	f}', "");
Expect(0, 64, '\P{Cased:	f}', "");
Expect(1, 64, '\P{^Cased:	f}', "");
Expect(0, 90, '\p{Cased:	f}', "");
Expect(1, 90, '\p{^Cased:	f}', "");
Expect(1, 90, '\P{Cased:	f}', "");
Expect(0, 90, '\P{^Cased:	f}', "");
Expect(1, 64, '\p{Cased=  F}', "");
Expect(0, 64, '\p{^Cased=  F}', "");
Expect(0, 64, '\P{Cased=  F}', "");
Expect(1, 64, '\P{^Cased=  F}', "");
Expect(0, 90, '\p{Cased=  F}', "");
Expect(1, 90, '\p{^Cased=  F}', "");
Expect(1, 90, '\P{Cased=  F}', "");
Expect(0, 90, '\P{^Cased=  F}', "");
Error('\p{Is_Cased= _FALSE/a/}');
Error('\P{Is_Cased= _FALSE/a/}');
Expect(1, 64, '\p{Is_Cased=false}', "");
Expect(0, 64, '\p{^Is_Cased=false}', "");
Expect(0, 64, '\P{Is_Cased=false}', "");
Expect(1, 64, '\P{^Is_Cased=false}', "");
Expect(0, 90, '\p{Is_Cased=false}', "");
Expect(1, 90, '\p{^Is_Cased=false}', "");
Expect(1, 90, '\P{Is_Cased=false}', "");
Expect(0, 90, '\P{^Is_Cased=false}', "");
Expect(1, 64, '\p{Is_Cased=	False}', "");
Expect(0, 64, '\p{^Is_Cased=	False}', "");
Expect(0, 64, '\P{Is_Cased=	False}', "");
Expect(1, 64, '\P{^Is_Cased=	False}', "");
Expect(0, 90, '\p{Is_Cased=	False}', "");
Expect(1, 90, '\p{^Is_Cased=	False}', "");
Expect(1, 90, '\P{Is_Cased=	False}', "");
Expect(0, 90, '\P{^Is_Cased=	False}', "");
Error('\p{Joining_Type=__Transparent/a/}');
Error('\P{Joining_Type=__Transparent/a/}');
Expect(1, 173, '\p{Joining_Type=transparent}', "");
Expect(0, 173, '\p{^Joining_Type=transparent}', "");
Expect(0, 173, '\P{Joining_Type=transparent}', "");
Expect(1, 173, '\P{^Joining_Type=transparent}', "");
Expect(0, 172, '\p{Joining_Type=transparent}', "");
Expect(1, 172, '\p{^Joining_Type=transparent}', "");
Expect(1, 172, '\P{Joining_Type=transparent}', "");
Expect(0, 172, '\P{^Joining_Type=transparent}', "");
Expect(1, 173, '\p{Joining_Type=- Transparent}', "");
Expect(0, 173, '\p{^Joining_Type=- Transparent}', "");
Expect(0, 173, '\P{Joining_Type=- Transparent}', "");
Expect(1, 173, '\P{^Joining_Type=- Transparent}', "");
Expect(0, 172, '\p{Joining_Type=- Transparent}', "");
Expect(1, 172, '\p{^Joining_Type=- Transparent}', "");
Expect(1, 172, '\P{Joining_Type=- Transparent}', "");
Expect(0, 172, '\P{^Joining_Type=- Transparent}', "");
Error('\p{Jt=/a/ T}');
Error('\P{Jt=/a/ T}');
Expect(1, 173, '\p{Jt=t}', "");
Expect(0, 173, '\p{^Jt=t}', "");
Expect(0, 173, '\P{Jt=t}', "");
Expect(1, 173, '\P{^Jt=t}', "");
Expect(0, 172, '\p{Jt=t}', "");
Expect(1, 172, '\p{^Jt=t}', "");
Expect(1, 172, '\P{Jt=t}', "");
Expect(0, 172, '\P{^Jt=t}', "");
Expect(1, 173, '\p{Jt= _T}', "");
Expect(0, 173, '\p{^Jt= _T}', "");
Expect(0, 173, '\P{Jt= _T}', "");
Expect(1, 173, '\P{^Jt= _T}', "");
Expect(0, 172, '\p{Jt= _T}', "");
Expect(1, 172, '\p{^Jt= _T}', "");
Expect(1, 172, '\P{Jt= _T}', "");
Expect(0, 172, '\P{^Jt= _T}', "");
Error('\p{Is_Joining_Type=	 TRANSPARENT/a/}');
Error('\P{Is_Joining_Type=	 TRANSPARENT/a/}');
Expect(1, 173, '\p{Is_Joining_Type=transparent}', "");
Expect(0, 173, '\p{^Is_Joining_Type=transparent}', "");
Expect(0, 173, '\P{Is_Joining_Type=transparent}', "");
Expect(1, 173, '\P{^Is_Joining_Type=transparent}', "");
Expect(0, 172, '\p{Is_Joining_Type=transparent}', "");
Expect(1, 172, '\p{^Is_Joining_Type=transparent}', "");
Expect(1, 172, '\P{Is_Joining_Type=transparent}', "");
Expect(0, 172, '\P{^Is_Joining_Type=transparent}', "");
Expect(1, 173, '\p{Is_Joining_Type=	-Transparent}', "");
Expect(0, 173, '\p{^Is_Joining_Type=	-Transparent}', "");
Expect(0, 173, '\P{Is_Joining_Type=	-Transparent}', "");
Expect(1, 173, '\P{^Is_Joining_Type=	-Transparent}', "");
Expect(0, 172, '\p{Is_Joining_Type=	-Transparent}', "");
Expect(1, 172, '\p{^Is_Joining_Type=	-Transparent}', "");
Expect(1, 172, '\P{Is_Joining_Type=	-Transparent}', "");
Expect(0, 172, '\P{^Is_Joining_Type=	-Transparent}', "");
Error('\p{Is_Jt=_ T:=}');
Error('\P{Is_Jt=_ T:=}');
Expect(1, 173, '\p{Is_Jt=t}', "");
Expect(0, 173, '\p{^Is_Jt=t}', "");
Expect(0, 173, '\P{Is_Jt=t}', "");
Expect(1, 173, '\P{^Is_Jt=t}', "");
Expect(0, 172, '\p{Is_Jt=t}', "");
Expect(1, 172, '\p{^Is_Jt=t}', "");
Expect(1, 172, '\P{Is_Jt=t}', "");
Expect(0, 172, '\P{^Is_Jt=t}', "");
Expect(1, 173, '\p{Is_Jt=-T}', "");
Expect(0, 173, '\p{^Is_Jt=-T}', "");
Expect(0, 173, '\P{Is_Jt=-T}', "");
Expect(1, 173, '\P{^Is_Jt=-T}', "");
Expect(0, 172, '\p{Is_Jt=-T}', "");
Expect(1, 172, '\p{^Is_Jt=-T}', "");
Expect(1, 172, '\P{Is_Jt=-T}', "");
Expect(0, 172, '\P{^Is_Jt=-T}', "");
Error('\p{Joining_Type=	_Right/a/JOINING}');
Error('\P{Joining_Type=	_Right/a/JOINING}');
Expect(1, 1573, '\p{Joining_Type=rightjoining}', "");
Expect(0, 1573, '\p{^Joining_Type=rightjoining}', "");
Expect(0, 1573, '\P{Joining_Type=rightjoining}', "");
Expect(1, 1573, '\P{^Joining_Type=rightjoining}', "");
Expect(0, 1569, '\p{Joining_Type=rightjoining}', "");
Expect(1, 1569, '\p{^Joining_Type=rightjoining}', "");
Expect(1, 1569, '\P{Joining_Type=rightjoining}', "");
Expect(0, 1569, '\P{^Joining_Type=rightjoining}', "");
Expect(1, 1573, '\p{Joining_Type=_	Right-joining}', "");
Expect(0, 1573, '\p{^Joining_Type=_	Right-joining}', "");
Expect(0, 1573, '\P{Joining_Type=_	Right-joining}', "");
Expect(1, 1573, '\P{^Joining_Type=_	Right-joining}', "");
Expect(0, 1569, '\p{Joining_Type=_	Right-joining}', "");
Expect(1, 1569, '\p{^Joining_Type=_	Right-joining}', "");
Expect(1, 1569, '\P{Joining_Type=_	Right-joining}', "");
Expect(0, 1569, '\P{^Joining_Type=_	Right-joining}', "");
Error('\p{Jt=__R/a/}');
Error('\P{Jt=__R/a/}');
Expect(1, 1573, '\p{Jt=r}', "");
Expect(0, 1573, '\p{^Jt=r}', "");
Expect(0, 1573, '\P{Jt=r}', "");
Expect(1, 1573, '\P{^Jt=r}', "");
Expect(0, 1569, '\p{Jt=r}', "");
Expect(1, 1569, '\p{^Jt=r}', "");
Expect(1, 1569, '\P{Jt=r}', "");
Expect(0, 1569, '\P{^Jt=r}', "");
Expect(1, 1573, '\p{Jt:	 r}', "");
Expect(0, 1573, '\p{^Jt:	 r}', "");
Expect(0, 1573, '\P{Jt:	 r}', "");
Expect(1, 1573, '\P{^Jt:	 r}', "");
Expect(0, 1569, '\p{Jt:	 r}', "");
Expect(1, 1569, '\p{^Jt:	 r}', "");
Expect(1, 1569, '\P{Jt:	 r}', "");
Expect(0, 1569, '\P{^Jt:	 r}', "");
Error('\p{Is_Joining_Type=:=_Right_Joining}');
Error('\P{Is_Joining_Type=:=_Right_Joining}');
Expect(1, 1573, '\p{Is_Joining_Type:rightjoining}', "");
Expect(0, 1573, '\p{^Is_Joining_Type:rightjoining}', "");
Expect(0, 1573, '\P{Is_Joining_Type:rightjoining}', "");
Expect(1, 1573, '\P{^Is_Joining_Type:rightjoining}', "");
Expect(0, 1569, '\p{Is_Joining_Type:rightjoining}', "");
Expect(1, 1569, '\p{^Is_Joining_Type:rightjoining}', "");
Expect(1, 1569, '\P{Is_Joining_Type:rightjoining}', "");
Expect(0, 1569, '\P{^Is_Joining_Type:rightjoining}', "");
Expect(1, 1573, '\p{Is_Joining_Type=_ RIGHT	JOINING}', "");
Expect(0, 1573, '\p{^Is_Joining_Type=_ RIGHT	JOINING}', "");
Expect(0, 1573, '\P{Is_Joining_Type=_ RIGHT	JOINING}', "");
Expect(1, 1573, '\P{^Is_Joining_Type=_ RIGHT	JOINING}', "");
Expect(0, 1569, '\p{Is_Joining_Type=_ RIGHT	JOINING}', "");
Expect(1, 1569, '\p{^Is_Joining_Type=_ RIGHT	JOINING}', "");
Expect(1, 1569, '\P{Is_Joining_Type=_ RIGHT	JOINING}', "");
Expect(0, 1569, '\P{^Is_Joining_Type=_ RIGHT	JOINING}', "");
Error('\p{Is_Jt=	R/a/}');
Error('\P{Is_Jt=	R/a/}');
Expect(1, 1573, '\p{Is_Jt=r}', "");
Expect(0, 1573, '\p{^Is_Jt=r}', "");
Expect(0, 1573, '\P{Is_Jt=r}', "");
Expect(1, 1573, '\P{^Is_Jt=r}', "");
Expect(0, 1569, '\p{Is_Jt=r}', "");
Expect(1, 1569, '\p{^Is_Jt=r}', "");
Expect(1, 1569, '\P{Is_Jt=r}', "");
Expect(0, 1569, '\P{^Is_Jt=r}', "");
Expect(1, 1573, '\p{Is_Jt=	 R}', "");
Expect(0, 1573, '\p{^Is_Jt=	 R}', "");
Expect(0, 1573, '\P{Is_Jt=	 R}', "");
Expect(1, 1573, '\P{^Is_Jt=	 R}', "");
Expect(0, 1569, '\p{Is_Jt=	 R}', "");
Expect(1, 1569, '\p{^Is_Jt=	 R}', "");
Expect(1, 1569, '\P{Is_Jt=	 R}', "");
Expect(0, 1569, '\P{^Is_Jt=	 R}', "");
Error('\p{Joining_Type=:=_Join causing}');
Error('\P{Joining_Type=:=_Join causing}');
Expect(1, 1600, '\p{Joining_Type=joincausing}', "");
Expect(0, 1600, '\p{^Joining_Type=joincausing}', "");
Expect(0, 1600, '\P{Joining_Type=joincausing}', "");
Expect(1, 1600, '\P{^Joining_Type=joincausing}', "");
Expect(0, 1599, '\p{Joining_Type=joincausing}', "");
Expect(1, 1599, '\p{^Joining_Type=joincausing}', "");
Expect(1, 1599, '\P{Joining_Type=joincausing}', "");
Expect(0, 1599, '\P{^Joining_Type=joincausing}', "");
Expect(1, 1600, '\p{Joining_Type=Join	causing}', "");
Expect(0, 1600, '\p{^Joining_Type=Join	causing}', "");
Expect(0, 1600, '\P{Joining_Type=Join	causing}', "");
Expect(1, 1600, '\P{^Joining_Type=Join	causing}', "");
Expect(0, 1599, '\p{Joining_Type=Join	causing}', "");
Expect(1, 1599, '\p{^Joining_Type=Join	causing}', "");
Expect(1, 1599, '\P{Joining_Type=Join	causing}', "");
Expect(0, 1599, '\P{^Joining_Type=Join	causing}', "");
Error('\p{Jt=_ C/a/}');
Error('\P{Jt=_ C/a/}');
Expect(1, 1600, '\p{Jt: c}', "");
Expect(0, 1600, '\p{^Jt: c}', "");
Expect(0, 1600, '\P{Jt: c}', "");
Expect(1, 1600, '\P{^Jt: c}', "");
Expect(0, 1599, '\p{Jt: c}', "");
Expect(1, 1599, '\p{^Jt: c}', "");
Expect(1, 1599, '\P{Jt: c}', "");
Expect(0, 1599, '\P{^Jt: c}', "");
Expect(1, 1600, '\p{Jt=	C}', "");
Expect(0, 1600, '\p{^Jt=	C}', "");
Expect(0, 1600, '\P{Jt=	C}', "");
Expect(1, 1600, '\P{^Jt=	C}', "");
Expect(0, 1599, '\p{Jt=	C}', "");
Expect(1, 1599, '\p{^Jt=	C}', "");
Expect(1, 1599, '\P{Jt=	C}', "");
Expect(0, 1599, '\P{^Jt=	C}', "");
Error('\p{Is_Joining_Type=	/a/JoinCausing}');
Error('\P{Is_Joining_Type=	/a/JoinCausing}');
Expect(1, 1600, '\p{Is_Joining_Type=joincausing}', "");
Expect(0, 1600, '\p{^Is_Joining_Type=joincausing}', "");
Expect(0, 1600, '\P{Is_Joining_Type=joincausing}', "");
Expect(1, 1600, '\P{^Is_Joining_Type=joincausing}', "");
Expect(0, 1599, '\p{Is_Joining_Type=joincausing}', "");
Expect(1, 1599, '\p{^Is_Joining_Type=joincausing}', "");
Expect(1, 1599, '\P{Is_Joining_Type=joincausing}', "");
Expect(0, 1599, '\P{^Is_Joining_Type=joincausing}', "");
Expect(1, 1600, '\p{Is_Joining_Type:- Join causing}', "");
Expect(0, 1600, '\p{^Is_Joining_Type:- Join causing}', "");
Expect(0, 1600, '\P{Is_Joining_Type:- Join causing}', "");
Expect(1, 1600, '\P{^Is_Joining_Type:- Join causing}', "");
Expect(0, 1599, '\p{Is_Joining_Type:- Join causing}', "");
Expect(1, 1599, '\p{^Is_Joining_Type:- Join causing}', "");
Expect(1, 1599, '\P{Is_Joining_Type:- Join causing}', "");
Expect(0, 1599, '\P{^Is_Joining_Type:- Join causing}', "");
Error('\p{Is_Jt=:=C}');
Error('\P{Is_Jt=:=C}');
Expect(1, 1600, '\p{Is_Jt=c}', "");
Expect(0, 1600, '\p{^Is_Jt=c}', "");
Expect(0, 1600, '\P{Is_Jt=c}', "");
Expect(1, 1600, '\P{^Is_Jt=c}', "");
Expect(0, 1599, '\p{Is_Jt=c}', "");
Expect(1, 1599, '\p{^Is_Jt=c}', "");
Expect(1, 1599, '\P{Is_Jt=c}', "");
Expect(0, 1599, '\P{^Is_Jt=c}', "");
Expect(1, 1600, '\p{Is_Jt=__C}', "");
Expect(0, 1600, '\p{^Is_Jt=__C}', "");
Expect(0, 1600, '\P{Is_Jt=__C}', "");
Expect(1, 1600, '\P{^Is_Jt=__C}', "");
Expect(0, 1599, '\p{Is_Jt=__C}', "");
Expect(1, 1599, '\p{^Is_Jt=__C}', "");
Expect(1, 1599, '\P{Is_Jt=__C}', "");
Expect(0, 1599, '\P{^Is_Jt=__C}', "");
Error('\p{Joining_Type=_	NON/a/JOINING}');
Error('\P{Joining_Type=_	NON/a/JOINING}');
Expect(1, 172, '\p{Joining_Type=nonjoining}', "");
Expect(0, 172, '\p{^Joining_Type=nonjoining}', "");
Expect(0, 172, '\P{Joining_Type=nonjoining}', "");
Expect(1, 172, '\P{^Joining_Type=nonjoining}', "");
Expect(0, 173, '\p{Joining_Type=nonjoining}', "");
Expect(1, 173, '\p{^Joining_Type=nonjoining}', "");
Expect(1, 173, '\P{Joining_Type=nonjoining}', "");
Expect(0, 173, '\P{^Joining_Type=nonjoining}', "");
Expect(1, 172, '\p{Joining_Type=_Non_Joining}', "");
Expect(0, 172, '\p{^Joining_Type=_Non_Joining}', "");
Expect(0, 172, '\P{Joining_Type=_Non_Joining}', "");
Expect(1, 172, '\P{^Joining_Type=_Non_Joining}', "");
Expect(0, 173, '\p{Joining_Type=_Non_Joining}', "");
Expect(1, 173, '\p{^Joining_Type=_Non_Joining}', "");
Expect(1, 173, '\P{Joining_Type=_Non_Joining}', "");
Expect(0, 173, '\P{^Joining_Type=_Non_Joining}', "");
Error('\p{Jt= U:=}');
Error('\P{Jt= U:=}');
Expect(1, 172, '\p{Jt=u}', "");
Expect(0, 172, '\p{^Jt=u}', "");
Expect(0, 172, '\P{Jt=u}', "");
Expect(1, 172, '\P{^Jt=u}', "");
Expect(0, 173, '\p{Jt=u}', "");
Expect(1, 173, '\p{^Jt=u}', "");
Expect(1, 173, '\P{Jt=u}', "");
Expect(0, 173, '\P{^Jt=u}', "");
Expect(1, 172, '\p{Jt=_-U}', "");
Expect(0, 172, '\p{^Jt=_-U}', "");
Expect(0, 172, '\P{Jt=_-U}', "");
Expect(1, 172, '\P{^Jt=_-U}', "");
Expect(0, 173, '\p{Jt=_-U}', "");
Expect(1, 173, '\p{^Jt=_-U}', "");
Expect(1, 173, '\P{Jt=_-U}', "");
Expect(0, 173, '\P{^Jt=_-U}', "");
Error('\p{Is_Joining_Type=	-NON/a/Joining}');
Error('\P{Is_Joining_Type=	-NON/a/Joining}');
Expect(1, 172, '\p{Is_Joining_Type=nonjoining}', "");
Expect(0, 172, '\p{^Is_Joining_Type=nonjoining}', "");
Expect(0, 172, '\P{Is_Joining_Type=nonjoining}', "");
Expect(1, 172, '\P{^Is_Joining_Type=nonjoining}', "");
Expect(0, 173, '\p{Is_Joining_Type=nonjoining}', "");
Expect(1, 173, '\p{^Is_Joining_Type=nonjoining}', "");
Expect(1, 173, '\P{Is_Joining_Type=nonjoining}', "");
Expect(0, 173, '\P{^Is_Joining_Type=nonjoining}', "");
Expect(1, 172, '\p{Is_Joining_Type=  non	Joining}', "");
Expect(0, 172, '\p{^Is_Joining_Type=  non	Joining}', "");
Expect(0, 172, '\P{Is_Joining_Type=  non	Joining}', "");
Expect(1, 172, '\P{^Is_Joining_Type=  non	Joining}', "");
Expect(0, 173, '\p{Is_Joining_Type=  non	Joining}', "");
Expect(1, 173, '\p{^Is_Joining_Type=  non	Joining}', "");
Expect(1, 173, '\P{Is_Joining_Type=  non	Joining}', "");
Expect(0, 173, '\P{^Is_Joining_Type=  non	Joining}', "");
Error('\p{Is_Jt=:=_U}');
Error('\P{Is_Jt=:=_U}');
Expect(1, 172, '\p{Is_Jt=u}', "");
Expect(0, 172, '\p{^Is_Jt=u}', "");
Expect(0, 172, '\P{Is_Jt=u}', "");
Expect(1, 172, '\P{^Is_Jt=u}', "");
Expect(0, 173, '\p{Is_Jt=u}', "");
Expect(1, 173, '\p{^Is_Jt=u}', "");
Expect(1, 173, '\P{Is_Jt=u}', "");
Expect(0, 173, '\P{^Is_Jt=u}', "");
Expect(1, 172, '\p{Is_Jt= U}', "");
Expect(0, 172, '\p{^Is_Jt= U}', "");
Expect(0, 172, '\P{Is_Jt= U}', "");
Expect(1, 172, '\P{^Is_Jt= U}', "");
Expect(0, 173, '\p{Is_Jt= U}', "");
Expect(1, 173, '\p{^Is_Jt= U}', "");
Expect(1, 173, '\P{Is_Jt= U}', "");
Expect(0, 173, '\P{^Is_Jt= U}', "");
Error('\p{Joining_Type=:=_ Dual-JOINING}');
Error('\P{Joining_Type=:=_ Dual-JOINING}');
Expect(1, 1574, '\p{Joining_Type=dualjoining}', "");
Expect(0, 1574, '\p{^Joining_Type=dualjoining}', "");
Expect(0, 1574, '\P{Joining_Type=dualjoining}', "");
Expect(1, 1574, '\P{^Joining_Type=dualjoining}', "");
Expect(0, 1573, '\p{Joining_Type=dualjoining}', "");
Expect(1, 1573, '\p{^Joining_Type=dualjoining}', "");
Expect(1, 1573, '\P{Joining_Type=dualjoining}', "");
Expect(0, 1573, '\P{^Joining_Type=dualjoining}', "");
Expect(1, 1574, '\p{Joining_Type= _Dual-Joining}', "");
Expect(0, 1574, '\p{^Joining_Type= _Dual-Joining}', "");
Expect(0, 1574, '\P{Joining_Type= _Dual-Joining}', "");
Expect(1, 1574, '\P{^Joining_Type= _Dual-Joining}', "");
Expect(0, 1573, '\p{Joining_Type= _Dual-Joining}', "");
Expect(1, 1573, '\p{^Joining_Type= _Dual-Joining}', "");
Expect(1, 1573, '\P{Joining_Type= _Dual-Joining}', "");
Expect(0, 1573, '\P{^Joining_Type= _Dual-Joining}', "");
Error('\p{Jt=:=-	D}');
Error('\P{Jt=:=-	D}');
Expect(1, 1574, '\p{Jt=d}', "");
Expect(0, 1574, '\p{^Jt=d}', "");
Expect(0, 1574, '\P{Jt=d}', "");
Expect(1, 1574, '\P{^Jt=d}', "");
Expect(0, 1573, '\p{Jt=d}', "");
Expect(1, 1573, '\p{^Jt=d}', "");
Expect(1, 1573, '\P{Jt=d}', "");
Expect(0, 1573, '\P{^Jt=d}', "");
Expect(1, 1574, '\p{Jt= _D}', "");
Expect(0, 1574, '\p{^Jt= _D}', "");
Expect(0, 1574, '\P{Jt= _D}', "");
Expect(1, 1574, '\P{^Jt= _D}', "");
Expect(0, 1573, '\p{Jt= _D}', "");
Expect(1, 1573, '\p{^Jt= _D}', "");
Expect(1, 1573, '\P{Jt= _D}', "");
Expect(0, 1573, '\P{^Jt= _D}', "");
Error('\p{Is_Joining_Type=:= Dual Joining}');
Error('\P{Is_Joining_Type=:= Dual Joining}');
Expect(1, 1574, '\p{Is_Joining_Type=dualjoining}', "");
Expect(0, 1574, '\p{^Is_Joining_Type=dualjoining}', "");
Expect(0, 1574, '\P{Is_Joining_Type=dualjoining}', "");
Expect(1, 1574, '\P{^Is_Joining_Type=dualjoining}', "");
Expect(0, 1573, '\p{Is_Joining_Type=dualjoining}', "");
Expect(1, 1573, '\p{^Is_Joining_Type=dualjoining}', "");
Expect(1, 1573, '\P{Is_Joining_Type=dualjoining}', "");
Expect(0, 1573, '\P{^Is_Joining_Type=dualjoining}', "");
Expect(1, 1574, '\p{Is_Joining_Type=	-Dualjoining}', "");
Expect(0, 1574, '\p{^Is_Joining_Type=	-Dualjoining}', "");
Expect(0, 1574, '\P{Is_Joining_Type=	-Dualjoining}', "");
Expect(1, 1574, '\P{^Is_Joining_Type=	-Dualjoining}', "");
Expect(0, 1573, '\p{Is_Joining_Type=	-Dualjoining}', "");
Expect(1, 1573, '\p{^Is_Joining_Type=	-Dualjoining}', "");
Expect(1, 1573, '\P{Is_Joining_Type=	-Dualjoining}', "");
Expect(0, 1573, '\P{^Is_Joining_Type=	-Dualjoining}', "");
Error('\p{Is_Jt=/a/d}');
Error('\P{Is_Jt=/a/d}');
Expect(1, 1574, '\p{Is_Jt=d}', "");
Expect(0, 1574, '\p{^Is_Jt=d}', "");
Expect(0, 1574, '\P{Is_Jt=d}', "");
Expect(1, 1574, '\P{^Is_Jt=d}', "");
Expect(0, 1573, '\p{Is_Jt=d}', "");
Expect(1, 1573, '\p{^Is_Jt=d}', "");
Expect(1, 1573, '\P{Is_Jt=d}', "");
Expect(0, 1573, '\P{^Is_Jt=d}', "");
Expect(1, 1574, '\p{Is_Jt:   -D}', "");
Expect(0, 1574, '\p{^Is_Jt:   -D}', "");
Expect(0, 1574, '\P{Is_Jt:   -D}', "");
Expect(1, 1574, '\P{^Is_Jt:   -D}', "");
Expect(0, 1573, '\p{Is_Jt:   -D}', "");
Expect(1, 1573, '\p{^Is_Jt:   -D}', "");
Expect(1, 1573, '\P{Is_Jt:   -D}', "");
Expect(0, 1573, '\P{^Is_Jt:   -D}', "");
Error('\p{Joining_Type=/a/LEFTJOINING}');
Error('\P{Joining_Type=/a/LEFTJOINING}');
Expect(0, 1, '\p{Joining_Type=leftjoining}', "");
Expect(1, 1, '\p{^Joining_Type=leftjoining}', "");
Expect(1, 1, '\P{Joining_Type=leftjoining}', "");
Expect(0, 1, '\P{^Joining_Type=leftjoining}', "");
Expect(0, 1, '\p{Joining_Type=	leftJOINING}', "");
Expect(1, 1, '\p{^Joining_Type=	leftJOINING}', "");
Expect(1, 1, '\P{Joining_Type=	leftJOINING}', "");
Expect(0, 1, '\P{^Joining_Type=	leftJOINING}', "");
Error('\p{Jt=:=	_L}');
Error('\P{Jt=:=	_L}');
Expect(0, 1, '\p{Jt=l}', "");
Expect(1, 1, '\p{^Jt=l}', "");
Expect(1, 1, '\P{Jt=l}', "");
Expect(0, 1, '\P{^Jt=l}', "");
Expect(0, 1, '\p{Jt: -l}', "");
Expect(1, 1, '\p{^Jt: -l}', "");
Expect(1, 1, '\P{Jt: -l}', "");
Expect(0, 1, '\P{^Jt: -l}', "");
Error('\p{Is_Joining_Type=-:=LEFT	Joining}');
Error('\P{Is_Joining_Type=-:=LEFT	Joining}');
Expect(0, 1, '\p{Is_Joining_Type=leftjoining}', "");
Expect(1, 1, '\p{^Is_Joining_Type=leftjoining}', "");
Expect(1, 1, '\P{Is_Joining_Type=leftjoining}', "");
Expect(0, 1, '\P{^Is_Joining_Type=leftjoining}', "");
Expect(0, 1, '\p{Is_Joining_Type= 	LeftJoining}', "");
Expect(1, 1, '\p{^Is_Joining_Type= 	LeftJoining}', "");
Expect(1, 1, '\P{Is_Joining_Type= 	LeftJoining}', "");
Expect(0, 1, '\P{^Is_Joining_Type= 	LeftJoining}', "");
Error('\p{Is_Jt= -L:=}');
Error('\P{Is_Jt= -L:=}');
Expect(0, 1, '\p{Is_Jt=l}', "");
Expect(1, 1, '\p{^Is_Jt=l}', "");
Expect(1, 1, '\P{Is_Jt=l}', "");
Expect(0, 1, '\P{^Is_Jt=l}', "");
Expect(0, 1, '\p{Is_Jt=_ L}', "");
Expect(1, 1, '\p{^Is_Jt=_ L}', "");
Expect(1, 1, '\P{Is_Jt=_ L}', "");
Expect(0, 1, '\P{^Is_Jt=_ L}', "");
Error('\p{ID_Start:	_/a/Yes}');
Error('\P{ID_Start:	_/a/Yes}');
Expect(1, 90, '\p{ID_Start=yes}', "");
Expect(0, 90, '\p{^ID_Start=yes}', "");
Expect(0, 90, '\P{ID_Start=yes}', "");
Expect(1, 90, '\P{^ID_Start=yes}', "");
Expect(0, 64, '\p{ID_Start=yes}', "");
Expect(1, 64, '\p{^ID_Start=yes}', "");
Expect(1, 64, '\P{ID_Start=yes}', "");
Expect(0, 64, '\P{^ID_Start=yes}', "");
Expect(1, 90, '\p{ID_Start= _Yes}', "");
Expect(0, 90, '\p{^ID_Start= _Yes}', "");
Expect(0, 90, '\P{ID_Start= _Yes}', "");
Expect(1, 90, '\P{^ID_Start= _Yes}', "");
Expect(0, 64, '\p{ID_Start= _Yes}', "");
Expect(1, 64, '\p{^ID_Start= _Yes}', "");
Expect(1, 64, '\P{ID_Start= _Yes}', "");
Expect(0, 64, '\P{^ID_Start= _Yes}', "");
Error('\p{IDS= 	y:=}');
Error('\P{IDS= 	y:=}');
Expect(1, 90, '\p{IDS=y}', "");
Expect(0, 90, '\p{^IDS=y}', "");
Expect(0, 90, '\P{IDS=y}', "");
Expect(1, 90, '\P{^IDS=y}', "");
Expect(0, 64, '\p{IDS=y}', "");
Expect(1, 64, '\p{^IDS=y}', "");
Expect(1, 64, '\P{IDS=y}', "");
Expect(0, 64, '\P{^IDS=y}', "");
Expect(1, 90, '\p{IDS=_Y}', "");
Expect(0, 90, '\p{^IDS=_Y}', "");
Expect(0, 90, '\P{IDS=_Y}', "");
Expect(1, 90, '\P{^IDS=_Y}', "");
Expect(0, 64, '\p{IDS=_Y}', "");
Expect(1, 64, '\p{^IDS=_Y}', "");
Expect(1, 64, '\P{IDS=_Y}', "");
Expect(0, 64, '\P{^IDS=_Y}', "");
Error('\p{Is_ID_Start=:=_-T}');
Error('\P{Is_ID_Start=:=_-T}');
Expect(1, 90, '\p{Is_ID_Start=t}', "");
Expect(0, 90, '\p{^Is_ID_Start=t}', "");
Expect(0, 90, '\P{Is_ID_Start=t}', "");
Expect(1, 90, '\P{^Is_ID_Start=t}', "");
Expect(0, 64, '\p{Is_ID_Start=t}', "");
Expect(1, 64, '\p{^Is_ID_Start=t}', "");
Expect(1, 64, '\P{Is_ID_Start=t}', "");
Expect(0, 64, '\P{^Is_ID_Start=t}', "");
Expect(1, 90, '\p{Is_ID_Start:T}', "");
Expect(0, 90, '\p{^Is_ID_Start:T}', "");
Expect(0, 90, '\P{Is_ID_Start:T}', "");
Expect(1, 90, '\P{^Is_ID_Start:T}', "");
Expect(0, 64, '\p{Is_ID_Start:T}', "");
Expect(1, 64, '\p{^Is_ID_Start:T}', "");
Expect(1, 64, '\P{Is_ID_Start:T}', "");
Expect(0, 64, '\P{^Is_ID_Start:T}', "");
Error('\p{Is_IDS=:=	True}');
Error('\P{Is_IDS=:=	True}');
Expect(1, 90, '\p{Is_IDS=true}', "");
Expect(0, 90, '\p{^Is_IDS=true}', "");
Expect(0, 90, '\P{Is_IDS=true}', "");
Expect(1, 90, '\P{^Is_IDS=true}', "");
Expect(0, 64, '\p{Is_IDS=true}', "");
Expect(1, 64, '\p{^Is_IDS=true}', "");
Expect(1, 64, '\P{Is_IDS=true}', "");
Expect(0, 64, '\P{^Is_IDS=true}', "");
Expect(1, 90, '\p{Is_IDS=	-True}', "");
Expect(0, 90, '\p{^Is_IDS=	-True}', "");
Expect(0, 90, '\P{Is_IDS=	-True}', "");
Expect(1, 90, '\P{^Is_IDS=	-True}', "");
Expect(0, 64, '\p{Is_IDS=	-True}', "");
Expect(1, 64, '\p{^Is_IDS=	-True}', "");
Expect(1, 64, '\P{Is_IDS=	-True}', "");
Expect(0, 64, '\P{^Is_IDS=	-True}', "");
Error('\p{ID_Start=_:=No}');
Error('\P{ID_Start=_:=No}');
Expect(1, 64, '\p{ID_Start=no}', "");
Expect(0, 64, '\p{^ID_Start=no}', "");
Expect(0, 64, '\P{ID_Start=no}', "");
Expect(1, 64, '\P{^ID_Start=no}', "");
Expect(0, 90, '\p{ID_Start=no}', "");
Expect(1, 90, '\p{^ID_Start=no}', "");
Expect(1, 90, '\P{ID_Start=no}', "");
Expect(0, 90, '\P{^ID_Start=no}', "");
Expect(1, 64, '\p{ID_Start=	_NO}', "");
Expect(0, 64, '\p{^ID_Start=	_NO}', "");
Expect(0, 64, '\P{ID_Start=	_NO}', "");
Expect(1, 64, '\P{^ID_Start=	_NO}', "");
Expect(0, 90, '\p{ID_Start=	_NO}', "");
Expect(1, 90, '\p{^ID_Start=	_NO}', "");
Expect(1, 90, '\P{ID_Start=	_NO}', "");
Expect(0, 90, '\P{^ID_Start=	_NO}', "");
Error('\p{IDS= -N/a/}');
Error('\P{IDS= -N/a/}');
Expect(1, 64, '\p{IDS=n}', "");
Expect(0, 64, '\p{^IDS=n}', "");
Expect(0, 64, '\P{IDS=n}', "");
Expect(1, 64, '\P{^IDS=n}', "");
Expect(0, 90, '\p{IDS=n}', "");
Expect(1, 90, '\p{^IDS=n}', "");
Expect(1, 90, '\P{IDS=n}', "");
Expect(0, 90, '\P{^IDS=n}', "");
Expect(1, 64, '\p{IDS=		N}', "");
Expect(0, 64, '\p{^IDS=		N}', "");
Expect(0, 64, '\P{IDS=		N}', "");
Expect(1, 64, '\P{^IDS=		N}', "");
Expect(0, 90, '\p{IDS=		N}', "");
Expect(1, 90, '\p{^IDS=		N}', "");
Expect(1, 90, '\P{IDS=		N}', "");
Expect(0, 90, '\P{^IDS=		N}', "");
Error('\p{Is_ID_Start=-	F/a/}');
Error('\P{Is_ID_Start=-	F/a/}');
Expect(1, 64, '\p{Is_ID_Start=f}', "");
Expect(0, 64, '\p{^Is_ID_Start=f}', "");
Expect(0, 64, '\P{Is_ID_Start=f}', "");
Expect(1, 64, '\P{^Is_ID_Start=f}', "");
Expect(0, 90, '\p{Is_ID_Start=f}', "");
Expect(1, 90, '\p{^Is_ID_Start=f}', "");
Expect(1, 90, '\P{Is_ID_Start=f}', "");
Expect(0, 90, '\P{^Is_ID_Start=f}', "");
Expect(1, 64, '\p{Is_ID_Start=_f}', "");
Expect(0, 64, '\p{^Is_ID_Start=_f}', "");
Expect(0, 64, '\P{Is_ID_Start=_f}', "");
Expect(1, 64, '\P{^Is_ID_Start=_f}', "");
Expect(0, 90, '\p{Is_ID_Start=_f}', "");
Expect(1, 90, '\p{^Is_ID_Start=_f}', "");
Expect(1, 90, '\P{Is_ID_Start=_f}', "");
Expect(0, 90, '\P{^Is_ID_Start=_f}', "");
Error('\p{Is_IDS= False/a/}');
Error('\P{Is_IDS= False/a/}');
Expect(1, 64, '\p{Is_IDS=false}', "");
Expect(0, 64, '\p{^Is_IDS=false}', "");
Expect(0, 64, '\P{Is_IDS=false}', "");
Expect(1, 64, '\P{^Is_IDS=false}', "");
Expect(0, 90, '\p{Is_IDS=false}', "");
Expect(1, 90, '\p{^Is_IDS=false}', "");
Expect(1, 90, '\P{Is_IDS=false}', "");
Expect(0, 90, '\P{^Is_IDS=false}', "");
Expect(1, 64, '\p{Is_IDS=		false}', "");
Expect(0, 64, '\p{^Is_IDS=		false}', "");
Expect(0, 64, '\P{Is_IDS=		false}', "");
Expect(1, 64, '\P{^Is_IDS=		false}', "");
Expect(0, 90, '\p{Is_IDS=		false}', "");
Expect(1, 90, '\p{^Is_IDS=		false}', "");
Expect(1, 90, '\P{Is_IDS=		false}', "");
Expect(0, 90, '\P{^Is_IDS=		false}', "");
Error('\p{NFC_Quick_Check=-Yes:=}');
Error('\P{NFC_Quick_Check=-Yes:=}');
Expect(1, 767, '\p{NFC_Quick_Check:yes}', "");
Expect(0, 767, '\p{^NFC_Quick_Check:yes}', "");
Expect(0, 767, '\P{NFC_Quick_Check:yes}', "");
Expect(1, 767, '\P{^NFC_Quick_Check:yes}', "");
Expect(0, 772, '\p{NFC_Quick_Check:yes}', "");
Expect(1, 772, '\p{^NFC_Quick_Check:yes}', "");
Expect(1, 772, '\P{NFC_Quick_Check:yes}', "");
Expect(0, 772, '\P{^NFC_Quick_Check:yes}', "");
Expect(1, 767, '\p{NFC_Quick_Check=-	Yes}', "");
Expect(0, 767, '\p{^NFC_Quick_Check=-	Yes}', "");
Expect(0, 767, '\P{NFC_Quick_Check=-	Yes}', "");
Expect(1, 767, '\P{^NFC_Quick_Check=-	Yes}', "");
Expect(0, 772, '\p{NFC_Quick_Check=-	Yes}', "");
Expect(1, 772, '\p{^NFC_Quick_Check=-	Yes}', "");
Expect(1, 772, '\P{NFC_Quick_Check=-	Yes}', "");
Expect(0, 772, '\P{^NFC_Quick_Check=-	Yes}', "");
Error('\p{NFC_QC=__y/a/}');
Error('\P{NFC_QC=__y/a/}');
Expect(1, 767, '\p{NFC_QC=y}', "");
Expect(0, 767, '\p{^NFC_QC=y}', "");
Expect(0, 767, '\P{NFC_QC=y}', "");
Expect(1, 767, '\P{^NFC_QC=y}', "");
Expect(0, 772, '\p{NFC_QC=y}', "");
Expect(1, 772, '\p{^NFC_QC=y}', "");
Expect(1, 772, '\P{NFC_QC=y}', "");
Expect(0, 772, '\P{^NFC_QC=y}', "");
Expect(1, 767, '\p{NFC_QC=-	Y}', "");
Expect(0, 767, '\p{^NFC_QC=-	Y}', "");
Expect(0, 767, '\P{NFC_QC=-	Y}', "");
Expect(1, 767, '\P{^NFC_QC=-	Y}', "");
Expect(0, 772, '\p{NFC_QC=-	Y}', "");
Expect(1, 772, '\p{^NFC_QC=-	Y}', "");
Expect(1, 772, '\P{NFC_QC=-	Y}', "");
Expect(0, 772, '\P{^NFC_QC=-	Y}', "");
Error('\p{Is_NFC_Quick_Check=	:=Yes}');
Error('\P{Is_NFC_Quick_Check=	:=Yes}');
Expect(1, 767, '\p{Is_NFC_Quick_Check=yes}', "");
Expect(0, 767, '\p{^Is_NFC_Quick_Check=yes}', "");
Expect(0, 767, '\P{Is_NFC_Quick_Check=yes}', "");
Expect(1, 767, '\P{^Is_NFC_Quick_Check=yes}', "");
Expect(0, 772, '\p{Is_NFC_Quick_Check=yes}', "");
Expect(1, 772, '\p{^Is_NFC_Quick_Check=yes}', "");
Expect(1, 772, '\P{Is_NFC_Quick_Check=yes}', "");
Expect(0, 772, '\P{^Is_NFC_Quick_Check=yes}', "");
Expect(1, 767, '\p{Is_NFC_Quick_Check= yes}', "");
Expect(0, 767, '\p{^Is_NFC_Quick_Check= yes}', "");
Expect(0, 767, '\P{Is_NFC_Quick_Check= yes}', "");
Expect(1, 767, '\P{^Is_NFC_Quick_Check= yes}', "");
Expect(0, 772, '\p{Is_NFC_Quick_Check= yes}', "");
Expect(1, 772, '\p{^Is_NFC_Quick_Check= yes}', "");
Expect(1, 772, '\P{Is_NFC_Quick_Check= yes}', "");
Expect(0, 772, '\P{^Is_NFC_Quick_Check= yes}', "");
Error('\p{Is_NFC_QC:   _-Y:=}');
Error('\P{Is_NFC_QC:   _-Y:=}');
Expect(1, 767, '\p{Is_NFC_QC=y}', "");
Expect(0, 767, '\p{^Is_NFC_QC=y}', "");
Expect(0, 767, '\P{Is_NFC_QC=y}', "");
Expect(1, 767, '\P{^Is_NFC_QC=y}', "");
Expect(0, 772, '\p{Is_NFC_QC=y}', "");
Expect(1, 772, '\p{^Is_NFC_QC=y}', "");
Expect(1, 772, '\P{Is_NFC_QC=y}', "");
Expect(0, 772, '\P{^Is_NFC_QC=y}', "");
Expect(1, 767, '\p{Is_NFC_QC:	- Y}', "");
Expect(0, 767, '\p{^Is_NFC_QC:	- Y}', "");
Expect(0, 767, '\P{Is_NFC_QC:	- Y}', "");
Expect(1, 767, '\P{^Is_NFC_QC:	- Y}', "");
Expect(0, 772, '\p{Is_NFC_QC:	- Y}', "");
Expect(1, 772, '\p{^Is_NFC_QC:	- Y}', "");
Expect(1, 772, '\P{Is_NFC_QC:	- Y}', "");
Expect(0, 772, '\P{^Is_NFC_QC:	- Y}', "");
Error('\p{NFC_Quick_Check:	:=- No}');
Error('\P{NFC_Quick_Check:	:=- No}');
Expect(1, 833, '\p{NFC_Quick_Check=no}', "");
Expect(0, 833, '\p{^NFC_Quick_Check=no}', "");
Expect(0, 833, '\P{NFC_Quick_Check=no}', "");
Expect(1, 833, '\P{^NFC_Quick_Check=no}', "");
Expect(0, 831, '\p{NFC_Quick_Check=no}', "");
Expect(1, 831, '\p{^NFC_Quick_Check=no}', "");
Expect(1, 831, '\P{NFC_Quick_Check=no}', "");
Expect(0, 831, '\P{^NFC_Quick_Check=no}', "");
Expect(1, 833, '\p{NFC_Quick_Check= -No}', "");
Expect(0, 833, '\p{^NFC_Quick_Check= -No}', "");
Expect(0, 833, '\P{NFC_Quick_Check= -No}', "");
Expect(1, 833, '\P{^NFC_Quick_Check= -No}', "");
Expect(0, 831, '\p{NFC_Quick_Check= -No}', "");
Expect(1, 831, '\p{^NFC_Quick_Check= -No}', "");
Expect(1, 831, '\P{NFC_Quick_Check= -No}', "");
Expect(0, 831, '\P{^NFC_Quick_Check= -No}', "");
Error('\p{NFC_QC=/a/-	n}');
Error('\P{NFC_QC=/a/-	n}');
Expect(1, 833, '\p{NFC_QC=n}', "");
Expect(0, 833, '\p{^NFC_QC=n}', "");
Expect(0, 833, '\P{NFC_QC=n}', "");
Expect(1, 833, '\P{^NFC_QC=n}', "");
Expect(0, 831, '\p{NFC_QC=n}', "");
Expect(1, 831, '\p{^NFC_QC=n}', "");
Expect(1, 831, '\P{NFC_QC=n}', "");
Expect(0, 831, '\P{^NFC_QC=n}', "");
Expect(1, 833, '\p{NFC_QC=	 N}', "");
Expect(0, 833, '\p{^NFC_QC=	 N}', "");
Expect(0, 833, '\P{NFC_QC=	 N}', "");
Expect(1, 833, '\P{^NFC_QC=	 N}', "");
Expect(0, 831, '\p{NFC_QC=	 N}', "");
Expect(1, 831, '\p{^NFC_QC=	 N}', "");
Expect(1, 831, '\P{NFC_QC=	 N}', "");
Expect(0, 831, '\P{^NFC_QC=	 N}', "");
Error('\p{Is_NFC_Quick_Check=_/a/no}');
Error('\P{Is_NFC_Quick_Check=_/a/no}');
Expect(1, 833, '\p{Is_NFC_Quick_Check=no}', "");
Expect(0, 833, '\p{^Is_NFC_Quick_Check=no}', "");
Expect(0, 833, '\P{Is_NFC_Quick_Check=no}', "");
Expect(1, 833, '\P{^Is_NFC_Quick_Check=no}', "");
Expect(0, 831, '\p{Is_NFC_Quick_Check=no}', "");
Expect(1, 831, '\p{^Is_NFC_Quick_Check=no}', "");
Expect(1, 831, '\P{Is_NFC_Quick_Check=no}', "");
Expect(0, 831, '\P{^Is_NFC_Quick_Check=no}', "");
Expect(1, 833, '\p{Is_NFC_Quick_Check= _no}', "");
Expect(0, 833, '\p{^Is_NFC_Quick_Check= _no}', "");
Expect(0, 833, '\P{Is_NFC_Quick_Check= _no}', "");
Expect(1, 833, '\P{^Is_NFC_Quick_Check= _no}', "");
Expect(0, 831, '\p{Is_NFC_Quick_Check= _no}', "");
Expect(1, 831, '\p{^Is_NFC_Quick_Check= _no}', "");
Expect(1, 831, '\P{Is_NFC_Quick_Check= _no}', "");
Expect(0, 831, '\P{^Is_NFC_Quick_Check= _no}', "");
Error('\p{Is_NFC_QC: :=--N}');
Error('\P{Is_NFC_QC: :=--N}');
Expect(1, 833, '\p{Is_NFC_QC=n}', "");
Expect(0, 833, '\p{^Is_NFC_QC=n}', "");
Expect(0, 833, '\P{Is_NFC_QC=n}', "");
Expect(1, 833, '\P{^Is_NFC_QC=n}', "");
Expect(0, 831, '\p{Is_NFC_QC=n}', "");
Expect(1, 831, '\p{^Is_NFC_QC=n}', "");
Expect(1, 831, '\P{Is_NFC_QC=n}', "");
Expect(0, 831, '\P{^Is_NFC_QC=n}', "");
Expect(1, 833, '\p{Is_NFC_QC= _n}', "");
Expect(0, 833, '\p{^Is_NFC_QC= _n}', "");
Expect(0, 833, '\P{Is_NFC_QC= _n}', "");
Expect(1, 833, '\P{^Is_NFC_QC= _n}', "");
Expect(0, 831, '\p{Is_NFC_QC= _n}', "");
Expect(1, 831, '\p{^Is_NFC_QC= _n}', "");
Expect(1, 831, '\P{Is_NFC_QC= _n}', "");
Expect(0, 831, '\P{^Is_NFC_QC= _n}', "");
Error('\p{NFC_Quick_Check=:=	 Maybe}');
Error('\P{NFC_Quick_Check=:=	 Maybe}');
Expect(1, 772, '\p{NFC_Quick_Check=maybe}', "");
Expect(0, 772, '\p{^NFC_Quick_Check=maybe}', "");
Expect(0, 772, '\P{NFC_Quick_Check=maybe}', "");
Expect(1, 772, '\P{^NFC_Quick_Check=maybe}', "");
Expect(0, 767, '\p{NFC_Quick_Check=maybe}', "");
Expect(1, 767, '\p{^NFC_Quick_Check=maybe}', "");
Expect(1, 767, '\P{NFC_Quick_Check=maybe}', "");
Expect(0, 767, '\P{^NFC_Quick_Check=maybe}', "");
Error('\p{NFC_QC=:=		M}');
Error('\P{NFC_QC=:=		M}');
Expect(1, 772, '\p{NFC_QC=m}', "");
Expect(0, 772, '\p{^NFC_QC=m}', "");
Expect(0, 772, '\P{NFC_QC=m}', "");
Expect(1, 772, '\P{^NFC_QC=m}', "");
Expect(0, 767, '\p{NFC_QC=m}', "");
Expect(1, 767, '\p{^NFC_QC=m}', "");
Expect(1, 767, '\P{NFC_QC=m}', "");
Expect(0, 767, '\P{^NFC_QC=m}', "");
Expect(1, 772, '\p{NFC_QC: 	m}', "");
Expect(0, 772, '\p{^NFC_QC: 	m}', "");
Expect(0, 772, '\P{NFC_QC: 	m}', "");
Expect(1, 772, '\P{^NFC_QC: 	m}', "");
Expect(0, 767, '\p{NFC_QC: 	m}', "");
Expect(1, 767, '\p{^NFC_QC: 	m}', "");
Expect(1, 767, '\P{NFC_QC: 	m}', "");
Expect(0, 767, '\P{^NFC_QC: 	m}', "");
Error('\p{Is_NFC_Quick_Check=:= maybe}');
Error('\P{Is_NFC_Quick_Check=:= maybe}');
Expect(1, 772, '\p{Is_NFC_Quick_Check=maybe}', "");
Expect(0, 772, '\p{^Is_NFC_Quick_Check=maybe}', "");
Expect(0, 772, '\P{Is_NFC_Quick_Check=maybe}', "");
Expect(1, 772, '\P{^Is_NFC_Quick_Check=maybe}', "");
Expect(0, 767, '\p{Is_NFC_Quick_Check=maybe}', "");
Expect(1, 767, '\p{^Is_NFC_Quick_Check=maybe}', "");
Expect(1, 767, '\P{Is_NFC_Quick_Check=maybe}', "");
Expect(0, 767, '\P{^Is_NFC_Quick_Check=maybe}', "");
Expect(1, 772, '\p{Is_NFC_Quick_Check=	Maybe}', "");
Expect(0, 772, '\p{^Is_NFC_Quick_Check=	Maybe}', "");
Expect(0, 772, '\P{Is_NFC_Quick_Check=	Maybe}', "");
Expect(1, 772, '\P{^Is_NFC_Quick_Check=	Maybe}', "");
Expect(0, 767, '\p{Is_NFC_Quick_Check=	Maybe}', "");
Expect(1, 767, '\p{^Is_NFC_Quick_Check=	Maybe}', "");
Expect(1, 767, '\P{Is_NFC_Quick_Check=	Maybe}', "");
Expect(0, 767, '\P{^Is_NFC_Quick_Check=	Maybe}', "");
Error('\p{Is_NFC_QC=/a/__m}');
Error('\P{Is_NFC_QC=/a/__m}');
Expect(1, 772, '\p{Is_NFC_QC=m}', "");
Expect(0, 772, '\p{^Is_NFC_QC=m}', "");
Expect(0, 772, '\P{Is_NFC_QC=m}', "");
Expect(1, 772, '\P{^Is_NFC_QC=m}', "");
Expect(0, 767, '\p{Is_NFC_QC=m}', "");
Expect(1, 767, '\p{^Is_NFC_QC=m}', "");
Expect(1, 767, '\P{Is_NFC_QC=m}', "");
Expect(0, 767, '\P{^Is_NFC_QC=m}', "");
Expect(1, 772, '\p{Is_NFC_QC= -M}', "");
Expect(0, 772, '\p{^Is_NFC_QC= -M}', "");
Expect(0, 772, '\P{Is_NFC_QC= -M}', "");
Expect(1, 772, '\P{^Is_NFC_QC= -M}', "");
Expect(0, 767, '\p{Is_NFC_QC= -M}', "");
Expect(1, 767, '\p{^Is_NFC_QC= -M}', "");
Expect(1, 767, '\P{Is_NFC_QC= -M}', "");
Expect(0, 767, '\P{^Is_NFC_QC= -M}', "");
Error('\p{Word_Break=/a/NEWLINE}');
Error('\P{Word_Break=/a/NEWLINE}');
Expect(1, 12, '\p{Word_Break=newline}', "");
Expect(0, 12, '\p{^Word_Break=newline}', "");
Expect(0, 12, '\P{Word_Break=newline}', "");
Expect(1, 12, '\P{^Word_Break=newline}', "");
Expect(0, 10, '\p{Word_Break=newline}', "");
Expect(1, 10, '\p{^Word_Break=newline}', "");
Expect(1, 10, '\P{Word_Break=newline}', "");
Expect(0, 10, '\P{^Word_Break=newline}', "");
Expect(1, 12, '\p{Word_Break=-NEWLINE}', "");
Expect(0, 12, '\p{^Word_Break=-NEWLINE}', "");
Expect(0, 12, '\P{Word_Break=-NEWLINE}', "");
Expect(1, 12, '\P{^Word_Break=-NEWLINE}', "");
Expect(0, 10, '\p{Word_Break=-NEWLINE}', "");
Expect(1, 10, '\p{^Word_Break=-NEWLINE}', "");
Expect(1, 10, '\P{Word_Break=-NEWLINE}', "");
Expect(0, 10, '\P{^Word_Break=-NEWLINE}', "");
Error('\p{WB=:=__nl}');
Error('\P{WB=:=__nl}');
Expect(1, 12, '\p{WB=nl}', "");
Expect(0, 12, '\p{^WB=nl}', "");
Expect(0, 12, '\P{WB=nl}', "");
Expect(1, 12, '\P{^WB=nl}', "");
Expect(0, 10, '\p{WB=nl}', "");
Expect(1, 10, '\p{^WB=nl}', "");
Expect(1, 10, '\P{WB=nl}', "");
Expect(0, 10, '\P{^WB=nl}', "");
Expect(1, 12, '\p{WB=__NL}', "");
Expect(0, 12, '\p{^WB=__NL}', "");
Expect(0, 12, '\P{WB=__NL}', "");
Expect(1, 12, '\P{^WB=__NL}', "");
Expect(0, 10, '\p{WB=__NL}', "");
Expect(1, 10, '\p{^WB=__NL}', "");
Expect(1, 10, '\P{WB=__NL}', "");
Expect(0, 10, '\P{^WB=__NL}', "");
Error('\p{Is_Word_Break:/a/ _NEWLINE}');
Error('\P{Is_Word_Break:/a/ _NEWLINE}');
Expect(1, 12, '\p{Is_Word_Break=newline}', "");
Expect(0, 12, '\p{^Is_Word_Break=newline}', "");
Expect(0, 12, '\P{Is_Word_Break=newline}', "");
Expect(1, 12, '\P{^Is_Word_Break=newline}', "");
Expect(0, 10, '\p{Is_Word_Break=newline}', "");
Expect(1, 10, '\p{^Is_Word_Break=newline}', "");
Expect(1, 10, '\P{Is_Word_Break=newline}', "");
Expect(0, 10, '\P{^Is_Word_Break=newline}', "");
Expect(1, 12, '\p{Is_Word_Break:		Newline}', "");
Expect(0, 12, '\p{^Is_Word_Break:		Newline}', "");
Expect(0, 12, '\P{Is_Word_Break:		Newline}', "");
Expect(1, 12, '\P{^Is_Word_Break:		Newline}', "");
Expect(0, 10, '\p{Is_Word_Break:		Newline}', "");
Expect(1, 10, '\p{^Is_Word_Break:		Newline}', "");
Expect(1, 10, '\P{Is_Word_Break:		Newline}', "");
Expect(0, 10, '\P{^Is_Word_Break:		Newline}', "");
Error('\p{Is_WB= :=NL}');
Error('\P{Is_WB= :=NL}');
Expect(1, 12, '\p{Is_WB:	nl}', "");
Expect(0, 12, '\p{^Is_WB:	nl}', "");
Expect(0, 12, '\P{Is_WB:	nl}', "");
Expect(1, 12, '\P{^Is_WB:	nl}', "");
Expect(0, 10, '\p{Is_WB:	nl}', "");
Expect(1, 10, '\p{^Is_WB:	nl}', "");
Expect(1, 10, '\P{Is_WB:	nl}', "");
Expect(0, 10, '\P{^Is_WB:	nl}', "");
Expect(1, 12, '\p{Is_WB=NL}', "");
Expect(0, 12, '\p{^Is_WB=NL}', "");
Expect(0, 12, '\P{Is_WB=NL}', "");
Expect(1, 12, '\P{^Is_WB=NL}', "");
Expect(0, 10, '\p{Is_WB=NL}', "");
Expect(1, 10, '\p{^Is_WB=NL}', "");
Expect(1, 10, '\P{Is_WB=NL}', "");
Expect(0, 10, '\P{^Is_WB=NL}', "");
Error('\p{Word_Break=/a/ALetter}');
Error('\P{Word_Break=/a/ALetter}');
Expect(1, 90, '\p{Word_Break=aletter}', "");
Expect(0, 90, '\p{^Word_Break=aletter}', "");
Expect(0, 90, '\P{Word_Break=aletter}', "");
Expect(1, 90, '\P{^Word_Break=aletter}', "");
Expect(0, 64, '\p{Word_Break=aletter}', "");
Expect(1, 64, '\p{^Word_Break=aletter}', "");
Expect(1, 64, '\P{Word_Break=aletter}', "");
Expect(0, 64, '\P{^Word_Break=aletter}', "");
Expect(1, 90, '\p{Word_Break:		ALetter}', "");
Expect(0, 90, '\p{^Word_Break:		ALetter}', "");
Expect(0, 90, '\P{Word_Break:		ALetter}', "");
Expect(1, 90, '\P{^Word_Break:		ALetter}', "");
Expect(0, 64, '\p{Word_Break:		ALetter}', "");
Expect(1, 64, '\p{^Word_Break:		ALetter}', "");
Expect(1, 64, '\P{Word_Break:		ALetter}', "");
Expect(0, 64, '\P{^Word_Break:		ALetter}', "");
Error('\p{WB:-_LE:=}');
Error('\P{WB:-_LE:=}');
Expect(1, 90, '\p{WB=le}', "");
Expect(0, 90, '\p{^WB=le}', "");
Expect(0, 90, '\P{WB=le}', "");
Expect(1, 90, '\P{^WB=le}', "");
Expect(0, 64, '\p{WB=le}', "");
Expect(1, 64, '\p{^WB=le}', "");
Expect(1, 64, '\P{WB=le}', "");
Expect(0, 64, '\P{^WB=le}', "");
Expect(1, 90, '\p{WB=	LE}', "");
Expect(0, 90, '\p{^WB=	LE}', "");
Expect(0, 90, '\P{WB=	LE}', "");
Expect(1, 90, '\P{^WB=	LE}', "");
Expect(0, 64, '\p{WB=	LE}', "");
Expect(1, 64, '\p{^WB=	LE}', "");
Expect(1, 64, '\P{WB=	LE}', "");
Expect(0, 64, '\P{^WB=	LE}', "");
Error('\p{Is_Word_Break=/a/__ALetter}');
Error('\P{Is_Word_Break=/a/__ALetter}');
Expect(1, 90, '\p{Is_Word_Break=aletter}', "");
Expect(0, 90, '\p{^Is_Word_Break=aletter}', "");
Expect(0, 90, '\P{Is_Word_Break=aletter}', "");
Expect(1, 90, '\P{^Is_Word_Break=aletter}', "");
Expect(0, 64, '\p{Is_Word_Break=aletter}', "");
Expect(1, 64, '\p{^Is_Word_Break=aletter}', "");
Expect(1, 64, '\P{Is_Word_Break=aletter}', "");
Expect(0, 64, '\P{^Is_Word_Break=aletter}', "");
Expect(1, 90, '\p{Is_Word_Break=ALETTER}', "");
Expect(0, 90, '\p{^Is_Word_Break=ALETTER}', "");
Expect(0, 90, '\P{Is_Word_Break=ALETTER}', "");
Expect(1, 90, '\P{^Is_Word_Break=ALETTER}', "");
Expect(0, 64, '\p{Is_Word_Break=ALETTER}', "");
Expect(1, 64, '\p{^Is_Word_Break=ALETTER}', "");
Expect(1, 64, '\P{Is_Word_Break=ALETTER}', "");
Expect(0, 64, '\P{^Is_Word_Break=ALETTER}', "");
Error('\p{Is_WB= 	LE/a/}');
Error('\P{Is_WB= 	LE/a/}');
Expect(1, 90, '\p{Is_WB=le}', "");
Expect(0, 90, '\p{^Is_WB=le}', "");
Expect(0, 90, '\P{Is_WB=le}', "");
Expect(1, 90, '\P{^Is_WB=le}', "");
Expect(0, 64, '\p{Is_WB=le}', "");
Expect(1, 64, '\p{^Is_WB=le}', "");
Expect(1, 64, '\P{Is_WB=le}', "");
Expect(0, 64, '\P{^Is_WB=le}', "");
Expect(1, 90, '\p{Is_WB=LE}', "");
Expect(0, 90, '\p{^Is_WB=LE}', "");
Expect(0, 90, '\P{Is_WB=LE}', "");
Expect(1, 90, '\P{^Is_WB=LE}', "");
Expect(0, 64, '\p{Is_WB=LE}', "");
Expect(1, 64, '\p{^Is_WB=LE}', "");
Expect(1, 64, '\P{Is_WB=LE}', "");
Expect(0, 64, '\P{^Is_WB=LE}', "");
Error('\p{Word_Break=/a/cr}');
Error('\P{Word_Break=/a/cr}');
Expect(1, 13, '\p{Word_Break=cr}', "");
Expect(0, 13, '\p{^Word_Break=cr}', "");
Expect(0, 13, '\P{Word_Break=cr}', "");
Expect(1, 13, '\P{^Word_Break=cr}', "");
Expect(0, 12, '\p{Word_Break=cr}', "");
Expect(1, 12, '\p{^Word_Break=cr}', "");
Expect(1, 12, '\P{Word_Break=cr}', "");
Expect(0, 12, '\P{^Word_Break=cr}', "");
Expect(1, 13, '\p{Word_Break=-_CR}', "");
Expect(0, 13, '\p{^Word_Break=-_CR}', "");
Expect(0, 13, '\P{Word_Break=-_CR}', "");
Expect(1, 13, '\P{^Word_Break=-_CR}', "");
Expect(0, 12, '\p{Word_Break=-_CR}', "");
Expect(1, 12, '\p{^Word_Break=-_CR}', "");
Expect(1, 12, '\P{Word_Break=-_CR}', "");
Expect(0, 12, '\P{^Word_Break=-_CR}', "");
Error('\p{WB=_/a/CR}');
Error('\P{WB=_/a/CR}');
Expect(1, 13, '\p{WB=cr}', "");
Expect(0, 13, '\p{^WB=cr}', "");
Expect(0, 13, '\P{WB=cr}', "");
Expect(1, 13, '\P{^WB=cr}', "");
Expect(0, 12, '\p{WB=cr}', "");
Expect(1, 12, '\p{^WB=cr}', "");
Expect(1, 12, '\P{WB=cr}', "");
Expect(0, 12, '\P{^WB=cr}', "");
Expect(1, 13, '\p{WB=		cr}', "");
Expect(0, 13, '\p{^WB=		cr}', "");
Expect(0, 13, '\P{WB=		cr}', "");
Expect(1, 13, '\P{^WB=		cr}', "");
Expect(0, 12, '\p{WB=		cr}', "");
Expect(1, 12, '\p{^WB=		cr}', "");
Expect(1, 12, '\P{WB=		cr}', "");
Expect(0, 12, '\P{^WB=		cr}', "");
Error('\p{Is_Word_Break=/a/__CR}');
Error('\P{Is_Word_Break=/a/__CR}');
Expect(1, 13, '\p{Is_Word_Break:   cr}', "");
Expect(0, 13, '\p{^Is_Word_Break:   cr}', "");
Expect(0, 13, '\P{Is_Word_Break:   cr}', "");
Expect(1, 13, '\P{^Is_Word_Break:   cr}', "");
Expect(0, 12, '\p{Is_Word_Break:   cr}', "");
Expect(1, 12, '\p{^Is_Word_Break:   cr}', "");
Expect(1, 12, '\P{Is_Word_Break:   cr}', "");
Expect(0, 12, '\P{^Is_Word_Break:   cr}', "");
Expect(1, 13, '\p{Is_Word_Break= _CR}', "");
Expect(0, 13, '\p{^Is_Word_Break= _CR}', "");
Expect(0, 13, '\P{Is_Word_Break= _CR}', "");
Expect(1, 13, '\P{^Is_Word_Break= _CR}', "");
Expect(0, 12, '\p{Is_Word_Break= _CR}', "");
Expect(1, 12, '\p{^Is_Word_Break= _CR}', "");
Expect(1, 12, '\P{Is_Word_Break= _CR}', "");
Expect(0, 12, '\P{^Is_Word_Break= _CR}', "");
Error('\p{Is_WB=/a/_	CR}');
Error('\P{Is_WB=/a/_	CR}');
Expect(1, 13, '\p{Is_WB=cr}', "");
Expect(0, 13, '\p{^Is_WB=cr}', "");
Expect(0, 13, '\P{Is_WB=cr}', "");
Expect(1, 13, '\P{^Is_WB=cr}', "");
Expect(0, 12, '\p{Is_WB=cr}', "");
Expect(1, 12, '\p{^Is_WB=cr}', "");
Expect(1, 12, '\P{Is_WB=cr}', "");
Expect(0, 12, '\P{^Is_WB=cr}', "");
Expect(1, 13, '\p{Is_WB:		CR}', "");
Expect(0, 13, '\p{^Is_WB:		CR}', "");
Expect(0, 13, '\P{Is_WB:		CR}', "");
Expect(1, 13, '\P{^Is_WB:		CR}', "");
Expect(0, 12, '\p{Is_WB:		CR}', "");
Expect(1, 12, '\p{^Is_WB:		CR}', "");
Expect(1, 12, '\P{Is_WB:		CR}', "");
Expect(0, 12, '\P{^Is_WB:		CR}', "");
Error('\p{Word_Break:   	:=OTHER}');
Error('\P{Word_Break:   	:=OTHER}');
Expect(1, 9, '\p{Word_Break=other}', "");
Expect(0, 9, '\p{^Word_Break=other}', "");
Expect(0, 9, '\P{Word_Break=other}', "");
Expect(1, 9, '\P{^Word_Break=other}', "");
Expect(0, 13, '\p{Word_Break=other}', "");
Expect(1, 13, '\p{^Word_Break=other}', "");
Expect(1, 13, '\P{Word_Break=other}', "");
Expect(0, 13, '\P{^Word_Break=other}', "");
Expect(1, 9, '\p{Word_Break=_Other}', "");
Expect(0, 9, '\p{^Word_Break=_Other}', "");
Expect(0, 9, '\P{Word_Break=_Other}', "");
Expect(1, 9, '\P{^Word_Break=_Other}', "");
Expect(0, 13, '\p{Word_Break=_Other}', "");
Expect(1, 13, '\p{^Word_Break=_Other}', "");
Expect(1, 13, '\P{Word_Break=_Other}', "");
Expect(0, 13, '\P{^Word_Break=_Other}', "");
Error('\p{WB= /a/XX}');
Error('\P{WB= /a/XX}');
Expect(1, 9, '\p{WB=xx}', "");
Expect(0, 9, '\p{^WB=xx}', "");
Expect(0, 9, '\P{WB=xx}', "");
Expect(1, 9, '\P{^WB=xx}', "");
Expect(0, 13, '\p{WB=xx}', "");
Expect(1, 13, '\p{^WB=xx}', "");
Expect(1, 13, '\P{WB=xx}', "");
Expect(0, 13, '\P{^WB=xx}', "");
Expect(1, 9, '\p{WB= XX}', "");
Expect(0, 9, '\p{^WB= XX}', "");
Expect(0, 9, '\P{WB= XX}', "");
Expect(1, 9, '\P{^WB= XX}', "");
Expect(0, 13, '\p{WB= XX}', "");
Expect(1, 13, '\p{^WB= XX}', "");
Expect(1, 13, '\P{WB= XX}', "");
Expect(0, 13, '\P{^WB= XX}', "");
Error('\p{Is_Word_Break=:=OTHER}');
Error('\P{Is_Word_Break=:=OTHER}');
Expect(1, 9, '\p{Is_Word_Break:   other}', "");
Expect(0, 9, '\p{^Is_Word_Break:   other}', "");
Expect(0, 9, '\P{Is_Word_Break:   other}', "");
Expect(1, 9, '\P{^Is_Word_Break:   other}', "");
Expect(0, 13, '\p{Is_Word_Break:   other}', "");
Expect(1, 13, '\p{^Is_Word_Break:   other}', "");
Expect(1, 13, '\P{Is_Word_Break:   other}', "");
Expect(0, 13, '\P{^Is_Word_Break:   other}', "");
Expect(1, 9, '\p{Is_Word_Break=__OTHER}', "");
Expect(0, 9, '\p{^Is_Word_Break=__OTHER}', "");
Expect(0, 9, '\P{Is_Word_Break=__OTHER}', "");
Expect(1, 9, '\P{^Is_Word_Break=__OTHER}', "");
Expect(0, 13, '\p{Is_Word_Break=__OTHER}', "");
Expect(1, 13, '\p{^Is_Word_Break=__OTHER}', "");
Expect(1, 13, '\P{Is_Word_Break=__OTHER}', "");
Expect(0, 13, '\P{^Is_Word_Break=__OTHER}', "");
Error('\p{Is_WB= XX/a/}');
Error('\P{Is_WB= XX/a/}');
Expect(1, 9, '\p{Is_WB=xx}', "");
Expect(0, 9, '\p{^Is_WB=xx}', "");
Expect(0, 9, '\P{Is_WB=xx}', "");
Expect(1, 9, '\P{^Is_WB=xx}', "");
Expect(0, 13, '\p{Is_WB=xx}', "");
Expect(1, 13, '\p{^Is_WB=xx}', "");
Expect(1, 13, '\P{Is_WB=xx}', "");
Expect(0, 13, '\P{^Is_WB=xx}', "");
Expect(1, 9, '\p{Is_WB=--XX}', "");
Expect(0, 9, '\p{^Is_WB=--XX}', "");
Expect(0, 9, '\P{Is_WB=--XX}', "");
Expect(1, 9, '\P{^Is_WB=--XX}', "");
Expect(0, 13, '\p{Is_WB=--XX}', "");
Expect(1, 13, '\p{^Is_WB=--XX}', "");
Expect(1, 13, '\P{Is_WB=--XX}', "");
Expect(0, 13, '\P{^Is_WB=--XX}', "");
Error('\p{Word_Break=/a/ -numeric}');
Error('\P{Word_Break=/a/ -numeric}');
Expect(1, 57, '\p{Word_Break=numeric}', "");
Expect(0, 57, '\p{^Word_Break=numeric}', "");
Expect(0, 57, '\P{Word_Break=numeric}', "");
Expect(1, 57, '\P{^Word_Break=numeric}', "");
Expect(0, 47, '\p{Word_Break=numeric}', "");
Expect(1, 47, '\p{^Word_Break=numeric}', "");
Expect(1, 47, '\P{Word_Break=numeric}', "");
Expect(0, 47, '\P{^Word_Break=numeric}', "");
Expect(1, 57, '\p{Word_Break=__NUMERIC}', "");
Expect(0, 57, '\p{^Word_Break=__NUMERIC}', "");
Expect(0, 57, '\P{Word_Break=__NUMERIC}', "");
Expect(1, 57, '\P{^Word_Break=__NUMERIC}', "");
Expect(0, 47, '\p{Word_Break=__NUMERIC}', "");
Expect(1, 47, '\p{^Word_Break=__NUMERIC}', "");
Expect(1, 47, '\P{Word_Break=__NUMERIC}', "");
Expect(0, 47, '\P{^Word_Break=__NUMERIC}', "");
Error('\p{WB=_-NU:=}');
Error('\P{WB=_-NU:=}');
Expect(1, 57, '\p{WB=nu}', "");
Expect(0, 57, '\p{^WB=nu}', "");
Expect(0, 57, '\P{WB=nu}', "");
Expect(1, 57, '\P{^WB=nu}', "");
Expect(0, 47, '\p{WB=nu}', "");
Expect(1, 47, '\p{^WB=nu}', "");
Expect(1, 47, '\P{WB=nu}', "");
Expect(0, 47, '\P{^WB=nu}', "");
Expect(1, 57, '\p{WB=  nu}', "");
Expect(0, 57, '\p{^WB=  nu}', "");
Expect(0, 57, '\P{WB=  nu}', "");
Expect(1, 57, '\P{^WB=  nu}', "");
Expect(0, 47, '\p{WB=  nu}', "");
Expect(1, 47, '\p{^WB=  nu}', "");
Expect(1, 47, '\P{WB=  nu}', "");
Expect(0, 47, '\P{^WB=  nu}', "");
Error('\p{Is_Word_Break=:=		NUMERIC}');
Error('\P{Is_Word_Break=:=		NUMERIC}');
Expect(1, 57, '\p{Is_Word_Break=numeric}', "");
Expect(0, 57, '\p{^Is_Word_Break=numeric}', "");
Expect(0, 57, '\P{Is_Word_Break=numeric}', "");
Expect(1, 57, '\P{^Is_Word_Break=numeric}', "");
Expect(0, 47, '\p{Is_Word_Break=numeric}', "");
Expect(1, 47, '\p{^Is_Word_Break=numeric}', "");
Expect(1, 47, '\P{Is_Word_Break=numeric}', "");
Expect(0, 47, '\P{^Is_Word_Break=numeric}', "");
Expect(1, 57, '\p{Is_Word_Break=		numeric}', "");
Expect(0, 57, '\p{^Is_Word_Break=		numeric}', "");
Expect(0, 57, '\P{Is_Word_Break=		numeric}', "");
Expect(1, 57, '\P{^Is_Word_Break=		numeric}', "");
Expect(0, 47, '\p{Is_Word_Break=		numeric}', "");
Expect(1, 47, '\p{^Is_Word_Break=		numeric}', "");
Expect(1, 47, '\P{Is_Word_Break=		numeric}', "");
Expect(0, 47, '\P{^Is_Word_Break=		numeric}', "");
Error('\p{Is_WB=:= NU}');
Error('\P{Is_WB=:= NU}');
Expect(1, 57, '\p{Is_WB=nu}', "");
Expect(0, 57, '\p{^Is_WB=nu}', "");
Expect(0, 57, '\P{Is_WB=nu}', "");
Expect(1, 57, '\P{^Is_WB=nu}', "");
Expect(0, 47, '\p{Is_WB=nu}', "");
Expect(1, 47, '\p{^Is_WB=nu}', "");
Expect(1, 47, '\P{Is_WB=nu}', "");
Expect(0, 47, '\P{^Is_WB=nu}', "");
Expect(1, 57, '\p{Is_WB= -NU}', "");
Expect(0, 57, '\p{^Is_WB= -NU}', "");
Expect(0, 57, '\P{Is_WB= -NU}', "");
Expect(1, 57, '\P{^Is_WB= -NU}', "");
Expect(0, 47, '\p{Is_WB= -NU}', "");
Expect(1, 47, '\p{^Is_WB= -NU}', "");
Expect(1, 47, '\P{Is_WB= -NU}', "");
Expect(0, 47, '\P{^Is_WB= -NU}', "");
Error('\p{Word_Break=-FORMAT:=}');
Error('\P{Word_Break=-FORMAT:=}');
Expect(1, 173, '\p{Word_Break=format}', "");
Expect(0, 173, '\p{^Word_Break=format}', "");
Expect(0, 173, '\P{Word_Break=format}', "");
Expect(1, 173, '\P{^Word_Break=format}', "");
Expect(0, 172, '\p{Word_Break=format}', "");
Expect(1, 172, '\p{^Word_Break=format}', "");
Expect(1, 172, '\P{Word_Break=format}', "");
Expect(0, 172, '\P{^Word_Break=format}', "");
Expect(1, 173, '\p{Word_Break=-	Format}', "");
Expect(0, 173, '\p{^Word_Break=-	Format}', "");
Expect(0, 173, '\P{Word_Break=-	Format}', "");
Expect(1, 173, '\P{^Word_Break=-	Format}', "");
Expect(0, 172, '\p{Word_Break=-	Format}', "");
Expect(1, 172, '\p{^Word_Break=-	Format}', "");
Expect(1, 172, '\P{Word_Break=-	Format}', "");
Expect(0, 172, '\P{^Word_Break=-	Format}', "");
Error('\p{WB:   _fo/a/}');
Error('\P{WB:   _fo/a/}');
Expect(1, 173, '\p{WB=fo}', "");
Expect(0, 173, '\p{^WB=fo}', "");
Expect(0, 173, '\P{WB=fo}', "");
Expect(1, 173, '\P{^WB=fo}', "");
Expect(0, 172, '\p{WB=fo}', "");
Expect(1, 172, '\p{^WB=fo}', "");
Expect(1, 172, '\P{WB=fo}', "");
Expect(0, 172, '\P{^WB=fo}', "");
Expect(1, 173, '\p{WB= 	FO}', "");
Expect(0, 173, '\p{^WB= 	FO}', "");
Expect(0, 173, '\P{WB= 	FO}', "");
Expect(1, 173, '\P{^WB= 	FO}', "");
Expect(0, 172, '\p{WB= 	FO}', "");
Expect(1, 172, '\p{^WB= 	FO}', "");
Expect(1, 172, '\P{WB= 	FO}', "");
Expect(0, 172, '\P{^WB= 	FO}', "");
Error('\p{Is_Word_Break:/a/ format}');
Error('\P{Is_Word_Break:/a/ format}');
Expect(1, 173, '\p{Is_Word_Break=format}', "");
Expect(0, 173, '\p{^Is_Word_Break=format}', "");
Expect(0, 173, '\P{Is_Word_Break=format}', "");
Expect(1, 173, '\P{^Is_Word_Break=format}', "");
Expect(0, 172, '\p{Is_Word_Break=format}', "");
Expect(1, 172, '\p{^Is_Word_Break=format}', "");
Expect(1, 172, '\P{Is_Word_Break=format}', "");
Expect(0, 172, '\P{^Is_Word_Break=format}', "");
Expect(1, 173, '\p{Is_Word_Break=	format}', "");
Expect(0, 173, '\p{^Is_Word_Break=	format}', "");
Expect(0, 173, '\P{Is_Word_Break=	format}', "");
Expect(1, 173, '\P{^Is_Word_Break=	format}', "");
Expect(0, 172, '\p{Is_Word_Break=	format}', "");
Expect(1, 172, '\p{^Is_Word_Break=	format}', "");
Expect(1, 172, '\P{Is_Word_Break=	format}', "");
Expect(0, 172, '\P{^Is_Word_Break=	format}', "");
Error('\p{Is_WB=	FO:=}');
Error('\P{Is_WB=	FO:=}');
Expect(1, 173, '\p{Is_WB=fo}', "");
Expect(0, 173, '\p{^Is_WB=fo}', "");
Expect(0, 173, '\P{Is_WB=fo}', "");
Expect(1, 173, '\P{^Is_WB=fo}', "");
Expect(0, 172, '\p{Is_WB=fo}', "");
Expect(1, 172, '\p{^Is_WB=fo}', "");
Expect(1, 172, '\P{Is_WB=fo}', "");
Expect(0, 172, '\P{^Is_WB=fo}', "");
Expect(1, 173, '\p{Is_WB=		FO}', "");
Expect(0, 173, '\p{^Is_WB=		FO}', "");
Expect(0, 173, '\P{Is_WB=		FO}', "");
Expect(1, 173, '\P{^Is_WB=		FO}', "");
Expect(0, 172, '\p{Is_WB=		FO}', "");
Expect(1, 172, '\p{^Is_WB=		FO}', "");
Expect(1, 172, '\P{Is_WB=		FO}', "");
Expect(0, 172, '\P{^Is_WB=		FO}', "");
Error('\p{Word_Break=:=_	ExtendNumLet}');
Error('\P{Word_Break=:=_	ExtendNumLet}');
Expect(1, 95, '\p{Word_Break=extendnumlet}', "");
Expect(0, 95, '\p{^Word_Break=extendnumlet}', "");
Expect(0, 95, '\P{Word_Break=extendnumlet}', "");
Expect(1, 95, '\P{^Word_Break=extendnumlet}', "");
Expect(0, 94, '\p{Word_Break=extendnumlet}', "");
Expect(1, 94, '\p{^Word_Break=extendnumlet}', "");
Expect(1, 94, '\P{Word_Break=extendnumlet}', "");
Expect(0, 94, '\P{^Word_Break=extendnumlet}', "");
Expect(1, 95, '\p{Word_Break=		ExtendNumLet}', "");
Expect(0, 95, '\p{^Word_Break=		ExtendNumLet}', "");
Expect(0, 95, '\P{Word_Break=		ExtendNumLet}', "");
Expect(1, 95, '\P{^Word_Break=		ExtendNumLet}', "");
Expect(0, 94, '\p{Word_Break=		ExtendNumLet}', "");
Expect(1, 94, '\p{^Word_Break=		ExtendNumLet}', "");
Expect(1, 94, '\P{Word_Break=		ExtendNumLet}', "");
Expect(0, 94, '\P{^Word_Break=		ExtendNumLet}', "");
Error('\p{WB=/a/	 EX}');
Error('\P{WB=/a/	 EX}');
Expect(1, 95, '\p{WB=ex}', "");
Expect(0, 95, '\p{^WB=ex}', "");
Expect(0, 95, '\P{WB=ex}', "");
Expect(1, 95, '\P{^WB=ex}', "");
Expect(0, 94, '\p{WB=ex}', "");
Expect(1, 94, '\p{^WB=ex}', "");
Expect(1, 94, '\P{WB=ex}', "");
Expect(0, 94, '\P{^WB=ex}', "");
Expect(1, 95, '\p{WB:   -_EX}', "");
Expect(0, 95, '\p{^WB:   -_EX}', "");
Expect(0, 95, '\P{WB:   -_EX}', "");
Expect(1, 95, '\P{^WB:   -_EX}', "");
Expect(0, 94, '\p{WB:   -_EX}', "");
Expect(1, 94, '\p{^WB:   -_EX}', "");
Expect(1, 94, '\P{WB:   -_EX}', "");
Expect(0, 94, '\P{^WB:   -_EX}', "");
Error('\p{Is_Word_Break:_:=ExtendNumLet}');
Error('\P{Is_Word_Break:_:=ExtendNumLet}');
Expect(1, 95, '\p{Is_Word_Break=extendnumlet}', "");
Expect(0, 95, '\p{^Is_Word_Break=extendnumlet}', "");
Expect(0, 95, '\P{Is_Word_Break=extendnumlet}', "");
Expect(1, 95, '\P{^Is_Word_Break=extendnumlet}', "");
Expect(0, 94, '\p{Is_Word_Break=extendnumlet}', "");
Expect(1, 94, '\p{^Is_Word_Break=extendnumlet}', "");
Expect(1, 94, '\P{Is_Word_Break=extendnumlet}', "");
Expect(0, 94, '\P{^Is_Word_Break=extendnumlet}', "");
Expect(1, 95, '\p{Is_Word_Break=	ExtendNumLet}', "");
Expect(0, 95, '\p{^Is_Word_Break=	ExtendNumLet}', "");
Expect(0, 95, '\P{Is_Word_Break=	ExtendNumLet}', "");
Expect(1, 95, '\P{^Is_Word_Break=	ExtendNumLet}', "");
Expect(0, 94, '\p{Is_Word_Break=	ExtendNumLet}', "");
Expect(1, 94, '\p{^Is_Word_Break=	ExtendNumLet}', "");
Expect(1, 94, '\P{Is_Word_Break=	ExtendNumLet}', "");
Expect(0, 94, '\P{^Is_Word_Break=	ExtendNumLet}', "");
Error('\p{Is_WB= ex:=}');
Error('\P{Is_WB= ex:=}');
Expect(1, 95, '\p{Is_WB=ex}', "");
Expect(0, 95, '\p{^Is_WB=ex}', "");
Expect(0, 95, '\P{Is_WB=ex}', "");
Expect(1, 95, '\P{^Is_WB=ex}', "");
Expect(0, 94, '\p{Is_WB=ex}', "");
Expect(1, 94, '\p{^Is_WB=ex}', "");
Expect(1, 94, '\P{Is_WB=ex}', "");
Expect(0, 94, '\P{^Is_WB=ex}', "");
Expect(1, 95, '\p{Is_WB=--EX}', "");
Expect(0, 95, '\p{^Is_WB=--EX}', "");
Expect(0, 95, '\P{Is_WB=--EX}', "");
Expect(1, 95, '\P{^Is_WB=--EX}', "");
Expect(0, 94, '\p{Is_WB=--EX}', "");
Expect(1, 94, '\p{^Is_WB=--EX}', "");
Expect(1, 94, '\P{Is_WB=--EX}', "");
Expect(0, 94, '\P{^Is_WB=--EX}', "");
Error('\p{Word_Break=__Extend/a/}');
Error('\P{Word_Break=__Extend/a/}');
Expect(1, 879, '\p{Word_Break: extend}', "");
Expect(0, 879, '\p{^Word_Break: extend}', "");
Expect(0, 879, '\P{Word_Break: extend}', "");
Expect(1, 879, '\P{^Word_Break: extend}', "");
Expect(0, 767, '\p{Word_Break: extend}', "");
Expect(1, 767, '\p{^Word_Break: extend}', "");
Expect(1, 767, '\P{Word_Break: extend}', "");
Expect(0, 767, '\P{^Word_Break: extend}', "");
Expect(1, 879, '\p{Word_Break=-	Extend}', "");
Expect(0, 879, '\p{^Word_Break=-	Extend}', "");
Expect(0, 879, '\P{Word_Break=-	Extend}', "");
Expect(1, 879, '\P{^Word_Break=-	Extend}', "");
Expect(0, 767, '\p{Word_Break=-	Extend}', "");
Expect(1, 767, '\p{^Word_Break=-	Extend}', "");
Expect(1, 767, '\P{Word_Break=-	Extend}', "");
Expect(0, 767, '\P{^Word_Break=-	Extend}', "");
Error('\p{WB=:=Extend}');
Error('\P{WB=:=Extend}');
Expect(1, 879, '\p{WB=extend}', "");
Expect(0, 879, '\p{^WB=extend}', "");
Expect(0, 879, '\P{WB=extend}', "");
Expect(1, 879, '\P{^WB=extend}', "");
Expect(0, 767, '\p{WB=extend}', "");
Expect(1, 767, '\p{^WB=extend}', "");
Expect(1, 767, '\P{WB=extend}', "");
Expect(0, 767, '\P{^WB=extend}', "");
Expect(1, 879, '\p{WB=_	extend}', "");
Expect(0, 879, '\p{^WB=_	extend}', "");
Expect(0, 879, '\P{WB=_	extend}', "");
Expect(1, 879, '\P{^WB=_	extend}', "");
Expect(0, 767, '\p{WB=_	extend}', "");
Expect(1, 767, '\p{^WB=_	extend}', "");
Expect(1, 767, '\P{WB=_	extend}', "");
Expect(0, 767, '\P{^WB=_	extend}', "");
Error('\p{Is_Word_Break=	/a/Extend}');
Error('\P{Is_Word_Break=	/a/Extend}');
Expect(1, 879, '\p{Is_Word_Break=extend}', "");
Expect(0, 879, '\p{^Is_Word_Break=extend}', "");
Expect(0, 879, '\P{Is_Word_Break=extend}', "");
Expect(1, 879, '\P{^Is_Word_Break=extend}', "");
Expect(0, 767, '\p{Is_Word_Break=extend}', "");
Expect(1, 767, '\p{^Is_Word_Break=extend}', "");
Expect(1, 767, '\P{Is_Word_Break=extend}', "");
Expect(0, 767, '\P{^Is_Word_Break=extend}', "");
Expect(1, 879, '\p{Is_Word_Break=-	Extend}', "");
Expect(0, 879, '\p{^Is_Word_Break=-	Extend}', "");
Expect(0, 879, '\P{Is_Word_Break=-	Extend}', "");
Expect(1, 879, '\P{^Is_Word_Break=-	Extend}', "");
Expect(0, 767, '\p{Is_Word_Break=-	Extend}', "");
Expect(1, 767, '\p{^Is_Word_Break=-	Extend}', "");
Expect(1, 767, '\P{Is_Word_Break=-	Extend}', "");
Expect(0, 767, '\P{^Is_Word_Break=-	Extend}', "");
Error('\p{Is_WB=:=extend}');
Error('\P{Is_WB=:=extend}');
Expect(1, 879, '\p{Is_WB=extend}', "");
Expect(0, 879, '\p{^Is_WB=extend}', "");
Expect(0, 879, '\P{Is_WB=extend}', "");
Expect(1, 879, '\P{^Is_WB=extend}', "");
Expect(0, 767, '\p{Is_WB=extend}', "");
Expect(1, 767, '\p{^Is_WB=extend}', "");
Expect(1, 767, '\P{Is_WB=extend}', "");
Expect(0, 767, '\P{^Is_WB=extend}', "");
Expect(1, 879, '\p{Is_WB=EXTEND}', "");
Expect(0, 879, '\p{^Is_WB=EXTEND}', "");
Expect(0, 879, '\P{Is_WB=EXTEND}', "");
Expect(1, 879, '\P{^Is_WB=EXTEND}', "");
Expect(0, 767, '\p{Is_WB=EXTEND}', "");
Expect(1, 767, '\p{^Is_WB=EXTEND}', "");
Expect(1, 767, '\P{Is_WB=EXTEND}', "");
Expect(0, 767, '\P{^Is_WB=EXTEND}', "");
Error('\p{Word_Break= midletter/a/}');
Error('\P{Word_Break= midletter/a/}');
Expect(1, 58, '\p{Word_Break=midletter}', "");
Expect(0, 58, '\p{^Word_Break=midletter}', "");
Expect(0, 58, '\P{Word_Break=midletter}', "");
Expect(1, 58, '\P{^Word_Break=midletter}', "");
Expect(0, 57, '\p{Word_Break=midletter}', "");
Expect(1, 57, '\p{^Word_Break=midletter}', "");
Expect(1, 57, '\P{Word_Break=midletter}', "");
Expect(0, 57, '\P{^Word_Break=midletter}', "");
Expect(1, 58, '\p{Word_Break:   		midletter}', "");
Expect(0, 58, '\p{^Word_Break:   		midletter}', "");
Expect(0, 58, '\P{Word_Break:   		midletter}', "");
Expect(1, 58, '\P{^Word_Break:   		midletter}', "");
Expect(0, 57, '\p{Word_Break:   		midletter}', "");
Expect(1, 57, '\p{^Word_Break:   		midletter}', "");
Expect(1, 57, '\P{Word_Break:   		midletter}', "");
Expect(0, 57, '\P{^Word_Break:   		midletter}', "");
Error('\p{WB=/a/		ML}');
Error('\P{WB=/a/		ML}');
Expect(1, 58, '\p{WB=ml}', "");
Expect(0, 58, '\p{^WB=ml}', "");
Expect(0, 58, '\P{WB=ml}', "");
Expect(1, 58, '\P{^WB=ml}', "");
Expect(0, 57, '\p{WB=ml}', "");
Expect(1, 57, '\p{^WB=ml}', "");
Expect(1, 57, '\P{WB=ml}', "");
Expect(0, 57, '\P{^WB=ml}', "");
Expect(1, 58, '\p{WB=--ML}', "");
Expect(0, 58, '\p{^WB=--ML}', "");
Expect(0, 58, '\P{WB=--ML}', "");
Expect(1, 58, '\P{^WB=--ML}', "");
Expect(0, 57, '\p{WB=--ML}', "");
Expect(1, 57, '\p{^WB=--ML}', "");
Expect(1, 57, '\P{WB=--ML}', "");
Expect(0, 57, '\P{^WB=--ML}', "");
Error('\p{Is_Word_Break=:=- midletter}');
Error('\P{Is_Word_Break=:=- midletter}');
Expect(1, 58, '\p{Is_Word_Break=midletter}', "");
Expect(0, 58, '\p{^Is_Word_Break=midletter}', "");
Expect(0, 58, '\P{Is_Word_Break=midletter}', "");
Expect(1, 58, '\P{^Is_Word_Break=midletter}', "");
Expect(0, 57, '\p{Is_Word_Break=midletter}', "");
Expect(1, 57, '\p{^Is_Word_Break=midletter}', "");
Expect(1, 57, '\P{Is_Word_Break=midletter}', "");
Expect(0, 57, '\P{^Is_Word_Break=midletter}', "");
Expect(1, 58, '\p{Is_Word_Break:  midletter}', "");
Expect(0, 58, '\p{^Is_Word_Break:  midletter}', "");
Expect(0, 58, '\P{Is_Word_Break:  midletter}', "");
Expect(1, 58, '\P{^Is_Word_Break:  midletter}', "");
Expect(0, 57, '\p{Is_Word_Break:  midletter}', "");
Expect(1, 57, '\p{^Is_Word_Break:  midletter}', "");
Expect(1, 57, '\P{Is_Word_Break:  midletter}', "");
Expect(0, 57, '\P{^Is_Word_Break:  midletter}', "");
Error('\p{Is_WB=_ML/a/}');
Error('\P{Is_WB=_ML/a/}');
Expect(1, 58, '\p{Is_WB=ml}', "");
Expect(0, 58, '\p{^Is_WB=ml}', "");
Expect(0, 58, '\P{Is_WB=ml}', "");
Expect(1, 58, '\P{^Is_WB=ml}', "");
Expect(0, 57, '\p{Is_WB=ml}', "");
Expect(1, 57, '\p{^Is_WB=ml}', "");
Expect(1, 57, '\P{Is_WB=ml}', "");
Expect(0, 57, '\P{^Is_WB=ml}', "");
Expect(1, 58, '\p{Is_WB=  ml}', "");
Expect(0, 58, '\p{^Is_WB=  ml}', "");
Expect(0, 58, '\P{Is_WB=  ml}', "");
Expect(1, 58, '\P{^Is_WB=  ml}', "");
Expect(0, 57, '\p{Is_WB=  ml}', "");
Expect(1, 57, '\p{^Is_WB=  ml}', "");
Expect(1, 57, '\P{Is_WB=  ml}', "");
Expect(0, 57, '\P{^Is_WB=  ml}', "");
Error('\p{Word_Break=	MidNumLet/a/}');
Error('\P{Word_Break=	MidNumLet/a/}');
Expect(1, 39, '\p{Word_Break=midnumlet}', "");
Expect(0, 39, '\p{^Word_Break=midnumlet}', "");
Expect(0, 39, '\P{Word_Break=midnumlet}', "");
Expect(1, 39, '\P{^Word_Break=midnumlet}', "");
Expect(0, 38, '\p{Word_Break=midnumlet}', "");
Expect(1, 38, '\p{^Word_Break=midnumlet}', "");
Expect(1, 38, '\P{Word_Break=midnumlet}', "");
Expect(0, 38, '\P{^Word_Break=midnumlet}', "");
Expect(1, 39, '\p{Word_Break=_	MIDNUMLET}', "");
Expect(0, 39, '\p{^Word_Break=_	MIDNUMLET}', "");
Expect(0, 39, '\P{Word_Break=_	MIDNUMLET}', "");
Expect(1, 39, '\P{^Word_Break=_	MIDNUMLET}', "");
Expect(0, 38, '\p{Word_Break=_	MIDNUMLET}', "");
Expect(1, 38, '\p{^Word_Break=_	MIDNUMLET}', "");
Expect(1, 38, '\P{Word_Break=_	MIDNUMLET}', "");
Expect(0, 38, '\P{^Word_Break=_	MIDNUMLET}', "");
Error('\p{WB= /a/MB}');
Error('\P{WB= /a/MB}');
Expect(1, 39, '\p{WB=mb}', "");
Expect(0, 39, '\p{^WB=mb}', "");
Expect(0, 39, '\P{WB=mb}', "");
Expect(1, 39, '\P{^WB=mb}', "");
Expect(0, 38, '\p{WB=mb}', "");
Expect(1, 38, '\p{^WB=mb}', "");
Expect(1, 38, '\P{WB=mb}', "");
Expect(0, 38, '\P{^WB=mb}', "");
Expect(1, 39, '\p{WB= MB}', "");
Expect(0, 39, '\p{^WB= MB}', "");
Expect(0, 39, '\P{WB= MB}', "");
Expect(1, 39, '\P{^WB= MB}', "");
Expect(0, 38, '\p{WB= MB}', "");
Expect(1, 38, '\p{^WB= MB}', "");
Expect(1, 38, '\P{WB= MB}', "");
Expect(0, 38, '\P{^WB= MB}', "");
Error('\p{Is_Word_Break=:=-MIDNUMLET}');
Error('\P{Is_Word_Break=:=-MIDNUMLET}');
Expect(1, 39, '\p{Is_Word_Break=midnumlet}', "");
Expect(0, 39, '\p{^Is_Word_Break=midnumlet}', "");
Expect(0, 39, '\P{Is_Word_Break=midnumlet}', "");
Expect(1, 39, '\P{^Is_Word_Break=midnumlet}', "");
Expect(0, 38, '\p{Is_Word_Break=midnumlet}', "");
Expect(1, 38, '\p{^Is_Word_Break=midnumlet}', "");
Expect(1, 38, '\P{Is_Word_Break=midnumlet}', "");
Expect(0, 38, '\P{^Is_Word_Break=midnumlet}', "");
Expect(1, 39, '\p{Is_Word_Break= midnumlet}', "");
Expect(0, 39, '\p{^Is_Word_Break= midnumlet}', "");
Expect(0, 39, '\P{Is_Word_Break= midnumlet}', "");
Expect(1, 39, '\P{^Is_Word_Break= midnumlet}', "");
Expect(0, 38, '\p{Is_Word_Break= midnumlet}', "");
Expect(1, 38, '\p{^Is_Word_Break= midnumlet}', "");
Expect(1, 38, '\P{Is_Word_Break= midnumlet}', "");
Expect(0, 38, '\P{^Is_Word_Break= midnumlet}', "");
Error('\p{Is_WB=-/a/MB}');
Error('\P{Is_WB=-/a/MB}');
Expect(1, 39, '\p{Is_WB=mb}', "");
Expect(0, 39, '\p{^Is_WB=mb}', "");
Expect(0, 39, '\P{Is_WB=mb}', "");
Expect(1, 39, '\P{^Is_WB=mb}', "");
Expect(0, 38, '\p{Is_WB=mb}', "");
Expect(1, 38, '\p{^Is_WB=mb}', "");
Expect(1, 38, '\P{Is_WB=mb}', "");
Expect(0, 38, '\P{^Is_WB=mb}', "");
Error('\p{Word_Break:	_MIDNUM:=}');
Error('\P{Word_Break:	_MIDNUM:=}');
Expect(1, 44, '\p{Word_Break=midnum}', "");
Expect(0, 44, '\p{^Word_Break=midnum}', "");
Expect(0, 44, '\P{Word_Break=midnum}', "");
Expect(1, 44, '\P{^Word_Break=midnum}', "");
Expect(0, 43, '\p{Word_Break=midnum}', "");
Expect(1, 43, '\p{^Word_Break=midnum}', "");
Expect(1, 43, '\P{Word_Break=midnum}', "");
Expect(0, 43, '\P{^Word_Break=midnum}', "");
Expect(1, 44, '\p{Word_Break=  MIDNUM}', "");
Expect(0, 44, '\p{^Word_Break=  MIDNUM}', "");
Expect(0, 44, '\P{Word_Break=  MIDNUM}', "");
Expect(1, 44, '\P{^Word_Break=  MIDNUM}', "");
Expect(0, 43, '\p{Word_Break=  MIDNUM}', "");
Expect(1, 43, '\p{^Word_Break=  MIDNUM}', "");
Expect(1, 43, '\P{Word_Break=  MIDNUM}', "");
Expect(0, 43, '\P{^Word_Break=  MIDNUM}', "");
Error('\p{WB=/a/ MN}');
Error('\P{WB=/a/ MN}');
Expect(1, 44, '\p{WB=mn}', "");
Expect(0, 44, '\p{^WB=mn}', "");
Expect(0, 44, '\P{WB=mn}', "");
Expect(1, 44, '\P{^WB=mn}', "");
Expect(0, 43, '\p{WB=mn}', "");
Expect(1, 43, '\p{^WB=mn}', "");
Expect(1, 43, '\P{WB=mn}', "");
Expect(0, 43, '\P{^WB=mn}', "");
Expect(1, 44, '\p{WB=	 MN}', "");
Expect(0, 44, '\p{^WB=	 MN}', "");
Expect(0, 44, '\P{WB=	 MN}', "");
Expect(1, 44, '\P{^WB=	 MN}', "");
Expect(0, 43, '\p{WB=	 MN}', "");
Expect(1, 43, '\p{^WB=	 MN}', "");
Expect(1, 43, '\P{WB=	 MN}', "");
Expect(0, 43, '\P{^WB=	 MN}', "");
Error('\p{Is_Word_Break=		MIDNUM/a/}');
Error('\P{Is_Word_Break=		MIDNUM/a/}');
Expect(1, 44, '\p{Is_Word_Break=midnum}', "");
Expect(0, 44, '\p{^Is_Word_Break=midnum}', "");
Expect(0, 44, '\P{Is_Word_Break=midnum}', "");
Expect(1, 44, '\P{^Is_Word_Break=midnum}', "");
Expect(0, 43, '\p{Is_Word_Break=midnum}', "");
Expect(1, 43, '\p{^Is_Word_Break=midnum}', "");
Expect(1, 43, '\P{Is_Word_Break=midnum}', "");
Expect(0, 43, '\P{^Is_Word_Break=midnum}', "");
Expect(1, 44, '\p{Is_Word_Break:   MIDNUM}', "");
Expect(0, 44, '\p{^Is_Word_Break:   MIDNUM}', "");
Expect(0, 44, '\P{Is_Word_Break:   MIDNUM}', "");
Expect(1, 44, '\P{^Is_Word_Break:   MIDNUM}', "");
Expect(0, 43, '\p{Is_Word_Break:   MIDNUM}', "");
Expect(1, 43, '\p{^Is_Word_Break:   MIDNUM}', "");
Expect(1, 43, '\P{Is_Word_Break:   MIDNUM}', "");
Expect(0, 43, '\P{^Is_Word_Break:   MIDNUM}', "");
Error('\p{Is_WB=/a/- MN}');
Error('\P{Is_WB=/a/- MN}');
Expect(1, 44, '\p{Is_WB:   mn}', "");
Expect(0, 44, '\p{^Is_WB:   mn}', "");
Expect(0, 44, '\P{Is_WB:   mn}', "");
Expect(1, 44, '\P{^Is_WB:   mn}', "");
Expect(0, 43, '\p{Is_WB:   mn}', "");
Expect(1, 43, '\p{^Is_WB:   mn}', "");
Expect(1, 43, '\P{Is_WB:   mn}', "");
Expect(0, 43, '\P{^Is_WB:   mn}', "");
Expect(1, 44, '\p{Is_WB:   MN}', "");
Expect(0, 44, '\p{^Is_WB:   MN}', "");
Expect(0, 44, '\P{Is_WB:   MN}', "");
Expect(1, 44, '\P{^Is_WB:   MN}', "");
Expect(0, 43, '\p{Is_WB:   MN}', "");
Expect(1, 43, '\p{^Is_WB:   MN}', "");
Expect(1, 43, '\P{Is_WB:   MN}', "");
Expect(0, 43, '\P{^Is_WB:   MN}', "");
Error('\p{Word_Break=/a/  katakana}');
Error('\P{Word_Break=/a/  katakana}');
Expect(1, 12341, '\p{Word_Break=katakana}', "");
Expect(0, 12341, '\p{^Word_Break=katakana}', "");
Expect(0, 12341, '\P{Word_Break=katakana}', "");
Expect(1, 12341, '\P{^Word_Break=katakana}', "");
Expect(0, 12336, '\p{Word_Break=katakana}', "");
Expect(1, 12336, '\p{^Word_Break=katakana}', "");
Expect(1, 12336, '\P{Word_Break=katakana}', "");
Expect(0, 12336, '\P{^Word_Break=katakana}', "");
Expect(1, 12341, '\p{Word_Break:   		Katakana}', "");
Expect(0, 12341, '\p{^Word_Break:   		Katakana}', "");
Expect(0, 12341, '\P{Word_Break:   		Katakana}', "");
Expect(1, 12341, '\P{^Word_Break:   		Katakana}', "");
Expect(0, 12336, '\p{Word_Break:   		Katakana}', "");
Expect(1, 12336, '\p{^Word_Break:   		Katakana}', "");
Expect(1, 12336, '\P{Word_Break:   		Katakana}', "");
Expect(0, 12336, '\P{^Word_Break:   		Katakana}', "");
Error('\p{WB:		-KA/a/}');
Error('\P{WB:		-KA/a/}');
Expect(1, 12341, '\p{WB=ka}', "");
Expect(0, 12341, '\p{^WB=ka}', "");
Expect(0, 12341, '\P{WB=ka}', "");
Expect(1, 12341, '\P{^WB=ka}', "");
Expect(0, 12336, '\p{WB=ka}', "");
Expect(1, 12336, '\p{^WB=ka}', "");
Expect(1, 12336, '\P{WB=ka}', "");
Expect(0, 12336, '\P{^WB=ka}', "");
Expect(1, 12341, '\p{WB=--KA}', "");
Expect(0, 12341, '\p{^WB=--KA}', "");
Expect(0, 12341, '\P{WB=--KA}', "");
Expect(1, 12341, '\P{^WB=--KA}', "");
Expect(0, 12336, '\p{WB=--KA}', "");
Expect(1, 12336, '\p{^WB=--KA}', "");
Expect(1, 12336, '\P{WB=--KA}', "");
Expect(0, 12336, '\P{^WB=--KA}', "");
Error('\p{Is_Word_Break=/a/_katakana}');
Error('\P{Is_Word_Break=/a/_katakana}');
Expect(1, 12341, '\p{Is_Word_Break=katakana}', "");
Expect(0, 12341, '\p{^Is_Word_Break=katakana}', "");
Expect(0, 12341, '\P{Is_Word_Break=katakana}', "");
Expect(1, 12341, '\P{^Is_Word_Break=katakana}', "");
Expect(0, 12336, '\p{Is_Word_Break=katakana}', "");
Expect(1, 12336, '\p{^Is_Word_Break=katakana}', "");
Expect(1, 12336, '\P{Is_Word_Break=katakana}', "");
Expect(0, 12336, '\P{^Is_Word_Break=katakana}', "");
Expect(1, 12341, '\p{Is_Word_Break= 	katakana}', "");
Expect(0, 12341, '\p{^Is_Word_Break= 	katakana}', "");
Expect(0, 12341, '\P{Is_Word_Break= 	katakana}', "");
Expect(1, 12341, '\P{^Is_Word_Break= 	katakana}', "");
Expect(0, 12336, '\p{Is_Word_Break= 	katakana}', "");
Expect(1, 12336, '\p{^Is_Word_Break= 	katakana}', "");
Expect(1, 12336, '\P{Is_Word_Break= 	katakana}', "");
Expect(0, 12336, '\P{^Is_Word_Break= 	katakana}', "");
Error('\p{Is_WB=-:=KA}');
Error('\P{Is_WB=-:=KA}');
Expect(1, 12341, '\p{Is_WB=ka}', "");
Expect(0, 12341, '\p{^Is_WB=ka}', "");
Expect(0, 12341, '\P{Is_WB=ka}', "");
Expect(1, 12341, '\P{^Is_WB=ka}', "");
Expect(0, 12336, '\p{Is_WB=ka}', "");
Expect(1, 12336, '\p{^Is_WB=ka}', "");
Expect(1, 12336, '\P{Is_WB=ka}', "");
Expect(0, 12336, '\P{^Is_WB=ka}', "");
Expect(1, 12341, '\p{Is_WB=-	KA}', "");
Expect(0, 12341, '\p{^Is_WB=-	KA}', "");
Expect(0, 12341, '\P{Is_WB=-	KA}', "");
Expect(1, 12341, '\P{^Is_WB=-	KA}', "");
Expect(0, 12336, '\p{Is_WB=-	KA}', "");
Expect(1, 12336, '\p{^Is_WB=-	KA}', "");
Expect(1, 12336, '\P{Is_WB=-	KA}', "");
Expect(0, 12336, '\P{^Is_WB=-	KA}', "");
Error('\p{Word_Break:/a/_lf}');
Error('\P{Word_Break:/a/_lf}');
Expect(1, 10, '\p{Word_Break=lf}', "");
Expect(0, 10, '\p{^Word_Break=lf}', "");
Expect(0, 10, '\P{Word_Break=lf}', "");
Expect(1, 10, '\P{^Word_Break=lf}', "");
Expect(0, 9, '\p{Word_Break=lf}', "");
Expect(1, 9, '\p{^Word_Break=lf}', "");
Expect(1, 9, '\P{Word_Break=lf}', "");
Expect(0, 9, '\P{^Word_Break=lf}', "");
Expect(1, 10, '\p{Word_Break=-_lf}', "");
Expect(0, 10, '\p{^Word_Break=-_lf}', "");
Expect(0, 10, '\P{Word_Break=-_lf}', "");
Expect(1, 10, '\P{^Word_Break=-_lf}', "");
Expect(0, 9, '\p{Word_Break=-_lf}', "");
Expect(1, 9, '\p{^Word_Break=-_lf}', "");
Expect(1, 9, '\P{Word_Break=-_lf}', "");
Expect(0, 9, '\P{^Word_Break=-_lf}', "");
Error('\p{WB= :=LF}');
Error('\P{WB= :=LF}');
Expect(1, 10, '\p{WB=lf}', "");
Expect(0, 10, '\p{^WB=lf}', "");
Expect(0, 10, '\P{WB=lf}', "");
Expect(1, 10, '\P{^WB=lf}', "");
Expect(0, 9, '\p{WB=lf}', "");
Expect(1, 9, '\p{^WB=lf}', "");
Expect(1, 9, '\P{WB=lf}', "");
Expect(0, 9, '\P{^WB=lf}', "");
Expect(1, 10, '\p{WB:    _LF}', "");
Expect(0, 10, '\p{^WB:    _LF}', "");
Expect(0, 10, '\P{WB:    _LF}', "");
Expect(1, 10, '\P{^WB:    _LF}', "");
Expect(0, 9, '\p{WB:    _LF}', "");
Expect(1, 9, '\p{^WB:    _LF}', "");
Expect(1, 9, '\P{WB:    _LF}', "");
Expect(0, 9, '\P{^WB:    _LF}', "");
Error('\p{Is_Word_Break:	-:=LF}');
Error('\P{Is_Word_Break:	-:=LF}');
Expect(1, 10, '\p{Is_Word_Break=lf}', "");
Expect(0, 10, '\p{^Is_Word_Break=lf}', "");
Expect(0, 10, '\P{Is_Word_Break=lf}', "");
Expect(1, 10, '\P{^Is_Word_Break=lf}', "");
Expect(0, 9, '\p{Is_Word_Break=lf}', "");
Expect(1, 9, '\p{^Is_Word_Break=lf}', "");
Expect(1, 9, '\P{Is_Word_Break=lf}', "");
Expect(0, 9, '\P{^Is_Word_Break=lf}', "");
Expect(1, 10, '\p{Is_Word_Break= lf}', "");
Expect(0, 10, '\p{^Is_Word_Break= lf}', "");
Expect(0, 10, '\P{Is_Word_Break= lf}', "");
Expect(1, 10, '\P{^Is_Word_Break= lf}', "");
Expect(0, 9, '\p{Is_Word_Break= lf}', "");
Expect(1, 9, '\p{^Is_Word_Break= lf}', "");
Expect(1, 9, '\P{Is_Word_Break= lf}', "");
Expect(0, 9, '\P{^Is_Word_Break= lf}', "");
Error('\p{Is_WB=/a/	-lf}');
Error('\P{Is_WB=/a/	-lf}');
Expect(1, 10, '\p{Is_WB=lf}', "");
Expect(0, 10, '\p{^Is_WB=lf}', "");
Expect(0, 10, '\P{Is_WB=lf}', "");
Expect(1, 10, '\P{^Is_WB=lf}', "");
Expect(0, 9, '\p{Is_WB=lf}', "");
Expect(1, 9, '\p{^Is_WB=lf}', "");
Expect(1, 9, '\P{Is_WB=lf}', "");
Expect(0, 9, '\P{^Is_WB=lf}', "");
Expect(1, 10, '\p{Is_WB=_LF}', "");
Expect(0, 10, '\p{^Is_WB=_LF}', "");
Expect(0, 10, '\P{Is_WB=_LF}', "");
Expect(1, 10, '\P{^Is_WB=_LF}', "");
Expect(0, 9, '\p{Is_WB=_LF}', "");
Expect(1, 9, '\p{^Is_WB=_LF}', "");
Expect(1, 9, '\P{Is_WB=_LF}', "");
Expect(0, 9, '\P{^Is_WB=_LF}', "");
Error('\p{Changes_When_Casefolded:    -YES:=}');
Error('\P{Changes_When_Casefolded:    -YES:=}');
Expect(1, 90, '\p{Changes_When_Casefolded=yes}', "");
Expect(0, 90, '\p{^Changes_When_Casefolded=yes}', "");
Expect(0, 90, '\P{Changes_When_Casefolded=yes}', "");
Expect(1, 90, '\P{^Changes_When_Casefolded=yes}', "");
Expect(0, 64, '\p{Changes_When_Casefolded=yes}', "");
Expect(1, 64, '\p{^Changes_When_Casefolded=yes}', "");
Expect(1, 64, '\P{Changes_When_Casefolded=yes}', "");
Expect(0, 64, '\P{^Changes_When_Casefolded=yes}', "");
Expect(1, 90, '\p{Changes_When_Casefolded=	-Yes}', "");
Expect(0, 90, '\p{^Changes_When_Casefolded=	-Yes}', "");
Expect(0, 90, '\P{Changes_When_Casefolded=	-Yes}', "");
Expect(1, 90, '\P{^Changes_When_Casefolded=	-Yes}', "");
Expect(0, 64, '\p{Changes_When_Casefolded=	-Yes}', "");
Expect(1, 64, '\p{^Changes_When_Casefolded=	-Yes}', "");
Expect(1, 64, '\P{Changes_When_Casefolded=	-Yes}', "");
Expect(0, 64, '\P{^Changes_When_Casefolded=	-Yes}', "");
Error('\p{CWCF=:= y}');
Error('\P{CWCF=:= y}');
Expect(1, 90, '\p{CWCF=y}', "");
Expect(0, 90, '\p{^CWCF=y}', "");
Expect(0, 90, '\P{CWCF=y}', "");
Expect(1, 90, '\P{^CWCF=y}', "");
Expect(0, 64, '\p{CWCF=y}', "");
Expect(1, 64, '\p{^CWCF=y}', "");
Expect(1, 64, '\P{CWCF=y}', "");
Expect(0, 64, '\P{^CWCF=y}', "");
Expect(1, 90, '\p{CWCF=-_Y}', "");
Expect(0, 90, '\p{^CWCF=-_Y}', "");
Expect(0, 90, '\P{CWCF=-_Y}', "");
Expect(1, 90, '\P{^CWCF=-_Y}', "");
Expect(0, 64, '\p{CWCF=-_Y}', "");
Expect(1, 64, '\p{^CWCF=-_Y}', "");
Expect(1, 64, '\P{CWCF=-_Y}', "");
Expect(0, 64, '\P{^CWCF=-_Y}', "");
Error('\p{Is_Changes_When_Casefolded=:= t}');
Error('\P{Is_Changes_When_Casefolded=:= t}');
Expect(1, 90, '\p{Is_Changes_When_Casefolded=t}', "");
Expect(0, 90, '\p{^Is_Changes_When_Casefolded=t}', "");
Expect(0, 90, '\P{Is_Changes_When_Casefolded=t}', "");
Expect(1, 90, '\P{^Is_Changes_When_Casefolded=t}', "");
Expect(0, 64, '\p{Is_Changes_When_Casefolded=t}', "");
Expect(1, 64, '\p{^Is_Changes_When_Casefolded=t}', "");
Expect(1, 64, '\P{Is_Changes_When_Casefolded=t}', "");
Expect(0, 64, '\P{^Is_Changes_When_Casefolded=t}', "");
Expect(1, 90, '\p{Is_Changes_When_Casefolded=-_T}', "");
Expect(0, 90, '\p{^Is_Changes_When_Casefolded=-_T}', "");
Expect(0, 90, '\P{Is_Changes_When_Casefolded=-_T}', "");
Expect(1, 90, '\P{^Is_Changes_When_Casefolded=-_T}', "");
Expect(0, 64, '\p{Is_Changes_When_Casefolded=-_T}', "");
Expect(1, 64, '\p{^Is_Changes_When_Casefolded=-_T}', "");
Expect(1, 64, '\P{Is_Changes_When_Casefolded=-_T}', "");
Expect(0, 64, '\P{^Is_Changes_When_Casefolded=-_T}', "");
Error('\p{Is_CWCF=_:=TRUE}');
Error('\P{Is_CWCF=_:=TRUE}');
Expect(1, 90, '\p{Is_CWCF=true}', "");
Expect(0, 90, '\p{^Is_CWCF=true}', "");
Expect(0, 90, '\P{Is_CWCF=true}', "");
Expect(1, 90, '\P{^Is_CWCF=true}', "");
Expect(0, 64, '\p{Is_CWCF=true}', "");
Expect(1, 64, '\p{^Is_CWCF=true}', "");
Expect(1, 64, '\P{Is_CWCF=true}', "");
Expect(0, 64, '\P{^Is_CWCF=true}', "");
Expect(1, 90, '\p{Is_CWCF=-	true}', "");
Expect(0, 90, '\p{^Is_CWCF=-	true}', "");
Expect(0, 90, '\P{Is_CWCF=-	true}', "");
Expect(1, 90, '\P{^Is_CWCF=-	true}', "");
Expect(0, 64, '\p{Is_CWCF=-	true}', "");
Expect(1, 64, '\p{^Is_CWCF=-	true}', "");
Expect(1, 64, '\P{Is_CWCF=-	true}', "");
Expect(0, 64, '\P{^Is_CWCF=-	true}', "");
Error('\p{Changes_When_Casefolded=_-No/a/}');
Error('\P{Changes_When_Casefolded=_-No/a/}');
Expect(1, 64, '\p{Changes_When_Casefolded=no}', "");
Expect(0, 64, '\p{^Changes_When_Casefolded=no}', "");
Expect(0, 64, '\P{Changes_When_Casefolded=no}', "");
Expect(1, 64, '\P{^Changes_When_Casefolded=no}', "");
Expect(0, 90, '\p{Changes_When_Casefolded=no}', "");
Expect(1, 90, '\p{^Changes_When_Casefolded=no}', "");
Expect(1, 90, '\P{Changes_When_Casefolded=no}', "");
Expect(0, 90, '\P{^Changes_When_Casefolded=no}', "");
Expect(1, 64, '\p{Changes_When_Casefolded= _No}', "");
Expect(0, 64, '\p{^Changes_When_Casefolded= _No}', "");
Expect(0, 64, '\P{Changes_When_Casefolded= _No}', "");
Expect(1, 64, '\P{^Changes_When_Casefolded= _No}', "");
Expect(0, 90, '\p{Changes_When_Casefolded= _No}', "");
Expect(1, 90, '\p{^Changes_When_Casefolded= _No}', "");
Expect(1, 90, '\P{Changes_When_Casefolded= _No}', "");
Expect(0, 90, '\P{^Changes_When_Casefolded= _No}', "");
Error('\p{CWCF=/a/ N}');
Error('\P{CWCF=/a/ N}');
Expect(1, 64, '\p{CWCF=n}', "");
Expect(0, 64, '\p{^CWCF=n}', "");
Expect(0, 64, '\P{CWCF=n}', "");
Expect(1, 64, '\P{^CWCF=n}', "");
Expect(0, 90, '\p{CWCF=n}', "");
Expect(1, 90, '\p{^CWCF=n}', "");
Expect(1, 90, '\P{CWCF=n}', "");
Expect(0, 90, '\P{^CWCF=n}', "");
Expect(1, 64, '\p{CWCF= -n}', "");
Expect(0, 64, '\p{^CWCF= -n}', "");
Expect(0, 64, '\P{CWCF= -n}', "");
Expect(1, 64, '\P{^CWCF= -n}', "");
Expect(0, 90, '\p{CWCF= -n}', "");
Expect(1, 90, '\p{^CWCF= -n}', "");
Expect(1, 90, '\P{CWCF= -n}', "");
Expect(0, 90, '\P{^CWCF= -n}', "");
Error('\p{Is_Changes_When_Casefolded=- f/a/}');
Error('\P{Is_Changes_When_Casefolded=- f/a/}');
Expect(1, 64, '\p{Is_Changes_When_Casefolded=f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Casefolded=f}', "");
Expect(0, 64, '\P{Is_Changes_When_Casefolded=f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Casefolded=f}', "");
Expect(0, 90, '\p{Is_Changes_When_Casefolded=f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Casefolded=f}', "");
Expect(1, 90, '\P{Is_Changes_When_Casefolded=f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Casefolded=f}', "");
Expect(1, 64, '\p{Is_Changes_When_Casefolded=  f}', "");
Expect(0, 64, '\p{^Is_Changes_When_Casefolded=  f}', "");
Expect(0, 64, '\P{Is_Changes_When_Casefolded=  f}', "");
Expect(1, 64, '\P{^Is_Changes_When_Casefolded=  f}', "");
Expect(0, 90, '\p{Is_Changes_When_Casefolded=  f}', "");
Expect(1, 90, '\p{^Is_Changes_When_Casefolded=  f}', "");
Expect(1, 90, '\P{Is_Changes_When_Casefolded=  f}', "");
Expect(0, 90, '\P{^Is_Changes_When_Casefolded=  f}', "");
Error('\p{Is_CWCF=-/a/FALSE}');
Error('\P{Is_CWCF=-/a/FALSE}');
Expect(1, 64, '\p{Is_CWCF=false}', "");
Expect(0, 64, '\p{^Is_CWCF=false}', "");
Expect(0, 64, '\P{Is_CWCF=false}', "");
Expect(1, 64, '\P{^Is_CWCF=false}', "");
Expect(0, 90, '\p{Is_CWCF=false}', "");
Expect(1, 90, '\p{^Is_CWCF=false}', "");
Expect(1, 90, '\P{Is_CWCF=false}', "");
Expect(0, 90, '\P{^Is_CWCF=false}', "");
Expect(1, 64, '\p{Is_CWCF=	_False}', "");
Expect(0, 64, '\p{^Is_CWCF=	_False}', "");
Expect(0, 64, '\P{Is_CWCF=	_False}', "");
Expect(1, 64, '\P{^Is_CWCF=	_False}', "");
Expect(0, 90, '\p{Is_CWCF=	_False}', "");
Expect(1, 90, '\p{^Is_CWCF=	_False}', "");
Expect(1, 90, '\P{Is_CWCF=	_False}', "");
Expect(0, 90, '\P{^Is_CWCF=	_False}', "");
Error('\p{:= _gothic}');
Error('\P{:= _gothic}');
Expect(1, 66378, '\p{gothic}', "");
Expect(0, 66378, '\p{^gothic}', "");
Expect(0, 66378, '\P{gothic}', "");
Expect(1, 66378, '\P{^gothic}', "");
Expect(0, 66351, '\p{gothic}', "");
Expect(1, 66351, '\p{^gothic}', "");
Expect(1, 66351, '\P{gothic}', "");
Expect(0, 66351, '\P{^gothic}', "");
Expect(1, 66378, '\p{_-gothic}', "");
Expect(0, 66378, '\p{^_-gothic}', "");
Expect(0, 66378, '\P{_-gothic}', "");
Expect(1, 66378, '\P{^_-gothic}', "");
Expect(0, 66351, '\p{_-gothic}', "");
Expect(1, 66351, '\p{^_-gothic}', "");
Expect(1, 66351, '\P{_-gothic}', "");
Expect(0, 66351, '\P{^_-gothic}', "");
Error('\p{-_Is	Gothic/a/}');
Error('\P{-_Is	Gothic/a/}');
Expect(1, 66378, '\p{isgothic}', "");
Expect(0, 66378, '\p{^isgothic}', "");
Expect(0, 66378, '\P{isgothic}', "");
Expect(1, 66378, '\P{^isgothic}', "");
Expect(0, 66351, '\p{isgothic}', "");
Expect(1, 66351, '\p{^isgothic}', "");
Expect(1, 66351, '\P{isgothic}', "");
Expect(0, 66351, '\P{^isgothic}', "");
Expect(1, 66378, '\p{_IS	Gothic}', "");
Expect(0, 66378, '\p{^_IS	Gothic}', "");
Expect(0, 66378, '\P{_IS	Gothic}', "");
Expect(1, 66378, '\P{^_IS	Gothic}', "");
Expect(0, 66351, '\p{_IS	Gothic}', "");
Expect(1, 66351, '\p{^_IS	Gothic}', "");
Expect(1, 66351, '\P{_IS	Gothic}', "");
Expect(0, 66351, '\P{^_IS	Gothic}', "");
Error('\p{:=Goth}');
Error('\P{:=Goth}');
Expect(1, 66378, '\p{goth}', "");
Expect(0, 66378, '\p{^goth}', "");
Expect(0, 66378, '\P{goth}', "");
Expect(1, 66378, '\P{^goth}', "");
Expect(0, 66351, '\p{goth}', "");
Expect(1, 66351, '\p{^goth}', "");
Expect(1, 66351, '\P{goth}', "");
Expect(0, 66351, '\P{^goth}', "");
Expect(1, 66378, '\p{	goth}', "");
Expect(0, 66378, '\p{^	goth}', "");
Expect(0, 66378, '\P{	goth}', "");
Expect(1, 66378, '\P{^	goth}', "");
Expect(0, 66351, '\p{	goth}', "");
Expect(1, 66351, '\p{^	goth}', "");
Expect(1, 66351, '\P{	goth}', "");
Expect(0, 66351, '\P{^	goth}', "");
Error('\p{ :=Is Goth}');
Error('\P{ :=Is Goth}');
Expect(1, 66378, '\p{isgoth}', "");
Expect(0, 66378, '\p{^isgoth}', "");
Expect(0, 66378, '\P{isgoth}', "");
Expect(1, 66378, '\P{^isgoth}', "");
Expect(0, 66351, '\p{isgoth}', "");
Expect(1, 66351, '\p{^isgoth}', "");
Expect(1, 66351, '\P{isgoth}', "");
Expect(0, 66351, '\P{^isgoth}', "");
Expect(1, 66378, '\p{ 	IS_Goth}', "");
Expect(0, 66378, '\p{^ 	IS_Goth}', "");
Expect(0, 66378, '\P{ 	IS_Goth}', "");
Expect(1, 66378, '\P{^ 	IS_Goth}', "");
Expect(0, 66351, '\p{ 	IS_Goth}', "");
Expect(1, 66351, '\p{^ 	IS_Goth}', "");
Expect(1, 66351, '\P{ 	IS_Goth}', "");
Expect(0, 66351, '\P{^ 	IS_Goth}', "");
Error('\p{		BLANK:=}');
Error('\P{		BLANK:=}');
Expect(1, 9, '\p{blank}', "");
Expect(0, 9, '\p{^blank}', "");
Expect(0, 9, '\P{blank}', "");
Expect(1, 9, '\P{^blank}', "");
Expect(0, 8, '\p{blank}', "");
Expect(1, 8, '\p{^blank}', "");
Expect(1, 8, '\P{blank}', "");
Expect(0, 8, '\P{^blank}', "");
Expect(1, 9, '\p{ -Blank}', "");
Expect(0, 9, '\p{^ -Blank}', "");
Expect(0, 9, '\P{ -Blank}', "");
Expect(1, 9, '\P{^ -Blank}', "");
Expect(0, 8, '\p{ -Blank}', "");
Expect(1, 8, '\p{^ -Blank}', "");
Expect(1, 8, '\P{ -Blank}', "");
Expect(0, 8, '\P{^ -Blank}', "");
Error('\p{ 	HorizSpace:=}');
Error('\P{ 	HorizSpace:=}');
Expect(1, 9, '\p{horizspace}', "");
Expect(0, 9, '\p{^horizspace}', "");
Expect(0, 9, '\P{horizspace}', "");
Expect(1, 9, '\P{^horizspace}', "");
Expect(0, 8, '\p{horizspace}', "");
Expect(1, 8, '\p{^horizspace}', "");
Expect(1, 8, '\P{horizspace}', "");
Expect(0, 8, '\P{^horizspace}', "");
Expect(1, 9, '\p{-HORIZSPACE}', "");
Expect(0, 9, '\p{^-HORIZSPACE}', "");
Expect(0, 9, '\P{-HORIZSPACE}', "");
Expect(1, 9, '\P{^-HORIZSPACE}', "");
Expect(0, 8, '\p{-HORIZSPACE}', "");
Expect(1, 8, '\p{^-HORIZSPACE}', "");
Expect(1, 8, '\P{-HORIZSPACE}', "");
Expect(0, 8, '\P{^-HORIZSPACE}', "");
Error('\p{__IsBlank/a/}');
Error('\P{__IsBlank/a/}');
Expect(1, 9, '\p{isblank}', "");
Expect(0, 9, '\p{^isblank}', "");
Expect(0, 9, '\P{isblank}', "");
Expect(1, 9, '\P{^isblank}', "");
Expect(0, 8, '\p{isblank}', "");
Expect(1, 8, '\p{^isblank}', "");
Expect(1, 8, '\P{isblank}', "");
Expect(0, 8, '\P{^isblank}', "");
Expect(1, 9, '\p{Is-BLANK}', "");
Expect(0, 9, '\p{^Is-BLANK}', "");
Expect(0, 9, '\P{Is-BLANK}', "");
Expect(1, 9, '\P{^Is-BLANK}', "");
Expect(0, 8, '\p{Is-BLANK}', "");
Expect(1, 8, '\p{^Is-BLANK}', "");
Expect(1, 8, '\P{Is-BLANK}', "");
Expect(0, 8, '\P{^Is-BLANK}', "");
Error('\p{:=	_IS_HORIZSPACE}');
Error('\P{:=	_IS_HORIZSPACE}');
Expect(1, 9, '\p{ishorizspace}', "");
Expect(0, 9, '\p{^ishorizspace}', "");
Expect(0, 9, '\P{ishorizspace}', "");
Expect(1, 9, '\P{^ishorizspace}', "");
Expect(0, 8, '\p{ishorizspace}', "");
Expect(1, 8, '\p{^ishorizspace}', "");
Expect(1, 8, '\P{ishorizspace}', "");
Expect(0, 8, '\P{^ishorizspace}', "");
Expect(1, 9, '\p{_IS-HorizSpace}', "");
Expect(0, 9, '\p{^_IS-HorizSpace}', "");
Expect(0, 9, '\P{_IS-HorizSpace}', "");
Expect(1, 9, '\P{^_IS-HorizSpace}', "");
Expect(0, 8, '\p{_IS-HorizSpace}', "");
Expect(1, 8, '\p{^_IS-HorizSpace}', "");
Expect(1, 8, '\P{_IS-HorizSpace}', "");
Expect(0, 8, '\P{^_IS-HorizSpace}', "");
Error('\p{ Combining:=Diacritical	Marks}');
Error('\P{ Combining:=Diacritical	Marks}');
Expect(1, 879, '\p{combiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^combiningdiacriticalmarks}', "");
Expect(0, 879, '\P{combiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^combiningdiacriticalmarks}', "");
Expect(0, 767, '\p{combiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^combiningdiacriticalmarks}', "");
Expect(1, 767, '\P{combiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^combiningdiacriticalmarks}', "");
Expect(1, 879, '\p{	 COMBINING	DIACRITICAL_Marks}', "");
Expect(0, 879, '\p{^	 COMBINING	DIACRITICAL_Marks}', "");
Expect(0, 879, '\P{	 COMBINING	DIACRITICAL_Marks}', "");
Expect(1, 879, '\P{^	 COMBINING	DIACRITICAL_Marks}', "");
Expect(0, 767, '\p{	 COMBINING	DIACRITICAL_Marks}', "");
Expect(1, 767, '\p{^	 COMBINING	DIACRITICAL_Marks}', "");
Expect(1, 767, '\P{	 COMBINING	DIACRITICAL_Marks}', "");
Expect(0, 767, '\P{^	 COMBINING	DIACRITICAL_Marks}', "");
Error('\p{/a/IsCombining-Diacritical-Marks}');
Error('\P{/a/IsCombining-Diacritical-Marks}');
Expect(1, 879, '\p{iscombiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^iscombiningdiacriticalmarks}', "");
Expect(0, 879, '\P{iscombiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^iscombiningdiacriticalmarks}', "");
Expect(0, 767, '\p{iscombiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^iscombiningdiacriticalmarks}', "");
Expect(1, 767, '\P{iscombiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^iscombiningdiacriticalmarks}', "");
Expect(1, 879, '\p{	Is-Combining DIACRITICAL-MARKS}', "");
Expect(0, 879, '\p{^	Is-Combining DIACRITICAL-MARKS}', "");
Expect(0, 879, '\P{	Is-Combining DIACRITICAL-MARKS}', "");
Expect(1, 879, '\P{^	Is-Combining DIACRITICAL-MARKS}', "");
Expect(0, 767, '\p{	Is-Combining DIACRITICAL-MARKS}', "");
Expect(1, 767, '\p{^	Is-Combining DIACRITICAL-MARKS}', "");
Expect(1, 767, '\P{	Is-Combining DIACRITICAL-MARKS}', "");
Expect(0, 767, '\P{^	Is-Combining DIACRITICAL-MARKS}', "");
Error('\p{__in-COMBINING-diacritical	Marks:=}');
Error('\P{__in-COMBINING-diacritical	Marks:=}');
Expect(1, 879, '\p{incombiningdiacriticalmarks}', "");
Expect(0, 879, '\p{^incombiningdiacriticalmarks}', "");
Expect(0, 879, '\P{incombiningdiacriticalmarks}', "");
Expect(1, 879, '\P{^incombiningdiacriticalmarks}', "");
Expect(0, 767, '\p{incombiningdiacriticalmarks}', "");
Expect(1, 767, '\p{^incombiningdiacriticalmarks}', "");
Expect(1, 767, '\P{incombiningdiacriticalmarks}', "");
Expect(0, 767, '\P{^incombiningdiacriticalmarks}', "");
Expect(1, 879, '\p{_ in	CombiningDiacriticalmarks}', "");
Expect(0, 879, '\p{^_ in	CombiningDiacriticalmarks}', "");
Expect(0, 879, '\P{_ in	CombiningDiacriticalmarks}', "");
Expect(1, 879, '\P{^_ in	CombiningDiacriticalmarks}', "");
Expect(0, 767, '\p{_ in	CombiningDiacriticalmarks}', "");
Expect(1, 767, '\p{^_ in	CombiningDiacriticalmarks}', "");
Expect(1, 767, '\P{_ in	CombiningDiacriticalmarks}', "");
Expect(0, 767, '\P{^_ in	CombiningDiacriticalmarks}', "");
Error('\p{--Inscriptional Parthian:=}');
Error('\P{--Inscriptional Parthian:=}');
Expect(1, 68437, '\p{inscriptionalparthian}', "");
Expect(0, 68437, '\p{^inscriptionalparthian}', "");
Expect(0, 68437, '\P{inscriptionalparthian}', "");
Expect(1, 68437, '\P{^inscriptionalparthian}', "");
Expect(0, 68415, '\p{inscriptionalparthian}', "");
Expect(1, 68415, '\p{^inscriptionalparthian}', "");
Expect(1, 68415, '\P{inscriptionalparthian}', "");
Expect(0, 68415, '\P{^inscriptionalparthian}', "");
Expect(1, 68437, '\p{-Inscriptional	Parthian}', "");
Expect(0, 68437, '\p{^-Inscriptional	Parthian}', "");
Expect(0, 68437, '\P{-Inscriptional	Parthian}', "");
Expect(1, 68437, '\P{^-Inscriptional	Parthian}', "");
Expect(0, 68415, '\p{-Inscriptional	Parthian}', "");
Expect(1, 68415, '\p{^-Inscriptional	Parthian}', "");
Expect(1, 68415, '\P{-Inscriptional	Parthian}', "");
Expect(0, 68415, '\P{^-Inscriptional	Parthian}', "");
Error('\p{/a/Isinscriptional PARTHIAN}');
Error('\P{/a/Isinscriptional PARTHIAN}');
Expect(1, 68437, '\p{isinscriptionalparthian}', "");
Expect(0, 68437, '\p{^isinscriptionalparthian}', "");
Expect(0, 68437, '\P{isinscriptionalparthian}', "");
Expect(1, 68437, '\P{^isinscriptionalparthian}', "");
Expect(0, 68415, '\p{isinscriptionalparthian}', "");
Expect(1, 68415, '\p{^isinscriptionalparthian}', "");
Expect(1, 68415, '\P{isinscriptionalparthian}', "");
Expect(0, 68415, '\P{^isinscriptionalparthian}', "");
Expect(1, 68437, '\p{_	Is-INSCRIPTIONALPARTHIAN}', "");
Expect(0, 68437, '\p{^_	Is-INSCRIPTIONALPARTHIAN}', "");
Expect(0, 68437, '\P{_	Is-INSCRIPTIONALPARTHIAN}', "");
Expect(1, 68437, '\P{^_	Is-INSCRIPTIONALPARTHIAN}', "");
Expect(0, 68415, '\p{_	Is-INSCRIPTIONALPARTHIAN}', "");
Expect(1, 68415, '\p{^_	Is-INSCRIPTIONALPARTHIAN}', "");
Expect(1, 68415, '\P{_	Is-INSCRIPTIONALPARTHIAN}', "");
Expect(0, 68415, '\P{^_	Is-INSCRIPTIONALPARTHIAN}', "");
Error('\p{	Prti:=}');
Error('\P{	Prti:=}');
Expect(1, 68437, '\p{prti}', "");
Expect(0, 68437, '\p{^prti}', "");
Expect(0, 68437, '\P{prti}', "");
Expect(1, 68437, '\P{^prti}', "");
Expect(0, 68415, '\p{prti}', "");
Expect(1, 68415, '\p{^prti}', "");
Expect(1, 68415, '\P{prti}', "");
Expect(0, 68415, '\P{^prti}', "");
Expect(1, 68437, '\p{	Prti}', "");
Expect(0, 68437, '\p{^	Prti}', "");
Expect(0, 68437, '\P{	Prti}', "");
Expect(1, 68437, '\P{^	Prti}', "");
Expect(0, 68415, '\p{	Prti}', "");
Expect(1, 68415, '\p{^	Prti}', "");
Expect(1, 68415, '\P{	Prti}', "");
Expect(0, 68415, '\P{^	Prti}', "");
Error('\p{	IS:=PRTI}');
Error('\P{	IS:=PRTI}');
Expect(1, 68437, '\p{isprti}', "");
Expect(0, 68437, '\p{^isprti}', "");
Expect(0, 68437, '\P{isprti}', "");
Expect(1, 68437, '\P{^isprti}', "");
Expect(0, 68415, '\p{isprti}', "");
Expect(1, 68415, '\p{^isprti}', "");
Expect(1, 68415, '\P{isprti}', "");
Expect(0, 68415, '\P{^isprti}', "");
Expect(1, 68437, '\p{	-Is_prti}', "");
Expect(0, 68437, '\p{^	-Is_prti}', "");
Expect(0, 68437, '\P{	-Is_prti}', "");
Expect(1, 68437, '\P{^	-Is_prti}', "");
Expect(0, 68415, '\p{	-Is_prti}', "");
Expect(1, 68415, '\p{^	-Is_prti}', "");
Expect(1, 68415, '\P{	-Is_prti}', "");
Expect(0, 68415, '\P{^	-Is_prti}', "");
Error('\p{:=devanagari EXTENDED}');
Error('\P{:=devanagari EXTENDED}');
Expect(1, 43263, '\p{devanagariextended}', "");
Expect(0, 43263, '\p{^devanagariextended}', "");
Expect(0, 43263, '\P{devanagariextended}', "");
Expect(1, 43263, '\P{^devanagariextended}', "");
Expect(0, 43231, '\p{devanagariextended}', "");
Expect(1, 43231, '\p{^devanagariextended}', "");
Expect(1, 43231, '\P{devanagariextended}', "");
Expect(0, 43231, '\P{^devanagariextended}', "");
Expect(1, 43263, '\p{_	DEVANAGARI_EXTENDED}', "");
Expect(0, 43263, '\p{^_	DEVANAGARI_EXTENDED}', "");
Expect(0, 43263, '\P{_	DEVANAGARI_EXTENDED}', "");
Expect(1, 43263, '\P{^_	DEVANAGARI_EXTENDED}', "");
Expect(0, 43231, '\p{_	DEVANAGARI_EXTENDED}', "");
Expect(1, 43231, '\p{^_	DEVANAGARI_EXTENDED}', "");
Expect(1, 43231, '\P{_	DEVANAGARI_EXTENDED}', "");
Expect(0, 43231, '\P{^_	DEVANAGARI_EXTENDED}', "");
Error('\p{:=		IsDevanagari_EXTENDED}');
Error('\P{:=		IsDevanagari_EXTENDED}');
Expect(1, 43263, '\p{isdevanagariextended}', "");
Expect(0, 43263, '\p{^isdevanagariextended}', "");
Expect(0, 43263, '\P{isdevanagariextended}', "");
Expect(1, 43263, '\P{^isdevanagariextended}', "");
Expect(0, 43231, '\p{isdevanagariextended}', "");
Expect(1, 43231, '\p{^isdevanagariextended}', "");
Expect(1, 43231, '\P{isdevanagariextended}', "");
Expect(0, 43231, '\P{^isdevanagariextended}', "");
Expect(1, 43263, '\p{	_Is	devanagari	extended}', "");
Expect(0, 43263, '\p{^	_Is	devanagari	extended}', "");
Expect(0, 43263, '\P{	_Is	devanagari	extended}', "");
Expect(1, 43263, '\P{^	_Is	devanagari	extended}', "");
Expect(0, 43231, '\p{	_Is	devanagari	extended}', "");
Expect(1, 43231, '\p{^	_Is	devanagari	extended}', "");
Expect(1, 43231, '\P{	_Is	devanagari	extended}', "");
Expect(0, 43231, '\P{^	_Is	devanagari	extended}', "");
Error('\p{/a/ _InDEVANAGARI-extended}');
Error('\P{/a/ _InDEVANAGARI-extended}');
Expect(1, 43263, '\p{indevanagariextended}', "");
Expect(0, 43263, '\p{^indevanagariextended}', "");
Expect(0, 43263, '\P{indevanagariextended}', "");
Expect(1, 43263, '\P{^indevanagariextended}', "");
Expect(0, 43231, '\p{indevanagariextended}', "");
Expect(1, 43231, '\p{^indevanagariextended}', "");
Expect(1, 43231, '\P{indevanagariextended}', "");
Expect(0, 43231, '\P{^indevanagariextended}', "");
Expect(1, 43263, '\p{_in_DEVANAGARI	Extended}', "");
Expect(0, 43263, '\p{^_in_DEVANAGARI	Extended}', "");
Expect(0, 43263, '\P{_in_DEVANAGARI	Extended}', "");
Expect(1, 43263, '\P{^_in_DEVANAGARI	Extended}', "");
Expect(0, 43231, '\p{_in_DEVANAGARI	Extended}', "");
Expect(1, 43231, '\p{^_in_DEVANAGARI	Extended}', "");
Expect(1, 43231, '\P{_in_DEVANAGARI	Extended}', "");
Expect(0, 43231, '\P{^_in_DEVANAGARI	Extended}', "");
Error('\p{-:=ethiopic Supplement}');
Error('\P{-:=ethiopic Supplement}');
Expect(1, 5023, '\p{ethiopicsupplement}', "");
Expect(0, 5023, '\p{^ethiopicsupplement}', "");
Expect(0, 5023, '\P{ethiopicsupplement}', "");
Expect(1, 5023, '\P{^ethiopicsupplement}', "");
Expect(0, 4991, '\p{ethiopicsupplement}', "");
Expect(1, 4991, '\p{^ethiopicsupplement}', "");
Expect(1, 4991, '\P{ethiopicsupplement}', "");
Expect(0, 4991, '\P{^ethiopicsupplement}', "");
Expect(1, 5023, '\p{	 ETHIOPIC_Supplement}', "");
Expect(0, 5023, '\p{^	 ETHIOPIC_Supplement}', "");
Expect(0, 5023, '\P{	 ETHIOPIC_Supplement}', "");
Expect(1, 5023, '\P{^	 ETHIOPIC_Supplement}', "");
Expect(0, 4991, '\p{	 ETHIOPIC_Supplement}', "");
Expect(1, 4991, '\p{^	 ETHIOPIC_Supplement}', "");
Expect(1, 4991, '\P{	 ETHIOPIC_Supplement}', "");
Expect(0, 4991, '\P{^	 ETHIOPIC_Supplement}', "");
Error('\p{/a/_is Ethiopic	Supplement}');
Error('\P{/a/_is Ethiopic	Supplement}');
Expect(1, 5023, '\p{isethiopicsupplement}', "");
Expect(0, 5023, '\p{^isethiopicsupplement}', "");
Expect(0, 5023, '\P{isethiopicsupplement}', "");
Expect(1, 5023, '\P{^isethiopicsupplement}', "");
Expect(0, 4991, '\p{isethiopicsupplement}', "");
Expect(1, 4991, '\p{^isethiopicsupplement}', "");
Expect(1, 4991, '\P{isethiopicsupplement}', "");
Expect(0, 4991, '\P{^isethiopicsupplement}', "");
Expect(1, 5023, '\p{	_IS-Ethiopic	Supplement}', "");
Expect(0, 5023, '\p{^	_IS-Ethiopic	Supplement}', "");
Expect(0, 5023, '\P{	_IS-Ethiopic	Supplement}', "");
Expect(1, 5023, '\P{^	_IS-Ethiopic	Supplement}', "");
Expect(0, 4991, '\p{	_IS-Ethiopic	Supplement}', "");
Expect(1, 4991, '\p{^	_IS-Ethiopic	Supplement}', "");
Expect(1, 4991, '\P{	_IS-Ethiopic	Supplement}', "");
Expect(0, 4991, '\P{^	_IS-Ethiopic	Supplement}', "");
Error('\p{	:=InEthiopicSupplement}');
Error('\P{	:=InEthiopicSupplement}');
Expect(1, 5023, '\p{inethiopicsupplement}', "");
Expect(0, 5023, '\p{^inethiopicsupplement}', "");
Expect(0, 5023, '\P{inethiopicsupplement}', "");
Expect(1, 5023, '\P{^inethiopicsupplement}', "");
Expect(0, 4991, '\p{inethiopicsupplement}', "");
Expect(1, 4991, '\p{^inethiopicsupplement}', "");
Expect(1, 4991, '\P{inethiopicsupplement}', "");
Expect(0, 4991, '\P{^inethiopicsupplement}', "");
Expect(1, 5023, '\p{-In Ethiopic SUPPLEMENT}', "");
Expect(0, 5023, '\p{^-In Ethiopic SUPPLEMENT}', "");
Expect(0, 5023, '\P{-In Ethiopic SUPPLEMENT}', "");
Expect(1, 5023, '\P{^-In Ethiopic SUPPLEMENT}', "");
Expect(0, 4991, '\p{-In Ethiopic SUPPLEMENT}', "");
Expect(1, 4991, '\p{^-In Ethiopic SUPPLEMENT}', "");
Expect(1, 4991, '\P{-In Ethiopic SUPPLEMENT}', "");
Expect(0, 4991, '\P{^-In Ethiopic SUPPLEMENT}', "");
Error('\p{Dingbats/a/}');
Error('\P{Dingbats/a/}');
Expect(1, 10175, '\p{dingbats}', "");
Expect(0, 10175, '\p{^dingbats}', "");
Expect(0, 10175, '\P{dingbats}', "");
Expect(1, 10175, '\P{^dingbats}', "");
Expect(0, 9983, '\p{dingbats}', "");
Expect(1, 9983, '\p{^dingbats}', "");
Expect(1, 9983, '\P{dingbats}', "");
Expect(0, 9983, '\P{^dingbats}', "");
Expect(1, 10175, '\p{-	Dingbats}', "");
Expect(0, 10175, '\p{^-	Dingbats}', "");
Expect(0, 10175, '\P{-	Dingbats}', "");
Expect(1, 10175, '\P{^-	Dingbats}', "");
Expect(0, 9983, '\p{-	Dingbats}', "");
Expect(1, 9983, '\p{^-	Dingbats}', "");
Expect(1, 9983, '\P{-	Dingbats}', "");
Expect(0, 9983, '\P{^-	Dingbats}', "");
Error('\p{-_Is:=dingbats}');
Error('\P{-_Is:=dingbats}');
Expect(1, 10175, '\p{isdingbats}', "");
Expect(0, 10175, '\p{^isdingbats}', "");
Expect(0, 10175, '\P{isdingbats}', "");
Expect(1, 10175, '\P{^isdingbats}', "");
Expect(0, 9983, '\p{isdingbats}', "");
Expect(1, 9983, '\p{^isdingbats}', "");
Expect(1, 9983, '\P{isdingbats}', "");
Expect(0, 9983, '\P{^isdingbats}', "");
Expect(1, 10175, '\p{- Isdingbats}', "");
Expect(0, 10175, '\p{^- Isdingbats}', "");
Expect(0, 10175, '\P{- Isdingbats}', "");
Expect(1, 10175, '\P{^- Isdingbats}', "");
Expect(0, 9983, '\p{- Isdingbats}', "");
Expect(1, 9983, '\p{^- Isdingbats}', "");
Expect(1, 9983, '\P{- Isdingbats}', "");
Expect(0, 9983, '\P{^- Isdingbats}', "");
Error('\p{_:=in	Dingbats}');
Error('\P{_:=in	Dingbats}');
Expect(1, 10175, '\p{indingbats}', "");
Expect(0, 10175, '\p{^indingbats}', "");
Expect(0, 10175, '\P{indingbats}', "");
Expect(1, 10175, '\P{^indingbats}', "");
Expect(0, 9983, '\p{indingbats}', "");
Expect(1, 9983, '\p{^indingbats}', "");
Expect(1, 9983, '\P{indingbats}', "");
Expect(0, 9983, '\P{^indingbats}', "");
Expect(1, 10175, '\p{_	In	Dingbats}', "");
Expect(0, 10175, '\p{^_	In	Dingbats}', "");
Expect(0, 10175, '\P{_	In	Dingbats}', "");
Expect(1, 10175, '\P{^_	In	Dingbats}', "");
Expect(0, 9983, '\p{_	In	Dingbats}', "");
Expect(1, 9983, '\p{^_	In	Dingbats}', "");
Expect(1, 9983, '\P{_	In	Dingbats}', "");
Expect(0, 9983, '\P{^_	In	Dingbats}', "");
Error('\p{  Logical:=order Exception}');
Error('\P{  Logical:=order Exception}');
Expect(1, 3652, '\p{logicalorderexception}', "");
Expect(0, 3652, '\p{^logicalorderexception}', "");
Expect(0, 3652, '\P{logicalorderexception}', "");
Expect(1, 3652, '\P{^logicalorderexception}', "");
Expect(0, 3647, '\p{logicalorderexception}', "");
Expect(1, 3647, '\p{^logicalorderexception}', "");
Expect(1, 3647, '\P{logicalorderexception}', "");
Expect(0, 3647, '\P{^logicalorderexception}', "");
Expect(1, 3652, '\p{ Logical	order-Exception}', "");
Expect(0, 3652, '\p{^ Logical	order-Exception}', "");
Expect(0, 3652, '\P{ Logical	order-Exception}', "");
Expect(1, 3652, '\P{^ Logical	order-Exception}', "");
Expect(0, 3647, '\p{ Logical	order-Exception}', "");
Expect(1, 3647, '\p{^ Logical	order-Exception}', "");
Expect(1, 3647, '\P{ Logical	order-Exception}', "");
Expect(0, 3647, '\P{^ Logical	order-Exception}', "");
Error('\p{	isLogical	order/a/Exception}');
Error('\P{	isLogical	order/a/Exception}');
Expect(1, 3652, '\p{islogicalorderexception}', "");
Expect(0, 3652, '\p{^islogicalorderexception}', "");
Expect(0, 3652, '\P{islogicalorderexception}', "");
Expect(1, 3652, '\P{^islogicalorderexception}', "");
Expect(0, 3647, '\p{islogicalorderexception}', "");
Expect(1, 3647, '\p{^islogicalorderexception}', "");
Expect(1, 3647, '\P{islogicalorderexception}', "");
Expect(0, 3647, '\P{^islogicalorderexception}', "");
Expect(1, 3652, '\p{ -Is-LOGICALORDER Exception}', "");
Expect(0, 3652, '\p{^ -Is-LOGICALORDER Exception}', "");
Expect(0, 3652, '\P{ -Is-LOGICALORDER Exception}', "");
Expect(1, 3652, '\P{^ -Is-LOGICALORDER Exception}', "");
Expect(0, 3647, '\p{ -Is-LOGICALORDER Exception}', "");
Expect(1, 3647, '\p{^ -Is-LOGICALORDER Exception}', "");
Expect(1, 3647, '\P{ -Is-LOGICALORDER Exception}', "");
Expect(0, 3647, '\P{^ -Is-LOGICALORDER Exception}', "");
Error('\p{:=_	LOE}');
Error('\P{:=_	LOE}');
Expect(1, 3652, '\p{loe}', "");
Expect(0, 3652, '\p{^loe}', "");
Expect(0, 3652, '\P{loe}', "");
Expect(1, 3652, '\P{^loe}', "");
Expect(0, 3647, '\p{loe}', "");
Expect(1, 3647, '\p{^loe}', "");
Expect(1, 3647, '\P{loe}', "");
Expect(0, 3647, '\P{^loe}', "");
Expect(1, 3652, '\p{_ LOE}', "");
Expect(0, 3652, '\p{^_ LOE}', "");
Expect(0, 3652, '\P{_ LOE}', "");
Expect(1, 3652, '\P{^_ LOE}', "");
Expect(0, 3647, '\p{_ LOE}', "");
Expect(1, 3647, '\p{^_ LOE}', "");
Expect(1, 3647, '\P{_ LOE}', "");
Expect(0, 3647, '\P{^_ LOE}', "");
Error('\p{/a/	IsLOE}');
Error('\P{/a/	IsLOE}');
Expect(1, 3652, '\p{isloe}', "");
Expect(0, 3652, '\p{^isloe}', "");
Expect(0, 3652, '\P{isloe}', "");
Expect(1, 3652, '\P{^isloe}', "");
Expect(0, 3647, '\p{isloe}', "");
Expect(1, 3647, '\p{^isloe}', "");
Expect(1, 3647, '\P{isloe}', "");
Expect(0, 3647, '\P{^isloe}', "");
Expect(1, 3652, '\p{-	Is_LOE}', "");
Expect(0, 3652, '\p{^-	Is_LOE}', "");
Expect(0, 3652, '\P{-	Is_LOE}', "");
Expect(1, 3652, '\P{^-	Is_LOE}', "");
Expect(0, 3647, '\p{-	Is_LOE}', "");
Expect(1, 3647, '\p{^-	Is_LOE}', "");
Expect(1, 3647, '\P{-	Is_LOE}', "");
Expect(0, 3647, '\P{^-	Is_LOE}', "");
Error('\p{-:=IN	Lycian}');
Error('\P{-:=IN	Lycian}');
Expect(1, 66207, '\p{inlycian}', "");
Expect(0, 66207, '\p{^inlycian}', "");
Expect(0, 66207, '\P{inlycian}', "");
Expect(1, 66207, '\P{^inlycian}', "");
Expect(0, 66175, '\p{inlycian}', "");
Expect(1, 66175, '\p{^inlycian}', "");
Expect(1, 66175, '\P{inlycian}', "");
Expect(0, 66175, '\P{^inlycian}', "");
Expect(1, 66207, '\p{ 	inLYCIAN}', "");
Expect(0, 66207, '\p{^ 	inLYCIAN}', "");
Expect(0, 66207, '\P{ 	inLYCIAN}', "");
Expect(1, 66207, '\P{^ 	inLYCIAN}', "");
Expect(0, 66175, '\p{ 	inLYCIAN}', "");
Expect(1, 66175, '\p{^ 	inLYCIAN}', "");
Expect(1, 66175, '\P{ 	inLYCIAN}', "");
Expect(0, 66175, '\P{^ 	inLYCIAN}', "");
Error('\p{_VAI/a/}');
Error('\P{_VAI/a/}');
Expect(1, 42539, '\p{vai}', "");
Expect(0, 42539, '\p{^vai}', "");
Expect(0, 42539, '\P{vai}', "");
Expect(1, 42539, '\P{^vai}', "");
Expect(0, 42239, '\p{vai}', "");
Expect(1, 42239, '\p{^vai}', "");
Expect(1, 42239, '\P{vai}', "");
Expect(0, 42239, '\P{^vai}', "");
Expect(1, 42539, '\p{_VAI}', "");
Expect(0, 42539, '\p{^_VAI}', "");
Expect(0, 42539, '\P{_VAI}', "");
Expect(1, 42539, '\P{^_VAI}', "");
Expect(0, 42239, '\p{_VAI}', "");
Expect(1, 42239, '\p{^_VAI}', "");
Expect(1, 42239, '\P{_VAI}', "");
Expect(0, 42239, '\P{^_VAI}', "");
Error('\p{ /a/Is VAI}');
Error('\P{ /a/Is VAI}');
Expect(1, 42539, '\p{isvai}', "");
Expect(0, 42539, '\p{^isvai}', "");
Expect(0, 42539, '\P{isvai}', "");
Expect(1, 42539, '\P{^isvai}', "");
Expect(0, 42239, '\p{isvai}', "");
Expect(1, 42239, '\p{^isvai}', "");
Expect(1, 42239, '\P{isvai}', "");
Expect(0, 42239, '\P{^isvai}', "");
Expect(1, 42539, '\p{	is vai}', "");
Expect(0, 42539, '\p{^	is vai}', "");
Expect(0, 42539, '\P{	is vai}', "");
Expect(1, 42539, '\P{^	is vai}', "");
Expect(0, 42239, '\p{	is vai}', "");
Expect(1, 42239, '\p{^	is vai}', "");
Expect(1, 42239, '\P{	is vai}', "");
Expect(0, 42239, '\P{^	is vai}', "");
Error('\p{_/a/VAII}');
Error('\P{_/a/VAII}');
Expect(1, 42539, '\p{vaii}', "");
Expect(0, 42539, '\p{^vaii}', "");
Expect(0, 42539, '\P{vaii}', "");
Expect(1, 42539, '\P{^vaii}', "");
Expect(0, 42239, '\p{vaii}', "");
Expect(1, 42239, '\p{^vaii}', "");
Expect(1, 42239, '\P{vaii}', "");
Expect(0, 42239, '\P{^vaii}', "");
Expect(1, 42539, '\p{	_Vaii}', "");
Expect(0, 42539, '\p{^	_Vaii}', "");
Expect(0, 42539, '\P{	_Vaii}', "");
Expect(1, 42539, '\P{^	_Vaii}', "");
Expect(0, 42239, '\p{	_Vaii}', "");
Expect(1, 42239, '\p{^	_Vaii}', "");
Expect(1, 42239, '\P{	_Vaii}', "");
Expect(0, 42239, '\P{^	_Vaii}', "");
Error('\p{	-Is_Vaii/a/}');
Error('\P{	-Is_Vaii/a/}');
Expect(1, 42539, '\p{isvaii}', "");
Expect(0, 42539, '\p{^isvaii}', "");
Expect(0, 42539, '\P{isvaii}', "");
Expect(1, 42539, '\P{^isvaii}', "");
Expect(0, 42239, '\p{isvaii}', "");
Expect(1, 42239, '\p{^isvaii}', "");
Expect(1, 42239, '\P{isvaii}', "");
Expect(0, 42239, '\P{^isvaii}', "");
Expect(1, 42539, '\p{-is_Vaii}', "");
Expect(0, 42539, '\p{^-is_Vaii}', "");
Expect(0, 42539, '\P{-is_Vaii}', "");
Expect(1, 42539, '\P{^-is_Vaii}', "");
Expect(0, 42239, '\p{-is_Vaii}', "");
Expect(1, 42239, '\p{^-is_Vaii}', "");
Expect(1, 42239, '\P{-is_Vaii}', "");
Expect(0, 42239, '\P{^-is_Vaii}', "");
Error('\p{ _Spacing:=mark}');
Error('\P{ _Spacing:=mark}');
Expect(1, 2307, '\p{spacingmark}', "");
Expect(0, 2307, '\p{^spacingmark}', "");
Expect(0, 2307, '\P{spacingmark}', "");
Expect(1, 2307, '\P{^spacingmark}', "");
Expect(0, 2306, '\p{spacingmark}', "");
Expect(1, 2306, '\p{^spacingmark}', "");
Expect(1, 2306, '\P{spacingmark}', "");
Expect(0, 2306, '\P{^spacingmark}', "");
Expect(1, 2307, '\p{_Spacingmark}', "");
Expect(0, 2307, '\p{^_Spacingmark}', "");
Expect(0, 2307, '\P{_Spacingmark}', "");
Expect(1, 2307, '\P{^_Spacingmark}', "");
Expect(0, 2306, '\p{_Spacingmark}', "");
Expect(1, 2306, '\p{^_Spacingmark}', "");
Expect(1, 2306, '\P{_Spacingmark}', "");
Expect(0, 2306, '\P{^_Spacingmark}', "");
Error('\p{_IS/a/Spacing_MARK}');
Error('\P{_IS/a/Spacing_MARK}');
Expect(1, 2307, '\p{isspacingmark}', "");
Expect(0, 2307, '\p{^isspacingmark}', "");
Expect(0, 2307, '\P{isspacingmark}', "");
Expect(1, 2307, '\P{^isspacingmark}', "");
Expect(0, 2306, '\p{isspacingmark}', "");
Expect(1, 2306, '\p{^isspacingmark}', "");
Expect(1, 2306, '\P{isspacingmark}', "");
Expect(0, 2306, '\P{^isspacingmark}', "");
Expect(1, 2307, '\p{_	is spacing MARK}', "");
Expect(0, 2307, '\p{^_	is spacing MARK}', "");
Expect(0, 2307, '\P{_	is spacing MARK}', "");
Expect(1, 2307, '\P{^_	is spacing MARK}', "");
Expect(0, 2306, '\p{_	is spacing MARK}', "");
Expect(1, 2306, '\p{^_	is spacing MARK}', "");
Expect(1, 2306, '\P{_	is spacing MARK}', "");
Expect(0, 2306, '\P{^_	is spacing MARK}', "");
Error('\p{ :=mc}');
Error('\P{ :=mc}');
Expect(1, 2307, '\p{mc}', "");
Expect(0, 2307, '\p{^mc}', "");
Expect(0, 2307, '\P{mc}', "");
Expect(1, 2307, '\P{^mc}', "");
Expect(0, 2306, '\p{mc}', "");
Expect(1, 2306, '\p{^mc}', "");
Expect(1, 2306, '\P{mc}', "");
Expect(0, 2306, '\P{^mc}', "");
Expect(1, 2307, '\p{_ MC}', "");
Expect(0, 2307, '\p{^_ MC}', "");
Expect(0, 2307, '\P{_ MC}', "");
Expect(1, 2307, '\P{^_ MC}', "");
Expect(0, 2306, '\p{_ MC}', "");
Expect(1, 2306, '\p{^_ MC}', "");
Expect(1, 2306, '\P{_ MC}', "");
Expect(0, 2306, '\P{^_ MC}', "");
Error('\p{-ISMc/a/}');
Error('\P{-ISMc/a/}');
Expect(1, 2307, '\p{ismc}', "");
Expect(0, 2307, '\p{^ismc}', "");
Expect(0, 2307, '\P{ismc}', "");
Expect(1, 2307, '\P{^ismc}', "");
Expect(0, 2306, '\p{ismc}', "");
Expect(1, 2306, '\p{^ismc}', "");
Expect(1, 2306, '\P{ismc}', "");
Expect(0, 2306, '\P{^ismc}', "");
Expect(1, 2307, '\p{ Is_Mc}', "");
Expect(0, 2307, '\p{^ Is_Mc}', "");
Expect(0, 2307, '\P{ Is_Mc}', "");
Expect(1, 2307, '\P{^ Is_Mc}', "");
Expect(0, 2306, '\p{ Is_Mc}', "");
Expect(1, 2306, '\p{^ Is_Mc}', "");
Expect(1, 2306, '\P{ Is_Mc}', "");
Expect(0, 2306, '\P{^ Is_Mc}', "");
Error('\p{--LOWER/a/}');
Error('\P{--LOWER/a/}');
Expect(1, 122, '\p{lower}', "");
Expect(0, 122, '\p{^lower}', "");
Expect(0, 122, '\P{lower}', "");
Expect(1, 122, '\P{^lower}', "");
Expect(0, 96, '\p{lower}', "");
Expect(1, 96, '\p{^lower}', "");
Expect(1, 96, '\P{lower}', "");
Expect(0, 96, '\P{^lower}', "");
Expect(1, 122, '\p{	_LOWER}', "");
Expect(0, 122, '\p{^	_LOWER}', "");
Expect(0, 122, '\P{	_LOWER}', "");
Expect(1, 122, '\P{^	_LOWER}', "");
Expect(0, 96, '\p{	_LOWER}', "");
Expect(1, 96, '\p{^	_LOWER}', "");
Expect(1, 96, '\P{	_LOWER}', "");
Expect(0, 96, '\P{^	_LOWER}', "");
Error('\p{/a/ _IS-lower}');
Error('\P{/a/ _IS-lower}');
Expect(1, 122, '\p{islower}', "");
Expect(0, 122, '\p{^islower}', "");
Expect(0, 122, '\P{islower}', "");
Expect(1, 122, '\P{^islower}', "");
Expect(0, 96, '\p{islower}', "");
Expect(1, 96, '\p{^islower}', "");
Expect(1, 96, '\P{islower}', "");
Expect(0, 96, '\P{^islower}', "");
Expect(1, 122, '\p{ -Is_lower}', "");
Expect(0, 122, '\p{^ -Is_lower}', "");
Expect(0, 122, '\P{ -Is_lower}', "");
Expect(1, 122, '\P{^ -Is_lower}', "");
Expect(0, 96, '\p{ -Is_lower}', "");
Expect(1, 96, '\p{^ -Is_lower}', "");
Expect(1, 96, '\P{ -Is_lower}', "");
Expect(0, 96, '\P{^ -Is_lower}', "");
Error('\p{_/a/Lowercase}');
Error('\P{_/a/Lowercase}');
Expect(1, 122, '\p{lowercase}', "");
Expect(0, 122, '\p{^lowercase}', "");
Expect(0, 122, '\P{lowercase}', "");
Expect(1, 122, '\P{^lowercase}', "");
Expect(0, 96, '\p{lowercase}', "");
Expect(1, 96, '\p{^lowercase}', "");
Expect(1, 96, '\P{lowercase}', "");
Expect(0, 96, '\P{^lowercase}', "");
Expect(1, 122, '\p{--LOWERCASE}', "");
Expect(0, 122, '\p{^--LOWERCASE}', "");
Expect(0, 122, '\P{--LOWERCASE}', "");
Expect(1, 122, '\P{^--LOWERCASE}', "");
Expect(0, 96, '\p{--LOWERCASE}', "");
Expect(1, 96, '\p{^--LOWERCASE}', "");
Expect(1, 96, '\P{--LOWERCASE}', "");
Expect(0, 96, '\P{^--LOWERCASE}', "");
Error('\p{--Is	lowercase:=}');
Error('\P{--Is	lowercase:=}');
Expect(1, 122, '\p{islowercase}', "");
Expect(0, 122, '\p{^islowercase}', "");
Expect(0, 122, '\P{islowercase}', "");
Expect(1, 122, '\P{^islowercase}', "");
Expect(0, 96, '\p{islowercase}', "");
Expect(1, 96, '\p{^islowercase}', "");
Expect(1, 96, '\P{islowercase}', "");
Expect(0, 96, '\P{^islowercase}', "");
Expect(1, 122, '\p{ _Is-Lowercase}', "");
Expect(0, 122, '\p{^ _Is-Lowercase}', "");
Expect(0, 122, '\P{ _Is-Lowercase}', "");
Expect(1, 122, '\P{^ _Is-Lowercase}', "");
Expect(0, 96, '\p{ _Is-Lowercase}', "");
Expect(1, 96, '\p{^ _Is-Lowercase}', "");
Expect(1, 96, '\P{ _Is-Lowercase}', "");
Expect(0, 96, '\P{^ _Is-Lowercase}', "");
Error('\p{Expands_On_NFKD}');
Error('\P{Expands_On_NFKD}');
Error('\p{Is_Expands_On_NFKD}');
Error('\P{Is_Expands_On_NFKD}');
Error('\p{XO_NFKD}');
Error('\P{XO_NFKD}');
Error('\p{Is_XO_NFKD}');
Error('\P{Is_XO_NFKD}');
Error('\p{:=-_Close-Punctuation}');
Error('\P{:=-_Close-Punctuation}');
Expect(1, 41, '\p{closepunctuation}', "");
Expect(0, 41, '\p{^closepunctuation}', "");
Expect(0, 41, '\P{closepunctuation}', "");
Expect(1, 41, '\P{^closepunctuation}', "");
Expect(0, 40, '\p{closepunctuation}', "");
Expect(1, 40, '\p{^closepunctuation}', "");
Expect(1, 40, '\P{closepunctuation}', "");
Expect(0, 40, '\P{^closepunctuation}', "");
Expect(1, 41, '\p{CLOSE PUNCTUATION}', "");
Expect(0, 41, '\p{^CLOSE PUNCTUATION}', "");
Expect(0, 41, '\P{CLOSE PUNCTUATION}', "");
Expect(1, 41, '\P{^CLOSE PUNCTUATION}', "");
Expect(0, 40, '\p{CLOSE PUNCTUATION}', "");
Expect(1, 40, '\p{^CLOSE PUNCTUATION}', "");
Expect(1, 40, '\P{CLOSE PUNCTUATION}', "");
Expect(0, 40, '\P{^CLOSE PUNCTUATION}', "");
Error('\p{		IS Close-punctuation/a/}');
Error('\P{		IS Close-punctuation/a/}');
Expect(1, 41, '\p{isclosepunctuation}', "");
Expect(0, 41, '\p{^isclosepunctuation}', "");
Expect(0, 41, '\P{isclosepunctuation}', "");
Expect(1, 41, '\P{^isclosepunctuation}', "");
Expect(0, 40, '\p{isclosepunctuation}', "");
Expect(1, 40, '\p{^isclosepunctuation}', "");
Expect(1, 40, '\P{isclosepunctuation}', "");
Expect(0, 40, '\P{^isclosepunctuation}', "");
Expect(1, 41, '\p{_ IsCLOSE	Punctuation}', "");
Expect(0, 41, '\p{^_ IsCLOSE	Punctuation}', "");
Expect(0, 41, '\P{_ IsCLOSE	Punctuation}', "");
Expect(1, 41, '\P{^_ IsCLOSE	Punctuation}', "");
Expect(0, 40, '\p{_ IsCLOSE	Punctuation}', "");
Expect(1, 40, '\p{^_ IsCLOSE	Punctuation}', "");
Expect(1, 40, '\P{_ IsCLOSE	Punctuation}', "");
Expect(0, 40, '\P{^_ IsCLOSE	Punctuation}', "");
Error('\p{_:=Pe}');
Error('\P{_:=Pe}');
Expect(1, 41, '\p{pe}', "");
Expect(0, 41, '\p{^pe}', "");
Expect(0, 41, '\P{pe}', "");
Expect(1, 41, '\P{^pe}', "");
Expect(0, 40, '\p{pe}', "");
Expect(1, 40, '\p{^pe}', "");
Expect(1, 40, '\P{pe}', "");
Expect(0, 40, '\P{^pe}', "");
Expect(1, 41, '\p{		Pe}', "");
Expect(0, 41, '\p{^		Pe}', "");
Expect(0, 41, '\P{		Pe}', "");
Expect(1, 41, '\P{^		Pe}', "");
Expect(0, 40, '\p{		Pe}', "");
Expect(1, 40, '\p{^		Pe}', "");
Expect(1, 40, '\P{		Pe}', "");
Expect(0, 40, '\P{^		Pe}', "");
Error('\p{ -Is/a/pe}');
Error('\P{ -Is/a/pe}');
Expect(1, 41, '\p{ispe}', "");
Expect(0, 41, '\p{^ispe}', "");
Expect(0, 41, '\P{ispe}', "");
Expect(1, 41, '\P{^ispe}', "");
Expect(0, 40, '\p{ispe}', "");
Expect(1, 40, '\p{^ispe}', "");
Expect(1, 40, '\P{ispe}', "");
Expect(0, 40, '\P{^ispe}', "");
Expect(1, 41, '\p{ 	IS Pe}', "");
Expect(0, 41, '\p{^ 	IS Pe}', "");
Expect(0, 41, '\P{ 	IS Pe}', "");
Expect(1, 41, '\P{^ 	IS Pe}', "");
Expect(0, 40, '\p{ 	IS Pe}', "");
Expect(1, 40, '\p{^ 	IS Pe}', "");
Expect(1, 40, '\P{ 	IS Pe}', "");
Expect(0, 40, '\P{^ 	IS Pe}', "");
Error('\p{Expands_On_NFKC}');
Error('\P{Expands_On_NFKC}');
Error('\p{Is_Expands_On_NFKC}');
Error('\P{Is_Expands_On_NFKC}');
Error('\p{XO_NFKC}');
Error('\P{XO_NFKC}');
Error('\p{Is_XO_NFKC}');
Error('\P{Is_XO_NFKC}');
Error('\p{	/a/unknown}');
Error('\P{	/a/unknown}');
Expect(1, 889, '\p{unknown}', "");
Expect(0, 889, '\p{^unknown}', "");
Expect(0, 889, '\P{unknown}', "");
Expect(1, 889, '\P{^unknown}', "");
Expect(0, 887, '\p{unknown}', "");
Expect(1, 887, '\p{^unknown}', "");
Expect(1, 887, '\P{unknown}', "");
Expect(0, 887, '\P{^unknown}', "");
Expect(1, 889, '\p{	Unknown}', "");
Expect(0, 889, '\p{^	Unknown}', "");
Expect(0, 889, '\P{	Unknown}', "");
Expect(1, 889, '\P{^	Unknown}', "");
Expect(0, 887, '\p{	Unknown}', "");
Expect(1, 887, '\p{^	Unknown}', "");
Expect(1, 887, '\P{	Unknown}', "");
Expect(0, 887, '\P{^	Unknown}', "");
Error('\p{-_Is_UNKNOWN:=}');
Error('\P{-_Is_UNKNOWN:=}');
Expect(1, 889, '\p{isunknown}', "");
Expect(0, 889, '\p{^isunknown}', "");
Expect(0, 889, '\P{isunknown}', "");
Expect(1, 889, '\P{^isunknown}', "");
Expect(0, 887, '\p{isunknown}', "");
Expect(1, 887, '\p{^isunknown}', "");
Expect(1, 887, '\P{isunknown}', "");
Expect(0, 887, '\P{^isunknown}', "");
Expect(1, 889, '\p{ Is	Unknown}', "");
Expect(0, 889, '\p{^ Is	Unknown}', "");
Expect(0, 889, '\P{ Is	Unknown}', "");
Expect(1, 889, '\P{^ Is	Unknown}', "");
Expect(0, 887, '\p{ Is	Unknown}', "");
Expect(1, 887, '\p{^ Is	Unknown}', "");
Expect(1, 887, '\P{ Is	Unknown}', "");
Expect(0, 887, '\P{^ Is	Unknown}', "");
Error('\p{-_zzzz/a/}');
Error('\P{-_zzzz/a/}');
Expect(1, 889, '\p{zzzz}', "");
Expect(0, 889, '\p{^zzzz}', "");
Expect(0, 889, '\P{zzzz}', "");
Expect(1, 889, '\P{^zzzz}', "");
Expect(0, 887, '\p{zzzz}', "");
Expect(1, 887, '\p{^zzzz}', "");
Expect(1, 887, '\P{zzzz}', "");
Expect(0, 887, '\P{^zzzz}', "");
Expect(1, 889, '\p{-Zzzz}', "");
Expect(0, 889, '\p{^-Zzzz}', "");
Expect(0, 889, '\P{-Zzzz}', "");
Expect(1, 889, '\P{^-Zzzz}', "");
Expect(0, 887, '\p{-Zzzz}', "");
Expect(1, 887, '\p{^-Zzzz}', "");
Expect(1, 887, '\P{-Zzzz}', "");
Expect(0, 887, '\P{^-Zzzz}', "");
Error('\p{	/a/Iszzzz}');
Error('\P{	/a/Iszzzz}');
Expect(1, 889, '\p{iszzzz}', "");
Expect(0, 889, '\p{^iszzzz}', "");
Expect(0, 889, '\P{iszzzz}', "");
Expect(1, 889, '\P{^iszzzz}', "");
Expect(0, 887, '\p{iszzzz}', "");
Expect(1, 887, '\p{^iszzzz}', "");
Expect(1, 887, '\P{iszzzz}', "");
Expect(0, 887, '\P{^iszzzz}', "");
Expect(1, 889, '\p{__Is Zzzz}', "");
Expect(0, 889, '\p{^__Is Zzzz}', "");
Expect(0, 889, '\P{__Is Zzzz}', "");
Expect(1, 889, '\P{^__Is Zzzz}', "");
Expect(0, 887, '\p{__Is Zzzz}', "");
Expect(1, 887, '\p{^__Is Zzzz}', "");
Expect(1, 887, '\P{__Is Zzzz}', "");
Expect(0, 887, '\P{^__Is Zzzz}', "");
Error('\p{:= linear	B Ideograms}');
Error('\P{:= linear	B Ideograms}');
Expect(1, 65791, '\p{linearbideograms}', "");
Expect(0, 65791, '\p{^linearbideograms}', "");
Expect(0, 65791, '\P{linearbideograms}', "");
Expect(1, 65791, '\P{^linearbideograms}', "");
Expect(0, 65663, '\p{linearbideograms}', "");
Expect(1, 65663, '\p{^linearbideograms}', "");
Expect(1, 65663, '\P{linearbideograms}', "");
Expect(0, 65663, '\P{^linearbideograms}', "");
Expect(1, 65791, '\p{ Linear b	Ideograms}', "");
Expect(0, 65791, '\p{^ Linear b	Ideograms}', "");
Expect(0, 65791, '\P{ Linear b	Ideograms}', "");
Expect(1, 65791, '\P{^ Linear b	Ideograms}', "");
Expect(0, 65663, '\p{ Linear b	Ideograms}', "");
Expect(1, 65663, '\p{^ Linear b	Ideograms}', "");
Expect(1, 65663, '\P{ Linear b	Ideograms}', "");
Expect(0, 65663, '\P{^ Linear b	Ideograms}', "");
Error('\p{ _isLinear:=B_Ideograms}');
Error('\P{ _isLinear:=B_Ideograms}');
Expect(1, 65791, '\p{islinearbideograms}', "");
Expect(0, 65791, '\p{^islinearbideograms}', "");
Expect(0, 65791, '\P{islinearbideograms}', "");
Expect(1, 65791, '\P{^islinearbideograms}', "");
Expect(0, 65663, '\p{islinearbideograms}', "");
Expect(1, 65663, '\p{^islinearbideograms}', "");
Expect(1, 65663, '\P{islinearbideograms}', "");
Expect(0, 65663, '\P{^islinearbideograms}', "");
Expect(1, 65791, '\p{-IS_Linear	bIdeograms}', "");
Expect(0, 65791, '\p{^-IS_Linear	bIdeograms}', "");
Expect(0, 65791, '\P{-IS_Linear	bIdeograms}', "");
Expect(1, 65791, '\P{^-IS_Linear	bIdeograms}', "");
Expect(0, 65663, '\p{-IS_Linear	bIdeograms}', "");
Expect(1, 65663, '\p{^-IS_Linear	bIdeograms}', "");
Expect(1, 65663, '\P{-IS_Linear	bIdeograms}', "");
Expect(0, 65663, '\P{^-IS_Linear	bIdeograms}', "");
Error('\p{__IN/a/linear_B	Ideograms}');
Error('\P{__IN/a/linear_B	Ideograms}');
Expect(1, 65791, '\p{inlinearbideograms}', "");
Expect(0, 65791, '\p{^inlinearbideograms}', "");
Expect(0, 65791, '\P{inlinearbideograms}', "");
Expect(1, 65791, '\P{^inlinearbideograms}', "");
Expect(0, 65663, '\p{inlinearbideograms}', "");
Expect(1, 65663, '\p{^inlinearbideograms}', "");
Expect(1, 65663, '\P{inlinearbideograms}', "");
Expect(0, 65663, '\P{^inlinearbideograms}', "");
Expect(1, 65791, '\p{ 	In_linearb_ideograms}', "");
Expect(0, 65791, '\p{^ 	In_linearb_ideograms}', "");
Expect(0, 65791, '\P{ 	In_linearb_ideograms}', "");
Expect(1, 65791, '\P{^ 	In_linearb_ideograms}', "");
Expect(0, 65663, '\p{ 	In_linearb_ideograms}', "");
Expect(1, 65663, '\p{^ 	In_linearb_ideograms}', "");
Expect(1, 65663, '\P{ 	In_linearb_ideograms}', "");
Expect(0, 65663, '\P{^ 	In_linearb_ideograms}', "");
Error('\p{_enclosed-Alphanumerics:=}');
Error('\P{_enclosed-Alphanumerics:=}');
Expect(1, 9471, '\p{enclosedalphanumerics}', "");
Expect(0, 9471, '\p{^enclosedalphanumerics}', "");
Expect(0, 9471, '\P{enclosedalphanumerics}', "");
Expect(1, 9471, '\P{^enclosedalphanumerics}', "");
Expect(0, 9311, '\p{enclosedalphanumerics}', "");
Expect(1, 9311, '\p{^enclosedalphanumerics}', "");
Expect(1, 9311, '\P{enclosedalphanumerics}', "");
Expect(0, 9311, '\P{^enclosedalphanumerics}', "");
Expect(1, 9471, '\p{  Enclosed	Alphanumerics}', "");
Expect(0, 9471, '\p{^  Enclosed	Alphanumerics}', "");
Expect(0, 9471, '\P{  Enclosed	Alphanumerics}', "");
Expect(1, 9471, '\P{^  Enclosed	Alphanumerics}', "");
Expect(0, 9311, '\p{  Enclosed	Alphanumerics}', "");
Expect(1, 9311, '\p{^  Enclosed	Alphanumerics}', "");
Expect(1, 9311, '\P{  Enclosed	Alphanumerics}', "");
Expect(0, 9311, '\P{^  Enclosed	Alphanumerics}', "");
Error('\p{/a/_-Is-Enclosed-alphanumerics}');
Error('\P{/a/_-Is-Enclosed-alphanumerics}');
Expect(1, 9471, '\p{isenclosedalphanumerics}', "");
Expect(0, 9471, '\p{^isenclosedalphanumerics}', "");
Expect(0, 9471, '\P{isenclosedalphanumerics}', "");
Expect(1, 9471, '\P{^isenclosedalphanumerics}', "");
Expect(0, 9311, '\p{isenclosedalphanumerics}', "");
Expect(1, 9311, '\p{^isenclosedalphanumerics}', "");
Expect(1, 9311, '\P{isenclosedalphanumerics}', "");
Expect(0, 9311, '\P{^isenclosedalphanumerics}', "");
Expect(1, 9471, '\p{  IS ENCLOSED_alphanumerics}', "");
Expect(0, 9471, '\p{^  IS ENCLOSED_alphanumerics}', "");
Expect(0, 9471, '\P{  IS ENCLOSED_alphanumerics}', "");
Expect(1, 9471, '\P{^  IS ENCLOSED_alphanumerics}', "");
Expect(0, 9311, '\p{  IS ENCLOSED_alphanumerics}', "");
Expect(1, 9311, '\p{^  IS ENCLOSED_alphanumerics}', "");
Expect(1, 9311, '\P{  IS ENCLOSED_alphanumerics}', "");
Expect(0, 9311, '\P{^  IS ENCLOSED_alphanumerics}', "");
Error('\p{_-In	Enclosed:=ALPHANUMERICS}');
Error('\P{_-In	Enclosed:=ALPHANUMERICS}');
Expect(1, 9471, '\p{inenclosedalphanumerics}', "");
Expect(0, 9471, '\p{^inenclosedalphanumerics}', "");
Expect(0, 9471, '\P{inenclosedalphanumerics}', "");
Expect(1, 9471, '\P{^inenclosedalphanumerics}', "");
Expect(0, 9311, '\p{inenclosedalphanumerics}', "");
Expect(1, 9311, '\p{^inenclosedalphanumerics}', "");
Expect(1, 9311, '\P{inenclosedalphanumerics}', "");
Expect(0, 9311, '\P{^inenclosedalphanumerics}', "");
Expect(1, 9471, '\p{- InENCLOSED ALPHANUMERICS}', "");
Expect(0, 9471, '\p{^- InENCLOSED ALPHANUMERICS}', "");
Expect(0, 9471, '\P{- InENCLOSED ALPHANUMERICS}', "");
Expect(1, 9471, '\P{^- InENCLOSED ALPHANUMERICS}', "");
Expect(0, 9311, '\p{- InENCLOSED ALPHANUMERICS}', "");
Expect(1, 9311, '\p{^- InENCLOSED ALPHANUMERICS}', "");
Expect(1, 9311, '\P{- InENCLOSED ALPHANUMERICS}', "");
Expect(0, 9311, '\P{^- InENCLOSED ALPHANUMERICS}', "");
Error('\p{/a/--Meetei	Mayek}');
Error('\P{/a/--Meetei	Mayek}');
Expect(1, 44013, '\p{meeteimayek}', "");
Expect(0, 44013, '\p{^meeteimayek}', "");
Expect(0, 44013, '\P{meeteimayek}', "");
Expect(1, 44013, '\P{^meeteimayek}', "");
Expect(0, 43967, '\p{meeteimayek}', "");
Expect(1, 43967, '\p{^meeteimayek}', "");
Expect(1, 43967, '\P{meeteimayek}', "");
Expect(0, 43967, '\P{^meeteimayek}', "");
Expect(1, 44013, '\p{-_Meetei	mayek}', "");
Expect(0, 44013, '\p{^-_Meetei	mayek}', "");
Expect(0, 44013, '\P{-_Meetei	mayek}', "");
Expect(1, 44013, '\P{^-_Meetei	mayek}', "");
Expect(0, 43967, '\p{-_Meetei	mayek}', "");
Expect(1, 43967, '\p{^-_Meetei	mayek}', "");
Expect(1, 43967, '\P{-_Meetei	mayek}', "");
Expect(0, 43967, '\P{^-_Meetei	mayek}', "");
Error('\p{:= _is_meetei Mayek}');
Error('\P{:= _is_meetei Mayek}');
Expect(1, 44013, '\p{ismeeteimayek}', "");
Expect(0, 44013, '\p{^ismeeteimayek}', "");
Expect(0, 44013, '\P{ismeeteimayek}', "");
Expect(1, 44013, '\P{^ismeeteimayek}', "");
Expect(0, 43967, '\p{ismeeteimayek}', "");
Expect(1, 43967, '\p{^ismeeteimayek}', "");
Expect(1, 43967, '\P{ismeeteimayek}', "");
Expect(0, 43967, '\P{^ismeeteimayek}', "");
Expect(1, 44013, '\p{	-isMeetei-MAYEK}', "");
Expect(0, 44013, '\p{^	-isMeetei-MAYEK}', "");
Expect(0, 44013, '\P{	-isMeetei-MAYEK}', "");
Expect(1, 44013, '\P{^	-isMeetei-MAYEK}', "");
Expect(0, 43967, '\p{	-isMeetei-MAYEK}', "");
Expect(1, 43967, '\p{^	-isMeetei-MAYEK}', "");
Expect(1, 43967, '\P{	-isMeetei-MAYEK}', "");
Expect(0, 43967, '\P{^	-isMeetei-MAYEK}', "");
Error('\p{		mtei:=}');
Error('\P{		mtei:=}');
Expect(1, 44013, '\p{mtei}', "");
Expect(0, 44013, '\p{^mtei}', "");
Expect(0, 44013, '\P{mtei}', "");
Expect(1, 44013, '\P{^mtei}', "");
Expect(0, 43967, '\p{mtei}', "");
Expect(1, 43967, '\p{^mtei}', "");
Expect(1, 43967, '\P{mtei}', "");
Expect(0, 43967, '\P{^mtei}', "");
Expect(1, 44013, '\p{-Mtei}', "");
Expect(0, 44013, '\p{^-Mtei}', "");
Expect(0, 44013, '\P{-Mtei}', "");
Expect(1, 44013, '\P{^-Mtei}', "");
Expect(0, 43967, '\p{-Mtei}', "");
Expect(1, 43967, '\p{^-Mtei}', "");
Expect(1, 43967, '\P{-Mtei}', "");
Expect(0, 43967, '\P{^-Mtei}', "");
Error('\p{-/a/IS-MTEI}');
Error('\P{-/a/IS-MTEI}');
Expect(1, 44013, '\p{ismtei}', "");
Expect(0, 44013, '\p{^ismtei}', "");
Expect(0, 44013, '\P{ismtei}', "");
Expect(1, 44013, '\P{^ismtei}', "");
Expect(0, 43967, '\p{ismtei}', "");
Expect(1, 43967, '\p{^ismtei}', "");
Expect(1, 43967, '\P{ismtei}', "");
Expect(0, 43967, '\P{^ismtei}', "");
Expect(1, 44013, '\p{	_Is-mtei}', "");
Expect(0, 44013, '\p{^	_Is-mtei}', "");
Expect(0, 44013, '\P{	_Is-mtei}', "");
Expect(1, 44013, '\P{^	_Is-mtei}', "");
Expect(0, 43967, '\p{	_Is-mtei}', "");
Expect(1, 43967, '\p{^	_Is-mtei}', "");
Expect(1, 43967, '\P{	_Is-mtei}', "");
Expect(0, 43967, '\P{^	_Is-mtei}', "");
Error('\p{:= -Extender}');
Error('\P{:= -Extender}');
Expect(1, 183, '\p{extender}', "");
Expect(0, 183, '\p{^extender}', "");
Expect(0, 183, '\P{extender}', "");
Expect(1, 183, '\P{^extender}', "");
Expect(0, 182, '\p{extender}', "");
Expect(1, 182, '\p{^extender}', "");
Expect(1, 182, '\P{extender}', "");
Expect(0, 182, '\P{^extender}', "");
Expect(1, 183, '\p{_Extender}', "");
Expect(0, 183, '\p{^_Extender}', "");
Expect(0, 183, '\P{_Extender}', "");
Expect(1, 183, '\P{^_Extender}', "");
Expect(0, 182, '\p{_Extender}', "");
Expect(1, 182, '\p{^_Extender}', "");
Expect(1, 182, '\P{_Extender}', "");
Expect(0, 182, '\P{^_Extender}', "");
Error('\p{:=__Is	EXTENDER}');
Error('\P{:=__Is	EXTENDER}');
Expect(1, 183, '\p{isextender}', "");
Expect(0, 183, '\p{^isextender}', "");
Expect(0, 183, '\P{isextender}', "");
Expect(1, 183, '\P{^isextender}', "");
Expect(0, 182, '\p{isextender}', "");
Expect(1, 182, '\p{^isextender}', "");
Expect(1, 182, '\P{isextender}', "");
Expect(0, 182, '\P{^isextender}', "");
Expect(1, 183, '\p{-	Is Extender}', "");
Expect(0, 183, '\p{^-	Is Extender}', "");
Expect(0, 183, '\P{-	Is Extender}', "");
Expect(1, 183, '\P{^-	Is Extender}', "");
Expect(0, 182, '\p{-	Is Extender}', "");
Expect(1, 182, '\p{^-	Is Extender}', "");
Expect(1, 182, '\P{-	Is Extender}', "");
Expect(0, 182, '\P{^-	Is Extender}', "");
Error('\p{:= Ext}');
Error('\P{:= Ext}');
Expect(1, 183, '\p{ext}', "");
Expect(0, 183, '\p{^ext}', "");
Expect(0, 183, '\P{ext}', "");
Expect(1, 183, '\P{^ext}', "");
Expect(0, 182, '\p{ext}', "");
Expect(1, 182, '\p{^ext}', "");
Expect(1, 182, '\P{ext}', "");
Expect(0, 182, '\P{^ext}', "");
Expect(1, 183, '\p{  Ext}', "");
Expect(0, 183, '\p{^  Ext}', "");
Expect(0, 183, '\P{  Ext}', "");
Expect(1, 183, '\P{^  Ext}', "");
Expect(0, 182, '\p{  Ext}', "");
Expect(1, 182, '\p{^  Ext}', "");
Expect(1, 182, '\P{  Ext}', "");
Expect(0, 182, '\P{^  Ext}', "");
Error('\p{/a/	IS	Ext}');
Error('\P{/a/	IS	Ext}');
Expect(1, 183, '\p{isext}', "");
Expect(0, 183, '\p{^isext}', "");
Expect(0, 183, '\P{isext}', "");
Expect(1, 183, '\P{^isext}', "");
Expect(0, 182, '\p{isext}', "");
Expect(1, 182, '\p{^isext}', "");
Expect(1, 182, '\P{isext}', "");
Expect(0, 182, '\P{^isext}', "");
Expect(1, 183, '\p{ -Is_ext}', "");
Expect(0, 183, '\p{^ -Is_ext}', "");
Expect(0, 183, '\P{ -Is_ext}', "");
Expect(1, 183, '\P{^ -Is_ext}', "");
Expect(0, 182, '\p{ -Is_ext}', "");
Expect(1, 182, '\p{^ -Is_ext}', "");
Expect(1, 182, '\P{ -Is_ext}', "");
Expect(0, 182, '\P{^ -Is_ext}', "");
Error('\p{	:=Composition EXCLUSION}');
Error('\P{	:=Composition EXCLUSION}');
Expect(1, 2399, '\p{compositionexclusion}', "");
Expect(0, 2399, '\p{^compositionexclusion}', "");
Expect(0, 2399, '\P{compositionexclusion}', "");
Expect(1, 2399, '\P{^compositionexclusion}', "");
Expect(0, 2391, '\p{compositionexclusion}', "");
Expect(1, 2391, '\p{^compositionexclusion}', "");
Expect(1, 2391, '\P{compositionexclusion}', "");
Expect(0, 2391, '\P{^compositionexclusion}', "");
Expect(1, 2399, '\p{ 	COMPOSITIONexclusion}', "");
Expect(0, 2399, '\p{^ 	COMPOSITIONexclusion}', "");
Expect(0, 2399, '\P{ 	COMPOSITIONexclusion}', "");
Expect(1, 2399, '\P{^ 	COMPOSITIONexclusion}', "");
Expect(0, 2391, '\p{ 	COMPOSITIONexclusion}', "");
Expect(1, 2391, '\p{^ 	COMPOSITIONexclusion}', "");
Expect(1, 2391, '\P{ 	COMPOSITIONexclusion}', "");
Expect(0, 2391, '\P{^ 	COMPOSITIONexclusion}', "");
Error('\p{:= 	is-COMPOSITIONEXCLUSION}');
Error('\P{:= 	is-COMPOSITIONEXCLUSION}');
Expect(1, 2399, '\p{iscompositionexclusion}', "");
Expect(0, 2399, '\p{^iscompositionexclusion}', "");
Expect(0, 2399, '\P{iscompositionexclusion}', "");
Expect(1, 2399, '\P{^iscompositionexclusion}', "");
Expect(0, 2391, '\p{iscompositionexclusion}', "");
Expect(1, 2391, '\p{^iscompositionexclusion}', "");
Expect(1, 2391, '\P{iscompositionexclusion}', "");
Expect(0, 2391, '\P{^iscompositionexclusion}', "");
Expect(1, 2399, '\p{-_Is_Composition_exclusion}', "");
Expect(0, 2399, '\p{^-_Is_Composition_exclusion}', "");
Expect(0, 2399, '\P{-_Is_Composition_exclusion}', "");
Expect(1, 2399, '\P{^-_Is_Composition_exclusion}', "");
Expect(0, 2391, '\p{-_Is_Composition_exclusion}', "");
Expect(1, 2391, '\p{^-_Is_Composition_exclusion}', "");
Expect(1, 2391, '\P{-_Is_Composition_exclusion}', "");
Expect(0, 2391, '\P{^-_Is_Composition_exclusion}', "");
Error('\p{_:=ce}');
Error('\P{_:=ce}');
Expect(1, 2399, '\p{ce}', "");
Expect(0, 2399, '\p{^ce}', "");
Expect(0, 2399, '\P{ce}', "");
Expect(1, 2399, '\P{^ce}', "");
Expect(0, 2391, '\p{ce}', "");
Expect(1, 2391, '\p{^ce}', "");
Expect(1, 2391, '\P{ce}', "");
Expect(0, 2391, '\P{^ce}', "");
Expect(1, 2399, '\p{--CE}', "");
Expect(0, 2399, '\p{^--CE}', "");
Expect(0, 2399, '\P{--CE}', "");
Expect(1, 2399, '\P{^--CE}', "");
Expect(0, 2391, '\p{--CE}', "");
Expect(1, 2391, '\p{^--CE}', "");
Expect(1, 2391, '\P{--CE}', "");
Expect(0, 2391, '\P{^--CE}', "");
Error('\p{- Is-ce:=}');
Error('\P{- Is-ce:=}');
Expect(1, 2399, '\p{isce}', "");
Expect(0, 2399, '\p{^isce}', "");
Expect(0, 2399, '\P{isce}', "");
Expect(1, 2399, '\P{^isce}', "");
Expect(0, 2391, '\p{isce}', "");
Expect(1, 2391, '\p{^isce}', "");
Expect(1, 2391, '\P{isce}', "");
Expect(0, 2391, '\P{^isce}', "");
Expect(1, 2399, '\p{_Is CE}', "");
Expect(0, 2399, '\p{^_Is CE}', "");
Expect(0, 2399, '\P{_Is CE}', "");
Expect(1, 2399, '\P{^_Is CE}', "");
Expect(0, 2391, '\p{_Is CE}', "");
Expect(1, 2391, '\p{^_Is CE}', "");
Expect(1, 2391, '\P{_Is CE}', "");
Expect(0, 2391, '\P{^_Is CE}', "");
Error('\p{_:=Enclosed_cjkletters And_months}');
Error('\P{_:=Enclosed_cjkletters And_months}');
Expect(1, 13055, '\p{enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^enclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^enclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{enclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^enclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{_ Enclosed_CJK Letters	and_MONTHS}', "");
Expect(0, 13055, '\p{^_ Enclosed_CJK Letters	and_MONTHS}', "");
Expect(0, 13055, '\P{_ Enclosed_CJK Letters	and_MONTHS}', "");
Expect(1, 13055, '\P{^_ Enclosed_CJK Letters	and_MONTHS}', "");
Expect(0, 12799, '\p{_ Enclosed_CJK Letters	and_MONTHS}', "");
Expect(1, 12799, '\p{^_ Enclosed_CJK Letters	and_MONTHS}', "");
Expect(1, 12799, '\P{_ Enclosed_CJK Letters	and_MONTHS}', "");
Expect(0, 12799, '\P{^_ Enclosed_CJK Letters	and_MONTHS}', "");
Error('\p{ Isenclosed:=cjk	letters-ANDMonths}');
Error('\P{ Isenclosed:=cjk	letters-ANDMonths}');
Expect(1, 13055, '\p{isenclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^isenclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{isenclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^isenclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{isenclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^isenclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{isenclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^isenclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{_	is-Enclosed	CJK Letters	and_Months}', "");
Expect(0, 13055, '\p{^_	is-Enclosed	CJK Letters	and_Months}', "");
Expect(0, 13055, '\P{_	is-Enclosed	CJK Letters	and_Months}', "");
Expect(1, 13055, '\P{^_	is-Enclosed	CJK Letters	and_Months}', "");
Expect(0, 12799, '\p{_	is-Enclosed	CJK Letters	and_Months}', "");
Expect(1, 12799, '\p{^_	is-Enclosed	CJK Letters	and_Months}', "");
Expect(1, 12799, '\P{_	is-Enclosed	CJK Letters	and_Months}', "");
Expect(0, 12799, '\P{^_	is-Enclosed	CJK Letters	and_Months}', "");
Error('\p{_In:=Enclosed	CJK	letters-and months}');
Error('\P{_In:=Enclosed	CJK	letters-and months}');
Expect(1, 13055, '\p{inenclosedcjklettersandmonths}', "");
Expect(0, 13055, '\p{^inenclosedcjklettersandmonths}', "");
Expect(0, 13055, '\P{inenclosedcjklettersandmonths}', "");
Expect(1, 13055, '\P{^inenclosedcjklettersandmonths}', "");
Expect(0, 12799, '\p{inenclosedcjklettersandmonths}', "");
Expect(1, 12799, '\p{^inenclosedcjklettersandmonths}', "");
Expect(1, 12799, '\P{inenclosedcjklettersandmonths}', "");
Expect(0, 12799, '\P{^inenclosedcjklettersandmonths}', "");
Expect(1, 13055, '\p{ -In ENCLOSED-cjkLetters	andMonths}', "");
Expect(0, 13055, '\p{^ -In ENCLOSED-cjkLetters	andMonths}', "");
Expect(0, 13055, '\P{ -In ENCLOSED-cjkLetters	andMonths}', "");
Expect(1, 13055, '\P{^ -In ENCLOSED-cjkLetters	andMonths}', "");
Expect(0, 12799, '\p{ -In ENCLOSED-cjkLetters	andMonths}', "");
Expect(1, 12799, '\p{^ -In ENCLOSED-cjkLetters	andMonths}', "");
Expect(1, 12799, '\P{ -In ENCLOSED-cjkLetters	andMonths}', "");
Expect(0, 12799, '\P{^ -In ENCLOSED-cjkLetters	andMonths}', "");
Error('\p{_/a/SPACE-Separator}');
Error('\P{_/a/SPACE-Separator}');
Expect(1, 32, '\p{spaceseparator}', "");
Expect(0, 32, '\p{^spaceseparator}', "");
Expect(0, 32, '\P{spaceseparator}', "");
Expect(1, 32, '\P{^spaceseparator}', "");
Expect(0, 31, '\p{spaceseparator}', "");
Expect(1, 31, '\p{^spaceseparator}', "");
Expect(1, 31, '\P{spaceseparator}', "");
Expect(0, 31, '\P{^spaceseparator}', "");
Expect(1, 32, '\p{_ SPACE Separator}', "");
Expect(0, 32, '\p{^_ SPACE Separator}', "");
Expect(0, 32, '\P{_ SPACE Separator}', "");
Expect(1, 32, '\P{^_ SPACE Separator}', "");
Expect(0, 31, '\p{_ SPACE Separator}', "");
Expect(1, 31, '\p{^_ SPACE Separator}', "");
Expect(1, 31, '\P{_ SPACE Separator}', "");
Expect(0, 31, '\P{^_ SPACE Separator}', "");
Error('\p{_/a/IS	spaceSEPARATOR}');
Error('\P{_/a/IS	spaceSEPARATOR}');
Expect(1, 32, '\p{isspaceseparator}', "");
Expect(0, 32, '\p{^isspaceseparator}', "");
Expect(0, 32, '\P{isspaceseparator}', "");
Expect(1, 32, '\P{^isspaceseparator}', "");
Expect(0, 31, '\p{isspaceseparator}', "");
Expect(1, 31, '\p{^isspaceseparator}', "");
Expect(1, 31, '\P{isspaceseparator}', "");
Expect(0, 31, '\P{^isspaceseparator}', "");
Expect(1, 32, '\p{- isspace-Separator}', "");
Expect(0, 32, '\p{^- isspace-Separator}', "");
Expect(0, 32, '\P{- isspace-Separator}', "");
Expect(1, 32, '\P{^- isspace-Separator}', "");
Expect(0, 31, '\p{- isspace-Separator}', "");
Expect(1, 31, '\p{^- isspace-Separator}', "");
Expect(1, 31, '\P{- isspace-Separator}', "");
Expect(0, 31, '\P{^- isspace-Separator}', "");
Error('\p{/a/_-ZS}');
Error('\P{/a/_-ZS}');
Expect(1, 32, '\p{zs}', "");
Expect(0, 32, '\p{^zs}', "");
Expect(0, 32, '\P{zs}', "");
Expect(1, 32, '\P{^zs}', "");
Expect(0, 31, '\p{zs}', "");
Expect(1, 31, '\p{^zs}', "");
Expect(1, 31, '\P{zs}', "");
Expect(0, 31, '\P{^zs}', "");
Expect(1, 32, '\p{ Zs}', "");
Expect(0, 32, '\p{^ Zs}', "");
Expect(0, 32, '\P{ Zs}', "");
Expect(1, 32, '\P{^ Zs}', "");
Expect(0, 31, '\p{ Zs}', "");
Expect(1, 31, '\p{^ Zs}', "");
Expect(1, 31, '\P{ Zs}', "");
Expect(0, 31, '\P{^ Zs}', "");
Error('\p{_IS:=ZS}');
Error('\P{_IS:=ZS}');
Expect(1, 32, '\p{iszs}', "");
Expect(0, 32, '\p{^iszs}', "");
Expect(0, 32, '\P{iszs}', "");
Expect(1, 32, '\P{^iszs}', "");
Expect(0, 31, '\p{iszs}', "");
Expect(1, 31, '\p{^iszs}', "");
Expect(1, 31, '\P{iszs}', "");
Expect(0, 31, '\P{^iszs}', "");
Expect(1, 32, '\p{	-is Zs}', "");
Expect(0, 32, '\p{^	-is Zs}', "");
Expect(0, 32, '\P{	-is Zs}', "");
Expect(1, 32, '\P{^	-is Zs}', "");
Expect(0, 31, '\p{	-is Zs}', "");
Expect(1, 31, '\p{^	-is Zs}', "");
Expect(1, 31, '\P{	-is Zs}', "");
Expect(0, 31, '\P{^	-is Zs}', "");
Error('\p{_:=Supplemental-PUNCTUATION}');
Error('\P{_:=Supplemental-PUNCTUATION}');
Expect(1, 11903, '\p{supplementalpunctuation}', "");
Expect(0, 11903, '\p{^supplementalpunctuation}', "");
Expect(0, 11903, '\P{supplementalpunctuation}', "");
Expect(1, 11903, '\P{^supplementalpunctuation}', "");
Expect(0, 11775, '\p{supplementalpunctuation}', "");
Expect(1, 11775, '\p{^supplementalpunctuation}', "");
Expect(1, 11775, '\P{supplementalpunctuation}', "");
Expect(0, 11775, '\P{^supplementalpunctuation}', "");
Expect(1, 11903, '\p{ -Supplemental Punctuation}', "");
Expect(0, 11903, '\p{^ -Supplemental Punctuation}', "");
Expect(0, 11903, '\P{ -Supplemental Punctuation}', "");
Expect(1, 11903, '\P{^ -Supplemental Punctuation}', "");
Expect(0, 11775, '\p{ -Supplemental Punctuation}', "");
Expect(1, 11775, '\p{^ -Supplemental Punctuation}', "");
Expect(1, 11775, '\P{ -Supplemental Punctuation}', "");
Expect(0, 11775, '\P{^ -Supplemental Punctuation}', "");
Error('\p{_	Is/a/SUPPLEMENTAL-Punctuation}');
Error('\P{_	Is/a/SUPPLEMENTAL-Punctuation}');
Expect(1, 11903, '\p{issupplementalpunctuation}', "");
Expect(0, 11903, '\p{^issupplementalpunctuation}', "");
Expect(0, 11903, '\P{issupplementalpunctuation}', "");
Expect(1, 11903, '\P{^issupplementalpunctuation}', "");
Expect(0, 11775, '\p{issupplementalpunctuation}', "");
Expect(1, 11775, '\p{^issupplementalpunctuation}', "");
Expect(1, 11775, '\P{issupplementalpunctuation}', "");
Expect(0, 11775, '\P{^issupplementalpunctuation}', "");
Expect(1, 11903, '\p{Is-SupplementalPUNCTUATION}', "");
Expect(0, 11903, '\p{^Is-SupplementalPUNCTUATION}', "");
Expect(0, 11903, '\P{Is-SupplementalPUNCTUATION}', "");
Expect(1, 11903, '\P{^Is-SupplementalPUNCTUATION}', "");
Expect(0, 11775, '\p{Is-SupplementalPUNCTUATION}', "");
Expect(1, 11775, '\p{^Is-SupplementalPUNCTUATION}', "");
Expect(1, 11775, '\P{Is-SupplementalPUNCTUATION}', "");
Expect(0, 11775, '\P{^Is-SupplementalPUNCTUATION}', "");
Error('\p{:=In_supplemental	punctuation}');
Error('\P{:=In_supplemental	punctuation}');
Expect(1, 11903, '\p{insupplementalpunctuation}', "");
Expect(0, 11903, '\p{^insupplementalpunctuation}', "");
Expect(0, 11903, '\P{insupplementalpunctuation}', "");
Expect(1, 11903, '\P{^insupplementalpunctuation}', "");
Expect(0, 11775, '\p{insupplementalpunctuation}', "");
Expect(1, 11775, '\p{^insupplementalpunctuation}', "");
Expect(1, 11775, '\P{insupplementalpunctuation}', "");
Expect(0, 11775, '\P{^insupplementalpunctuation}', "");
Expect(1, 11903, '\p{ _in-SUPPLEMENTALPunctuation}', "");
Expect(0, 11903, '\p{^ _in-SUPPLEMENTALPunctuation}', "");
Expect(0, 11903, '\P{ _in-SUPPLEMENTALPunctuation}', "");
Expect(1, 11903, '\P{^ _in-SUPPLEMENTALPunctuation}', "");
Expect(0, 11775, '\p{ _in-SUPPLEMENTALPunctuation}', "");
Expect(1, 11775, '\p{^ _in-SUPPLEMENTALPunctuation}', "");
Expect(1, 11775, '\P{ _in-SUPPLEMENTALPunctuation}', "");
Expect(0, 11775, '\P{^ _in-SUPPLEMENTALPunctuation}', "");
Error('\p{-_KATAKANA PHONETIC_Extensions:=}');
Error('\P{-_KATAKANA PHONETIC_Extensions:=}');
Expect(1, 12799, '\p{katakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^katakanaphoneticextensions}', "");
Expect(0, 12799, '\P{katakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^katakanaphoneticextensions}', "");
Expect(0, 12783, '\p{katakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^katakanaphoneticextensions}', "");
Expect(1, 12783, '\P{katakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^katakanaphoneticextensions}', "");
Expect(1, 12799, '\p{ _Katakana_Phonetic_Extensions}', "");
Expect(0, 12799, '\p{^ _Katakana_Phonetic_Extensions}', "");
Expect(0, 12799, '\P{ _Katakana_Phonetic_Extensions}', "");
Expect(1, 12799, '\P{^ _Katakana_Phonetic_Extensions}', "");
Expect(0, 12783, '\p{ _Katakana_Phonetic_Extensions}', "");
Expect(1, 12783, '\p{^ _Katakana_Phonetic_Extensions}', "");
Expect(1, 12783, '\P{ _Katakana_Phonetic_Extensions}', "");
Expect(0, 12783, '\P{^ _Katakana_Phonetic_Extensions}', "");
Error('\p{		is:=katakana phonetic-Extensions}');
Error('\P{		is:=katakana phonetic-Extensions}');
Expect(1, 12799, '\p{iskatakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^iskatakanaphoneticextensions}', "");
Expect(0, 12799, '\P{iskatakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^iskatakanaphoneticextensions}', "");
Expect(0, 12783, '\p{iskatakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^iskatakanaphoneticextensions}', "");
Expect(1, 12783, '\P{iskatakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^iskatakanaphoneticextensions}', "");
Expect(1, 12799, '\p{-IS Katakanaphonetic	Extensions}', "");
Expect(0, 12799, '\p{^-IS Katakanaphonetic	Extensions}', "");
Expect(0, 12799, '\P{-IS Katakanaphonetic	Extensions}', "");
Expect(1, 12799, '\P{^-IS Katakanaphonetic	Extensions}', "");
Expect(0, 12783, '\p{-IS Katakanaphonetic	Extensions}', "");
Expect(1, 12783, '\p{^-IS Katakanaphonetic	Extensions}', "");
Expect(1, 12783, '\P{-IS Katakanaphonetic	Extensions}', "");
Expect(0, 12783, '\P{^-IS Katakanaphonetic	Extensions}', "");
Error('\p{	In	Katakana-phonetic	Extensions/a/}');
Error('\P{	In	Katakana-phonetic	Extensions/a/}');
Expect(1, 12799, '\p{inkatakanaphoneticextensions}', "");
Expect(0, 12799, '\p{^inkatakanaphoneticextensions}', "");
Expect(0, 12799, '\P{inkatakanaphoneticextensions}', "");
Expect(1, 12799, '\P{^inkatakanaphoneticextensions}', "");
Expect(0, 12783, '\p{inkatakanaphoneticextensions}', "");
Expect(1, 12783, '\p{^inkatakanaphoneticextensions}', "");
Expect(1, 12783, '\P{inkatakanaphoneticextensions}', "");
Expect(0, 12783, '\P{^inkatakanaphoneticextensions}', "");
Expect(1, 12799, '\p{_In_katakana-phonetic_Extensions}', "");
Expect(0, 12799, '\p{^_In_katakana-phonetic_Extensions}', "");
Expect(0, 12799, '\P{_In_katakana-phonetic_Extensions}', "");
Expect(1, 12799, '\P{^_In_katakana-phonetic_Extensions}', "");
Expect(0, 12783, '\p{_In_katakana-phonetic_Extensions}', "");
Expect(1, 12783, '\p{^_In_katakana-phonetic_Extensions}', "");
Expect(1, 12783, '\P{_In_katakana-phonetic_Extensions}', "");
Expect(0, 12783, '\P{^_In_katakana-phonetic_Extensions}', "");
Error('\p{:= Modifier_Symbol}');
Error('\P{:= Modifier_Symbol}');
Expect(1, 94, '\p{modifiersymbol}', "");
Expect(0, 94, '\p{^modifiersymbol}', "");
Expect(0, 94, '\P{modifiersymbol}', "");
Expect(1, 94, '\P{^modifiersymbol}', "");
Expect(0, 93, '\p{modifiersymbol}', "");
Expect(1, 93, '\p{^modifiersymbol}', "");
Expect(1, 93, '\P{modifiersymbol}', "");
Expect(0, 93, '\P{^modifiersymbol}', "");
Expect(1, 94, '\p{		MODIFIER symbol}', "");
Expect(0, 94, '\p{^		MODIFIER symbol}', "");
Expect(0, 94, '\P{		MODIFIER symbol}', "");
Expect(1, 94, '\P{^		MODIFIER symbol}', "");
Expect(0, 93, '\p{		MODIFIER symbol}', "");
Expect(1, 93, '\p{^		MODIFIER symbol}', "");
Expect(1, 93, '\P{		MODIFIER symbol}', "");
Expect(0, 93, '\P{^		MODIFIER symbol}', "");
Error('\p{:=IS_modifiersymbol}');
Error('\P{:=IS_modifiersymbol}');
Expect(1, 94, '\p{ismodifiersymbol}', "");
Expect(0, 94, '\p{^ismodifiersymbol}', "");
Expect(0, 94, '\P{ismodifiersymbol}', "");
Expect(1, 94, '\P{^ismodifiersymbol}', "");
Expect(0, 93, '\p{ismodifiersymbol}', "");
Expect(1, 93, '\p{^ismodifiersymbol}', "");
Expect(1, 93, '\P{ismodifiersymbol}', "");
Expect(0, 93, '\P{^ismodifiersymbol}', "");
Expect(1, 94, '\p{ IsModifier_Symbol}', "");
Expect(0, 94, '\p{^ IsModifier_Symbol}', "");
Expect(0, 94, '\P{ IsModifier_Symbol}', "");
Expect(1, 94, '\P{^ IsModifier_Symbol}', "");
Expect(0, 93, '\p{ IsModifier_Symbol}', "");
Expect(1, 93, '\p{^ IsModifier_Symbol}', "");
Expect(1, 93, '\P{ IsModifier_Symbol}', "");
Expect(0, 93, '\P{^ IsModifier_Symbol}', "");
Error('\p{--sk/a/}');
Error('\P{--sk/a/}');
Expect(1, 94, '\p{sk}', "");
Expect(0, 94, '\p{^sk}', "");
Expect(0, 94, '\P{sk}', "");
Expect(1, 94, '\P{^sk}', "");
Expect(0, 93, '\p{sk}', "");
Expect(1, 93, '\p{^sk}', "");
Expect(1, 93, '\P{sk}', "");
Expect(0, 93, '\P{^sk}', "");
Expect(1, 94, '\p{_ Sk}', "");
Expect(0, 94, '\p{^_ Sk}', "");
Expect(0, 94, '\P{_ Sk}', "");
Expect(1, 94, '\P{^_ Sk}', "");
Expect(0, 93, '\p{_ Sk}', "");
Expect(1, 93, '\p{^_ Sk}', "");
Expect(1, 93, '\P{_ Sk}', "");
Expect(0, 93, '\P{^_ Sk}', "");
Error('\p{ /a/IS_SK}');
Error('\P{ /a/IS_SK}');
Expect(1, 94, '\p{issk}', "");
Expect(0, 94, '\p{^issk}', "");
Expect(0, 94, '\P{issk}', "");
Expect(1, 94, '\P{^issk}', "");
Expect(0, 93, '\p{issk}', "");
Expect(1, 93, '\p{^issk}', "");
Expect(1, 93, '\P{issk}', "");
Expect(0, 93, '\P{^issk}', "");
Expect(1, 94, '\p{	IS Sk}', "");
Expect(0, 94, '\p{^	IS Sk}', "");
Expect(0, 94, '\P{	IS Sk}', "");
Expect(1, 94, '\P{^	IS Sk}', "");
Expect(0, 93, '\p{	IS Sk}', "");
Expect(1, 93, '\p{^	IS Sk}', "");
Expect(1, 93, '\P{	IS Sk}', "");
Expect(0, 93, '\P{^	IS Sk}', "");
Error('\p{:=Armenian}');
Error('\P{:=Armenian}');
Expect(1, 1366, '\p{armenian}', "");
Expect(0, 1366, '\p{^armenian}', "");
Expect(0, 1366, '\P{armenian}', "");
Expect(1, 1366, '\P{^armenian}', "");
Expect(0, 1328, '\p{armenian}', "");
Expect(1, 1328, '\p{^armenian}', "");
Expect(1, 1328, '\P{armenian}', "");
Expect(0, 1328, '\P{^armenian}', "");
Expect(1, 1366, '\p{_ ARMENIAN}', "");
Expect(0, 1366, '\p{^_ ARMENIAN}', "");
Expect(0, 1366, '\P{_ ARMENIAN}', "");
Expect(1, 1366, '\P{^_ ARMENIAN}', "");
Expect(0, 1328, '\p{_ ARMENIAN}', "");
Expect(1, 1328, '\p{^_ ARMENIAN}', "");
Expect(1, 1328, '\P{_ ARMENIAN}', "");
Expect(0, 1328, '\P{^_ ARMENIAN}', "");
Error('\p{ 	Is/a/armenian}');
Error('\P{ 	Is/a/armenian}');
Expect(1, 1366, '\p{isarmenian}', "");
Expect(0, 1366, '\p{^isarmenian}', "");
Expect(0, 1366, '\P{isarmenian}', "");
Expect(1, 1366, '\P{^isarmenian}', "");
Expect(0, 1328, '\p{isarmenian}', "");
Expect(1, 1328, '\p{^isarmenian}', "");
Expect(1, 1328, '\P{isarmenian}', "");
Expect(0, 1328, '\P{^isarmenian}', "");
Expect(1, 1366, '\p{-_is Armenian}', "");
Expect(0, 1366, '\p{^-_is Armenian}', "");
Expect(0, 1366, '\P{-_is Armenian}', "");
Expect(1, 1366, '\P{^-_is Armenian}', "");
Expect(0, 1328, '\p{-_is Armenian}', "");
Expect(1, 1328, '\p{^-_is Armenian}', "");
Expect(1, 1328, '\P{-_is Armenian}', "");
Expect(0, 1328, '\P{^-_is Armenian}', "");
Error('\p{- armn/a/}');
Error('\P{- armn/a/}');
Expect(1, 1366, '\p{armn}', "");
Expect(0, 1366, '\p{^armn}', "");
Expect(0, 1366, '\P{armn}', "");
Expect(1, 1366, '\P{^armn}', "");
Expect(0, 1328, '\p{armn}', "");
Expect(1, 1328, '\p{^armn}', "");
Expect(1, 1328, '\P{armn}', "");
Expect(0, 1328, '\P{^armn}', "");
Expect(1, 1366, '\p{ _Armn}', "");
Expect(0, 1366, '\p{^ _Armn}', "");
Expect(0, 1366, '\P{ _Armn}', "");
Expect(1, 1366, '\P{^ _Armn}', "");
Expect(0, 1328, '\p{ _Armn}', "");
Expect(1, 1328, '\p{^ _Armn}', "");
Expect(1, 1328, '\P{ _Armn}', "");
Expect(0, 1328, '\P{^ _Armn}', "");
Error('\p{ ISArmn:=}');
Error('\P{ ISArmn:=}');
Expect(1, 1366, '\p{isarmn}', "");
Expect(0, 1366, '\p{^isarmn}', "");
Expect(0, 1366, '\P{isarmn}', "");
Expect(1, 1366, '\P{^isarmn}', "");
Expect(0, 1328, '\p{isarmn}', "");
Expect(1, 1328, '\p{^isarmn}', "");
Expect(1, 1328, '\P{isarmn}', "");
Expect(0, 1328, '\P{^isarmn}', "");
Expect(1, 1366, '\p{_	Is	Armn}', "");
Expect(0, 1366, '\p{^_	Is	Armn}', "");
Expect(0, 1366, '\P{_	Is	Armn}', "");
Expect(1, 1366, '\P{^_	Is	Armn}', "");
Expect(0, 1328, '\p{_	Is	Armn}', "");
Expect(1, 1328, '\p{^_	Is	Armn}', "");
Expect(1, 1328, '\P{_	Is	Armn}', "");
Expect(0, 1328, '\P{^_	Is	Armn}', "");
Error('\p{/a/	-XID_CONTINUE}');
Error('\P{/a/	-XID_CONTINUE}');
Expect(1, 57, '\p{xidcontinue}', "");
Expect(0, 57, '\p{^xidcontinue}', "");
Expect(0, 57, '\P{xidcontinue}', "");
Expect(1, 57, '\P{^xidcontinue}', "");
Expect(0, 47, '\p{xidcontinue}', "");
Expect(1, 47, '\p{^xidcontinue}', "");
Expect(1, 47, '\P{xidcontinue}', "");
Expect(0, 47, '\P{^xidcontinue}', "");
Expect(1, 57, '\p{	-XIDContinue}', "");
Expect(0, 57, '\p{^	-XIDContinue}', "");
Expect(0, 57, '\P{	-XIDContinue}', "");
Expect(1, 57, '\P{^	-XIDContinue}', "");
Expect(0, 47, '\p{	-XIDContinue}', "");
Expect(1, 47, '\p{^	-XIDContinue}', "");
Expect(1, 47, '\P{	-XIDContinue}', "");
Expect(0, 47, '\P{^	-XIDContinue}', "");
Error('\p{_ IS/a/xidCONTINUE}');
Error('\P{_ IS/a/xidCONTINUE}');
Expect(1, 57, '\p{isxidcontinue}', "");
Expect(0, 57, '\p{^isxidcontinue}', "");
Expect(0, 57, '\P{isxidcontinue}', "");
Expect(1, 57, '\P{^isxidcontinue}', "");
Expect(0, 47, '\p{isxidcontinue}', "");
Expect(1, 47, '\p{^isxidcontinue}', "");
Expect(1, 47, '\P{isxidcontinue}', "");
Expect(0, 47, '\P{^isxidcontinue}', "");
Expect(1, 57, '\p{	Isxid	CONTINUE}', "");
Expect(0, 57, '\p{^	Isxid	CONTINUE}', "");
Expect(0, 57, '\P{	Isxid	CONTINUE}', "");
Expect(1, 57, '\P{^	Isxid	CONTINUE}', "");
Expect(0, 47, '\p{	Isxid	CONTINUE}', "");
Expect(1, 47, '\p{^	Isxid	CONTINUE}', "");
Expect(1, 47, '\P{	Isxid	CONTINUE}', "");
Expect(0, 47, '\P{^	Isxid	CONTINUE}', "");
Error('\p{-XIDC/a/}');
Error('\P{-XIDC/a/}');
Expect(1, 57, '\p{xidc}', "");
Expect(0, 57, '\p{^xidc}', "");
Expect(0, 57, '\P{xidc}', "");
Expect(1, 57, '\P{^xidc}', "");
Expect(0, 47, '\p{xidc}', "");
Expect(1, 47, '\p{^xidc}', "");
Expect(1, 47, '\P{xidc}', "");
Expect(0, 47, '\P{^xidc}', "");
Expect(1, 57, '\p{ -XIDC}', "");
Expect(0, 57, '\p{^ -XIDC}', "");
Expect(0, 57, '\P{ -XIDC}', "");
Expect(1, 57, '\P{^ -XIDC}', "");
Expect(0, 47, '\p{ -XIDC}', "");
Expect(1, 47, '\p{^ -XIDC}', "");
Expect(1, 47, '\P{ -XIDC}', "");
Expect(0, 47, '\P{^ -XIDC}', "");
Error('\p{/a/ IsXIDC}');
Error('\P{/a/ IsXIDC}');
Expect(1, 57, '\p{isxidc}', "");
Expect(0, 57, '\p{^isxidc}', "");
Expect(0, 57, '\P{isxidc}', "");
Expect(1, 57, '\P{^isxidc}', "");
Expect(0, 47, '\p{isxidc}', "");
Expect(1, 47, '\p{^isxidc}', "");
Expect(1, 47, '\P{isxidc}', "");
Expect(0, 47, '\P{^isxidc}', "");
Expect(1, 57, '\p{-is	XIDC}', "");
Expect(0, 57, '\p{^-is	XIDC}', "");
Expect(0, 57, '\P{-is	XIDC}', "");
Expect(1, 57, '\P{^-is	XIDC}', "");
Expect(0, 47, '\p{-is	XIDC}', "");
Expect(1, 47, '\p{^-is	XIDC}', "");
Expect(1, 47, '\P{-is	XIDC}', "");
Expect(0, 47, '\P{^-is	XIDC}', "");
Error('\p{/a/	_HYPHEN}');
Error('\P{/a/	_HYPHEN}');
Expect(1, 45, '\p{hyphen}', "");
Expect(0, 45, '\p{^hyphen}', "");
Expect(0, 45, '\P{hyphen}', "");
Expect(1, 45, '\P{^hyphen}', "");
Expect(0, 44, '\p{hyphen}', "");
Expect(1, 44, '\p{^hyphen}', "");
Expect(1, 44, '\P{hyphen}', "");
Expect(0, 44, '\P{^hyphen}', "");
Expect(1, 45, '\p{	 hyphen}', "");
Expect(0, 45, '\p{^	 hyphen}', "");
Expect(0, 45, '\P{	 hyphen}', "");
Expect(1, 45, '\P{^	 hyphen}', "");
Expect(0, 44, '\p{	 hyphen}', "");
Expect(1, 44, '\p{^	 hyphen}', "");
Expect(1, 44, '\P{	 hyphen}', "");
Expect(0, 44, '\P{^	 hyphen}', "");
Error('\p{	:=IS_HYPHEN}');
Error('\P{	:=IS_HYPHEN}');
Expect(1, 45, '\p{ishyphen}', "");
Expect(0, 45, '\p{^ishyphen}', "");
Expect(0, 45, '\P{ishyphen}', "");
Expect(1, 45, '\P{^ishyphen}', "");
Expect(0, 44, '\p{ishyphen}', "");
Expect(1, 44, '\p{^ishyphen}', "");
Expect(1, 44, '\P{ishyphen}', "");
Expect(0, 44, '\P{^ishyphen}', "");
Expect(1, 45, '\p{_ is	Hyphen}', "");
Expect(0, 45, '\p{^_ is	Hyphen}', "");
Expect(0, 45, '\P{_ is	Hyphen}', "");
Expect(1, 45, '\P{^_ is	Hyphen}', "");
Expect(0, 44, '\p{_ is	Hyphen}', "");
Expect(1, 44, '\p{^_ is	Hyphen}', "");
Expect(1, 44, '\P{_ is	Hyphen}', "");
Expect(0, 44, '\P{^_ is	Hyphen}', "");
Error('\p{  UNIFIED:=Canadian-Aboriginal-syllabics}');
Error('\P{  UNIFIED:=Canadian-Aboriginal-syllabics}');
Expect(1, 5759, '\p{unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{unifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^unifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{-	unified_Canadian	aboriginal SYLLABICS}', "");
Expect(0, 5759, '\p{^-	unified_Canadian	aboriginal SYLLABICS}', "");
Expect(0, 5759, '\P{-	unified_Canadian	aboriginal SYLLABICS}', "");
Expect(1, 5759, '\P{^-	unified_Canadian	aboriginal SYLLABICS}', "");
Expect(0, 5119, '\p{-	unified_Canadian	aboriginal SYLLABICS}', "");
Expect(1, 5119, '\p{^-	unified_Canadian	aboriginal SYLLABICS}', "");
Expect(1, 5119, '\P{-	unified_Canadian	aboriginal SYLLABICS}', "");
Expect(0, 5119, '\P{^-	unified_Canadian	aboriginal SYLLABICS}', "");
Error('\p{_/a/IS	UNIFIED Canadian aboriginalsyllabics}');
Error('\P{_/a/IS	UNIFIED Canadian aboriginalsyllabics}');
Expect(1, 5759, '\p{isunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^isunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{isunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^isunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{isunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^isunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{isunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^isunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{ is UNIFIED-Canadian-aboriginal syllabics}', "");
Expect(0, 5759, '\p{^ is UNIFIED-Canadian-aboriginal syllabics}', "");
Expect(0, 5759, '\P{ is UNIFIED-Canadian-aboriginal syllabics}', "");
Expect(1, 5759, '\P{^ is UNIFIED-Canadian-aboriginal syllabics}', "");
Expect(0, 5119, '\p{ is UNIFIED-Canadian-aboriginal syllabics}', "");
Expect(1, 5119, '\p{^ is UNIFIED-Canadian-aboriginal syllabics}', "");
Expect(1, 5119, '\P{ is UNIFIED-Canadian-aboriginal syllabics}', "");
Expect(0, 5119, '\P{^ is UNIFIED-Canadian-aboriginal syllabics}', "");
Error('\p{-:=inUnifiedCanadian	aboriginal_syllabics}');
Error('\P{-:=inUnifiedCanadian	aboriginal_syllabics}');
Expect(1, 5759, '\p{inunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\p{^inunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5759, '\P{inunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\P{^inunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\p{inunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\p{^inunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5119, '\P{inunifiedcanadianaboriginalsyllabics}', "");
Expect(0, 5119, '\P{^inunifiedcanadianaboriginalsyllabics}', "");
Expect(1, 5759, '\p{ 	InUnified-canadian-Aboriginal	syllabics}', "");
Expect(0, 5759, '\p{^ 	InUnified-canadian-Aboriginal	syllabics}', "");
Expect(0, 5759, '\P{ 	InUnified-canadian-Aboriginal	syllabics}', "");
Expect(1, 5759, '\P{^ 	InUnified-canadian-Aboriginal	syllabics}', "");
Expect(0, 5119, '\p{ 	InUnified-canadian-Aboriginal	syllabics}', "");
Expect(1, 5119, '\p{^ 	InUnified-canadian-Aboriginal	syllabics}', "");
Expect(1, 5119, '\P{ 	InUnified-canadian-Aboriginal	syllabics}', "");
Expect(0, 5119, '\P{^ 	InUnified-canadian-Aboriginal	syllabics}', "");
Error('\p{CanadianSyllabics:=}');
Error('\P{CanadianSyllabics:=}');
Expect(1, 5759, '\p{canadiansyllabics}', "");
Expect(0, 5759, '\p{^canadiansyllabics}', "");
Expect(0, 5759, '\P{canadiansyllabics}', "");
Expect(1, 5759, '\P{^canadiansyllabics}', "");
Expect(0, 5119, '\p{canadiansyllabics}', "");
Expect(1, 5119, '\p{^canadiansyllabics}', "");
Expect(1, 5119, '\P{canadiansyllabics}', "");
Expect(0, 5119, '\P{^canadiansyllabics}', "");
Expect(1, 5759, '\p{_Canadian_SYLLABICS}', "");
Expect(0, 5759, '\p{^_Canadian_SYLLABICS}', "");
Expect(0, 5759, '\P{_Canadian_SYLLABICS}', "");
Expect(1, 5759, '\P{^_Canadian_SYLLABICS}', "");
Expect(0, 5119, '\p{_Canadian_SYLLABICS}', "");
Expect(1, 5119, '\p{^_Canadian_SYLLABICS}', "");
Expect(1, 5119, '\P{_Canadian_SYLLABICS}', "");
Expect(0, 5119, '\P{^_Canadian_SYLLABICS}', "");
Error('\p{:=IS-Canadian_syllabics}');
Error('\P{:=IS-Canadian_syllabics}');
Expect(1, 5759, '\p{iscanadiansyllabics}', "");
Expect(0, 5759, '\p{^iscanadiansyllabics}', "");
Expect(0, 5759, '\P{iscanadiansyllabics}', "");
Expect(1, 5759, '\P{^iscanadiansyllabics}', "");
Expect(0, 5119, '\p{iscanadiansyllabics}', "");
Expect(1, 5119, '\p{^iscanadiansyllabics}', "");
Expect(1, 5119, '\P{iscanadiansyllabics}', "");
Expect(0, 5119, '\P{^iscanadiansyllabics}', "");
Expect(1, 5759, '\p{_-IS	Canadian SYLLABICS}', "");
Expect(0, 5759, '\p{^_-IS	Canadian SYLLABICS}', "");
Expect(0, 5759, '\P{_-IS	Canadian SYLLABICS}', "");
Expect(1, 5759, '\P{^_-IS	Canadian SYLLABICS}', "");
Expect(0, 5119, '\p{_-IS	Canadian SYLLABICS}', "");
Expect(1, 5119, '\p{^_-IS	Canadian SYLLABICS}', "");
Expect(1, 5119, '\P{_-IS	Canadian SYLLABICS}', "");
Expect(0, 5119, '\P{^_-IS	Canadian SYLLABICS}', "");
Error('\p{- In:=CANADIAN_Syllabics}');
Error('\P{- In:=CANADIAN_Syllabics}');
Expect(1, 5759, '\p{incanadiansyllabics}', "");
Expect(0, 5759, '\p{^incanadiansyllabics}', "");
Expect(0, 5759, '\P{incanadiansyllabics}', "");
Expect(1, 5759, '\P{^incanadiansyllabics}', "");
Expect(0, 5119, '\p{incanadiansyllabics}', "");
Expect(1, 5119, '\p{^incanadiansyllabics}', "");
Expect(1, 5119, '\P{incanadiansyllabics}', "");
Expect(0, 5119, '\P{^incanadiansyllabics}', "");
Expect(1, 5759, '\p{	IN	canadian SYLLABICS}', "");
Expect(0, 5759, '\p{^	IN	canadian SYLLABICS}', "");
Expect(0, 5759, '\P{	IN	canadian SYLLABICS}', "");
Expect(1, 5759, '\P{^	IN	canadian SYLLABICS}', "");
Expect(0, 5119, '\p{	IN	canadian SYLLABICS}', "");
Expect(1, 5119, '\p{^	IN	canadian SYLLABICS}', "");
Expect(1, 5119, '\P{	IN	canadian SYLLABICS}', "");
Expect(0, 5119, '\P{^	IN	canadian SYLLABICS}', "");
Error('\p{  egyptian	HIEROGLYPHS/a/}');
Error('\P{  egyptian	HIEROGLYPHS/a/}');
Expect(1, 78894, '\p{egyptianhieroglyphs}', "");
Expect(0, 78894, '\p{^egyptianhieroglyphs}', "");
Expect(0, 78894, '\P{egyptianhieroglyphs}', "");
Expect(1, 78894, '\P{^egyptianhieroglyphs}', "");
Expect(0, 77823, '\p{egyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^egyptianhieroglyphs}', "");
Expect(1, 77823, '\P{egyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^egyptianhieroglyphs}', "");
Expect(1, 78894, '\p{-egyptian	hieroglyphs}', "");
Expect(0, 78894, '\p{^-egyptian	hieroglyphs}', "");
Expect(0, 78894, '\P{-egyptian	hieroglyphs}', "");
Expect(1, 78894, '\P{^-egyptian	hieroglyphs}', "");
Expect(0, 77823, '\p{-egyptian	hieroglyphs}', "");
Expect(1, 77823, '\p{^-egyptian	hieroglyphs}', "");
Expect(1, 77823, '\P{-egyptian	hieroglyphs}', "");
Expect(0, 77823, '\P{^-egyptian	hieroglyphs}', "");
Error('\p{_	Is-Egyptian/a/Hieroglyphs}');
Error('\P{_	Is-Egyptian/a/Hieroglyphs}');
Expect(1, 78894, '\p{isegyptianhieroglyphs}', "");
Expect(0, 78894, '\p{^isegyptianhieroglyphs}', "");
Expect(0, 78894, '\P{isegyptianhieroglyphs}', "");
Expect(1, 78894, '\P{^isegyptianhieroglyphs}', "");
Expect(0, 77823, '\p{isegyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^isegyptianhieroglyphs}', "");
Expect(1, 77823, '\P{isegyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^isegyptianhieroglyphs}', "");
Expect(1, 78894, '\p{-IsEgyptian HIEROGLYPHS}', "");
Expect(0, 78894, '\p{^-IsEgyptian HIEROGLYPHS}', "");
Expect(0, 78894, '\P{-IsEgyptian HIEROGLYPHS}', "");
Expect(1, 78894, '\P{^-IsEgyptian HIEROGLYPHS}', "");
Expect(0, 77823, '\p{-IsEgyptian HIEROGLYPHS}', "");
Expect(1, 77823, '\p{^-IsEgyptian HIEROGLYPHS}', "");
Expect(1, 77823, '\P{-IsEgyptian HIEROGLYPHS}', "");
Expect(0, 77823, '\P{^-IsEgyptian HIEROGLYPHS}', "");
Error('\p{:=Egyp}');
Error('\P{:=Egyp}');
Expect(1, 78894, '\p{egyp}', "");
Expect(0, 78894, '\p{^egyp}', "");
Expect(0, 78894, '\P{egyp}', "");
Expect(1, 78894, '\P{^egyp}', "");
Expect(0, 77823, '\p{egyp}', "");
Expect(1, 77823, '\p{^egyp}', "");
Expect(1, 77823, '\P{egyp}', "");
Expect(0, 77823, '\P{^egyp}', "");
Expect(1, 78894, '\p{		egyp}', "");
Expect(0, 78894, '\p{^		egyp}', "");
Expect(0, 78894, '\P{		egyp}', "");
Expect(1, 78894, '\P{^		egyp}', "");
Expect(0, 77823, '\p{		egyp}', "");
Expect(1, 77823, '\p{^		egyp}', "");
Expect(1, 77823, '\P{		egyp}', "");
Expect(0, 77823, '\P{^		egyp}', "");
Error('\p{/a/_ISegyp}');
Error('\P{/a/_ISegyp}');
Expect(1, 78894, '\p{isegyp}', "");
Expect(0, 78894, '\p{^isegyp}', "");
Expect(0, 78894, '\P{isegyp}', "");
Expect(1, 78894, '\P{^isegyp}', "");
Expect(0, 77823, '\p{isegyp}', "");
Expect(1, 77823, '\p{^isegyp}', "");
Expect(1, 77823, '\P{isegyp}', "");
Expect(0, 77823, '\P{^isegyp}', "");
Expect(1, 78894, '\p{-Is EGYP}', "");
Expect(0, 78894, '\p{^-Is EGYP}', "");
Expect(0, 78894, '\P{-Is EGYP}', "");
Expect(1, 78894, '\P{^-Is EGYP}', "");
Expect(0, 77823, '\p{-Is EGYP}', "");
Expect(1, 77823, '\p{^-Is EGYP}', "");
Expect(1, 77823, '\P{-Is EGYP}', "");
Expect(0, 77823, '\P{^-Is EGYP}', "");
Error('\p{/a/--Aegean	NUMBERS}');
Error('\P{/a/--Aegean	NUMBERS}');
Expect(1, 65855, '\p{aegeannumbers}', "");
Expect(0, 65855, '\p{^aegeannumbers}', "");
Expect(0, 65855, '\P{aegeannumbers}', "");
Expect(1, 65855, '\P{^aegeannumbers}', "");
Expect(0, 65791, '\p{aegeannumbers}', "");
Expect(1, 65791, '\p{^aegeannumbers}', "");
Expect(1, 65791, '\P{aegeannumbers}', "");
Expect(0, 65791, '\P{^aegeannumbers}', "");
Expect(1, 65855, '\p{-Aegean-numbers}', "");
Expect(0, 65855, '\p{^-Aegean-numbers}', "");
Expect(0, 65855, '\P{-Aegean-numbers}', "");
Expect(1, 65855, '\P{^-Aegean-numbers}', "");
Expect(0, 65791, '\p{-Aegean-numbers}', "");
Expect(1, 65791, '\p{^-Aegean-numbers}', "");
Expect(1, 65791, '\P{-Aegean-numbers}', "");
Expect(0, 65791, '\P{^-Aegean-numbers}', "");
Error('\p{/a/ IS	AEGEAN	NUMBERS}');
Error('\P{/a/ IS	AEGEAN	NUMBERS}');
Expect(1, 65855, '\p{isaegeannumbers}', "");
Expect(0, 65855, '\p{^isaegeannumbers}', "");
Expect(0, 65855, '\P{isaegeannumbers}', "");
Expect(1, 65855, '\P{^isaegeannumbers}', "");
Expect(0, 65791, '\p{isaegeannumbers}', "");
Expect(1, 65791, '\p{^isaegeannumbers}', "");
Expect(1, 65791, '\P{isaegeannumbers}', "");
Expect(0, 65791, '\P{^isaegeannumbers}', "");
Expect(1, 65855, '\p{		Is	Aegean	Numbers}', "");
Expect(0, 65855, '\p{^		Is	Aegean	Numbers}', "");
Expect(0, 65855, '\P{		Is	Aegean	Numbers}', "");
Expect(1, 65855, '\P{^		Is	Aegean	Numbers}', "");
Expect(0, 65791, '\p{		Is	Aegean	Numbers}', "");
Expect(1, 65791, '\p{^		Is	Aegean	Numbers}', "");
Expect(1, 65791, '\P{		Is	Aegean	Numbers}', "");
Expect(0, 65791, '\P{^		Is	Aegean	Numbers}', "");
Error('\p{ :=INAegean_Numbers}');
Error('\P{ :=INAegean_Numbers}');
Expect(1, 65855, '\p{inaegeannumbers}', "");
Expect(0, 65855, '\p{^inaegeannumbers}', "");
Expect(0, 65855, '\P{inaegeannumbers}', "");
Expect(1, 65855, '\P{^inaegeannumbers}', "");
Expect(0, 65791, '\p{inaegeannumbers}', "");
Expect(1, 65791, '\p{^inaegeannumbers}', "");
Expect(1, 65791, '\P{inaegeannumbers}', "");
Expect(0, 65791, '\P{^inaegeannumbers}', "");
Expect(1, 65855, '\p{	 INAEGEAN	NUMBERS}', "");
Expect(0, 65855, '\p{^	 INAEGEAN	NUMBERS}', "");
Expect(0, 65855, '\P{	 INAEGEAN	NUMBERS}', "");
Expect(1, 65855, '\P{^	 INAEGEAN	NUMBERS}', "");
Expect(0, 65791, '\p{	 INAEGEAN	NUMBERS}', "");
Expect(1, 65791, '\p{^	 INAEGEAN	NUMBERS}', "");
Expect(1, 65791, '\P{	 INAEGEAN	NUMBERS}', "");
Expect(0, 65791, '\P{^	 INAEGEAN	NUMBERS}', "");
Error('\p{	_bidi:=control}');
Error('\P{	_bidi:=control}');
Expect(1, 8207, '\p{bidicontrol}', "");
Expect(0, 8207, '\p{^bidicontrol}', "");
Expect(0, 8207, '\P{bidicontrol}', "");
Expect(1, 8207, '\P{^bidicontrol}', "");
Expect(0, 8205, '\p{bidicontrol}', "");
Expect(1, 8205, '\p{^bidicontrol}', "");
Expect(1, 8205, '\P{bidicontrol}', "");
Expect(0, 8205, '\P{^bidicontrol}', "");
Expect(1, 8207, '\p{__Bidi-control}', "");
Expect(0, 8207, '\p{^__Bidi-control}', "");
Expect(0, 8207, '\P{__Bidi-control}', "");
Expect(1, 8207, '\P{^__Bidi-control}', "");
Expect(0, 8205, '\p{__Bidi-control}', "");
Expect(1, 8205, '\p{^__Bidi-control}', "");
Expect(1, 8205, '\P{__Bidi-control}', "");
Expect(0, 8205, '\P{^__Bidi-control}', "");
Error('\p{	 ISBidi-CONTROL/a/}');
Error('\P{	 ISBidi-CONTROL/a/}');
Expect(1, 8207, '\p{isbidicontrol}', "");
Expect(0, 8207, '\p{^isbidicontrol}', "");
Expect(0, 8207, '\P{isbidicontrol}', "");
Expect(1, 8207, '\P{^isbidicontrol}', "");
Expect(0, 8205, '\p{isbidicontrol}', "");
Expect(1, 8205, '\p{^isbidicontrol}', "");
Expect(1, 8205, '\P{isbidicontrol}', "");
Expect(0, 8205, '\P{^isbidicontrol}', "");
Expect(1, 8207, '\p{		is	bidi Control}', "");
Expect(0, 8207, '\p{^		is	bidi Control}', "");
Expect(0, 8207, '\P{		is	bidi Control}', "");
Expect(1, 8207, '\P{^		is	bidi Control}', "");
Expect(0, 8205, '\p{		is	bidi Control}', "");
Expect(1, 8205, '\p{^		is	bidi Control}', "");
Expect(1, 8205, '\P{		is	bidi Control}', "");
Expect(0, 8205, '\P{^		is	bidi Control}', "");
Error('\p{ :=bidi C}');
Error('\P{ :=bidi C}');
Expect(1, 8207, '\p{bidic}', "");
Expect(0, 8207, '\p{^bidic}', "");
Expect(0, 8207, '\P{bidic}', "");
Expect(1, 8207, '\P{^bidic}', "");
Expect(0, 8205, '\p{bidic}', "");
Expect(1, 8205, '\p{^bidic}', "");
Expect(1, 8205, '\P{bidic}', "");
Expect(0, 8205, '\P{^bidic}', "");
Expect(1, 8207, '\p{ bidi-C}', "");
Expect(0, 8207, '\p{^ bidi-C}', "");
Expect(0, 8207, '\P{ bidi-C}', "");
Expect(1, 8207, '\P{^ bidi-C}', "");
Expect(0, 8205, '\p{ bidi-C}', "");
Expect(1, 8205, '\p{^ bidi-C}', "");
Expect(1, 8205, '\P{ bidi-C}', "");
Expect(0, 8205, '\P{^ bidi-C}', "");
Error('\p{ -IS	bidi c/a/}');
Error('\P{ -IS	bidi c/a/}');
Expect(1, 8207, '\p{isbidic}', "");
Expect(0, 8207, '\p{^isbidic}', "");
Expect(0, 8207, '\P{isbidic}', "");
Expect(1, 8207, '\P{^isbidic}', "");
Expect(0, 8205, '\p{isbidic}', "");
Expect(1, 8205, '\p{^isbidic}', "");
Expect(1, 8205, '\P{isbidic}', "");
Expect(0, 8205, '\P{^isbidic}', "");
Expect(1, 8207, '\p{_Is bidi_C}', "");
Expect(0, 8207, '\p{^_Is bidi_C}', "");
Expect(0, 8207, '\P{_Is bidi_C}', "");
Expect(1, 8207, '\P{^_Is bidi_C}', "");
Expect(0, 8205, '\p{_Is bidi_C}', "");
Expect(1, 8205, '\p{^_Is bidi_C}', "");
Expect(1, 8205, '\P{_Is bidi_C}', "");
Expect(0, 8205, '\P{^_Is bidi_C}', "");
Error('\p{	_Combining-diacritical:=Marks	ForSymbols}');
Error('\P{	_Combining-diacritical:=Marks	ForSymbols}');
Expect(1, 8447, '\p{combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{combiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^combiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{_-Combining_diacritical_marks FOR-Symbols}', "");
Expect(0, 8447, '\p{^_-Combining_diacritical_marks FOR-Symbols}', "");
Expect(0, 8447, '\P{_-Combining_diacritical_marks FOR-Symbols}', "");
Expect(1, 8447, '\P{^_-Combining_diacritical_marks FOR-Symbols}', "");
Expect(0, 8399, '\p{_-Combining_diacritical_marks FOR-Symbols}', "");
Expect(1, 8399, '\p{^_-Combining_diacritical_marks FOR-Symbols}', "");
Expect(1, 8399, '\P{_-Combining_diacritical_marks FOR-Symbols}', "");
Expect(0, 8399, '\P{^_-Combining_diacritical_marks FOR-Symbols}', "");
Error('\p{	/a/Is Combining	DIACRITICAL-Marks-for-symbols}');
Error('\P{	/a/Is Combining	DIACRITICAL-Marks-for-symbols}');
Expect(1, 8447, '\p{iscombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^iscombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{iscombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^iscombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{iscombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^iscombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{iscombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^iscombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{_IS	combining	Diacritical-MARKS_for_SYMBOLS}', "");
Expect(0, 8447, '\p{^_IS	combining	Diacritical-MARKS_for_SYMBOLS}', "");
Expect(0, 8447, '\P{_IS	combining	Diacritical-MARKS_for_SYMBOLS}', "");
Expect(1, 8447, '\P{^_IS	combining	Diacritical-MARKS_for_SYMBOLS}', "");
Expect(0, 8399, '\p{_IS	combining	Diacritical-MARKS_for_SYMBOLS}', "");
Expect(1, 8399, '\p{^_IS	combining	Diacritical-MARKS_for_SYMBOLS}', "");
Expect(1, 8399, '\P{_IS	combining	Diacritical-MARKS_for_SYMBOLS}', "");
Expect(0, 8399, '\P{^_IS	combining	Diacritical-MARKS_for_SYMBOLS}', "");
Error('\p{	_In	COMBINING/a/Diacritical-MARKS	for_Symbols}');
Error('\P{	_In	COMBINING/a/Diacritical-MARKS	for_Symbols}');
Expect(1, 8447, '\p{incombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\p{^incombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8447, '\P{incombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\P{^incombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\p{incombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\p{^incombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8399, '\P{incombiningdiacriticalmarksforsymbols}', "");
Expect(0, 8399, '\P{^incombiningdiacriticalmarksforsymbols}', "");
Expect(1, 8447, '\p{		inCOMBININGdiacritical-MARKS-For Symbols}', "");
Expect(0, 8447, '\p{^		inCOMBININGdiacritical-MARKS-For Symbols}', "");
Expect(0, 8447, '\P{		inCOMBININGdiacritical-MARKS-For Symbols}', "");
Expect(1, 8447, '\P{^		inCOMBININGdiacritical-MARKS-For Symbols}', "");
Expect(0, 8399, '\p{		inCOMBININGdiacritical-MARKS-For Symbols}', "");
Expect(1, 8399, '\p{^		inCOMBININGdiacritical-MARKS-For Symbols}', "");
Expect(1, 8399, '\P{		inCOMBININGdiacritical-MARKS-For Symbols}', "");
Expect(0, 8399, '\P{^		inCOMBININGdiacritical-MARKS-For Symbols}', "");
Error('\p{-_COMBINING/a/marks FORSymbols}');
Error('\P{-_COMBINING/a/marks FORSymbols}');
Expect(1, 8447, '\p{combiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^combiningmarksforsymbols}', "");
Expect(0, 8447, '\P{combiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^combiningmarksforsymbols}', "");
Expect(0, 8399, '\p{combiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^combiningmarksforsymbols}', "");
Expect(1, 8399, '\P{combiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^combiningmarksforsymbols}', "");
Expect(1, 8447, '\p{CombiningMarksFORSymbols}', "");
Expect(0, 8447, '\p{^CombiningMarksFORSymbols}', "");
Expect(0, 8447, '\P{CombiningMarksFORSymbols}', "");
Expect(1, 8447, '\P{^CombiningMarksFORSymbols}', "");
Expect(0, 8399, '\p{CombiningMarksFORSymbols}', "");
Expect(1, 8399, '\p{^CombiningMarksFORSymbols}', "");
Expect(1, 8399, '\P{CombiningMarksFORSymbols}', "");
Expect(0, 8399, '\P{^CombiningMarksFORSymbols}', "");
Error('\p{-	IS/a/COMBINING	marks	For_SYMBOLS}');
Error('\P{-	IS/a/COMBINING	marks	For_SYMBOLS}');
Expect(1, 8447, '\p{iscombiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^iscombiningmarksforsymbols}', "");
Expect(0, 8447, '\P{iscombiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^iscombiningmarksforsymbols}', "");
Expect(0, 8399, '\p{iscombiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^iscombiningmarksforsymbols}', "");
Expect(1, 8399, '\P{iscombiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^iscombiningmarksforsymbols}', "");
Expect(1, 8447, '\p{-Is	combiningmarks_ForSymbols}', "");
Expect(0, 8447, '\p{^-Is	combiningmarks_ForSymbols}', "");
Expect(0, 8447, '\P{-Is	combiningmarks_ForSymbols}', "");
Expect(1, 8447, '\P{^-Is	combiningmarks_ForSymbols}', "");
Expect(0, 8399, '\p{-Is	combiningmarks_ForSymbols}', "");
Expect(1, 8399, '\p{^-Is	combiningmarks_ForSymbols}', "");
Expect(1, 8399, '\P{-Is	combiningmarks_ForSymbols}', "");
Expect(0, 8399, '\P{^-Is	combiningmarks_ForSymbols}', "");
Error('\p{/a/ -IN-Combining	Marks	for_Symbols}');
Error('\P{/a/ -IN-Combining	Marks	for_Symbols}');
Expect(1, 8447, '\p{incombiningmarksforsymbols}', "");
Expect(0, 8447, '\p{^incombiningmarksforsymbols}', "");
Expect(0, 8447, '\P{incombiningmarksforsymbols}', "");
Expect(1, 8447, '\P{^incombiningmarksforsymbols}', "");
Expect(0, 8399, '\p{incombiningmarksforsymbols}', "");
Expect(1, 8399, '\p{^incombiningmarksforsymbols}', "");
Expect(1, 8399, '\P{incombiningmarksforsymbols}', "");
Expect(0, 8399, '\P{^incombiningmarksforsymbols}', "");
Expect(1, 8447, '\p{_In_COMBINING Marks	For	SYMBOLS}', "");
Expect(0, 8447, '\p{^_In_COMBINING Marks	For	SYMBOLS}', "");
Expect(0, 8447, '\P{_In_COMBINING Marks	For	SYMBOLS}', "");
Expect(1, 8447, '\P{^_In_COMBINING Marks	For	SYMBOLS}', "");
Expect(0, 8399, '\p{_In_COMBINING Marks	For	SYMBOLS}', "");
Expect(1, 8399, '\p{^_In_COMBINING Marks	For	SYMBOLS}', "");
Expect(1, 8399, '\P{_In_COMBINING Marks	For	SYMBOLS}', "");
Expect(0, 8399, '\P{^_In_COMBINING Marks	For	SYMBOLS}', "");
Error('\p{_smallFORM:=VARIANTS}');
Error('\P{_smallFORM:=VARIANTS}');
Expect(1, 65135, '\p{smallformvariants}', "");
Expect(0, 65135, '\p{^smallformvariants}', "");
Expect(0, 65135, '\P{smallformvariants}', "");
Expect(1, 65135, '\P{^smallformvariants}', "");
Expect(0, 65103, '\p{smallformvariants}', "");
Expect(1, 65103, '\p{^smallformvariants}', "");
Expect(1, 65103, '\P{smallformvariants}', "");
Expect(0, 65103, '\P{^smallformvariants}', "");
Expect(1, 65135, '\p{ _SMALL-formVariants}', "");
Expect(0, 65135, '\p{^ _SMALL-formVariants}', "");
Expect(0, 65135, '\P{ _SMALL-formVariants}', "");
Expect(1, 65135, '\P{^ _SMALL-formVariants}', "");
Expect(0, 65103, '\p{ _SMALL-formVariants}', "");
Expect(1, 65103, '\p{^ _SMALL-formVariants}', "");
Expect(1, 65103, '\P{ _SMALL-formVariants}', "");
Expect(0, 65103, '\P{^ _SMALL-formVariants}', "");
Error('\p{	/a/ISSmall_Form	Variants}');
Error('\P{	/a/ISSmall_Form	Variants}');
Expect(1, 65135, '\p{issmallformvariants}', "");
Expect(0, 65135, '\p{^issmallformvariants}', "");
Expect(0, 65135, '\P{issmallformvariants}', "");
Expect(1, 65135, '\P{^issmallformvariants}', "");
Expect(0, 65103, '\p{issmallformvariants}', "");
Expect(1, 65103, '\p{^issmallformvariants}', "");
Expect(1, 65103, '\P{issmallformvariants}', "");
Expect(0, 65103, '\P{^issmallformvariants}', "");
Expect(1, 65135, '\p{_	Is_small	form	Variants}', "");
Expect(0, 65135, '\p{^_	Is_small	form	Variants}', "");
Expect(0, 65135, '\P{_	Is_small	form	Variants}', "");
Expect(1, 65135, '\P{^_	Is_small	form	Variants}', "");
Expect(0, 65103, '\p{_	Is_small	form	Variants}', "");
Expect(1, 65103, '\p{^_	Is_small	form	Variants}', "");
Expect(1, 65103, '\P{_	Is_small	form	Variants}', "");
Expect(0, 65103, '\P{^_	Is_small	form	Variants}', "");
Error('\p{ -in Small_FORM Variants/a/}');
Error('\P{ -in Small_FORM Variants/a/}');
Expect(1, 65135, '\p{insmallformvariants}', "");
Expect(0, 65135, '\p{^insmallformvariants}', "");
Expect(0, 65135, '\P{insmallformvariants}', "");
Expect(1, 65135, '\P{^insmallformvariants}', "");
Expect(0, 65103, '\p{insmallformvariants}', "");
Expect(1, 65103, '\p{^insmallformvariants}', "");
Expect(1, 65103, '\P{insmallformvariants}', "");
Expect(0, 65103, '\P{^insmallformvariants}', "");
Expect(1, 65135, '\p{ IN-Small-Form-Variants}', "");
Expect(0, 65135, '\p{^ IN-Small-Form-Variants}', "");
Expect(0, 65135, '\P{ IN-Small-Form-Variants}', "");
Expect(1, 65135, '\P{^ IN-Small-Form-Variants}', "");
Expect(0, 65103, '\p{ IN-Small-Form-Variants}', "");
Expect(1, 65103, '\p{^ IN-Small-Form-Variants}', "");
Expect(1, 65103, '\P{ IN-Small-Form-Variants}', "");
Expect(0, 65103, '\P{^ IN-Small-Form-Variants}', "");
Error('\p{		Tai Tham/a/}');
Error('\P{		Tai Tham/a/}');
Expect(1, 6750, '\p{taitham}', "");
Expect(0, 6750, '\p{^taitham}', "");
Expect(0, 6750, '\P{taitham}', "");
Expect(1, 6750, '\P{^taitham}', "");
Expect(0, 6687, '\p{taitham}', "");
Expect(1, 6687, '\p{^taitham}', "");
Expect(1, 6687, '\P{taitham}', "");
Expect(0, 6687, '\P{^taitham}', "");
Expect(1, 6750, '\p{-tai	THAM}', "");
Expect(0, 6750, '\p{^-tai	THAM}', "");
Expect(0, 6750, '\P{-tai	THAM}', "");
Expect(1, 6750, '\P{^-tai	THAM}', "");
Expect(0, 6687, '\p{-tai	THAM}', "");
Expect(1, 6687, '\p{^-tai	THAM}', "");
Expect(1, 6687, '\P{-tai	THAM}', "");
Expect(0, 6687, '\P{^-tai	THAM}', "");
Error('\p{/a/_ isTai-THAM}');
Error('\P{/a/_ isTai-THAM}');
Expect(1, 6750, '\p{istaitham}', "");
Expect(0, 6750, '\p{^istaitham}', "");
Expect(0, 6750, '\P{istaitham}', "");
Expect(1, 6750, '\P{^istaitham}', "");
Expect(0, 6687, '\p{istaitham}', "");
Expect(1, 6687, '\p{^istaitham}', "");
Expect(1, 6687, '\P{istaitham}', "");
Expect(0, 6687, '\P{^istaitham}', "");
Expect(1, 6750, '\p{_	IS_tai-Tham}', "");
Expect(0, 6750, '\p{^_	IS_tai-Tham}', "");
Expect(0, 6750, '\P{_	IS_tai-Tham}', "");
Expect(1, 6750, '\P{^_	IS_tai-Tham}', "");
Expect(0, 6687, '\p{_	IS_tai-Tham}', "");
Expect(1, 6687, '\p{^_	IS_tai-Tham}', "");
Expect(1, 6687, '\P{_	IS_tai-Tham}', "");
Expect(0, 6687, '\P{^_	IS_tai-Tham}', "");
Error('\p{/a/-	Lana}');
Error('\P{/a/-	Lana}');
Expect(1, 6750, '\p{lana}', "");
Expect(0, 6750, '\p{^lana}', "");
Expect(0, 6750, '\P{lana}', "");
Expect(1, 6750, '\P{^lana}', "");
Expect(0, 6687, '\p{lana}', "");
Expect(1, 6687, '\p{^lana}', "");
Expect(1, 6687, '\P{lana}', "");
Expect(0, 6687, '\P{^lana}', "");
Expect(1, 6750, '\p{__LANA}', "");
Expect(0, 6750, '\p{^__LANA}', "");
Expect(0, 6750, '\P{__LANA}', "");
Expect(1, 6750, '\P{^__LANA}', "");
Expect(0, 6687, '\p{__LANA}', "");
Expect(1, 6687, '\p{^__LANA}', "");
Expect(1, 6687, '\P{__LANA}', "");
Expect(0, 6687, '\P{^__LANA}', "");
Error('\p{	 is Lana/a/}');
Error('\P{	 is Lana/a/}');
Expect(1, 6750, '\p{islana}', "");
Expect(0, 6750, '\p{^islana}', "");
Expect(0, 6750, '\P{islana}', "");
Expect(1, 6750, '\P{^islana}', "");
Expect(0, 6687, '\p{islana}', "");
Expect(1, 6687, '\p{^islana}', "");
Expect(1, 6687, '\P{islana}', "");
Expect(0, 6687, '\P{^islana}', "");
Expect(1, 6750, '\p{_Is_LANA}', "");
Expect(0, 6750, '\p{^_Is_LANA}', "");
Expect(0, 6750, '\P{_Is_LANA}', "");
Expect(1, 6750, '\P{^_Is_LANA}', "");
Expect(0, 6687, '\p{_Is_LANA}', "");
Expect(1, 6687, '\p{^_Is_LANA}', "");
Expect(1, 6687, '\P{_Is_LANA}', "");
Expect(0, 6687, '\P{^_Is_LANA}', "");
Error('\p{ :=nko}');
Error('\P{ :=nko}');
Expect(1, 2042, '\p{nko}', "");
Expect(0, 2042, '\p{^nko}', "");
Expect(0, 2042, '\P{nko}', "");
Expect(1, 2042, '\P{^nko}', "");
Expect(0, 1983, '\p{nko}', "");
Expect(1, 1983, '\p{^nko}', "");
Expect(1, 1983, '\P{nko}', "");
Expect(0, 1983, '\P{^nko}', "");
Expect(1, 2042, '\p{ -Nko}', "");
Expect(0, 2042, '\p{^ -Nko}', "");
Expect(0, 2042, '\P{ -Nko}', "");
Expect(1, 2042, '\P{^ -Nko}', "");
Expect(0, 1983, '\p{ -Nko}', "");
Expect(1, 1983, '\p{^ -Nko}', "");
Expect(1, 1983, '\P{ -Nko}', "");
Expect(0, 1983, '\P{^ -Nko}', "");
Error('\p{ :=Is nko}');
Error('\P{ :=Is nko}');
Expect(1, 2042, '\p{isnko}', "");
Expect(0, 2042, '\p{^isnko}', "");
Expect(0, 2042, '\P{isnko}', "");
Expect(1, 2042, '\P{^isnko}', "");
Expect(0, 1983, '\p{isnko}', "");
Expect(1, 1983, '\p{^isnko}', "");
Expect(1, 1983, '\P{isnko}', "");
Expect(0, 1983, '\P{^isnko}', "");
Expect(1, 2042, '\p{	-is-NKO}', "");
Expect(0, 2042, '\p{^	-is-NKO}', "");
Expect(0, 2042, '\P{	-is-NKO}', "");
Expect(1, 2042, '\P{^	-is-NKO}', "");
Expect(0, 1983, '\p{	-is-NKO}', "");
Expect(1, 1983, '\p{^	-is-NKO}', "");
Expect(1, 1983, '\P{	-is-NKO}', "");
Expect(0, 1983, '\P{^	-is-NKO}', "");
Error('\p{/a/ _Nkoo}');
Error('\P{/a/ _Nkoo}');
Expect(1, 2042, '\p{nkoo}', "");
Expect(0, 2042, '\p{^nkoo}', "");
Expect(0, 2042, '\P{nkoo}', "");
Expect(1, 2042, '\P{^nkoo}', "");
Expect(0, 1983, '\p{nkoo}', "");
Expect(1, 1983, '\p{^nkoo}', "");
Expect(1, 1983, '\P{nkoo}', "");
Expect(0, 1983, '\P{^nkoo}', "");
Expect(1, 2042, '\p{	Nkoo}', "");
Expect(0, 2042, '\p{^	Nkoo}', "");
Expect(0, 2042, '\P{	Nkoo}', "");
Expect(1, 2042, '\P{^	Nkoo}', "");
Expect(0, 1983, '\p{	Nkoo}', "");
Expect(1, 1983, '\p{^	Nkoo}', "");
Expect(1, 1983, '\P{	Nkoo}', "");
Expect(0, 1983, '\P{^	Nkoo}', "");
Error('\p{ -Is	nkoo:=}');
Error('\P{ -Is	nkoo:=}');
Expect(1, 2042, '\p{isnkoo}', "");
Expect(0, 2042, '\p{^isnkoo}', "");
Expect(0, 2042, '\P{isnkoo}', "");
Expect(1, 2042, '\P{^isnkoo}', "");
Expect(0, 1983, '\p{isnkoo}', "");
Expect(1, 1983, '\p{^isnkoo}', "");
Expect(1, 1983, '\P{isnkoo}', "");
Expect(0, 1983, '\P{^isnkoo}', "");
Expect(1, 2042, '\p{_ Is Nkoo}', "");
Expect(0, 2042, '\p{^_ Is Nkoo}', "");
Expect(0, 2042, '\P{_ Is Nkoo}', "");
Expect(1, 2042, '\P{^_ Is Nkoo}', "");
Expect(0, 1983, '\p{_ Is Nkoo}', "");
Expect(1, 1983, '\p{^_ Is Nkoo}', "");
Expect(1, 1983, '\P{_ Is Nkoo}', "");
Expect(0, 1983, '\P{^_ Is Nkoo}', "");
Error('\p{ :=Mathematical Alphanumeric-Symbols}');
Error('\P{ :=Mathematical Alphanumeric-Symbols}');
Expect(1, 120831, '\p{mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^mathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^mathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{mathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^mathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{	_Mathematical AlphanumericSymbols}', "");
Expect(0, 120831, '\p{^	_Mathematical AlphanumericSymbols}', "");
Expect(0, 120831, '\P{	_Mathematical AlphanumericSymbols}', "");
Expect(1, 120831, '\P{^	_Mathematical AlphanumericSymbols}', "");
Expect(0, 119807, '\p{	_Mathematical AlphanumericSymbols}', "");
Expect(1, 119807, '\p{^	_Mathematical AlphanumericSymbols}', "");
Expect(1, 119807, '\P{	_Mathematical AlphanumericSymbols}', "");
Expect(0, 119807, '\P{^	_Mathematical AlphanumericSymbols}', "");
Error('\p{_/a/isMathematical ALPHANUMERIC	Symbols}');
Error('\P{_/a/isMathematical ALPHANUMERIC	Symbols}');
Expect(1, 120831, '\p{ismathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^ismathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{ismathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^ismathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{ismathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^ismathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{ismathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^ismathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{--IS-mathematical	Alphanumeric	SYMBOLS}', "");
Expect(0, 120831, '\p{^--IS-mathematical	Alphanumeric	SYMBOLS}', "");
Expect(0, 120831, '\P{--IS-mathematical	Alphanumeric	SYMBOLS}', "");
Expect(1, 120831, '\P{^--IS-mathematical	Alphanumeric	SYMBOLS}', "");
Expect(0, 119807, '\p{--IS-mathematical	Alphanumeric	SYMBOLS}', "");
Expect(1, 119807, '\p{^--IS-mathematical	Alphanumeric	SYMBOLS}', "");
Expect(1, 119807, '\P{--IS-mathematical	Alphanumeric	SYMBOLS}', "");
Expect(0, 119807, '\P{^--IS-mathematical	Alphanumeric	SYMBOLS}', "");
Error('\p{ In:=mathematical Alphanumeric-Symbols}');
Error('\P{ In:=mathematical Alphanumeric-Symbols}');
Expect(1, 120831, '\p{inmathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\p{^inmathematicalalphanumericsymbols}', "");
Expect(0, 120831, '\P{inmathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\P{^inmathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\p{inmathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\p{^inmathematicalalphanumericsymbols}', "");
Expect(1, 119807, '\P{inmathematicalalphanumericsymbols}', "");
Expect(0, 119807, '\P{^inmathematicalalphanumericsymbols}', "");
Expect(1, 120831, '\p{_-INMathematicalAlphanumeric	symbols}', "");
Expect(0, 120831, '\p{^_-INMathematicalAlphanumeric	symbols}', "");
Expect(0, 120831, '\P{_-INMathematicalAlphanumeric	symbols}', "");
Expect(1, 120831, '\P{^_-INMathematicalAlphanumeric	symbols}', "");
Expect(0, 119807, '\p{_-INMathematicalAlphanumeric	symbols}', "");
Expect(1, 119807, '\p{^_-INMathematicalAlphanumeric	symbols}', "");
Expect(1, 119807, '\P{_-INMathematicalAlphanumeric	symbols}', "");
Expect(0, 119807, '\P{^_-INMathematicalAlphanumeric	symbols}', "");
Error('\p{/a/	-Lydian}');
Error('\P{/a/	-Lydian}');
Expect(1, 67897, '\p{lydian}', "");
Expect(0, 67897, '\p{^lydian}', "");
Expect(0, 67897, '\P{lydian}', "");
Expect(1, 67897, '\P{^lydian}', "");
Expect(0, 67871, '\p{lydian}', "");
Expect(1, 67871, '\p{^lydian}', "");
Expect(1, 67871, '\P{lydian}', "");
Expect(0, 67871, '\P{^lydian}', "");
Expect(1, 67897, '\p{ -lydian}', "");
Expect(0, 67897, '\p{^ -lydian}', "");
Expect(0, 67897, '\P{ -lydian}', "");
Expect(1, 67897, '\P{^ -lydian}', "");
Expect(0, 67871, '\p{ -lydian}', "");
Expect(1, 67871, '\p{^ -lydian}', "");
Expect(1, 67871, '\P{ -lydian}', "");
Expect(0, 67871, '\P{^ -lydian}', "");
Error('\p{_:=Is Lydian}');
Error('\P{_:=Is Lydian}');
Expect(1, 67897, '\p{islydian}', "");
Expect(0, 67897, '\p{^islydian}', "");
Expect(0, 67897, '\P{islydian}', "");
Expect(1, 67897, '\P{^islydian}', "");
Expect(0, 67871, '\p{islydian}', "");
Expect(1, 67871, '\p{^islydian}', "");
Expect(1, 67871, '\P{islydian}', "");
Expect(0, 67871, '\P{^islydian}', "");
Expect(1, 67897, '\p{__Is_LYDIAN}', "");
Expect(0, 67897, '\p{^__Is_LYDIAN}', "");
Expect(0, 67897, '\P{__Is_LYDIAN}', "");
Expect(1, 67897, '\P{^__Is_LYDIAN}', "");
Expect(0, 67871, '\p{__Is_LYDIAN}', "");
Expect(1, 67871, '\p{^__Is_LYDIAN}', "");
Expect(1, 67871, '\P{__Is_LYDIAN}', "");
Expect(0, 67871, '\P{^__Is_LYDIAN}', "");
Error('\p{_LYDI:=}');
Error('\P{_LYDI:=}');
Expect(1, 67897, '\p{lydi}', "");
Expect(0, 67897, '\p{^lydi}', "");
Expect(0, 67897, '\P{lydi}', "");
Expect(1, 67897, '\P{^lydi}', "");
Expect(0, 67871, '\p{lydi}', "");
Expect(1, 67871, '\p{^lydi}', "");
Expect(1, 67871, '\P{lydi}', "");
Expect(0, 67871, '\P{^lydi}', "");
Error('\p{- isLydi:=}');
Error('\P{- isLydi:=}');
Expect(1, 67897, '\p{islydi}', "");
Expect(0, 67897, '\p{^islydi}', "");
Expect(0, 67897, '\P{islydi}', "");
Expect(1, 67897, '\P{^islydi}', "");
Expect(0, 67871, '\p{islydi}', "");
Expect(1, 67871, '\p{^islydi}', "");
Expect(1, 67871, '\P{islydi}', "");
Expect(0, 67871, '\P{^islydi}', "");
Expect(1, 67897, '\p{	 is-LYDI}', "");
Expect(0, 67897, '\p{^	 is-LYDI}', "");
Expect(0, 67897, '\P{	 is-LYDI}', "");
Expect(1, 67897, '\P{^	 is-LYDI}', "");
Expect(0, 67871, '\p{	 is-LYDI}', "");
Expect(1, 67871, '\p{^	 is-LYDI}', "");
Expect(1, 67871, '\P{	 is-LYDI}', "");
Expect(0, 67871, '\P{^	 is-LYDI}', "");
Error('\p{_-Georgian:=Supplement}');
Error('\P{_-Georgian:=Supplement}');
Expect(1, 11567, '\p{georgiansupplement}', "");
Expect(0, 11567, '\p{^georgiansupplement}', "");
Expect(0, 11567, '\P{georgiansupplement}', "");
Expect(1, 11567, '\P{^georgiansupplement}', "");
Expect(0, 11519, '\p{georgiansupplement}', "");
Expect(1, 11519, '\p{^georgiansupplement}', "");
Expect(1, 11519, '\P{georgiansupplement}', "");
Expect(0, 11519, '\P{^georgiansupplement}', "");
Expect(1, 11567, '\p{	GEORGIAN_supplement}', "");
Expect(0, 11567, '\p{^	GEORGIAN_supplement}', "");
Expect(0, 11567, '\P{	GEORGIAN_supplement}', "");
Expect(1, 11567, '\P{^	GEORGIAN_supplement}', "");
Expect(0, 11519, '\p{	GEORGIAN_supplement}', "");
Expect(1, 11519, '\p{^	GEORGIAN_supplement}', "");
Expect(1, 11519, '\P{	GEORGIAN_supplement}', "");
Expect(0, 11519, '\P{^	GEORGIAN_supplement}', "");
Error('\p{/a/  isGeorgian Supplement}');
Error('\P{/a/  isGeorgian Supplement}');
Expect(1, 11567, '\p{isgeorgiansupplement}', "");
Expect(0, 11567, '\p{^isgeorgiansupplement}', "");
Expect(0, 11567, '\P{isgeorgiansupplement}', "");
Expect(1, 11567, '\P{^isgeorgiansupplement}', "");
Expect(0, 11519, '\p{isgeorgiansupplement}', "");
Expect(1, 11519, '\p{^isgeorgiansupplement}', "");
Expect(1, 11519, '\P{isgeorgiansupplement}', "");
Expect(0, 11519, '\P{^isgeorgiansupplement}', "");
Expect(1, 11567, '\p{_Is	Georgiansupplement}', "");
Expect(0, 11567, '\p{^_Is	Georgiansupplement}', "");
Expect(0, 11567, '\P{_Is	Georgiansupplement}', "");
Expect(1, 11567, '\P{^_Is	Georgiansupplement}', "");
Expect(0, 11519, '\p{_Is	Georgiansupplement}', "");
Expect(1, 11519, '\p{^_Is	Georgiansupplement}', "");
Expect(1, 11519, '\P{_Is	Georgiansupplement}', "");
Expect(0, 11519, '\P{^_Is	Georgiansupplement}', "");
Error('\p{-	In:=GEORGIANSUPPLEMENT}');
Error('\P{-	In:=GEORGIANSUPPLEMENT}');
Expect(1, 11567, '\p{ingeorgiansupplement}', "");
Expect(0, 11567, '\p{^ingeorgiansupplement}', "");
Expect(0, 11567, '\P{ingeorgiansupplement}', "");
Expect(1, 11567, '\P{^ingeorgiansupplement}', "");
Expect(0, 11519, '\p{ingeorgiansupplement}', "");
Expect(1, 11519, '\p{^ingeorgiansupplement}', "");
Expect(1, 11519, '\P{ingeorgiansupplement}', "");
Expect(0, 11519, '\P{^ingeorgiansupplement}', "");
Expect(1, 11567, '\p{ -IN_Georgian_Supplement}', "");
Expect(0, 11567, '\p{^ -IN_Georgian_Supplement}', "");
Expect(0, 11567, '\P{ -IN_Georgian_Supplement}', "");
Expect(1, 11567, '\P{^ -IN_Georgian_Supplement}', "");
Expect(0, 11519, '\p{ -IN_Georgian_Supplement}', "");
Expect(1, 11519, '\p{^ -IN_Georgian_Supplement}', "");
Expect(1, 11519, '\P{ -IN_Georgian_Supplement}', "");
Expect(0, 11519, '\P{^ -IN_Georgian_Supplement}', "");
Error('\p{_:=Letter}');
Error('\P{_:=Letter}');
Expect(1, 90, '\p{letter}', "");
Expect(0, 90, '\p{^letter}', "");
Expect(0, 90, '\P{letter}', "");
Expect(1, 90, '\P{^letter}', "");
Expect(0, 64, '\p{letter}', "");
Expect(1, 64, '\p{^letter}', "");
Expect(1, 64, '\P{letter}', "");
Expect(0, 64, '\P{^letter}', "");
Expect(1, 90, '\p{-_Letter}', "");
Expect(0, 90, '\p{^-_Letter}', "");
Expect(0, 90, '\P{-_Letter}', "");
Expect(1, 90, '\P{^-_Letter}', "");
Expect(0, 64, '\p{-_Letter}', "");
Expect(1, 64, '\p{^-_Letter}', "");
Expect(1, 64, '\P{-_Letter}', "");
Expect(0, 64, '\P{^-_Letter}', "");
Error('\p{- Is:=Letter}');
Error('\P{- Is:=Letter}');
Expect(1, 90, '\p{isletter}', "");
Expect(0, 90, '\p{^isletter}', "");
Expect(0, 90, '\P{isletter}', "");
Expect(1, 90, '\P{^isletter}', "");
Expect(0, 64, '\p{isletter}', "");
Expect(1, 64, '\p{^isletter}', "");
Expect(1, 64, '\P{isletter}', "");
Expect(0, 64, '\P{^isletter}', "");
Expect(1, 90, '\p{-is_LETTER}', "");
Expect(0, 90, '\p{^-is_LETTER}', "");
Expect(0, 90, '\P{-is_LETTER}', "");
Expect(1, 90, '\P{^-is_LETTER}', "");
Expect(0, 64, '\p{-is_LETTER}', "");
Expect(1, 64, '\p{^-is_LETTER}', "");
Expect(1, 64, '\P{-is_LETTER}', "");
Expect(0, 64, '\P{^-is_LETTER}', "");
Error('\p{/a/  l}');
Error('\P{/a/  l}');
Expect(1, 90, '\p{l}', "");
Expect(0, 90, '\p{^l}', "");
Expect(0, 90, '\P{l}', "");
Expect(1, 90, '\P{^l}', "");
Expect(0, 64, '\p{l}', "");
Expect(1, 64, '\p{^l}', "");
Expect(1, 64, '\P{l}', "");
Expect(0, 64, '\P{^l}', "");
Expect(1, 90, '\p{--L}', "");
Expect(0, 90, '\p{^--L}', "");
Expect(0, 90, '\P{--L}', "");
Expect(1, 90, '\P{^--L}', "");
Expect(0, 64, '\p{--L}', "");
Expect(1, 64, '\p{^--L}', "");
Expect(1, 64, '\P{--L}', "");
Expect(0, 64, '\P{^--L}', "");
Error('\p{:=-IS_L}');
Error('\P{:=-IS_L}');
Expect(1, 90, '\p{isl}', "");
Expect(0, 90, '\p{^isl}', "");
Expect(0, 90, '\P{isl}', "");
Expect(1, 90, '\P{^isl}', "");
Expect(0, 64, '\p{isl}', "");
Expect(1, 64, '\p{^isl}', "");
Expect(1, 64, '\P{isl}', "");
Expect(0, 64, '\P{^isl}', "");
Expect(1, 90, '\p{	 is L}', "");
Expect(0, 90, '\p{^	 is L}', "");
Expect(0, 90, '\P{	 is L}', "");
Expect(1, 90, '\P{^	 is L}', "");
Expect(0, 64, '\p{	 is L}', "");
Expect(1, 64, '\p{^	 is L}', "");
Expect(1, 64, '\P{	 is L}', "");
Expect(0, 64, '\P{^	 is L}', "");
Error('\p{  cyrillic_Extended_B:=}');
Error('\P{  cyrillic_Extended_B:=}');
Expect(1, 42655, '\p{cyrillicextendedb}', "");
Expect(0, 42655, '\p{^cyrillicextendedb}', "");
Expect(0, 42655, '\P{cyrillicextendedb}', "");
Expect(1, 42655, '\P{^cyrillicextendedb}', "");
Expect(0, 42559, '\p{cyrillicextendedb}', "");
Expect(1, 42559, '\p{^cyrillicextendedb}', "");
Expect(1, 42559, '\P{cyrillicextendedb}', "");
Expect(0, 42559, '\P{^cyrillicextendedb}', "");
Expect(1, 42655, '\p{_ Cyrillic EXTENDED	b}', "");
Expect(0, 42655, '\p{^_ Cyrillic EXTENDED	b}', "");
Expect(0, 42655, '\P{_ Cyrillic EXTENDED	b}', "");
Expect(1, 42655, '\P{^_ Cyrillic EXTENDED	b}', "");
Expect(0, 42559, '\p{_ Cyrillic EXTENDED	b}', "");
Expect(1, 42559, '\p{^_ Cyrillic EXTENDED	b}', "");
Expect(1, 42559, '\P{_ Cyrillic EXTENDED	b}', "");
Expect(0, 42559, '\P{^_ Cyrillic EXTENDED	b}', "");
Error('\p{ Is Cyrillic-Extended/a/B}');
Error('\P{ Is Cyrillic-Extended/a/B}');
Expect(1, 42655, '\p{iscyrillicextendedb}', "");
Expect(0, 42655, '\p{^iscyrillicextendedb}', "");
Expect(0, 42655, '\P{iscyrillicextendedb}', "");
Expect(1, 42655, '\P{^iscyrillicextendedb}', "");
Expect(0, 42559, '\p{iscyrillicextendedb}', "");
Expect(1, 42559, '\p{^iscyrillicextendedb}', "");
Expect(1, 42559, '\P{iscyrillicextendedb}', "");
Expect(0, 42559, '\P{^iscyrillicextendedb}', "");
Expect(1, 42655, '\p{	-IsCyrillic	ExtendedB}', "");
Expect(0, 42655, '\p{^	-IsCyrillic	ExtendedB}', "");
Expect(0, 42655, '\P{	-IsCyrillic	ExtendedB}', "");
Expect(1, 42655, '\P{^	-IsCyrillic	ExtendedB}', "");
Expect(0, 42559, '\p{	-IsCyrillic	ExtendedB}', "");
Expect(1, 42559, '\p{^	-IsCyrillic	ExtendedB}', "");
Expect(1, 42559, '\P{	-IsCyrillic	ExtendedB}', "");
Expect(0, 42559, '\P{^	-IsCyrillic	ExtendedB}', "");
Error('\p{:=in-CYRILLICextended-B}');
Error('\P{:=in-CYRILLICextended-B}');
Expect(1, 42655, '\p{incyrillicextendedb}', "");
Expect(0, 42655, '\p{^incyrillicextendedb}', "");
Expect(0, 42655, '\P{incyrillicextendedb}', "");
Expect(1, 42655, '\P{^incyrillicextendedb}', "");
Expect(0, 42559, '\p{incyrillicextendedb}', "");
Expect(1, 42559, '\p{^incyrillicextendedb}', "");
Expect(1, 42559, '\P{incyrillicextendedb}', "");
Expect(0, 42559, '\P{^incyrillicextendedb}', "");
Expect(1, 42655, '\p{-in Cyrillic_Extended_B}', "");
Expect(0, 42655, '\p{^-in Cyrillic_Extended_B}', "");
Expect(0, 42655, '\P{-in Cyrillic_Extended_B}', "");
Expect(1, 42655, '\P{^-in Cyrillic_Extended_B}', "");
Expect(0, 42559, '\p{-in Cyrillic_Extended_B}', "");
Expect(1, 42559, '\p{^-in Cyrillic_Extended_B}', "");
Expect(1, 42559, '\P{-in Cyrillic_Extended_B}', "");
Expect(0, 42559, '\P{^-in Cyrillic_Extended_B}', "");
Error('\p{	_Hebrew:=}');
Error('\P{	_Hebrew:=}');
Expect(1, 1479, '\p{hebrew}', "");
Expect(0, 1479, '\p{^hebrew}', "");
Expect(0, 1479, '\P{hebrew}', "");
Expect(1, 1479, '\P{^hebrew}', "");
Expect(0, 1424, '\p{hebrew}', "");
Expect(1, 1424, '\p{^hebrew}', "");
Expect(1, 1424, '\P{hebrew}', "");
Expect(0, 1424, '\P{^hebrew}', "");
Expect(1, 1479, '\p{ hebrew}', "");
Expect(0, 1479, '\p{^ hebrew}', "");
Expect(0, 1479, '\P{ hebrew}', "");
Expect(1, 1479, '\P{^ hebrew}', "");
Expect(0, 1424, '\p{ hebrew}', "");
Expect(1, 1424, '\p{^ hebrew}', "");
Expect(1, 1424, '\P{ hebrew}', "");
Expect(0, 1424, '\P{^ hebrew}', "");
Error('\p{_ Is:=hebrew}');
Error('\P{_ Is:=hebrew}');
Expect(1, 1479, '\p{ishebrew}', "");
Expect(0, 1479, '\p{^ishebrew}', "");
Expect(0, 1479, '\P{ishebrew}', "");
Expect(1, 1479, '\P{^ishebrew}', "");
Expect(0, 1424, '\p{ishebrew}', "");
Expect(1, 1424, '\p{^ishebrew}', "");
Expect(1, 1424, '\P{ishebrew}', "");
Expect(0, 1424, '\P{^ishebrew}', "");
Expect(1, 1479, '\p{	-isHebrew}', "");
Expect(0, 1479, '\p{^	-isHebrew}', "");
Expect(0, 1479, '\P{	-isHebrew}', "");
Expect(1, 1479, '\P{^	-isHebrew}', "");
Expect(0, 1424, '\p{	-isHebrew}', "");
Expect(1, 1424, '\p{^	-isHebrew}', "");
Expect(1, 1424, '\P{	-isHebrew}', "");
Expect(0, 1424, '\P{^	-isHebrew}', "");
Error('\p{:= Hebr}');
Error('\P{:= Hebr}');
Expect(1, 1479, '\p{hebr}', "");
Expect(0, 1479, '\p{^hebr}', "");
Expect(0, 1479, '\P{hebr}', "");
Expect(1, 1479, '\P{^hebr}', "");
Expect(0, 1424, '\p{hebr}', "");
Expect(1, 1424, '\p{^hebr}', "");
Expect(1, 1424, '\P{hebr}', "");
Expect(0, 1424, '\P{^hebr}', "");
Expect(1, 1479, '\p{	-Hebr}', "");
Expect(0, 1479, '\p{^	-Hebr}', "");
Expect(0, 1479, '\P{	-Hebr}', "");
Expect(1, 1479, '\P{^	-Hebr}', "");
Expect(0, 1424, '\p{	-Hebr}', "");
Expect(1, 1424, '\p{^	-Hebr}', "");
Expect(1, 1424, '\P{	-Hebr}', "");
Expect(0, 1424, '\P{^	-Hebr}', "");
Error('\p{_ Is/a/Hebr}');
Error('\P{_ Is/a/Hebr}');
Expect(1, 1479, '\p{ishebr}', "");
Expect(0, 1479, '\p{^ishebr}', "");
Expect(0, 1479, '\P{ishebr}', "");
Expect(1, 1479, '\P{^ishebr}', "");
Expect(0, 1424, '\p{ishebr}', "");
Expect(1, 1424, '\p{^ishebr}', "");
Expect(1, 1424, '\P{ishebr}', "");
Expect(0, 1424, '\P{^ishebr}', "");
Expect(1, 1479, '\p{__Is hebr}', "");
Expect(0, 1479, '\p{^__Is hebr}', "");
Expect(0, 1479, '\P{__Is hebr}', "");
Expect(1, 1479, '\P{^__Is hebr}', "");
Expect(0, 1424, '\p{__Is hebr}', "");
Expect(1, 1424, '\p{^__Is hebr}', "");
Expect(1, 1424, '\P{__Is hebr}', "");
Expect(0, 1424, '\P{^__Is hebr}', "");
Error('\p{_IN	Hiragana:=}');
Error('\P{_IN	Hiragana:=}');
Expect(1, 12447, '\p{inhiragana}', "");
Expect(0, 12447, '\p{^inhiragana}', "");
Expect(0, 12447, '\P{inhiragana}', "");
Expect(1, 12447, '\P{^inhiragana}', "");
Expect(0, 12351, '\p{inhiragana}', "");
Expect(1, 12351, '\p{^inhiragana}', "");
Expect(1, 12351, '\P{inhiragana}', "");
Expect(0, 12351, '\P{^inhiragana}', "");
Expect(1, 12447, '\p{	-Inhiragana}', "");
Expect(0, 12447, '\p{^	-Inhiragana}', "");
Expect(0, 12447, '\P{	-Inhiragana}', "");
Expect(1, 12447, '\P{^	-Inhiragana}', "");
Expect(0, 12351, '\p{	-Inhiragana}', "");
Expect(1, 12351, '\p{^	-Inhiragana}', "");
Expect(1, 12351, '\P{	-Inhiragana}', "");
Expect(0, 12351, '\P{^	-Inhiragana}', "");
Error('\p{:=latin}');
Error('\P{:=latin}');
Expect(1, 90, '\p{latin}', "");
Expect(0, 90, '\p{^latin}', "");
Expect(0, 90, '\P{latin}', "");
Expect(1, 90, '\P{^latin}', "");
Expect(0, 64, '\p{latin}', "");
Expect(1, 64, '\p{^latin}', "");
Expect(1, 64, '\P{latin}', "");
Expect(0, 64, '\P{^latin}', "");
Expect(1, 90, '\p{_	latin}', "");
Expect(0, 90, '\p{^_	latin}', "");
Expect(0, 90, '\P{_	latin}', "");
Expect(1, 90, '\P{^_	latin}', "");
Expect(0, 64, '\p{_	latin}', "");
Expect(1, 64, '\p{^_	latin}', "");
Expect(1, 64, '\P{_	latin}', "");
Expect(0, 64, '\P{^_	latin}', "");
Error('\p{_ IsLatin/a/}');
Error('\P{_ IsLatin/a/}');
Expect(1, 90, '\p{islatin}', "");
Expect(0, 90, '\p{^islatin}', "");
Expect(0, 90, '\P{islatin}', "");
Expect(1, 90, '\P{^islatin}', "");
Expect(0, 64, '\p{islatin}', "");
Expect(1, 64, '\p{^islatin}', "");
Expect(1, 64, '\P{islatin}', "");
Expect(0, 64, '\P{^islatin}', "");
Expect(1, 90, '\p{_ Is_LATIN}', "");
Expect(0, 90, '\p{^_ Is_LATIN}', "");
Expect(0, 90, '\P{_ Is_LATIN}', "");
Expect(1, 90, '\P{^_ Is_LATIN}', "");
Expect(0, 64, '\p{_ Is_LATIN}', "");
Expect(1, 64, '\p{^_ Is_LATIN}', "");
Expect(1, 64, '\P{_ Is_LATIN}', "");
Expect(0, 64, '\P{^_ Is_LATIN}', "");
Error('\p{	:=Latn}');
Error('\P{	:=Latn}');
Expect(1, 90, '\p{latn}', "");
Expect(0, 90, '\p{^latn}', "");
Expect(0, 90, '\P{latn}', "");
Expect(1, 90, '\P{^latn}', "");
Expect(0, 64, '\p{latn}', "");
Expect(1, 64, '\p{^latn}', "");
Expect(1, 64, '\P{latn}', "");
Expect(0, 64, '\P{^latn}', "");
Expect(1, 90, '\p{-	LATN}', "");
Expect(0, 90, '\p{^-	LATN}', "");
Expect(0, 90, '\P{-	LATN}', "");
Expect(1, 90, '\P{^-	LATN}', "");
Expect(0, 64, '\p{-	LATN}', "");
Expect(1, 64, '\p{^-	LATN}', "");
Expect(1, 64, '\P{-	LATN}', "");
Expect(0, 64, '\P{^-	LATN}', "");
Error('\p{-:=Is_Latn}');
Error('\P{-:=Is_Latn}');
Expect(1, 90, '\p{islatn}', "");
Expect(0, 90, '\p{^islatn}', "");
Expect(0, 90, '\P{islatn}', "");
Expect(1, 90, '\P{^islatn}', "");
Expect(0, 64, '\p{islatn}', "");
Expect(1, 64, '\p{^islatn}', "");
Expect(1, 64, '\P{islatn}', "");
Expect(0, 64, '\P{^islatn}', "");
Expect(1, 90, '\p{	-IS-latn}', "");
Expect(0, 90, '\p{^	-IS-latn}', "");
Expect(0, 90, '\P{	-IS-latn}', "");
Expect(1, 90, '\P{^	-IS-latn}', "");
Expect(0, 64, '\p{	-IS-latn}', "");
Expect(1, 64, '\p{^	-IS-latn}', "");
Expect(1, 64, '\P{	-IS-latn}', "");
Expect(0, 64, '\P{^	-IS-latn}', "");
Error('\p{-:=enclosing	MARK}');
Error('\P{-:=enclosing	MARK}');
Expect(1, 1161, '\p{enclosingmark}', "");
Expect(0, 1161, '\p{^enclosingmark}', "");
Expect(0, 1161, '\P{enclosingmark}', "");
Expect(1, 1161, '\P{^enclosingmark}', "");
Expect(0, 1159, '\p{enclosingmark}', "");
Expect(1, 1159, '\p{^enclosingmark}', "");
Expect(1, 1159, '\P{enclosingmark}', "");
Expect(0, 1159, '\P{^enclosingmark}', "");
Expect(1, 1161, '\p{-Enclosing-Mark}', "");
Expect(0, 1161, '\p{^-Enclosing-Mark}', "");
Expect(0, 1161, '\P{-Enclosing-Mark}', "");
Expect(1, 1161, '\P{^-Enclosing-Mark}', "");
Expect(0, 1159, '\p{-Enclosing-Mark}', "");
Expect(1, 1159, '\p{^-Enclosing-Mark}', "");
Expect(1, 1159, '\P{-Enclosing-Mark}', "");
Expect(0, 1159, '\P{^-Enclosing-Mark}', "");
Error('\p{__is/a/Enclosing-Mark}');
Error('\P{__is/a/Enclosing-Mark}');
Expect(1, 1161, '\p{isenclosingmark}', "");
Expect(0, 1161, '\p{^isenclosingmark}', "");
Expect(0, 1161, '\P{isenclosingmark}', "");
Expect(1, 1161, '\P{^isenclosingmark}', "");
Expect(0, 1159, '\p{isenclosingmark}', "");
Expect(1, 1159, '\p{^isenclosingmark}', "");
Expect(1, 1159, '\P{isenclosingmark}', "");
Expect(0, 1159, '\P{^isenclosingmark}', "");
Expect(1, 1161, '\p{	_is-enclosing_mark}', "");
Expect(0, 1161, '\p{^	_is-enclosing_mark}', "");
Expect(0, 1161, '\P{	_is-enclosing_mark}', "");
Expect(1, 1161, '\P{^	_is-enclosing_mark}', "");
Expect(0, 1159, '\p{	_is-enclosing_mark}', "");
Expect(1, 1159, '\p{^	_is-enclosing_mark}', "");
Expect(1, 1159, '\P{	_is-enclosing_mark}', "");
Expect(0, 1159, '\P{^	_is-enclosing_mark}', "");
Error('\p{_me:=}');
Error('\P{_me:=}');
Expect(1, 1161, '\p{me}', "");
Expect(0, 1161, '\p{^me}', "");
Expect(0, 1161, '\P{me}', "");
Expect(1, 1161, '\P{^me}', "");
Expect(0, 1159, '\p{me}', "");
Expect(1, 1159, '\p{^me}', "");
Expect(1, 1159, '\P{me}', "");
Expect(0, 1159, '\P{^me}', "");
Expect(1, 1161, '\p{ ME}', "");
Expect(0, 1161, '\p{^ ME}', "");
Expect(0, 1161, '\P{ ME}', "");
Expect(1, 1161, '\P{^ ME}', "");
Expect(0, 1159, '\p{ ME}', "");
Expect(1, 1159, '\p{^ ME}', "");
Expect(1, 1159, '\P{ ME}', "");
Expect(0, 1159, '\P{^ ME}', "");
Error('\p{ 	IS:=me}');
Error('\P{ 	IS:=me}');
Expect(1, 1161, '\p{isme}', "");
Expect(0, 1161, '\p{^isme}', "");
Expect(0, 1161, '\P{isme}', "");
Expect(1, 1161, '\P{^isme}', "");
Expect(0, 1159, '\p{isme}', "");
Expect(1, 1159, '\p{^isme}', "");
Expect(1, 1159, '\P{isme}', "");
Expect(0, 1159, '\P{^isme}', "");
Expect(1, 1161, '\p{_Is	Me}', "");
Expect(0, 1161, '\p{^_Is	Me}', "");
Expect(0, 1161, '\P{_Is	Me}', "");
Expect(1, 1161, '\P{^_Is	Me}', "");
Expect(0, 1159, '\p{_Is	Me}', "");
Expect(1, 1159, '\p{^_Is	Me}', "");
Expect(1, 1159, '\P{_Is	Me}', "");
Expect(0, 1159, '\P{^_Is	Me}', "");
Error('\p{-/a/FORMAT}');
Error('\P{-/a/FORMAT}');
Expect(1, 173, '\p{format}', "");
Expect(0, 173, '\p{^format}', "");
Expect(0, 173, '\P{format}', "");
Expect(1, 173, '\P{^format}', "");
Expect(0, 172, '\p{format}', "");
Expect(1, 172, '\p{^format}', "");
Expect(1, 172, '\P{format}', "");
Expect(0, 172, '\P{^format}', "");
Expect(1, 173, '\p{	_format}', "");
Expect(0, 173, '\p{^	_format}', "");
Expect(0, 173, '\P{	_format}', "");
Expect(1, 173, '\P{^	_format}', "");
Expect(0, 172, '\p{	_format}', "");
Expect(1, 172, '\p{^	_format}', "");
Expect(1, 172, '\P{	_format}', "");
Expect(0, 172, '\P{^	_format}', "");
Error('\p{:= IsFORMAT}');
Error('\P{:= IsFORMAT}');
Expect(1, 173, '\p{isformat}', "");
Expect(0, 173, '\p{^isformat}', "");
Expect(0, 173, '\P{isformat}', "");
Expect(1, 173, '\P{^isformat}', "");
Expect(0, 172, '\p{isformat}', "");
Expect(1, 172, '\p{^isformat}', "");
Expect(1, 172, '\P{isformat}', "");
Expect(0, 172, '\P{^isformat}', "");
Expect(1, 173, '\p{_ isFormat}', "");
Expect(0, 173, '\p{^_ isFormat}', "");
Expect(0, 173, '\P{_ isFormat}', "");
Expect(1, 173, '\P{^_ isFormat}', "");
Expect(0, 172, '\p{_ isFormat}', "");
Expect(1, 172, '\p{^_ isFormat}', "");
Expect(1, 172, '\P{_ isFormat}', "");
Expect(0, 172, '\P{^_ isFormat}', "");
Error('\p{-cf/a/}');
Error('\P{-cf/a/}');
Expect(1, 173, '\p{cf}', "");
Expect(0, 173, '\p{^cf}', "");
Expect(0, 173, '\P{cf}', "");
Expect(1, 173, '\P{^cf}', "");
Expect(0, 172, '\p{cf}', "");
Expect(1, 172, '\p{^cf}', "");
Expect(1, 172, '\P{cf}', "");
Expect(0, 172, '\P{^cf}', "");
Expect(1, 173, '\p{	-CF}', "");
Expect(0, 173, '\p{^	-CF}', "");
Expect(0, 173, '\P{	-CF}', "");
Expect(1, 173, '\P{^	-CF}', "");
Expect(0, 172, '\p{	-CF}', "");
Expect(1, 172, '\p{^	-CF}', "");
Expect(1, 172, '\P{	-CF}', "");
Expect(0, 172, '\P{^	-CF}', "");
Error('\p{-:=Iscf}');
Error('\P{-:=Iscf}');
Expect(1, 173, '\p{iscf}', "");
Expect(0, 173, '\p{^iscf}', "");
Expect(0, 173, '\P{iscf}', "");
Expect(1, 173, '\P{^iscf}', "");
Expect(0, 172, '\p{iscf}', "");
Expect(1, 172, '\p{^iscf}', "");
Expect(1, 172, '\P{iscf}', "");
Expect(0, 172, '\P{^iscf}', "");
Expect(1, 173, '\p{IS	cf}', "");
Expect(0, 173, '\p{^IS	cf}', "");
Expect(0, 173, '\P{IS	cf}', "");
Expect(1, 173, '\P{^IS	cf}', "");
Expect(0, 172, '\p{IS	cf}', "");
Expect(1, 172, '\p{^IS	cf}', "");
Expect(1, 172, '\P{IS	cf}', "");
Expect(0, 172, '\P{^IS	cf}', "");
Error('\p{/a/_ Other number}');
Error('\P{/a/_ Other number}');
Expect(1, 179, '\p{othernumber}', "");
Expect(0, 179, '\p{^othernumber}', "");
Expect(0, 179, '\P{othernumber}', "");
Expect(1, 179, '\P{^othernumber}', "");
Expect(0, 177, '\p{othernumber}', "");
Expect(1, 177, '\p{^othernumber}', "");
Expect(1, 177, '\P{othernumber}', "");
Expect(0, 177, '\P{^othernumber}', "");
Expect(1, 179, '\p{__Other_Number}', "");
Expect(0, 179, '\p{^__Other_Number}', "");
Expect(0, 179, '\P{__Other_Number}', "");
Expect(1, 179, '\P{^__Other_Number}', "");
Expect(0, 177, '\p{__Other_Number}', "");
Expect(1, 177, '\p{^__Other_Number}', "");
Expect(1, 177, '\P{__Other_Number}', "");
Expect(0, 177, '\P{^__Other_Number}', "");
Error('\p{	_is Other	number:=}');
Error('\P{	_is Other	number:=}');
Expect(1, 179, '\p{isothernumber}', "");
Expect(0, 179, '\p{^isothernumber}', "");
Expect(0, 179, '\P{isothernumber}', "");
Expect(1, 179, '\P{^isothernumber}', "");
Expect(0, 177, '\p{isothernumber}', "");
Expect(1, 177, '\p{^isothernumber}', "");
Expect(1, 177, '\P{isothernumber}', "");
Expect(0, 177, '\P{^isothernumber}', "");
Expect(1, 179, '\p{-IsOTHER NUMBER}', "");
Expect(0, 179, '\p{^-IsOTHER NUMBER}', "");
Expect(0, 179, '\P{-IsOTHER NUMBER}', "");
Expect(1, 179, '\P{^-IsOTHER NUMBER}', "");
Expect(0, 177, '\p{-IsOTHER NUMBER}', "");
Expect(1, 177, '\p{^-IsOTHER NUMBER}', "");
Expect(1, 177, '\P{-IsOTHER NUMBER}', "");
Expect(0, 177, '\P{^-IsOTHER NUMBER}', "");
Error('\p{:=-_No}');
Error('\P{:=-_No}');
Expect(1, 179, '\p{no}', "");
Expect(0, 179, '\p{^no}', "");
Expect(0, 179, '\P{no}', "");
Expect(1, 179, '\P{^no}', "");
Expect(0, 177, '\p{no}', "");
Expect(1, 177, '\p{^no}', "");
Expect(1, 177, '\P{no}', "");
Expect(0, 177, '\P{^no}', "");
Expect(1, 179, '\p{-_No}', "");
Expect(0, 179, '\p{^-_No}', "");
Expect(0, 179, '\P{-_No}', "");
Expect(1, 179, '\P{^-_No}', "");
Expect(0, 177, '\p{-_No}', "");
Expect(1, 177, '\p{^-_No}', "");
Expect(1, 177, '\P{-_No}', "");
Expect(0, 177, '\P{^-_No}', "");
Error('\p{:=_-ISno}');
Error('\P{:=_-ISno}');
Expect(1, 179, '\p{isno}', "");
Expect(0, 179, '\p{^isno}', "");
Expect(0, 179, '\P{isno}', "");
Expect(1, 179, '\P{^isno}', "");
Expect(0, 177, '\p{isno}', "");
Expect(1, 177, '\p{^isno}', "");
Expect(1, 177, '\P{isno}', "");
Expect(0, 177, '\P{^isno}', "");
Expect(1, 179, '\p{IS	No}', "");
Expect(0, 179, '\p{^IS	No}', "");
Expect(0, 179, '\P{IS	No}', "");
Expect(1, 179, '\P{^IS	No}', "");
Expect(0, 177, '\p{IS	No}', "");
Expect(1, 177, '\p{^IS	No}', "");
Expect(1, 177, '\P{IS	No}', "");
Expect(0, 177, '\P{^IS	No}', "");
Error('\p{--latin:=1-SUPPLEMENT}');
Error('\P{--latin:=1-SUPPLEMENT}');
Expect(1, 255, '\p{latin1supplement}', "");
Expect(0, 255, '\p{^latin1supplement}', "");
Expect(0, 255, '\P{latin1supplement}', "");
Expect(1, 255, '\P{^latin1supplement}', "");
Expect(0, 127, '\p{latin1supplement}', "");
Expect(1, 127, '\p{^latin1supplement}', "");
Expect(1, 127, '\P{latin1supplement}', "");
Expect(0, 127, '\P{^latin1supplement}', "");
Expect(1, 255, '\p{ Latin	1	SUPPLEMENT}', "");
Expect(0, 255, '\p{^ Latin	1	SUPPLEMENT}', "");
Expect(0, 255, '\P{ Latin	1	SUPPLEMENT}', "");
Expect(1, 255, '\P{^ Latin	1	SUPPLEMENT}', "");
Expect(0, 127, '\p{ Latin	1	SUPPLEMENT}', "");
Expect(1, 127, '\p{^ Latin	1	SUPPLEMENT}', "");
Expect(1, 127, '\P{ Latin	1	SUPPLEMENT}', "");
Expect(0, 127, '\P{^ Latin	1	SUPPLEMENT}', "");
Error('\p{_Is/a/Latin 1_Supplement}');
Error('\P{_Is/a/Latin 1_Supplement}');
Expect(1, 255, '\p{islatin1supplement}', "");
Expect(0, 255, '\p{^islatin1supplement}', "");
Expect(0, 255, '\P{islatin1supplement}', "");
Expect(1, 255, '\P{^islatin1supplement}', "");
Expect(0, 127, '\p{islatin1supplement}', "");
Expect(1, 127, '\p{^islatin1supplement}', "");
Expect(1, 127, '\P{islatin1supplement}', "");
Expect(0, 127, '\P{^islatin1supplement}', "");
Expect(1, 255, '\p{-is latin_1	supplement}', "");
Expect(0, 255, '\p{^-is latin_1	supplement}', "");
Expect(0, 255, '\P{-is latin_1	supplement}', "");
Expect(1, 255, '\P{^-is latin_1	supplement}', "");
Expect(0, 127, '\p{-is latin_1	supplement}', "");
Expect(1, 127, '\p{^-is latin_1	supplement}', "");
Expect(1, 127, '\P{-is latin_1	supplement}', "");
Expect(0, 127, '\P{^-is latin_1	supplement}', "");
Error('\p{ :=in Latin-1Supplement}');
Error('\P{ :=in Latin-1Supplement}');
Expect(1, 255, '\p{inlatin1supplement}', "");
Expect(0, 255, '\p{^inlatin1supplement}', "");
Expect(0, 255, '\P{inlatin1supplement}', "");
Expect(1, 255, '\P{^inlatin1supplement}', "");
Expect(0, 127, '\p{inlatin1supplement}', "");
Expect(1, 127, '\p{^inlatin1supplement}', "");
Expect(1, 127, '\P{inlatin1supplement}', "");
Expect(0, 127, '\P{^inlatin1supplement}', "");
Expect(1, 255, '\p{	_in Latin_1-Supplement}', "");
Expect(0, 255, '\p{^	_in Latin_1-Supplement}', "");
Expect(0, 255, '\P{	_in Latin_1-Supplement}', "");
Expect(1, 255, '\P{^	_in Latin_1-Supplement}', "");
Expect(0, 127, '\p{	_in Latin_1-Supplement}', "");
Expect(1, 127, '\p{^	_in Latin_1-Supplement}', "");
Expect(1, 127, '\P{	_in Latin_1-Supplement}', "");
Expect(0, 127, '\P{^	_in Latin_1-Supplement}', "");
Error('\p{/a/	-Latin_1}');
Error('\P{/a/	-Latin_1}');
Expect(1, 255, '\p{latin1}', "");
Expect(0, 255, '\p{^latin1}', "");
Expect(0, 255, '\P{latin1}', "");
Expect(1, 255, '\P{^latin1}', "");
Expect(0, 127, '\p{latin1}', "");
Expect(1, 127, '\p{^latin1}', "");
Expect(1, 127, '\P{latin1}', "");
Expect(0, 127, '\P{^latin1}', "");
Expect(1, 255, '\p{-LATIN1}', "");
Expect(0, 255, '\p{^-LATIN1}', "");
Expect(0, 255, '\P{-LATIN1}', "");
Expect(1, 255, '\P{^-LATIN1}', "");
Expect(0, 127, '\p{-LATIN1}', "");
Expect(1, 127, '\p{^-LATIN1}', "");
Expect(1, 127, '\P{-LATIN1}', "");
Expect(0, 127, '\P{^-LATIN1}', "");
Error('\p{-IS	Latin-1/a/}');
Error('\P{-IS	Latin-1/a/}');
Expect(1, 255, '\p{islatin1}', "");
Expect(0, 255, '\p{^islatin1}', "");
Expect(0, 255, '\P{islatin1}', "");
Expect(1, 255, '\P{^islatin1}', "");
Expect(0, 127, '\p{islatin1}', "");
Expect(1, 127, '\p{^islatin1}', "");
Expect(1, 127, '\P{islatin1}', "");
Expect(0, 127, '\P{^islatin1}', "");
Expect(1, 255, '\p{_	Is_latin-1}', "");
Expect(0, 255, '\p{^_	Is_latin-1}', "");
Expect(0, 255, '\P{_	Is_latin-1}', "");
Expect(1, 255, '\P{^_	Is_latin-1}', "");
Expect(0, 127, '\p{_	Is_latin-1}', "");
Expect(1, 127, '\p{^_	Is_latin-1}', "");
Expect(1, 127, '\P{_	Is_latin-1}', "");
Expect(0, 127, '\P{^_	Is_latin-1}', "");
Error('\p{/a/IN	LATIN	1}');
Error('\P{/a/IN	LATIN	1}');
Expect(1, 255, '\p{inlatin1}', "");
Expect(0, 255, '\p{^inlatin1}', "");
Expect(0, 255, '\P{inlatin1}', "");
Expect(1, 255, '\P{^inlatin1}', "");
Expect(0, 127, '\p{inlatin1}', "");
Expect(1, 127, '\p{^inlatin1}', "");
Expect(1, 127, '\P{inlatin1}', "");
Expect(0, 127, '\P{^inlatin1}', "");
Expect(1, 255, '\p{		In	Latin 1}', "");
Expect(0, 255, '\p{^		In	Latin 1}', "");
Expect(0, 255, '\P{		In	Latin 1}', "");
Expect(1, 255, '\P{^		In	Latin 1}', "");
Expect(0, 127, '\p{		In	Latin 1}', "");
Expect(1, 127, '\p{^		In	Latin 1}', "");
Expect(1, 127, '\P{		In	Latin 1}', "");
Expect(0, 127, '\P{^		In	Latin 1}', "");
Error('\p{	/a/Tamil}');
Error('\P{	/a/Tamil}');
Expect(1, 2947, '\p{tamil}', "");
Expect(0, 2947, '\p{^tamil}', "");
Expect(0, 2947, '\P{tamil}', "");
Expect(1, 2947, '\P{^tamil}', "");
Expect(0, 2945, '\p{tamil}', "");
Expect(1, 2945, '\p{^tamil}', "");
Expect(1, 2945, '\P{tamil}', "");
Expect(0, 2945, '\P{^tamil}', "");
Expect(1, 2947, '\p{Tamil}', "");
Expect(0, 2947, '\p{^Tamil}', "");
Expect(0, 2947, '\P{Tamil}', "");
Expect(1, 2947, '\P{^Tamil}', "");
Expect(0, 2945, '\p{Tamil}', "");
Expect(1, 2945, '\p{^Tamil}', "");
Expect(1, 2945, '\P{Tamil}', "");
Expect(0, 2945, '\P{^Tamil}', "");
Error('\p{:=IS_TAMIL}');
Error('\P{:=IS_TAMIL}');
Expect(1, 2947, '\p{istamil}', "");
Expect(0, 2947, '\p{^istamil}', "");
Expect(0, 2947, '\P{istamil}', "");
Expect(1, 2947, '\P{^istamil}', "");
Expect(0, 2945, '\p{istamil}', "");
Expect(1, 2945, '\p{^istamil}', "");
Expect(1, 2945, '\P{istamil}', "");
Expect(0, 2945, '\P{^istamil}', "");
Expect(1, 2947, '\p{	is_Tamil}', "");
Expect(0, 2947, '\p{^	is_Tamil}', "");
Expect(0, 2947, '\P{	is_Tamil}', "");
Expect(1, 2947, '\P{^	is_Tamil}', "");
Expect(0, 2945, '\p{	is_Tamil}', "");
Expect(1, 2945, '\p{^	is_Tamil}', "");
Expect(1, 2945, '\P{	is_Tamil}', "");
Expect(0, 2945, '\P{^	is_Tamil}', "");
Error('\p{/a/	taml}');
Error('\P{/a/	taml}');
Expect(1, 2947, '\p{taml}', "");
Expect(0, 2947, '\p{^taml}', "");
Expect(0, 2947, '\P{taml}', "");
Expect(1, 2947, '\P{^taml}', "");
Expect(0, 2945, '\p{taml}', "");
Expect(1, 2945, '\p{^taml}', "");
Expect(1, 2945, '\P{taml}', "");
Expect(0, 2945, '\P{^taml}', "");
Expect(1, 2947, '\p{- taml}', "");
Expect(0, 2947, '\p{^- taml}', "");
Expect(0, 2947, '\P{- taml}', "");
Expect(1, 2947, '\P{^- taml}', "");
Expect(0, 2945, '\p{- taml}', "");
Expect(1, 2945, '\p{^- taml}', "");
Expect(1, 2945, '\P{- taml}', "");
Expect(0, 2945, '\P{^- taml}', "");
Error('\p{:=_	Is	taml}');
Error('\P{:=_	Is	taml}');
Expect(1, 2947, '\p{istaml}', "");
Expect(0, 2947, '\p{^istaml}', "");
Expect(0, 2947, '\P{istaml}', "");
Expect(1, 2947, '\P{^istaml}', "");
Expect(0, 2945, '\p{istaml}', "");
Expect(1, 2945, '\p{^istaml}', "");
Expect(1, 2945, '\P{istaml}', "");
Expect(0, 2945, '\P{^istaml}', "");
Expect(1, 2947, '\p{_IStaml}', "");
Expect(0, 2947, '\p{^_IStaml}', "");
Expect(0, 2947, '\P{_IStaml}', "");
Expect(1, 2947, '\P{^_IStaml}', "");
Expect(0, 2945, '\p{_IStaml}', "");
Expect(1, 2945, '\p{^_IStaml}', "");
Expect(1, 2945, '\P{_IStaml}', "");
Expect(0, 2945, '\P{^_IStaml}', "");
Error('\p{/a/	Shavian}');
Error('\P{/a/	Shavian}');
Expect(1, 66687, '\p{shavian}', "");
Expect(0, 66687, '\p{^shavian}', "");
Expect(0, 66687, '\P{shavian}', "");
Expect(1, 66687, '\P{^shavian}', "");
Expect(0, 66639, '\p{shavian}', "");
Expect(1, 66639, '\p{^shavian}', "");
Expect(1, 66639, '\P{shavian}', "");
Expect(0, 66639, '\P{^shavian}', "");
Expect(1, 66687, '\p{-_SHAVIAN}', "");
Expect(0, 66687, '\p{^-_SHAVIAN}', "");
Expect(0, 66687, '\P{-_SHAVIAN}', "");
Expect(1, 66687, '\P{^-_SHAVIAN}', "");
Expect(0, 66639, '\p{-_SHAVIAN}', "");
Expect(1, 66639, '\p{^-_SHAVIAN}', "");
Expect(1, 66639, '\P{-_SHAVIAN}', "");
Expect(0, 66639, '\P{^-_SHAVIAN}', "");
Error('\p{_:=Is	SHAVIAN}');
Error('\P{_:=Is	SHAVIAN}');
Expect(1, 66687, '\p{isshavian}', "");
Expect(0, 66687, '\p{^isshavian}', "");
Expect(0, 66687, '\P{isshavian}', "");
Expect(1, 66687, '\P{^isshavian}', "");
Expect(0, 66639, '\p{isshavian}', "");
Expect(1, 66639, '\p{^isshavian}', "");
Expect(1, 66639, '\P{isshavian}', "");
Expect(0, 66639, '\P{^isshavian}', "");
Expect(1, 66687, '\p{-	Is Shavian}', "");
Expect(0, 66687, '\p{^-	Is Shavian}', "");
Expect(0, 66687, '\P{-	Is Shavian}', "");
Expect(1, 66687, '\P{^-	Is Shavian}', "");
Expect(0, 66639, '\p{-	Is Shavian}', "");
Expect(1, 66639, '\p{^-	Is Shavian}', "");
Expect(1, 66639, '\P{-	Is Shavian}', "");
Expect(0, 66639, '\P{^-	Is Shavian}', "");
Error('\p{/a/__shaw}');
Error('\P{/a/__shaw}');
Expect(1, 66687, '\p{shaw}', "");
Expect(0, 66687, '\p{^shaw}', "");
Expect(0, 66687, '\P{shaw}', "");
Expect(1, 66687, '\P{^shaw}', "");
Expect(0, 66639, '\p{shaw}', "");
Expect(1, 66639, '\p{^shaw}', "");
Expect(1, 66639, '\P{shaw}', "");
Expect(0, 66639, '\P{^shaw}', "");
Expect(1, 66687, '\p{	 SHAW}', "");
Expect(0, 66687, '\p{^	 SHAW}', "");
Expect(0, 66687, '\P{	 SHAW}', "");
Expect(1, 66687, '\P{^	 SHAW}', "");
Expect(0, 66639, '\p{	 SHAW}', "");
Expect(1, 66639, '\p{^	 SHAW}', "");
Expect(1, 66639, '\P{	 SHAW}', "");
Expect(0, 66639, '\P{^	 SHAW}', "");
Error('\p{	 Is-Shaw/a/}');
Error('\P{	 Is-Shaw/a/}');
Expect(1, 66687, '\p{isshaw}', "");
Expect(0, 66687, '\p{^isshaw}', "");
Expect(0, 66687, '\P{isshaw}', "");
Expect(1, 66687, '\P{^isshaw}', "");
Expect(0, 66639, '\p{isshaw}', "");
Expect(1, 66639, '\p{^isshaw}', "");
Expect(1, 66639, '\P{isshaw}', "");
Expect(0, 66639, '\P{^isshaw}', "");
Expect(1, 66687, '\p{	_IsShaw}', "");
Expect(0, 66687, '\p{^	_IsShaw}', "");
Expect(0, 66687, '\P{	_IsShaw}', "");
Expect(1, 66687, '\P{^	_IsShaw}', "");
Expect(0, 66639, '\p{	_IsShaw}', "");
Expect(1, 66639, '\p{^	_IsShaw}', "");
Expect(1, 66639, '\P{	_IsShaw}', "");
Expect(0, 66639, '\P{^	_IsShaw}', "");
Error('\p{  IPA-Extensions/a/}');
Error('\P{  IPA-Extensions/a/}');
Expect(1, 687, '\p{ipaextensions}', "");
Expect(0, 687, '\p{^ipaextensions}', "");
Expect(0, 687, '\P{ipaextensions}', "");
Expect(1, 687, '\P{^ipaextensions}', "");
Expect(0, 591, '\p{ipaextensions}', "");
Expect(1, 591, '\p{^ipaextensions}', "");
Expect(1, 591, '\P{ipaextensions}', "");
Expect(0, 591, '\P{^ipaextensions}', "");
Expect(1, 687, '\p{--ipa_EXTENSIONS}', "");
Expect(0, 687, '\p{^--ipa_EXTENSIONS}', "");
Expect(0, 687, '\P{--ipa_EXTENSIONS}', "");
Expect(1, 687, '\P{^--ipa_EXTENSIONS}', "");
Expect(0, 591, '\p{--ipa_EXTENSIONS}', "");
Expect(1, 591, '\p{^--ipa_EXTENSIONS}', "");
Expect(1, 591, '\P{--ipa_EXTENSIONS}', "");
Expect(0, 591, '\P{^--ipa_EXTENSIONS}', "");
Error('\p{ IS/a/ipa	extensions}');
Error('\P{ IS/a/ipa	extensions}');
Expect(1, 687, '\p{isipaextensions}', "");
Expect(0, 687, '\p{^isipaextensions}', "");
Expect(0, 687, '\P{isipaextensions}', "");
Expect(1, 687, '\P{^isipaextensions}', "");
Expect(0, 591, '\p{isipaextensions}', "");
Expect(1, 591, '\p{^isipaextensions}', "");
Expect(1, 591, '\P{isipaextensions}', "");
Expect(0, 591, '\P{^isipaextensions}', "");
Expect(1, 687, '\p{	is-IPA_EXTENSIONS}', "");
Expect(0, 687, '\p{^	is-IPA_EXTENSIONS}', "");
Expect(0, 687, '\P{	is-IPA_EXTENSIONS}', "");
Expect(1, 687, '\P{^	is-IPA_EXTENSIONS}', "");
Expect(0, 591, '\p{	is-IPA_EXTENSIONS}', "");
Expect(1, 591, '\p{^	is-IPA_EXTENSIONS}', "");
Expect(1, 591, '\P{	is-IPA_EXTENSIONS}', "");
Expect(0, 591, '\P{^	is-IPA_EXTENSIONS}', "");
Error('\p{	 In:=ipa_extensions}');
Error('\P{	 In:=ipa_extensions}');
Expect(1, 687, '\p{inipaextensions}', "");
Expect(0, 687, '\p{^inipaextensions}', "");
Expect(0, 687, '\P{inipaextensions}', "");
Expect(1, 687, '\P{^inipaextensions}', "");
Expect(0, 591, '\p{inipaextensions}', "");
Expect(1, 591, '\p{^inipaextensions}', "");
Expect(1, 591, '\P{inipaextensions}', "");
Expect(0, 591, '\P{^inipaextensions}', "");
Expect(1, 687, '\p{--IN-ipa	extensions}', "");
Expect(0, 687, '\p{^--IN-ipa	extensions}', "");
Expect(0, 687, '\P{--IN-ipa	extensions}', "");
Expect(1, 687, '\P{^--IN-ipa	extensions}', "");
Expect(0, 591, '\p{--IN-ipa	extensions}', "");
Expect(1, 591, '\p{^--IN-ipa	extensions}', "");
Expect(1, 591, '\P{--IN-ipa	extensions}', "");
Expect(0, 591, '\P{^--IN-ipa	extensions}', "");
Error('\p{ :=Hiragana}');
Error('\P{ :=Hiragana}');
Expect(1, 12438, '\p{hiragana}', "");
Expect(0, 12438, '\p{^hiragana}', "");
Expect(0, 12438, '\P{hiragana}', "");
Expect(1, 12438, '\P{^hiragana}', "");
Expect(0, 12352, '\p{hiragana}', "");
Expect(1, 12352, '\p{^hiragana}', "");
Expect(1, 12352, '\P{hiragana}', "");
Expect(0, 12352, '\P{^hiragana}', "");
Expect(1, 12438, '\p{	 HIRAGANA}', "");
Expect(0, 12438, '\p{^	 HIRAGANA}', "");
Expect(0, 12438, '\P{	 HIRAGANA}', "");
Expect(1, 12438, '\P{^	 HIRAGANA}', "");
Expect(0, 12352, '\p{	 HIRAGANA}', "");
Expect(1, 12352, '\p{^	 HIRAGANA}', "");
Expect(1, 12352, '\P{	 HIRAGANA}', "");
Expect(0, 12352, '\P{^	 HIRAGANA}', "");
Error('\p{	-Is_hiragana:=}');
Error('\P{	-Is_hiragana:=}');
Expect(1, 12438, '\p{ishiragana}', "");
Expect(0, 12438, '\p{^ishiragana}', "");
Expect(0, 12438, '\P{ishiragana}', "");
Expect(1, 12438, '\P{^ishiragana}', "");
Expect(0, 12352, '\p{ishiragana}', "");
Expect(1, 12352, '\p{^ishiragana}', "");
Expect(1, 12352, '\P{ishiragana}', "");
Expect(0, 12352, '\P{^ishiragana}', "");
Expect(1, 12438, '\p{is	Hiragana}', "");
Expect(0, 12438, '\p{^is	Hiragana}', "");
Expect(0, 12438, '\P{is	Hiragana}', "");
Expect(1, 12438, '\P{^is	Hiragana}', "");
Expect(0, 12352, '\p{is	Hiragana}', "");
Expect(1, 12352, '\p{^is	Hiragana}', "");
Expect(1, 12352, '\P{is	Hiragana}', "");
Expect(0, 12352, '\P{^is	Hiragana}', "");
Error('\p{/a/Hira}');
Error('\P{/a/Hira}');
Expect(1, 12438, '\p{hira}', "");
Expect(0, 12438, '\p{^hira}', "");
Expect(0, 12438, '\P{hira}', "");
Expect(1, 12438, '\P{^hira}', "");
Expect(0, 12352, '\p{hira}', "");
Expect(1, 12352, '\p{^hira}', "");
Expect(1, 12352, '\P{hira}', "");
Expect(0, 12352, '\P{^hira}', "");
Expect(1, 12438, '\p{-Hira}', "");
Expect(0, 12438, '\p{^-Hira}', "");
Expect(0, 12438, '\P{-Hira}', "");
Expect(1, 12438, '\P{^-Hira}', "");
Expect(0, 12352, '\p{-Hira}', "");
Expect(1, 12352, '\p{^-Hira}', "");
Expect(1, 12352, '\P{-Hira}', "");
Expect(0, 12352, '\P{^-Hira}', "");
Error('\p{_-IS_HIRA/a/}');
Error('\P{_-IS_HIRA/a/}');
Expect(1, 12438, '\p{ishira}', "");
Expect(0, 12438, '\p{^ishira}', "");
Expect(0, 12438, '\P{ishira}', "");
Expect(1, 12438, '\P{^ishira}', "");
Expect(0, 12352, '\p{ishira}', "");
Expect(1, 12352, '\p{^ishira}', "");
Expect(1, 12352, '\P{ishira}', "");
Expect(0, 12352, '\P{^ishira}', "");
Expect(1, 12438, '\p{_Is_Hira}', "");
Expect(0, 12438, '\p{^_Is_Hira}', "");
Expect(0, 12438, '\P{_Is_Hira}', "");
Expect(1, 12438, '\P{^_Is_Hira}', "");
Expect(0, 12352, '\p{_Is_Hira}', "");
Expect(1, 12352, '\p{^_Is_Hira}', "");
Expect(1, 12352, '\P{_Is_Hira}', "");
Expect(0, 12352, '\P{^_Is_Hira}', "");
Error('\p{/a/	 GREEK}');
Error('\P{/a/	 GREEK}');
Expect(1, 883, '\p{greek}', "");
Expect(0, 883, '\p{^greek}', "");
Expect(0, 883, '\P{greek}', "");
Expect(1, 883, '\P{^greek}', "");
Expect(0, 879, '\p{greek}', "");
Expect(1, 879, '\p{^greek}', "");
Expect(1, 879, '\P{greek}', "");
Expect(0, 879, '\P{^greek}', "");
Expect(1, 883, '\p{_ greek}', "");
Expect(0, 883, '\p{^_ greek}', "");
Expect(0, 883, '\P{_ greek}', "");
Expect(1, 883, '\P{^_ greek}', "");
Expect(0, 879, '\p{_ greek}', "");
Expect(1, 879, '\p{^_ greek}', "");
Expect(1, 879, '\P{_ greek}', "");
Expect(0, 879, '\P{^_ greek}', "");
Error('\p{__Is:=Greek}');
Error('\P{__Is:=Greek}');
Expect(1, 883, '\p{isgreek}', "");
Expect(0, 883, '\p{^isgreek}', "");
Expect(0, 883, '\P{isgreek}', "");
Expect(1, 883, '\P{^isgreek}', "");
Expect(0, 879, '\p{isgreek}', "");
Expect(1, 879, '\p{^isgreek}', "");
Expect(1, 879, '\P{isgreek}', "");
Expect(0, 879, '\P{^isgreek}', "");
Expect(1, 883, '\p{_is	Greek}', "");
Expect(0, 883, '\p{^_is	Greek}', "");
Expect(0, 883, '\P{_is	Greek}', "");
Expect(1, 883, '\P{^_is	Greek}', "");
Expect(0, 879, '\p{_is	Greek}', "");
Expect(1, 879, '\p{^_is	Greek}', "");
Expect(1, 879, '\P{_is	Greek}', "");
Expect(0, 879, '\P{^_is	Greek}', "");
Error('\p{	:=Grek}');
Error('\P{	:=Grek}');
Expect(1, 883, '\p{grek}', "");
Expect(0, 883, '\p{^grek}', "");
Expect(0, 883, '\P{grek}', "");
Expect(1, 883, '\P{^grek}', "");
Expect(0, 879, '\p{grek}', "");
Expect(1, 879, '\p{^grek}', "");
Expect(1, 879, '\P{grek}', "");
Expect(0, 879, '\P{^grek}', "");
Expect(1, 883, '\p{_ Grek}', "");
Expect(0, 883, '\p{^_ Grek}', "");
Expect(0, 883, '\P{_ Grek}', "");
Expect(1, 883, '\P{^_ Grek}', "");
Expect(0, 879, '\p{_ Grek}', "");
Expect(1, 879, '\p{^_ Grek}', "");
Expect(1, 879, '\P{_ Grek}', "");
Expect(0, 879, '\P{^_ Grek}', "");
Error('\p{-	is:=Grek}');
Error('\P{-	is:=Grek}');
Expect(1, 883, '\p{isgrek}', "");
Expect(0, 883, '\p{^isgrek}', "");
Expect(0, 883, '\P{isgrek}', "");
Expect(1, 883, '\P{^isgrek}', "");
Expect(0, 879, '\p{isgrek}', "");
Expect(1, 879, '\p{^isgrek}', "");
Expect(1, 879, '\P{isgrek}', "");
Expect(0, 879, '\P{^isgrek}', "");
Expect(1, 883, '\p{ -IS-Grek}', "");
Expect(0, 883, '\p{^ -IS-Grek}', "");
Expect(0, 883, '\P{ -IS-Grek}', "");
Expect(1, 883, '\P{^ -IS-Grek}', "");
Expect(0, 879, '\p{ -IS-Grek}', "");
Expect(1, 879, '\p{^ -IS-Grek}', "");
Expect(1, 879, '\P{ -IS-Grek}', "");
Expect(0, 879, '\P{^ -IS-Grek}', "");
Error('\p{ IN:=Thai}');
Error('\P{ IN:=Thai}');
Expect(1, 3711, '\p{inthai}', "");
Expect(0, 3711, '\p{^inthai}', "");
Expect(0, 3711, '\P{inthai}', "");
Expect(1, 3711, '\P{^inthai}', "");
Expect(0, 3583, '\p{inthai}', "");
Expect(1, 3583, '\p{^inthai}', "");
Expect(1, 3583, '\P{inthai}', "");
Expect(0, 3583, '\P{^inthai}', "");
Expect(1, 3711, '\p{	INTHAI}', "");
Expect(0, 3711, '\p{^	INTHAI}', "");
Expect(0, 3711, '\P{	INTHAI}', "");
Expect(1, 3711, '\P{^	INTHAI}', "");
Expect(0, 3583, '\p{	INTHAI}', "");
Expect(1, 3583, '\p{^	INTHAI}', "");
Expect(1, 3583, '\P{	INTHAI}', "");
Expect(0, 3583, '\P{^	INTHAI}', "");
Error('\p{	/a/LINE SEPARATOR}');
Error('\P{	/a/LINE SEPARATOR}');
Expect(1, 8232, '\p{lineseparator}', "");
Expect(0, 8232, '\p{^lineseparator}', "");
Expect(0, 8232, '\P{lineseparator}', "");
Expect(1, 8232, '\P{^lineseparator}', "");
Expect(0, 8231, '\p{lineseparator}', "");
Expect(1, 8231, '\p{^lineseparator}', "");
Expect(1, 8231, '\P{lineseparator}', "");
Expect(0, 8231, '\P{^lineseparator}', "");
Expect(1, 8232, '\p{ 	line separator}', "");
Expect(0, 8232, '\p{^ 	line separator}', "");
Expect(0, 8232, '\P{ 	line separator}', "");
Expect(1, 8232, '\P{^ 	line separator}', "");
Expect(0, 8231, '\p{ 	line separator}', "");
Expect(1, 8231, '\p{^ 	line separator}', "");
Expect(1, 8231, '\P{ 	line separator}', "");
Expect(0, 8231, '\P{^ 	line separator}', "");
Error('\p{/a/-	Is lineseparator}');
Error('\P{/a/-	Is lineseparator}');
Expect(1, 8232, '\p{islineseparator}', "");
Expect(0, 8232, '\p{^islineseparator}', "");
Expect(0, 8232, '\P{islineseparator}', "");
Expect(1, 8232, '\P{^islineseparator}', "");
Expect(0, 8231, '\p{islineseparator}', "");
Expect(1, 8231, '\p{^islineseparator}', "");
Expect(1, 8231, '\P{islineseparator}', "");
Expect(0, 8231, '\P{^islineseparator}', "");
Expect(1, 8232, '\p{		Is	Line	Separator}', "");
Expect(0, 8232, '\p{^		Is	Line	Separator}', "");
Expect(0, 8232, '\P{		Is	Line	Separator}', "");
Expect(1, 8232, '\P{^		Is	Line	Separator}', "");
Expect(0, 8231, '\p{		Is	Line	Separator}', "");
Expect(1, 8231, '\p{^		Is	Line	Separator}', "");
Expect(1, 8231, '\P{		Is	Line	Separator}', "");
Expect(0, 8231, '\P{^		Is	Line	Separator}', "");
Error('\p{ -Zl:=}');
Error('\P{ -Zl:=}');
Expect(1, 8232, '\p{zl}', "");
Expect(0, 8232, '\p{^zl}', "");
Expect(0, 8232, '\P{zl}', "");
Expect(1, 8232, '\P{^zl}', "");
Expect(0, 8231, '\p{zl}', "");
Expect(1, 8231, '\p{^zl}', "");
Expect(1, 8231, '\P{zl}', "");
Expect(0, 8231, '\P{^zl}', "");
Expect(1, 8232, '\p{- Zl}', "");
Expect(0, 8232, '\p{^- Zl}', "");
Expect(0, 8232, '\P{- Zl}', "");
Expect(1, 8232, '\P{^- Zl}', "");
Expect(0, 8231, '\p{- Zl}', "");
Expect(1, 8231, '\p{^- Zl}', "");
Expect(1, 8231, '\P{- Zl}', "");
Expect(0, 8231, '\P{^- Zl}', "");
Error('\p{/a/_ is_Zl}');
Error('\P{/a/_ is_Zl}');
Expect(1, 8232, '\p{iszl}', "");
Expect(0, 8232, '\p{^iszl}', "");
Expect(0, 8232, '\P{iszl}', "");
Expect(1, 8232, '\P{^iszl}', "");
Expect(0, 8231, '\p{iszl}', "");
Expect(1, 8231, '\p{^iszl}', "");
Expect(1, 8231, '\P{iszl}', "");
Expect(0, 8231, '\P{^iszl}', "");
Expect(1, 8232, '\p{	Is	ZL}', "");
Expect(0, 8232, '\p{^	Is	ZL}', "");
Expect(0, 8232, '\P{	Is	ZL}', "");
Expect(1, 8232, '\P{^	Is	ZL}', "");
Expect(0, 8231, '\p{	Is	ZL}', "");
Expect(1, 8231, '\p{^	Is	ZL}', "");
Expect(1, 8231, '\P{	Is	ZL}', "");
Expect(0, 8231, '\P{^	Is	ZL}', "");
Error('\p{ _ol_CHIKI/a/}');
Error('\P{ _ol_CHIKI/a/}');
Expect(1, 7295, '\p{olchiki}', "");
Expect(0, 7295, '\p{^olchiki}', "");
Expect(0, 7295, '\P{olchiki}', "");
Expect(1, 7295, '\P{^olchiki}', "");
Expect(0, 7247, '\p{olchiki}', "");
Expect(1, 7247, '\p{^olchiki}', "");
Expect(1, 7247, '\P{olchiki}', "");
Expect(0, 7247, '\P{^olchiki}', "");
Expect(1, 7295, '\p{-OL	Chiki}', "");
Expect(0, 7295, '\p{^-OL	Chiki}', "");
Expect(0, 7295, '\P{-OL	Chiki}', "");
Expect(1, 7295, '\P{^-OL	Chiki}', "");
Expect(0, 7247, '\p{-OL	Chiki}', "");
Expect(1, 7247, '\p{^-OL	Chiki}', "");
Expect(1, 7247, '\P{-OL	Chiki}', "");
Expect(0, 7247, '\P{^-OL	Chiki}', "");
Error('\p{/a/	-Is_Ol_Chiki}');
Error('\P{/a/	-Is_Ol_Chiki}');
Expect(1, 7295, '\p{isolchiki}', "");
Expect(0, 7295, '\p{^isolchiki}', "");
Expect(0, 7295, '\P{isolchiki}', "");
Expect(1, 7295, '\P{^isolchiki}', "");
Expect(0, 7247, '\p{isolchiki}', "");
Expect(1, 7247, '\p{^isolchiki}', "");
Expect(1, 7247, '\P{isolchiki}', "");
Expect(0, 7247, '\P{^isolchiki}', "");
Expect(1, 7295, '\p{		is	OL-chiki}', "");
Expect(0, 7295, '\p{^		is	OL-chiki}', "");
Expect(0, 7295, '\P{		is	OL-chiki}', "");
Expect(1, 7295, '\P{^		is	OL-chiki}', "");
Expect(0, 7247, '\p{		is	OL-chiki}', "");
Expect(1, 7247, '\p{^		is	OL-chiki}', "");
Expect(1, 7247, '\P{		is	OL-chiki}', "");
Expect(0, 7247, '\P{^		is	OL-chiki}', "");
Error('\p{:=__olck}');
Error('\P{:=__olck}');
Expect(1, 7295, '\p{olck}', "");
Expect(0, 7295, '\p{^olck}', "");
Expect(0, 7295, '\P{olck}', "");
Expect(1, 7295, '\P{^olck}', "");
Expect(0, 7247, '\p{olck}', "");
Expect(1, 7247, '\p{^olck}', "");
Expect(1, 7247, '\P{olck}', "");
Expect(0, 7247, '\P{^olck}', "");
Expect(1, 7295, '\p{_Olck}', "");
Expect(0, 7295, '\p{^_Olck}', "");
Expect(0, 7295, '\P{_Olck}', "");
Expect(1, 7295, '\P{^_Olck}', "");
Expect(0, 7247, '\p{_Olck}', "");
Expect(1, 7247, '\p{^_Olck}', "");
Expect(1, 7247, '\P{_Olck}', "");
Expect(0, 7247, '\P{^_Olck}', "");
Error('\p{ Is/a/Olck}');
Error('\P{ Is/a/Olck}');
Expect(1, 7295, '\p{isolck}', "");
Expect(0, 7295, '\p{^isolck}', "");
Expect(0, 7295, '\P{isolck}', "");
Expect(1, 7295, '\P{^isolck}', "");
Expect(0, 7247, '\p{isolck}', "");
Expect(1, 7247, '\p{^isolck}', "");
Expect(1, 7247, '\P{isolck}', "");
Expect(0, 7247, '\P{^isolck}', "");
Expect(1, 7295, '\p{ _Is_OLCK}', "");
Expect(0, 7295, '\p{^ _Is_OLCK}', "");
Expect(0, 7295, '\P{ _Is_OLCK}', "");
Expect(1, 7295, '\P{^ _Is_OLCK}', "");
Expect(0, 7247, '\p{ _Is_OLCK}', "");
Expect(1, 7247, '\p{^ _Is_OLCK}', "");
Expect(1, 7247, '\P{ _Is_OLCK}', "");
Expect(0, 7247, '\P{^ _Is_OLCK}', "");
Error('\p{_ Tai	Viet/a/}');
Error('\P{_ Tai	Viet/a/}');
Expect(1, 43714, '\p{taiviet}', "");
Expect(0, 43714, '\p{^taiviet}', "");
Expect(0, 43714, '\P{taiviet}', "");
Expect(1, 43714, '\P{^taiviet}', "");
Expect(0, 43647, '\p{taiviet}', "");
Expect(1, 43647, '\p{^taiviet}', "");
Expect(1, 43647, '\P{taiviet}', "");
Expect(0, 43647, '\P{^taiviet}', "");
Expect(1, 43714, '\p{-	TAI Viet}', "");
Expect(0, 43714, '\p{^-	TAI Viet}', "");
Expect(0, 43714, '\P{-	TAI Viet}', "");
Expect(1, 43714, '\P{^-	TAI Viet}', "");
Expect(0, 43647, '\p{-	TAI Viet}', "");
Expect(1, 43647, '\p{^-	TAI Viet}', "");
Expect(1, 43647, '\P{-	TAI Viet}', "");
Expect(0, 43647, '\P{^-	TAI Viet}', "");
Error('\p{-	IS/a/TAI Viet}');
Error('\P{-	IS/a/TAI Viet}');
Expect(1, 43714, '\p{istaiviet}', "");
Expect(0, 43714, '\p{^istaiviet}', "");
Expect(0, 43714, '\P{istaiviet}', "");
Expect(1, 43714, '\P{^istaiviet}', "");
Expect(0, 43647, '\p{istaiviet}', "");
Expect(1, 43647, '\p{^istaiviet}', "");
Expect(1, 43647, '\P{istaiviet}', "");
Expect(0, 43647, '\P{^istaiviet}', "");
Expect(1, 43714, '\p{-	is tai-VIET}', "");
Expect(0, 43714, '\p{^-	is tai-VIET}', "");
Expect(0, 43714, '\P{-	is tai-VIET}', "");
Expect(1, 43714, '\P{^-	is tai-VIET}', "");
Expect(0, 43647, '\p{-	is tai-VIET}', "");
Expect(1, 43647, '\p{^-	is tai-VIET}', "");
Expect(1, 43647, '\P{-	is tai-VIET}', "");
Expect(0, 43647, '\P{^-	is tai-VIET}', "");
Error('\p{:=	_Tavt}');
Error('\P{:=	_Tavt}');
Expect(1, 43714, '\p{tavt}', "");
Expect(0, 43714, '\p{^tavt}', "");
Expect(0, 43714, '\P{tavt}', "");
Expect(1, 43714, '\P{^tavt}', "");
Expect(0, 43647, '\p{tavt}', "");
Expect(1, 43647, '\p{^tavt}', "");
Expect(1, 43647, '\P{tavt}', "");
Expect(0, 43647, '\P{^tavt}', "");
Expect(1, 43714, '\p{--Tavt}', "");
Expect(0, 43714, '\p{^--Tavt}', "");
Expect(0, 43714, '\P{--Tavt}', "");
Expect(1, 43714, '\P{^--Tavt}', "");
Expect(0, 43647, '\p{--Tavt}', "");
Expect(1, 43647, '\p{^--Tavt}', "");
Expect(1, 43647, '\P{--Tavt}', "");
Expect(0, 43647, '\P{^--Tavt}', "");
Error('\p{/a/ Is	tavt}');
Error('\P{/a/ Is	tavt}');
Expect(1, 43714, '\p{istavt}', "");
Expect(0, 43714, '\p{^istavt}', "");
Expect(0, 43714, '\P{istavt}', "");
Expect(1, 43714, '\P{^istavt}', "");
Expect(0, 43647, '\p{istavt}', "");
Expect(1, 43647, '\p{^istavt}', "");
Expect(1, 43647, '\P{istavt}', "");
Expect(0, 43647, '\P{^istavt}', "");
Expect(1, 43714, '\p{ 	IS TAVT}', "");
Expect(0, 43714, '\p{^ 	IS TAVT}', "");
Expect(0, 43714, '\P{ 	IS TAVT}', "");
Expect(1, 43714, '\P{^ 	IS TAVT}', "");
Expect(0, 43647, '\p{ 	IS TAVT}', "");
Expect(1, 43647, '\p{^ 	IS TAVT}', "");
Expect(1, 43647, '\P{ 	IS TAVT}', "");
Expect(0, 43647, '\P{^ 	IS TAVT}', "");
Error('\p{:=--Thai}');
Error('\P{:=--Thai}');
Expect(1, 3642, '\p{thai}', "");
Expect(0, 3642, '\p{^thai}', "");
Expect(0, 3642, '\P{thai}', "");
Expect(1, 3642, '\P{^thai}', "");
Expect(0, 3584, '\p{thai}', "");
Expect(1, 3584, '\p{^thai}', "");
Expect(1, 3584, '\P{thai}', "");
Expect(0, 3584, '\P{^thai}', "");
Expect(1, 3642, '\p{_thai}', "");
Expect(0, 3642, '\p{^_thai}', "");
Expect(0, 3642, '\P{_thai}', "");
Expect(1, 3642, '\P{^_thai}', "");
Expect(0, 3584, '\p{_thai}', "");
Expect(1, 3584, '\p{^_thai}', "");
Expect(1, 3584, '\P{_thai}', "");
Expect(0, 3584, '\P{^_thai}', "");
Error('\p{/a/IS Thai}');
Error('\P{/a/IS Thai}');
Expect(1, 3642, '\p{isthai}', "");
Expect(0, 3642, '\p{^isthai}', "");
Expect(0, 3642, '\P{isthai}', "");
Expect(1, 3642, '\P{^isthai}', "");
Expect(0, 3584, '\p{isthai}', "");
Expect(1, 3584, '\p{^isthai}', "");
Expect(1, 3584, '\P{isthai}', "");
Expect(0, 3584, '\P{^isthai}', "");
Expect(1, 3642, '\p{-	is_Thai}', "");
Expect(0, 3642, '\p{^-	is_Thai}', "");
Expect(0, 3642, '\P{-	is_Thai}', "");
Expect(1, 3642, '\P{^-	is_Thai}', "");
Expect(0, 3584, '\p{-	is_Thai}', "");
Expect(1, 3584, '\p{^-	is_Thai}', "");
Expect(1, 3584, '\P{-	is_Thai}', "");
Expect(0, 3584, '\P{^-	is_Thai}', "");
Error('\p{:=	ASCII}');
Error('\P{:=	ASCII}');
Expect(1, 127, '\p{ascii}', "");
Expect(0, 127, '\p{^ascii}', "");
Expect(0, 127, '\P{ascii}', "");
Expect(1, 127, '\P{^ascii}', "");
Expect(0, 128, '\p{ascii}', "");
Expect(1, 128, '\p{^ascii}', "");
Expect(1, 128, '\P{ascii}', "");
Expect(0, 128, '\P{^ascii}', "");
Expect(1, 127, '\p{ ASCII}', "");
Expect(0, 127, '\p{^ ASCII}', "");
Expect(0, 127, '\P{ ASCII}', "");
Expect(1, 127, '\P{^ ASCII}', "");
Expect(0, 128, '\p{ ASCII}', "");
Expect(1, 128, '\p{^ ASCII}', "");
Expect(1, 128, '\P{ ASCII}', "");
Expect(0, 128, '\P{^ ASCII}', "");
Error('\p{/a/		IS	ASCII}');
Error('\P{/a/		IS	ASCII}');
Expect(1, 127, '\p{isascii}', "");
Expect(0, 127, '\p{^isascii}', "");
Expect(0, 127, '\P{isascii}', "");
Expect(1, 127, '\P{^isascii}', "");
Expect(0, 128, '\p{isascii}', "");
Expect(1, 128, '\p{^isascii}', "");
Expect(1, 128, '\P{isascii}', "");
Expect(0, 128, '\P{^isascii}', "");
Expect(1, 127, '\p{-_is ASCII}', "");
Expect(0, 127, '\p{^-_is ASCII}', "");
Expect(0, 127, '\P{-_is ASCII}', "");
Expect(1, 127, '\P{^-_is ASCII}', "");
Expect(0, 128, '\p{-_is ASCII}', "");
Expect(1, 128, '\p{^-_is ASCII}', "");
Expect(1, 128, '\P{-_is ASCII}', "");
Expect(0, 128, '\P{^-_is ASCII}', "");
Error('\p{/a/	BasicLATIN}');
Error('\P{/a/	BasicLATIN}');
Expect(1, 127, '\p{basiclatin}', "");
Expect(0, 127, '\p{^basiclatin}', "");
Expect(0, 127, '\P{basiclatin}', "");
Expect(1, 127, '\P{^basiclatin}', "");
Expect(0, 128, '\p{basiclatin}', "");
Expect(1, 128, '\p{^basiclatin}', "");
Expect(1, 128, '\P{basiclatin}', "");
Expect(0, 128, '\P{^basiclatin}', "");
Expect(1, 127, '\p{__BASIC LATIN}', "");
Expect(0, 127, '\p{^__BASIC LATIN}', "");
Expect(0, 127, '\P{__BASIC LATIN}', "");
Expect(1, 127, '\P{^__BASIC LATIN}', "");
Expect(0, 128, '\p{__BASIC LATIN}', "");
Expect(1, 128, '\p{^__BASIC LATIN}', "");
Expect(1, 128, '\P{__BASIC LATIN}', "");
Expect(0, 128, '\P{^__BASIC LATIN}', "");
Error('\p{-Is	BASICLatin:=}');
Error('\P{-Is	BASICLatin:=}');
Expect(1, 127, '\p{isbasiclatin}', "");
Expect(0, 127, '\p{^isbasiclatin}', "");
Expect(0, 127, '\P{isbasiclatin}', "");
Expect(1, 127, '\P{^isbasiclatin}', "");
Expect(0, 128, '\p{isbasiclatin}', "");
Expect(1, 128, '\p{^isbasiclatin}', "");
Expect(1, 128, '\P{isbasiclatin}', "");
Expect(0, 128, '\P{^isbasiclatin}', "");
Expect(1, 127, '\p{_IS	Basic_Latin}', "");
Expect(0, 127, '\p{^_IS	Basic_Latin}', "");
Expect(0, 127, '\P{_IS	Basic_Latin}', "");
Expect(1, 127, '\P{^_IS	Basic_Latin}', "");
Expect(0, 128, '\p{_IS	Basic_Latin}', "");
Expect(1, 128, '\p{^_IS	Basic_Latin}', "");
Expect(1, 128, '\P{_IS	Basic_Latin}', "");
Expect(0, 128, '\P{^_IS	Basic_Latin}', "");
Error('\p{_-IN:=BASIC latin}');
Error('\P{_-IN:=BASIC latin}');
Expect(1, 127, '\p{inbasiclatin}', "");
Expect(0, 127, '\p{^inbasiclatin}', "");
Expect(0, 127, '\P{inbasiclatin}', "");
Expect(1, 127, '\P{^inbasiclatin}', "");
Expect(0, 128, '\p{inbasiclatin}', "");
Expect(1, 128, '\p{^inbasiclatin}', "");
Expect(1, 128, '\P{inbasiclatin}', "");
Expect(0, 128, '\P{^inbasiclatin}', "");
Expect(1, 127, '\p{_IN-Basic_Latin}', "");
Expect(0, 127, '\p{^_IN-Basic_Latin}', "");
Expect(0, 127, '\P{_IN-Basic_Latin}', "");
Expect(1, 127, '\P{^_IN-Basic_Latin}', "");
Expect(0, 128, '\p{_IN-Basic_Latin}', "");
Expect(1, 128, '\p{^_IN-Basic_Latin}', "");
Expect(1, 128, '\P{_IN-Basic_Latin}', "");
Expect(0, 128, '\P{^_IN-Basic_Latin}', "");
Error('\p{	/a/In_ascii}');
Error('\P{	/a/In_ascii}');
Expect(1, 127, '\p{inascii}', "");
Expect(0, 127, '\p{^inascii}', "");
Expect(0, 127, '\P{inascii}', "");
Expect(1, 127, '\P{^inascii}', "");
Expect(0, 128, '\p{inascii}', "");
Expect(1, 128, '\p{^inascii}', "");
Expect(1, 128, '\P{inascii}', "");
Expect(0, 128, '\P{^inascii}', "");
Expect(1, 127, '\p{	-IN ASCII}', "");
Expect(0, 127, '\p{^	-IN ASCII}', "");
Expect(0, 127, '\P{	-IN ASCII}', "");
Expect(1, 127, '\P{^	-IN ASCII}', "");
Expect(0, 128, '\p{	-IN ASCII}', "");
Expect(1, 128, '\p{^	-IN ASCII}', "");
Expect(1, 128, '\P{	-IN ASCII}', "");
Expect(0, 128, '\P{^	-IN ASCII}', "");
Error('\p{-Yi Syllables/a/}');
Error('\P{-Yi Syllables/a/}');
Expect(1, 42127, '\p{yisyllables}', "");
Expect(0, 42127, '\p{^yisyllables}', "");
Expect(0, 42127, '\P{yisyllables}', "");
Expect(1, 42127, '\P{^yisyllables}', "");
Expect(0, 40959, '\p{yisyllables}', "");
Expect(1, 40959, '\p{^yisyllables}', "");
Expect(1, 40959, '\P{yisyllables}', "");
Expect(0, 40959, '\P{^yisyllables}', "");
Expect(1, 42127, '\p{ Yi	SYLLABLES}', "");
Expect(0, 42127, '\p{^ Yi	SYLLABLES}', "");
Expect(0, 42127, '\P{ Yi	SYLLABLES}', "");
Expect(1, 42127, '\P{^ Yi	SYLLABLES}', "");
Expect(0, 40959, '\p{ Yi	SYLLABLES}', "");
Expect(1, 40959, '\p{^ Yi	SYLLABLES}', "");
Expect(1, 40959, '\P{ Yi	SYLLABLES}', "");
Expect(0, 40959, '\P{^ Yi	SYLLABLES}', "");
Error('\p{ /a/IS Yi Syllables}');
Error('\P{ /a/IS Yi Syllables}');
Expect(1, 42127, '\p{isyisyllables}', "");
Expect(0, 42127, '\p{^isyisyllables}', "");
Expect(0, 42127, '\P{isyisyllables}', "");
Expect(1, 42127, '\P{^isyisyllables}', "");
Expect(0, 40959, '\p{isyisyllables}', "");
Expect(1, 40959, '\p{^isyisyllables}', "");
Expect(1, 40959, '\P{isyisyllables}', "");
Expect(0, 40959, '\P{^isyisyllables}', "");
Expect(1, 42127, '\p{ _Is Yi	Syllables}', "");
Expect(0, 42127, '\p{^ _Is Yi	Syllables}', "");
Expect(0, 42127, '\P{ _Is Yi	Syllables}', "");
Expect(1, 42127, '\P{^ _Is Yi	Syllables}', "");
Expect(0, 40959, '\p{ _Is Yi	Syllables}', "");
Expect(1, 40959, '\p{^ _Is Yi	Syllables}', "");
Expect(1, 40959, '\P{ _Is Yi	Syllables}', "");
Expect(0, 40959, '\P{^ _Is Yi	Syllables}', "");
Error('\p{/a/ -IN YI-SYLLABLES}');
Error('\P{/a/ -IN YI-SYLLABLES}');
Expect(1, 42127, '\p{inyisyllables}', "");
Expect(0, 42127, '\p{^inyisyllables}', "");
Expect(0, 42127, '\P{inyisyllables}', "");
Expect(1, 42127, '\P{^inyisyllables}', "");
Expect(0, 40959, '\p{inyisyllables}', "");
Expect(1, 40959, '\p{^inyisyllables}', "");
Expect(1, 40959, '\P{inyisyllables}', "");
Expect(0, 40959, '\P{^inyisyllables}', "");
Expect(1, 42127, '\p{ 	InYisyllables}', "");
Expect(0, 42127, '\p{^ 	InYisyllables}', "");
Expect(0, 42127, '\P{ 	InYisyllables}', "");
Expect(1, 42127, '\P{^ 	InYisyllables}', "");
Expect(0, 40959, '\p{ 	InYisyllables}', "");
Expect(1, 40959, '\p{^ 	InYisyllables}', "");
Expect(1, 40959, '\P{ 	InYisyllables}', "");
Expect(0, 40959, '\P{^ 	InYisyllables}', "");
Error('\p{:= -punct}');
Error('\P{:= -punct}');
Expect(1, 35, '\p{punct}', "");
Expect(0, 35, '\p{^punct}', "");
Expect(0, 35, '\P{punct}', "");
Expect(1, 35, '\P{^punct}', "");
Expect(0, 32, '\p{punct}', "");
Expect(1, 32, '\p{^punct}', "");
Expect(1, 32, '\P{punct}', "");
Expect(0, 32, '\P{^punct}', "");
Expect(1, 35, '\p{- Punct}', "");
Expect(0, 35, '\p{^- Punct}', "");
Expect(0, 35, '\P{- Punct}', "");
Expect(1, 35, '\P{^- Punct}', "");
Expect(0, 32, '\p{- Punct}', "");
Expect(1, 32, '\p{^- Punct}', "");
Expect(1, 32, '\P{- Punct}', "");
Expect(0, 32, '\P{^- Punct}', "");
Error('\p{_	Is-Punct:=}');
Error('\P{_	Is-Punct:=}');
Expect(1, 35, '\p{ispunct}', "");
Expect(0, 35, '\p{^ispunct}', "");
Expect(0, 35, '\P{ispunct}', "");
Expect(1, 35, '\P{^ispunct}', "");
Expect(0, 32, '\p{ispunct}', "");
Expect(1, 32, '\p{^ispunct}', "");
Expect(1, 32, '\P{ispunct}', "");
Expect(0, 32, '\P{^ispunct}', "");
Expect(1, 35, '\p{ ispunct}', "");
Expect(0, 35, '\p{^ ispunct}', "");
Expect(0, 35, '\P{ ispunct}', "");
Expect(1, 35, '\P{^ ispunct}', "");
Expect(0, 32, '\p{ ispunct}', "");
Expect(1, 32, '\p{^ ispunct}', "");
Expect(1, 32, '\P{ ispunct}', "");
Expect(0, 32, '\P{^ ispunct}', "");
Error('\p{ :=PUNCTUATION}');
Error('\P{ :=PUNCTUATION}');
Expect(1, 35, '\p{punctuation}', "");
Expect(0, 35, '\p{^punctuation}', "");
Expect(0, 35, '\P{punctuation}', "");
Expect(1, 35, '\P{^punctuation}', "");
Expect(0, 32, '\p{punctuation}', "");
Expect(1, 32, '\p{^punctuation}', "");
Expect(1, 32, '\P{punctuation}', "");
Expect(0, 32, '\P{^punctuation}', "");
Expect(1, 35, '\p{_punctuation}', "");
Expect(0, 35, '\p{^_punctuation}', "");
Expect(0, 35, '\P{_punctuation}', "");
Expect(1, 35, '\P{^_punctuation}', "");
Expect(0, 32, '\p{_punctuation}', "");
Expect(1, 32, '\p{^_punctuation}', "");
Expect(1, 32, '\P{_punctuation}', "");
Expect(0, 32, '\P{^_punctuation}', "");
Error('\p{	IS	PUNCTUATION/a/}');
Error('\P{	IS	PUNCTUATION/a/}');
Expect(1, 35, '\p{ispunctuation}', "");
Expect(0, 35, '\p{^ispunctuation}', "");
Expect(0, 35, '\P{ispunctuation}', "");
Expect(1, 35, '\P{^ispunctuation}', "");
Expect(0, 32, '\p{ispunctuation}', "");
Expect(1, 32, '\p{^ispunctuation}', "");
Expect(1, 32, '\P{ispunctuation}', "");
Expect(0, 32, '\P{^ispunctuation}', "");
Expect(1, 35, '\p{	Is-Punctuation}', "");
Expect(0, 35, '\p{^	Is-Punctuation}', "");
Expect(0, 35, '\P{	Is-Punctuation}', "");
Expect(1, 35, '\P{^	Is-Punctuation}', "");
Expect(0, 32, '\p{	Is-Punctuation}', "");
Expect(1, 32, '\p{^	Is-Punctuation}', "");
Expect(1, 32, '\P{	Is-Punctuation}', "");
Expect(0, 32, '\P{^	Is-Punctuation}', "");
Error('\p{-/a/P}');
Error('\P{-/a/P}');
Expect(1, 35, '\p{p}', "");
Expect(0, 35, '\p{^p}', "");
Expect(0, 35, '\P{p}', "");
Expect(1, 35, '\P{^p}', "");
Expect(0, 32, '\p{p}', "");
Expect(1, 32, '\p{^p}', "");
Expect(1, 32, '\P{p}', "");
Expect(0, 32, '\P{^p}', "");
Expect(1, 35, '\p{_ P}', "");
Expect(0, 35, '\p{^_ P}', "");
Expect(0, 35, '\P{_ P}', "");
Expect(1, 35, '\P{^_ P}', "");
Expect(0, 32, '\p{_ P}', "");
Expect(1, 32, '\p{^_ P}', "");
Expect(1, 32, '\P{_ P}', "");
Expect(0, 32, '\P{^_ P}', "");
Error('\p{	isP:=}');
Error('\P{	isP:=}');
Expect(1, 35, '\p{isp}', "");
Expect(0, 35, '\p{^isp}', "");
Expect(0, 35, '\P{isp}', "");
Expect(1, 35, '\P{^isp}', "");
Expect(0, 32, '\p{isp}', "");
Expect(1, 32, '\p{^isp}', "");
Expect(1, 32, '\P{isp}', "");
Expect(0, 32, '\P{^isp}', "");
Expect(1, 35, '\p{ _Is P}', "");
Expect(0, 35, '\p{^ _Is P}', "");
Expect(0, 35, '\P{ _Is P}', "");
Expect(1, 35, '\P{^ _Is P}', "");
Expect(0, 32, '\p{ _Is P}', "");
Expect(1, 32, '\p{^ _Is P}', "");
Expect(1, 32, '\P{ _Is P}', "");
Expect(0, 32, '\P{^ _Is P}', "");
Error('\p{Expands_On_NFD}');
Error('\P{Expands_On_NFD}');
Error('\p{Is_Expands_On_NFD}');
Error('\P{Is_Expands_On_NFD}');
Error('\p{XO_NFD}');
Error('\P{XO_NFD}');
Error('\p{Is_XO_NFD}');
Error('\P{Is_XO_NFD}');
Error('\p{	superscripts	AND:=SUBSCRIPTS}');
Error('\P{	superscripts	AND:=SUBSCRIPTS}');
Expect(1, 8351, '\p{superscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^superscriptsandsubscripts}', "");
Expect(0, 8351, '\P{superscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^superscriptsandsubscripts}', "");
Expect(0, 8303, '\p{superscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^superscriptsandsubscripts}', "");
Expect(1, 8303, '\P{superscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^superscriptsandsubscripts}', "");
Expect(1, 8351, '\p{  superscripts-AND-Subscripts}', "");
Expect(0, 8351, '\p{^  superscripts-AND-Subscripts}', "");
Expect(0, 8351, '\P{  superscripts-AND-Subscripts}', "");
Expect(1, 8351, '\P{^  superscripts-AND-Subscripts}', "");
Expect(0, 8303, '\p{  superscripts-AND-Subscripts}', "");
Expect(1, 8303, '\p{^  superscripts-AND-Subscripts}', "");
Expect(1, 8303, '\P{  superscripts-AND-Subscripts}', "");
Expect(0, 8303, '\P{^  superscripts-AND-Subscripts}', "");
Error('\p{_ IS-Superscripts/a/AND_Subscripts}');
Error('\P{_ IS-Superscripts/a/AND_Subscripts}');
Expect(1, 8351, '\p{issuperscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^issuperscriptsandsubscripts}', "");
Expect(0, 8351, '\P{issuperscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^issuperscriptsandsubscripts}', "");
Expect(0, 8303, '\p{issuperscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^issuperscriptsandsubscripts}', "");
Expect(1, 8303, '\P{issuperscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^issuperscriptsandsubscripts}', "");
Expect(1, 8351, '\p{ IS superscriptsAnd	subscripts}', "");
Expect(0, 8351, '\p{^ IS superscriptsAnd	subscripts}', "");
Expect(0, 8351, '\P{ IS superscriptsAnd	subscripts}', "");
Expect(1, 8351, '\P{^ IS superscriptsAnd	subscripts}', "");
Expect(0, 8303, '\p{ IS superscriptsAnd	subscripts}', "");
Expect(1, 8303, '\p{^ IS superscriptsAnd	subscripts}', "");
Expect(1, 8303, '\P{ IS superscriptsAnd	subscripts}', "");
Expect(0, 8303, '\P{^ IS superscriptsAnd	subscripts}', "");
Error('\p{ InSuperscripts/a/And_subscripts}');
Error('\P{ InSuperscripts/a/And_subscripts}');
Expect(1, 8351, '\p{insuperscriptsandsubscripts}', "");
Expect(0, 8351, '\p{^insuperscriptsandsubscripts}', "");
Expect(0, 8351, '\P{insuperscriptsandsubscripts}', "");
Expect(1, 8351, '\P{^insuperscriptsandsubscripts}', "");
Expect(0, 8303, '\p{insuperscriptsandsubscripts}', "");
Expect(1, 8303, '\p{^insuperscriptsandsubscripts}', "");
Expect(1, 8303, '\P{insuperscriptsandsubscripts}', "");
Expect(0, 8303, '\P{^insuperscriptsandsubscripts}', "");
Expect(1, 8351, '\p{ _In_superscripts-And_SUBSCRIPTS}', "");
Expect(0, 8351, '\p{^ _In_superscripts-And_SUBSCRIPTS}', "");
Expect(0, 8351, '\P{ _In_superscripts-And_SUBSCRIPTS}', "");
Expect(1, 8351, '\P{^ _In_superscripts-And_SUBSCRIPTS}', "");
Expect(0, 8303, '\p{ _In_superscripts-And_SUBSCRIPTS}', "");
Expect(1, 8303, '\p{^ _In_superscripts-And_SUBSCRIPTS}', "");
Expect(1, 8303, '\P{ _In_superscripts-And_SUBSCRIPTS}', "");
Expect(0, 8303, '\P{^ _In_superscripts-And_SUBSCRIPTS}', "");
Error('\p{_in/a/Balinese}');
Error('\P{_in/a/Balinese}');
Expect(1, 7039, '\p{inbalinese}', "");
Expect(0, 7039, '\p{^inbalinese}', "");
Expect(0, 7039, '\P{inbalinese}', "");
Expect(1, 7039, '\P{^inbalinese}', "");
Expect(0, 6911, '\p{inbalinese}', "");
Expect(1, 6911, '\p{^inbalinese}', "");
Expect(1, 6911, '\P{inbalinese}', "");
Expect(0, 6911, '\P{^inbalinese}', "");
Expect(1, 7039, '\p{	INBalinese}', "");
Expect(0, 7039, '\p{^	INBalinese}', "");
Expect(0, 7039, '\P{	INBalinese}', "");
Expect(1, 7039, '\P{^	INBalinese}', "");
Expect(0, 6911, '\p{	INBalinese}', "");
Expect(1, 6911, '\p{^	INBalinese}', "");
Expect(1, 6911, '\P{	INBalinese}', "");
Expect(0, 6911, '\P{^	INBalinese}', "");
Error('\p{/a/-_Deprecated}');
Error('\P{/a/-_Deprecated}');
Expect(1, 329, '\p{deprecated}', "");
Expect(0, 329, '\p{^deprecated}', "");
Expect(0, 329, '\P{deprecated}', "");
Expect(1, 329, '\P{^deprecated}', "");
Expect(0, 328, '\p{deprecated}', "");
Expect(1, 328, '\p{^deprecated}', "");
Expect(1, 328, '\P{deprecated}', "");
Expect(0, 328, '\P{^deprecated}', "");
Expect(1, 329, '\p{ Deprecated}', "");
Expect(0, 329, '\p{^ Deprecated}', "");
Expect(0, 329, '\P{ Deprecated}', "");
Expect(1, 329, '\P{^ Deprecated}', "");
Expect(0, 328, '\p{ Deprecated}', "");
Expect(1, 328, '\p{^ Deprecated}', "");
Expect(1, 328, '\P{ Deprecated}', "");
Expect(0, 328, '\P{^ Deprecated}', "");
Error('\p{_ Is:=Deprecated}');
Error('\P{_ Is:=Deprecated}');
Expect(1, 329, '\p{isdeprecated}', "");
Expect(0, 329, '\p{^isdeprecated}', "");
Expect(0, 329, '\P{isdeprecated}', "");
Expect(1, 329, '\P{^isdeprecated}', "");
Expect(0, 328, '\p{isdeprecated}', "");
Expect(1, 328, '\p{^isdeprecated}', "");
Expect(1, 328, '\P{isdeprecated}', "");
Expect(0, 328, '\P{^isdeprecated}', "");
Expect(1, 329, '\p{--Is_deprecated}', "");
Expect(0, 329, '\p{^--Is_deprecated}', "");
Expect(0, 329, '\P{--Is_deprecated}', "");
Expect(1, 329, '\P{^--Is_deprecated}', "");
Expect(0, 328, '\p{--Is_deprecated}', "");
Expect(1, 328, '\p{^--Is_deprecated}', "");
Expect(1, 328, '\P{--Is_deprecated}', "");
Expect(0, 328, '\P{^--Is_deprecated}', "");
Error('\p{/a/DEP}');
Error('\P{/a/DEP}');
Expect(1, 329, '\p{dep}', "");
Expect(0, 329, '\p{^dep}', "");
Expect(0, 329, '\P{dep}', "");
Expect(1, 329, '\P{^dep}', "");
Expect(0, 328, '\p{dep}', "");
Expect(1, 328, '\p{^dep}', "");
Expect(1, 328, '\P{dep}', "");
Expect(0, 328, '\P{^dep}', "");
Expect(1, 329, '\p{_-Dep}', "");
Expect(0, 329, '\p{^_-Dep}', "");
Expect(0, 329, '\P{_-Dep}', "");
Expect(1, 329, '\P{^_-Dep}', "");
Expect(0, 328, '\p{_-Dep}', "");
Expect(1, 328, '\p{^_-Dep}', "");
Expect(1, 328, '\P{_-Dep}', "");
Expect(0, 328, '\P{^_-Dep}', "");
Error('\p{_/a/ISDEP}');
Error('\P{_/a/ISDEP}');
Expect(1, 329, '\p{isdep}', "");
Expect(0, 329, '\p{^isdep}', "");
Expect(0, 329, '\P{isdep}', "");
Expect(1, 329, '\P{^isdep}', "");
Expect(0, 328, '\p{isdep}', "");
Expect(1, 328, '\p{^isdep}', "");
Expect(1, 328, '\P{isdep}', "");
Expect(0, 328, '\P{^isdep}', "");
Expect(1, 329, '\p{ _IS-DEP}', "");
Expect(0, 329, '\p{^ _IS-DEP}', "");
Expect(0, 329, '\P{ _IS-DEP}', "");
Expect(1, 329, '\P{^ _IS-DEP}', "");
Expect(0, 328, '\p{ _IS-DEP}', "");
Expect(1, 328, '\p{^ _IS-DEP}', "");
Expect(1, 328, '\P{ _IS-DEP}', "");
Expect(0, 328, '\P{^ _IS-DEP}', "");
Error('\p{	/a/Myanmar}');
Error('\P{	/a/Myanmar}');
Expect(1, 4255, '\p{myanmar}', "");
Expect(0, 4255, '\p{^myanmar}', "");
Expect(0, 4255, '\P{myanmar}', "");
Expect(1, 4255, '\P{^myanmar}', "");
Expect(0, 4095, '\p{myanmar}', "");
Expect(1, 4095, '\p{^myanmar}', "");
Expect(1, 4095, '\P{myanmar}', "");
Expect(0, 4095, '\P{^myanmar}', "");
Expect(1, 4255, '\p{ MYANMAR}', "");
Expect(0, 4255, '\p{^ MYANMAR}', "");
Expect(0, 4255, '\P{ MYANMAR}', "");
Expect(1, 4255, '\P{^ MYANMAR}', "");
Expect(0, 4095, '\p{ MYANMAR}', "");
Expect(1, 4095, '\p{^ MYANMAR}', "");
Expect(1, 4095, '\P{ MYANMAR}', "");
Expect(0, 4095, '\P{^ MYANMAR}', "");
Error('\p{	_Is	Myanmar:=}');
Error('\P{	_Is	Myanmar:=}');
Expect(1, 4255, '\p{ismyanmar}', "");
Expect(0, 4255, '\p{^ismyanmar}', "");
Expect(0, 4255, '\P{ismyanmar}', "");
Expect(1, 4255, '\P{^ismyanmar}', "");
Expect(0, 4095, '\p{ismyanmar}', "");
Expect(1, 4095, '\p{^ismyanmar}', "");
Expect(1, 4095, '\P{ismyanmar}', "");
Expect(0, 4095, '\P{^ismyanmar}', "");
Expect(1, 4255, '\p{-is-Myanmar}', "");
Expect(0, 4255, '\p{^-is-Myanmar}', "");
Expect(0, 4255, '\P{-is-Myanmar}', "");
Expect(1, 4255, '\P{^-is-Myanmar}', "");
Expect(0, 4095, '\p{-is-Myanmar}', "");
Expect(1, 4095, '\p{^-is-Myanmar}', "");
Expect(1, 4095, '\P{-is-Myanmar}', "");
Expect(0, 4095, '\P{^-is-Myanmar}', "");
Error('\p{_/a/Mymr}');
Error('\P{_/a/Mymr}');
Expect(1, 4255, '\p{mymr}', "");
Expect(0, 4255, '\p{^mymr}', "");
Expect(0, 4255, '\P{mymr}', "");
Expect(1, 4255, '\P{^mymr}', "");
Expect(0, 4095, '\p{mymr}', "");
Expect(1, 4095, '\p{^mymr}', "");
Expect(1, 4095, '\P{mymr}', "");
Expect(0, 4095, '\P{^mymr}', "");
Expect(1, 4255, '\p{ MYMR}', "");
Expect(0, 4255, '\p{^ MYMR}', "");
Expect(0, 4255, '\P{ MYMR}', "");
Expect(1, 4255, '\P{^ MYMR}', "");
Expect(0, 4095, '\p{ MYMR}', "");
Expect(1, 4095, '\p{^ MYMR}', "");
Expect(1, 4095, '\P{ MYMR}', "");
Expect(0, 4095, '\P{^ MYMR}', "");
Error('\p{ /a/IS_mymr}');
Error('\P{ /a/IS_mymr}');
Expect(1, 4255, '\p{ismymr}', "");
Expect(0, 4255, '\p{^ismymr}', "");
Expect(0, 4255, '\P{ismymr}', "");
Expect(1, 4255, '\P{^ismymr}', "");
Expect(0, 4095, '\p{ismymr}', "");
Expect(1, 4095, '\p{^ismymr}', "");
Expect(1, 4095, '\P{ismymr}', "");
Expect(0, 4095, '\P{^ismymr}', "");
Expect(1, 4255, '\p{	 IS Mymr}', "");
Expect(0, 4255, '\p{^	 IS Mymr}', "");
Expect(0, 4255, '\P{	 IS Mymr}', "");
Expect(1, 4255, '\P{^	 IS Mymr}', "");
Expect(0, 4095, '\p{	 IS Mymr}', "");
Expect(1, 4095, '\p{^	 IS Mymr}', "");
Expect(1, 4095, '\P{	 IS Mymr}', "");
Expect(0, 4095, '\P{^	 IS Mymr}', "");
Error('\p{:=InitialPunctuation}');
Error('\P{:=InitialPunctuation}');
Expect(1, 171, '\p{initialpunctuation}', "");
Expect(0, 171, '\p{^initialpunctuation}', "");
Expect(0, 171, '\P{initialpunctuation}', "");
Expect(1, 171, '\P{^initialpunctuation}', "");
Expect(0, 170, '\p{initialpunctuation}', "");
Expect(1, 170, '\p{^initialpunctuation}', "");
Expect(1, 170, '\P{initialpunctuation}', "");
Expect(0, 170, '\P{^initialpunctuation}', "");
Expect(1, 171, '\p{_-Initial_Punctuation}', "");
Expect(0, 171, '\p{^_-Initial_Punctuation}', "");
Expect(0, 171, '\P{_-Initial_Punctuation}', "");
Expect(1, 171, '\P{^_-Initial_Punctuation}', "");
Expect(0, 170, '\p{_-Initial_Punctuation}', "");
Expect(1, 170, '\p{^_-Initial_Punctuation}', "");
Expect(1, 170, '\P{_-Initial_Punctuation}', "");
Expect(0, 170, '\P{^_-Initial_Punctuation}', "");
Error('\p{ Is/a/Initial_Punctuation}');
Error('\P{ Is/a/Initial_Punctuation}');
Expect(1, 171, '\p{isinitialpunctuation}', "");
Expect(0, 171, '\p{^isinitialpunctuation}', "");
Expect(0, 171, '\P{isinitialpunctuation}', "");
Expect(1, 171, '\P{^isinitialpunctuation}', "");
Expect(0, 170, '\p{isinitialpunctuation}', "");
Expect(1, 170, '\p{^isinitialpunctuation}', "");
Expect(1, 170, '\P{isinitialpunctuation}', "");
Expect(0, 170, '\P{^isinitialpunctuation}', "");
Expect(1, 171, '\p{ 	Is	InitialPunctuation}', "");
Expect(0, 171, '\p{^ 	Is	InitialPunctuation}', "");
Expect(0, 171, '\P{ 	Is	InitialPunctuation}', "");
Expect(1, 171, '\P{^ 	Is	InitialPunctuation}', "");
Expect(0, 170, '\p{ 	Is	InitialPunctuation}', "");
Expect(1, 170, '\p{^ 	Is	InitialPunctuation}', "");
Expect(1, 170, '\P{ 	Is	InitialPunctuation}', "");
Expect(0, 170, '\P{^ 	Is	InitialPunctuation}', "");
Error('\p{ _Pi:=}');
Error('\P{ _Pi:=}');
Expect(1, 171, '\p{pi}', "");
Expect(0, 171, '\p{^pi}', "");
Expect(0, 171, '\P{pi}', "");
Expect(1, 171, '\P{^pi}', "");
Expect(0, 170, '\p{pi}', "");
Expect(1, 170, '\p{^pi}', "");
Expect(1, 170, '\P{pi}', "");
Expect(0, 170, '\P{^pi}', "");
Expect(1, 171, '\p{	 pi}', "");
Expect(0, 171, '\p{^	 pi}', "");
Expect(0, 171, '\P{	 pi}', "");
Expect(1, 171, '\P{^	 pi}', "");
Expect(0, 170, '\p{	 pi}', "");
Expect(1, 170, '\p{^	 pi}', "");
Expect(1, 170, '\P{	 pi}', "");
Expect(0, 170, '\P{^	 pi}', "");
Error('\p{	is Pi:=}');
Error('\P{	is Pi:=}');
Expect(1, 171, '\p{ispi}', "");
Expect(0, 171, '\p{^ispi}', "");
Expect(0, 171, '\P{ispi}', "");
Expect(1, 171, '\P{^ispi}', "");
Expect(0, 170, '\p{ispi}', "");
Expect(1, 170, '\p{^ispi}', "");
Expect(1, 170, '\P{ispi}', "");
Expect(0, 170, '\P{^ispi}', "");
Expect(1, 171, '\p{	_Is-Pi}', "");
Expect(0, 171, '\p{^	_Is-Pi}', "");
Expect(0, 171, '\P{	_Is-Pi}', "");
Expect(1, 171, '\P{^	_Is-Pi}', "");
Expect(0, 170, '\p{	_Is-Pi}', "");
Expect(1, 170, '\p{^	_Is-Pi}', "");
Expect(1, 170, '\P{	_Is-Pi}', "");
Expect(0, 170, '\P{^	_Is-Pi}', "");
Error('\p{-:=common}');
Error('\P{-:=common}');
Expect(1, 64, '\p{common}', "");
Expect(0, 64, '\p{^common}', "");
Expect(0, 64, '\P{common}', "");
Expect(1, 64, '\P{^common}', "");
Expect(0, 90, '\p{common}', "");
Expect(1, 90, '\p{^common}', "");
Expect(1, 90, '\P{common}', "");
Expect(0, 90, '\P{^common}', "");
Expect(1, 64, '\p{	COMMON}', "");
Expect(0, 64, '\p{^	COMMON}', "");
Expect(0, 64, '\P{	COMMON}', "");
Expect(1, 64, '\P{^	COMMON}', "");
Expect(0, 90, '\p{	COMMON}', "");
Expect(1, 90, '\p{^	COMMON}', "");
Expect(1, 90, '\P{	COMMON}', "");
Expect(0, 90, '\P{^	COMMON}', "");
Error('\p{/a/__IS-Common}');
Error('\P{/a/__IS-Common}');
Expect(1, 64, '\p{iscommon}', "");
Expect(0, 64, '\p{^iscommon}', "");
Expect(0, 64, '\P{iscommon}', "");
Expect(1, 64, '\P{^iscommon}', "");
Expect(0, 90, '\p{iscommon}', "");
Expect(1, 90, '\p{^iscommon}', "");
Expect(1, 90, '\P{iscommon}', "");
Expect(0, 90, '\P{^iscommon}', "");
Expect(1, 64, '\p{_ Is_Common}', "");
Expect(0, 64, '\p{^_ Is_Common}', "");
Expect(0, 64, '\P{_ Is_Common}', "");
Expect(1, 64, '\P{^_ Is_Common}', "");
Expect(0, 90, '\p{_ Is_Common}', "");
Expect(1, 90, '\p{^_ Is_Common}', "");
Expect(1, 90, '\P{_ Is_Common}', "");
Expect(0, 90, '\P{^_ Is_Common}', "");
Error('\p{	-Zyyy/a/}');
Error('\P{	-Zyyy/a/}');
Expect(1, 64, '\p{zyyy}', "");
Expect(0, 64, '\p{^zyyy}', "");
Expect(0, 64, '\P{zyyy}', "");
Expect(1, 64, '\P{^zyyy}', "");
Expect(0, 90, '\p{zyyy}', "");
Expect(1, 90, '\p{^zyyy}', "");
Expect(1, 90, '\P{zyyy}', "");
Expect(0, 90, '\P{^zyyy}', "");
Expect(1, 64, '\p{-Zyyy}', "");
Expect(0, 64, '\p{^-Zyyy}', "");
Expect(0, 64, '\P{-Zyyy}', "");
Expect(1, 64, '\P{^-Zyyy}', "");
Expect(0, 90, '\p{-Zyyy}', "");
Expect(1, 90, '\p{^-Zyyy}', "");
Expect(1, 90, '\P{-Zyyy}', "");
Expect(0, 90, '\P{^-Zyyy}', "");
Error('\p{-IS-zyyy/a/}');
Error('\P{-IS-zyyy/a/}');
Expect(1, 64, '\p{iszyyy}', "");
Expect(0, 64, '\p{^iszyyy}', "");
Expect(0, 64, '\P{iszyyy}', "");
Expect(1, 64, '\P{^iszyyy}', "");
Expect(0, 90, '\p{iszyyy}', "");
Expect(1, 90, '\p{^iszyyy}', "");
Expect(1, 90, '\P{iszyyy}', "");
Expect(0, 90, '\P{^iszyyy}', "");
Expect(1, 64, '\p{	Is_zyyy}', "");
Expect(0, 64, '\p{^	Is_zyyy}', "");
Expect(0, 64, '\P{	Is_zyyy}', "");
Expect(1, 64, '\P{^	Is_zyyy}', "");
Expect(0, 90, '\p{	Is_zyyy}', "");
Expect(1, 90, '\p{^	Is_zyyy}', "");
Expect(1, 90, '\P{	Is_zyyy}', "");
Expect(0, 90, '\P{^	Is_zyyy}', "");
Error('\p{/a/_Hanguljamo}');
Error('\P{/a/_Hanguljamo}');
Expect(1, 4607, '\p{hanguljamo}', "");
Expect(0, 4607, '\p{^hanguljamo}', "");
Expect(0, 4607, '\P{hanguljamo}', "");
Expect(1, 4607, '\P{^hanguljamo}', "");
Expect(0, 4351, '\p{hanguljamo}', "");
Expect(1, 4351, '\p{^hanguljamo}', "");
Expect(1, 4351, '\P{hanguljamo}', "");
Expect(0, 4351, '\P{^hanguljamo}', "");
Expect(1, 4607, '\p{_-HANGUL Jamo}', "");
Expect(0, 4607, '\p{^_-HANGUL Jamo}', "");
Expect(0, 4607, '\P{_-HANGUL Jamo}', "");
Expect(1, 4607, '\P{^_-HANGUL Jamo}', "");
Expect(0, 4351, '\p{_-HANGUL Jamo}', "");
Expect(1, 4351, '\p{^_-HANGUL Jamo}', "");
Expect(1, 4351, '\P{_-HANGUL Jamo}', "");
Expect(0, 4351, '\P{^_-HANGUL Jamo}', "");
Error('\p{_Is:=Hangul_JAMO}');
Error('\P{_Is:=Hangul_JAMO}');
Expect(1, 4607, '\p{ishanguljamo}', "");
Expect(0, 4607, '\p{^ishanguljamo}', "");
Expect(0, 4607, '\P{ishanguljamo}', "");
Expect(1, 4607, '\P{^ishanguljamo}', "");
Expect(0, 4351, '\p{ishanguljamo}', "");
Expect(1, 4351, '\p{^ishanguljamo}', "");
Expect(1, 4351, '\P{ishanguljamo}', "");
Expect(0, 4351, '\P{^ishanguljamo}', "");
Expect(1, 4607, '\p{ ISHANGUL-Jamo}', "");
Expect(0, 4607, '\p{^ ISHANGUL-Jamo}', "");
Expect(0, 4607, '\P{ ISHANGUL-Jamo}', "");
Expect(1, 4607, '\P{^ ISHANGUL-Jamo}', "");
Expect(0, 4351, '\p{ ISHANGUL-Jamo}', "");
Expect(1, 4351, '\p{^ ISHANGUL-Jamo}', "");
Expect(1, 4351, '\P{ ISHANGUL-Jamo}', "");
Expect(0, 4351, '\P{^ ISHANGUL-Jamo}', "");
Error('\p{In-HANGUL:=jamo}');
Error('\P{In-HANGUL:=jamo}');
Expect(1, 4607, '\p{inhanguljamo}', "");
Expect(0, 4607, '\p{^inhanguljamo}', "");
Expect(0, 4607, '\P{inhanguljamo}', "");
Expect(1, 4607, '\P{^inhanguljamo}', "");
Expect(0, 4351, '\p{inhanguljamo}', "");
Expect(1, 4351, '\p{^inhanguljamo}', "");
Expect(1, 4351, '\P{inhanguljamo}', "");
Expect(0, 4351, '\P{^inhanguljamo}', "");
Expect(1, 4607, '\p{-in-Hangul	Jamo}', "");
Expect(0, 4607, '\p{^-in-Hangul	Jamo}', "");
Expect(0, 4607, '\P{-in-Hangul	Jamo}', "");
Expect(1, 4607, '\P{^-in-Hangul	Jamo}', "");
Expect(0, 4351, '\p{-in-Hangul	Jamo}', "");
Expect(1, 4351, '\p{^-in-Hangul	Jamo}', "");
Expect(1, 4351, '\P{-in-Hangul	Jamo}', "");
Expect(0, 4351, '\P{^-in-Hangul	Jamo}', "");
Error('\p{-	Changes-whenLowercased/a/}');
Error('\P{-	Changes-whenLowercased/a/}');
Expect(1, 90, '\p{changeswhenlowercased}', "");
Expect(0, 90, '\p{^changeswhenlowercased}', "");
Expect(0, 90, '\P{changeswhenlowercased}', "");
Expect(1, 90, '\P{^changeswhenlowercased}', "");
Expect(0, 64, '\p{changeswhenlowercased}', "");
Expect(1, 64, '\p{^changeswhenlowercased}', "");
Expect(1, 64, '\P{changeswhenlowercased}', "");
Expect(0, 64, '\P{^changeswhenlowercased}', "");
Expect(1, 90, '\p{ -Changes WHEN-Lowercased}', "");
Expect(0, 90, '\p{^ -Changes WHEN-Lowercased}', "");
Expect(0, 90, '\P{ -Changes WHEN-Lowercased}', "");
Expect(1, 90, '\P{^ -Changes WHEN-Lowercased}', "");
Expect(0, 64, '\p{ -Changes WHEN-Lowercased}', "");
Expect(1, 64, '\p{^ -Changes WHEN-Lowercased}', "");
Expect(1, 64, '\P{ -Changes WHEN-Lowercased}', "");
Expect(0, 64, '\P{^ -Changes WHEN-Lowercased}', "");
Error('\p{ is-Changes/a/when-lowercased}');
Error('\P{ is-Changes/a/when-lowercased}');
Expect(1, 90, '\p{ischangeswhenlowercased}', "");
Expect(0, 90, '\p{^ischangeswhenlowercased}', "");
Expect(0, 90, '\P{ischangeswhenlowercased}', "");
Expect(1, 90, '\P{^ischangeswhenlowercased}', "");
Expect(0, 64, '\p{ischangeswhenlowercased}', "");
Expect(1, 64, '\p{^ischangeswhenlowercased}', "");
Expect(1, 64, '\P{ischangeswhenlowercased}', "");
Expect(0, 64, '\P{^ischangeswhenlowercased}', "");
Expect(1, 90, '\p{_	Ischanges-WhenLowercased}', "");
Expect(0, 90, '\p{^_	Ischanges-WhenLowercased}', "");
Expect(0, 90, '\P{_	Ischanges-WhenLowercased}', "");
Expect(1, 90, '\P{^_	Ischanges-WhenLowercased}', "");
Expect(0, 64, '\p{_	Ischanges-WhenLowercased}', "");
Expect(1, 64, '\p{^_	Ischanges-WhenLowercased}', "");
Expect(1, 64, '\P{_	Ischanges-WhenLowercased}', "");
Expect(0, 64, '\P{^_	Ischanges-WhenLowercased}', "");
Error('\p{/a/ CWL}');
Error('\P{/a/ CWL}');
Expect(1, 90, '\p{cwl}', "");
Expect(0, 90, '\p{^cwl}', "");
Expect(0, 90, '\P{cwl}', "");
Expect(1, 90, '\P{^cwl}', "");
Expect(0, 64, '\p{cwl}', "");
Expect(1, 64, '\p{^cwl}', "");
Expect(1, 64, '\P{cwl}', "");
Expect(0, 64, '\P{^cwl}', "");
Expect(1, 90, '\p{_ CWL}', "");
Expect(0, 90, '\p{^_ CWL}', "");
Expect(0, 90, '\P{_ CWL}', "");
Expect(1, 90, '\P{^_ CWL}', "");
Expect(0, 64, '\p{_ CWL}', "");
Expect(1, 64, '\p{^_ CWL}', "");
Expect(1, 64, '\P{_ CWL}', "");
Expect(0, 64, '\P{^_ CWL}', "");
Error('\p{_-Is/a/CWL}');
Error('\P{_-Is/a/CWL}');
Expect(1, 90, '\p{iscwl}', "");
Expect(0, 90, '\p{^iscwl}', "");
Expect(0, 90, '\P{iscwl}', "");
Expect(1, 90, '\P{^iscwl}', "");
Expect(0, 64, '\p{iscwl}', "");
Expect(1, 64, '\p{^iscwl}', "");
Expect(1, 64, '\P{iscwl}', "");
Expect(0, 64, '\P{^iscwl}', "");
Expect(1, 90, '\p{--is CWL}', "");
Expect(0, 90, '\p{^--is CWL}', "");
Expect(0, 90, '\P{--is CWL}', "");
Expect(1, 90, '\P{^--is CWL}', "");
Expect(0, 64, '\p{--is CWL}', "");
Expect(1, 64, '\p{^--is CWL}', "");
Expect(1, 64, '\P{--is CWL}', "");
Expect(0, 64, '\P{^--is CWL}', "");
Error('\p{	/a/Canadian-Aboriginal}');
Error('\P{	/a/Canadian-Aboriginal}');
Expect(1, 5759, '\p{canadianaboriginal}', "");
Expect(0, 5759, '\p{^canadianaboriginal}', "");
Expect(0, 5759, '\P{canadianaboriginal}', "");
Expect(1, 5759, '\P{^canadianaboriginal}', "");
Expect(0, 5119, '\p{canadianaboriginal}', "");
Expect(1, 5119, '\p{^canadianaboriginal}', "");
Expect(1, 5119, '\P{canadianaboriginal}', "");
Expect(0, 5119, '\P{^canadianaboriginal}', "");
Expect(1, 5759, '\p{_	Canadian Aboriginal}', "");
Expect(0, 5759, '\p{^_	Canadian Aboriginal}', "");
Expect(0, 5759, '\P{_	Canadian Aboriginal}', "");
Expect(1, 5759, '\P{^_	Canadian Aboriginal}', "");
Expect(0, 5119, '\p{_	Canadian Aboriginal}', "");
Expect(1, 5119, '\p{^_	Canadian Aboriginal}', "");
Expect(1, 5119, '\P{_	Canadian Aboriginal}', "");
Expect(0, 5119, '\P{^_	Canadian Aboriginal}', "");
Error('\p{-/a/is-canadianAboriginal}');
Error('\P{-/a/is-canadianAboriginal}');
Expect(1, 5759, '\p{iscanadianaboriginal}', "");
Expect(0, 5759, '\p{^iscanadianaboriginal}', "");
Expect(0, 5759, '\P{iscanadianaboriginal}', "");
Expect(1, 5759, '\P{^iscanadianaboriginal}', "");
Expect(0, 5119, '\p{iscanadianaboriginal}', "");
Expect(1, 5119, '\p{^iscanadianaboriginal}', "");
Expect(1, 5119, '\P{iscanadianaboriginal}', "");
Expect(0, 5119, '\P{^iscanadianaboriginal}', "");
Expect(1, 5759, '\p{_Is CANADIAN	ABORIGINAL}', "");
Expect(0, 5759, '\p{^_Is CANADIAN	ABORIGINAL}', "");
Expect(0, 5759, '\P{_Is CANADIAN	ABORIGINAL}', "");
Expect(1, 5759, '\P{^_Is CANADIAN	ABORIGINAL}', "");
Expect(0, 5119, '\p{_Is CANADIAN	ABORIGINAL}', "");
Expect(1, 5119, '\p{^_Is CANADIAN	ABORIGINAL}', "");
Expect(1, 5119, '\P{_Is CANADIAN	ABORIGINAL}', "");
Expect(0, 5119, '\P{^_Is CANADIAN	ABORIGINAL}', "");
Error('\p{:=_Cans}');
Error('\P{:=_Cans}');
Expect(1, 5759, '\p{cans}', "");
Expect(0, 5759, '\p{^cans}', "");
Expect(0, 5759, '\P{cans}', "");
Expect(1, 5759, '\P{^cans}', "");
Expect(0, 5119, '\p{cans}', "");
Expect(1, 5119, '\p{^cans}', "");
Expect(1, 5119, '\P{cans}', "");
Expect(0, 5119, '\P{^cans}', "");
Expect(1, 5759, '\p{	Cans}', "");
Expect(0, 5759, '\p{^	Cans}', "");
Expect(0, 5759, '\P{	Cans}', "");
Expect(1, 5759, '\P{^	Cans}', "");
Expect(0, 5119, '\p{	Cans}', "");
Expect(1, 5119, '\p{^	Cans}', "");
Expect(1, 5119, '\P{	Cans}', "");
Expect(0, 5119, '\P{^	Cans}', "");
Error('\p{ ISCans:=}');
Error('\P{ ISCans:=}');
Expect(1, 5759, '\p{iscans}', "");
Expect(0, 5759, '\p{^iscans}', "");
Expect(0, 5759, '\P{iscans}', "");
Expect(1, 5759, '\P{^iscans}', "");
Expect(0, 5119, '\p{iscans}', "");
Expect(1, 5119, '\p{^iscans}', "");
Expect(1, 5119, '\P{iscans}', "");
Expect(0, 5119, '\P{^iscans}', "");
Expect(1, 5759, '\p{	Iscans}', "");
Expect(0, 5759, '\p{^	Iscans}', "");
Expect(0, 5759, '\P{	Iscans}', "");
Expect(1, 5759, '\P{^	Iscans}', "");
Expect(0, 5119, '\p{	Iscans}', "");
Expect(1, 5119, '\p{^	Iscans}', "");
Expect(1, 5119, '\P{	Iscans}', "");
Expect(0, 5119, '\P{^	Iscans}', "");
Error('\p{/a/_	pattern_Syntax}');
Error('\P{/a/_	pattern_Syntax}');
Expect(1, 47, '\p{patternsyntax}', "");
Expect(0, 47, '\p{^patternsyntax}', "");
Expect(0, 47, '\P{patternsyntax}', "");
Expect(1, 47, '\P{^patternsyntax}', "");
Expect(0, 32, '\p{patternsyntax}', "");
Expect(1, 32, '\p{^patternsyntax}', "");
Expect(1, 32, '\P{patternsyntax}', "");
Expect(0, 32, '\P{^patternsyntax}', "");
Expect(1, 47, '\p{ -Pattern-Syntax}', "");
Expect(0, 47, '\p{^ -Pattern-Syntax}', "");
Expect(0, 47, '\P{ -Pattern-Syntax}', "");
Expect(1, 47, '\P{^ -Pattern-Syntax}', "");
Expect(0, 32, '\p{ -Pattern-Syntax}', "");
Expect(1, 32, '\p{^ -Pattern-Syntax}', "");
Expect(1, 32, '\P{ -Pattern-Syntax}', "");
Expect(0, 32, '\P{^ -Pattern-Syntax}', "");
Error('\p{  IsPATTERN/a/Syntax}');
Error('\P{  IsPATTERN/a/Syntax}');
Expect(1, 47, '\p{ispatternsyntax}', "");
Expect(0, 47, '\p{^ispatternsyntax}', "");
Expect(0, 47, '\P{ispatternsyntax}', "");
Expect(1, 47, '\P{^ispatternsyntax}', "");
Expect(0, 32, '\p{ispatternsyntax}', "");
Expect(1, 32, '\p{^ispatternsyntax}', "");
Expect(1, 32, '\P{ispatternsyntax}', "");
Expect(0, 32, '\P{^ispatternsyntax}', "");
Expect(1, 47, '\p{-Is-Pattern syntax}', "");
Expect(0, 47, '\p{^-Is-Pattern syntax}', "");
Expect(0, 47, '\P{-Is-Pattern syntax}', "");
Expect(1, 47, '\P{^-Is-Pattern syntax}', "");
Expect(0, 32, '\p{-Is-Pattern syntax}', "");
Expect(1, 32, '\p{^-Is-Pattern syntax}', "");
Expect(1, 32, '\P{-Is-Pattern syntax}', "");
Expect(0, 32, '\P{^-Is-Pattern syntax}', "");
Error('\p{_pat/a/syn}');
Error('\P{_pat/a/syn}');
Expect(1, 47, '\p{patsyn}', "");
Expect(0, 47, '\p{^patsyn}', "");
Expect(0, 47, '\P{patsyn}', "");
Expect(1, 47, '\P{^patsyn}', "");
Expect(0, 32, '\p{patsyn}', "");
Expect(1, 32, '\p{^patsyn}', "");
Expect(1, 32, '\P{patsyn}', "");
Expect(0, 32, '\P{^patsyn}', "");
Expect(1, 47, '\p{_	Pat-Syn}', "");
Expect(0, 47, '\p{^_	Pat-Syn}', "");
Expect(0, 47, '\P{_	Pat-Syn}', "");
Expect(1, 47, '\P{^_	Pat-Syn}', "");
Expect(0, 32, '\p{_	Pat-Syn}', "");
Expect(1, 32, '\p{^_	Pat-Syn}', "");
Expect(1, 32, '\P{_	Pat-Syn}', "");
Expect(0, 32, '\P{^_	Pat-Syn}', "");
Error('\p{ /a/Is_PATsyn}');
Error('\P{ /a/Is_PATsyn}');
Expect(1, 47, '\p{ispatsyn}', "");
Expect(0, 47, '\p{^ispatsyn}', "");
Expect(0, 47, '\P{ispatsyn}', "");
Expect(1, 47, '\P{^ispatsyn}', "");
Expect(0, 32, '\p{ispatsyn}', "");
Expect(1, 32, '\p{^ispatsyn}', "");
Expect(1, 32, '\P{ispatsyn}', "");
Expect(0, 32, '\P{^ispatsyn}', "");
Expect(1, 47, '\p{	IS-PatSYN}', "");
Expect(0, 47, '\p{^	IS-PatSYN}', "");
Expect(0, 47, '\P{	IS-PatSYN}', "");
Expect(1, 47, '\P{^	IS-PatSYN}', "");
Expect(0, 32, '\p{	IS-PatSYN}', "");
Expect(1, 32, '\p{^	IS-PatSYN}', "");
Expect(1, 32, '\P{	IS-PatSYN}', "");
Expect(0, 32, '\P{^	IS-PatSYN}', "");
Error('\p{_	Other/a/}');
Error('\P{_	Other/a/}');
Expect(1, 31, '\p{other}', "");
Expect(0, 31, '\p{^other}', "");
Expect(0, 31, '\P{other}', "");
Expect(1, 31, '\P{^other}', "");
Expect(0, 126, '\p{other}', "");
Expect(1, 126, '\p{^other}', "");
Expect(1, 126, '\P{other}', "");
Expect(0, 126, '\P{^other}', "");
Expect(1, 31, '\p{	 OTHER}', "");
Expect(0, 31, '\p{^	 OTHER}', "");
Expect(0, 31, '\P{	 OTHER}', "");
Expect(1, 31, '\P{^	 OTHER}', "");
Expect(0, 126, '\p{	 OTHER}', "");
Expect(1, 126, '\p{^	 OTHER}', "");
Expect(1, 126, '\P{	 OTHER}', "");
Expect(0, 126, '\P{^	 OTHER}', "");
Error('\p{/a/ Is OTHER}');
Error('\P{/a/ Is OTHER}');
Expect(1, 31, '\p{isother}', "");
Expect(0, 31, '\p{^isother}', "");
Expect(0, 31, '\P{isother}', "");
Expect(1, 31, '\P{^isother}', "");
Expect(0, 126, '\p{isother}', "");
Expect(1, 126, '\p{^isother}', "");
Expect(1, 126, '\P{isother}', "");
Expect(0, 126, '\P{^isother}', "");
Expect(1, 31, '\p{--IS Other}', "");
Expect(0, 31, '\p{^--IS Other}', "");
Expect(0, 31, '\P{--IS Other}', "");
Expect(1, 31, '\P{^--IS Other}', "");
Expect(0, 126, '\p{--IS Other}', "");
Expect(1, 126, '\p{^--IS Other}', "");
Expect(1, 126, '\P{--IS Other}', "");
Expect(0, 126, '\P{^--IS Other}', "");
Error('\p{__c:=}');
Error('\P{__c:=}');
Expect(1, 31, '\p{c}', "");
Expect(0, 31, '\p{^c}', "");
Expect(0, 31, '\P{c}', "");
Expect(1, 31, '\P{^c}', "");
Expect(0, 126, '\p{c}', "");
Expect(1, 126, '\p{^c}', "");
Expect(1, 126, '\P{c}', "");
Expect(0, 126, '\P{^c}', "");
Expect(1, 31, '\p{		C}', "");
Expect(0, 31, '\p{^		C}', "");
Expect(0, 31, '\P{		C}', "");
Expect(1, 31, '\P{^		C}', "");
Expect(0, 126, '\p{		C}', "");
Expect(1, 126, '\p{^		C}', "");
Expect(1, 126, '\P{		C}', "");
Expect(0, 126, '\P{^		C}', "");
Error('\p{:=_	Is_c}');
Error('\P{:=_	Is_c}');
Expect(1, 31, '\p{isc}', "");
Expect(0, 31, '\p{^isc}', "");
Expect(0, 31, '\P{isc}', "");
Expect(1, 31, '\P{^isc}', "");
Expect(0, 126, '\p{isc}', "");
Expect(1, 126, '\p{^isc}', "");
Expect(1, 126, '\P{isc}', "");
Expect(0, 126, '\P{^isc}', "");
Expect(1, 31, '\p{		is-C}', "");
Expect(0, 31, '\p{^		is-C}', "");
Expect(0, 31, '\P{		is-C}', "");
Expect(1, 31, '\P{^		is-C}', "");
Expect(0, 126, '\p{		is-C}', "");
Expect(1, 126, '\p{^		is-C}', "");
Expect(1, 126, '\P{		is-C}', "");
Expect(0, 126, '\P{^		is-C}', "");
Error('\p{/a/- VARIATION-Selector}');
Error('\P{/a/- VARIATION-Selector}');
Expect(1, 6157, '\p{variationselector}', "");
Expect(0, 6157, '\p{^variationselector}', "");
Expect(0, 6157, '\P{variationselector}', "");
Expect(1, 6157, '\P{^variationselector}', "");
Expect(0, 6154, '\p{variationselector}', "");
Expect(1, 6154, '\p{^variationselector}', "");
Expect(1, 6154, '\P{variationselector}', "");
Expect(0, 6154, '\P{^variationselector}', "");
Expect(1, 6157, '\p{ _Variation-selector}', "");
Expect(0, 6157, '\p{^ _Variation-selector}', "");
Expect(0, 6157, '\P{ _Variation-selector}', "");
Expect(1, 6157, '\P{^ _Variation-selector}', "");
Expect(0, 6154, '\p{ _Variation-selector}', "");
Expect(1, 6154, '\p{^ _Variation-selector}', "");
Expect(1, 6154, '\P{ _Variation-selector}', "");
Expect(0, 6154, '\P{^ _Variation-selector}', "");
Error('\p{	 IS-variation-SELECTOR:=}');
Error('\P{	 IS-variation-SELECTOR:=}');
Expect(1, 6157, '\p{isvariationselector}', "");
Expect(0, 6157, '\p{^isvariationselector}', "");
Expect(0, 6157, '\P{isvariationselector}', "");
Expect(1, 6157, '\P{^isvariationselector}', "");
Expect(0, 6154, '\p{isvariationselector}', "");
Expect(1, 6154, '\p{^isvariationselector}', "");
Expect(1, 6154, '\P{isvariationselector}', "");
Expect(0, 6154, '\P{^isvariationselector}', "");
Expect(1, 6157, '\p{	Is VARIATION selector}', "");
Expect(0, 6157, '\p{^	Is VARIATION selector}', "");
Expect(0, 6157, '\P{	Is VARIATION selector}', "");
Expect(1, 6157, '\P{^	Is VARIATION selector}', "");
Expect(0, 6154, '\p{	Is VARIATION selector}', "");
Expect(1, 6154, '\p{^	Is VARIATION selector}', "");
Expect(1, 6154, '\P{	Is VARIATION selector}', "");
Expect(0, 6154, '\P{^	Is VARIATION selector}', "");
Error('\p{:=vs}');
Error('\P{:=vs}');
Expect(1, 6157, '\p{vs}', "");
Expect(0, 6157, '\p{^vs}', "");
Expect(0, 6157, '\P{vs}', "");
Expect(1, 6157, '\P{^vs}', "");
Expect(0, 6154, '\p{vs}', "");
Expect(1, 6154, '\p{^vs}', "");
Expect(1, 6154, '\P{vs}', "");
Expect(0, 6154, '\P{^vs}', "");
Expect(1, 6157, '\p{ -vs}', "");
Expect(0, 6157, '\p{^ -vs}', "");
Expect(0, 6157, '\P{ -vs}', "");
Expect(1, 6157, '\P{^ -vs}', "");
Expect(0, 6154, '\p{ -vs}', "");
Expect(1, 6154, '\p{^ -vs}', "");
Expect(1, 6154, '\P{ -vs}', "");
Expect(0, 6154, '\P{^ -vs}', "");
Error('\p{:=ISVS}');
Error('\P{:=ISVS}');
Expect(1, 6157, '\p{isvs}', "");
Expect(0, 6157, '\p{^isvs}', "");
Expect(0, 6157, '\P{isvs}', "");
Expect(1, 6157, '\P{^isvs}', "");
Expect(0, 6154, '\p{isvs}', "");
Expect(1, 6154, '\p{^isvs}', "");
Expect(1, 6154, '\P{isvs}', "");
Expect(0, 6154, '\P{^isvs}', "");
Expect(1, 6157, '\p{ _IS-VS}', "");
Expect(0, 6157, '\p{^ _IS-VS}', "");
Expect(0, 6157, '\P{ _IS-VS}', "");
Expect(1, 6157, '\P{^ _IS-VS}', "");
Expect(0, 6154, '\p{ _IS-VS}', "");
Expect(1, 6154, '\p{^ _IS-VS}', "");
Expect(1, 6154, '\P{ _IS-VS}', "");
Expect(0, 6154, '\P{^ _IS-VS}', "");
Error('\p{--cypriot-syllabary:=}');
Error('\P{--cypriot-syllabary:=}');
Expect(1, 67647, '\p{cypriotsyllabary}', "");
Expect(0, 67647, '\p{^cypriotsyllabary}', "");
Expect(0, 67647, '\P{cypriotsyllabary}', "");
Expect(1, 67647, '\P{^cypriotsyllabary}', "");
Expect(0, 67583, '\p{cypriotsyllabary}', "");
Expect(1, 67583, '\p{^cypriotsyllabary}', "");
Expect(1, 67583, '\P{cypriotsyllabary}', "");
Expect(0, 67583, '\P{^cypriotsyllabary}', "");
Expect(1, 67647, '\p{-	cypriot syllabary}', "");
Expect(0, 67647, '\p{^-	cypriot syllabary}', "");
Expect(0, 67647, '\P{-	cypriot syllabary}', "");
Expect(1, 67647, '\P{^-	cypriot syllabary}', "");
Expect(0, 67583, '\p{-	cypriot syllabary}', "");
Expect(1, 67583, '\p{^-	cypriot syllabary}', "");
Expect(1, 67583, '\P{-	cypriot syllabary}', "");
Expect(0, 67583, '\P{^-	cypriot syllabary}', "");
Error('\p{-IS/a/CYPRIOT Syllabary}');
Error('\P{-IS/a/CYPRIOT Syllabary}');
Expect(1, 67647, '\p{iscypriotsyllabary}', "");
Expect(0, 67647, '\p{^iscypriotsyllabary}', "");
Expect(0, 67647, '\P{iscypriotsyllabary}', "");
Expect(1, 67647, '\P{^iscypriotsyllabary}', "");
Expect(0, 67583, '\p{iscypriotsyllabary}', "");
Expect(1, 67583, '\p{^iscypriotsyllabary}', "");
Expect(1, 67583, '\P{iscypriotsyllabary}', "");
Expect(0, 67583, '\P{^iscypriotsyllabary}', "");
Expect(1, 67647, '\p{		is CYPRIOT syllabary}', "");
Expect(0, 67647, '\p{^		is CYPRIOT syllabary}', "");
Expect(0, 67647, '\P{		is CYPRIOT syllabary}', "");
Expect(1, 67647, '\P{^		is CYPRIOT syllabary}', "");
Expect(0, 67583, '\p{		is CYPRIOT syllabary}', "");
Expect(1, 67583, '\p{^		is CYPRIOT syllabary}', "");
Expect(1, 67583, '\P{		is CYPRIOT syllabary}', "");
Expect(0, 67583, '\P{^		is CYPRIOT syllabary}', "");
Error('\p{/a/	_IN_cypriot_Syllabary}');
Error('\P{/a/	_IN_cypriot_Syllabary}');
Expect(1, 67647, '\p{incypriotsyllabary}', "");
Expect(0, 67647, '\p{^incypriotsyllabary}', "");
Expect(0, 67647, '\P{incypriotsyllabary}', "");
Expect(1, 67647, '\P{^incypriotsyllabary}', "");
Expect(0, 67583, '\p{incypriotsyllabary}', "");
Expect(1, 67583, '\p{^incypriotsyllabary}', "");
Expect(1, 67583, '\P{incypriotsyllabary}', "");
Expect(0, 67583, '\P{^incypriotsyllabary}', "");
Expect(1, 67647, '\p{_	In cypriot	syllabary}', "");
Expect(0, 67647, '\p{^_	In cypriot	syllabary}', "");
Expect(0, 67647, '\P{_	In cypriot	syllabary}', "");
Expect(1, 67647, '\P{^_	In cypriot	syllabary}', "");
Expect(0, 67583, '\p{_	In cypriot	syllabary}', "");
Expect(1, 67583, '\p{^_	In cypriot	syllabary}', "");
Expect(1, 67583, '\P{_	In cypriot	syllabary}', "");
Expect(0, 67583, '\P{^_	In cypriot	syllabary}', "");
Error('\p{_/a/Coptic}');
Error('\P{_/a/Coptic}');
Expect(1, 1007, '\p{coptic}', "");
Expect(0, 1007, '\p{^coptic}', "");
Expect(0, 1007, '\P{coptic}', "");
Expect(1, 1007, '\P{^coptic}', "");
Expect(0, 993, '\p{coptic}', "");
Expect(1, 993, '\p{^coptic}', "");
Expect(1, 993, '\P{coptic}', "");
Expect(0, 993, '\P{^coptic}', "");
Expect(1, 1007, '\p{	COPTIC}', "");
Expect(0, 1007, '\p{^	COPTIC}', "");
Expect(0, 1007, '\P{	COPTIC}', "");
Expect(1, 1007, '\P{^	COPTIC}', "");
Expect(0, 993, '\p{	COPTIC}', "");
Expect(1, 993, '\p{^	COPTIC}', "");
Expect(1, 993, '\P{	COPTIC}', "");
Expect(0, 993, '\P{^	COPTIC}', "");
Error('\p{ :=Is-Coptic}');
Error('\P{ :=Is-Coptic}');
Expect(1, 1007, '\p{iscoptic}', "");
Expect(0, 1007, '\p{^iscoptic}', "");
Expect(0, 1007, '\P{iscoptic}', "");
Expect(1, 1007, '\P{^iscoptic}', "");
Expect(0, 993, '\p{iscoptic}', "");
Expect(1, 993, '\p{^iscoptic}', "");
Expect(1, 993, '\P{iscoptic}', "");
Expect(0, 993, '\P{^iscoptic}', "");
Expect(1, 1007, '\p{--Is	Coptic}', "");
Expect(0, 1007, '\p{^--Is	Coptic}', "");
Expect(0, 1007, '\P{--Is	Coptic}', "");
Expect(1, 1007, '\P{^--Is	Coptic}', "");
Expect(0, 993, '\p{--Is	Coptic}', "");
Expect(1, 993, '\p{^--Is	Coptic}', "");
Expect(1, 993, '\P{--Is	Coptic}', "");
Expect(0, 993, '\P{^--Is	Coptic}', "");
Error('\p{:=copt}');
Error('\P{:=copt}');
Expect(1, 1007, '\p{copt}', "");
Expect(0, 1007, '\p{^copt}', "");
Expect(0, 1007, '\P{copt}', "");
Expect(1, 1007, '\P{^copt}', "");
Expect(0, 993, '\p{copt}', "");
Expect(1, 993, '\p{^copt}', "");
Expect(1, 993, '\P{copt}', "");
Expect(0, 993, '\P{^copt}', "");
Expect(1, 1007, '\p{ copt}', "");
Expect(0, 1007, '\p{^ copt}', "");
Expect(0, 1007, '\P{ copt}', "");
Expect(1, 1007, '\P{^ copt}', "");
Expect(0, 993, '\p{ copt}', "");
Expect(1, 993, '\p{^ copt}', "");
Expect(1, 993, '\P{ copt}', "");
Expect(0, 993, '\P{^ copt}', "");
Error('\p{ Is:=COPT}');
Error('\P{ Is:=COPT}');
Expect(1, 1007, '\p{iscopt}', "");
Expect(0, 1007, '\p{^iscopt}', "");
Expect(0, 1007, '\P{iscopt}', "");
Expect(1, 1007, '\P{^iscopt}', "");
Expect(0, 993, '\p{iscopt}', "");
Expect(1, 993, '\p{^iscopt}', "");
Expect(1, 993, '\P{iscopt}', "");
Expect(0, 993, '\P{^iscopt}', "");
Expect(1, 1007, '\p{Is	copt}', "");
Expect(0, 1007, '\p{^Is	copt}', "");
Expect(0, 1007, '\P{Is	copt}', "");
Expect(1, 1007, '\P{^Is	copt}', "");
Expect(0, 993, '\p{Is	copt}', "");
Expect(1, 993, '\p{^Is	copt}', "");
Expect(1, 993, '\P{Is	copt}', "");
Expect(0, 993, '\P{^Is	copt}', "");
Error('\p{ :=qaac}');
Error('\P{ :=qaac}');
Expect(1, 1007, '\p{qaac}', "");
Expect(0, 1007, '\p{^qaac}', "");
Expect(0, 1007, '\P{qaac}', "");
Expect(1, 1007, '\P{^qaac}', "");
Expect(0, 993, '\p{qaac}', "");
Expect(1, 993, '\p{^qaac}', "");
Expect(1, 993, '\P{qaac}', "");
Expect(0, 993, '\P{^qaac}', "");
Expect(1, 1007, '\p{  Qaac}', "");
Expect(0, 1007, '\p{^  Qaac}', "");
Expect(0, 1007, '\P{  Qaac}', "");
Expect(1, 1007, '\P{^  Qaac}', "");
Expect(0, 993, '\p{  Qaac}', "");
Expect(1, 993, '\p{^  Qaac}', "");
Expect(1, 993, '\P{  Qaac}', "");
Expect(0, 993, '\P{^  Qaac}', "");
Error('\p{:=_is Qaac}');
Error('\P{:=_is Qaac}');
Expect(1, 1007, '\p{isqaac}', "");
Expect(0, 1007, '\p{^isqaac}', "");
Expect(0, 1007, '\P{isqaac}', "");
Expect(1, 1007, '\P{^isqaac}', "");
Expect(0, 993, '\p{isqaac}', "");
Expect(1, 993, '\p{^isqaac}', "");
Expect(1, 993, '\P{isqaac}', "");
Expect(0, 993, '\P{^isqaac}', "");
Expect(1, 1007, '\p{	Is	qaac}', "");
Expect(0, 1007, '\p{^	Is	qaac}', "");
Expect(0, 1007, '\P{	Is	qaac}', "");
Expect(1, 1007, '\P{^	Is	qaac}', "");
Expect(0, 993, '\p{	Is	qaac}', "");
Expect(1, 993, '\p{^	Is	qaac}', "");
Expect(1, 993, '\P{	Is	qaac}', "");
Expect(0, 993, '\P{^	Is	qaac}', "");
Error('\p{  SUPPLEMENTAL arrows/a/B}');
Error('\P{  SUPPLEMENTAL arrows/a/B}');
Expect(1, 10623, '\p{supplementalarrowsb}', "");
Expect(0, 10623, '\p{^supplementalarrowsb}', "");
Expect(0, 10623, '\P{supplementalarrowsb}', "");
Expect(1, 10623, '\P{^supplementalarrowsb}', "");
Expect(0, 10495, '\p{supplementalarrowsb}', "");
Expect(1, 10495, '\p{^supplementalarrowsb}', "");
Expect(1, 10495, '\P{supplementalarrowsb}', "");
Expect(0, 10495, '\P{^supplementalarrowsb}', "");
Expect(1, 10623, '\p{__supplementalArrows-B}', "");
Expect(0, 10623, '\p{^__supplementalArrows-B}', "");
Expect(0, 10623, '\P{__supplementalArrows-B}', "");
Expect(1, 10623, '\P{^__supplementalArrows-B}', "");
Expect(0, 10495, '\p{__supplementalArrows-B}', "");
Expect(1, 10495, '\p{^__supplementalArrows-B}', "");
Expect(1, 10495, '\P{__supplementalArrows-B}', "");
Expect(0, 10495, '\P{^__supplementalArrows-B}', "");
Error('\p{/a/_ Is_SupplementalArrows B}');
Error('\P{/a/_ Is_SupplementalArrows B}');
Expect(1, 10623, '\p{issupplementalarrowsb}', "");
Expect(0, 10623, '\p{^issupplementalarrowsb}', "");
Expect(0, 10623, '\P{issupplementalarrowsb}', "");
Expect(1, 10623, '\P{^issupplementalarrowsb}', "");
Expect(0, 10495, '\p{issupplementalarrowsb}', "");
Expect(1, 10495, '\p{^issupplementalarrowsb}', "");
Expect(1, 10495, '\P{issupplementalarrowsb}', "");
Expect(0, 10495, '\P{^issupplementalarrowsb}', "");
Expect(1, 10623, '\p{	Is SUPPLEMENTALARROWS	B}', "");
Expect(0, 10623, '\p{^	Is SUPPLEMENTALARROWS	B}', "");
Expect(0, 10623, '\P{	Is SUPPLEMENTALARROWS	B}', "");
Expect(1, 10623, '\P{^	Is SUPPLEMENTALARROWS	B}', "");
Expect(0, 10495, '\p{	Is SUPPLEMENTALARROWS	B}', "");
Expect(1, 10495, '\p{^	Is SUPPLEMENTALARROWS	B}', "");
Expect(1, 10495, '\P{	Is SUPPLEMENTALARROWS	B}', "");
Expect(0, 10495, '\P{^	Is SUPPLEMENTALARROWS	B}', "");
Error('\p{_/a/In_Supplemental	arrowsb}');
Error('\P{_/a/In_Supplemental	arrowsb}');
Expect(1, 10623, '\p{insupplementalarrowsb}', "");
Expect(0, 10623, '\p{^insupplementalarrowsb}', "");
Expect(0, 10623, '\P{insupplementalarrowsb}', "");
Expect(1, 10623, '\P{^insupplementalarrowsb}', "");
Expect(0, 10495, '\p{insupplementalarrowsb}', "");
Expect(1, 10495, '\p{^insupplementalarrowsb}', "");
Expect(1, 10495, '\P{insupplementalarrowsb}', "");
Expect(0, 10495, '\P{^insupplementalarrowsb}', "");
Expect(1, 10623, '\p{ _In_supplementalArrows	B}', "");
Expect(0, 10623, '\p{^ _In_supplementalArrows	B}', "");
Expect(0, 10623, '\P{ _In_supplementalArrows	B}', "");
Expect(1, 10623, '\P{^ _In_supplementalArrows	B}', "");
Expect(0, 10495, '\p{ _In_supplementalArrows	B}', "");
Expect(1, 10495, '\p{^ _In_supplementalArrows	B}', "");
Expect(1, 10495, '\P{ _In_supplementalArrows	B}', "");
Expect(0, 10495, '\P{^ _In_supplementalArrows	B}', "");
Error('\p{Expands_On_NFC}');
Error('\P{Expands_On_NFC}');
Error('\p{Is_Expands_On_NFC}');
Error('\P{Is_Expands_On_NFC}');
Error('\p{XO_NFC}');
Error('\P{XO_NFC}');
Error('\p{Is_XO_NFC}');
Error('\P{Is_XO_NFC}');
Error('\p{-/a/Inherited}');
Error('\P{-/a/Inherited}');
Expect(1, 879, '\p{inherited}', "");
Expect(0, 879, '\p{^inherited}', "");
Expect(0, 879, '\P{inherited}', "");
Expect(1, 879, '\P{^inherited}', "");
Expect(0, 767, '\p{inherited}', "");
Expect(1, 767, '\p{^inherited}', "");
Expect(1, 767, '\P{inherited}', "");
Expect(0, 767, '\P{^inherited}', "");
Expect(1, 879, '\p{_Inherited}', "");
Expect(0, 879, '\p{^_Inherited}', "");
Expect(0, 879, '\P{_Inherited}', "");
Expect(1, 879, '\P{^_Inherited}', "");
Expect(0, 767, '\p{_Inherited}', "");
Expect(1, 767, '\p{^_Inherited}', "");
Expect(1, 767, '\P{_Inherited}', "");
Expect(0, 767, '\P{^_Inherited}', "");
Error('\p{-Is Inherited:=}');
Error('\P{-Is Inherited:=}');
Expect(1, 879, '\p{isinherited}', "");
Expect(0, 879, '\p{^isinherited}', "");
Expect(0, 879, '\P{isinherited}', "");
Expect(1, 879, '\P{^isinherited}', "");
Expect(0, 767, '\p{isinherited}', "");
Expect(1, 767, '\p{^isinherited}', "");
Expect(1, 767, '\P{isinherited}', "");
Expect(0, 767, '\P{^isinherited}', "");
Expect(1, 879, '\p{	-Is Inherited}', "");
Expect(0, 879, '\p{^	-Is Inherited}', "");
Expect(0, 879, '\P{	-Is Inherited}', "");
Expect(1, 879, '\P{^	-Is Inherited}', "");
Expect(0, 767, '\p{	-Is Inherited}', "");
Expect(1, 767, '\p{^	-Is Inherited}', "");
Expect(1, 767, '\P{	-Is Inherited}', "");
Expect(0, 767, '\P{^	-Is Inherited}', "");
Error('\p{:=Zinh}');
Error('\P{:=Zinh}');
Expect(1, 879, '\p{zinh}', "");
Expect(0, 879, '\p{^zinh}', "");
Expect(0, 879, '\P{zinh}', "");
Expect(1, 879, '\P{^zinh}', "");
Expect(0, 767, '\p{zinh}', "");
Expect(1, 767, '\p{^zinh}', "");
Expect(1, 767, '\P{zinh}', "");
Expect(0, 767, '\P{^zinh}', "");
Expect(1, 879, '\p{-zinh}', "");
Expect(0, 879, '\p{^-zinh}', "");
Expect(0, 879, '\P{-zinh}', "");
Expect(1, 879, '\P{^-zinh}', "");
Expect(0, 767, '\p{-zinh}', "");
Expect(1, 767, '\p{^-zinh}', "");
Expect(1, 767, '\P{-zinh}', "");
Expect(0, 767, '\P{^-zinh}', "");
Error('\p{:=iszinh}');
Error('\P{:=iszinh}');
Expect(1, 879, '\p{iszinh}', "");
Expect(0, 879, '\p{^iszinh}', "");
Expect(0, 879, '\P{iszinh}', "");
Expect(1, 879, '\P{^iszinh}', "");
Expect(0, 767, '\p{iszinh}', "");
Expect(1, 767, '\p{^iszinh}', "");
Expect(1, 767, '\P{iszinh}', "");
Expect(0, 767, '\P{^iszinh}', "");
Expect(1, 879, '\p{_ Is ZINH}', "");
Expect(0, 879, '\p{^_ Is ZINH}', "");
Expect(0, 879, '\P{_ Is ZINH}', "");
Expect(1, 879, '\P{^_ Is ZINH}', "");
Expect(0, 767, '\p{_ Is ZINH}', "");
Expect(1, 767, '\p{^_ Is ZINH}', "");
Expect(1, 767, '\P{_ Is ZINH}', "");
Expect(0, 767, '\P{^_ Is ZINH}', "");
Error('\p{-/a/QAAI}');
Error('\P{-/a/QAAI}');
Expect(1, 879, '\p{qaai}', "");
Expect(0, 879, '\p{^qaai}', "");
Expect(0, 879, '\P{qaai}', "");
Expect(1, 879, '\P{^qaai}', "");
Expect(0, 767, '\p{qaai}', "");
Expect(1, 767, '\p{^qaai}', "");
Expect(1, 767, '\P{qaai}', "");
Expect(0, 767, '\P{^qaai}', "");
Expect(1, 879, '\p{Qaai}', "");
Expect(0, 879, '\p{^Qaai}', "");
Expect(0, 879, '\P{Qaai}', "");
Expect(1, 879, '\P{^Qaai}', "");
Expect(0, 767, '\p{Qaai}', "");
Expect(1, 767, '\p{^Qaai}', "");
Expect(1, 767, '\P{Qaai}', "");
Expect(0, 767, '\P{^Qaai}', "");
Error('\p{-	Is-Qaai:=}');
Error('\P{-	Is-Qaai:=}');
Expect(1, 879, '\p{isqaai}', "");
Expect(0, 879, '\p{^isqaai}', "");
Expect(0, 879, '\P{isqaai}', "");
Expect(1, 879, '\P{^isqaai}', "");
Expect(0, 767, '\p{isqaai}', "");
Expect(1, 767, '\p{^isqaai}', "");
Expect(1, 767, '\P{isqaai}', "");
Expect(0, 767, '\P{^isqaai}', "");
Expect(1, 879, '\p{	IS-Qaai}', "");
Expect(0, 879, '\p{^	IS-Qaai}', "");
Expect(0, 879, '\P{	IS-Qaai}', "");
Expect(1, 879, '\P{^	IS-Qaai}', "");
Expect(0, 767, '\p{	IS-Qaai}', "");
Expect(1, 767, '\p{^	IS-Qaai}', "");
Expect(1, 767, '\P{	IS-Qaai}', "");
Expect(0, 767, '\P{^	IS-Qaai}', "");
Error('\p{ Other_Math:=}');
Error('\P{ Other_Math:=}');
Expect(1, 94, '\p{othermath}', 'deprecated');
Expect(0, 94, '\p{^othermath}', 'deprecated');
Expect(0, 94, '\P{othermath}', 'deprecated');
Expect(1, 94, '\P{^othermath}', 'deprecated');
Expect(0, 93, '\p{othermath}', 'deprecated');
Expect(1, 93, '\p{^othermath}', 'deprecated');
Expect(1, 93, '\P{othermath}', 'deprecated');
Expect(0, 93, '\P{^othermath}', 'deprecated');
Expect(1, 94, '\p{	-otherMath}', 'deprecated');
Expect(0, 94, '\p{^	-otherMath}', 'deprecated');
Expect(0, 94, '\P{	-otherMath}', 'deprecated');
Expect(1, 94, '\P{^	-otherMath}', 'deprecated');
Expect(0, 93, '\p{	-otherMath}', 'deprecated');
Expect(1, 93, '\p{^	-otherMath}', 'deprecated');
Expect(1, 93, '\P{	-otherMath}', 'deprecated');
Expect(0, 93, '\P{^	-otherMath}', 'deprecated');
Error('\p{/a/Is	OtherMath}');
Error('\P{/a/Is	OtherMath}');
Expect(1, 94, '\p{isothermath}', 'deprecated');
Expect(0, 94, '\p{^isothermath}', 'deprecated');
Expect(0, 94, '\P{isothermath}', 'deprecated');
Expect(1, 94, '\P{^isothermath}', 'deprecated');
Expect(0, 93, '\p{isothermath}', 'deprecated');
Expect(1, 93, '\p{^isothermath}', 'deprecated');
Expect(1, 93, '\P{isothermath}', 'deprecated');
Expect(0, 93, '\P{^isothermath}', 'deprecated');
Expect(1, 94, '\p{- Is-OtherMath}', 'deprecated');
Expect(0, 94, '\p{^- Is-OtherMath}', 'deprecated');
Expect(0, 94, '\P{- Is-OtherMath}', 'deprecated');
Expect(1, 94, '\P{^- Is-OtherMath}', 'deprecated');
Expect(0, 93, '\p{- Is-OtherMath}', 'deprecated');
Expect(1, 93, '\p{^- Is-OtherMath}', 'deprecated');
Expect(1, 93, '\P{- Is-OtherMath}', 'deprecated');
Expect(0, 93, '\P{^- Is-OtherMath}', 'deprecated');
Error('\p{/a/OMath}');
Error('\P{/a/OMath}');
Expect(1, 94, '\p{omath}', 'deprecated');
Expect(0, 94, '\p{^omath}', 'deprecated');
Expect(0, 94, '\P{omath}', 'deprecated');
Expect(1, 94, '\P{^omath}', 'deprecated');
Expect(0, 93, '\p{omath}', 'deprecated');
Expect(1, 93, '\p{^omath}', 'deprecated');
Expect(1, 93, '\P{omath}', 'deprecated');
Expect(0, 93, '\P{^omath}', 'deprecated');
Expect(1, 94, '\p{OMath}', 'deprecated');
Expect(0, 94, '\p{^OMath}', 'deprecated');
Expect(0, 94, '\P{OMath}', 'deprecated');
Expect(1, 94, '\P{^OMath}', 'deprecated');
Expect(0, 93, '\p{OMath}', 'deprecated');
Expect(1, 93, '\p{^OMath}', 'deprecated');
Expect(1, 93, '\P{OMath}', 'deprecated');
Expect(0, 93, '\P{^OMath}', 'deprecated');
Error('\p{_:=is	omath}');
Error('\P{_:=is	omath}');
Expect(1, 94, '\p{isomath}', 'deprecated');
Expect(0, 94, '\p{^isomath}', 'deprecated');
Expect(0, 94, '\P{isomath}', 'deprecated');
Expect(1, 94, '\P{^isomath}', 'deprecated');
Expect(0, 93, '\p{isomath}', 'deprecated');
Expect(1, 93, '\p{^isomath}', 'deprecated');
Expect(1, 93, '\P{isomath}', 'deprecated');
Expect(0, 93, '\P{^isomath}', 'deprecated');
Expect(1, 94, '\p{-IS	omath}', 'deprecated');
Expect(0, 94, '\p{^-IS	omath}', 'deprecated');
Expect(0, 94, '\P{-IS	omath}', 'deprecated');
Expect(1, 94, '\P{^-IS	omath}', 'deprecated');
Expect(0, 93, '\p{-IS	omath}', 'deprecated');
Expect(1, 93, '\p{^-IS	omath}', 'deprecated');
Expect(1, 93, '\P{-IS	omath}', 'deprecated');
Expect(0, 93, '\P{^-IS	omath}', 'deprecated');
Error('\p{/a/-_CJKUNIFIEDideographs Extension-C}');
Error('\P{/a/-_CJKUNIFIEDideographs Extension-C}');
Expect(1, 177983, '\p{cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^cjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^cjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{cjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^cjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{ -cjk_unified	Ideographs_extension_C}', "");
Expect(0, 177983, '\p{^ -cjk_unified	Ideographs_extension_C}', "");
Expect(0, 177983, '\P{ -cjk_unified	Ideographs_extension_C}', "");
Expect(1, 177983, '\P{^ -cjk_unified	Ideographs_extension_C}', "");
Expect(0, 173823, '\p{ -cjk_unified	Ideographs_extension_C}', "");
Expect(1, 173823, '\p{^ -cjk_unified	Ideographs_extension_C}', "");
Expect(1, 173823, '\P{ -cjk_unified	Ideographs_extension_C}', "");
Expect(0, 173823, '\P{^ -cjk_unified	Ideographs_extension_C}', "");
Error('\p{:= -Is-CJK	Unified ideographs	extension_C}');
Error('\P{:= -Is-CJK	Unified ideographs	extension_C}');
Expect(1, 177983, '\p{iscjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^iscjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{iscjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^iscjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{iscjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^iscjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{iscjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^iscjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{	Is-CJK	Unified IDEOGRAPHSEXTENSION_c}', "");
Expect(0, 177983, '\p{^	Is-CJK	Unified IDEOGRAPHSEXTENSION_c}', "");
Expect(0, 177983, '\P{	Is-CJK	Unified IDEOGRAPHSEXTENSION_c}', "");
Expect(1, 177983, '\P{^	Is-CJK	Unified IDEOGRAPHSEXTENSION_c}', "");
Expect(0, 173823, '\p{	Is-CJK	Unified IDEOGRAPHSEXTENSION_c}', "");
Expect(1, 173823, '\p{^	Is-CJK	Unified IDEOGRAPHSEXTENSION_c}', "");
Expect(1, 173823, '\P{	Is-CJK	Unified IDEOGRAPHSEXTENSION_c}', "");
Expect(0, 173823, '\P{^	Is-CJK	Unified IDEOGRAPHSEXTENSION_c}', "");
Error('\p{-_In	CJK	unified/a/Ideographs Extension_C}');
Error('\P{-_In	CJK	unified/a/Ideographs Extension_C}');
Expect(1, 177983, '\p{incjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\p{^incjkunifiedideographsextensionc}', "");
Expect(0, 177983, '\P{incjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\P{^incjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\p{incjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\p{^incjkunifiedideographsextensionc}', "");
Expect(1, 173823, '\P{incjkunifiedideographsextensionc}', "");
Expect(0, 173823, '\P{^incjkunifiedideographsextensionc}', "");
Expect(1, 177983, '\p{	_INCJKUnified_IDEOGRAPHS-EXTENSION_C}', "");
Expect(0, 177983, '\p{^	_INCJKUnified_IDEOGRAPHS-EXTENSION_C}', "");
Expect(0, 177983, '\P{	_INCJKUnified_IDEOGRAPHS-EXTENSION_C}', "");
Expect(1, 177983, '\P{^	_INCJKUnified_IDEOGRAPHS-EXTENSION_C}', "");
Expect(0, 173823, '\p{	_INCJKUnified_IDEOGRAPHS-EXTENSION_C}', "");
Expect(1, 173823, '\p{^	_INCJKUnified_IDEOGRAPHS-EXTENSION_C}', "");
Expect(1, 173823, '\P{	_INCJKUnified_IDEOGRAPHS-EXTENSION_C}', "");
Expect(0, 173823, '\P{^	_INCJKUnified_IDEOGRAPHS-EXTENSION_C}', "");
Error('\p{ _Latin EXTENDED Additional:=}');
Error('\P{ _Latin EXTENDED Additional:=}');
Expect(1, 7935, '\p{latinextendedadditional}', "");
Expect(0, 7935, '\p{^latinextendedadditional}', "");
Expect(0, 7935, '\P{latinextendedadditional}', "");
Expect(1, 7935, '\P{^latinextendedadditional}', "");
Expect(0, 7679, '\p{latinextendedadditional}', "");
Expect(1, 7679, '\p{^latinextendedadditional}', "");
Expect(1, 7679, '\P{latinextendedadditional}', "");
Expect(0, 7679, '\P{^latinextendedadditional}', "");
Expect(1, 7935, '\p{ _Latin-Extended-additional}', "");
Expect(0, 7935, '\p{^ _Latin-Extended-additional}', "");
Expect(0, 7935, '\P{ _Latin-Extended-additional}', "");
Expect(1, 7935, '\P{^ _Latin-Extended-additional}', "");
Expect(0, 7679, '\p{ _Latin-Extended-additional}', "");
Expect(1, 7679, '\p{^ _Latin-Extended-additional}', "");
Expect(1, 7679, '\P{ _Latin-Extended-additional}', "");
Expect(0, 7679, '\P{^ _Latin-Extended-additional}', "");
Error('\p{		is/a/LATIN-ExtendedAdditional}');
Error('\P{		is/a/LATIN-ExtendedAdditional}');
Expect(1, 7935, '\p{islatinextendedadditional}', "");
Expect(0, 7935, '\p{^islatinextendedadditional}', "");
Expect(0, 7935, '\P{islatinextendedadditional}', "");
Expect(1, 7935, '\P{^islatinextendedadditional}', "");
Expect(0, 7679, '\p{islatinextendedadditional}', "");
Expect(1, 7679, '\p{^islatinextendedadditional}', "");
Expect(1, 7679, '\P{islatinextendedadditional}', "");
Expect(0, 7679, '\P{^islatinextendedadditional}', "");
Expect(1, 7935, '\p{__IS Latin-EXTENDEDadditional}', "");
Expect(0, 7935, '\p{^__IS Latin-EXTENDEDadditional}', "");
Expect(0, 7935, '\P{__IS Latin-EXTENDEDadditional}', "");
Expect(1, 7935, '\P{^__IS Latin-EXTENDEDadditional}', "");
Expect(0, 7679, '\p{__IS Latin-EXTENDEDadditional}', "");
Expect(1, 7679, '\p{^__IS Latin-EXTENDEDadditional}', "");
Expect(1, 7679, '\P{__IS Latin-EXTENDEDadditional}', "");
Expect(0, 7679, '\P{^__IS Latin-EXTENDEDadditional}', "");
Error('\p{--in_Latin	extended_ADDITIONAL/a/}');
Error('\P{--in_Latin	extended_ADDITIONAL/a/}');
Expect(1, 7935, '\p{inlatinextendedadditional}', "");
Expect(0, 7935, '\p{^inlatinextendedadditional}', "");
Expect(0, 7935, '\P{inlatinextendedadditional}', "");
Expect(1, 7935, '\P{^inlatinextendedadditional}', "");
Expect(0, 7679, '\p{inlatinextendedadditional}', "");
Expect(1, 7679, '\p{^inlatinextendedadditional}', "");
Expect(1, 7679, '\P{inlatinextendedadditional}', "");
Expect(0, 7679, '\P{^inlatinextendedadditional}', "");
Expect(1, 7935, '\p{-In	LATIN-Extended	Additional}', "");
Expect(0, 7935, '\p{^-In	LATIN-Extended	Additional}', "");
Expect(0, 7935, '\P{-In	LATIN-Extended	Additional}', "");
Expect(1, 7935, '\P{^-In	LATIN-Extended	Additional}', "");
Expect(0, 7679, '\p{-In	LATIN-Extended	Additional}', "");
Expect(1, 7679, '\p{^-In	LATIN-Extended	Additional}', "");
Expect(1, 7679, '\P{-In	LATIN-Extended	Additional}', "");
Expect(0, 7679, '\P{^-In	LATIN-Extended	Additional}', "");
Error('\p{ :=Kannada}');
Error('\P{ :=Kannada}');
Expect(1, 3203, '\p{kannada}', "");
Expect(0, 3203, '\p{^kannada}', "");
Expect(0, 3203, '\P{kannada}', "");
Expect(1, 3203, '\P{^kannada}', "");
Expect(0, 3201, '\p{kannada}', "");
Expect(1, 3201, '\p{^kannada}', "");
Expect(1, 3201, '\P{kannada}', "");
Expect(0, 3201, '\P{^kannada}', "");
Expect(1, 3203, '\p{- Kannada}', "");
Expect(0, 3203, '\p{^- Kannada}', "");
Expect(0, 3203, '\P{- Kannada}', "");
Expect(1, 3203, '\P{^- Kannada}', "");
Expect(0, 3201, '\p{- Kannada}', "");
Expect(1, 3201, '\p{^- Kannada}', "");
Expect(1, 3201, '\P{- Kannada}', "");
Expect(0, 3201, '\P{^- Kannada}', "");
Error('\p{	 Is-Kannada/a/}');
Error('\P{	 Is-Kannada/a/}');
Expect(1, 3203, '\p{iskannada}', "");
Expect(0, 3203, '\p{^iskannada}', "");
Expect(0, 3203, '\P{iskannada}', "");
Expect(1, 3203, '\P{^iskannada}', "");
Expect(0, 3201, '\p{iskannada}', "");
Expect(1, 3201, '\p{^iskannada}', "");
Expect(1, 3201, '\P{iskannada}', "");
Expect(0, 3201, '\P{^iskannada}', "");
Expect(1, 3203, '\p{--Is-kannada}', "");
Expect(0, 3203, '\p{^--Is-kannada}', "");
Expect(0, 3203, '\P{--Is-kannada}', "");
Expect(1, 3203, '\P{^--Is-kannada}', "");
Expect(0, 3201, '\p{--Is-kannada}', "");
Expect(1, 3201, '\p{^--Is-kannada}', "");
Expect(1, 3201, '\P{--Is-kannada}', "");
Expect(0, 3201, '\P{^--Is-kannada}', "");
Error('\p{/a/	knda}');
Error('\P{/a/	knda}');
Expect(1, 3203, '\p{knda}', "");
Expect(0, 3203, '\p{^knda}', "");
Expect(0, 3203, '\P{knda}', "");
Expect(1, 3203, '\P{^knda}', "");
Expect(0, 3201, '\p{knda}', "");
Expect(1, 3201, '\p{^knda}', "");
Expect(1, 3201, '\P{knda}', "");
Expect(0, 3201, '\P{^knda}', "");
Expect(1, 3203, '\p{  Knda}', "");
Expect(0, 3203, '\p{^  Knda}', "");
Expect(0, 3203, '\P{  Knda}', "");
Expect(1, 3203, '\P{^  Knda}', "");
Expect(0, 3201, '\p{  Knda}', "");
Expect(1, 3201, '\p{^  Knda}', "");
Expect(1, 3201, '\P{  Knda}', "");
Expect(0, 3201, '\P{^  Knda}', "");
Error('\p{	 Is:=Knda}');
Error('\P{	 Is:=Knda}');
Expect(1, 3203, '\p{isknda}', "");
Expect(0, 3203, '\p{^isknda}', "");
Expect(0, 3203, '\P{isknda}', "");
Expect(1, 3203, '\P{^isknda}', "");
Expect(0, 3201, '\p{isknda}', "");
Expect(1, 3201, '\p{^isknda}', "");
Expect(1, 3201, '\P{isknda}', "");
Expect(0, 3201, '\P{^isknda}', "");
Expect(1, 3203, '\p{		IsKnda}', "");
Expect(0, 3203, '\p{^		IsKnda}', "");
Expect(0, 3203, '\P{		IsKnda}', "");
Expect(1, 3203, '\P{^		IsKnda}', "");
Expect(0, 3201, '\p{		IsKnda}', "");
Expect(1, 3201, '\p{^		IsKnda}', "");
Expect(1, 3201, '\P{		IsKnda}', "");
Expect(0, 3201, '\P{^		IsKnda}', "");
Error('\p{:= 	Lao}');
Error('\P{:= 	Lao}');
Expect(1, 3714, '\p{lao}', "");
Expect(0, 3714, '\p{^lao}', "");
Expect(0, 3714, '\P{lao}', "");
Expect(1, 3714, '\P{^lao}', "");
Expect(0, 3712, '\p{lao}', "");
Expect(1, 3712, '\p{^lao}', "");
Expect(1, 3712, '\P{lao}', "");
Expect(0, 3712, '\P{^lao}', "");
Expect(1, 3714, '\p{_	Lao}', "");
Expect(0, 3714, '\p{^_	Lao}', "");
Expect(0, 3714, '\P{_	Lao}', "");
Expect(1, 3714, '\P{^_	Lao}', "");
Expect(0, 3712, '\p{_	Lao}', "");
Expect(1, 3712, '\p{^_	Lao}', "");
Expect(1, 3712, '\P{_	Lao}', "");
Expect(0, 3712, '\P{^_	Lao}', "");
Error('\p{-Is:=Lao}');
Error('\P{-Is:=Lao}');
Expect(1, 3714, '\p{islao}', "");
Expect(0, 3714, '\p{^islao}', "");
Expect(0, 3714, '\P{islao}', "");
Expect(1, 3714, '\P{^islao}', "");
Expect(0, 3712, '\p{islao}', "");
Expect(1, 3712, '\p{^islao}', "");
Expect(1, 3712, '\P{islao}', "");
Expect(0, 3712, '\P{^islao}', "");
Expect(1, 3714, '\p{--IsLao}', "");
Expect(0, 3714, '\p{^--IsLao}', "");
Expect(0, 3714, '\P{--IsLao}', "");
Expect(1, 3714, '\P{^--IsLao}', "");
Expect(0, 3712, '\p{--IsLao}', "");
Expect(1, 3712, '\p{^--IsLao}', "");
Expect(1, 3712, '\P{--IsLao}', "");
Expect(0, 3712, '\P{^--IsLao}', "");
Error('\p{:=__LAOO}');
Error('\P{:=__LAOO}');
Expect(1, 3714, '\p{laoo}', "");
Expect(0, 3714, '\p{^laoo}', "");
Expect(0, 3714, '\P{laoo}', "");
Expect(1, 3714, '\P{^laoo}', "");
Expect(0, 3712, '\p{laoo}', "");
Expect(1, 3712, '\p{^laoo}', "");
Expect(1, 3712, '\P{laoo}', "");
Expect(0, 3712, '\P{^laoo}', "");
Expect(1, 3714, '\p{  Laoo}', "");
Expect(0, 3714, '\p{^  Laoo}', "");
Expect(0, 3714, '\P{  Laoo}', "");
Expect(1, 3714, '\P{^  Laoo}', "");
Expect(0, 3712, '\p{  Laoo}', "");
Expect(1, 3712, '\p{^  Laoo}', "");
Expect(1, 3712, '\P{  Laoo}', "");
Expect(0, 3712, '\P{^  Laoo}', "");
Error('\p{	:=Is-Laoo}');
Error('\P{	:=Is-Laoo}');
Expect(1, 3714, '\p{islaoo}', "");
Expect(0, 3714, '\p{^islaoo}', "");
Expect(0, 3714, '\P{islaoo}', "");
Expect(1, 3714, '\P{^islaoo}', "");
Expect(0, 3712, '\p{islaoo}', "");
Expect(1, 3712, '\p{^islaoo}', "");
Expect(1, 3712, '\P{islaoo}', "");
Expect(0, 3712, '\P{^islaoo}', "");
Expect(1, 3714, '\p{- Is	laoo}', "");
Expect(0, 3714, '\p{^- Is	laoo}', "");
Expect(0, 3714, '\P{- Is	laoo}', "");
Expect(1, 3714, '\P{^- Is	laoo}', "");
Expect(0, 3712, '\p{- Is	laoo}', "");
Expect(1, 3712, '\p{^- Is	laoo}', "");
Expect(1, 3712, '\P{- Is	laoo}', "");
Expect(0, 3712, '\P{^- Is	laoo}', "");
Error('\p{:=_	Digit}');
Error('\P{:=_	Digit}');
Expect(1, 57, '\p{digit}', "");
Expect(0, 57, '\p{^digit}', "");
Expect(0, 57, '\P{digit}', "");
Expect(1, 57, '\P{^digit}', "");
Expect(0, 47, '\p{digit}', "");
Expect(1, 47, '\p{^digit}', "");
Expect(1, 47, '\P{digit}', "");
Expect(0, 47, '\P{^digit}', "");
Expect(1, 57, '\p{DIGIT}', "");
Expect(0, 57, '\p{^DIGIT}', "");
Expect(0, 57, '\P{DIGIT}', "");
Expect(1, 57, '\P{^DIGIT}', "");
Expect(0, 47, '\p{DIGIT}', "");
Expect(1, 47, '\p{^DIGIT}', "");
Expect(1, 47, '\P{DIGIT}', "");
Expect(0, 47, '\P{^DIGIT}', "");
Error('\p{--is	digit:=}');
Error('\P{--is	digit:=}');
Expect(1, 57, '\p{isdigit}', "");
Expect(0, 57, '\p{^isdigit}', "");
Expect(0, 57, '\P{isdigit}', "");
Expect(1, 57, '\P{^isdigit}', "");
Expect(0, 47, '\p{isdigit}', "");
Expect(1, 47, '\p{^isdigit}', "");
Expect(1, 47, '\P{isdigit}', "");
Expect(0, 47, '\P{^isdigit}', "");
Expect(1, 57, '\p{ 	IS_Digit}', "");
Expect(0, 57, '\p{^ 	IS_Digit}', "");
Expect(0, 57, '\P{ 	IS_Digit}', "");
Expect(1, 57, '\P{^ 	IS_Digit}', "");
Expect(0, 47, '\p{ 	IS_Digit}', "");
Expect(1, 47, '\p{^ 	IS_Digit}', "");
Expect(1, 47, '\P{ 	IS_Digit}', "");
Expect(0, 47, '\P{^ 	IS_Digit}', "");
Error('\p{-_decimal NUMBER:=}');
Error('\P{-_decimal NUMBER:=}');
Expect(1, 57, '\p{decimalnumber}', "");
Expect(0, 57, '\p{^decimalnumber}', "");
Expect(0, 57, '\P{decimalnumber}', "");
Expect(1, 57, '\P{^decimalnumber}', "");
Expect(0, 47, '\p{decimalnumber}', "");
Expect(1, 47, '\p{^decimalnumber}', "");
Expect(1, 47, '\P{decimalnumber}', "");
Expect(0, 47, '\P{^decimalnumber}', "");
Expect(1, 57, '\p{	Decimal	NUMBER}', "");
Expect(0, 57, '\p{^	Decimal	NUMBER}', "");
Expect(0, 57, '\P{	Decimal	NUMBER}', "");
Expect(1, 57, '\P{^	Decimal	NUMBER}', "");
Expect(0, 47, '\p{	Decimal	NUMBER}', "");
Expect(1, 47, '\p{^	Decimal	NUMBER}', "");
Expect(1, 47, '\P{	Decimal	NUMBER}', "");
Expect(0, 47, '\P{^	Decimal	NUMBER}', "");
Error('\p{	-Is-Decimal Number/a/}');
Error('\P{	-Is-Decimal Number/a/}');
Expect(1, 57, '\p{isdecimalnumber}', "");
Expect(0, 57, '\p{^isdecimalnumber}', "");
Expect(0, 57, '\P{isdecimalnumber}', "");
Expect(1, 57, '\P{^isdecimalnumber}', "");
Expect(0, 47, '\p{isdecimalnumber}', "");
Expect(1, 47, '\p{^isdecimalnumber}', "");
Expect(1, 47, '\P{isdecimalnumber}', "");
Expect(0, 47, '\P{^isdecimalnumber}', "");
Expect(1, 57, '\p{	-is_Decimal	Number}', "");
Expect(0, 57, '\p{^	-is_Decimal	Number}', "");
Expect(0, 57, '\P{	-is_Decimal	Number}', "");
Expect(1, 57, '\P{^	-is_Decimal	Number}', "");
Expect(0, 47, '\p{	-is_Decimal	Number}', "");
Expect(1, 47, '\p{^	-is_Decimal	Number}', "");
Expect(1, 47, '\P{	-is_Decimal	Number}', "");
Expect(0, 47, '\P{^	-is_Decimal	Number}', "");
Error('\p{/a/- ND}');
Error('\P{/a/- ND}');
Expect(1, 57, '\p{nd}', "");
Expect(0, 57, '\p{^nd}', "");
Expect(0, 57, '\P{nd}', "");
Expect(1, 57, '\P{^nd}', "");
Expect(0, 47, '\p{nd}', "");
Expect(1, 47, '\p{^nd}', "");
Expect(1, 47, '\P{nd}', "");
Expect(0, 47, '\P{^nd}', "");
Expect(1, 57, '\p{	Nd}', "");
Expect(0, 57, '\p{^	Nd}', "");
Expect(0, 57, '\P{	Nd}', "");
Expect(1, 57, '\P{^	Nd}', "");
Expect(0, 47, '\p{	Nd}', "");
Expect(1, 47, '\p{^	Nd}', "");
Expect(1, 47, '\P{	Nd}', "");
Expect(0, 47, '\P{^	Nd}', "");
Error('\p{  ISnd:=}');
Error('\P{  ISnd:=}');
Expect(1, 57, '\p{isnd}', "");
Expect(0, 57, '\p{^isnd}', "");
Expect(0, 57, '\P{isnd}', "");
Expect(1, 57, '\P{^isnd}', "");
Expect(0, 47, '\p{isnd}', "");
Expect(1, 47, '\p{^isnd}', "");
Expect(1, 47, '\P{isnd}', "");
Expect(0, 47, '\P{^isnd}', "");
Expect(1, 57, '\p{-Is-Nd}', "");
Expect(0, 57, '\p{^-Is-Nd}', "");
Expect(0, 57, '\P{-Is-Nd}', "");
Expect(1, 57, '\P{^-Is-Nd}', "");
Expect(0, 47, '\p{-Is-Nd}', "");
Expect(1, 47, '\p{^-Is-Nd}', "");
Expect(1, 47, '\P{-Is-Nd}', "");
Expect(0, 47, '\P{^-Is-Nd}', "");
Error('\p{- osmanya:=}');
Error('\P{- osmanya:=}');
Expect(1, 66717, '\p{osmanya}', "");
Expect(0, 66717, '\p{^osmanya}', "");
Expect(0, 66717, '\P{osmanya}', "");
Expect(1, 66717, '\P{^osmanya}', "");
Expect(0, 66687, '\p{osmanya}', "");
Expect(1, 66687, '\p{^osmanya}', "");
Expect(1, 66687, '\P{osmanya}', "");
Expect(0, 66687, '\P{^osmanya}', "");
Expect(1, 66717, '\p{-	OSMANYA}', "");
Expect(0, 66717, '\p{^-	OSMANYA}', "");
Expect(0, 66717, '\P{-	OSMANYA}', "");
Expect(1, 66717, '\P{^-	OSMANYA}', "");
Expect(0, 66687, '\p{-	OSMANYA}', "");
Expect(1, 66687, '\p{^-	OSMANYA}', "");
Expect(1, 66687, '\P{-	OSMANYA}', "");
Expect(0, 66687, '\P{^-	OSMANYA}', "");
Error('\p{is	Osmanya:=}');
Error('\P{is	Osmanya:=}');
Expect(1, 66717, '\p{isosmanya}', "");
Expect(0, 66717, '\p{^isosmanya}', "");
Expect(0, 66717, '\P{isosmanya}', "");
Expect(1, 66717, '\P{^isosmanya}', "");
Expect(0, 66687, '\p{isosmanya}', "");
Expect(1, 66687, '\p{^isosmanya}', "");
Expect(1, 66687, '\P{isosmanya}', "");
Expect(0, 66687, '\P{^isosmanya}', "");
Expect(1, 66717, '\p{	IS-Osmanya}', "");
Expect(0, 66717, '\p{^	IS-Osmanya}', "");
Expect(0, 66717, '\P{	IS-Osmanya}', "");
Expect(1, 66717, '\P{^	IS-Osmanya}', "");
Expect(0, 66687, '\p{	IS-Osmanya}', "");
Expect(1, 66687, '\p{^	IS-Osmanya}', "");
Expect(1, 66687, '\P{	IS-Osmanya}', "");
Expect(0, 66687, '\P{^	IS-Osmanya}', "");
Error('\p{-/a/OSMA}');
Error('\P{-/a/OSMA}');
Expect(1, 66717, '\p{osma}', "");
Expect(0, 66717, '\p{^osma}', "");
Expect(0, 66717, '\P{osma}', "");
Expect(1, 66717, '\P{^osma}', "");
Expect(0, 66687, '\p{osma}', "");
Expect(1, 66687, '\p{^osma}', "");
Expect(1, 66687, '\P{osma}', "");
Expect(0, 66687, '\P{^osma}', "");
Expect(1, 66717, '\p{	osma}', "");
Expect(0, 66717, '\p{^	osma}', "");
Expect(0, 66717, '\P{	osma}', "");
Expect(1, 66717, '\P{^	osma}', "");
Expect(0, 66687, '\p{	osma}', "");
Expect(1, 66687, '\p{^	osma}', "");
Expect(1, 66687, '\P{	osma}', "");
Expect(0, 66687, '\P{^	osma}', "");
Error('\p{-	is:=Osma}');
Error('\P{-	is:=Osma}');
Expect(1, 66717, '\p{isosma}', "");
Expect(0, 66717, '\p{^isosma}', "");
Expect(0, 66717, '\P{isosma}', "");
Expect(1, 66717, '\P{^isosma}', "");
Expect(0, 66687, '\p{isosma}', "");
Expect(1, 66687, '\p{^isosma}', "");
Expect(1, 66687, '\P{isosma}', "");
Expect(0, 66687, '\P{^isosma}', "");
Expect(1, 66717, '\p{_ IS-OSMA}', "");
Expect(0, 66717, '\p{^_ IS-OSMA}', "");
Expect(0, 66717, '\P{_ IS-OSMA}', "");
Expect(1, 66717, '\P{^_ IS-OSMA}', "");
Expect(0, 66687, '\p{_ IS-OSMA}', "");
Expect(1, 66687, '\p{^_ IS-OSMA}', "");
Expect(1, 66687, '\P{_ IS-OSMA}', "");
Expect(0, 66687, '\P{^_ IS-OSMA}', "");
Error('\p{/a/ Unified_ideograph}');
Error('\P{/a/ Unified_ideograph}');
Expect(1, 19893, '\p{unifiedideograph}', "");
Expect(0, 19893, '\p{^unifiedideograph}', "");
Expect(0, 19893, '\P{unifiedideograph}', "");
Expect(1, 19893, '\P{^unifiedideograph}', "");
Expect(0, 13311, '\p{unifiedideograph}', "");
Expect(1, 13311, '\p{^unifiedideograph}', "");
Expect(1, 13311, '\P{unifiedideograph}', "");
Expect(0, 13311, '\P{^unifiedideograph}', "");
Expect(1, 19893, '\p{ Unified-Ideograph}', "");
Expect(0, 19893, '\p{^ Unified-Ideograph}', "");
Expect(0, 19893, '\P{ Unified-Ideograph}', "");
Expect(1, 19893, '\P{^ Unified-Ideograph}', "");
Expect(0, 13311, '\p{ Unified-Ideograph}', "");
Expect(1, 13311, '\p{^ Unified-Ideograph}', "");
Expect(1, 13311, '\P{ Unified-Ideograph}', "");
Expect(0, 13311, '\P{^ Unified-Ideograph}', "");
Error('\p{	is	Unified/a/IDEOGRAPH}');
Error('\P{	is	Unified/a/IDEOGRAPH}');
Expect(1, 19893, '\p{isunifiedideograph}', "");
Expect(0, 19893, '\p{^isunifiedideograph}', "");
Expect(0, 19893, '\P{isunifiedideograph}', "");
Expect(1, 19893, '\P{^isunifiedideograph}', "");
Expect(0, 13311, '\p{isunifiedideograph}', "");
Expect(1, 13311, '\p{^isunifiedideograph}', "");
Expect(1, 13311, '\P{isunifiedideograph}', "");
Expect(0, 13311, '\P{^isunifiedideograph}', "");
Expect(1, 19893, '\p{	Is_unifiedIdeograph}', "");
Expect(0, 19893, '\p{^	Is_unifiedIdeograph}', "");
Expect(0, 19893, '\P{	Is_unifiedIdeograph}', "");
Expect(1, 19893, '\P{^	Is_unifiedIdeograph}', "");
Expect(0, 13311, '\p{	Is_unifiedIdeograph}', "");
Expect(1, 13311, '\p{^	Is_unifiedIdeograph}', "");
Expect(1, 13311, '\P{	Is_unifiedIdeograph}', "");
Expect(0, 13311, '\P{^	Is_unifiedIdeograph}', "");
Error('\p{:=UIdeo}');
Error('\P{:=UIdeo}');
Expect(1, 19893, '\p{uideo}', "");
Expect(0, 19893, '\p{^uideo}', "");
Expect(0, 19893, '\P{uideo}', "");
Expect(1, 19893, '\P{^uideo}', "");
Expect(0, 13311, '\p{uideo}', "");
Expect(1, 13311, '\p{^uideo}', "");
Expect(1, 13311, '\P{uideo}', "");
Expect(0, 13311, '\P{^uideo}', "");
Expect(1, 19893, '\p{_	UIDEO}', "");
Expect(0, 19893, '\p{^_	UIDEO}', "");
Expect(0, 19893, '\P{_	UIDEO}', "");
Expect(1, 19893, '\P{^_	UIDEO}', "");
Expect(0, 13311, '\p{_	UIDEO}', "");
Expect(1, 13311, '\p{^_	UIDEO}', "");
Expect(1, 13311, '\P{_	UIDEO}', "");
Expect(0, 13311, '\P{^_	UIDEO}', "");
Error('\p{	is:=UIDEO}');
Error('\P{	is:=UIDEO}');
Expect(1, 19893, '\p{isuideo}', "");
Expect(0, 19893, '\p{^isuideo}', "");
Expect(0, 19893, '\P{isuideo}', "");
Expect(1, 19893, '\P{^isuideo}', "");
Expect(0, 13311, '\p{isuideo}', "");
Expect(1, 13311, '\p{^isuideo}', "");
Expect(1, 13311, '\P{isuideo}', "");
Expect(0, 13311, '\P{^isuideo}', "");
Expect(1, 19893, '\p{	_is UIdeo}', "");
Expect(0, 19893, '\p{^	_is UIdeo}', "");
Expect(0, 19893, '\P{	_is UIdeo}', "");
Expect(1, 19893, '\P{^	_is UIdeo}', "");
Expect(0, 13311, '\p{	_is UIdeo}', "");
Expect(1, 13311, '\p{^	_is UIdeo}', "");
Expect(1, 13311, '\P{	_is UIdeo}', "");
Expect(0, 13311, '\P{^	_is UIdeo}', "");
Error('\p{_:=BOPOMOFO}');
Error('\P{_:=BOPOMOFO}');
Expect(1, 12589, '\p{bopomofo}', "");
Expect(0, 12589, '\p{^bopomofo}', "");
Expect(0, 12589, '\P{bopomofo}', "");
Expect(1, 12589, '\P{^bopomofo}', "");
Expect(0, 12548, '\p{bopomofo}', "");
Expect(1, 12548, '\p{^bopomofo}', "");
Expect(1, 12548, '\P{bopomofo}', "");
Expect(0, 12548, '\P{^bopomofo}', "");
Expect(1, 12589, '\p{-_Bopomofo}', "");
Expect(0, 12589, '\p{^-_Bopomofo}', "");
Expect(0, 12589, '\P{-_Bopomofo}', "");
Expect(1, 12589, '\P{^-_Bopomofo}', "");
Expect(0, 12548, '\p{-_Bopomofo}', "");
Expect(1, 12548, '\p{^-_Bopomofo}', "");
Expect(1, 12548, '\P{-_Bopomofo}', "");
Expect(0, 12548, '\P{^-_Bopomofo}', "");
Error('\p{:=is BOPOMOFO}');
Error('\P{:=is BOPOMOFO}');
Expect(1, 12589, '\p{isbopomofo}', "");
Expect(0, 12589, '\p{^isbopomofo}', "");
Expect(0, 12589, '\P{isbopomofo}', "");
Expect(1, 12589, '\P{^isbopomofo}', "");
Expect(0, 12548, '\p{isbopomofo}', "");
Expect(1, 12548, '\p{^isbopomofo}', "");
Expect(1, 12548, '\P{isbopomofo}', "");
Expect(0, 12548, '\P{^isbopomofo}', "");
Expect(1, 12589, '\p{ _IS	BOPOMOFO}', "");
Expect(0, 12589, '\p{^ _IS	BOPOMOFO}', "");
Expect(0, 12589, '\P{ _IS	BOPOMOFO}', "");
Expect(1, 12589, '\P{^ _IS	BOPOMOFO}', "");
Expect(0, 12548, '\p{ _IS	BOPOMOFO}', "");
Expect(1, 12548, '\p{^ _IS	BOPOMOFO}', "");
Expect(1, 12548, '\P{ _IS	BOPOMOFO}', "");
Expect(0, 12548, '\P{^ _IS	BOPOMOFO}', "");
Error('\p{/a/	_Bopo}');
Error('\P{/a/	_Bopo}');
Expect(1, 12589, '\p{bopo}', "");
Expect(0, 12589, '\p{^bopo}', "");
Expect(0, 12589, '\P{bopo}', "");
Expect(1, 12589, '\P{^bopo}', "");
Expect(0, 12548, '\p{bopo}', "");
Expect(1, 12548, '\p{^bopo}', "");
Expect(1, 12548, '\P{bopo}', "");
Expect(0, 12548, '\P{^bopo}', "");
Expect(1, 12589, '\p{	 BOPO}', "");
Expect(0, 12589, '\p{^	 BOPO}', "");
Expect(0, 12589, '\P{	 BOPO}', "");
Expect(1, 12589, '\P{^	 BOPO}', "");
Expect(0, 12548, '\p{	 BOPO}', "");
Expect(1, 12548, '\p{^	 BOPO}', "");
Expect(1, 12548, '\P{	 BOPO}', "");
Expect(0, 12548, '\P{^	 BOPO}', "");
Error('\p{:=	IsBopo}');
Error('\P{:=	IsBopo}');
Expect(1, 12589, '\p{isbopo}', "");
Expect(0, 12589, '\p{^isbopo}', "");
Expect(0, 12589, '\P{isbopo}', "");
Expect(1, 12589, '\P{^isbopo}', "");
Expect(0, 12548, '\p{isbopo}', "");
Expect(1, 12548, '\p{^isbopo}', "");
Expect(1, 12548, '\P{isbopo}', "");
Expect(0, 12548, '\P{^isbopo}', "");
Expect(1, 12589, '\p{_Is Bopo}', "");
Expect(0, 12589, '\p{^_Is Bopo}', "");
Expect(0, 12589, '\P{_Is Bopo}', "");
Expect(1, 12589, '\P{^_Is Bopo}', "");
Expect(0, 12548, '\p{_Is Bopo}', "");
Expect(1, 12548, '\p{^_Is Bopo}', "");
Expect(1, 12548, '\P{_Is Bopo}', "");
Expect(0, 12548, '\P{^_Is Bopo}', "");
Error('\p{ Miscellaneous:=Technical}');
Error('\P{ Miscellaneous:=Technical}');
Expect(1, 9215, '\p{miscellaneoustechnical}', "");
Expect(0, 9215, '\p{^miscellaneoustechnical}', "");
Expect(0, 9215, '\P{miscellaneoustechnical}', "");
Expect(1, 9215, '\P{^miscellaneoustechnical}', "");
Expect(0, 8959, '\p{miscellaneoustechnical}', "");
Expect(1, 8959, '\p{^miscellaneoustechnical}', "");
Expect(1, 8959, '\P{miscellaneoustechnical}', "");
Expect(0, 8959, '\P{^miscellaneoustechnical}', "");
Expect(1, 9215, '\p{_	MiscellaneousTECHNICAL}', "");
Expect(0, 9215, '\p{^_	MiscellaneousTECHNICAL}', "");
Expect(0, 9215, '\P{_	MiscellaneousTECHNICAL}', "");
Expect(1, 9215, '\P{^_	MiscellaneousTECHNICAL}', "");
Expect(0, 8959, '\p{_	MiscellaneousTECHNICAL}', "");
Expect(1, 8959, '\p{^_	MiscellaneousTECHNICAL}', "");
Expect(1, 8959, '\P{_	MiscellaneousTECHNICAL}', "");
Expect(0, 8959, '\P{^_	MiscellaneousTECHNICAL}', "");
Error('\p{-is MISCELLANEOUS/a/TECHNICAL}');
Error('\P{-is MISCELLANEOUS/a/TECHNICAL}');
Expect(1, 9215, '\p{ismiscellaneoustechnical}', "");
Expect(0, 9215, '\p{^ismiscellaneoustechnical}', "");
Expect(0, 9215, '\P{ismiscellaneoustechnical}', "");
Expect(1, 9215, '\P{^ismiscellaneoustechnical}', "");
Expect(0, 8959, '\p{ismiscellaneoustechnical}', "");
Expect(1, 8959, '\p{^ismiscellaneoustechnical}', "");
Expect(1, 8959, '\P{ismiscellaneoustechnical}', "");
Expect(0, 8959, '\P{^ismiscellaneoustechnical}', "");
Expect(1, 9215, '\p{ 	IS_MISCELLANEOUS	TECHNICAL}', "");
Expect(0, 9215, '\p{^ 	IS_MISCELLANEOUS	TECHNICAL}', "");
Expect(0, 9215, '\P{ 	IS_MISCELLANEOUS	TECHNICAL}', "");
Expect(1, 9215, '\P{^ 	IS_MISCELLANEOUS	TECHNICAL}', "");
Expect(0, 8959, '\p{ 	IS_MISCELLANEOUS	TECHNICAL}', "");
Expect(1, 8959, '\p{^ 	IS_MISCELLANEOUS	TECHNICAL}', "");
Expect(1, 8959, '\P{ 	IS_MISCELLANEOUS	TECHNICAL}', "");
Expect(0, 8959, '\P{^ 	IS_MISCELLANEOUS	TECHNICAL}', "");
Error('\p{	INmiscellaneous-technical:=}');
Error('\P{	INmiscellaneous-technical:=}');
Expect(1, 9215, '\p{inmiscellaneoustechnical}', "");
Expect(0, 9215, '\p{^inmiscellaneoustechnical}', "");
Expect(0, 9215, '\P{inmiscellaneoustechnical}', "");
Expect(1, 9215, '\P{^inmiscellaneoustechnical}', "");
Expect(0, 8959, '\p{inmiscellaneoustechnical}', "");
Expect(1, 8959, '\p{^inmiscellaneoustechnical}', "");
Expect(1, 8959, '\P{inmiscellaneoustechnical}', "");
Expect(0, 8959, '\P{^inmiscellaneoustechnical}', "");
Expect(1, 9215, '\p{_-In-miscellaneous	Technical}', "");
Expect(0, 9215, '\p{^_-In-miscellaneous	Technical}', "");
Expect(0, 9215, '\P{_-In-miscellaneous	Technical}', "");
Expect(1, 9215, '\P{^_-In-miscellaneous	Technical}', "");
Expect(0, 8959, '\p{_-In-miscellaneous	Technical}', "");
Expect(1, 8959, '\p{^_-In-miscellaneous	Technical}', "");
Expect(1, 8959, '\P{_-In-miscellaneous	Technical}', "");
Expect(0, 8959, '\P{^_-In-miscellaneous	Technical}', "");
Error('\p{-_Mahjong-tiles/a/}');
Error('\P{-_Mahjong-tiles/a/}');
Expect(1, 127023, '\p{mahjongtiles}', "");
Expect(0, 127023, '\p{^mahjongtiles}', "");
Expect(0, 127023, '\P{mahjongtiles}', "");
Expect(1, 127023, '\P{^mahjongtiles}', "");
Expect(0, 126975, '\p{mahjongtiles}', "");
Expect(1, 126975, '\p{^mahjongtiles}', "");
Expect(1, 126975, '\P{mahjongtiles}', "");
Expect(0, 126975, '\P{^mahjongtiles}', "");
Expect(1, 127023, '\p{-	MAHJONG-TILES}', "");
Expect(0, 127023, '\p{^-	MAHJONG-TILES}', "");
Expect(0, 127023, '\P{-	MAHJONG-TILES}', "");
Expect(1, 127023, '\P{^-	MAHJONG-TILES}', "");
Expect(0, 126975, '\p{-	MAHJONG-TILES}', "");
Expect(1, 126975, '\p{^-	MAHJONG-TILES}', "");
Expect(1, 126975, '\P{-	MAHJONG-TILES}', "");
Expect(0, 126975, '\P{^-	MAHJONG-TILES}', "");
Error('\p{-Is:=Mahjong_Tiles}');
Error('\P{-Is:=Mahjong_Tiles}');
Expect(1, 127023, '\p{ismahjongtiles}', "");
Expect(0, 127023, '\p{^ismahjongtiles}', "");
Expect(0, 127023, '\P{ismahjongtiles}', "");
Expect(1, 127023, '\P{^ismahjongtiles}', "");
Expect(0, 126975, '\p{ismahjongtiles}', "");
Expect(1, 126975, '\p{^ismahjongtiles}', "");
Expect(1, 126975, '\P{ismahjongtiles}', "");
Expect(0, 126975, '\P{^ismahjongtiles}', "");
Expect(1, 127023, '\p{Is_mahjong	Tiles}', "");
Expect(0, 127023, '\p{^Is_mahjong	Tiles}', "");
Expect(0, 127023, '\P{Is_mahjong	Tiles}', "");
Expect(1, 127023, '\P{^Is_mahjong	Tiles}', "");
Expect(0, 126975, '\p{Is_mahjong	Tiles}', "");
Expect(1, 126975, '\p{^Is_mahjong	Tiles}', "");
Expect(1, 126975, '\P{Is_mahjong	Tiles}', "");
Expect(0, 126975, '\P{^Is_mahjong	Tiles}', "");
Error('\p{:=--InMahjong_Tiles}');
Error('\P{:=--InMahjong_Tiles}');
Expect(1, 127023, '\p{inmahjongtiles}', "");
Expect(0, 127023, '\p{^inmahjongtiles}', "");
Expect(0, 127023, '\P{inmahjongtiles}', "");
Expect(1, 127023, '\P{^inmahjongtiles}', "");
Expect(0, 126975, '\p{inmahjongtiles}', "");
Expect(1, 126975, '\p{^inmahjongtiles}', "");
Expect(1, 126975, '\P{inmahjongtiles}', "");
Expect(0, 126975, '\P{^inmahjongtiles}', "");
Expect(1, 127023, '\p{-IN	mahjong	Tiles}', "");
Expect(0, 127023, '\p{^-IN	mahjong	Tiles}', "");
Expect(0, 127023, '\P{-IN	mahjong	Tiles}', "");
Expect(1, 127023, '\P{^-IN	mahjong	Tiles}', "");
Expect(0, 126975, '\p{-IN	mahjong	Tiles}', "");
Expect(1, 126975, '\p{^-IN	mahjong	Tiles}', "");
Expect(1, 126975, '\P{-IN	mahjong	Tiles}', "");
Expect(0, 126975, '\P{^-IN	mahjong	Tiles}', "");
Error('\p{--Miscellaneous/a/MathematicalSymbolsb}');
Error('\P{--Miscellaneous/a/MathematicalSymbolsb}');
Expect(1, 10751, '\p{miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{miscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^miscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{	Miscellaneous	mathematical-symbols_B}', "");
Expect(0, 10751, '\p{^	Miscellaneous	mathematical-symbols_B}', "");
Expect(0, 10751, '\P{	Miscellaneous	mathematical-symbols_B}', "");
Expect(1, 10751, '\P{^	Miscellaneous	mathematical-symbols_B}', "");
Expect(0, 10623, '\p{	Miscellaneous	mathematical-symbols_B}', "");
Expect(1, 10623, '\p{^	Miscellaneous	mathematical-symbols_B}', "");
Expect(1, 10623, '\P{	Miscellaneous	mathematical-symbols_B}', "");
Expect(0, 10623, '\P{^	Miscellaneous	mathematical-symbols_B}', "");
Error('\p{/a/ Is_Miscellaneous	Mathematical-symbols-B}');
Error('\P{/a/ Is_Miscellaneous	Mathematical-symbols-B}');
Expect(1, 10751, '\p{ismiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^ismiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{ismiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^ismiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{ismiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^ismiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{ismiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^ismiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{	IS-miscellaneous_mathematical-symbols_b}', "");
Expect(0, 10751, '\p{^	IS-miscellaneous_mathematical-symbols_b}', "");
Expect(0, 10751, '\P{	IS-miscellaneous_mathematical-symbols_b}', "");
Expect(1, 10751, '\P{^	IS-miscellaneous_mathematical-symbols_b}', "");
Expect(0, 10623, '\p{	IS-miscellaneous_mathematical-symbols_b}', "");
Expect(1, 10623, '\p{^	IS-miscellaneous_mathematical-symbols_b}', "");
Expect(1, 10623, '\P{	IS-miscellaneous_mathematical-symbols_b}', "");
Expect(0, 10623, '\P{^	IS-miscellaneous_mathematical-symbols_b}', "");
Error('\p{-IN-MISCELLANEOUS_MATHEMATICAL	Symbols:=b}');
Error('\P{-IN-MISCELLANEOUS_MATHEMATICAL	Symbols:=b}');
Expect(1, 10751, '\p{inmiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\p{^inmiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10751, '\P{inmiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\P{^inmiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\p{inmiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\p{^inmiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10623, '\P{inmiscellaneousmathematicalsymbolsb}', "");
Expect(0, 10623, '\P{^inmiscellaneousmathematicalsymbolsb}', "");
Expect(1, 10751, '\p{ INMISCELLANEOUSMATHEMATICALsymbolsB}', "");
Expect(0, 10751, '\p{^ INMISCELLANEOUSMATHEMATICALsymbolsB}', "");
Expect(0, 10751, '\P{ INMISCELLANEOUSMATHEMATICALsymbolsB}', "");
Expect(1, 10751, '\P{^ INMISCELLANEOUSMATHEMATICALsymbolsB}', "");
Expect(0, 10623, '\p{ INMISCELLANEOUSMATHEMATICALsymbolsB}', "");
Expect(1, 10623, '\p{^ INMISCELLANEOUSMATHEMATICALsymbolsB}', "");
Expect(1, 10623, '\P{ INMISCELLANEOUSMATHEMATICALsymbolsB}', "");
Expect(0, 10623, '\P{^ INMISCELLANEOUSMATHEMATICALsymbolsB}', "");
Error('\p{ 	EnclosedIDEOGRAPHIC:=Supplement}');
Error('\P{ 	EnclosedIDEOGRAPHIC:=Supplement}');
Expect(1, 127743, '\p{enclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^enclosedideographicsupplement}', "");
Expect(0, 127743, '\P{enclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^enclosedideographicsupplement}', "");
Expect(0, 127487, '\p{enclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^enclosedideographicsupplement}', "");
Expect(1, 127487, '\P{enclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^enclosedideographicsupplement}', "");
Expect(1, 127743, '\p{	ENCLOSED_Ideographic_supplement}', "");
Expect(0, 127743, '\p{^	ENCLOSED_Ideographic_supplement}', "");
Expect(0, 127743, '\P{	ENCLOSED_Ideographic_supplement}', "");
Expect(1, 127743, '\P{^	ENCLOSED_Ideographic_supplement}', "");
Expect(0, 127487, '\p{	ENCLOSED_Ideographic_supplement}', "");
Expect(1, 127487, '\p{^	ENCLOSED_Ideographic_supplement}', "");
Expect(1, 127487, '\P{	ENCLOSED_Ideographic_supplement}', "");
Expect(0, 127487, '\P{^	ENCLOSED_Ideographic_supplement}', "");
Error('\p{	/a/is Enclosed-ideographic	SUPPLEMENT}');
Error('\P{	/a/is Enclosed-ideographic	SUPPLEMENT}');
Expect(1, 127743, '\p{isenclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^isenclosedideographicsupplement}', "");
Expect(0, 127743, '\P{isenclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^isenclosedideographicsupplement}', "");
Expect(0, 127487, '\p{isenclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^isenclosedideographicsupplement}', "");
Expect(1, 127487, '\P{isenclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^isenclosedideographicsupplement}', "");
Expect(1, 127743, '\p{		ISEnclosed_ideographic Supplement}', "");
Expect(0, 127743, '\p{^		ISEnclosed_ideographic Supplement}', "");
Expect(0, 127743, '\P{		ISEnclosed_ideographic Supplement}', "");
Expect(1, 127743, '\P{^		ISEnclosed_ideographic Supplement}', "");
Expect(0, 127487, '\p{		ISEnclosed_ideographic Supplement}', "");
Expect(1, 127487, '\p{^		ISEnclosed_ideographic Supplement}', "");
Expect(1, 127487, '\P{		ISEnclosed_ideographic Supplement}', "");
Expect(0, 127487, '\P{^		ISEnclosed_ideographic Supplement}', "");
Error('\p{_-In:=Enclosed-IDEOGRAPHIC	SUPPLEMENT}');
Error('\P{_-In:=Enclosed-IDEOGRAPHIC	SUPPLEMENT}');
Expect(1, 127743, '\p{inenclosedideographicsupplement}', "");
Expect(0, 127743, '\p{^inenclosedideographicsupplement}', "");
Expect(0, 127743, '\P{inenclosedideographicsupplement}', "");
Expect(1, 127743, '\P{^inenclosedideographicsupplement}', "");
Expect(0, 127487, '\p{inenclosedideographicsupplement}', "");
Expect(1, 127487, '\p{^inenclosedideographicsupplement}', "");
Expect(1, 127487, '\P{inenclosedideographicsupplement}', "");
Expect(0, 127487, '\P{^inenclosedideographicsupplement}', "");
Expect(1, 127743, '\p{In_enclosed	ideographic	Supplement}', "");
Expect(0, 127743, '\p{^In_enclosed	ideographic	Supplement}', "");
Expect(0, 127743, '\P{In_enclosed	ideographic	Supplement}', "");
Expect(1, 127743, '\P{^In_enclosed	ideographic	Supplement}', "");
Expect(0, 127487, '\p{In_enclosed	ideographic	Supplement}', "");
Expect(1, 127487, '\p{^In_enclosed	ideographic	Supplement}', "");
Expect(1, 127487, '\P{In_enclosed	ideographic	Supplement}', "");
Expect(0, 127487, '\P{^In_enclosed	ideographic	Supplement}', "");
Error('\p{:=-_malayalam}');
Error('\P{:=-_malayalam}');
Expect(1, 3331, '\p{malayalam}', "");
Expect(0, 3331, '\p{^malayalam}', "");
Expect(0, 3331, '\P{malayalam}', "");
Expect(1, 3331, '\P{^malayalam}', "");
Expect(0, 3329, '\p{malayalam}', "");
Expect(1, 3329, '\p{^malayalam}', "");
Expect(1, 3329, '\P{malayalam}', "");
Expect(0, 3329, '\P{^malayalam}', "");
Expect(1, 3331, '\p{__malayalam}', "");
Expect(0, 3331, '\p{^__malayalam}', "");
Expect(0, 3331, '\P{__malayalam}', "");
Expect(1, 3331, '\P{^__malayalam}', "");
Expect(0, 3329, '\p{__malayalam}', "");
Expect(1, 3329, '\p{^__malayalam}', "");
Expect(1, 3329, '\P{__malayalam}', "");
Expect(0, 3329, '\P{^__malayalam}', "");
Error('\p{_IS:=Malayalam}');
Error('\P{_IS:=Malayalam}');
Expect(1, 3331, '\p{ismalayalam}', "");
Expect(0, 3331, '\p{^ismalayalam}', "");
Expect(0, 3331, '\P{ismalayalam}', "");
Expect(1, 3331, '\P{^ismalayalam}', "");
Expect(0, 3329, '\p{ismalayalam}', "");
Expect(1, 3329, '\p{^ismalayalam}', "");
Expect(1, 3329, '\P{ismalayalam}', "");
Expect(0, 3329, '\P{^ismalayalam}', "");
Expect(1, 3331, '\p{Is-Malayalam}', "");
Expect(0, 3331, '\p{^Is-Malayalam}', "");
Expect(0, 3331, '\P{Is-Malayalam}', "");
Expect(1, 3331, '\P{^Is-Malayalam}', "");
Expect(0, 3329, '\p{Is-Malayalam}', "");
Expect(1, 3329, '\p{^Is-Malayalam}', "");
Expect(1, 3329, '\P{Is-Malayalam}', "");
Expect(0, 3329, '\P{^Is-Malayalam}', "");
Error('\p{-MLYM:=}');
Error('\P{-MLYM:=}');
Expect(1, 3331, '\p{mlym}', "");
Expect(0, 3331, '\p{^mlym}', "");
Expect(0, 3331, '\P{mlym}', "");
Expect(1, 3331, '\P{^mlym}', "");
Expect(0, 3329, '\p{mlym}', "");
Expect(1, 3329, '\p{^mlym}', "");
Expect(1, 3329, '\P{mlym}', "");
Expect(0, 3329, '\P{^mlym}', "");
Expect(1, 3331, '\p{		Mlym}', "");
Expect(0, 3331, '\p{^		Mlym}', "");
Expect(0, 3331, '\P{		Mlym}', "");
Expect(1, 3331, '\P{^		Mlym}', "");
Expect(0, 3329, '\p{		Mlym}', "");
Expect(1, 3329, '\p{^		Mlym}', "");
Expect(1, 3329, '\P{		Mlym}', "");
Expect(0, 3329, '\P{^		Mlym}', "");
Error('\p{/a/Is	mlym}');
Error('\P{/a/Is	mlym}');
Expect(1, 3331, '\p{ismlym}', "");
Expect(0, 3331, '\p{^ismlym}', "");
Expect(0, 3331, '\P{ismlym}', "");
Expect(1, 3331, '\P{^ismlym}', "");
Expect(0, 3329, '\p{ismlym}', "");
Expect(1, 3329, '\p{^ismlym}', "");
Expect(1, 3329, '\P{ismlym}', "");
Expect(0, 3329, '\P{^ismlym}', "");
Expect(1, 3331, '\p{--Is mlym}', "");
Expect(0, 3331, '\p{^--Is mlym}', "");
Expect(0, 3331, '\P{--Is mlym}', "");
Expect(1, 3331, '\P{^--Is mlym}', "");
Expect(0, 3329, '\p{--Is mlym}', "");
Expect(1, 3329, '\p{^--Is mlym}', "");
Expect(1, 3329, '\P{--Is mlym}', "");
Expect(0, 3329, '\P{^--Is mlym}', "");
Error('\p{:=	 Vedic_extensions}');
Error('\P{:=	 Vedic_extensions}');
Expect(1, 7423, '\p{vedicextensions}', "");
Expect(0, 7423, '\p{^vedicextensions}', "");
Expect(0, 7423, '\P{vedicextensions}', "");
Expect(1, 7423, '\P{^vedicextensions}', "");
Expect(0, 7375, '\p{vedicextensions}', "");
Expect(1, 7375, '\p{^vedicextensions}', "");
Expect(1, 7375, '\P{vedicextensions}', "");
Expect(0, 7375, '\P{^vedicextensions}', "");
Expect(1, 7423, '\p{--Vedic_extensions}', "");
Expect(0, 7423, '\p{^--Vedic_extensions}', "");
Expect(0, 7423, '\P{--Vedic_extensions}', "");
Expect(1, 7423, '\P{^--Vedic_extensions}', "");
Expect(0, 7375, '\p{--Vedic_extensions}', "");
Expect(1, 7375, '\p{^--Vedic_extensions}', "");
Expect(1, 7375, '\P{--Vedic_extensions}', "");
Expect(0, 7375, '\P{^--Vedic_extensions}', "");
Error('\p{/a/-IsVedic	Extensions}');
Error('\P{/a/-IsVedic	Extensions}');
Expect(1, 7423, '\p{isvedicextensions}', "");
Expect(0, 7423, '\p{^isvedicextensions}', "");
Expect(0, 7423, '\P{isvedicextensions}', "");
Expect(1, 7423, '\P{^isvedicextensions}', "");
Expect(0, 7375, '\p{isvedicextensions}', "");
Expect(1, 7375, '\p{^isvedicextensions}', "");
Expect(1, 7375, '\P{isvedicextensions}', "");
Expect(0, 7375, '\P{^isvedicextensions}', "");
Expect(1, 7423, '\p{_is-VedicExtensions}', "");
Expect(0, 7423, '\p{^_is-VedicExtensions}', "");
Expect(0, 7423, '\P{_is-VedicExtensions}', "");
Expect(1, 7423, '\P{^_is-VedicExtensions}', "");
Expect(0, 7375, '\p{_is-VedicExtensions}', "");
Expect(1, 7375, '\p{^_is-VedicExtensions}', "");
Expect(1, 7375, '\P{_is-VedicExtensions}', "");
Expect(0, 7375, '\P{^_is-VedicExtensions}', "");
Error('\p{:=-In Vedicextensions}');
Error('\P{:=-In Vedicextensions}');
Expect(1, 7423, '\p{invedicextensions}', "");
Expect(0, 7423, '\p{^invedicextensions}', "");
Expect(0, 7423, '\P{invedicextensions}', "");
Expect(1, 7423, '\P{^invedicextensions}', "");
Expect(0, 7375, '\p{invedicextensions}', "");
Expect(1, 7375, '\p{^invedicextensions}', "");
Expect(1, 7375, '\P{invedicextensions}', "");
Expect(0, 7375, '\P{^invedicextensions}', "");
Expect(1, 7423, '\p{-In_VEDIC_extensions}', "");
Expect(0, 7423, '\p{^-In_VEDIC_extensions}', "");
Expect(0, 7423, '\P{-In_VEDIC_extensions}', "");
Expect(1, 7423, '\P{^-In_VEDIC_extensions}', "");
Expect(0, 7375, '\p{-In_VEDIC_extensions}', "");
Expect(1, 7375, '\p{^-In_VEDIC_extensions}', "");
Expect(1, 7375, '\P{-In_VEDIC_extensions}', "");
Expect(0, 7375, '\P{^-In_VEDIC_extensions}', "");
Error('\p{:=-old	Turkic}');
Error('\P{:=-old	Turkic}');
Expect(1, 68680, '\p{oldturkic}', "");
Expect(0, 68680, '\p{^oldturkic}', "");
Expect(0, 68680, '\P{oldturkic}', "");
Expect(1, 68680, '\P{^oldturkic}', "");
Expect(0, 68607, '\p{oldturkic}', "");
Expect(1, 68607, '\p{^oldturkic}', "");
Expect(1, 68607, '\P{oldturkic}', "");
Expect(0, 68607, '\P{^oldturkic}', "");
Expect(1, 68680, '\p{_	Old-turkic}', "");
Expect(0, 68680, '\p{^_	Old-turkic}', "");
Expect(0, 68680, '\P{_	Old-turkic}', "");
Expect(1, 68680, '\P{^_	Old-turkic}', "");
Expect(0, 68607, '\p{_	Old-turkic}', "");
Expect(1, 68607, '\p{^_	Old-turkic}', "");
Expect(1, 68607, '\P{_	Old-turkic}', "");
Expect(0, 68607, '\P{^_	Old-turkic}', "");
Error('\p{/a/_	IsOld Turkic}');
Error('\P{/a/_	IsOld Turkic}');
Expect(1, 68680, '\p{isoldturkic}', "");
Expect(0, 68680, '\p{^isoldturkic}', "");
Expect(0, 68680, '\P{isoldturkic}', "");
Expect(1, 68680, '\P{^isoldturkic}', "");
Expect(0, 68607, '\p{isoldturkic}', "");
Expect(1, 68607, '\p{^isoldturkic}', "");
Expect(1, 68607, '\P{isoldturkic}', "");
Expect(0, 68607, '\P{^isoldturkic}', "");
Expect(1, 68680, '\p{	IS-Old-Turkic}', "");
Expect(0, 68680, '\p{^	IS-Old-Turkic}', "");
Expect(0, 68680, '\P{	IS-Old-Turkic}', "");
Expect(1, 68680, '\P{^	IS-Old-Turkic}', "");
Expect(0, 68607, '\p{	IS-Old-Turkic}', "");
Expect(1, 68607, '\p{^	IS-Old-Turkic}', "");
Expect(1, 68607, '\P{	IS-Old-Turkic}', "");
Expect(0, 68607, '\P{^	IS-Old-Turkic}', "");
Error('\p{_	Orkh:=}');
Error('\P{_	Orkh:=}');
Expect(1, 68680, '\p{orkh}', "");
Expect(0, 68680, '\p{^orkh}', "");
Expect(0, 68680, '\P{orkh}', "");
Expect(1, 68680, '\P{^orkh}', "");
Expect(0, 68607, '\p{orkh}', "");
Expect(1, 68607, '\p{^orkh}', "");
Expect(1, 68607, '\P{orkh}', "");
Expect(0, 68607, '\P{^orkh}', "");
Expect(1, 68680, '\p{_	Orkh}', "");
Expect(0, 68680, '\p{^_	Orkh}', "");
Expect(0, 68680, '\P{_	Orkh}', "");
Expect(1, 68680, '\P{^_	Orkh}', "");
Expect(0, 68607, '\p{_	Orkh}', "");
Expect(1, 68607, '\p{^_	Orkh}', "");
Expect(1, 68607, '\P{_	Orkh}', "");
Expect(0, 68607, '\P{^_	Orkh}', "");
Error('\p{ isOrkh/a/}');
Error('\P{ isOrkh/a/}');
Expect(1, 68680, '\p{isorkh}', "");
Expect(0, 68680, '\p{^isorkh}', "");
Expect(0, 68680, '\P{isorkh}', "");
Expect(1, 68680, '\P{^isorkh}', "");
Expect(0, 68607, '\p{isorkh}', "");
Expect(1, 68607, '\p{^isorkh}', "");
Expect(1, 68607, '\P{isorkh}', "");
Expect(0, 68607, '\P{^isorkh}', "");
Expect(1, 68680, '\p{-IS	orkh}', "");
Expect(0, 68680, '\p{^-IS	orkh}', "");
Expect(0, 68680, '\P{-IS	orkh}', "");
Expect(1, 68680, '\P{^-IS	orkh}', "");
Expect(0, 68607, '\p{-IS	orkh}', "");
Expect(1, 68607, '\p{^-IS	orkh}', "");
Expect(1, 68607, '\P{-IS	orkh}', "");
Expect(0, 68607, '\P{^-IS	orkh}', "");
Error('\p{_:=Nonspacing	mark}');
Error('\P{_:=Nonspacing	mark}');
Expect(1, 879, '\p{nonspacingmark}', "");
Expect(0, 879, '\p{^nonspacingmark}', "");
Expect(0, 879, '\P{nonspacingmark}', "");
Expect(1, 879, '\P{^nonspacingmark}', "");
Expect(0, 767, '\p{nonspacingmark}', "");
Expect(1, 767, '\p{^nonspacingmark}', "");
Expect(1, 767, '\P{nonspacingmark}', "");
Expect(0, 767, '\P{^nonspacingmark}', "");
Expect(1, 879, '\p{ NonspacingMARK}', "");
Expect(0, 879, '\p{^ NonspacingMARK}', "");
Expect(0, 879, '\P{ NonspacingMARK}', "");
Expect(1, 879, '\P{^ NonspacingMARK}', "");
Expect(0, 767, '\p{ NonspacingMARK}', "");
Expect(1, 767, '\p{^ NonspacingMARK}', "");
Expect(1, 767, '\P{ NonspacingMARK}', "");
Expect(0, 767, '\P{^ NonspacingMARK}', "");
Error('\p{_ IS_Nonspacing:=mark}');
Error('\P{_ IS_Nonspacing:=mark}');
Expect(1, 879, '\p{isnonspacingmark}', "");
Expect(0, 879, '\p{^isnonspacingmark}', "");
Expect(0, 879, '\P{isnonspacingmark}', "");
Expect(1, 879, '\P{^isnonspacingmark}', "");
Expect(0, 767, '\p{isnonspacingmark}', "");
Expect(1, 767, '\p{^isnonspacingmark}', "");
Expect(1, 767, '\P{isnonspacingmark}', "");
Expect(0, 767, '\P{^isnonspacingmark}', "");
Expect(1, 879, '\p{_	is-NONSPACING Mark}', "");
Expect(0, 879, '\p{^_	is-NONSPACING Mark}', "");
Expect(0, 879, '\P{_	is-NONSPACING Mark}', "");
Expect(1, 879, '\P{^_	is-NONSPACING Mark}', "");
Expect(0, 767, '\p{_	is-NONSPACING Mark}', "");
Expect(1, 767, '\p{^_	is-NONSPACING Mark}', "");
Expect(1, 767, '\P{_	is-NONSPACING Mark}', "");
Expect(0, 767, '\P{^_	is-NONSPACING Mark}', "");
Error('\p{-MN/a/}');
Error('\P{-MN/a/}');
Expect(1, 879, '\p{mn}', "");
Expect(0, 879, '\p{^mn}', "");
Expect(0, 879, '\P{mn}', "");
Expect(1, 879, '\P{^mn}', "");
Expect(0, 767, '\p{mn}', "");
Expect(1, 767, '\p{^mn}', "");
Expect(1, 767, '\P{mn}', "");
Expect(0, 767, '\P{^mn}', "");
Expect(1, 879, '\p{	MN}', "");
Expect(0, 879, '\p{^	MN}', "");
Expect(0, 879, '\P{	MN}', "");
Expect(1, 879, '\P{^	MN}', "");
Expect(0, 767, '\p{	MN}', "");
Expect(1, 767, '\p{^	MN}', "");
Expect(1, 767, '\P{	MN}', "");
Expect(0, 767, '\P{^	MN}', "");
Error('\p{ 	IS:=mn}');
Error('\P{ 	IS:=mn}');
Expect(1, 879, '\p{ismn}', "");
Expect(0, 879, '\p{^ismn}', "");
Expect(0, 879, '\P{ismn}', "");
Expect(1, 879, '\P{^ismn}', "");
Expect(0, 767, '\p{ismn}', "");
Expect(1, 767, '\p{^ismn}', "");
Expect(1, 767, '\P{ismn}', "");
Expect(0, 767, '\P{^ismn}', "");
Expect(1, 879, '\p{ _IsMn}', "");
Expect(0, 879, '\p{^ _IsMn}', "");
Expect(0, 879, '\P{ _IsMn}', "");
Expect(1, 879, '\P{^ _IsMn}', "");
Expect(0, 767, '\p{ _IsMn}', "");
Expect(1, 767, '\p{^ _IsMn}', "");
Expect(1, 767, '\P{ _IsMn}', "");
Expect(0, 767, '\P{^ _IsMn}', "");
Error('\p{/a/	 Lisu}');
Error('\P{/a/	 Lisu}');
Expect(1, 42239, '\p{lisu}', "");
Expect(0, 42239, '\p{^lisu}', "");
Expect(0, 42239, '\P{lisu}', "");
Expect(1, 42239, '\P{^lisu}', "");
Expect(0, 42191, '\p{lisu}', "");
Expect(1, 42191, '\p{^lisu}', "");
Expect(1, 42191, '\P{lisu}', "");
Expect(0, 42191, '\P{^lisu}', "");
Expect(1, 42239, '\p{--LISU}', "");
Expect(0, 42239, '\p{^--LISU}', "");
Expect(0, 42239, '\P{--LISU}', "");
Expect(1, 42239, '\P{^--LISU}', "");
Expect(0, 42191, '\p{--LISU}', "");
Expect(1, 42191, '\p{^--LISU}', "");
Expect(1, 42191, '\P{--LISU}', "");
Expect(0, 42191, '\P{^--LISU}', "");
Error('\p{	Is/a/lisu}');
Error('\P{	Is/a/lisu}');
Expect(1, 42239, '\p{islisu}', "");
Expect(0, 42239, '\p{^islisu}', "");
Expect(0, 42239, '\P{islisu}', "");
Expect(1, 42239, '\P{^islisu}', "");
Expect(0, 42191, '\p{islisu}', "");
Expect(1, 42191, '\p{^islisu}', "");
Expect(1, 42191, '\P{islisu}', "");
Expect(0, 42191, '\P{^islisu}', "");
Expect(1, 42239, '\p{_ Is Lisu}', "");
Expect(0, 42239, '\p{^_ Is Lisu}', "");
Expect(0, 42239, '\P{_ Is Lisu}', "");
Expect(1, 42239, '\P{^_ Is Lisu}', "");
Expect(0, 42191, '\p{_ Is Lisu}', "");
Expect(1, 42191, '\p{^_ Is Lisu}', "");
Expect(1, 42191, '\P{_ Is Lisu}', "");
Expect(0, 42191, '\P{^_ Is Lisu}', "");
Error('\p{/a/Full_Composition_EXCLUSION}');
Error('\P{/a/Full_Composition_EXCLUSION}');
Expect(1, 833, '\p{fullcompositionexclusion}', "");
Expect(0, 833, '\p{^fullcompositionexclusion}', "");
Expect(0, 833, '\P{fullcompositionexclusion}', "");
Expect(1, 833, '\P{^fullcompositionexclusion}', "");
Expect(0, 831, '\p{fullcompositionexclusion}', "");
Expect(1, 831, '\p{^fullcompositionexclusion}', "");
Expect(1, 831, '\P{fullcompositionexclusion}', "");
Expect(0, 831, '\P{^fullcompositionexclusion}', "");
Expect(1, 833, '\p{-_full_Composition-EXCLUSION}', "");
Expect(0, 833, '\p{^-_full_Composition-EXCLUSION}', "");
Expect(0, 833, '\P{-_full_Composition-EXCLUSION}', "");
Expect(1, 833, '\P{^-_full_Composition-EXCLUSION}', "");
Expect(0, 831, '\p{-_full_Composition-EXCLUSION}', "");
Expect(1, 831, '\p{^-_full_Composition-EXCLUSION}', "");
Expect(1, 831, '\P{-_full_Composition-EXCLUSION}', "");
Expect(0, 831, '\P{^-_full_Composition-EXCLUSION}', "");
Error('\p{ Is/a/Full-composition Exclusion}');
Error('\P{ Is/a/Full-composition Exclusion}');
Expect(1, 833, '\p{isfullcompositionexclusion}', "");
Expect(0, 833, '\p{^isfullcompositionexclusion}', "");
Expect(0, 833, '\P{isfullcompositionexclusion}', "");
Expect(1, 833, '\P{^isfullcompositionexclusion}', "");
Expect(0, 831, '\p{isfullcompositionexclusion}', "");
Expect(1, 831, '\p{^isfullcompositionexclusion}', "");
Expect(1, 831, '\P{isfullcompositionexclusion}', "");
Expect(0, 831, '\P{^isfullcompositionexclusion}', "");
Expect(1, 833, '\p{ Is-Full	COMPOSITION Exclusion}', "");
Expect(0, 833, '\p{^ Is-Full	COMPOSITION Exclusion}', "");
Expect(0, 833, '\P{ Is-Full	COMPOSITION Exclusion}', "");
Expect(1, 833, '\P{^ Is-Full	COMPOSITION Exclusion}', "");
Expect(0, 831, '\p{ Is-Full	COMPOSITION Exclusion}', "");
Expect(1, 831, '\p{^ Is-Full	COMPOSITION Exclusion}', "");
Expect(1, 831, '\P{ Is-Full	COMPOSITION Exclusion}', "");
Expect(0, 831, '\P{^ Is-Full	COMPOSITION Exclusion}', "");
Error('\p{--Comp_Ex/a/}');
Error('\P{--Comp_Ex/a/}');
Expect(1, 833, '\p{compex}', "");
Expect(0, 833, '\p{^compex}', "");
Expect(0, 833, '\P{compex}', "");
Expect(1, 833, '\P{^compex}', "");
Expect(0, 831, '\p{compex}', "");
Expect(1, 831, '\p{^compex}', "");
Expect(1, 831, '\P{compex}', "");
Expect(0, 831, '\P{^compex}', "");
Expect(1, 833, '\p{-Comp Ex}', "");
Expect(0, 833, '\p{^-Comp Ex}', "");
Expect(0, 833, '\P{-Comp Ex}', "");
Expect(1, 833, '\P{^-Comp Ex}', "");
Expect(0, 831, '\p{-Comp Ex}', "");
Expect(1, 831, '\p{^-Comp Ex}', "");
Expect(1, 831, '\P{-Comp Ex}', "");
Expect(0, 831, '\P{^-Comp Ex}', "");
Error('\p{	_is_Comp/a/ex}');
Error('\P{	_is_Comp/a/ex}');
Expect(1, 833, '\p{iscompex}', "");
Expect(0, 833, '\p{^iscompex}', "");
Expect(0, 833, '\P{iscompex}', "");
Expect(1, 833, '\P{^iscompex}', "");
Expect(0, 831, '\p{iscompex}', "");
Expect(1, 831, '\p{^iscompex}', "");
Expect(1, 831, '\P{iscompex}', "");
Expect(0, 831, '\P{^iscompex}', "");
Expect(1, 833, '\p{	_Is COMPEx}', "");
Expect(0, 833, '\p{^	_Is COMPEx}', "");
Expect(0, 833, '\P{	_Is COMPEx}', "");
Expect(1, 833, '\P{^	_Is COMPEx}', "");
Expect(0, 831, '\p{	_Is COMPEx}', "");
Expect(1, 831, '\p{^	_Is COMPEx}', "");
Expect(1, 831, '\P{	_Is COMPEx}', "");
Expect(0, 831, '\P{^	_Is COMPEx}', "");
Error('\p{_	Join	control/a/}');
Error('\P{_	Join	control/a/}');
Expect(1, 8205, '\p{joincontrol}', "");
Expect(0, 8205, '\p{^joincontrol}', "");
Expect(0, 8205, '\P{joincontrol}', "");
Expect(1, 8205, '\P{^joincontrol}', "");
Expect(0, 8203, '\p{joincontrol}', "");
Expect(1, 8203, '\p{^joincontrol}', "");
Expect(1, 8203, '\P{joincontrol}', "");
Expect(0, 8203, '\P{^joincontrol}', "");
Expect(1, 8205, '\p{- Join_control}', "");
Expect(0, 8205, '\p{^- Join_control}', "");
Expect(0, 8205, '\P{- Join_control}', "");
Expect(1, 8205, '\P{^- Join_control}', "");
Expect(0, 8203, '\p{- Join_control}', "");
Expect(1, 8203, '\p{^- Join_control}', "");
Expect(1, 8203, '\P{- Join_control}', "");
Expect(0, 8203, '\P{^- Join_control}', "");
Error('\p{	_IsJOIN control:=}');
Error('\P{	_IsJOIN control:=}');
Expect(1, 8205, '\p{isjoincontrol}', "");
Expect(0, 8205, '\p{^isjoincontrol}', "");
Expect(0, 8205, '\P{isjoincontrol}', "");
Expect(1, 8205, '\P{^isjoincontrol}', "");
Expect(0, 8203, '\p{isjoincontrol}', "");
Expect(1, 8203, '\p{^isjoincontrol}', "");
Expect(1, 8203, '\P{isjoincontrol}', "");
Expect(0, 8203, '\P{^isjoincontrol}', "");
Expect(1, 8205, '\p{_	Is join	CONTROL}', "");
Expect(0, 8205, '\p{^_	Is join	CONTROL}', "");
Expect(0, 8205, '\P{_	Is join	CONTROL}', "");
Expect(1, 8205, '\P{^_	Is join	CONTROL}', "");
Expect(0, 8203, '\p{_	Is join	CONTROL}', "");
Expect(1, 8203, '\p{^_	Is join	CONTROL}', "");
Expect(1, 8203, '\P{_	Is join	CONTROL}', "");
Expect(0, 8203, '\P{^_	Is join	CONTROL}', "");
Error('\p{-:=join-C}');
Error('\P{-:=join-C}');
Expect(1, 8205, '\p{joinc}', "");
Expect(0, 8205, '\p{^joinc}', "");
Expect(0, 8205, '\P{joinc}', "");
Expect(1, 8205, '\P{^joinc}', "");
Expect(0, 8203, '\p{joinc}', "");
Expect(1, 8203, '\p{^joinc}', "");
Expect(1, 8203, '\P{joinc}', "");
Expect(0, 8203, '\P{^joinc}', "");
Expect(1, 8205, '\p{		Join-c}', "");
Expect(0, 8205, '\p{^		Join-c}', "");
Expect(0, 8205, '\P{		Join-c}', "");
Expect(1, 8205, '\P{^		Join-c}', "");
Expect(0, 8203, '\p{		Join-c}', "");
Expect(1, 8203, '\p{^		Join-c}', "");
Expect(1, 8203, '\P{		Join-c}', "");
Expect(0, 8203, '\P{^		Join-c}', "");
Error('\p{/a/	-IsJoin	C}');
Error('\P{/a/	-IsJoin	C}');
Expect(1, 8205, '\p{isjoinc}', "");
Expect(0, 8205, '\p{^isjoinc}', "");
Expect(0, 8205, '\P{isjoinc}', "");
Expect(1, 8205, '\P{^isjoinc}', "");
Expect(0, 8203, '\p{isjoinc}', "");
Expect(1, 8203, '\p{^isjoinc}', "");
Expect(1, 8203, '\P{isjoinc}', "");
Expect(0, 8203, '\P{^isjoinc}', "");
Expect(1, 8205, '\p{ _IS Join-c}', "");
Expect(0, 8205, '\p{^ _IS Join-c}', "");
Expect(0, 8205, '\P{ _IS Join-c}', "");
Expect(1, 8205, '\P{^ _IS Join-c}', "");
Expect(0, 8203, '\p{ _IS Join-c}', "");
Expect(1, 8203, '\p{^ _IS Join-c}', "");
Expect(1, 8203, '\P{ _IS Join-c}', "");
Expect(0, 8203, '\P{^ _IS Join-c}', "");
Error('\p{/a/upper}');
Error('\P{/a/upper}');
Expect(1, 90, '\p{upper}', "");
Expect(0, 90, '\p{^upper}', "");
Expect(0, 90, '\P{upper}', "");
Expect(1, 90, '\P{^upper}', "");
Expect(0, 64, '\p{upper}', "");
Expect(1, 64, '\p{^upper}', "");
Expect(1, 64, '\P{upper}', "");
Expect(0, 64, '\P{^upper}', "");
Expect(1, 90, '\p{__upper}', "");
Expect(0, 90, '\p{^__upper}', "");
Expect(0, 90, '\P{__upper}', "");
Expect(1, 90, '\P{^__upper}', "");
Expect(0, 64, '\p{__upper}', "");
Expect(1, 64, '\p{^__upper}', "");
Expect(1, 64, '\P{__upper}', "");
Expect(0, 64, '\P{^__upper}', "");
Error('\p{/a/Is Upper}');
Error('\P{/a/Is Upper}');
Expect(1, 90, '\p{isupper}', "");
Expect(0, 90, '\p{^isupper}', "");
Expect(0, 90, '\P{isupper}', "");
Expect(1, 90, '\P{^isupper}', "");
Expect(0, 64, '\p{isupper}', "");
Expect(1, 64, '\p{^isupper}', "");
Expect(1, 64, '\P{isupper}', "");
Expect(0, 64, '\P{^isupper}', "");
Expect(1, 90, '\p{--is-Upper}', "");
Expect(0, 90, '\p{^--is-Upper}', "");
Expect(0, 90, '\P{--is-Upper}', "");
Expect(1, 90, '\P{^--is-Upper}', "");
Expect(0, 64, '\p{--is-Upper}', "");
Expect(1, 64, '\p{^--is-Upper}', "");
Expect(1, 64, '\P{--is-Upper}', "");
Expect(0, 64, '\P{^--is-Upper}', "");
Error('\p{:=-UPPERCASE}');
Error('\P{:=-UPPERCASE}');
Expect(1, 90, '\p{uppercase}', "");
Expect(0, 90, '\p{^uppercase}', "");
Expect(0, 90, '\P{uppercase}', "");
Expect(1, 90, '\P{^uppercase}', "");
Expect(0, 64, '\p{uppercase}', "");
Expect(1, 64, '\p{^uppercase}', "");
Expect(1, 64, '\P{uppercase}', "");
Expect(0, 64, '\P{^uppercase}', "");
Expect(1, 90, '\p{_-UPPERCASE}', "");
Expect(0, 90, '\p{^_-UPPERCASE}', "");
Expect(0, 90, '\P{_-UPPERCASE}', "");
Expect(1, 90, '\P{^_-UPPERCASE}', "");
Expect(0, 64, '\p{_-UPPERCASE}', "");
Expect(1, 64, '\p{^_-UPPERCASE}', "");
Expect(1, 64, '\P{_-UPPERCASE}', "");
Expect(0, 64, '\P{^_-UPPERCASE}', "");
Error('\p{:=Is-UPPERCASE}');
Error('\P{:=Is-UPPERCASE}');
Expect(1, 90, '\p{isuppercase}', "");
Expect(0, 90, '\p{^isuppercase}', "");
Expect(0, 90, '\P{isuppercase}', "");
Expect(1, 90, '\P{^isuppercase}', "");
Expect(0, 64, '\p{isuppercase}', "");
Expect(1, 64, '\p{^isuppercase}', "");
Expect(1, 64, '\P{isuppercase}', "");
Expect(0, 64, '\P{^isuppercase}', "");
Expect(1, 90, '\p{_IS	Uppercase}', "");
Expect(0, 90, '\p{^_IS	Uppercase}', "");
Expect(0, 90, '\P{_IS	Uppercase}', "");
Expect(1, 90, '\P{^_IS	Uppercase}', "");
Expect(0, 64, '\p{_IS	Uppercase}', "");
Expect(1, 64, '\p{^_IS	Uppercase}', "");
Expect(1, 64, '\P{_IS	Uppercase}', "");
Expect(0, 64, '\P{^_IS	Uppercase}', "");
Error('\p{ :=braille_Patterns}');
Error('\P{ :=braille_Patterns}');
Expect(1, 10495, '\p{braillepatterns}', "");
Expect(0, 10495, '\p{^braillepatterns}', "");
Expect(0, 10495, '\P{braillepatterns}', "");
Expect(1, 10495, '\P{^braillepatterns}', "");
Expect(0, 10239, '\p{braillepatterns}', "");
Expect(1, 10239, '\p{^braillepatterns}', "");
Expect(1, 10239, '\P{braillepatterns}', "");
Expect(0, 10239, '\P{^braillepatterns}', "");
Expect(1, 10495, '\p{ braille-Patterns}', "");
Expect(0, 10495, '\p{^ braille-Patterns}', "");
Expect(0, 10495, '\P{ braille-Patterns}', "");
Expect(1, 10495, '\P{^ braille-Patterns}', "");
Expect(0, 10239, '\p{ braille-Patterns}', "");
Expect(1, 10239, '\p{^ braille-Patterns}', "");
Expect(1, 10239, '\P{ braille-Patterns}', "");
Expect(0, 10239, '\P{^ braille-Patterns}', "");
Error('\p{-_ISbraille_Patterns:=}');
Error('\P{-_ISbraille_Patterns:=}');
Expect(1, 10495, '\p{isbraillepatterns}', "");
Expect(0, 10495, '\p{^isbraillepatterns}', "");
Expect(0, 10495, '\P{isbraillepatterns}', "");
Expect(1, 10495, '\P{^isbraillepatterns}', "");
Expect(0, 10239, '\p{isbraillepatterns}', "");
Expect(1, 10239, '\p{^isbraillepatterns}', "");
Expect(1, 10239, '\P{isbraillepatterns}', "");
Expect(0, 10239, '\P{^isbraillepatterns}', "");
Expect(1, 10495, '\p{Is BRAILLE-patterns}', "");
Expect(0, 10495, '\p{^Is BRAILLE-patterns}', "");
Expect(0, 10495, '\P{Is BRAILLE-patterns}', "");
Expect(1, 10495, '\P{^Is BRAILLE-patterns}', "");
Expect(0, 10239, '\p{Is BRAILLE-patterns}', "");
Expect(1, 10239, '\p{^Is BRAILLE-patterns}', "");
Expect(1, 10239, '\P{Is BRAILLE-patterns}', "");
Expect(0, 10239, '\P{^Is BRAILLE-patterns}', "");
Error('\p{ 	IN Braille/a/Patterns}');
Error('\P{ 	IN Braille/a/Patterns}');
Expect(1, 10495, '\p{inbraillepatterns}', "");
Expect(0, 10495, '\p{^inbraillepatterns}', "");
Expect(0, 10495, '\P{inbraillepatterns}', "");
Expect(1, 10495, '\P{^inbraillepatterns}', "");
Expect(0, 10239, '\p{inbraillepatterns}', "");
Expect(1, 10239, '\p{^inbraillepatterns}', "");
Expect(1, 10239, '\P{inbraillepatterns}', "");
Expect(0, 10239, '\P{^inbraillepatterns}', "");
Expect(1, 10495, '\p{__INbraille patterns}', "");
Expect(0, 10495, '\p{^__INbraille patterns}', "");
Expect(0, 10495, '\P{__INbraille patterns}', "");
Expect(1, 10495, '\P{^__INbraille patterns}', "");
Expect(0, 10239, '\p{__INbraille patterns}', "");
Expect(1, 10239, '\p{^__INbraille patterns}', "");
Expect(1, 10239, '\P{__INbraille patterns}', "");
Expect(0, 10239, '\P{^__INbraille patterns}', "");
Error('\p{_/a/katakana}');
Error('\P{_/a/katakana}');
Expect(1, 12538, '\p{katakana}', "");
Expect(0, 12538, '\p{^katakana}', "");
Expect(0, 12538, '\P{katakana}', "");
Expect(1, 12538, '\P{^katakana}', "");
Expect(0, 12448, '\p{katakana}', "");
Expect(1, 12448, '\p{^katakana}', "");
Expect(1, 12448, '\P{katakana}', "");
Expect(0, 12448, '\P{^katakana}', "");
Expect(1, 12538, '\p{-	KATAKANA}', "");
Expect(0, 12538, '\p{^-	KATAKANA}', "");
Expect(0, 12538, '\P{-	KATAKANA}', "");
Expect(1, 12538, '\P{^-	KATAKANA}', "");
Expect(0, 12448, '\p{-	KATAKANA}', "");
Expect(1, 12448, '\p{^-	KATAKANA}', "");
Expect(1, 12448, '\P{-	KATAKANA}', "");
Expect(0, 12448, '\P{^-	KATAKANA}', "");
Error('\p{/a/	IS katakana}');
Error('\P{/a/	IS katakana}');
Expect(1, 12538, '\p{iskatakana}', "");
Expect(0, 12538, '\p{^iskatakana}', "");
Expect(0, 12538, '\P{iskatakana}', "");
Expect(1, 12538, '\P{^iskatakana}', "");
Expect(0, 12448, '\p{iskatakana}', "");
Expect(1, 12448, '\p{^iskatakana}', "");
Expect(1, 12448, '\P{iskatakana}', "");
Expect(0, 12448, '\P{^iskatakana}', "");
Expect(1, 12538, '\p{ IS-KATAKANA}', "");
Expect(0, 12538, '\p{^ IS-KATAKANA}', "");
Expect(0, 12538, '\P{ IS-KATAKANA}', "");
Expect(1, 12538, '\P{^ IS-KATAKANA}', "");
Expect(0, 12448, '\p{ IS-KATAKANA}', "");
Expect(1, 12448, '\p{^ IS-KATAKANA}', "");
Expect(1, 12448, '\P{ IS-KATAKANA}', "");
Expect(0, 12448, '\P{^ IS-KATAKANA}', "");
Error('\p{- Kana/a/}');
Error('\P{- Kana/a/}');
Expect(1, 12538, '\p{kana}', "");
Expect(0, 12538, '\p{^kana}', "");
Expect(0, 12538, '\P{kana}', "");
Expect(1, 12538, '\P{^kana}', "");
Expect(0, 12448, '\p{kana}', "");
Expect(1, 12448, '\p{^kana}', "");
Expect(1, 12448, '\P{kana}', "");
Expect(0, 12448, '\P{^kana}', "");
Expect(1, 12538, '\p{ kana}', "");
Expect(0, 12538, '\p{^ kana}', "");
Expect(0, 12538, '\P{ kana}', "");
Expect(1, 12538, '\P{^ kana}', "");
Expect(0, 12448, '\p{ kana}', "");
Expect(1, 12448, '\p{^ kana}', "");
Expect(1, 12448, '\P{ kana}', "");
Expect(0, 12448, '\P{^ kana}', "");
Error('\p{- IsKana/a/}');
Error('\P{- IsKana/a/}');
Expect(1, 12538, '\p{iskana}', "");
Expect(0, 12538, '\p{^iskana}', "");
Expect(0, 12538, '\P{iskana}', "");
Expect(1, 12538, '\P{^iskana}', "");
Expect(0, 12448, '\p{iskana}', "");
Expect(1, 12448, '\p{^iskana}', "");
Expect(1, 12448, '\P{iskana}', "");
Expect(0, 12448, '\P{^iskana}', "");
Expect(1, 12538, '\p{-	IS_Kana}', "");
Expect(0, 12538, '\p{^-	IS_Kana}', "");
Expect(0, 12538, '\P{-	IS_Kana}', "");
Expect(1, 12538, '\P{^-	IS_Kana}', "");
Expect(0, 12448, '\p{-	IS_Kana}', "");
Expect(1, 12448, '\p{^-	IS_Kana}', "");
Expect(1, 12448, '\P{-	IS_Kana}', "");
Expect(0, 12448, '\P{^-	IS_Kana}', "");
Error('\p{pattern:=White SPACE}');
Error('\P{pattern:=White SPACE}');
Expect(1, 13, '\p{patternwhitespace}', "");
Expect(0, 13, '\p{^patternwhitespace}', "");
Expect(0, 13, '\P{patternwhitespace}', "");
Expect(1, 13, '\P{^patternwhitespace}', "");
Expect(0, 8, '\p{patternwhitespace}', "");
Expect(1, 8, '\p{^patternwhitespace}', "");
Expect(1, 8, '\P{patternwhitespace}', "");
Expect(0, 8, '\P{^patternwhitespace}', "");
Expect(1, 13, '\p{ 	Pattern WHITESpace}', "");
Expect(0, 13, '\p{^ 	Pattern WHITESpace}', "");
Expect(0, 13, '\P{ 	Pattern WHITESpace}', "");
Expect(1, 13, '\P{^ 	Pattern WHITESpace}', "");
Expect(0, 8, '\p{ 	Pattern WHITESpace}', "");
Expect(1, 8, '\p{^ 	Pattern WHITESpace}', "");
Expect(1, 8, '\P{ 	Pattern WHITESpace}', "");
Expect(0, 8, '\P{^ 	Pattern WHITESpace}', "");
Error('\p{-	isPattern/a/WHITE_Space}');
Error('\P{-	isPattern/a/WHITE_Space}');
Expect(1, 13, '\p{ispatternwhitespace}', "");
Expect(0, 13, '\p{^ispatternwhitespace}', "");
Expect(0, 13, '\P{ispatternwhitespace}', "");
Expect(1, 13, '\P{^ispatternwhitespace}', "");
Expect(0, 8, '\p{ispatternwhitespace}', "");
Expect(1, 8, '\p{^ispatternwhitespace}', "");
Expect(1, 8, '\P{ispatternwhitespace}', "");
Expect(0, 8, '\P{^ispatternwhitespace}', "");
Expect(1, 13, '\p{- Is_PATTERN	White-Space}', "");
Expect(0, 13, '\p{^- Is_PATTERN	White-Space}', "");
Expect(0, 13, '\P{- Is_PATTERN	White-Space}', "");
Expect(1, 13, '\P{^- Is_PATTERN	White-Space}', "");
Expect(0, 8, '\p{- Is_PATTERN	White-Space}', "");
Expect(1, 8, '\p{^- Is_PATTERN	White-Space}', "");
Expect(1, 8, '\P{- Is_PATTERN	White-Space}', "");
Expect(0, 8, '\P{^- Is_PATTERN	White-Space}', "");
Error('\p{-Pat:=ws}');
Error('\P{-Pat:=ws}');
Expect(1, 13, '\p{patws}', "");
Expect(0, 13, '\p{^patws}', "");
Expect(0, 13, '\P{patws}', "");
Expect(1, 13, '\P{^patws}', "");
Expect(0, 8, '\p{patws}', "");
Expect(1, 8, '\p{^patws}', "");
Expect(1, 8, '\P{patws}', "");
Expect(0, 8, '\P{^patws}', "");
Expect(1, 13, '\p{ PAT ws}', "");
Expect(0, 13, '\p{^ PAT ws}', "");
Expect(0, 13, '\P{ PAT ws}', "");
Expect(1, 13, '\P{^ PAT ws}', "");
Expect(0, 8, '\p{ PAT ws}', "");
Expect(1, 8, '\p{^ PAT ws}', "");
Expect(1, 8, '\P{ PAT ws}', "");
Expect(0, 8, '\P{^ PAT ws}', "");
Error('\p{/a/Is	Pat-WS}');
Error('\P{/a/Is	Pat-WS}');
Expect(1, 13, '\p{ispatws}', "");
Expect(0, 13, '\p{^ispatws}', "");
Expect(0, 13, '\P{ispatws}', "");
Expect(1, 13, '\P{^ispatws}', "");
Expect(0, 8, '\p{ispatws}', "");
Expect(1, 8, '\p{^ispatws}', "");
Expect(1, 8, '\P{ispatws}', "");
Expect(0, 8, '\P{^ispatws}', "");
Expect(1, 13, '\p{ 	is_Pat-ws}', "");
Expect(0, 13, '\p{^ 	is_Pat-ws}', "");
Expect(0, 13, '\P{ 	is_Pat-ws}', "");
Expect(1, 13, '\P{^ 	is_Pat-ws}', "");
Expect(0, 8, '\p{ 	is_Pat-ws}', "");
Expect(1, 8, '\p{^ 	is_Pat-ws}', "");
Expect(1, 8, '\P{ 	is_Pat-ws}', "");
Expect(0, 8, '\P{^ 	is_Pat-ws}', "");
Error('\p{ /a/NoncharacterCode	Point}');
Error('\P{ /a/NoncharacterCode	Point}');
Expect(0, 64975, '\p{noncharactercodepoint}', "");
Expect(1, 64975, '\p{^noncharactercodepoint}', "");
Expect(1, 64975, '\P{noncharactercodepoint}', "");
Expect(0, 64975, '\P{^noncharactercodepoint}', "");
Expect(0, 64975, '\p{ NoncharacterCode-Point}', "");
Expect(1, 64975, '\p{^ NoncharacterCode-Point}', "");
Expect(1, 64975, '\P{ NoncharacterCode-Point}', "");
Expect(0, 64975, '\P{^ NoncharacterCode-Point}', "");
Error('\p{	:=is	noncharacter_Code_POINT}');
Error('\P{	:=is	noncharacter_Code_POINT}');
Expect(0, 64975, '\p{isnoncharactercodepoint}', "");
Expect(1, 64975, '\p{^isnoncharactercodepoint}', "");
Expect(1, 64975, '\P{isnoncharactercodepoint}', "");
Expect(0, 64975, '\P{^isnoncharactercodepoint}', "");
Expect(0, 64975, '\p{-isNONCHARACTERcodepoint}', "");
Expect(1, 64975, '\p{^-isNONCHARACTERcodepoint}', "");
Expect(1, 64975, '\P{-isNONCHARACTERcodepoint}', "");
Expect(0, 64975, '\P{^-isNONCHARACTERcodepoint}', "");
Error('\p{ /a/NCHAR}');
Error('\P{ /a/NCHAR}');
Expect(0, 64975, '\p{nchar}', "");
Expect(1, 64975, '\p{^nchar}', "");
Expect(1, 64975, '\P{nchar}', "");
Expect(0, 64975, '\P{^nchar}', "");
Expect(0, 64975, '\p{--NChar}', "");
Expect(1, 64975, '\p{^--NChar}', "");
Expect(1, 64975, '\P{--NChar}', "");
Expect(0, 64975, '\P{^--NChar}', "");
Error('\p{-:=IS	NChar}');
Error('\P{-:=IS	NChar}');
Expect(0, 64975, '\p{isnchar}', "");
Expect(1, 64975, '\p{^isnchar}', "");
Expect(1, 64975, '\P{isnchar}', "");
Expect(0, 64975, '\P{^isnchar}', "");
Expect(0, 64975, '\p{_ISNChar}', "");
Expect(1, 64975, '\p{^_ISNChar}', "");
Expect(1, 64975, '\P{_ISNChar}', "");
Expect(0, 64975, '\P{^_ISNChar}', "");
Error('\p{ 	in:=OGHAM}');
Error('\P{ 	in:=OGHAM}');
Expect(1, 5791, '\p{inogham}', "");
Expect(0, 5791, '\p{^inogham}', "");
Expect(0, 5791, '\P{inogham}', "");
Expect(1, 5791, '\P{^inogham}', "");
Expect(0, 5759, '\p{inogham}', "");
Expect(1, 5759, '\p{^inogham}', "");
Expect(1, 5759, '\P{inogham}', "");
Expect(0, 5759, '\P{^inogham}', "");
Expect(1, 5791, '\p{	 In-OGHAM}', "");
Expect(0, 5791, '\p{^	 In-OGHAM}', "");
Expect(0, 5791, '\P{	 In-OGHAM}', "");
Expect(1, 5791, '\P{^	 In-OGHAM}', "");
Expect(0, 5759, '\p{	 In-OGHAM}', "");
Expect(1, 5759, '\p{^	 In-OGHAM}', "");
Expect(1, 5759, '\P{	 In-OGHAM}', "");
Expect(0, 5759, '\P{^	 In-OGHAM}', "");
Error('\p{:=	 Old south	arabian}');
Error('\P{:=	 Old south	arabian}');
Expect(1, 68223, '\p{oldsoutharabian}', "");
Expect(0, 68223, '\p{^oldsoutharabian}', "");
Expect(0, 68223, '\P{oldsoutharabian}', "");
Expect(1, 68223, '\P{^oldsoutharabian}', "");
Expect(0, 68191, '\p{oldsoutharabian}', "");
Expect(1, 68191, '\p{^oldsoutharabian}', "");
Expect(1, 68191, '\P{oldsoutharabian}', "");
Expect(0, 68191, '\P{^oldsoutharabian}', "");
Expect(1, 68223, '\p{-Old-South	Arabian}', "");
Expect(0, 68223, '\p{^-Old-South	Arabian}', "");
Expect(0, 68223, '\P{-Old-South	Arabian}', "");
Expect(1, 68223, '\P{^-Old-South	Arabian}', "");
Expect(0, 68191, '\p{-Old-South	Arabian}', "");
Expect(1, 68191, '\p{^-Old-South	Arabian}', "");
Expect(1, 68191, '\P{-Old-South	Arabian}', "");
Expect(0, 68191, '\P{^-Old-South	Arabian}', "");
Error('\p{-:=Is	Old-South_arabian}');
Error('\P{-:=Is	Old-South_arabian}');
Expect(1, 68223, '\p{isoldsoutharabian}', "");
Expect(0, 68223, '\p{^isoldsoutharabian}', "");
Expect(0, 68223, '\P{isoldsoutharabian}', "");
Expect(1, 68223, '\P{^isoldsoutharabian}', "");
Expect(0, 68191, '\p{isoldsoutharabian}', "");
Expect(1, 68191, '\p{^isoldsoutharabian}', "");
Expect(1, 68191, '\P{isoldsoutharabian}', "");
Expect(0, 68191, '\P{^isoldsoutharabian}', "");
Expect(1, 68223, '\p{ -IS_OldSouth ARABIAN}', "");
Expect(0, 68223, '\p{^ -IS_OldSouth ARABIAN}', "");
Expect(0, 68223, '\P{ -IS_OldSouth ARABIAN}', "");
Expect(1, 68223, '\P{^ -IS_OldSouth ARABIAN}', "");
Expect(0, 68191, '\p{ -IS_OldSouth ARABIAN}', "");
Expect(1, 68191, '\p{^ -IS_OldSouth ARABIAN}', "");
Expect(1, 68191, '\P{ -IS_OldSouth ARABIAN}', "");
Expect(0, 68191, '\P{^ -IS_OldSouth ARABIAN}', "");
Error('\p{/a/_	Sarb}');
Error('\P{/a/_	Sarb}');
Expect(1, 68223, '\p{sarb}', "");
Expect(0, 68223, '\p{^sarb}', "");
Expect(0, 68223, '\P{sarb}', "");
Expect(1, 68223, '\P{^sarb}', "");
Expect(0, 68191, '\p{sarb}', "");
Expect(1, 68191, '\p{^sarb}', "");
Expect(1, 68191, '\P{sarb}', "");
Expect(0, 68191, '\P{^sarb}', "");
Expect(1, 68223, '\p{  Sarb}', "");
Expect(0, 68223, '\p{^  Sarb}', "");
Expect(0, 68223, '\P{  Sarb}', "");
Expect(1, 68223, '\P{^  Sarb}', "");
Expect(0, 68191, '\p{  Sarb}', "");
Expect(1, 68191, '\p{^  Sarb}', "");
Expect(1, 68191, '\P{  Sarb}', "");
Expect(0, 68191, '\P{^  Sarb}', "");
Error('\p{/a/	IsSarb}');
Error('\P{/a/	IsSarb}');
Expect(1, 68223, '\p{issarb}', "");
Expect(0, 68223, '\p{^issarb}', "");
Expect(0, 68223, '\P{issarb}', "");
Expect(1, 68223, '\P{^issarb}', "");
Expect(0, 68191, '\p{issarb}', "");
Expect(1, 68191, '\p{^issarb}', "");
Expect(1, 68191, '\P{issarb}', "");
Expect(0, 68191, '\P{^issarb}', "");
Expect(1, 68223, '\p{_ Is-Sarb}', "");
Expect(0, 68223, '\p{^_ Is-Sarb}', "");
Expect(0, 68223, '\P{_ Is-Sarb}', "");
Expect(1, 68223, '\P{^_ Is-Sarb}', "");
Expect(0, 68191, '\p{_ Is-Sarb}', "");
Expect(1, 68191, '\p{^_ Is-Sarb}', "");
Expect(1, 68191, '\P{_ Is-Sarb}', "");
Expect(0, 68191, '\P{^_ Is-Sarb}', "");
Error('\p{ :=Alphabetic_Presentation	Forms}');
Error('\P{ :=Alphabetic_Presentation	Forms}');
Expect(1, 64335, '\p{alphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^alphabeticpresentationforms}', "");
Expect(0, 64335, '\P{alphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^alphabeticpresentationforms}', "");
Expect(0, 64255, '\p{alphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^alphabeticpresentationforms}', "");
Expect(1, 64255, '\P{alphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^alphabeticpresentationforms}', "");
Expect(1, 64335, '\p{_ Alphabetic	PRESENTATIONFORMS}', "");
Expect(0, 64335, '\p{^_ Alphabetic	PRESENTATIONFORMS}', "");
Expect(0, 64335, '\P{_ Alphabetic	PRESENTATIONFORMS}', "");
Expect(1, 64335, '\P{^_ Alphabetic	PRESENTATIONFORMS}', "");
Expect(0, 64255, '\p{_ Alphabetic	PRESENTATIONFORMS}', "");
Expect(1, 64255, '\p{^_ Alphabetic	PRESENTATIONFORMS}', "");
Expect(1, 64255, '\P{_ Alphabetic	PRESENTATIONFORMS}', "");
Expect(0, 64255, '\P{^_ Alphabetic	PRESENTATIONFORMS}', "");
Error('\p{-IS/a/Alphabetic presentationforms}');
Error('\P{-IS/a/Alphabetic presentationforms}');
Expect(1, 64335, '\p{isalphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^isalphabeticpresentationforms}', "");
Expect(0, 64335, '\P{isalphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^isalphabeticpresentationforms}', "");
Expect(0, 64255, '\p{isalphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^isalphabeticpresentationforms}', "");
Expect(1, 64255, '\P{isalphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^isalphabeticpresentationforms}', "");
Expect(1, 64335, '\p{-Is_alphabetic presentation	Forms}', "");
Expect(0, 64335, '\p{^-Is_alphabetic presentation	Forms}', "");
Expect(0, 64335, '\P{-Is_alphabetic presentation	Forms}', "");
Expect(1, 64335, '\P{^-Is_alphabetic presentation	Forms}', "");
Expect(0, 64255, '\p{-Is_alphabetic presentation	Forms}', "");
Expect(1, 64255, '\p{^-Is_alphabetic presentation	Forms}', "");
Expect(1, 64255, '\P{-Is_alphabetic presentation	Forms}', "");
Expect(0, 64255, '\P{^-Is_alphabetic presentation	Forms}', "");
Error('\p{/a/  In_Alphabetic PRESENTATIONForms}');
Error('\P{/a/  In_Alphabetic PRESENTATIONForms}');
Expect(1, 64335, '\p{inalphabeticpresentationforms}', "");
Expect(0, 64335, '\p{^inalphabeticpresentationforms}', "");
Expect(0, 64335, '\P{inalphabeticpresentationforms}', "");
Expect(1, 64335, '\P{^inalphabeticpresentationforms}', "");
Expect(0, 64255, '\p{inalphabeticpresentationforms}', "");
Expect(1, 64255, '\p{^inalphabeticpresentationforms}', "");
Expect(1, 64255, '\P{inalphabeticpresentationforms}', "");
Expect(0, 64255, '\P{^inalphabeticpresentationforms}', "");
Expect(1, 64335, '\p{-IN-alphabetic	presentation-Forms}', "");
Expect(0, 64335, '\p{^-IN-alphabetic	presentation-Forms}', "");
Expect(0, 64335, '\P{-IN-alphabetic	presentation-Forms}', "");
Expect(1, 64335, '\P{^-IN-alphabetic	presentation-Forms}', "");
Expect(0, 64255, '\p{-IN-alphabetic	presentation-Forms}', "");
Expect(1, 64255, '\p{^-IN-alphabetic	presentation-Forms}', "");
Expect(1, 64255, '\P{-IN-alphabetic	presentation-Forms}', "");
Expect(0, 64255, '\P{^-IN-alphabetic	presentation-Forms}', "");
Error('\p{__DOMINO-tiles:=}');
Error('\P{__DOMINO-tiles:=}');
Expect(1, 127135, '\p{dominotiles}', "");
Expect(0, 127135, '\p{^dominotiles}', "");
Expect(0, 127135, '\P{dominotiles}', "");
Expect(1, 127135, '\P{^dominotiles}', "");
Expect(0, 127023, '\p{dominotiles}', "");
Expect(1, 127023, '\p{^dominotiles}', "");
Expect(1, 127023, '\P{dominotiles}', "");
Expect(0, 127023, '\P{^dominotiles}', "");
Expect(1, 127135, '\p{		Domino-Tiles}', "");
Expect(0, 127135, '\p{^		Domino-Tiles}', "");
Expect(0, 127135, '\P{		Domino-Tiles}', "");
Expect(1, 127135, '\P{^		Domino-Tiles}', "");
Expect(0, 127023, '\p{		Domino-Tiles}', "");
Expect(1, 127023, '\p{^		Domino-Tiles}', "");
Expect(1, 127023, '\P{		Domino-Tiles}', "");
Expect(0, 127023, '\P{^		Domino-Tiles}', "");
Error('\p{ :=IsDomino	Tiles}');
Error('\P{ :=IsDomino	Tiles}');
Expect(1, 127135, '\p{isdominotiles}', "");
Expect(0, 127135, '\p{^isdominotiles}', "");
Expect(0, 127135, '\P{isdominotiles}', "");
Expect(1, 127135, '\P{^isdominotiles}', "");
Expect(0, 127023, '\p{isdominotiles}', "");
Expect(1, 127023, '\p{^isdominotiles}', "");
Expect(1, 127023, '\P{isdominotiles}', "");
Expect(0, 127023, '\P{^isdominotiles}', "");
Expect(1, 127135, '\p{_IS_DominoTILES}', "");
Expect(0, 127135, '\p{^_IS_DominoTILES}', "");
Expect(0, 127135, '\P{_IS_DominoTILES}', "");
Expect(1, 127135, '\P{^_IS_DominoTILES}', "");
Expect(0, 127023, '\p{_IS_DominoTILES}', "");
Expect(1, 127023, '\p{^_IS_DominoTILES}', "");
Expect(1, 127023, '\P{_IS_DominoTILES}', "");
Expect(0, 127023, '\P{^_IS_DominoTILES}', "");
Error('\p{__In	domino	TILES/a/}');
Error('\P{__In	domino	TILES/a/}');
Expect(1, 127135, '\p{indominotiles}', "");
Expect(0, 127135, '\p{^indominotiles}', "");
Expect(0, 127135, '\P{indominotiles}', "");
Expect(1, 127135, '\P{^indominotiles}', "");
Expect(0, 127023, '\p{indominotiles}', "");
Expect(1, 127023, '\p{^indominotiles}', "");
Expect(1, 127023, '\P{indominotiles}', "");
Expect(0, 127023, '\P{^indominotiles}', "");
Expect(1, 127135, '\p{_INDominoTILES}', "");
Expect(0, 127135, '\p{^_INDominoTILES}', "");
Expect(0, 127135, '\P{_INDominoTILES}', "");
Expect(1, 127135, '\P{^_INDominoTILES}', "");
Expect(0, 127023, '\p{_INDominoTILES}', "");
Expect(1, 127023, '\p{^_INDominoTILES}', "");
Expect(1, 127023, '\P{_INDominoTILES}', "");
Expect(0, 127023, '\P{^_INDominoTILES}', "");
Error('\p{-_in_Kayah_LI:=}');
Error('\P{-_in_Kayah_LI:=}');
Expect(1, 43311, '\p{inkayahli}', "");
Expect(0, 43311, '\p{^inkayahli}', "");
Expect(0, 43311, '\P{inkayahli}', "");
Expect(1, 43311, '\P{^inkayahli}', "");
Expect(0, 43263, '\p{inkayahli}', "");
Expect(1, 43263, '\p{^inkayahli}', "");
Expect(1, 43263, '\P{inkayahli}', "");
Expect(0, 43263, '\P{^inkayahli}', "");
Expect(1, 43311, '\p{-	In_Kayah-Li}', "");
Expect(0, 43311, '\p{^-	In_Kayah-Li}', "");
Expect(0, 43311, '\P{-	In_Kayah-Li}', "");
Expect(1, 43311, '\P{^-	In_Kayah-Li}', "");
Expect(0, 43263, '\p{-	In_Kayah-Li}', "");
Expect(1, 43263, '\p{^-	In_Kayah-Li}', "");
Expect(1, 43263, '\P{-	In_Kayah-Li}', "");
Expect(0, 43263, '\P{^-	In_Kayah-Li}', "");
Error('\p{_uppercase/a/Letter}');
Error('\P{_uppercase/a/Letter}');
Expect(1, 90, '\p{uppercaseletter}', "");
Expect(0, 90, '\p{^uppercaseletter}', "");
Expect(0, 90, '\P{uppercaseletter}', "");
Expect(1, 90, '\P{^uppercaseletter}', "");
Expect(0, 64, '\p{uppercaseletter}', "");
Expect(1, 64, '\p{^uppercaseletter}', "");
Expect(1, 64, '\P{uppercaseletter}', "");
Expect(0, 64, '\P{^uppercaseletter}', "");
Expect(1, 90, '\p{	UppercaseLetter}', "");
Expect(0, 90, '\p{^	UppercaseLetter}', "");
Expect(0, 90, '\P{	UppercaseLetter}', "");
Expect(1, 90, '\P{^	UppercaseLetter}', "");
Expect(0, 64, '\p{	UppercaseLetter}', "");
Expect(1, 64, '\p{^	UppercaseLetter}', "");
Expect(1, 64, '\P{	UppercaseLetter}', "");
Expect(0, 64, '\P{^	UppercaseLetter}', "");
Error('\p{:=IS	uppercaseletter}');
Error('\P{:=IS	uppercaseletter}');
Expect(1, 90, '\p{isuppercaseletter}', "");
Expect(0, 90, '\p{^isuppercaseletter}', "");
Expect(0, 90, '\P{isuppercaseletter}', "");
Expect(1, 90, '\P{^isuppercaseletter}', "");
Expect(0, 64, '\p{isuppercaseletter}', "");
Expect(1, 64, '\p{^isuppercaseletter}', "");
Expect(1, 64, '\P{isuppercaseletter}', "");
Expect(0, 64, '\P{^isuppercaseletter}', "");
Expect(1, 90, '\p{- Is Uppercase	Letter}', "");
Expect(0, 90, '\p{^- Is Uppercase	Letter}', "");
Expect(0, 90, '\P{- Is Uppercase	Letter}', "");
Expect(1, 90, '\P{^- Is Uppercase	Letter}', "");
Expect(0, 64, '\p{- Is Uppercase	Letter}', "");
Expect(1, 64, '\p{^- Is Uppercase	Letter}', "");
Expect(1, 64, '\P{- Is Uppercase	Letter}', "");
Expect(0, 64, '\P{^- Is Uppercase	Letter}', "");
Error('\p{-	Lu/a/}');
Error('\P{-	Lu/a/}');
Expect(1, 90, '\p{lu}', "");
Expect(0, 90, '\p{^lu}', "");
Expect(0, 90, '\P{lu}', "");
Expect(1, 90, '\P{^lu}', "");
Expect(0, 64, '\p{lu}', "");
Expect(1, 64, '\p{^lu}', "");
Expect(1, 64, '\P{lu}', "");
Expect(0, 64, '\P{^lu}', "");
Expect(1, 90, '\p{__lu}', "");
Expect(0, 90, '\p{^__lu}', "");
Expect(0, 90, '\P{__lu}', "");
Expect(1, 90, '\P{^__lu}', "");
Expect(0, 64, '\p{__lu}', "");
Expect(1, 64, '\p{^__lu}', "");
Expect(1, 64, '\P{__lu}', "");
Expect(0, 64, '\P{^__lu}', "");
Error('\p{--Is Lu/a/}');
Error('\P{--Is Lu/a/}');
Expect(1, 90, '\p{islu}', "");
Expect(0, 90, '\p{^islu}', "");
Expect(0, 90, '\P{islu}', "");
Expect(1, 90, '\P{^islu}', "");
Expect(0, 64, '\p{islu}', "");
Expect(1, 64, '\p{^islu}', "");
Expect(1, 64, '\P{islu}', "");
Expect(0, 64, '\P{^islu}', "");
Expect(1, 90, '\p{-isLU}', "");
Expect(0, 90, '\p{^-isLU}', "");
Expect(0, 90, '\P{-isLU}', "");
Expect(1, 90, '\P{^-isLU}', "");
Expect(0, 64, '\p{-isLU}', "");
Expect(1, 64, '\p{^-isLU}', "");
Expect(1, 64, '\P{-isLU}', "");
Expect(0, 64, '\P{^-isLU}', "");
Error('\p{/a/-	TaiLe}');
Error('\P{/a/-	TaiLe}');
Expect(1, 6509, '\p{taile}', "");
Expect(0, 6509, '\p{^taile}', "");
Expect(0, 6509, '\P{taile}', "");
Expect(1, 6509, '\P{^taile}', "");
Expect(0, 6479, '\p{taile}', "");
Expect(1, 6479, '\p{^taile}', "");
Expect(1, 6479, '\P{taile}', "");
Expect(0, 6479, '\P{^taile}', "");
Expect(1, 6509, '\p{ TAI_Le}', "");
Expect(0, 6509, '\p{^ TAI_Le}', "");
Expect(0, 6509, '\P{ TAI_Le}', "");
Expect(1, 6509, '\P{^ TAI_Le}', "");
Expect(0, 6479, '\p{ TAI_Le}', "");
Expect(1, 6479, '\p{^ TAI_Le}', "");
Expect(1, 6479, '\P{ TAI_Le}', "");
Expect(0, 6479, '\P{^ TAI_Le}', "");
Error('\p{		Is TAI/a/Le}');
Error('\P{		Is TAI/a/Le}');
Expect(1, 6509, '\p{istaile}', "");
Expect(0, 6509, '\p{^istaile}', "");
Expect(0, 6509, '\P{istaile}', "");
Expect(1, 6509, '\P{^istaile}', "");
Expect(0, 6479, '\p{istaile}', "");
Expect(1, 6479, '\p{^istaile}', "");
Expect(1, 6479, '\P{istaile}', "");
Expect(0, 6479, '\P{^istaile}', "");
Expect(1, 6509, '\p{__ISTai Le}', "");
Expect(0, 6509, '\p{^__ISTai Le}', "");
Expect(0, 6509, '\P{__ISTai Le}', "");
Expect(1, 6509, '\P{^__ISTai Le}', "");
Expect(0, 6479, '\p{__ISTai Le}', "");
Expect(1, 6479, '\p{^__ISTai Le}', "");
Expect(1, 6479, '\P{__ISTai Le}', "");
Expect(0, 6479, '\P{^__ISTai Le}', "");
Error('\p{:=-tale}');
Error('\P{:=-tale}');
Expect(1, 6509, '\p{tale}', "");
Expect(0, 6509, '\p{^tale}', "");
Expect(0, 6509, '\P{tale}', "");
Expect(1, 6509, '\P{^tale}', "");
Expect(0, 6479, '\p{tale}', "");
Expect(1, 6479, '\p{^tale}', "");
Expect(1, 6479, '\P{tale}', "");
Expect(0, 6479, '\P{^tale}', "");
Expect(1, 6509, '\p{-	TALE}', "");
Expect(0, 6509, '\p{^-	TALE}', "");
Expect(0, 6509, '\P{-	TALE}', "");
Expect(1, 6509, '\P{^-	TALE}', "");
Expect(0, 6479, '\p{-	TALE}', "");
Expect(1, 6479, '\p{^-	TALE}', "");
Expect(1, 6479, '\P{-	TALE}', "");
Expect(0, 6479, '\P{^-	TALE}', "");
Error('\p{__Is:=Tale}');
Error('\P{__Is:=Tale}');
Expect(1, 6509, '\p{istale}', "");
Expect(0, 6509, '\p{^istale}', "");
Expect(0, 6509, '\P{istale}', "");
Expect(1, 6509, '\P{^istale}', "");
Expect(0, 6479, '\p{istale}', "");
Expect(1, 6479, '\p{^istale}', "");
Expect(1, 6479, '\P{istale}', "");
Expect(0, 6479, '\P{^istale}', "");
Expect(1, 6509, '\p{-	IS	Tale}', "");
Expect(0, 6509, '\p{^-	IS	Tale}', "");
Expect(0, 6509, '\P{-	IS	Tale}', "");
Expect(1, 6509, '\P{^-	IS	Tale}', "");
Expect(0, 6479, '\p{-	IS	Tale}', "");
Expect(1, 6479, '\p{^-	IS	Tale}', "");
Expect(1, 6479, '\P{-	IS	Tale}', "");
Expect(0, 6479, '\P{^-	IS	Tale}', "");
Error('\p{-_ascii-Hex_digit/a/}');
Error('\P{-_ascii-Hex_digit/a/}');
Expect(1, 57, '\p{asciihexdigit}', "");
Expect(0, 57, '\p{^asciihexdigit}', "");
Expect(0, 57, '\P{asciihexdigit}', "");
Expect(1, 57, '\P{^asciihexdigit}', "");
Expect(0, 47, '\p{asciihexdigit}', "");
Expect(1, 47, '\p{^asciihexdigit}', "");
Expect(1, 47, '\P{asciihexdigit}', "");
Expect(0, 47, '\P{^asciihexdigit}', "");
Expect(1, 57, '\p{ _ascii-Hex-digit}', "");
Expect(0, 57, '\p{^ _ascii-Hex-digit}', "");
Expect(0, 57, '\P{ _ascii-Hex-digit}', "");
Expect(1, 57, '\P{^ _ascii-Hex-digit}', "");
Expect(0, 47, '\p{ _ascii-Hex-digit}', "");
Expect(1, 47, '\p{^ _ascii-Hex-digit}', "");
Expect(1, 47, '\P{ _ascii-Hex-digit}', "");
Expect(0, 47, '\P{^ _ascii-Hex-digit}', "");
Error('\p{	/a/IS-ASCIIHex Digit}');
Error('\P{	/a/IS-ASCIIHex Digit}');
Expect(1, 57, '\p{isasciihexdigit}', "");
Expect(0, 57, '\p{^isasciihexdigit}', "");
Expect(0, 57, '\P{isasciihexdigit}', "");
Expect(1, 57, '\P{^isasciihexdigit}', "");
Expect(0, 47, '\p{isasciihexdigit}', "");
Expect(1, 47, '\p{^isasciihexdigit}', "");
Expect(1, 47, '\P{isasciihexdigit}', "");
Expect(0, 47, '\P{^isasciihexdigit}', "");
Expect(1, 57, '\p{_ISascii	hex	DIGIT}', "");
Expect(0, 57, '\p{^_ISascii	hex	DIGIT}', "");
Expect(0, 57, '\P{_ISascii	hex	DIGIT}', "");
Expect(1, 57, '\P{^_ISascii	hex	DIGIT}', "");
Expect(0, 47, '\p{_ISascii	hex	DIGIT}', "");
Expect(1, 47, '\p{^_ISascii	hex	DIGIT}', "");
Expect(1, 47, '\P{_ISascii	hex	DIGIT}', "");
Expect(0, 47, '\P{^_ISascii	hex	DIGIT}', "");
Error('\p{	 AHex:=}');
Error('\P{	 AHex:=}');
Expect(1, 57, '\p{ahex}', "");
Expect(0, 57, '\p{^ahex}', "");
Expect(0, 57, '\P{ahex}', "");
Expect(1, 57, '\P{^ahex}', "");
Expect(0, 47, '\p{ahex}', "");
Expect(1, 47, '\p{^ahex}', "");
Expect(1, 47, '\P{ahex}', "");
Expect(0, 47, '\P{^ahex}', "");
Expect(1, 57, '\p{__AHex}', "");
Expect(0, 57, '\p{^__AHex}', "");
Expect(0, 57, '\P{__AHex}', "");
Expect(1, 57, '\P{^__AHex}', "");
Expect(0, 47, '\p{__AHex}', "");
Expect(1, 47, '\p{^__AHex}', "");
Expect(1, 47, '\P{__AHex}', "");
Expect(0, 47, '\P{^__AHex}', "");
Error('\p{--Is/a/ahex}');
Error('\P{--Is/a/ahex}');
Expect(1, 57, '\p{isahex}', "");
Expect(0, 57, '\p{^isahex}', "");
Expect(0, 57, '\P{isahex}', "");
Expect(1, 57, '\P{^isahex}', "");
Expect(0, 47, '\p{isahex}', "");
Expect(1, 47, '\p{^isahex}', "");
Expect(1, 47, '\P{isahex}', "");
Expect(0, 47, '\P{^isahex}', "");
Expect(1, 57, '\p{ 	IsAHex}', "");
Expect(0, 57, '\p{^ 	IsAHex}', "");
Expect(0, 57, '\P{ 	IsAHex}', "");
Expect(1, 57, '\P{^ 	IsAHex}', "");
Expect(0, 47, '\p{ 	IsAHex}', "");
Expect(1, 47, '\p{^ 	IsAHex}', "");
Expect(1, 47, '\P{ 	IsAHex}', "");
Expect(0, 47, '\P{^ 	IsAHex}', "");
Error('\p{-REJANG/a/}');
Error('\P{-REJANG/a/}');
Expect(1, 43347, '\p{rejang}', "");
Expect(0, 43347, '\p{^rejang}', "");
Expect(0, 43347, '\P{rejang}', "");
Expect(1, 43347, '\P{^rejang}', "");
Expect(0, 43311, '\p{rejang}', "");
Expect(1, 43311, '\p{^rejang}', "");
Expect(1, 43311, '\P{rejang}', "");
Expect(0, 43311, '\P{^rejang}', "");
Expect(1, 43347, '\p{  rejang}', "");
Expect(0, 43347, '\p{^  rejang}', "");
Expect(0, 43347, '\P{  rejang}', "");
Expect(1, 43347, '\P{^  rejang}', "");
Expect(0, 43311, '\p{  rejang}', "");
Expect(1, 43311, '\p{^  rejang}', "");
Expect(1, 43311, '\P{  rejang}', "");
Expect(0, 43311, '\P{^  rejang}', "");
Error('\p{_:=Is_REJANG}');
Error('\P{_:=Is_REJANG}');
Expect(1, 43347, '\p{isrejang}', "");
Expect(0, 43347, '\p{^isrejang}', "");
Expect(0, 43347, '\P{isrejang}', "");
Expect(1, 43347, '\P{^isrejang}', "");
Expect(0, 43311, '\p{isrejang}', "");
Expect(1, 43311, '\p{^isrejang}', "");
Expect(1, 43311, '\P{isrejang}', "");
Expect(0, 43311, '\P{^isrejang}', "");
Expect(1, 43347, '\p{ IS-rejang}', "");
Expect(0, 43347, '\p{^ IS-rejang}', "");
Expect(0, 43347, '\P{ IS-rejang}', "");
Expect(1, 43347, '\P{^ IS-rejang}', "");
Expect(0, 43311, '\p{ IS-rejang}', "");
Expect(1, 43311, '\p{^ IS-rejang}', "");
Expect(1, 43311, '\P{ IS-rejang}', "");
Expect(0, 43311, '\P{^ IS-rejang}', "");
Error('\p{/a/  Rjng}');
Error('\P{/a/  Rjng}');
Expect(1, 43347, '\p{rjng}', "");
Expect(0, 43347, '\p{^rjng}', "");
Expect(0, 43347, '\P{rjng}', "");
Expect(1, 43347, '\P{^rjng}', "");
Expect(0, 43311, '\p{rjng}', "");
Expect(1, 43311, '\p{^rjng}', "");
Expect(1, 43311, '\P{rjng}', "");
Expect(0, 43311, '\P{^rjng}', "");
Expect(1, 43347, '\p{  Rjng}', "");
Expect(0, 43347, '\p{^  Rjng}', "");
Expect(0, 43347, '\P{  Rjng}', "");
Expect(1, 43347, '\P{^  Rjng}', "");
Expect(0, 43311, '\p{  Rjng}', "");
Expect(1, 43311, '\p{^  Rjng}', "");
Expect(1, 43311, '\P{  Rjng}', "");
Expect(0, 43311, '\P{^  Rjng}', "");
Error('\p{ -Is/a/Rjng}');
Error('\P{ -Is/a/Rjng}');
Expect(1, 43347, '\p{isrjng}', "");
Expect(0, 43347, '\p{^isrjng}', "");
Expect(0, 43347, '\P{isrjng}', "");
Expect(1, 43347, '\P{^isrjng}', "");
Expect(0, 43311, '\p{isrjng}', "");
Expect(1, 43311, '\p{^isrjng}', "");
Expect(1, 43311, '\P{isrjng}', "");
Expect(0, 43311, '\P{^isrjng}', "");
Expect(1, 43347, '\p{_-Is rjng}', "");
Expect(0, 43347, '\p{^_-Is rjng}', "");
Expect(0, 43347, '\P{_-Is rjng}', "");
Expect(1, 43347, '\P{^_-Is rjng}', "");
Expect(0, 43311, '\p{_-Is rjng}', "");
Expect(1, 43311, '\p{^_-Is rjng}', "");
Expect(1, 43311, '\P{_-Is rjng}', "");
Expect(0, 43311, '\P{^_-Is rjng}', "");
Error('\p{_	UNIFIED/a/CANADIAN_aboriginal_Syllabics_Extended}');
Error('\P{_	UNIFIED/a/CANADIAN_aboriginal_Syllabics_Extended}');
Expect(1, 6399, '\p{unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^unifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{_UNIFIED-CANADIANaboriginalSyllabics-extended}', "");
Expect(0, 6399, '\p{^_UNIFIED-CANADIANaboriginalSyllabics-extended}', "");
Expect(0, 6399, '\P{_UNIFIED-CANADIANaboriginalSyllabics-extended}', "");
Expect(1, 6399, '\P{^_UNIFIED-CANADIANaboriginalSyllabics-extended}', "");
Expect(0, 6319, '\p{_UNIFIED-CANADIANaboriginalSyllabics-extended}', "");
Expect(1, 6319, '\p{^_UNIFIED-CANADIANaboriginalSyllabics-extended}', "");
Expect(1, 6319, '\P{_UNIFIED-CANADIANaboriginalSyllabics-extended}', "");
Expect(0, 6319, '\P{^_UNIFIED-CANADIANaboriginalSyllabics-extended}', "");
Error('\p{_:=is UNIFIED_Canadian AboriginalSYLLABICS-extended}');
Error('\P{_:=is UNIFIED_Canadian AboriginalSYLLABICS-extended}');
Expect(1, 6399, '\p{isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^isunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{_IS_Unified canadianABORIGINAL Syllabicsextended}', "");
Expect(0, 6399, '\p{^_IS_Unified canadianABORIGINAL Syllabicsextended}', "");
Expect(0, 6399, '\P{_IS_Unified canadianABORIGINAL Syllabicsextended}', "");
Expect(1, 6399, '\P{^_IS_Unified canadianABORIGINAL Syllabicsextended}', "");
Expect(0, 6319, '\p{_IS_Unified canadianABORIGINAL Syllabicsextended}', "");
Expect(1, 6319, '\p{^_IS_Unified canadianABORIGINAL Syllabicsextended}', "");
Expect(1, 6319, '\P{_IS_Unified canadianABORIGINAL Syllabicsextended}', "");
Expect(0, 6319, '\P{^_IS_Unified canadianABORIGINAL Syllabicsextended}', "");
Error('\p{-	IN UNIFIED:=CANADIAN ABORIGINAL-syllabics_extended}');
Error('\P{-	IN UNIFIED:=CANADIAN ABORIGINAL-syllabics_extended}');
Expect(1, 6399, '\p{inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\p{^inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6399, '\P{inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\P{^inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\p{inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\p{^inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6319, '\P{inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(0, 6319, '\P{^inunifiedcanadianaboriginalsyllabicsextended}', "");
Expect(1, 6399, '\p{__In	unified	Canadian aboriginal-Syllabics-EXTENDED}', "");
Expect(0, 6399, '\p{^__In	unified	Canadian aboriginal-Syllabics-EXTENDED}', "");
Expect(0, 6399, '\P{__In	unified	Canadian aboriginal-Syllabics-EXTENDED}', "");
Expect(1, 6399, '\P{^__In	unified	Canadian aboriginal-Syllabics-EXTENDED}', "");
Expect(0, 6319, '\p{__In	unified	Canadian aboriginal-Syllabics-EXTENDED}', "");
Expect(1, 6319, '\p{^__In	unified	Canadian aboriginal-Syllabics-EXTENDED}', "");
Expect(1, 6319, '\P{__In	unified	Canadian aboriginal-Syllabics-EXTENDED}', "");
Expect(0, 6319, '\P{^__In	unified	Canadian aboriginal-Syllabics-EXTENDED}', "");
Error('\p{:=glagolitic}');
Error('\P{:=glagolitic}');
Expect(1, 11310, '\p{glagolitic}', "");
Expect(0, 11310, '\p{^glagolitic}', "");
Expect(0, 11310, '\P{glagolitic}', "");
Expect(1, 11310, '\P{^glagolitic}', "");
Expect(0, 11263, '\p{glagolitic}', "");
Expect(1, 11263, '\p{^glagolitic}', "");
Expect(1, 11263, '\P{glagolitic}', "");
Expect(0, 11263, '\P{^glagolitic}', "");
Expect(1, 11310, '\p{	glagolitic}', "");
Expect(0, 11310, '\p{^	glagolitic}', "");
Expect(0, 11310, '\P{	glagolitic}', "");
Expect(1, 11310, '\P{^	glagolitic}', "");
Expect(0, 11263, '\p{	glagolitic}', "");
Expect(1, 11263, '\p{^	glagolitic}', "");
Expect(1, 11263, '\P{	glagolitic}', "");
Expect(0, 11263, '\P{^	glagolitic}', "");
Error('\p{-IsGlagolitic:=}');
Error('\P{-IsGlagolitic:=}');
Expect(1, 11310, '\p{isglagolitic}', "");
Expect(0, 11310, '\p{^isglagolitic}', "");
Expect(0, 11310, '\P{isglagolitic}', "");
Expect(1, 11310, '\P{^isglagolitic}', "");
Expect(0, 11263, '\p{isglagolitic}', "");
Expect(1, 11263, '\p{^isglagolitic}', "");
Expect(1, 11263, '\P{isglagolitic}', "");
Expect(0, 11263, '\P{^isglagolitic}', "");
Expect(1, 11310, '\p{ -Is Glagolitic}', "");
Expect(0, 11310, '\p{^ -Is Glagolitic}', "");
Expect(0, 11310, '\P{ -Is Glagolitic}', "");
Expect(1, 11310, '\P{^ -Is Glagolitic}', "");
Expect(0, 11263, '\p{ -Is Glagolitic}', "");
Expect(1, 11263, '\p{^ -Is Glagolitic}', "");
Expect(1, 11263, '\P{ -Is Glagolitic}', "");
Expect(0, 11263, '\P{^ -Is Glagolitic}', "");
Error('\p{/a/	 GLAG}');
Error('\P{/a/	 GLAG}');
Expect(1, 11310, '\p{glag}', "");
Expect(0, 11310, '\p{^glag}', "");
Expect(0, 11310, '\P{glag}', "");
Expect(1, 11310, '\P{^glag}', "");
Expect(0, 11263, '\p{glag}', "");
Expect(1, 11263, '\p{^glag}', "");
Expect(1, 11263, '\P{glag}', "");
Expect(0, 11263, '\P{^glag}', "");
Expect(1, 11310, '\p{	glag}', "");
Expect(0, 11310, '\p{^	glag}', "");
Expect(0, 11310, '\P{	glag}', "");
Expect(1, 11310, '\P{^	glag}', "");
Expect(0, 11263, '\p{	glag}', "");
Expect(1, 11263, '\p{^	glag}', "");
Expect(1, 11263, '\P{	glag}', "");
Expect(0, 11263, '\P{^	glag}', "");
Error('\p{ 	is_glag/a/}');
Error('\P{ 	is_glag/a/}');
Expect(1, 11310, '\p{isglag}', "");
Expect(0, 11310, '\p{^isglag}', "");
Expect(0, 11310, '\P{isglag}', "");
Expect(1, 11310, '\P{^isglag}', "");
Expect(0, 11263, '\p{isglag}', "");
Expect(1, 11263, '\p{^isglag}', "");
Expect(1, 11263, '\P{isglag}', "");
Expect(0, 11263, '\P{^isglag}', "");
Expect(1, 11310, '\p{_	Is_GLAG}', "");
Expect(0, 11310, '\p{^_	Is_GLAG}', "");
Expect(0, 11310, '\P{_	Is_GLAG}', "");
Expect(1, 11310, '\P{^_	Is_GLAG}', "");
Expect(0, 11263, '\p{_	Is_GLAG}', "");
Expect(1, 11263, '\p{^_	Is_GLAG}', "");
Expect(1, 11263, '\P{_	Is_GLAG}', "");
Expect(0, 11263, '\P{^_	Is_GLAG}', "");
Error('\p{	 In:=Ol	Chiki}');
Error('\P{	 In:=Ol	Chiki}');
Expect(1, 7295, '\p{inolchiki}', "");
Expect(0, 7295, '\p{^inolchiki}', "");
Expect(0, 7295, '\P{inolchiki}', "");
Expect(1, 7295, '\P{^inolchiki}', "");
Expect(0, 7247, '\p{inolchiki}', "");
Expect(1, 7247, '\p{^inolchiki}', "");
Expect(1, 7247, '\P{inolchiki}', "");
Expect(0, 7247, '\P{^inolchiki}', "");
Expect(1, 7295, '\p{_-in	OLCHIKI}', "");
Expect(0, 7295, '\p{^_-in	OLCHIKI}', "");
Expect(0, 7295, '\P{_-in	OLCHIKI}', "");
Expect(1, 7295, '\P{^_-in	OLCHIKI}', "");
Expect(0, 7247, '\p{_-in	OLCHIKI}', "");
Expect(1, 7247, '\p{^_-in	OLCHIKI}', "");
Expect(1, 7247, '\P{_-in	OLCHIKI}', "");
Expect(0, 7247, '\P{^_-in	OLCHIKI}', "");
Error('\p{:= _CJK_STROKES}');
Error('\P{:= _CJK_STROKES}');
Expect(1, 12783, '\p{cjkstrokes}', "");
Expect(0, 12783, '\p{^cjkstrokes}', "");
Expect(0, 12783, '\P{cjkstrokes}', "");
Expect(1, 12783, '\P{^cjkstrokes}', "");
Expect(0, 12735, '\p{cjkstrokes}', "");
Expect(1, 12735, '\p{^cjkstrokes}', "");
Expect(1, 12735, '\P{cjkstrokes}', "");
Expect(0, 12735, '\P{^cjkstrokes}', "");
Expect(1, 12783, '\p{	-CJKStrokes}', "");
Expect(0, 12783, '\p{^	-CJKStrokes}', "");
Expect(0, 12783, '\P{	-CJKStrokes}', "");
Expect(1, 12783, '\P{^	-CJKStrokes}', "");
Expect(0, 12735, '\p{	-CJKStrokes}', "");
Expect(1, 12735, '\p{^	-CJKStrokes}', "");
Expect(1, 12735, '\P{	-CJKStrokes}', "");
Expect(0, 12735, '\P{^	-CJKStrokes}', "");
Error('\p{-IS-cjk	Strokes/a/}');
Error('\P{-IS-cjk	Strokes/a/}');
Expect(1, 12783, '\p{iscjkstrokes}', "");
Expect(0, 12783, '\p{^iscjkstrokes}', "");
Expect(0, 12783, '\P{iscjkstrokes}', "");
Expect(1, 12783, '\P{^iscjkstrokes}', "");
Expect(0, 12735, '\p{iscjkstrokes}', "");
Expect(1, 12735, '\p{^iscjkstrokes}', "");
Expect(1, 12735, '\P{iscjkstrokes}', "");
Expect(0, 12735, '\P{^iscjkstrokes}', "");
Expect(1, 12783, '\p{	is	cjkStrokes}', "");
Expect(0, 12783, '\p{^	is	cjkStrokes}', "");
Expect(0, 12783, '\P{	is	cjkStrokes}', "");
Expect(1, 12783, '\P{^	is	cjkStrokes}', "");
Expect(0, 12735, '\p{	is	cjkStrokes}', "");
Expect(1, 12735, '\p{^	is	cjkStrokes}', "");
Expect(1, 12735, '\P{	is	cjkStrokes}', "");
Expect(0, 12735, '\P{^	is	cjkStrokes}', "");
Error('\p{:= _IN	CJKSTROKES}');
Error('\P{:= _IN	CJKSTROKES}');
Expect(1, 12783, '\p{incjkstrokes}', "");
Expect(0, 12783, '\p{^incjkstrokes}', "");
Expect(0, 12783, '\P{incjkstrokes}', "");
Expect(1, 12783, '\P{^incjkstrokes}', "");
Expect(0, 12735, '\p{incjkstrokes}', "");
Expect(1, 12735, '\p{^incjkstrokes}', "");
Expect(1, 12735, '\P{incjkstrokes}', "");
Expect(0, 12735, '\P{^incjkstrokes}', "");
Expect(1, 12783, '\p{ IN-CJK	Strokes}', "");
Expect(0, 12783, '\p{^ IN-CJK	Strokes}', "");
Expect(0, 12783, '\P{ IN-CJK	Strokes}', "");
Expect(1, 12783, '\P{^ IN-CJK	Strokes}', "");
Expect(0, 12735, '\p{ IN-CJK	Strokes}', "");
Expect(1, 12735, '\p{^ IN-CJK	Strokes}', "");
Expect(1, 12735, '\P{ IN-CJK	Strokes}', "");
Expect(0, 12735, '\P{^ IN-CJK	Strokes}', "");
Error('\p{_SINHALA:=}');
Error('\P{_SINHALA:=}');
Expect(1, 3459, '\p{sinhala}', "");
Expect(0, 3459, '\p{^sinhala}', "");
Expect(0, 3459, '\P{sinhala}', "");
Expect(1, 3459, '\P{^sinhala}', "");
Expect(0, 3457, '\p{sinhala}', "");
Expect(1, 3457, '\p{^sinhala}', "");
Expect(1, 3457, '\P{sinhala}', "");
Expect(0, 3457, '\P{^sinhala}', "");
Expect(1, 3459, '\p{	 SINHALA}', "");
Expect(0, 3459, '\p{^	 SINHALA}', "");
Expect(0, 3459, '\P{	 SINHALA}', "");
Expect(1, 3459, '\P{^	 SINHALA}', "");
Expect(0, 3457, '\p{	 SINHALA}', "");
Expect(1, 3457, '\p{^	 SINHALA}', "");
Expect(1, 3457, '\P{	 SINHALA}', "");
Expect(0, 3457, '\P{^	 SINHALA}', "");
Error('\p{ /a/Is_SINHALA}');
Error('\P{ /a/Is_SINHALA}');
Expect(1, 3459, '\p{issinhala}', "");
Expect(0, 3459, '\p{^issinhala}', "");
Expect(0, 3459, '\P{issinhala}', "");
Expect(1, 3459, '\P{^issinhala}', "");
Expect(0, 3457, '\p{issinhala}', "");
Expect(1, 3457, '\p{^issinhala}', "");
Expect(1, 3457, '\P{issinhala}', "");
Expect(0, 3457, '\P{^issinhala}', "");
Expect(1, 3459, '\p{	IsSinhala}', "");
Expect(0, 3459, '\p{^	IsSinhala}', "");
Expect(0, 3459, '\P{	IsSinhala}', "");
Expect(1, 3459, '\P{^	IsSinhala}', "");
Expect(0, 3457, '\p{	IsSinhala}', "");
Expect(1, 3457, '\p{^	IsSinhala}', "");
Expect(1, 3457, '\P{	IsSinhala}', "");
Expect(0, 3457, '\P{^	IsSinhala}', "");
Error('\p{:=	Sinh}');
Error('\P{:=	Sinh}');
Expect(1, 3459, '\p{sinh}', "");
Expect(0, 3459, '\p{^sinh}', "");
Expect(0, 3459, '\P{sinh}', "");
Expect(1, 3459, '\P{^sinh}', "");
Expect(0, 3457, '\p{sinh}', "");
Expect(1, 3457, '\p{^sinh}', "");
Expect(1, 3457, '\P{sinh}', "");
Expect(0, 3457, '\P{^sinh}', "");
Expect(1, 3459, '\p{		Sinh}', "");
Expect(0, 3459, '\p{^		Sinh}', "");
Expect(0, 3459, '\P{		Sinh}', "");
Expect(1, 3459, '\P{^		Sinh}', "");
Expect(0, 3457, '\p{		Sinh}', "");
Expect(1, 3457, '\p{^		Sinh}', "");
Expect(1, 3457, '\P{		Sinh}', "");
Expect(0, 3457, '\P{^		Sinh}', "");
Error('\p{:=is_sinh}');
Error('\P{:=is_sinh}');
Expect(1, 3459, '\p{issinh}', "");
Expect(0, 3459, '\p{^issinh}', "");
Expect(0, 3459, '\P{issinh}', "");
Expect(1, 3459, '\P{^issinh}', "");
Expect(0, 3457, '\p{issinh}', "");
Expect(1, 3457, '\p{^issinh}', "");
Expect(1, 3457, '\P{issinh}', "");
Expect(0, 3457, '\P{^issinh}', "");
Expect(1, 3459, '\p{ Issinh}', "");
Expect(0, 3459, '\p{^ Issinh}', "");
Expect(0, 3459, '\P{ Issinh}', "");
Expect(1, 3459, '\P{^ Issinh}', "");
Expect(0, 3457, '\p{ Issinh}', "");
Expect(1, 3457, '\p{^ Issinh}', "");
Expect(1, 3457, '\P{ Issinh}', "");
Expect(0, 3457, '\P{^ Issinh}', "");
Error('\p{_/a/UGARITIC}');
Error('\P{_/a/UGARITIC}');
Expect(1, 66461, '\p{ugaritic}', "");
Expect(0, 66461, '\p{^ugaritic}', "");
Expect(0, 66461, '\P{ugaritic}', "");
Expect(1, 66461, '\P{^ugaritic}', "");
Expect(0, 66431, '\p{ugaritic}', "");
Expect(1, 66431, '\p{^ugaritic}', "");
Expect(1, 66431, '\P{ugaritic}', "");
Expect(0, 66431, '\P{^ugaritic}', "");
Expect(1, 66461, '\p{_Ugaritic}', "");
Expect(0, 66461, '\p{^_Ugaritic}', "");
Expect(0, 66461, '\P{_Ugaritic}', "");
Expect(1, 66461, '\P{^_Ugaritic}', "");
Expect(0, 66431, '\p{_Ugaritic}', "");
Expect(1, 66431, '\p{^_Ugaritic}', "");
Expect(1, 66431, '\P{_Ugaritic}', "");
Expect(0, 66431, '\P{^_Ugaritic}', "");
Error('\p{:=IsUgaritic}');
Error('\P{:=IsUgaritic}');
Expect(1, 66461, '\p{isugaritic}', "");
Expect(0, 66461, '\p{^isugaritic}', "");
Expect(0, 66461, '\P{isugaritic}', "");
Expect(1, 66461, '\P{^isugaritic}', "");
Expect(0, 66431, '\p{isugaritic}', "");
Expect(1, 66431, '\p{^isugaritic}', "");
Expect(1, 66431, '\P{isugaritic}', "");
Expect(0, 66431, '\P{^isugaritic}', "");
Expect(1, 66461, '\p{	is UGARITIC}', "");
Expect(0, 66461, '\p{^	is UGARITIC}', "");
Expect(0, 66461, '\P{	is UGARITIC}', "");
Expect(1, 66461, '\P{^	is UGARITIC}', "");
Expect(0, 66431, '\p{	is UGARITIC}', "");
Expect(1, 66431, '\p{^	is UGARITIC}', "");
Expect(1, 66431, '\P{	is UGARITIC}', "");
Expect(0, 66431, '\P{^	is UGARITIC}', "");
Error('\p{:=  Ugar}');
Error('\P{:=  Ugar}');
Expect(1, 66461, '\p{ugar}', "");
Expect(0, 66461, '\p{^ugar}', "");
Expect(0, 66461, '\P{ugar}', "");
Expect(1, 66461, '\P{^ugar}', "");
Expect(0, 66431, '\p{ugar}', "");
Expect(1, 66431, '\p{^ugar}', "");
Expect(1, 66431, '\P{ugar}', "");
Expect(0, 66431, '\P{^ugar}', "");
Expect(1, 66461, '\p{	-ugar}', "");
Expect(0, 66461, '\p{^	-ugar}', "");
Expect(0, 66461, '\P{	-ugar}', "");
Expect(1, 66461, '\P{^	-ugar}', "");
Expect(0, 66431, '\p{	-ugar}', "");
Expect(1, 66431, '\p{^	-ugar}', "");
Expect(1, 66431, '\P{	-ugar}', "");
Expect(0, 66431, '\P{^	-ugar}', "");
Error('\p{	/a/Is Ugar}');
Error('\P{	/a/Is Ugar}');
Expect(1, 66461, '\p{isugar}', "");
Expect(0, 66461, '\p{^isugar}', "");
Expect(0, 66461, '\P{isugar}', "");
Expect(1, 66461, '\P{^isugar}', "");
Expect(0, 66431, '\p{isugar}', "");
Expect(1, 66431, '\p{^isugar}', "");
Expect(1, 66431, '\P{isugar}', "");
Expect(0, 66431, '\P{^isugar}', "");
Expect(1, 66461, '\p{_ Is	UGAR}', "");
Expect(0, 66461, '\p{^_ Is	UGAR}', "");
Expect(0, 66461, '\P{_ Is	UGAR}', "");
Expect(1, 66461, '\P{^_ Is	UGAR}', "");
Expect(0, 66431, '\p{_ Is	UGAR}', "");
Expect(1, 66431, '\p{^_ Is	UGAR}', "");
Expect(1, 66431, '\P{_ Is	UGAR}', "");
Expect(0, 66431, '\P{^_ Is	UGAR}', "");
Error('\p{/a/--ogham}');
Error('\P{/a/--ogham}');
Expect(1, 5788, '\p{ogham}', "");
Expect(0, 5788, '\p{^ogham}', "");
Expect(0, 5788, '\P{ogham}', "");
Expect(1, 5788, '\P{^ogham}', "");
Expect(0, 5759, '\p{ogham}', "");
Expect(1, 5759, '\p{^ogham}', "");
Expect(1, 5759, '\P{ogham}', "");
Expect(0, 5759, '\P{^ogham}', "");
Expect(1, 5788, '\p{-OGHAM}', "");
Expect(0, 5788, '\p{^-OGHAM}', "");
Expect(0, 5788, '\P{-OGHAM}', "");
Expect(1, 5788, '\P{^-OGHAM}', "");
Expect(0, 5759, '\p{-OGHAM}', "");
Expect(1, 5759, '\p{^-OGHAM}', "");
Expect(1, 5759, '\P{-OGHAM}', "");
Expect(0, 5759, '\P{^-OGHAM}', "");
Error('\p{_-ISOgham:=}');
Error('\P{_-ISOgham:=}');
Expect(1, 5788, '\p{isogham}', "");
Expect(0, 5788, '\p{^isogham}', "");
Expect(0, 5788, '\P{isogham}', "");
Expect(1, 5788, '\P{^isogham}', "");
Expect(0, 5759, '\p{isogham}', "");
Expect(1, 5759, '\p{^isogham}', "");
Expect(1, 5759, '\P{isogham}', "");
Expect(0, 5759, '\P{^isogham}', "");
Expect(1, 5788, '\p{-is OGHAM}', "");
Expect(0, 5788, '\p{^-is OGHAM}', "");
Expect(0, 5788, '\P{-is OGHAM}', "");
Expect(1, 5788, '\P{^-is OGHAM}', "");
Expect(0, 5759, '\p{-is OGHAM}', "");
Expect(1, 5759, '\p{^-is OGHAM}', "");
Expect(1, 5759, '\P{-is OGHAM}', "");
Expect(0, 5759, '\P{^-is OGHAM}', "");
Error('\p{_:=Ogam}');
Error('\P{_:=Ogam}');
Expect(1, 5788, '\p{ogam}', "");
Expect(0, 5788, '\p{^ogam}', "");
Expect(0, 5788, '\P{ogam}', "");
Expect(1, 5788, '\P{^ogam}', "");
Expect(0, 5759, '\p{ogam}', "");
Expect(1, 5759, '\p{^ogam}', "");
Expect(1, 5759, '\P{ogam}', "");
Expect(0, 5759, '\P{^ogam}', "");
Expect(1, 5788, '\p{	Ogam}', "");
Expect(0, 5788, '\p{^	Ogam}', "");
Expect(0, 5788, '\P{	Ogam}', "");
Expect(1, 5788, '\P{^	Ogam}', "");
Expect(0, 5759, '\p{	Ogam}', "");
Expect(1, 5759, '\p{^	Ogam}', "");
Expect(1, 5759, '\P{	Ogam}', "");
Expect(0, 5759, '\P{^	Ogam}', "");
Error('\p{/a/-	is-OGAM}');
Error('\P{/a/-	is-OGAM}');
Expect(1, 5788, '\p{isogam}', "");
Expect(0, 5788, '\p{^isogam}', "");
Expect(0, 5788, '\P{isogam}', "");
Expect(1, 5788, '\P{^isogam}', "");
Expect(0, 5759, '\p{isogam}', "");
Expect(1, 5759, '\p{^isogam}', "");
Expect(1, 5759, '\P{isogam}', "");
Expect(0, 5759, '\P{^isogam}', "");
Expect(1, 5788, '\p{_IS-Ogam}', "");
Expect(0, 5788, '\p{^_IS-Ogam}', "");
Expect(0, 5788, '\P{_IS-Ogam}', "");
Expect(1, 5788, '\P{^_IS-Ogam}', "");
Expect(0, 5759, '\p{_IS-Ogam}', "");
Expect(1, 5759, '\p{^_IS-Ogam}', "");
Expect(1, 5759, '\P{_IS-Ogam}', "");
Expect(0, 5759, '\P{^_IS-Ogam}', "");
Error('\p{-BENGALI/a/}');
Error('\P{-BENGALI/a/}');
Expect(1, 2435, '\p{bengali}', "");
Expect(0, 2435, '\p{^bengali}', "");
Expect(0, 2435, '\P{bengali}', "");
Expect(1, 2435, '\P{^bengali}', "");
Expect(0, 2432, '\p{bengali}', "");
Expect(1, 2432, '\p{^bengali}', "");
Expect(1, 2432, '\P{bengali}', "");
Expect(0, 2432, '\P{^bengali}', "");
Expect(1, 2435, '\p{	-Bengali}', "");
Expect(0, 2435, '\p{^	-Bengali}', "");
Expect(0, 2435, '\P{	-Bengali}', "");
Expect(1, 2435, '\P{^	-Bengali}', "");
Expect(0, 2432, '\p{	-Bengali}', "");
Expect(1, 2432, '\p{^	-Bengali}', "");
Expect(1, 2432, '\P{	-Bengali}', "");
Expect(0, 2432, '\P{^	-Bengali}', "");
Error('\p{_is/a/BENGALI}');
Error('\P{_is/a/BENGALI}');
Expect(1, 2435, '\p{isbengali}', "");
Expect(0, 2435, '\p{^isbengali}', "");
Expect(0, 2435, '\P{isbengali}', "");
Expect(1, 2435, '\P{^isbengali}', "");
Expect(0, 2432, '\p{isbengali}', "");
Expect(1, 2432, '\p{^isbengali}', "");
Expect(1, 2432, '\P{isbengali}', "");
Expect(0, 2432, '\P{^isbengali}', "");
Expect(1, 2435, '\p{	_Isbengali}', "");
Expect(0, 2435, '\p{^	_Isbengali}', "");
Expect(0, 2435, '\P{	_Isbengali}', "");
Expect(1, 2435, '\P{^	_Isbengali}', "");
Expect(0, 2432, '\p{	_Isbengali}', "");
Expect(1, 2432, '\p{^	_Isbengali}', "");
Expect(1, 2432, '\P{	_Isbengali}', "");
Expect(0, 2432, '\P{^	_Isbengali}', "");
Error('\p{-BENG/a/}');
Error('\P{-BENG/a/}');
Expect(1, 2435, '\p{beng}', "");
Expect(0, 2435, '\p{^beng}', "");
Expect(0, 2435, '\P{beng}', "");
Expect(1, 2435, '\P{^beng}', "");
Expect(0, 2432, '\p{beng}', "");
Expect(1, 2432, '\p{^beng}', "");
Expect(1, 2432, '\P{beng}', "");
Expect(0, 2432, '\P{^beng}', "");
Expect(1, 2435, '\p{Beng}', "");
Expect(0, 2435, '\p{^Beng}', "");
Expect(0, 2435, '\P{Beng}', "");
Expect(1, 2435, '\P{^Beng}', "");
Expect(0, 2432, '\p{Beng}', "");
Expect(1, 2432, '\p{^Beng}', "");
Expect(1, 2432, '\P{Beng}', "");
Expect(0, 2432, '\P{^Beng}', "");
Error('\p{	-IS-Beng:=}');
Error('\P{	-IS-Beng:=}');
Expect(1, 2435, '\p{isbeng}', "");
Expect(0, 2435, '\p{^isbeng}', "");
Expect(0, 2435, '\P{isbeng}', "");
Expect(1, 2435, '\P{^isbeng}', "");
Expect(0, 2432, '\p{isbeng}', "");
Expect(1, 2432, '\p{^isbeng}', "");
Expect(1, 2432, '\P{isbeng}', "");
Expect(0, 2432, '\P{^isbeng}', "");
Expect(1, 2435, '\p{ is_Beng}', "");
Expect(0, 2435, '\p{^ is_Beng}', "");
Expect(0, 2435, '\P{ is_Beng}', "");
Expect(1, 2435, '\P{^ is_Beng}', "");
Expect(0, 2432, '\p{ is_Beng}', "");
Expect(1, 2432, '\p{^ is_Beng}', "");
Expect(1, 2432, '\P{ is_Beng}', "");
Expect(0, 2432, '\P{^ is_Beng}', "");
Error('\p{:=_-diacritic}');
Error('\P{:=_-diacritic}');
Expect(1, 94, '\p{diacritic}', "");
Expect(0, 94, '\p{^diacritic}', "");
Expect(0, 94, '\P{diacritic}', "");
Expect(1, 94, '\P{^diacritic}', "");
Expect(0, 93, '\p{diacritic}', "");
Expect(1, 93, '\p{^diacritic}', "");
Expect(1, 93, '\P{diacritic}', "");
Expect(0, 93, '\P{^diacritic}', "");
Expect(1, 94, '\p{ DIACRITIC}', "");
Expect(0, 94, '\p{^ DIACRITIC}', "");
Expect(0, 94, '\P{ DIACRITIC}', "");
Expect(1, 94, '\P{^ DIACRITIC}', "");
Expect(0, 93, '\p{ DIACRITIC}', "");
Expect(1, 93, '\p{^ DIACRITIC}', "");
Expect(1, 93, '\P{ DIACRITIC}', "");
Expect(0, 93, '\P{^ DIACRITIC}', "");
Error('\p{/a/	-Is	diacritic}');
Error('\P{/a/	-Is	diacritic}');
Expect(1, 94, '\p{isdiacritic}', "");
Expect(0, 94, '\p{^isdiacritic}', "");
Expect(0, 94, '\P{isdiacritic}', "");
Expect(1, 94, '\P{^isdiacritic}', "");
Expect(0, 93, '\p{isdiacritic}', "");
Expect(1, 93, '\p{^isdiacritic}', "");
Expect(1, 93, '\P{isdiacritic}', "");
Expect(0, 93, '\P{^isdiacritic}', "");
Expect(1, 94, '\p{_Is_diacritic}', "");
Expect(0, 94, '\p{^_Is_diacritic}', "");
Expect(0, 94, '\P{_Is_diacritic}', "");
Expect(1, 94, '\P{^_Is_diacritic}', "");
Expect(0, 93, '\p{_Is_diacritic}', "");
Expect(1, 93, '\p{^_Is_diacritic}', "");
Expect(1, 93, '\P{_Is_diacritic}', "");
Expect(0, 93, '\P{^_Is_diacritic}', "");
Error('\p{ /a/dia}');
Error('\P{ /a/dia}');
Expect(1, 94, '\p{dia}', "");
Expect(0, 94, '\p{^dia}', "");
Expect(0, 94, '\P{dia}', "");
Expect(1, 94, '\P{^dia}', "");
Expect(0, 93, '\p{dia}', "");
Expect(1, 93, '\p{^dia}', "");
Expect(1, 93, '\P{dia}', "");
Expect(0, 93, '\P{^dia}', "");
Expect(1, 94, '\p{_-dia}', "");
Expect(0, 94, '\p{^_-dia}', "");
Expect(0, 94, '\P{_-dia}', "");
Expect(1, 94, '\P{^_-dia}', "");
Expect(0, 93, '\p{_-dia}', "");
Expect(1, 93, '\p{^_-dia}', "");
Expect(1, 93, '\P{_-dia}', "");
Expect(0, 93, '\P{^_-dia}', "");
Error('\p{__Is	dia:=}');
Error('\P{__Is	dia:=}');
Expect(1, 94, '\p{isdia}', "");
Expect(0, 94, '\p{^isdia}', "");
Expect(0, 94, '\P{isdia}', "");
Expect(1, 94, '\P{^isdia}', "");
Expect(0, 93, '\p{isdia}', "");
Expect(1, 93, '\p{^isdia}', "");
Expect(1, 93, '\P{isdia}', "");
Expect(0, 93, '\P{^isdia}', "");
Expect(1, 94, '\p{_IS dia}', "");
Expect(0, 94, '\p{^_IS dia}', "");
Expect(0, 94, '\P{_IS dia}', "");
Expect(1, 94, '\P{^_IS dia}', "");
Expect(0, 93, '\p{_IS dia}', "");
Expect(1, 93, '\p{^_IS dia}', "");
Expect(1, 93, '\P{_IS dia}', "");
Expect(0, 93, '\P{^_IS dia}', "");
Error('\p{:=Lowercase-Letter}');
Error('\P{:=Lowercase-Letter}');
Expect(1, 122, '\p{lowercaseletter}', "");
Expect(0, 122, '\p{^lowercaseletter}', "");
Expect(0, 122, '\P{lowercaseletter}', "");
Expect(1, 122, '\P{^lowercaseletter}', "");
Expect(0, 96, '\p{lowercaseletter}', "");
Expect(1, 96, '\p{^lowercaseletter}', "");
Expect(1, 96, '\P{lowercaseletter}', "");
Expect(0, 96, '\P{^lowercaseletter}', "");
Expect(1, 122, '\p{ Lowercase	Letter}', "");
Expect(0, 122, '\p{^ Lowercase	Letter}', "");
Expect(0, 122, '\P{ Lowercase	Letter}', "");
Expect(1, 122, '\P{^ Lowercase	Letter}', "");
Expect(0, 96, '\p{ Lowercase	Letter}', "");
Expect(1, 96, '\p{^ Lowercase	Letter}', "");
Expect(1, 96, '\P{ Lowercase	Letter}', "");
Expect(0, 96, '\P{^ Lowercase	Letter}', "");
Error('\p{-/a/IS-lowercase LETTER}');
Error('\P{-/a/IS-lowercase LETTER}');
Expect(1, 122, '\p{islowercaseletter}', "");
Expect(0, 122, '\p{^islowercaseletter}', "");
Expect(0, 122, '\P{islowercaseletter}', "");
Expect(1, 122, '\P{^islowercaseletter}', "");
Expect(0, 96, '\p{islowercaseletter}', "");
Expect(1, 96, '\p{^islowercaseletter}', "");
Expect(1, 96, '\P{islowercaseletter}', "");
Expect(0, 96, '\P{^islowercaseletter}', "");
Expect(1, 122, '\p{	_IsLOWERCASE Letter}', "");
Expect(0, 122, '\p{^	_IsLOWERCASE Letter}', "");
Expect(0, 122, '\P{	_IsLOWERCASE Letter}', "");
Expect(1, 122, '\P{^	_IsLOWERCASE Letter}', "");
Expect(0, 96, '\p{	_IsLOWERCASE Letter}', "");
Expect(1, 96, '\p{^	_IsLOWERCASE Letter}', "");
Expect(1, 96, '\P{	_IsLOWERCASE Letter}', "");
Expect(0, 96, '\P{^	_IsLOWERCASE Letter}', "");
Error('\p{/a/_-Ll}');
Error('\P{/a/_-Ll}');
Expect(1, 122, '\p{ll}', "");
Expect(0, 122, '\p{^ll}', "");
Expect(0, 122, '\P{ll}', "");
Expect(1, 122, '\P{^ll}', "");
Expect(0, 96, '\p{ll}', "");
Expect(1, 96, '\p{^ll}', "");
Expect(1, 96, '\P{ll}', "");
Expect(0, 96, '\P{^ll}', "");
Expect(1, 122, '\p{ _Ll}', "");
Expect(0, 122, '\p{^ _Ll}', "");
Expect(0, 122, '\P{ _Ll}', "");
Expect(1, 122, '\P{^ _Ll}', "");
Expect(0, 96, '\p{ _Ll}', "");
Expect(1, 96, '\p{^ _Ll}', "");
Expect(1, 96, '\P{ _Ll}', "");
Expect(0, 96, '\P{^ _Ll}', "");
Error('\p{:=Is LL}');
Error('\P{:=Is LL}');
Expect(1, 122, '\p{isll}', "");
Expect(0, 122, '\p{^isll}', "");
Expect(0, 122, '\P{isll}', "");
Expect(1, 122, '\P{^isll}', "");
Expect(0, 96, '\p{isll}', "");
Expect(1, 96, '\p{^isll}', "");
Expect(1, 96, '\P{isll}', "");
Expect(0, 96, '\P{^isll}', "");
Expect(1, 122, '\p{_	Is_Ll}', "");
Expect(0, 122, '\p{^_	Is_Ll}', "");
Expect(0, 122, '\P{_	Is_Ll}', "");
Expect(1, 122, '\P{^_	Is_Ll}', "");
Expect(0, 96, '\p{_	Is_Ll}', "");
Expect(1, 96, '\p{^_	Is_Ll}', "");
Expect(1, 96, '\P{_	Is_Ll}', "");
Expect(0, 96, '\P{^_	Is_Ll}', "");
Error('\p{-_Hangul/a/COMPATIBILITYJAMO}');
Error('\P{-_Hangul/a/COMPATIBILITYJAMO}');
Expect(1, 12687, '\p{hangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^hangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{hangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^hangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{hangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^hangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{hangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^hangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{__Hangul-CompatibilityJAMO}', "");
Expect(0, 12687, '\p{^__Hangul-CompatibilityJAMO}', "");
Expect(0, 12687, '\P{__Hangul-CompatibilityJAMO}', "");
Expect(1, 12687, '\P{^__Hangul-CompatibilityJAMO}', "");
Expect(0, 12591, '\p{__Hangul-CompatibilityJAMO}', "");
Expect(1, 12591, '\p{^__Hangul-CompatibilityJAMO}', "");
Expect(1, 12591, '\P{__Hangul-CompatibilityJAMO}', "");
Expect(0, 12591, '\P{^__Hangul-CompatibilityJAMO}', "");
Error('\p{-_is-HANGUL_Compatibility/a/jamo}');
Error('\P{-_is-HANGUL_Compatibility/a/jamo}');
Expect(1, 12687, '\p{ishangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^ishangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{ishangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^ishangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{ishangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^ishangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{ishangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^ishangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{		Is	Hangul compatibility	Jamo}', "");
Expect(0, 12687, '\p{^		Is	Hangul compatibility	Jamo}', "");
Expect(0, 12687, '\P{		Is	Hangul compatibility	Jamo}', "");
Expect(1, 12687, '\P{^		Is	Hangul compatibility	Jamo}', "");
Expect(0, 12591, '\p{		Is	Hangul compatibility	Jamo}', "");
Expect(1, 12591, '\p{^		Is	Hangul compatibility	Jamo}', "");
Expect(1, 12591, '\P{		Is	Hangul compatibility	Jamo}', "");
Expect(0, 12591, '\P{^		Is	Hangul compatibility	Jamo}', "");
Error('\p{_InHANGUL/a/Compatibility-Jamo}');
Error('\P{_InHANGUL/a/Compatibility-Jamo}');
Expect(1, 12687, '\p{inhangulcompatibilityjamo}', "");
Expect(0, 12687, '\p{^inhangulcompatibilityjamo}', "");
Expect(0, 12687, '\P{inhangulcompatibilityjamo}', "");
Expect(1, 12687, '\P{^inhangulcompatibilityjamo}', "");
Expect(0, 12591, '\p{inhangulcompatibilityjamo}', "");
Expect(1, 12591, '\p{^inhangulcompatibilityjamo}', "");
Expect(1, 12591, '\P{inhangulcompatibilityjamo}', "");
Expect(0, 12591, '\P{^inhangulcompatibilityjamo}', "");
Expect(1, 12687, '\p{in HANGUL	compatibility_JAMO}', "");
Expect(0, 12687, '\p{^in HANGUL	compatibility_JAMO}', "");
Expect(0, 12687, '\P{in HANGUL	compatibility_JAMO}', "");
Expect(1, 12687, '\P{^in HANGUL	compatibility_JAMO}', "");
Expect(0, 12591, '\p{in HANGUL	compatibility_JAMO}', "");
Expect(1, 12591, '\p{^in HANGUL	compatibility_JAMO}', "");
Expect(1, 12591, '\P{in HANGUL	compatibility_JAMO}', "");
Expect(0, 12591, '\P{^in HANGUL	compatibility_JAMO}', "");
Error('\p{_-musical_symbols/a/}');
Error('\P{_-musical_symbols/a/}');
Expect(1, 119295, '\p{musicalsymbols}', "");
Expect(0, 119295, '\p{^musicalsymbols}', "");
Expect(0, 119295, '\P{musicalsymbols}', "");
Expect(1, 119295, '\P{^musicalsymbols}', "");
Expect(0, 119039, '\p{musicalsymbols}', "");
Expect(1, 119039, '\p{^musicalsymbols}', "");
Expect(1, 119039, '\P{musicalsymbols}', "");
Expect(0, 119039, '\P{^musicalsymbols}', "");
Expect(1, 119295, '\p{_ MUSICAL Symbols}', "");
Expect(0, 119295, '\p{^_ MUSICAL Symbols}', "");
Expect(0, 119295, '\P{_ MUSICAL Symbols}', "");
Expect(1, 119295, '\P{^_ MUSICAL Symbols}', "");
Expect(0, 119039, '\p{_ MUSICAL Symbols}', "");
Expect(1, 119039, '\p{^_ MUSICAL Symbols}', "");
Expect(1, 119039, '\P{_ MUSICAL Symbols}', "");
Expect(0, 119039, '\P{^_ MUSICAL Symbols}', "");
Error('\p{:= 	Is_MUSICAL-Symbols}');
Error('\P{:= 	Is_MUSICAL-Symbols}');
Expect(1, 119295, '\p{ismusicalsymbols}', "");
Expect(0, 119295, '\p{^ismusicalsymbols}', "");
Expect(0, 119295, '\P{ismusicalsymbols}', "");
Expect(1, 119295, '\P{^ismusicalsymbols}', "");
Expect(0, 119039, '\p{ismusicalsymbols}', "");
Expect(1, 119039, '\p{^ismusicalsymbols}', "");
Expect(1, 119039, '\P{ismusicalsymbols}', "");
Expect(0, 119039, '\P{^ismusicalsymbols}', "");
Expect(1, 119295, '\p{	IsMUSICAL Symbols}', "");
Expect(0, 119295, '\p{^	IsMUSICAL Symbols}', "");
Expect(0, 119295, '\P{	IsMUSICAL Symbols}', "");
Expect(1, 119295, '\P{^	IsMUSICAL Symbols}', "");
Expect(0, 119039, '\p{	IsMUSICAL Symbols}', "");
Expect(1, 119039, '\p{^	IsMUSICAL Symbols}', "");
Expect(1, 119039, '\P{	IsMUSICAL Symbols}', "");
Expect(0, 119039, '\P{^	IsMUSICAL Symbols}', "");
Error('\p{ /a/IN	Musical_Symbols}');
Error('\P{ /a/IN	Musical_Symbols}');
Expect(1, 119295, '\p{inmusicalsymbols}', "");
Expect(0, 119295, '\p{^inmusicalsymbols}', "");
Expect(0, 119295, '\P{inmusicalsymbols}', "");
Expect(1, 119295, '\P{^inmusicalsymbols}', "");
Expect(0, 119039, '\p{inmusicalsymbols}', "");
Expect(1, 119039, '\p{^inmusicalsymbols}', "");
Expect(1, 119039, '\P{inmusicalsymbols}', "");
Expect(0, 119039, '\P{^inmusicalsymbols}', "");
Expect(1, 119295, '\p{_INMusical Symbols}', "");
Expect(0, 119295, '\p{^_INMusical Symbols}', "");
Expect(0, 119295, '\P{_INMusical Symbols}', "");
Expect(1, 119295, '\P{^_INMusical Symbols}', "");
Expect(0, 119039, '\p{_INMusical Symbols}', "");
Expect(1, 119039, '\p{^_INMusical Symbols}', "");
Expect(1, 119039, '\P{_INMusical Symbols}', "");
Expect(0, 119039, '\P{^_INMusical Symbols}', "");
Error('\p{ /a/TAGS}');
Error('\P{ /a/TAGS}');
Expect(1, 917631, '\p{tags}', "");
Expect(0, 917631, '\p{^tags}', "");
Expect(0, 917631, '\P{tags}', "");
Expect(1, 917631, '\P{^tags}', "");
Expect(0, 1, '\p{tags}', "");
Expect(1, 1, '\p{^tags}', "");
Expect(1, 1, '\P{tags}', "");
Expect(0, 1, '\P{^tags}', "");
Expect(1, 917631, '\p{	 TAGS}', "");
Expect(0, 917631, '\p{^	 TAGS}', "");
Expect(0, 917631, '\P{	 TAGS}', "");
Expect(1, 917631, '\P{^	 TAGS}', "");
Expect(0, 1, '\p{	 TAGS}', "");
Expect(1, 1, '\p{^	 TAGS}', "");
Expect(1, 1, '\P{	 TAGS}', "");
Expect(0, 1, '\P{^	 TAGS}', "");
Error('\p{/a/-_Is_Tags}');
Error('\P{/a/-_Is_Tags}');
Expect(1, 917631, '\p{istags}', "");
Expect(0, 917631, '\p{^istags}', "");
Expect(0, 917631, '\P{istags}', "");
Expect(1, 917631, '\P{^istags}', "");
Expect(0, 1, '\p{istags}', "");
Expect(1, 1, '\p{^istags}', "");
Expect(1, 1, '\P{istags}', "");
Expect(0, 1, '\P{^istags}', "");
Expect(1, 917631, '\p{- Is_TAGS}', "");
Expect(0, 917631, '\p{^- Is_TAGS}', "");
Expect(0, 917631, '\P{- Is_TAGS}', "");
Expect(1, 917631, '\P{^- Is_TAGS}', "");
Expect(0, 1, '\p{- Is_TAGS}', "");
Expect(1, 1, '\p{^- Is_TAGS}', "");
Expect(1, 1, '\P{- Is_TAGS}', "");
Expect(0, 1, '\P{^- Is_TAGS}', "");
Error('\p{:=-In_Tags}');
Error('\P{:=-In_Tags}');
Expect(1, 917631, '\p{intags}', "");
Expect(0, 917631, '\p{^intags}', "");
Expect(0, 917631, '\P{intags}', "");
Expect(1, 917631, '\P{^intags}', "");
Expect(0, 1, '\p{intags}', "");
Expect(1, 1, '\p{^intags}', "");
Expect(1, 1, '\P{intags}', "");
Expect(0, 1, '\P{^intags}', "");
Expect(1, 917631, '\p{	-in_tags}', "");
Expect(0, 917631, '\p{^	-in_tags}', "");
Expect(0, 917631, '\P{	-in_tags}', "");
Expect(1, 917631, '\P{^	-in_tags}', "");
Expect(0, 1, '\p{	-in_tags}', "");
Expect(1, 1, '\p{^	-in_tags}', "");
Expect(1, 1, '\P{	-in_tags}', "");
Expect(0, 1, '\P{^	-in_tags}', "");
Error('\p{/a/separator}');
Error('\P{/a/separator}');
Expect(1, 32, '\p{separator}', "");
Expect(0, 32, '\p{^separator}', "");
Expect(0, 32, '\P{separator}', "");
Expect(1, 32, '\P{^separator}', "");
Expect(0, 31, '\p{separator}', "");
Expect(1, 31, '\p{^separator}', "");
Expect(1, 31, '\P{separator}', "");
Expect(0, 31, '\P{^separator}', "");
Expect(1, 32, '\p{	separator}', "");
Expect(0, 32, '\p{^	separator}', "");
Expect(0, 32, '\P{	separator}', "");
Expect(1, 32, '\P{^	separator}', "");
Expect(0, 31, '\p{	separator}', "");
Expect(1, 31, '\p{^	separator}', "");
Expect(1, 31, '\P{	separator}', "");
Expect(0, 31, '\P{^	separator}', "");
Error('\p{_/a/Is	Separator}');
Error('\P{_/a/Is	Separator}');
Expect(1, 32, '\p{isseparator}', "");
Expect(0, 32, '\p{^isseparator}', "");
Expect(0, 32, '\P{isseparator}', "");
Expect(1, 32, '\P{^isseparator}', "");
Expect(0, 31, '\p{isseparator}', "");
Expect(1, 31, '\p{^isseparator}', "");
Expect(1, 31, '\P{isseparator}', "");
Expect(0, 31, '\P{^isseparator}', "");
Expect(1, 32, '\p{	 is separator}', "");
Expect(0, 32, '\p{^	 is separator}', "");
Expect(0, 32, '\P{	 is separator}', "");
Expect(1, 32, '\P{^	 is separator}', "");
Expect(0, 31, '\p{	 is separator}', "");
Expect(1, 31, '\p{^	 is separator}', "");
Expect(1, 31, '\P{	 is separator}', "");
Expect(0, 31, '\P{^	 is separator}', "");
Error('\p{	/a/Z}');
Error('\P{	/a/Z}');
Expect(1, 32, '\p{z}', "");
Expect(0, 32, '\p{^z}', "");
Expect(0, 32, '\P{z}', "");
Expect(1, 32, '\P{^z}', "");
Expect(0, 31, '\p{z}', "");
Expect(1, 31, '\p{^z}', "");
Expect(1, 31, '\P{z}', "");
Expect(0, 31, '\P{^z}', "");
Expect(1, 32, '\p{ z}', "");
Expect(0, 32, '\p{^ z}', "");
Expect(0, 32, '\P{ z}', "");
Expect(1, 32, '\P{^ z}', "");
Expect(0, 31, '\p{ z}', "");
Expect(1, 31, '\p{^ z}', "");
Expect(1, 31, '\P{ z}', "");
Expect(0, 31, '\P{^ z}', "");
Error('\p{/a/_	IS_Z}');
Error('\P{/a/_	IS_Z}');
Expect(1, 32, '\p{isz}', "");
Expect(0, 32, '\p{^isz}', "");
Expect(0, 32, '\P{isz}', "");
Expect(1, 32, '\P{^isz}', "");
Expect(0, 31, '\p{isz}', "");
Expect(1, 31, '\p{^isz}', "");
Expect(1, 31, '\P{isz}', "");
Expect(0, 31, '\P{^isz}', "");
Expect(1, 32, '\p{IS Z}', "");
Expect(0, 32, '\p{^IS Z}', "");
Expect(0, 32, '\P{IS Z}', "");
Expect(1, 32, '\P{^IS Z}', "");
Expect(0, 31, '\p{IS Z}', "");
Expect(1, 31, '\p{^IS Z}', "");
Expect(1, 31, '\P{IS Z}', "");
Expect(0, 31, '\P{^IS Z}', "");
Error('\p{Ancient-greek:=musical_Notation}');
Error('\P{Ancient-greek:=musical_Notation}');
Expect(1, 119375, '\p{ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^ancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^ancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{ancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^ancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{- ANCIENT	greek_Musical_Notation}', "");
Expect(0, 119375, '\p{^- ANCIENT	greek_Musical_Notation}', "");
Expect(0, 119375, '\P{- ANCIENT	greek_Musical_Notation}', "");
Expect(1, 119375, '\P{^- ANCIENT	greek_Musical_Notation}', "");
Expect(0, 119295, '\p{- ANCIENT	greek_Musical_Notation}', "");
Expect(1, 119295, '\p{^- ANCIENT	greek_Musical_Notation}', "");
Expect(1, 119295, '\P{- ANCIENT	greek_Musical_Notation}', "");
Expect(0, 119295, '\P{^- ANCIENT	greek_Musical_Notation}', "");
Error('\p{	/a/is-Ancient	Greek	musical Notation}');
Error('\P{	/a/is-Ancient	Greek	musical Notation}');
Expect(1, 119375, '\p{isancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^isancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{isancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^isancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{isancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^isancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{isancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^isancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{	Is Ancient-Greek	Musical_Notation}', "");
Expect(0, 119375, '\p{^	Is Ancient-Greek	Musical_Notation}', "");
Expect(0, 119375, '\P{	Is Ancient-Greek	Musical_Notation}', "");
Expect(1, 119375, '\P{^	Is Ancient-Greek	Musical_Notation}', "");
Expect(0, 119295, '\p{	Is Ancient-Greek	Musical_Notation}', "");
Expect(1, 119295, '\p{^	Is Ancient-Greek	Musical_Notation}', "");
Expect(1, 119295, '\P{	Is Ancient-Greek	Musical_Notation}', "");
Expect(0, 119295, '\P{^	Is Ancient-Greek	Musical_Notation}', "");
Error('\p{/a/	In_ancient-Greek musical NOTATION}');
Error('\P{/a/	In_ancient-Greek musical NOTATION}');
Expect(1, 119375, '\p{inancientgreekmusicalnotation}', "");
Expect(0, 119375, '\p{^inancientgreekmusicalnotation}', "");
Expect(0, 119375, '\P{inancientgreekmusicalnotation}', "");
Expect(1, 119375, '\P{^inancientgreekmusicalnotation}', "");
Expect(0, 119295, '\p{inancientgreekmusicalnotation}', "");
Expect(1, 119295, '\p{^inancientgreekmusicalnotation}', "");
Expect(1, 119295, '\P{inancientgreekmusicalnotation}', "");
Expect(0, 119295, '\P{^inancientgreekmusicalnotation}', "");
Expect(1, 119375, '\p{-	In Ancient-GREEK_MusicalNotation}', "");
Expect(0, 119375, '\p{^-	In Ancient-GREEK_MusicalNotation}', "");
Expect(0, 119375, '\P{-	In Ancient-GREEK_MusicalNotation}', "");
Expect(1, 119375, '\P{^-	In Ancient-GREEK_MusicalNotation}', "");
Expect(0, 119295, '\p{-	In Ancient-GREEK_MusicalNotation}', "");
Expect(1, 119295, '\p{^-	In Ancient-GREEK_MusicalNotation}', "");
Expect(1, 119295, '\P{-	In Ancient-GREEK_MusicalNotation}', "");
Expect(0, 119295, '\P{^-	In Ancient-GREEK_MusicalNotation}', "");
Error('\p{/a/--PosixBlank}');
Error('\P{/a/--PosixBlank}');
Expect(1, 9, '\p{posixblank}', "");
Expect(0, 9, '\p{^posixblank}', "");
Expect(0, 9, '\P{posixblank}', "");
Expect(1, 9, '\P{^posixblank}', "");
Expect(0, 8, '\p{posixblank}', "");
Expect(1, 8, '\p{^posixblank}', "");
Expect(1, 8, '\P{posixblank}', "");
Expect(0, 8, '\P{^posixblank}', "");
Expect(1, 9, '\p{ PosixBlank}', "");
Expect(0, 9, '\p{^ PosixBlank}', "");
Expect(0, 9, '\P{ PosixBlank}', "");
Expect(1, 9, '\P{^ PosixBlank}', "");
Expect(0, 8, '\p{ PosixBlank}', "");
Expect(1, 8, '\p{^ PosixBlank}', "");
Expect(1, 8, '\P{ PosixBlank}', "");
Expect(0, 8, '\P{^ PosixBlank}', "");
Error('\p{-	IsPOSIXBLANK:=}');
Error('\P{-	IsPOSIXBLANK:=}');
Expect(1, 9, '\p{isposixblank}', "");
Expect(0, 9, '\p{^isposixblank}', "");
Expect(0, 9, '\P{isposixblank}', "");
Expect(1, 9, '\P{^isposixblank}', "");
Expect(0, 8, '\p{isposixblank}', "");
Expect(1, 8, '\p{^isposixblank}', "");
Expect(1, 8, '\P{isposixblank}', "");
Expect(0, 8, '\P{^isposixblank}', "");
Expect(1, 9, '\p{	 Is-posixblank}', "");
Expect(0, 9, '\p{^	 Is-posixblank}', "");
Expect(0, 9, '\P{	 Is-posixblank}', "");
Expect(1, 9, '\P{^	 Is-posixblank}', "");
Expect(0, 8, '\p{	 Is-posixblank}', "");
Expect(1, 8, '\p{^	 Is-posixblank}', "");
Expect(1, 8, '\P{	 Is-posixblank}', "");
Expect(0, 8, '\P{^	 Is-posixblank}', "");
Error('\p{__in/a/Sinhala}');
Error('\P{__in/a/Sinhala}');
Expect(1, 3583, '\p{insinhala}', "");
Expect(0, 3583, '\p{^insinhala}', "");
Expect(0, 3583, '\P{insinhala}', "");
Expect(1, 3583, '\P{^insinhala}', "");
Expect(0, 3455, '\p{insinhala}', "");
Expect(1, 3455, '\p{^insinhala}', "");
Expect(1, 3455, '\P{insinhala}', "");
Expect(0, 3455, '\P{^insinhala}', "");
Expect(1, 3583, '\p{_	Insinhala}', "");
Expect(0, 3583, '\p{^_	Insinhala}', "");
Expect(0, 3583, '\P{_	Insinhala}', "");
Expect(1, 3583, '\P{^_	Insinhala}', "");
Expect(0, 3455, '\p{_	Insinhala}', "");
Expect(1, 3455, '\p{^_	Insinhala}', "");
Expect(1, 3455, '\P{_	Insinhala}', "");
Expect(0, 3455, '\P{^_	Insinhala}', "");
Error('\p{:=--mongolian}');
Error('\P{:=--mongolian}');
Expect(1, 6145, '\p{mongolian}', "");
Expect(0, 6145, '\p{^mongolian}', "");
Expect(0, 6145, '\P{mongolian}', "");
Expect(1, 6145, '\P{^mongolian}', "");
Expect(0, 6143, '\p{mongolian}', "");
Expect(1, 6143, '\p{^mongolian}', "");
Expect(1, 6143, '\P{mongolian}', "");
Expect(0, 6143, '\P{^mongolian}', "");
Expect(1, 6145, '\p{-Mongolian}', "");
Expect(0, 6145, '\p{^-Mongolian}', "");
Expect(0, 6145, '\P{-Mongolian}', "");
Expect(1, 6145, '\P{^-Mongolian}', "");
Expect(0, 6143, '\p{-Mongolian}', "");
Expect(1, 6143, '\p{^-Mongolian}', "");
Expect(1, 6143, '\P{-Mongolian}', "");
Expect(0, 6143, '\P{^-Mongolian}', "");
Error('\p{ -is:=Mongolian}');
Error('\P{ -is:=Mongolian}');
Expect(1, 6145, '\p{ismongolian}', "");
Expect(0, 6145, '\p{^ismongolian}', "");
Expect(0, 6145, '\P{ismongolian}', "");
Expect(1, 6145, '\P{^ismongolian}', "");
Expect(0, 6143, '\p{ismongolian}', "");
Expect(1, 6143, '\p{^ismongolian}', "");
Expect(1, 6143, '\P{ismongolian}', "");
Expect(0, 6143, '\P{^ismongolian}', "");
Expect(1, 6145, '\p{ Is-Mongolian}', "");
Expect(0, 6145, '\p{^ Is-Mongolian}', "");
Expect(0, 6145, '\P{ Is-Mongolian}', "");
Expect(1, 6145, '\P{^ Is-Mongolian}', "");
Expect(0, 6143, '\p{ Is-Mongolian}', "");
Expect(1, 6143, '\p{^ Is-Mongolian}', "");
Expect(1, 6143, '\P{ Is-Mongolian}', "");
Expect(0, 6143, '\P{^ Is-Mongolian}', "");
Error('\p{ :=mong}');
Error('\P{ :=mong}');
Expect(1, 6145, '\p{mong}', "");
Expect(0, 6145, '\p{^mong}', "");
Expect(0, 6145, '\P{mong}', "");
Expect(1, 6145, '\P{^mong}', "");
Expect(0, 6143, '\p{mong}', "");
Expect(1, 6143, '\p{^mong}', "");
Expect(1, 6143, '\P{mong}', "");
Expect(0, 6143, '\P{^mong}', "");
Expect(1, 6145, '\p{	 Mong}', "");
Expect(0, 6145, '\p{^	 Mong}', "");
Expect(0, 6145, '\P{	 Mong}', "");
Expect(1, 6145, '\P{^	 Mong}', "");
Expect(0, 6143, '\p{	 Mong}', "");
Expect(1, 6143, '\p{^	 Mong}', "");
Expect(1, 6143, '\P{	 Mong}', "");
Expect(0, 6143, '\P{^	 Mong}', "");
Error('\p{/a/	 Is_Mong}');
Error('\P{/a/	 Is_Mong}');
Expect(1, 6145, '\p{ismong}', "");
Expect(0, 6145, '\p{^ismong}', "");
Expect(0, 6145, '\P{ismong}', "");
Expect(1, 6145, '\P{^ismong}', "");
Expect(0, 6143, '\p{ismong}', "");
Expect(1, 6143, '\p{^ismong}', "");
Expect(1, 6143, '\P{ismong}', "");
Expect(0, 6143, '\P{^ismong}', "");
Expect(1, 6145, '\p{_	is_Mong}', "");
Expect(0, 6145, '\p{^_	is_Mong}', "");
Expect(0, 6145, '\P{_	is_Mong}', "");
Expect(1, 6145, '\P{^_	is_Mong}', "");
Expect(0, 6143, '\p{_	is_Mong}', "");
Expect(1, 6143, '\p{^_	is_Mong}', "");
Expect(1, 6143, '\P{_	is_Mong}', "");
Expect(0, 6143, '\P{^_	is_Mong}', "");
Error('\p{/a/_Cherokee}');
Error('\P{/a/_Cherokee}');
Expect(1, 5108, '\p{cherokee}', "");
Expect(0, 5108, '\p{^cherokee}', "");
Expect(0, 5108, '\P{cherokee}', "");
Expect(1, 5108, '\P{^cherokee}', "");
Expect(0, 5023, '\p{cherokee}', "");
Expect(1, 5023, '\p{^cherokee}', "");
Expect(1, 5023, '\P{cherokee}', "");
Expect(0, 5023, '\P{^cherokee}', "");
Expect(1, 5108, '\p{ _CHEROKEE}', "");
Expect(0, 5108, '\p{^ _CHEROKEE}', "");
Expect(0, 5108, '\P{ _CHEROKEE}', "");
Expect(1, 5108, '\P{^ _CHEROKEE}', "");
Expect(0, 5023, '\p{ _CHEROKEE}', "");
Expect(1, 5023, '\p{^ _CHEROKEE}', "");
Expect(1, 5023, '\P{ _CHEROKEE}', "");
Expect(0, 5023, '\P{^ _CHEROKEE}', "");
Error('\p{/a/		Is	cherokee}');
Error('\P{/a/		Is	cherokee}');
Expect(1, 5108, '\p{ischerokee}', "");
Expect(0, 5108, '\p{^ischerokee}', "");
Expect(0, 5108, '\P{ischerokee}', "");
Expect(1, 5108, '\P{^ischerokee}', "");
Expect(0, 5023, '\p{ischerokee}', "");
Expect(1, 5023, '\p{^ischerokee}', "");
Expect(1, 5023, '\P{ischerokee}', "");
Expect(0, 5023, '\P{^ischerokee}', "");
Expect(1, 5108, '\p{-	Is-Cherokee}', "");
Expect(0, 5108, '\p{^-	Is-Cherokee}', "");
Expect(0, 5108, '\P{-	Is-Cherokee}', "");
Expect(1, 5108, '\P{^-	Is-Cherokee}', "");
Expect(0, 5023, '\p{-	Is-Cherokee}', "");
Expect(1, 5023, '\p{^-	Is-Cherokee}', "");
Expect(1, 5023, '\P{-	Is-Cherokee}', "");
Expect(0, 5023, '\P{^-	Is-Cherokee}', "");
Error('\p{- cher/a/}');
Error('\P{- cher/a/}');
Expect(1, 5108, '\p{cher}', "");
Expect(0, 5108, '\p{^cher}', "");
Expect(0, 5108, '\P{cher}', "");
Expect(1, 5108, '\P{^cher}', "");
Expect(0, 5023, '\p{cher}', "");
Expect(1, 5023, '\p{^cher}', "");
Expect(1, 5023, '\P{cher}', "");
Expect(0, 5023, '\P{^cher}', "");
Expect(1, 5108, '\p{- CHER}', "");
Expect(0, 5108, '\p{^- CHER}', "");
Expect(0, 5108, '\P{- CHER}', "");
Expect(1, 5108, '\P{^- CHER}', "");
Expect(0, 5023, '\p{- CHER}', "");
Expect(1, 5023, '\p{^- CHER}', "");
Expect(1, 5023, '\P{- CHER}', "");
Expect(0, 5023, '\P{^- CHER}', "");
Error('\p{:=-	isCher}');
Error('\P{:=-	isCher}');
Expect(1, 5108, '\p{ischer}', "");
Expect(0, 5108, '\p{^ischer}', "");
Expect(0, 5108, '\P{ischer}', "");
Expect(1, 5108, '\P{^ischer}', "");
Expect(0, 5023, '\p{ischer}', "");
Expect(1, 5023, '\p{^ischer}', "");
Expect(1, 5023, '\P{ischer}', "");
Expect(0, 5023, '\P{^ischer}', "");
Expect(1, 5108, '\p{	Is Cher}', "");
Expect(0, 5108, '\p{^	Is Cher}', "");
Expect(0, 5108, '\P{	Is Cher}', "");
Expect(1, 5108, '\P{^	Is Cher}', "");
Expect(0, 5023, '\p{	Is Cher}', "");
Expect(1, 5023, '\p{^	Is Cher}', "");
Expect(1, 5023, '\P{	Is Cher}', "");
Expect(0, 5023, '\P{^	Is Cher}', "");
Error('\p{  Samaritan:=}');
Error('\P{  Samaritan:=}');
Expect(1, 2093, '\p{samaritan}', "");
Expect(0, 2093, '\p{^samaritan}', "");
Expect(0, 2093, '\P{samaritan}', "");
Expect(1, 2093, '\P{^samaritan}', "");
Expect(0, 2047, '\p{samaritan}', "");
Expect(1, 2047, '\p{^samaritan}', "");
Expect(1, 2047, '\P{samaritan}', "");
Expect(0, 2047, '\P{^samaritan}', "");
Expect(1, 2093, '\p{	Samaritan}', "");
Expect(0, 2093, '\p{^	Samaritan}', "");
Expect(0, 2093, '\P{	Samaritan}', "");
Expect(1, 2093, '\P{^	Samaritan}', "");
Expect(0, 2047, '\p{	Samaritan}', "");
Expect(1, 2047, '\p{^	Samaritan}', "");
Expect(1, 2047, '\P{	Samaritan}', "");
Expect(0, 2047, '\P{^	Samaritan}', "");
Error('\p{ /a/Is_Samaritan}');
Error('\P{ /a/Is_Samaritan}');
Expect(1, 2093, '\p{issamaritan}', "");
Expect(0, 2093, '\p{^issamaritan}', "");
Expect(0, 2093, '\P{issamaritan}', "");
Expect(1, 2093, '\P{^issamaritan}', "");
Expect(0, 2047, '\p{issamaritan}', "");
Expect(1, 2047, '\p{^issamaritan}', "");
Expect(1, 2047, '\P{issamaritan}', "");
Expect(0, 2047, '\P{^issamaritan}', "");
Expect(1, 2093, '\p{	-Is	Samaritan}', "");
Expect(0, 2093, '\p{^	-Is	Samaritan}', "");
Expect(0, 2093, '\P{	-Is	Samaritan}', "");
Expect(1, 2093, '\P{^	-Is	Samaritan}', "");
Expect(0, 2047, '\p{	-Is	Samaritan}', "");
Expect(1, 2047, '\p{^	-Is	Samaritan}', "");
Expect(1, 2047, '\P{	-Is	Samaritan}', "");
Expect(0, 2047, '\P{^	-Is	Samaritan}', "");
Error('\p{_-Samr/a/}');
Error('\P{_-Samr/a/}');
Expect(1, 2093, '\p{samr}', "");
Expect(0, 2093, '\p{^samr}', "");
Expect(0, 2093, '\P{samr}', "");
Expect(1, 2093, '\P{^samr}', "");
Expect(0, 2047, '\p{samr}', "");
Expect(1, 2047, '\p{^samr}', "");
Expect(1, 2047, '\P{samr}', "");
Expect(0, 2047, '\P{^samr}', "");
Expect(1, 2093, '\p{	 samr}', "");
Expect(0, 2093, '\p{^	 samr}', "");
Expect(0, 2093, '\P{	 samr}', "");
Expect(1, 2093, '\P{^	 samr}', "");
Expect(0, 2047, '\p{	 samr}', "");
Expect(1, 2047, '\p{^	 samr}', "");
Expect(1, 2047, '\P{	 samr}', "");
Expect(0, 2047, '\P{^	 samr}', "");
Error('\p{/a/ Is	Samr}');
Error('\P{/a/ Is	Samr}');
Expect(1, 2093, '\p{issamr}', "");
Expect(0, 2093, '\p{^issamr}', "");
Expect(0, 2093, '\P{issamr}', "");
Expect(1, 2093, '\P{^issamr}', "");
Expect(0, 2047, '\p{issamr}', "");
Expect(1, 2047, '\p{^issamr}', "");
Expect(1, 2047, '\P{issamr}', "");
Expect(0, 2047, '\P{^issamr}', "");
Expect(1, 2093, '\p{__IS samr}', "");
Expect(0, 2093, '\p{^__IS samr}', "");
Expect(0, 2093, '\P{__IS samr}', "");
Expect(1, 2093, '\P{^__IS samr}', "");
Expect(0, 2047, '\p{__IS samr}', "");
Expect(1, 2047, '\p{^__IS samr}', "");
Expect(1, 2047, '\P{__IS samr}', "");
Expect(0, 2047, '\P{^__IS samr}', "");
Error('\p{-OtherPunctuation:=}');
Error('\P{-OtherPunctuation:=}');
Expect(1, 35, '\p{otherpunctuation}', "");
Expect(0, 35, '\p{^otherpunctuation}', "");
Expect(0, 35, '\P{otherpunctuation}', "");
Expect(1, 35, '\P{^otherpunctuation}', "");
Expect(0, 32, '\p{otherpunctuation}', "");
Expect(1, 32, '\p{^otherpunctuation}', "");
Expect(1, 32, '\P{otherpunctuation}', "");
Expect(0, 32, '\P{^otherpunctuation}', "");
Expect(1, 35, '\p{ other-Punctuation}', "");
Expect(0, 35, '\p{^ other-Punctuation}', "");
Expect(0, 35, '\P{ other-Punctuation}', "");
Expect(1, 35, '\P{^ other-Punctuation}', "");
Expect(0, 32, '\p{ other-Punctuation}', "");
Expect(1, 32, '\p{^ other-Punctuation}', "");
Expect(1, 32, '\P{ other-Punctuation}', "");
Expect(0, 32, '\P{^ other-Punctuation}', "");
Error('\p{  Is	OTHER Punctuation:=}');
Error('\P{  Is	OTHER Punctuation:=}');
Expect(1, 35, '\p{isotherpunctuation}', "");
Expect(0, 35, '\p{^isotherpunctuation}', "");
Expect(0, 35, '\P{isotherpunctuation}', "");
Expect(1, 35, '\P{^isotherpunctuation}', "");
Expect(0, 32, '\p{isotherpunctuation}', "");
Expect(1, 32, '\p{^isotherpunctuation}', "");
Expect(1, 32, '\P{isotherpunctuation}', "");
Expect(0, 32, '\P{^isotherpunctuation}', "");
Expect(1, 35, '\p{	IS other Punctuation}', "");
Expect(0, 35, '\p{^	IS other Punctuation}', "");
Expect(0, 35, '\P{	IS other Punctuation}', "");
Expect(1, 35, '\P{^	IS other Punctuation}', "");
Expect(0, 32, '\p{	IS other Punctuation}', "");
Expect(1, 32, '\p{^	IS other Punctuation}', "");
Expect(1, 32, '\P{	IS other Punctuation}', "");
Expect(0, 32, '\P{^	IS other Punctuation}', "");
Error('\p{-	po/a/}');
Error('\P{-	po/a/}');
Expect(1, 35, '\p{po}', "");
Expect(0, 35, '\p{^po}', "");
Expect(0, 35, '\P{po}', "");
Expect(1, 35, '\P{^po}', "");
Expect(0, 32, '\p{po}', "");
Expect(1, 32, '\p{^po}', "");
Expect(1, 32, '\P{po}', "");
Expect(0, 32, '\P{^po}', "");
Expect(1, 35, '\p{-Po}', "");
Expect(0, 35, '\p{^-Po}', "");
Expect(0, 35, '\P{-Po}', "");
Expect(1, 35, '\P{^-Po}', "");
Expect(0, 32, '\p{-Po}', "");
Expect(1, 32, '\p{^-Po}', "");
Expect(1, 32, '\P{-Po}', "");
Expect(0, 32, '\P{^-Po}', "");
Error('\p{ Is:=Po}');
Error('\P{ Is:=Po}');
Expect(1, 35, '\p{ispo}', "");
Expect(0, 35, '\p{^ispo}', "");
Expect(0, 35, '\P{ispo}', "");
Expect(1, 35, '\P{^ispo}', "");
Expect(0, 32, '\p{ispo}', "");
Expect(1, 32, '\p{^ispo}', "");
Expect(1, 32, '\P{ispo}', "");
Expect(0, 32, '\P{^ispo}', "");
Expect(1, 35, '\p{--Is_Po}', "");
Expect(0, 35, '\p{^--Is_Po}', "");
Expect(0, 35, '\P{--Is_Po}', "");
Expect(1, 35, '\P{^--Is_Po}', "");
Expect(0, 32, '\p{--Is_Po}', "");
Expect(1, 32, '\p{^--Is_Po}', "");
Expect(1, 32, '\P{--Is_Po}', "");
Expect(0, 32, '\P{^--Is_Po}', "");
Error('\p{  CASE/a/IGNORABLE}');
Error('\P{  CASE/a/IGNORABLE}');
Expect(1, 39, '\p{caseignorable}', "");
Expect(0, 39, '\p{^caseignorable}', "");
Expect(0, 39, '\P{caseignorable}', "");
Expect(1, 39, '\P{^caseignorable}', "");
Expect(0, 38, '\p{caseignorable}', "");
Expect(1, 38, '\p{^caseignorable}', "");
Expect(1, 38, '\P{caseignorable}', "");
Expect(0, 38, '\P{^caseignorable}', "");
Expect(1, 39, '\p{-_Case	Ignorable}', "");
Expect(0, 39, '\p{^-_Case	Ignorable}', "");
Expect(0, 39, '\P{-_Case	Ignorable}', "");
Expect(1, 39, '\P{^-_Case	Ignorable}', "");
Expect(0, 38, '\p{-_Case	Ignorable}', "");
Expect(1, 38, '\p{^-_Case	Ignorable}', "");
Expect(1, 38, '\P{-_Case	Ignorable}', "");
Expect(0, 38, '\P{^-_Case	Ignorable}', "");
Error('\p{_/a/IS CaseIGNORABLE}');
Error('\P{_/a/IS CaseIGNORABLE}');
Expect(1, 39, '\p{iscaseignorable}', "");
Expect(0, 39, '\p{^iscaseignorable}', "");
Expect(0, 39, '\P{iscaseignorable}', "");
Expect(1, 39, '\P{^iscaseignorable}', "");
Expect(0, 38, '\p{iscaseignorable}', "");
Expect(1, 38, '\p{^iscaseignorable}', "");
Expect(1, 38, '\P{iscaseignorable}', "");
Expect(0, 38, '\P{^iscaseignorable}', "");
Expect(1, 39, '\p{ IS_Case ignorable}', "");
Expect(0, 39, '\p{^ IS_Case ignorable}', "");
Expect(0, 39, '\P{ IS_Case ignorable}', "");
Expect(1, 39, '\P{^ IS_Case ignorable}', "");
Expect(0, 38, '\p{ IS_Case ignorable}', "");
Expect(1, 38, '\p{^ IS_Case ignorable}', "");
Expect(1, 38, '\P{ IS_Case ignorable}', "");
Expect(0, 38, '\P{^ IS_Case ignorable}', "");
Error('\p{	_CI/a/}');
Error('\P{	_CI/a/}');
Expect(1, 39, '\p{ci}', "");
Expect(0, 39, '\p{^ci}', "");
Expect(0, 39, '\P{ci}', "");
Expect(1, 39, '\P{^ci}', "");
Expect(0, 38, '\p{ci}', "");
Expect(1, 38, '\p{^ci}', "");
Expect(1, 38, '\P{ci}', "");
Expect(0, 38, '\P{^ci}', "");
Expect(1, 39, '\p{-	ci}', "");
Expect(0, 39, '\p{^-	ci}', "");
Expect(0, 39, '\P{-	ci}', "");
Expect(1, 39, '\P{^-	ci}', "");
Expect(0, 38, '\p{-	ci}', "");
Expect(1, 38, '\p{^-	ci}', "");
Expect(1, 38, '\P{-	ci}', "");
Expect(0, 38, '\P{^-	ci}', "");
Error('\p{	:=Is	CI}');
Error('\P{	:=Is	CI}');
Expect(1, 39, '\p{isci}', "");
Expect(0, 39, '\p{^isci}', "");
Expect(0, 39, '\P{isci}', "");
Expect(1, 39, '\P{^isci}', "");
Expect(0, 38, '\p{isci}', "");
Expect(1, 38, '\p{^isci}', "");
Expect(1, 38, '\P{isci}', "");
Expect(0, 38, '\P{^isci}', "");
Expect(1, 39, '\p{--IS-ci}', "");
Expect(0, 39, '\p{^--IS-ci}', "");
Expect(0, 39, '\P{--IS-ci}', "");
Expect(1, 39, '\P{^--IS-ci}', "");
Expect(0, 38, '\p{--IS-ci}', "");
Expect(1, 38, '\p{^--IS-ci}', "");
Expect(1, 38, '\P{--IS-ci}', "");
Expect(0, 38, '\P{^--IS-ci}', "");
Error('\p{ _	Case/a/IGNORABLE}');
Error('\P{ _	Case/a/IGNORABLE}');
Expect(1, 39, '\p{_CASE_ignorable}', "");
Expect(0, 39, '\p{^_CASE_ignorable}', "");
Expect(0, 39, '\P{_CASE_ignorable}', "");
Expect(1, 39, '\P{^_CASE_ignorable}', "");
Expect(0, 38, '\p{_CASE_ignorable}', "");
Expect(1, 38, '\p{^_CASE_ignorable}', "");
Expect(1, 38, '\P{_CASE_ignorable}', "");
Expect(0, 38, '\P{^_CASE_ignorable}', "");
Error('\p{ _ChangesWHENNFKC Casefolded/a/}');
Error('\P{ _ChangesWHENNFKC Casefolded/a/}');
Expect(1, 90, '\p{changeswhennfkccasefolded}', "");
Expect(0, 90, '\p{^changeswhennfkccasefolded}', "");
Expect(0, 90, '\P{changeswhennfkccasefolded}', "");
Expect(1, 90, '\P{^changeswhennfkccasefolded}', "");
Expect(0, 64, '\p{changeswhennfkccasefolded}', "");
Expect(1, 64, '\p{^changeswhennfkccasefolded}', "");
Expect(1, 64, '\P{changeswhennfkccasefolded}', "");
Expect(0, 64, '\P{^changeswhennfkccasefolded}', "");
Expect(1, 90, '\p{ -Changes-WHEN	NFKC_Casefolded}', "");
Expect(0, 90, '\p{^ -Changes-WHEN	NFKC_Casefolded}', "");
Expect(0, 90, '\P{ -Changes-WHEN	NFKC_Casefolded}', "");
Expect(1, 90, '\P{^ -Changes-WHEN	NFKC_Casefolded}', "");
Expect(0, 64, '\p{ -Changes-WHEN	NFKC_Casefolded}', "");
Expect(1, 64, '\p{^ -Changes-WHEN	NFKC_Casefolded}', "");
Expect(1, 64, '\P{ -Changes-WHEN	NFKC_Casefolded}', "");
Expect(0, 64, '\P{^ -Changes-WHEN	NFKC_Casefolded}', "");
Error('\p{	:=Is_Changes-WHEN	NFKC-Casefolded}');
Error('\P{	:=Is_Changes-WHEN	NFKC-Casefolded}');
Expect(1, 90, '\p{ischangeswhennfkccasefolded}', "");
Expect(0, 90, '\p{^ischangeswhennfkccasefolded}', "");
Expect(0, 90, '\P{ischangeswhennfkccasefolded}', "");
Expect(1, 90, '\P{^ischangeswhennfkccasefolded}', "");
Expect(0, 64, '\p{ischangeswhennfkccasefolded}', "");
Expect(1, 64, '\p{^ischangeswhennfkccasefolded}', "");
Expect(1, 64, '\P{ischangeswhennfkccasefolded}', "");
Expect(0, 64, '\P{^ischangeswhennfkccasefolded}', "");
Expect(1, 90, '\p{_	Is-changes	When NFKC	casefolded}', "");
Expect(0, 90, '\p{^_	Is-changes	When NFKC	casefolded}', "");
Expect(0, 90, '\P{_	Is-changes	When NFKC	casefolded}', "");
Expect(1, 90, '\P{^_	Is-changes	When NFKC	casefolded}', "");
Expect(0, 64, '\p{_	Is-changes	When NFKC	casefolded}', "");
Expect(1, 64, '\p{^_	Is-changes	When NFKC	casefolded}', "");
Expect(1, 64, '\P{_	Is-changes	When NFKC	casefolded}', "");
Expect(0, 64, '\P{^_	Is-changes	When NFKC	casefolded}', "");
Error('\p{	:=CWKCF}');
Error('\P{	:=CWKCF}');
Expect(1, 90, '\p{cwkcf}', "");
Expect(0, 90, '\p{^cwkcf}', "");
Expect(0, 90, '\P{cwkcf}', "");
Expect(1, 90, '\P{^cwkcf}', "");
Expect(0, 64, '\p{cwkcf}', "");
Expect(1, 64, '\p{^cwkcf}', "");
Expect(1, 64, '\P{cwkcf}', "");
Expect(0, 64, '\P{^cwkcf}', "");
Expect(1, 90, '\p{--CWKCF}', "");
Expect(0, 90, '\p{^--CWKCF}', "");
Expect(0, 90, '\P{--CWKCF}', "");
Expect(1, 90, '\P{^--CWKCF}', "");
Expect(0, 64, '\p{--CWKCF}', "");
Expect(1, 64, '\p{^--CWKCF}', "");
Expect(1, 64, '\P{--CWKCF}', "");
Expect(0, 64, '\P{^--CWKCF}', "");
Error('\p{_:=is-CWKCF}');
Error('\P{_:=is-CWKCF}');
Expect(1, 90, '\p{iscwkcf}', "");
Expect(0, 90, '\p{^iscwkcf}', "");
Expect(0, 90, '\P{iscwkcf}', "");
Expect(1, 90, '\P{^iscwkcf}', "");
Expect(0, 64, '\p{iscwkcf}', "");
Expect(1, 64, '\p{^iscwkcf}', "");
Expect(1, 64, '\P{iscwkcf}', "");
Expect(0, 64, '\P{^iscwkcf}', "");
Expect(1, 90, '\p{ 	IS CWKCF}', "");
Expect(0, 90, '\p{^ 	IS CWKCF}', "");
Expect(0, 90, '\P{ 	IS CWKCF}', "");
Expect(1, 90, '\P{^ 	IS CWKCF}', "");
Expect(0, 64, '\p{ 	IS CWKCF}', "");
Expect(1, 64, '\p{^ 	IS CWKCF}', "");
Expect(1, 64, '\P{ 	IS CWKCF}', "");
Expect(0, 64, '\P{^ 	IS CWKCF}', "");
Error('\p{ 	In:=Cherokee}');
Error('\P{ 	In:=Cherokee}');
Expect(1, 5119, '\p{incherokee}', "");
Expect(0, 5119, '\p{^incherokee}', "");
Expect(0, 5119, '\P{incherokee}', "");
Expect(1, 5119, '\P{^incherokee}', "");
Expect(0, 5023, '\p{incherokee}', "");
Expect(1, 5023, '\p{^incherokee}', "");
Expect(1, 5023, '\P{incherokee}', "");
Expect(0, 5023, '\P{^incherokee}', "");
Expect(1, 5119, '\p{	InCherokee}', "");
Expect(0, 5119, '\p{^	InCherokee}', "");
Expect(0, 5119, '\P{	InCherokee}', "");
Expect(1, 5119, '\P{^	InCherokee}', "");
Expect(0, 5023, '\p{	InCherokee}', "");
Expect(1, 5023, '\p{^	InCherokee}', "");
Expect(1, 5023, '\P{	InCherokee}', "");
Expect(0, 5023, '\P{^	InCherokee}', "");
Error('\p{:=_ethiopic}');
Error('\P{:=_ethiopic}');
Expect(1, 4680, '\p{ethiopic}', "");
Expect(0, 4680, '\p{^ethiopic}', "");
Expect(0, 4680, '\P{ethiopic}', "");
Expect(1, 4680, '\P{^ethiopic}', "");
Expect(0, 4607, '\p{ethiopic}', "");
Expect(1, 4607, '\p{^ethiopic}', "");
Expect(1, 4607, '\P{ethiopic}', "");
Expect(0, 4607, '\P{^ethiopic}', "");
Expect(1, 4680, '\p{--ethiopic}', "");
Expect(0, 4680, '\p{^--ethiopic}', "");
Expect(0, 4680, '\P{--ethiopic}', "");
Expect(1, 4680, '\P{^--ethiopic}', "");
Expect(0, 4607, '\p{--ethiopic}', "");
Expect(1, 4607, '\p{^--ethiopic}', "");
Expect(1, 4607, '\P{--ethiopic}', "");
Expect(0, 4607, '\P{^--ethiopic}', "");
Error('\p{__Is_ethiopic/a/}');
Error('\P{__Is_ethiopic/a/}');
Expect(1, 4680, '\p{isethiopic}', "");
Expect(0, 4680, '\p{^isethiopic}', "");
Expect(0, 4680, '\P{isethiopic}', "");
Expect(1, 4680, '\P{^isethiopic}', "");
Expect(0, 4607, '\p{isethiopic}', "");
Expect(1, 4607, '\p{^isethiopic}', "");
Expect(1, 4607, '\P{isethiopic}', "");
Expect(0, 4607, '\P{^isethiopic}', "");
Expect(1, 4680, '\p{-	IS Ethiopic}', "");
Expect(0, 4680, '\p{^-	IS Ethiopic}', "");
Expect(0, 4680, '\P{-	IS Ethiopic}', "");
Expect(1, 4680, '\P{^-	IS Ethiopic}', "");
Expect(0, 4607, '\p{-	IS Ethiopic}', "");
Expect(1, 4607, '\p{^-	IS Ethiopic}', "");
Expect(1, 4607, '\P{-	IS Ethiopic}', "");
Expect(0, 4607, '\P{^-	IS Ethiopic}', "");
Error('\p{ 	Ethi:=}');
Error('\P{ 	Ethi:=}');
Expect(1, 4680, '\p{ethi}', "");
Expect(0, 4680, '\p{^ethi}', "");
Expect(0, 4680, '\P{ethi}', "");
Expect(1, 4680, '\P{^ethi}', "");
Expect(0, 4607, '\p{ethi}', "");
Expect(1, 4607, '\p{^ethi}', "");
Expect(1, 4607, '\P{ethi}', "");
Expect(0, 4607, '\P{^ethi}', "");
Expect(1, 4680, '\p{ ethi}', "");
Expect(0, 4680, '\p{^ ethi}', "");
Expect(0, 4680, '\P{ ethi}', "");
Expect(1, 4680, '\P{^ ethi}', "");
Expect(0, 4607, '\p{ ethi}', "");
Expect(1, 4607, '\p{^ ethi}', "");
Expect(1, 4607, '\P{ ethi}', "");
Expect(0, 4607, '\P{^ ethi}', "");
Error('\p{/a/Is Ethi}');
Error('\P{/a/Is Ethi}');
Expect(1, 4680, '\p{isethi}', "");
Expect(0, 4680, '\p{^isethi}', "");
Expect(0, 4680, '\P{isethi}', "");
Expect(1, 4680, '\P{^isethi}', "");
Expect(0, 4607, '\p{isethi}', "");
Expect(1, 4607, '\p{^isethi}', "");
Expect(1, 4607, '\P{isethi}', "");
Expect(0, 4607, '\P{^isethi}', "");
Expect(1, 4680, '\p{		Is Ethi}', "");
Expect(0, 4680, '\p{^		Is Ethi}', "");
Expect(0, 4680, '\P{		Is Ethi}', "");
Expect(1, 4680, '\P{^		Is Ethi}', "");
Expect(0, 4607, '\p{		Is Ethi}', "");
Expect(1, 4607, '\p{^		Is Ethi}', "");
Expect(1, 4607, '\P{		Is Ethi}', "");
Expect(0, 4607, '\P{^		Is Ethi}', "");
Error('\p{__X_Begin/a/}');
Error('\P{__X_Begin/a/}');
Expect(1, 126, '\p{_X_BEGIN}', "");
Expect(0, 126, '\p{^_X_BEGIN}', "");
Expect(0, 126, '\P{_X_BEGIN}', "");
Expect(1, 126, '\P{^_X_BEGIN}', "");
Expect(0, 31, '\p{_X_BEGIN}', "");
Expect(1, 31, '\p{^_X_BEGIN}', "");
Expect(1, 31, '\P{_X_BEGIN}', "");
Expect(0, 31, '\P{^_X_BEGIN}', "");
Error('\p{		yi:=}');
Error('\P{		yi:=}');
Expect(1, 42124, '\p{yi}', "");
Expect(0, 42124, '\p{^yi}', "");
Expect(0, 42124, '\P{yi}', "");
Expect(1, 42124, '\P{^yi}', "");
Expect(0, 40959, '\p{yi}', "");
Expect(1, 40959, '\p{^yi}', "");
Expect(1, 40959, '\P{yi}', "");
Expect(0, 40959, '\P{^yi}', "");
Expect(1, 42124, '\p{	_Yi}', "");
Expect(0, 42124, '\p{^	_Yi}', "");
Expect(0, 42124, '\P{	_Yi}', "");
Expect(1, 42124, '\P{^	_Yi}', "");
Expect(0, 40959, '\p{	_Yi}', "");
Expect(1, 40959, '\p{^	_Yi}', "");
Expect(1, 40959, '\P{	_Yi}', "");
Expect(0, 40959, '\P{^	_Yi}', "");
Error('\p{ 	is/a/Yi}');
Error('\P{ 	is/a/Yi}');
Expect(1, 42124, '\p{isyi}', "");
Expect(0, 42124, '\p{^isyi}', "");
Expect(0, 42124, '\P{isyi}', "");
Expect(1, 42124, '\P{^isyi}', "");
Expect(0, 40959, '\p{isyi}', "");
Expect(1, 40959, '\p{^isyi}', "");
Expect(1, 40959, '\P{isyi}', "");
Expect(0, 40959, '\P{^isyi}', "");
Expect(1, 42124, '\p{__IsYI}', "");
Expect(0, 42124, '\p{^__IsYI}', "");
Expect(0, 42124, '\P{__IsYI}', "");
Expect(1, 42124, '\P{^__IsYI}', "");
Expect(0, 40959, '\p{__IsYI}', "");
Expect(1, 40959, '\p{^__IsYI}', "");
Expect(1, 40959, '\P{__IsYI}', "");
Expect(0, 40959, '\P{^__IsYI}', "");
Error('\p{/a/Yiii}');
Error('\P{/a/Yiii}');
Expect(1, 42124, '\p{yiii}', "");
Expect(0, 42124, '\p{^yiii}', "");
Expect(0, 42124, '\P{yiii}', "");
Expect(1, 42124, '\P{^yiii}', "");
Expect(0, 40959, '\p{yiii}', "");
Expect(1, 40959, '\p{^yiii}', "");
Expect(1, 40959, '\P{yiii}', "");
Expect(0, 40959, '\P{^yiii}', "");
Expect(1, 42124, '\p{- Yiii}', "");
Expect(0, 42124, '\p{^- Yiii}', "");
Expect(0, 42124, '\P{- Yiii}', "");
Expect(1, 42124, '\P{^- Yiii}', "");
Expect(0, 40959, '\p{- Yiii}', "");
Expect(1, 40959, '\p{^- Yiii}', "");
Expect(1, 40959, '\P{- Yiii}', "");
Expect(0, 40959, '\P{^- Yiii}', "");
Error('\p{ 	ISYiii:=}');
Error('\P{ 	ISYiii:=}');
Expect(1, 42124, '\p{isyiii}', "");
Expect(0, 42124, '\p{^isyiii}', "");
Expect(0, 42124, '\P{isyiii}', "");
Expect(1, 42124, '\P{^isyiii}', "");
Expect(0, 40959, '\p{isyiii}', "");
Expect(1, 40959, '\p{^isyiii}', "");
Expect(1, 40959, '\P{isyiii}', "");
Expect(0, 40959, '\P{^isyiii}', "");
Expect(1, 42124, '\p{ 	Is	YIII}', "");
Expect(0, 42124, '\p{^ 	Is	YIII}', "");
Expect(0, 42124, '\P{ 	Is	YIII}', "");
Expect(1, 42124, '\P{^ 	Is	YIII}', "");
Expect(0, 40959, '\p{ 	Is	YIII}', "");
Expect(1, 40959, '\p{^ 	Is	YIII}', "");
Expect(1, 40959, '\P{ 	Is	YIII}', "");
Expect(0, 40959, '\P{^ 	Is	YIII}', "");
Error('\p{/a/_gurmukhi}');
Error('\P{/a/_gurmukhi}');
Expect(1, 2563, '\p{gurmukhi}', "");
Expect(0, 2563, '\p{^gurmukhi}', "");
Expect(0, 2563, '\P{gurmukhi}', "");
Expect(1, 2563, '\P{^gurmukhi}', "");
Expect(0, 2560, '\p{gurmukhi}', "");
Expect(1, 2560, '\p{^gurmukhi}', "");
Expect(1, 2560, '\P{gurmukhi}', "");
Expect(0, 2560, '\P{^gurmukhi}', "");
Expect(1, 2563, '\p{	-Gurmukhi}', "");
Expect(0, 2563, '\p{^	-Gurmukhi}', "");
Expect(0, 2563, '\P{	-Gurmukhi}', "");
Expect(1, 2563, '\P{^	-Gurmukhi}', "");
Expect(0, 2560, '\p{	-Gurmukhi}', "");
Expect(1, 2560, '\p{^	-Gurmukhi}', "");
Expect(1, 2560, '\P{	-Gurmukhi}', "");
Expect(0, 2560, '\P{^	-Gurmukhi}', "");
Error('\p{_/a/Is	Gurmukhi}');
Error('\P{_/a/Is	Gurmukhi}');
Expect(1, 2563, '\p{isgurmukhi}', "");
Expect(0, 2563, '\p{^isgurmukhi}', "");
Expect(0, 2563, '\P{isgurmukhi}', "");
Expect(1, 2563, '\P{^isgurmukhi}', "");
Expect(0, 2560, '\p{isgurmukhi}', "");
Expect(1, 2560, '\p{^isgurmukhi}', "");
Expect(1, 2560, '\P{isgurmukhi}', "");
Expect(0, 2560, '\P{^isgurmukhi}', "");
Expect(1, 2563, '\p{_is-gurmukhi}', "");
Expect(0, 2563, '\p{^_is-gurmukhi}', "");
Expect(0, 2563, '\P{_is-gurmukhi}', "");
Expect(1, 2563, '\P{^_is-gurmukhi}', "");
Expect(0, 2560, '\p{_is-gurmukhi}', "");
Expect(1, 2560, '\p{^_is-gurmukhi}', "");
Expect(1, 2560, '\P{_is-gurmukhi}', "");
Expect(0, 2560, '\P{^_is-gurmukhi}', "");
Error('\p{:=		GURU}');
Error('\P{:=		GURU}');
Expect(1, 2563, '\p{guru}', "");
Expect(0, 2563, '\p{^guru}', "");
Expect(0, 2563, '\P{guru}', "");
Expect(1, 2563, '\P{^guru}', "");
Expect(0, 2560, '\p{guru}', "");
Expect(1, 2560, '\p{^guru}', "");
Expect(1, 2560, '\P{guru}', "");
Expect(0, 2560, '\P{^guru}', "");
Expect(1, 2563, '\p{_GURU}', "");
Expect(0, 2563, '\p{^_GURU}', "");
Expect(0, 2563, '\P{_GURU}', "");
Expect(1, 2563, '\P{^_GURU}', "");
Expect(0, 2560, '\p{_GURU}', "");
Expect(1, 2560, '\p{^_GURU}', "");
Expect(1, 2560, '\P{_GURU}', "");
Expect(0, 2560, '\P{^_GURU}', "");
Error('\p{	 Is:=guru}');
Error('\P{	 Is:=guru}');
Expect(1, 2563, '\p{isguru}', "");
Expect(0, 2563, '\p{^isguru}', "");
Expect(0, 2563, '\P{isguru}', "");
Expect(1, 2563, '\P{^isguru}', "");
Expect(0, 2560, '\p{isguru}', "");
Expect(1, 2560, '\p{^isguru}', "");
Expect(1, 2560, '\P{isguru}', "");
Expect(0, 2560, '\P{^isguru}', "");
Expect(1, 2563, '\p{-Is	GURU}', "");
Expect(0, 2563, '\p{^-Is	GURU}', "");
Expect(0, 2563, '\P{-Is	GURU}', "");
Expect(1, 2563, '\P{^-Is	GURU}', "");
Expect(0, 2560, '\p{-Is	GURU}', "");
Expect(1, 2560, '\p{^-Is	GURU}', "");
Expect(1, 2560, '\P{-Is	GURU}', "");
Expect(0, 2560, '\P{^-Is	GURU}', "");
Error('\p{ 	LATIN Extended/a/B}');
Error('\P{ 	LATIN Extended/a/B}');
Expect(1, 591, '\p{latinextendedb}', "");
Expect(0, 591, '\p{^latinextendedb}', "");
Expect(0, 591, '\P{latinextendedb}', "");
Expect(1, 591, '\P{^latinextendedb}', "");
Expect(0, 383, '\p{latinextendedb}', "");
Expect(1, 383, '\p{^latinextendedb}', "");
Expect(1, 383, '\P{latinextendedb}', "");
Expect(0, 383, '\P{^latinextendedb}', "");
Expect(1, 591, '\p{--LATIN_EXTENDED	B}', "");
Expect(0, 591, '\p{^--LATIN_EXTENDED	B}', "");
Expect(0, 591, '\P{--LATIN_EXTENDED	B}', "");
Expect(1, 591, '\P{^--LATIN_EXTENDED	B}', "");
Expect(0, 383, '\p{--LATIN_EXTENDED	B}', "");
Expect(1, 383, '\p{^--LATIN_EXTENDED	B}', "");
Expect(1, 383, '\P{--LATIN_EXTENDED	B}', "");
Expect(0, 383, '\P{^--LATIN_EXTENDED	B}', "");
Error('\p{- islatinExtended/a/B}');
Error('\P{- islatinExtended/a/B}');
Expect(1, 591, '\p{islatinextendedb}', "");
Expect(0, 591, '\p{^islatinextendedb}', "");
Expect(0, 591, '\P{islatinextendedb}', "");
Expect(1, 591, '\P{^islatinextendedb}', "");
Expect(0, 383, '\p{islatinextendedb}', "");
Expect(1, 383, '\p{^islatinextendedb}', "");
Expect(1, 383, '\P{islatinextendedb}', "");
Expect(0, 383, '\P{^islatinextendedb}', "");
Expect(1, 591, '\p{-_Is Latin Extended	B}', "");
Expect(0, 591, '\p{^-_Is Latin Extended	B}', "");
Expect(0, 591, '\P{-_Is Latin Extended	B}', "");
Expect(1, 591, '\P{^-_Is Latin Extended	B}', "");
Expect(0, 383, '\p{-_Is Latin Extended	B}', "");
Expect(1, 383, '\p{^-_Is Latin Extended	B}', "");
Expect(1, 383, '\P{-_Is Latin Extended	B}', "");
Expect(0, 383, '\P{^-_Is Latin Extended	B}', "");
Error('\p{_In/a/LATIN_Extended_b}');
Error('\P{_In/a/LATIN_Extended_b}');
Expect(1, 591, '\p{inlatinextendedb}', "");
Expect(0, 591, '\p{^inlatinextendedb}', "");
Expect(0, 591, '\P{inlatinextendedb}', "");
Expect(1, 591, '\P{^inlatinextendedb}', "");
Expect(0, 383, '\p{inlatinextendedb}', "");
Expect(1, 383, '\p{^inlatinextendedb}', "");
Expect(1, 383, '\P{inlatinextendedb}', "");
Expect(0, 383, '\P{^inlatinextendedb}', "");
Expect(1, 591, '\p{--InlatinExtended_B}', "");
Expect(0, 591, '\p{^--InlatinExtended_B}', "");
Expect(0, 591, '\P{--InlatinExtended_B}', "");
Expect(1, 591, '\P{^--InlatinExtended_B}', "");
Expect(0, 383, '\p{--InlatinExtended_B}', "");
Expect(1, 383, '\p{^--InlatinExtended_B}', "");
Expect(1, 383, '\P{--InlatinExtended_B}', "");
Expect(0, 383, '\P{^--InlatinExtended_B}', "");
Error('\p{:=_cyrillic}');
Error('\P{:=_cyrillic}');
Expect(1, 1156, '\p{cyrillic}', "");
Expect(0, 1156, '\p{^cyrillic}', "");
Expect(0, 1156, '\P{cyrillic}', "");
Expect(1, 1156, '\P{^cyrillic}', "");
Expect(0, 1023, '\p{cyrillic}', "");
Expect(1, 1023, '\p{^cyrillic}', "");
Expect(1, 1023, '\P{cyrillic}', "");
Expect(0, 1023, '\P{^cyrillic}', "");
Expect(1, 1156, '\p{_	cyrillic}', "");
Expect(0, 1156, '\p{^_	cyrillic}', "");
Expect(0, 1156, '\P{_	cyrillic}', "");
Expect(1, 1156, '\P{^_	cyrillic}', "");
Expect(0, 1023, '\p{_	cyrillic}', "");
Expect(1, 1023, '\p{^_	cyrillic}', "");
Expect(1, 1023, '\P{_	cyrillic}', "");
Expect(0, 1023, '\P{^_	cyrillic}', "");
Error('\p{:=IS-Cyrillic}');
Error('\P{:=IS-Cyrillic}');
Expect(1, 1156, '\p{iscyrillic}', "");
Expect(0, 1156, '\p{^iscyrillic}', "");
Expect(0, 1156, '\P{iscyrillic}', "");
Expect(1, 1156, '\P{^iscyrillic}', "");
Expect(0, 1023, '\p{iscyrillic}', "");
Expect(1, 1023, '\p{^iscyrillic}', "");
Expect(1, 1023, '\P{iscyrillic}', "");
Expect(0, 1023, '\P{^iscyrillic}', "");
Expect(1, 1156, '\p{	Is_cyrillic}', "");
Expect(0, 1156, '\p{^	Is_cyrillic}', "");
Expect(0, 1156, '\P{	Is_cyrillic}', "");
Expect(1, 1156, '\P{^	Is_cyrillic}', "");
Expect(0, 1023, '\p{	Is_cyrillic}', "");
Expect(1, 1023, '\p{^	Is_cyrillic}', "");
Expect(1, 1023, '\P{	Is_cyrillic}', "");
Expect(0, 1023, '\P{^	Is_cyrillic}', "");
Error('\p{:=_cyrl}');
Error('\P{:=_cyrl}');
Expect(1, 1156, '\p{cyrl}', "");
Expect(0, 1156, '\p{^cyrl}', "");
Expect(0, 1156, '\P{cyrl}', "");
Expect(1, 1156, '\P{^cyrl}', "");
Expect(0, 1023, '\p{cyrl}', "");
Expect(1, 1023, '\p{^cyrl}', "");
Expect(1, 1023, '\P{cyrl}', "");
Expect(0, 1023, '\P{^cyrl}', "");
Expect(1, 1156, '\p{		cyrl}', "");
Expect(0, 1156, '\p{^		cyrl}', "");
Expect(0, 1156, '\P{		cyrl}', "");
Expect(1, 1156, '\P{^		cyrl}', "");
Expect(0, 1023, '\p{		cyrl}', "");
Expect(1, 1023, '\p{^		cyrl}', "");
Expect(1, 1023, '\P{		cyrl}', "");
Expect(0, 1023, '\P{^		cyrl}', "");
Error('\p{ 	Is-Cyrl:=}');
Error('\P{ 	Is-Cyrl:=}');
Expect(1, 1156, '\p{iscyrl}', "");
Expect(0, 1156, '\p{^iscyrl}', "");
Expect(0, 1156, '\P{iscyrl}', "");
Expect(1, 1156, '\P{^iscyrl}', "");
Expect(0, 1023, '\p{iscyrl}', "");
Expect(1, 1023, '\p{^iscyrl}', "");
Expect(1, 1023, '\P{iscyrl}', "");
Expect(0, 1023, '\P{^iscyrl}', "");
Expect(1, 1156, '\p{ 	is_Cyrl}', "");
Expect(0, 1156, '\p{^ 	is_Cyrl}', "");
Expect(0, 1156, '\P{ 	is_Cyrl}', "");
Expect(1, 1156, '\P{^ 	is_Cyrl}', "");
Expect(0, 1023, '\p{ 	is_Cyrl}', "");
Expect(1, 1023, '\p{^ 	is_Cyrl}', "");
Expect(1, 1023, '\P{ 	is_Cyrl}', "");
Expect(0, 1023, '\P{^ 	is_Cyrl}', "");
Error('\p{-LATIN	Extended:=c}');
Error('\P{-LATIN	Extended:=c}');
Expect(1, 11391, '\p{latinextendedc}', "");
Expect(0, 11391, '\p{^latinextendedc}', "");
Expect(0, 11391, '\P{latinextendedc}', "");
Expect(1, 11391, '\P{^latinextendedc}', "");
Expect(0, 11359, '\p{latinextendedc}', "");
Expect(1, 11359, '\p{^latinextendedc}', "");
Expect(1, 11359, '\P{latinextendedc}', "");
Expect(0, 11359, '\P{^latinextendedc}', "");
Expect(1, 11391, '\p{__LATIN-extended-C}', "");
Expect(0, 11391, '\p{^__LATIN-extended-C}', "");
Expect(0, 11391, '\P{__LATIN-extended-C}', "");
Expect(1, 11391, '\P{^__LATIN-extended-C}', "");
Expect(0, 11359, '\p{__LATIN-extended-C}', "");
Expect(1, 11359, '\p{^__LATIN-extended-C}', "");
Expect(1, 11359, '\P{__LATIN-extended-C}', "");
Expect(0, 11359, '\P{^__LATIN-extended-C}', "");
Error('\p{_:=Is	Latin	Extended C}');
Error('\P{_:=Is	Latin	Extended C}');
Expect(1, 11391, '\p{islatinextendedc}', "");
Expect(0, 11391, '\p{^islatinextendedc}', "");
Expect(0, 11391, '\P{islatinextendedc}', "");
Expect(1, 11391, '\P{^islatinextendedc}', "");
Expect(0, 11359, '\p{islatinextendedc}', "");
Expect(1, 11359, '\p{^islatinextendedc}', "");
Expect(1, 11359, '\P{islatinextendedc}', "");
Expect(0, 11359, '\P{^islatinextendedc}', "");
Expect(1, 11391, '\p{	Is	Latin extended_C}', "");
Expect(0, 11391, '\p{^	Is	Latin extended_C}', "");
Expect(0, 11391, '\P{	Is	Latin extended_C}', "");
Expect(1, 11391, '\P{^	Is	Latin extended_C}', "");
Expect(0, 11359, '\p{	Is	Latin extended_C}', "");
Expect(1, 11359, '\p{^	Is	Latin extended_C}', "");
Expect(1, 11359, '\P{	Is	Latin extended_C}', "");
Expect(0, 11359, '\P{^	Is	Latin extended_C}', "");
Error('\p{ IN	latin	Extended:=C}');
Error('\P{ IN	latin	Extended:=C}');
Expect(1, 11391, '\p{inlatinextendedc}', "");
Expect(0, 11391, '\p{^inlatinextendedc}', "");
Expect(0, 11391, '\P{inlatinextendedc}', "");
Expect(1, 11391, '\P{^inlatinextendedc}', "");
Expect(0, 11359, '\p{inlatinextendedc}', "");
Expect(1, 11359, '\p{^inlatinextendedc}', "");
Expect(1, 11359, '\P{inlatinextendedc}', "");
Expect(0, 11359, '\P{^inlatinextendedc}', "");
Expect(1, 11391, '\p{- In Latin_EXTENDEDc}', "");
Expect(0, 11391, '\p{^- In Latin_EXTENDEDc}', "");
Expect(0, 11391, '\P{- In Latin_EXTENDEDc}', "");
Expect(1, 11391, '\P{^- In Latin_EXTENDEDc}', "");
Expect(0, 11359, '\p{- In Latin_EXTENDEDc}', "");
Expect(1, 11359, '\p{^- In Latin_EXTENDEDc}', "");
Expect(1, 11359, '\P{- In Latin_EXTENDEDc}', "");
Expect(0, 11359, '\P{^- In Latin_EXTENDEDc}', "");
Error('\p{-/a/InRejang}');
Error('\P{-/a/InRejang}');
Expect(1, 43359, '\p{inrejang}', "");
Expect(0, 43359, '\p{^inrejang}', "");
Expect(0, 43359, '\P{inrejang}', "");
Expect(1, 43359, '\P{^inrejang}', "");
Expect(0, 43311, '\p{inrejang}', "");
Expect(1, 43311, '\p{^inrejang}', "");
Expect(1, 43311, '\P{inrejang}', "");
Expect(0, 43311, '\P{^inrejang}', "");
Expect(1, 43359, '\p{_	in Rejang}', "");
Expect(0, 43359, '\p{^_	in Rejang}', "");
Expect(0, 43359, '\P{_	in Rejang}', "");
Expect(1, 43359, '\P{^_	in Rejang}', "");
Expect(0, 43311, '\p{_	in Rejang}', "");
Expect(1, 43311, '\p{^_	in Rejang}', "");
Expect(1, 43311, '\P{_	in Rejang}', "");
Expect(0, 43311, '\P{^_	in Rejang}', "");
Error('\p{	-COMBINING-DIACRITICAL	MARKS:=Supplement}');
Error('\P{	-COMBINING-DIACRITICAL	MARKS:=Supplement}');
Expect(1, 7679, '\p{combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^combiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^combiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{combiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^combiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{ COMBINING	diacritical marksSupplement}', "");
Expect(0, 7679, '\p{^ COMBINING	diacritical marksSupplement}', "");
Expect(0, 7679, '\P{ COMBINING	diacritical marksSupplement}', "");
Expect(1, 7679, '\P{^ COMBINING	diacritical marksSupplement}', "");
Expect(0, 7615, '\p{ COMBINING	diacritical marksSupplement}', "");
Expect(1, 7615, '\p{^ COMBINING	diacritical marksSupplement}', "");
Expect(1, 7615, '\P{ COMBINING	diacritical marksSupplement}', "");
Expect(0, 7615, '\P{^ COMBINING	diacritical marksSupplement}', "");
Error('\p{is-combining-DIACRITICAL:=marks SUPPLEMENT}');
Error('\P{is-combining-DIACRITICAL:=marks SUPPLEMENT}');
Expect(1, 7679, '\p{iscombiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^iscombiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{iscombiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^iscombiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{iscombiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^iscombiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{iscombiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^iscombiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{_Is Combining_Diacritical-Marks_Supplement}', "");
Expect(0, 7679, '\p{^_Is Combining_Diacritical-Marks_Supplement}', "");
Expect(0, 7679, '\P{_Is Combining_Diacritical-Marks_Supplement}', "");
Expect(1, 7679, '\P{^_Is Combining_Diacritical-Marks_Supplement}', "");
Expect(0, 7615, '\p{_Is Combining_Diacritical-Marks_Supplement}', "");
Expect(1, 7615, '\p{^_Is Combining_Diacritical-Marks_Supplement}', "");
Expect(1, 7615, '\P{_Is Combining_Diacritical-Marks_Supplement}', "");
Expect(0, 7615, '\P{^_Is Combining_Diacritical-Marks_Supplement}', "");
Error('\p{ In:=combiningDiacritical-MarksSupplement}');
Error('\P{ In:=combiningDiacritical-MarksSupplement}');
Expect(1, 7679, '\p{incombiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\p{^incombiningdiacriticalmarkssupplement}', "");
Expect(0, 7679, '\P{incombiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\P{^incombiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\p{incombiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\p{^incombiningdiacriticalmarkssupplement}', "");
Expect(1, 7615, '\P{incombiningdiacriticalmarkssupplement}', "");
Expect(0, 7615, '\P{^incombiningdiacriticalmarkssupplement}', "");
Expect(1, 7679, '\p{_ InCombining_diacritical MARKS-Supplement}', "");
Expect(0, 7679, '\p{^_ InCombining_diacritical MARKS-Supplement}', "");
Expect(0, 7679, '\P{_ InCombining_diacritical MARKS-Supplement}', "");
Expect(1, 7679, '\P{^_ InCombining_diacritical MARKS-Supplement}', "");
Expect(0, 7615, '\p{_ InCombining_diacritical MARKS-Supplement}', "");
Expect(1, 7615, '\p{^_ InCombining_diacritical MARKS-Supplement}', "");
Expect(1, 7615, '\P{_ InCombining_diacritical MARKS-Supplement}', "");
Expect(0, 7615, '\P{^_ InCombining_diacritical MARKS-Supplement}', "");
Error('\p{_-sterm/a/}');
Error('\P{_-sterm/a/}');
Expect(1, 33, '\p{sterm}', "");
Expect(0, 33, '\p{^sterm}', "");
Expect(0, 33, '\P{sterm}', "");
Expect(1, 33, '\P{^sterm}', "");
Expect(0, 32, '\p{sterm}', "");
Expect(1, 32, '\p{^sterm}', "");
Expect(1, 32, '\P{sterm}', "");
Expect(0, 32, '\P{^sterm}', "");
Expect(1, 33, '\p{	-STERM}', "");
Expect(0, 33, '\p{^	-STERM}', "");
Expect(0, 33, '\P{	-STERM}', "");
Expect(1, 33, '\P{^	-STERM}', "");
Expect(0, 32, '\p{	-STERM}', "");
Expect(1, 32, '\p{^	-STERM}', "");
Expect(1, 32, '\P{	-STERM}', "");
Expect(0, 32, '\P{^	-STERM}', "");
Error('\p{ /a/is	STerm}');
Error('\P{ /a/is	STerm}');
Expect(1, 33, '\p{issterm}', "");
Expect(0, 33, '\p{^issterm}', "");
Expect(0, 33, '\P{issterm}', "");
Expect(1, 33, '\P{^issterm}', "");
Expect(0, 32, '\p{issterm}', "");
Expect(1, 32, '\p{^issterm}', "");
Expect(1, 32, '\P{issterm}', "");
Expect(0, 32, '\P{^issterm}', "");
Expect(1, 33, '\p{	 isSTERM}', "");
Expect(0, 33, '\p{^	 isSTERM}', "");
Expect(0, 33, '\P{	 isSTERM}', "");
Expect(1, 33, '\P{^	 isSTERM}', "");
Expect(0, 32, '\p{	 isSTERM}', "");
Expect(1, 32, '\p{^	 isSTERM}', "");
Expect(1, 32, '\P{	 isSTERM}', "");
Expect(0, 32, '\P{^	 isSTERM}', "");
Error('\p{ :=in Kannada}');
Error('\P{ :=in Kannada}');
Expect(1, 3327, '\p{inkannada}', "");
Expect(0, 3327, '\p{^inkannada}', "");
Expect(0, 3327, '\P{inkannada}', "");
Expect(1, 3327, '\P{^inkannada}', "");
Expect(0, 3199, '\p{inkannada}', "");
Expect(1, 3199, '\p{^inkannada}', "");
Expect(1, 3199, '\P{inkannada}', "");
Expect(0, 3199, '\P{^inkannada}', "");
Expect(1, 3327, '\p{ In-Kannada}', "");
Expect(0, 3327, '\p{^ In-Kannada}', "");
Expect(0, 3327, '\P{ In-Kannada}', "");
Expect(1, 3327, '\P{^ In-Kannada}', "");
Expect(0, 3199, '\p{ In-Kannada}', "");
Expect(1, 3199, '\p{^ In-Kannada}', "");
Expect(1, 3199, '\P{ In-Kannada}', "");
Expect(0, 3199, '\P{^ In-Kannada}', "");
Error('\p{_:=Word}');
Error('\P{_:=Word}');
Expect(1, 57, '\p{word}', "");
Expect(0, 57, '\p{^word}', "");
Expect(0, 57, '\P{word}', "");
Expect(1, 57, '\P{^word}', "");
Expect(0, 47, '\p{word}', "");
Expect(1, 47, '\p{^word}', "");
Expect(1, 47, '\P{word}', "");
Expect(0, 47, '\P{^word}', "");
Expect(1, 57, '\p{		word}', "");
Expect(0, 57, '\p{^		word}', "");
Expect(0, 57, '\P{		word}', "");
Expect(1, 57, '\P{^		word}', "");
Expect(0, 47, '\p{		word}', "");
Expect(1, 47, '\p{^		word}', "");
Expect(1, 47, '\P{		word}', "");
Expect(0, 47, '\P{^		word}', "");
Error('\p{/a/isword}');
Error('\P{/a/isword}');
Expect(1, 57, '\p{isword}', "");
Expect(0, 57, '\p{^isword}', "");
Expect(0, 57, '\P{isword}', "");
Expect(1, 57, '\P{^isword}', "");
Expect(0, 47, '\p{isword}', "");
Expect(1, 47, '\p{^isword}', "");
Expect(1, 47, '\P{isword}', "");
Expect(0, 47, '\P{^isword}', "");
Expect(1, 57, '\p{-	is_Word}', "");
Expect(0, 57, '\p{^-	is_Word}', "");
Expect(0, 57, '\P{-	is_Word}', "");
Expect(1, 57, '\P{^-	is_Word}', "");
Expect(0, 47, '\p{-	is_Word}', "");
Expect(1, 47, '\p{^-	is_Word}', "");
Expect(1, 47, '\P{-	is_Word}', "");
Expect(0, 47, '\P{^-	is_Word}', "");
Error('\p{:=		SOFT	dotted}');
Error('\P{:=		SOFT	dotted}');
Expect(1, 106, '\p{softdotted}', "");
Expect(0, 106, '\p{^softdotted}', "");
Expect(0, 106, '\P{softdotted}', "");
Expect(1, 106, '\P{^softdotted}', "");
Expect(0, 104, '\p{softdotted}', "");
Expect(1, 104, '\p{^softdotted}', "");
Expect(1, 104, '\P{softdotted}', "");
Expect(0, 104, '\P{^softdotted}', "");
Expect(1, 106, '\p{ _soft_dotted}', "");
Expect(0, 106, '\p{^ _soft_dotted}', "");
Expect(0, 106, '\P{ _soft_dotted}', "");
Expect(1, 106, '\P{^ _soft_dotted}', "");
Expect(0, 104, '\p{ _soft_dotted}', "");
Expect(1, 104, '\p{^ _soft_dotted}', "");
Expect(1, 104, '\P{ _soft_dotted}', "");
Expect(0, 104, '\P{^ _soft_dotted}', "");
Error('\p{_	is	SOFT/a/dotted}');
Error('\P{_	is	SOFT/a/dotted}');
Expect(1, 106, '\p{issoftdotted}', "");
Expect(0, 106, '\p{^issoftdotted}', "");
Expect(0, 106, '\P{issoftdotted}', "");
Expect(1, 106, '\P{^issoftdotted}', "");
Expect(0, 104, '\p{issoftdotted}', "");
Expect(1, 104, '\p{^issoftdotted}', "");
Expect(1, 104, '\P{issoftdotted}', "");
Expect(0, 104, '\P{^issoftdotted}', "");
Expect(1, 106, '\p{	is-Soft-DOTTED}', "");
Expect(0, 106, '\p{^	is-Soft-DOTTED}', "");
Expect(0, 106, '\P{	is-Soft-DOTTED}', "");
Expect(1, 106, '\P{^	is-Soft-DOTTED}', "");
Expect(0, 104, '\p{	is-Soft-DOTTED}', "");
Expect(1, 104, '\p{^	is-Soft-DOTTED}', "");
Expect(1, 104, '\P{	is-Soft-DOTTED}', "");
Expect(0, 104, '\P{^	is-Soft-DOTTED}', "");
Error('\p{_ SD/a/}');
Error('\P{_ SD/a/}');
Expect(1, 106, '\p{sd}', "");
Expect(0, 106, '\p{^sd}', "");
Expect(0, 106, '\P{sd}', "");
Expect(1, 106, '\P{^sd}', "");
Expect(0, 104, '\p{sd}', "");
Expect(1, 104, '\p{^sd}', "");
Expect(1, 104, '\P{sd}', "");
Expect(0, 104, '\P{^sd}', "");
Expect(1, 106, '\p{_SD}', "");
Expect(0, 106, '\p{^_SD}', "");
Expect(0, 106, '\P{_SD}', "");
Expect(1, 106, '\P{^_SD}', "");
Expect(0, 104, '\p{_SD}', "");
Expect(1, 104, '\p{^_SD}', "");
Expect(1, 104, '\P{_SD}', "");
Expect(0, 104, '\P{^_SD}', "");
Error('\p{_ is:=SD}');
Error('\P{_ is:=SD}');
Expect(1, 106, '\p{issd}', "");
Expect(0, 106, '\p{^issd}', "");
Expect(0, 106, '\P{issd}', "");
Expect(1, 106, '\P{^issd}', "");
Expect(0, 104, '\p{issd}', "");
Expect(1, 104, '\p{^issd}', "");
Expect(1, 104, '\P{issd}', "");
Expect(0, 104, '\P{^issd}', "");
Expect(1, 106, '\p{	-Is SD}', "");
Expect(0, 106, '\p{^	-Is SD}', "");
Expect(0, 106, '\P{	-Is SD}', "");
Expect(1, 106, '\P{^	-Is SD}', "");
Expect(0, 104, '\p{	-Is SD}', "");
Expect(1, 104, '\p{^	-Is SD}', "");
Expect(1, 104, '\P{	-Is SD}', "");
Expect(0, 104, '\P{^	-Is SD}', "");
Error('\p{:=__	CanonDCIJ}');
Error('\P{:=__	CanonDCIJ}');
Expect(1, 106, '\p{_CanonDCIJ}', "");
Expect(0, 106, '\p{^_CanonDCIJ}', "");
Expect(0, 106, '\P{_CanonDCIJ}', "");
Expect(1, 106, '\P{^_CanonDCIJ}', "");
Expect(0, 104, '\p{_CanonDCIJ}', "");
Expect(1, 104, '\p{^_CanonDCIJ}', "");
Expect(1, 104, '\P{_CanonDCIJ}', "");
Expect(0, 104, '\P{^_CanonDCIJ}', "");
Error('\p{	/a/Avestan}');
Error('\P{	/a/Avestan}');
Expect(1, 68405, '\p{avestan}', "");
Expect(0, 68405, '\p{^avestan}', "");
Expect(0, 68405, '\P{avestan}', "");
Expect(1, 68405, '\P{^avestan}', "");
Expect(0, 68351, '\p{avestan}', "");
Expect(1, 68351, '\p{^avestan}', "");
Expect(1, 68351, '\P{avestan}', "");
Expect(0, 68351, '\P{^avestan}', "");
Expect(1, 68405, '\p{	avestan}', "");
Expect(0, 68405, '\p{^	avestan}', "");
Expect(0, 68405, '\P{	avestan}', "");
Expect(1, 68405, '\P{^	avestan}', "");
Expect(0, 68351, '\p{	avestan}', "");
Expect(1, 68351, '\p{^	avestan}', "");
Expect(1, 68351, '\P{	avestan}', "");
Expect(0, 68351, '\P{^	avestan}', "");
Error('\p{:=	 IS-avestan}');
Error('\P{:=	 IS-avestan}');
Expect(1, 68405, '\p{isavestan}', "");
Expect(0, 68405, '\p{^isavestan}', "");
Expect(0, 68405, '\P{isavestan}', "");
Expect(1, 68405, '\P{^isavestan}', "");
Expect(0, 68351, '\p{isavestan}', "");
Expect(1, 68351, '\p{^isavestan}', "");
Expect(1, 68351, '\P{isavestan}', "");
Expect(0, 68351, '\P{^isavestan}', "");
Expect(1, 68405, '\p{ _is_AVESTAN}', "");
Expect(0, 68405, '\p{^ _is_AVESTAN}', "");
Expect(0, 68405, '\P{ _is_AVESTAN}', "");
Expect(1, 68405, '\P{^ _is_AVESTAN}', "");
Expect(0, 68351, '\p{ _is_AVESTAN}', "");
Expect(1, 68351, '\p{^ _is_AVESTAN}', "");
Expect(1, 68351, '\P{ _is_AVESTAN}', "");
Expect(0, 68351, '\P{^ _is_AVESTAN}', "");
Error('\p{_:=AVST}');
Error('\P{_:=AVST}');
Expect(1, 68405, '\p{avst}', "");
Expect(0, 68405, '\p{^avst}', "");
Expect(0, 68405, '\P{avst}', "");
Expect(1, 68405, '\P{^avst}', "");
Expect(0, 68351, '\p{avst}', "");
Expect(1, 68351, '\p{^avst}', "");
Expect(1, 68351, '\P{avst}', "");
Expect(0, 68351, '\P{^avst}', "");
Expect(1, 68405, '\p{		Avst}', "");
Expect(0, 68405, '\p{^		Avst}', "");
Expect(0, 68405, '\P{		Avst}', "");
Expect(1, 68405, '\P{^		Avst}', "");
Expect(0, 68351, '\p{		Avst}', "");
Expect(1, 68351, '\p{^		Avst}', "");
Expect(1, 68351, '\P{		Avst}', "");
Expect(0, 68351, '\P{^		Avst}', "");
Error('\p{ _IS:=Avst}');
Error('\P{ _IS:=Avst}');
Expect(1, 68405, '\p{isavst}', "");
Expect(0, 68405, '\p{^isavst}', "");
Expect(0, 68405, '\P{isavst}', "");
Expect(1, 68405, '\P{^isavst}', "");
Expect(0, 68351, '\p{isavst}', "");
Expect(1, 68351, '\p{^isavst}', "");
Expect(1, 68351, '\P{isavst}', "");
Expect(0, 68351, '\P{^isavst}', "");
Expect(1, 68405, '\p{-IS-avst}', "");
Expect(0, 68405, '\p{^-IS-avst}', "");
Expect(0, 68405, '\P{-IS-avst}', "");
Expect(1, 68405, '\P{^-IS-avst}', "");
Expect(0, 68351, '\p{-IS-avst}', "");
Expect(1, 68351, '\p{^-IS-avst}', "");
Expect(1, 68351, '\P{-IS-avst}', "");
Expect(0, 68351, '\P{^-IS-avst}', "");
Error('\p{ /a/control PICTURES}');
Error('\P{ /a/control PICTURES}');
Expect(1, 9279, '\p{controlpictures}', "");
Expect(0, 9279, '\p{^controlpictures}', "");
Expect(0, 9279, '\P{controlpictures}', "");
Expect(1, 9279, '\P{^controlpictures}', "");
Expect(0, 9215, '\p{controlpictures}', "");
Expect(1, 9215, '\p{^controlpictures}', "");
Expect(1, 9215, '\P{controlpictures}', "");
Expect(0, 9215, '\P{^controlpictures}', "");
Expect(1, 9279, '\p{CONTROL	pictures}', "");
Expect(0, 9279, '\p{^CONTROL	pictures}', "");
Expect(0, 9279, '\P{CONTROL	pictures}', "");
Expect(1, 9279, '\P{^CONTROL	pictures}', "");
Expect(0, 9215, '\p{CONTROL	pictures}', "");
Expect(1, 9215, '\p{^CONTROL	pictures}', "");
Expect(1, 9215, '\P{CONTROL	pictures}', "");
Expect(0, 9215, '\P{^CONTROL	pictures}', "");
Error('\p{		IS_control_pictures/a/}');
Error('\P{		IS_control_pictures/a/}');
Expect(1, 9279, '\p{iscontrolpictures}', "");
Expect(0, 9279, '\p{^iscontrolpictures}', "");
Expect(0, 9279, '\P{iscontrolpictures}', "");
Expect(1, 9279, '\P{^iscontrolpictures}', "");
Expect(0, 9215, '\p{iscontrolpictures}', "");
Expect(1, 9215, '\p{^iscontrolpictures}', "");
Expect(1, 9215, '\P{iscontrolpictures}', "");
Expect(0, 9215, '\P{^iscontrolpictures}', "");
Expect(1, 9279, '\p{_Is control pictures}', "");
Expect(0, 9279, '\p{^_Is control pictures}', "");
Expect(0, 9279, '\P{_Is control pictures}', "");
Expect(1, 9279, '\P{^_Is control pictures}', "");
Expect(0, 9215, '\p{_Is control pictures}', "");
Expect(1, 9215, '\p{^_Is control pictures}', "");
Expect(1, 9215, '\P{_Is control pictures}', "");
Expect(0, 9215, '\P{^_Is control pictures}', "");
Error('\p{  InCONTROL-pictures/a/}');
Error('\P{  InCONTROL-pictures/a/}');
Expect(1, 9279, '\p{incontrolpictures}', "");
Expect(0, 9279, '\p{^incontrolpictures}', "");
Expect(0, 9279, '\P{incontrolpictures}', "");
Expect(1, 9279, '\P{^incontrolpictures}', "");
Expect(0, 9215, '\p{incontrolpictures}', "");
Expect(1, 9215, '\p{^incontrolpictures}', "");
Expect(1, 9215, '\P{incontrolpictures}', "");
Expect(0, 9215, '\P{^incontrolpictures}', "");
Expect(1, 9279, '\p{-In_Control-Pictures}', "");
Expect(0, 9279, '\p{^-In_Control-Pictures}', "");
Expect(0, 9279, '\P{-In_Control-Pictures}', "");
Expect(1, 9279, '\P{^-In_Control-Pictures}', "");
Expect(0, 9215, '\p{-In_Control-Pictures}', "");
Expect(1, 9215, '\p{^-In_Control-Pictures}', "");
Expect(1, 9215, '\P{-In_Control-Pictures}', "");
Expect(0, 9215, '\P{^-In_Control-Pictures}', "");
Error('\p{	Latin:=EXTENDED A}');
Error('\P{	Latin:=EXTENDED A}');
Expect(1, 383, '\p{latinextendeda}', "");
Expect(0, 383, '\p{^latinextendeda}', "");
Expect(0, 383, '\P{latinextendeda}', "");
Expect(1, 383, '\P{^latinextendeda}', "");
Expect(0, 255, '\p{latinextendeda}', "");
Expect(1, 255, '\p{^latinextendeda}', "");
Expect(1, 255, '\P{latinextendeda}', "");
Expect(0, 255, '\P{^latinextendeda}', "");
Expect(1, 383, '\p{--LATIN_Extended A}', "");
Expect(0, 383, '\p{^--LATIN_Extended A}', "");
Expect(0, 383, '\P{--LATIN_Extended A}', "");
Expect(1, 383, '\P{^--LATIN_Extended A}', "");
Expect(0, 255, '\p{--LATIN_Extended A}', "");
Expect(1, 255, '\p{^--LATIN_Extended A}', "");
Expect(1, 255, '\P{--LATIN_Extended A}', "");
Expect(0, 255, '\P{^--LATIN_Extended A}', "");
Error('\p{  Is	Latin_EXTENDED:=A}');
Error('\P{  Is	Latin_EXTENDED:=A}');
Expect(1, 383, '\p{islatinextendeda}', "");
Expect(0, 383, '\p{^islatinextendeda}', "");
Expect(0, 383, '\P{islatinextendeda}', "");
Expect(1, 383, '\P{^islatinextendeda}', "");
Expect(0, 255, '\p{islatinextendeda}', "");
Expect(1, 255, '\p{^islatinextendeda}', "");
Expect(1, 255, '\P{islatinextendeda}', "");
Expect(0, 255, '\P{^islatinextendeda}', "");
Expect(1, 383, '\p{	 IsLatin_Extended-a}', "");
Expect(0, 383, '\p{^	 IsLatin_Extended-a}', "");
Expect(0, 383, '\P{	 IsLatin_Extended-a}', "");
Expect(1, 383, '\P{^	 IsLatin_Extended-a}', "");
Expect(0, 255, '\p{	 IsLatin_Extended-a}', "");
Expect(1, 255, '\p{^	 IsLatin_Extended-a}', "");
Expect(1, 255, '\P{	 IsLatin_Extended-a}', "");
Expect(0, 255, '\P{^	 IsLatin_Extended-a}', "");
Error('\p{_	In-LATIN:=ExtendedA}');
Error('\P{_	In-LATIN:=ExtendedA}');
Expect(1, 383, '\p{inlatinextendeda}', "");
Expect(0, 383, '\p{^inlatinextendeda}', "");
Expect(0, 383, '\P{inlatinextendeda}', "");
Expect(1, 383, '\P{^inlatinextendeda}', "");
Expect(0, 255, '\p{inlatinextendeda}', "");
Expect(1, 255, '\p{^inlatinextendeda}', "");
Expect(1, 255, '\P{inlatinextendeda}', "");
Expect(0, 255, '\P{^inlatinextendeda}', "");
Expect(1, 383, '\p{	In_latinEXTENDED-A}', "");
Expect(0, 383, '\p{^	In_latinEXTENDED-A}', "");
Expect(0, 383, '\P{	In_latinEXTENDED-A}', "");
Expect(1, 383, '\P{^	In_latinEXTENDED-A}', "");
Expect(0, 255, '\p{	In_latinEXTENDED-A}', "");
Expect(1, 255, '\p{^	In_latinEXTENDED-A}', "");
Expect(1, 255, '\P{	In_latinEXTENDED-A}', "");
Expect(0, 255, '\P{^	In_latinEXTENDED-A}', "");
Error('\p{_ Gujarati:=}');
Error('\P{_ Gujarati:=}');
Expect(1, 2691, '\p{gujarati}', "");
Expect(0, 2691, '\p{^gujarati}', "");
Expect(0, 2691, '\P{gujarati}', "");
Expect(1, 2691, '\P{^gujarati}', "");
Expect(0, 2688, '\p{gujarati}', "");
Expect(1, 2688, '\p{^gujarati}', "");
Expect(1, 2688, '\P{gujarati}', "");
Expect(0, 2688, '\P{^gujarati}', "");
Expect(1, 2691, '\p{_	Gujarati}', "");
Expect(0, 2691, '\p{^_	Gujarati}', "");
Expect(0, 2691, '\P{_	Gujarati}', "");
Expect(1, 2691, '\P{^_	Gujarati}', "");
Expect(0, 2688, '\p{_	Gujarati}', "");
Expect(1, 2688, '\p{^_	Gujarati}', "");
Expect(1, 2688, '\P{_	Gujarati}', "");
Expect(0, 2688, '\P{^_	Gujarati}', "");
Error('\p{:=	-is_GUJARATI}');
Error('\P{:=	-is_GUJARATI}');
Expect(1, 2691, '\p{isgujarati}', "");
Expect(0, 2691, '\p{^isgujarati}', "");
Expect(0, 2691, '\P{isgujarati}', "");
Expect(1, 2691, '\P{^isgujarati}', "");
Expect(0, 2688, '\p{isgujarati}', "");
Expect(1, 2688, '\p{^isgujarati}', "");
Expect(1, 2688, '\P{isgujarati}', "");
Expect(0, 2688, '\P{^isgujarati}', "");
Expect(1, 2691, '\p{- Is	Gujarati}', "");
Expect(0, 2691, '\p{^- Is	Gujarati}', "");
Expect(0, 2691, '\P{- Is	Gujarati}', "");
Expect(1, 2691, '\P{^- Is	Gujarati}', "");
Expect(0, 2688, '\p{- Is	Gujarati}', "");
Expect(1, 2688, '\p{^- Is	Gujarati}', "");
Expect(1, 2688, '\P{- Is	Gujarati}', "");
Expect(0, 2688, '\P{^- Is	Gujarati}', "");
Error('\p{/a/	 gujr}');
Error('\P{/a/	 gujr}');
Expect(1, 2691, '\p{gujr}', "");
Expect(0, 2691, '\p{^gujr}', "");
Expect(0, 2691, '\P{gujr}', "");
Expect(1, 2691, '\P{^gujr}', "");
Expect(0, 2688, '\p{gujr}', "");
Expect(1, 2688, '\p{^gujr}', "");
Expect(1, 2688, '\P{gujr}', "");
Expect(0, 2688, '\P{^gujr}', "");
Expect(1, 2691, '\p{-_Gujr}', "");
Expect(0, 2691, '\p{^-_Gujr}', "");
Expect(0, 2691, '\P{-_Gujr}', "");
Expect(1, 2691, '\P{^-_Gujr}', "");
Expect(0, 2688, '\p{-_Gujr}', "");
Expect(1, 2688, '\p{^-_Gujr}', "");
Expect(1, 2688, '\P{-_Gujr}', "");
Expect(0, 2688, '\P{^-_Gujr}', "");
Error('\p{-is:=gujr}');
Error('\P{-is:=gujr}');
Expect(1, 2691, '\p{isgujr}', "");
Expect(0, 2691, '\p{^isgujr}', "");
Expect(0, 2691, '\P{isgujr}', "");
Expect(1, 2691, '\P{^isgujr}', "");
Expect(0, 2688, '\p{isgujr}', "");
Expect(1, 2688, '\p{^isgujr}', "");
Expect(1, 2688, '\P{isgujr}', "");
Expect(0, 2688, '\P{^isgujr}', "");
Expect(1, 2691, '\p{_ Is Gujr}', "");
Expect(0, 2691, '\p{^_ Is Gujr}', "");
Expect(0, 2691, '\P{_ Is Gujr}', "");
Expect(1, 2691, '\P{^_ Is Gujr}', "");
Expect(0, 2688, '\p{_ Is Gujr}', "");
Expect(1, 2688, '\p{^_ Is Gujr}', "");
Expect(1, 2688, '\P{_ Is Gujr}', "");
Expect(0, 2688, '\P{^_ Is Gujr}', "");
Error('\p{_/a/SpacePerl}');
Error('\P{_/a/SpacePerl}');
Expect(1, 10, '\p{spaceperl}', "");
Expect(0, 10, '\p{^spaceperl}', "");
Expect(0, 10, '\P{spaceperl}', "");
Expect(1, 10, '\P{^spaceperl}', "");
Expect(0, 8, '\p{spaceperl}', "");
Expect(1, 8, '\p{^spaceperl}', "");
Expect(1, 8, '\P{spaceperl}', "");
Expect(0, 8, '\P{^spaceperl}', "");
Expect(1, 10, '\p{	_spaceperl}', "");
Expect(0, 10, '\p{^	_spaceperl}', "");
Expect(0, 10, '\P{	_spaceperl}', "");
Expect(1, 10, '\P{^	_spaceperl}', "");
Expect(0, 8, '\p{	_spaceperl}', "");
Expect(1, 8, '\p{^	_spaceperl}', "");
Expect(1, 8, '\P{	_spaceperl}', "");
Expect(0, 8, '\P{^	_spaceperl}', "");
Error('\p{		Is-SpacePerl/a/}');
Error('\P{		Is-SpacePerl/a/}');
Expect(1, 10, '\p{isspaceperl}', "");
Expect(0, 10, '\p{^isspaceperl}', "");
Expect(0, 10, '\P{isspaceperl}', "");
Expect(1, 10, '\P{^isspaceperl}', "");
Expect(0, 8, '\p{isspaceperl}', "");
Expect(1, 8, '\p{^isspaceperl}', "");
Expect(1, 8, '\P{isspaceperl}', "");
Expect(0, 8, '\P{^isspaceperl}', "");
Expect(1, 10, '\p{  Is_SpacePerl}', "");
Expect(0, 10, '\p{^  Is_SpacePerl}', "");
Expect(0, 10, '\P{  Is_SpacePerl}', "");
Expect(1, 10, '\P{^  Is_SpacePerl}', "");
Expect(0, 8, '\p{  Is_SpacePerl}', "");
Expect(1, 8, '\p{^  Is_SpacePerl}', "");
Expect(1, 8, '\P{  Is_SpacePerl}', "");
Expect(0, 8, '\P{^  Is_SpacePerl}', "");
Error('\p{ :=in-ORIYA}');
Error('\P{ :=in-ORIYA}');
Expect(1, 2943, '\p{inoriya}', "");
Expect(0, 2943, '\p{^inoriya}', "");
Expect(0, 2943, '\P{inoriya}', "");
Expect(1, 2943, '\P{^inoriya}', "");
Expect(0, 2815, '\p{inoriya}', "");
Expect(1, 2815, '\p{^inoriya}', "");
Expect(1, 2815, '\P{inoriya}', "");
Expect(0, 2815, '\P{^inoriya}', "");
Expect(1, 2943, '\p{__IN-Oriya}', "");
Expect(0, 2943, '\p{^__IN-Oriya}', "");
Expect(0, 2943, '\P{__IN-Oriya}', "");
Expect(1, 2943, '\P{^__IN-Oriya}', "");
Expect(0, 2815, '\p{__IN-Oriya}', "");
Expect(1, 2815, '\p{^__IN-Oriya}', "");
Expect(1, 2815, '\P{__IN-Oriya}', "");
Expect(0, 2815, '\P{^__IN-Oriya}', "");
Error('\p{	/a/cjkUnified_IDEOGRAPHS}');
Error('\P{	/a/cjkUnified_IDEOGRAPHS}');
Expect(1, 40959, '\p{cjkunifiedideographs}', "");
Expect(0, 40959, '\p{^cjkunifiedideographs}', "");
Expect(0, 40959, '\P{cjkunifiedideographs}', "");
Expect(1, 40959, '\P{^cjkunifiedideographs}', "");
Expect(0, 19967, '\p{cjkunifiedideographs}', "");
Expect(1, 19967, '\p{^cjkunifiedideographs}', "");
Expect(1, 19967, '\P{cjkunifiedideographs}', "");
Expect(0, 19967, '\P{^cjkunifiedideographs}', "");
Expect(1, 40959, '\p{- CJKUnified Ideographs}', "");
Expect(0, 40959, '\p{^- CJKUnified Ideographs}', "");
Expect(0, 40959, '\P{- CJKUnified Ideographs}', "");
Expect(1, 40959, '\P{^- CJKUnified Ideographs}', "");
Expect(0, 19967, '\p{- CJKUnified Ideographs}', "");
Expect(1, 19967, '\p{^- CJKUnified Ideographs}', "");
Expect(1, 19967, '\P{- CJKUnified Ideographs}', "");
Expect(0, 19967, '\P{^- CJKUnified Ideographs}', "");
Error('\p{-is_CJK:=Unified IDEOGRAPHS}');
Error('\P{-is_CJK:=Unified IDEOGRAPHS}');
Expect(1, 40959, '\p{iscjkunifiedideographs}', "");
Expect(0, 40959, '\p{^iscjkunifiedideographs}', "");
Expect(0, 40959, '\P{iscjkunifiedideographs}', "");
Expect(1, 40959, '\P{^iscjkunifiedideographs}', "");
Expect(0, 19967, '\p{iscjkunifiedideographs}', "");
Expect(1, 19967, '\p{^iscjkunifiedideographs}', "");
Expect(1, 19967, '\P{iscjkunifiedideographs}', "");
Expect(0, 19967, '\P{^iscjkunifiedideographs}', "");
Expect(1, 40959, '\p{ -is cjkunifiedIDEOGRAPHS}', "");
Expect(0, 40959, '\p{^ -is cjkunifiedIDEOGRAPHS}', "");
Expect(0, 40959, '\P{ -is cjkunifiedIDEOGRAPHS}', "");
Expect(1, 40959, '\P{^ -is cjkunifiedIDEOGRAPHS}', "");
Expect(0, 19967, '\p{ -is cjkunifiedIDEOGRAPHS}', "");
Expect(1, 19967, '\p{^ -is cjkunifiedIDEOGRAPHS}', "");
Expect(1, 19967, '\P{ -is cjkunifiedIDEOGRAPHS}', "");
Expect(0, 19967, '\P{^ -is cjkunifiedIDEOGRAPHS}', "");
Error('\p{_INCJKUnified-Ideographs/a/}');
Error('\P{_INCJKUnified-Ideographs/a/}');
Expect(1, 40959, '\p{incjkunifiedideographs}', "");
Expect(0, 40959, '\p{^incjkunifiedideographs}', "");
Expect(0, 40959, '\P{incjkunifiedideographs}', "");
Expect(1, 40959, '\P{^incjkunifiedideographs}', "");
Expect(0, 19967, '\p{incjkunifiedideographs}', "");
Expect(1, 19967, '\p{^incjkunifiedideographs}', "");
Expect(1, 19967, '\P{incjkunifiedideographs}', "");
Expect(0, 19967, '\P{^incjkunifiedideographs}', "");
Expect(1, 40959, '\p{_-In CJK Unified_Ideographs}', "");
Expect(0, 40959, '\p{^_-In CJK Unified_Ideographs}', "");
Expect(0, 40959, '\P{_-In CJK Unified_Ideographs}', "");
Expect(1, 40959, '\P{^_-In CJK Unified_Ideographs}', "");
Expect(0, 19967, '\p{_-In CJK Unified_Ideographs}', "");
Expect(1, 19967, '\p{^_-In CJK Unified_Ideographs}', "");
Expect(1, 19967, '\P{_-In CJK Unified_Ideographs}', "");
Expect(0, 19967, '\P{^_-In CJK Unified_Ideographs}', "");
Error('\p{	 id:=CONTINUE}');
Error('\P{	 id:=CONTINUE}');
Expect(1, 57, '\p{idcontinue}', "");
Expect(0, 57, '\p{^idcontinue}', "");
Expect(0, 57, '\P{idcontinue}', "");
Expect(1, 57, '\P{^idcontinue}', "");
Expect(0, 47, '\p{idcontinue}', "");
Expect(1, 47, '\p{^idcontinue}', "");
Expect(1, 47, '\P{idcontinue}', "");
Expect(0, 47, '\P{^idcontinue}', "");
Expect(1, 57, '\p{	id_Continue}', "");
Expect(0, 57, '\p{^	id_Continue}', "");
Expect(0, 57, '\P{	id_Continue}', "");
Expect(1, 57, '\P{^	id_Continue}', "");
Expect(0, 47, '\p{	id_Continue}', "");
Expect(1, 47, '\p{^	id_Continue}', "");
Expect(1, 47, '\P{	id_Continue}', "");
Expect(0, 47, '\P{^	id_Continue}', "");
Error('\p{	IS ID-continue:=}');
Error('\P{	IS ID-continue:=}');
Expect(1, 57, '\p{isidcontinue}', "");
Expect(0, 57, '\p{^isidcontinue}', "");
Expect(0, 57, '\P{isidcontinue}', "");
Expect(1, 57, '\P{^isidcontinue}', "");
Expect(0, 47, '\p{isidcontinue}', "");
Expect(1, 47, '\p{^isidcontinue}', "");
Expect(1, 47, '\P{isidcontinue}', "");
Expect(0, 47, '\P{^isidcontinue}', "");
Expect(1, 57, '\p{ _is_ID_Continue}', "");
Expect(0, 57, '\p{^ _is_ID_Continue}', "");
Expect(0, 57, '\P{ _is_ID_Continue}', "");
Expect(1, 57, '\P{^ _is_ID_Continue}', "");
Expect(0, 47, '\p{ _is_ID_Continue}', "");
Expect(1, 47, '\p{^ _is_ID_Continue}', "");
Expect(1, 47, '\P{ _is_ID_Continue}', "");
Expect(0, 47, '\P{^ _is_ID_Continue}', "");
Error('\p{:=-IDC}');
Error('\P{:=-IDC}');
Expect(1, 57, '\p{idc}', "");
Expect(0, 57, '\p{^idc}', "");
Expect(0, 57, '\P{idc}', "");
Expect(1, 57, '\P{^idc}', "");
Expect(0, 47, '\p{idc}', "");
Expect(1, 47, '\p{^idc}', "");
Expect(1, 47, '\P{idc}', "");
Expect(0, 47, '\P{^idc}', "");
Expect(1, 57, '\p{ idc}', "");
Expect(0, 57, '\p{^ idc}', "");
Expect(0, 57, '\P{ idc}', "");
Expect(1, 57, '\P{^ idc}', "");
Expect(0, 47, '\p{ idc}', "");
Expect(1, 47, '\p{^ idc}', "");
Expect(1, 47, '\P{ idc}', "");
Expect(0, 47, '\P{^ idc}', "");
Error('\p{:=-	is-idc}');
Error('\P{:=-	is-idc}');
Expect(1, 57, '\p{isidc}', "");
Expect(0, 57, '\p{^isidc}', "");
Expect(0, 57, '\P{isidc}', "");
Expect(1, 57, '\P{^isidc}', "");
Expect(0, 47, '\p{isidc}', "");
Expect(1, 47, '\p{^isidc}', "");
Expect(1, 47, '\P{isidc}', "");
Expect(0, 47, '\P{^isidc}', "");
Expect(1, 57, '\p{		Is-idc}', "");
Expect(0, 57, '\p{^		Is-idc}', "");
Expect(0, 57, '\P{		Is-idc}', "");
Expect(1, 57, '\P{^		Is-idc}', "");
Expect(0, 47, '\p{		Is-idc}', "");
Expect(1, 47, '\p{^		Is-idc}', "");
Expect(1, 47, '\P{		Is-idc}', "");
Expect(0, 47, '\P{^		Is-idc}', "");
Error('\p{-:=In_GLAGOLITIC}');
Error('\P{-:=In_GLAGOLITIC}');
Expect(1, 11359, '\p{inglagolitic}', "");
Expect(0, 11359, '\p{^inglagolitic}', "");
Expect(0, 11359, '\P{inglagolitic}', "");
Expect(1, 11359, '\P{^inglagolitic}', "");
Expect(0, 11263, '\p{inglagolitic}', "");
Expect(1, 11263, '\p{^inglagolitic}', "");
Expect(1, 11263, '\P{inglagolitic}', "");
Expect(0, 11263, '\P{^inglagolitic}', "");
Expect(1, 11359, '\p{  in_Glagolitic}', "");
Expect(0, 11359, '\p{^  in_Glagolitic}', "");
Expect(0, 11359, '\P{  in_Glagolitic}', "");
Expect(1, 11359, '\P{^  in_Glagolitic}', "");
Expect(0, 11263, '\p{  in_Glagolitic}', "");
Expect(1, 11263, '\p{^  in_Glagolitic}', "");
Expect(1, 11263, '\P{  in_Glagolitic}', "");
Expect(0, 11263, '\P{^  in_Glagolitic}', "");
Error('\p{_-Open/a/Punctuation}');
Error('\P{_-Open/a/Punctuation}');
Expect(1, 40, '\p{openpunctuation}', "");
Expect(0, 40, '\p{^openpunctuation}', "");
Expect(0, 40, '\P{openpunctuation}', "");
Expect(1, 40, '\P{^openpunctuation}', "");
Expect(0, 39, '\p{openpunctuation}', "");
Expect(1, 39, '\p{^openpunctuation}', "");
Expect(1, 39, '\P{openpunctuation}', "");
Expect(0, 39, '\P{^openpunctuation}', "");
Expect(1, 40, '\p{-_open Punctuation}', "");
Expect(0, 40, '\p{^-_open Punctuation}', "");
Expect(0, 40, '\P{-_open Punctuation}', "");
Expect(1, 40, '\P{^-_open Punctuation}', "");
Expect(0, 39, '\p{-_open Punctuation}', "");
Expect(1, 39, '\p{^-_open Punctuation}', "");
Expect(1, 39, '\P{-_open Punctuation}', "");
Expect(0, 39, '\P{^-_open Punctuation}', "");
Error('\p{_:=Is OPENpunctuation}');
Error('\P{_:=Is OPENpunctuation}');
Expect(1, 40, '\p{isopenpunctuation}', "");
Expect(0, 40, '\p{^isopenpunctuation}', "");
Expect(0, 40, '\P{isopenpunctuation}', "");
Expect(1, 40, '\P{^isopenpunctuation}', "");
Expect(0, 39, '\p{isopenpunctuation}', "");
Expect(1, 39, '\p{^isopenpunctuation}', "");
Expect(1, 39, '\P{isopenpunctuation}', "");
Expect(0, 39, '\P{^isopenpunctuation}', "");
Expect(1, 40, '\p{ IS-Open punctuation}', "");
Expect(0, 40, '\p{^ IS-Open punctuation}', "");
Expect(0, 40, '\P{ IS-Open punctuation}', "");
Expect(1, 40, '\P{^ IS-Open punctuation}', "");
Expect(0, 39, '\p{ IS-Open punctuation}', "");
Expect(1, 39, '\p{^ IS-Open punctuation}', "");
Expect(1, 39, '\P{ IS-Open punctuation}', "");
Expect(0, 39, '\P{^ IS-Open punctuation}', "");
Error('\p{/a/Ps}');
Error('\P{/a/Ps}');
Expect(1, 40, '\p{ps}', "");
Expect(0, 40, '\p{^ps}', "");
Expect(0, 40, '\P{ps}', "");
Expect(1, 40, '\P{^ps}', "");
Expect(0, 39, '\p{ps}', "");
Expect(1, 39, '\p{^ps}', "");
Expect(1, 39, '\P{ps}', "");
Expect(0, 39, '\P{^ps}', "");
Expect(1, 40, '\p{_-ps}', "");
Expect(0, 40, '\p{^_-ps}', "");
Expect(0, 40, '\P{_-ps}', "");
Expect(1, 40, '\P{^_-ps}', "");
Expect(0, 39, '\p{_-ps}', "");
Expect(1, 39, '\p{^_-ps}', "");
Expect(1, 39, '\P{_-ps}', "");
Expect(0, 39, '\P{^_-ps}', "");
Error('\p{/a/ _Is	Ps}');
Error('\P{/a/ _Is	Ps}');
Expect(1, 40, '\p{isps}', "");
Expect(0, 40, '\p{^isps}', "");
Expect(0, 40, '\P{isps}', "");
Expect(1, 40, '\P{^isps}', "");
Expect(0, 39, '\p{isps}', "");
Expect(1, 39, '\p{^isps}', "");
Expect(1, 39, '\P{isps}', "");
Expect(0, 39, '\P{^isps}', "");
Expect(1, 40, '\p{	 Is	Ps}', "");
Expect(0, 40, '\p{^	 Is	Ps}', "");
Expect(0, 40, '\P{	 Is	Ps}', "");
Expect(1, 40, '\P{^	 Is	Ps}', "");
Expect(0, 39, '\p{	 Is	Ps}', "");
Expect(1, 39, '\p{^	 Is	Ps}', "");
Expect(1, 39, '\P{	 Is	Ps}', "");
Expect(0, 39, '\P{^	 Is	Ps}', "");
Error('\p{	/a/hangul}');
Error('\P{	/a/hangul}');
Expect(1, 4607, '\p{hangul}', "");
Expect(0, 4607, '\p{^hangul}', "");
Expect(0, 4607, '\P{hangul}', "");
Expect(1, 4607, '\P{^hangul}', "");
Expect(0, 4351, '\p{hangul}', "");
Expect(1, 4351, '\p{^hangul}', "");
Expect(1, 4351, '\P{hangul}', "");
Expect(0, 4351, '\P{^hangul}', "");
Expect(1, 4607, '\p{-_HANGUL}', "");
Expect(0, 4607, '\p{^-_HANGUL}', "");
Expect(0, 4607, '\P{-_HANGUL}', "");
Expect(1, 4607, '\P{^-_HANGUL}', "");
Expect(0, 4351, '\p{-_HANGUL}', "");
Expect(1, 4351, '\p{^-_HANGUL}', "");
Expect(1, 4351, '\P{-_HANGUL}', "");
Expect(0, 4351, '\P{^-_HANGUL}', "");
Error('\p{_:=Is_Hangul}');
Error('\P{_:=Is_Hangul}');
Expect(1, 4607, '\p{ishangul}', "");
Expect(0, 4607, '\p{^ishangul}', "");
Expect(0, 4607, '\P{ishangul}', "");
Expect(1, 4607, '\P{^ishangul}', "");
Expect(0, 4351, '\p{ishangul}', "");
Expect(1, 4351, '\p{^ishangul}', "");
Expect(1, 4351, '\P{ishangul}', "");
Expect(0, 4351, '\P{^ishangul}', "");
Expect(1, 4607, '\p{	Is-Hangul}', "");
Expect(0, 4607, '\p{^	Is-Hangul}', "");
Expect(0, 4607, '\P{	Is-Hangul}', "");
Expect(1, 4607, '\P{^	Is-Hangul}', "");
Expect(0, 4351, '\p{	Is-Hangul}', "");
Expect(1, 4351, '\p{^	Is-Hangul}', "");
Expect(1, 4351, '\P{	Is-Hangul}', "");
Expect(0, 4351, '\P{^	Is-Hangul}', "");
Error('\p{_hang/a/}');
Error('\P{_hang/a/}');
Expect(1, 4607, '\p{hang}', "");
Expect(0, 4607, '\p{^hang}', "");
Expect(0, 4607, '\P{hang}', "");
Expect(1, 4607, '\P{^hang}', "");
Expect(0, 4351, '\p{hang}', "");
Expect(1, 4351, '\p{^hang}', "");
Expect(1, 4351, '\P{hang}', "");
Expect(0, 4351, '\P{^hang}', "");
Error('\p{/a/ Is	HANG}');
Error('\P{/a/ Is	HANG}');
Expect(1, 4607, '\p{ishang}', "");
Expect(0, 4607, '\p{^ishang}', "");
Expect(0, 4607, '\P{ishang}', "");
Expect(1, 4607, '\P{^ishang}', "");
Expect(0, 4351, '\p{ishang}', "");
Expect(1, 4351, '\p{^ishang}', "");
Expect(1, 4351, '\P{ishang}', "");
Expect(0, 4351, '\P{^ishang}', "");
Expect(1, 4607, '\p{-isHang}', "");
Expect(0, 4607, '\p{^-isHang}', "");
Expect(0, 4607, '\P{-isHang}', "");
Expect(1, 4607, '\P{^-isHang}', "");
Expect(0, 4351, '\p{-isHang}', "");
Expect(1, 4351, '\p{^-isHang}', "");
Expect(1, 4351, '\P{-isHang}', "");
Expect(0, 4351, '\P{^-isHang}', "");
Error('\p{-:=Cypriot}');
Error('\P{-:=Cypriot}');
Expect(1, 67589, '\p{cypriot}', "");
Expect(0, 67589, '\p{^cypriot}', "");
Expect(0, 67589, '\P{cypriot}', "");
Expect(1, 67589, '\P{^cypriot}', "");
Expect(0, 67583, '\p{cypriot}', "");
Expect(1, 67583, '\p{^cypriot}', "");
Expect(1, 67583, '\P{cypriot}', "");
Expect(0, 67583, '\P{^cypriot}', "");
Expect(1, 67589, '\p{  CYPRIOT}', "");
Expect(0, 67589, '\p{^  CYPRIOT}', "");
Expect(0, 67589, '\P{  CYPRIOT}', "");
Expect(1, 67589, '\P{^  CYPRIOT}', "");
Expect(0, 67583, '\p{  CYPRIOT}', "");
Expect(1, 67583, '\p{^  CYPRIOT}', "");
Expect(1, 67583, '\P{  CYPRIOT}', "");
Expect(0, 67583, '\P{^  CYPRIOT}', "");
Error('\p{ Is-Cypriot/a/}');
Error('\P{ Is-Cypriot/a/}');
Expect(1, 67589, '\p{iscypriot}', "");
Expect(0, 67589, '\p{^iscypriot}', "");
Expect(0, 67589, '\P{iscypriot}', "");
Expect(1, 67589, '\P{^iscypriot}', "");
Expect(0, 67583, '\p{iscypriot}', "");
Expect(1, 67583, '\p{^iscypriot}', "");
Expect(1, 67583, '\P{iscypriot}', "");
Expect(0, 67583, '\P{^iscypriot}', "");
Expect(1, 67589, '\p{_ Is-Cypriot}', "");
Expect(0, 67589, '\p{^_ Is-Cypriot}', "");
Expect(0, 67589, '\P{_ Is-Cypriot}', "");
Expect(1, 67589, '\P{^_ Is-Cypriot}', "");
Expect(0, 67583, '\p{_ Is-Cypriot}', "");
Expect(1, 67583, '\p{^_ Is-Cypriot}', "");
Expect(1, 67583, '\P{_ Is-Cypriot}', "");
Expect(0, 67583, '\P{^_ Is-Cypriot}', "");
Error('\p{:= 	Cprt}');
Error('\P{:= 	Cprt}');
Expect(1, 67589, '\p{cprt}', "");
Expect(0, 67589, '\p{^cprt}', "");
Expect(0, 67589, '\P{cprt}', "");
Expect(1, 67589, '\P{^cprt}', "");
Expect(0, 67583, '\p{cprt}', "");
Expect(1, 67583, '\p{^cprt}', "");
Expect(1, 67583, '\P{cprt}', "");
Expect(0, 67583, '\P{^cprt}', "");
Expect(1, 67589, '\p{_Cprt}', "");
Expect(0, 67589, '\p{^_Cprt}', "");
Expect(0, 67589, '\P{_Cprt}', "");
Expect(1, 67589, '\P{^_Cprt}', "");
Expect(0, 67583, '\p{_Cprt}', "");
Expect(1, 67583, '\p{^_Cprt}', "");
Expect(1, 67583, '\P{_Cprt}', "");
Expect(0, 67583, '\P{^_Cprt}', "");
Error('\p{-/a/IS_Cprt}');
Error('\P{-/a/IS_Cprt}');
Expect(1, 67589, '\p{iscprt}', "");
Expect(0, 67589, '\p{^iscprt}', "");
Expect(0, 67589, '\P{iscprt}', "");
Expect(1, 67589, '\P{^iscprt}', "");
Expect(0, 67583, '\p{iscprt}', "");
Expect(1, 67583, '\p{^iscprt}', "");
Expect(1, 67583, '\P{iscprt}', "");
Expect(0, 67583, '\P{^iscprt}', "");
Expect(1, 67589, '\p{ Is_Cprt}', "");
Expect(0, 67589, '\p{^ Is_Cprt}', "");
Expect(0, 67589, '\P{ Is_Cprt}', "");
Expect(1, 67589, '\P{^ Is_Cprt}', "");
Expect(0, 67583, '\p{ Is_Cprt}', "");
Expect(1, 67583, '\p{^ Is_Cprt}', "");
Expect(1, 67583, '\P{ Is_Cprt}', "");
Expect(0, 67583, '\P{^ Is_Cprt}', "");
Error('\p{-:=Byzantine_Musical Symbols}');
Error('\P{-:=Byzantine_Musical Symbols}');
Expect(1, 119039, '\p{byzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^byzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{byzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^byzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{byzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^byzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{byzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^byzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{--BYZANTINE MusicalSymbols}', "");
Expect(0, 119039, '\p{^--BYZANTINE MusicalSymbols}', "");
Expect(0, 119039, '\P{--BYZANTINE MusicalSymbols}', "");
Expect(1, 119039, '\P{^--BYZANTINE MusicalSymbols}', "");
Expect(0, 118783, '\p{--BYZANTINE MusicalSymbols}', "");
Expect(1, 118783, '\p{^--BYZANTINE MusicalSymbols}', "");
Expect(1, 118783, '\P{--BYZANTINE MusicalSymbols}', "");
Expect(0, 118783, '\P{^--BYZANTINE MusicalSymbols}', "");
Error('\p{:=  is BYZANTINEmusicalSymbols}');
Error('\P{:=  is BYZANTINEmusicalSymbols}');
Expect(1, 119039, '\p{isbyzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^isbyzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{isbyzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^isbyzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{isbyzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^isbyzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{isbyzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^isbyzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{__Is	byzantine	Musical-Symbols}', "");
Expect(0, 119039, '\p{^__Is	byzantine	Musical-Symbols}', "");
Expect(0, 119039, '\P{__Is	byzantine	Musical-Symbols}', "");
Expect(1, 119039, '\P{^__Is	byzantine	Musical-Symbols}', "");
Expect(0, 118783, '\p{__Is	byzantine	Musical-Symbols}', "");
Expect(1, 118783, '\p{^__Is	byzantine	Musical-Symbols}', "");
Expect(1, 118783, '\P{__Is	byzantine	Musical-Symbols}', "");
Expect(0, 118783, '\P{^__Is	byzantine	Musical-Symbols}', "");
Error('\p{_:=In-byzantine musicalSymbols}');
Error('\P{_:=In-byzantine musicalSymbols}');
Expect(1, 119039, '\p{inbyzantinemusicalsymbols}', "");
Expect(0, 119039, '\p{^inbyzantinemusicalsymbols}', "");
Expect(0, 119039, '\P{inbyzantinemusicalsymbols}', "");
Expect(1, 119039, '\P{^inbyzantinemusicalsymbols}', "");
Expect(0, 118783, '\p{inbyzantinemusicalsymbols}', "");
Expect(1, 118783, '\p{^inbyzantinemusicalsymbols}', "");
Expect(1, 118783, '\P{inbyzantinemusicalsymbols}', "");
Expect(0, 118783, '\P{^inbyzantinemusicalsymbols}', "");
Expect(1, 119039, '\p{ -In	BYZANTINE_musical	Symbols}', "");
Expect(0, 119039, '\p{^ -In	BYZANTINE_musical	Symbols}', "");
Expect(0, 119039, '\P{ -In	BYZANTINE_musical	Symbols}', "");
Expect(1, 119039, '\P{^ -In	BYZANTINE_musical	Symbols}', "");
Expect(0, 118783, '\p{ -In	BYZANTINE_musical	Symbols}', "");
Expect(1, 118783, '\p{^ -In	BYZANTINE_musical	Symbols}', "");
Expect(1, 118783, '\P{ -In	BYZANTINE_musical	Symbols}', "");
Expect(0, 118783, '\P{^ -In	BYZANTINE_musical	Symbols}', "");
Error('\p{-PosixUpper:=}');
Error('\P{-PosixUpper:=}');
Expect(1, 90, '\p{posixupper}', "");
Expect(0, 90, '\p{^posixupper}', "");
Expect(0, 90, '\P{posixupper}', "");
Expect(1, 90, '\P{^posixupper}', "");
Expect(0, 64, '\p{posixupper}', "");
Expect(1, 64, '\p{^posixupper}', "");
Expect(1, 64, '\P{posixupper}', "");
Expect(0, 64, '\P{^posixupper}', "");
Expect(1, 90, '\p{_PosixUpper}', "");
Expect(0, 90, '\p{^_PosixUpper}', "");
Expect(0, 90, '\P{_PosixUpper}', "");
Expect(1, 90, '\P{^_PosixUpper}', "");
Expect(0, 64, '\p{_PosixUpper}', "");
Expect(1, 64, '\p{^_PosixUpper}', "");
Expect(1, 64, '\P{_PosixUpper}', "");
Expect(0, 64, '\P{^_PosixUpper}', "");
Error('\p{  Is:=POSIXUPPER}');
Error('\P{  Is:=POSIXUPPER}');
Expect(1, 90, '\p{isposixupper}', "");
Expect(0, 90, '\p{^isposixupper}', "");
Expect(0, 90, '\P{isposixupper}', "");
Expect(1, 90, '\P{^isposixupper}', "");
Expect(0, 64, '\p{isposixupper}', "");
Expect(1, 64, '\p{^isposixupper}', "");
Expect(1, 64, '\P{isposixupper}', "");
Expect(0, 64, '\P{^isposixupper}', "");
Expect(1, 90, '\p{ Is_PosixUpper}', "");
Expect(0, 90, '\p{^ Is_PosixUpper}', "");
Expect(0, 90, '\P{ Is_PosixUpper}', "");
Expect(1, 90, '\P{^ Is_PosixUpper}', "");
Expect(0, 64, '\p{ Is_PosixUpper}', "");
Expect(1, 64, '\p{^ Is_PosixUpper}', "");
Expect(1, 64, '\P{ Is_PosixUpper}', "");
Expect(0, 64, '\P{^ Is_PosixUpper}', "");
Error('\p{	:=In-ARMENIAN}');
Error('\P{	:=In-ARMENIAN}');
Expect(1, 1423, '\p{inarmenian}', "");
Expect(0, 1423, '\p{^inarmenian}', "");
Expect(0, 1423, '\P{inarmenian}', "");
Expect(1, 1423, '\P{^inarmenian}', "");
Expect(0, 1327, '\p{inarmenian}', "");
Expect(1, 1327, '\p{^inarmenian}', "");
Expect(1, 1327, '\P{inarmenian}', "");
Expect(0, 1327, '\P{^inarmenian}', "");
Expect(1, 1423, '\p{_-In-ARMENIAN}', "");
Expect(0, 1423, '\p{^_-In-ARMENIAN}', "");
Expect(0, 1423, '\P{_-In-ARMENIAN}', "");
Expect(1, 1423, '\P{^_-In-ARMENIAN}', "");
Expect(0, 1327, '\p{_-In-ARMENIAN}', "");
Expect(1, 1327, '\p{^_-In-ARMENIAN}', "");
Expect(1, 1327, '\P{_-In-ARMENIAN}', "");
Expect(0, 1327, '\P{^_-In-ARMENIAN}', "");
Error('\p{/a/posixalpha}');
Error('\P{/a/posixalpha}');
Expect(1, 90, '\p{posixalpha}', "");
Expect(0, 90, '\p{^posixalpha}', "");
Expect(0, 90, '\P{posixalpha}', "");
Expect(1, 90, '\P{^posixalpha}', "");
Expect(0, 64, '\p{posixalpha}', "");
Expect(1, 64, '\p{^posixalpha}', "");
Expect(1, 64, '\P{posixalpha}', "");
Expect(0, 64, '\P{^posixalpha}', "");
Expect(1, 90, '\p{		PosixAlpha}', "");
Expect(0, 90, '\p{^		PosixAlpha}', "");
Expect(0, 90, '\P{		PosixAlpha}', "");
Expect(1, 90, '\P{^		PosixAlpha}', "");
Expect(0, 64, '\p{		PosixAlpha}', "");
Expect(1, 64, '\p{^		PosixAlpha}', "");
Expect(1, 64, '\P{		PosixAlpha}', "");
Expect(0, 64, '\P{^		PosixAlpha}', "");
Error('\p{:= Is	PosixAlpha}');
Error('\P{:= Is	PosixAlpha}');
Expect(1, 90, '\p{isposixalpha}', "");
Expect(0, 90, '\p{^isposixalpha}', "");
Expect(0, 90, '\P{isposixalpha}', "");
Expect(1, 90, '\P{^isposixalpha}', "");
Expect(0, 64, '\p{isposixalpha}', "");
Expect(1, 64, '\p{^isposixalpha}', "");
Expect(1, 64, '\P{isposixalpha}', "");
Expect(0, 64, '\P{^isposixalpha}', "");
Expect(1, 90, '\p{  IS PosixAlpha}', "");
Expect(0, 90, '\p{^  IS PosixAlpha}', "");
Expect(0, 90, '\P{  IS PosixAlpha}', "");
Expect(1, 90, '\P{^  IS PosixAlpha}', "");
Expect(0, 64, '\p{  IS PosixAlpha}', "");
Expect(1, 64, '\p{^  IS PosixAlpha}', "");
Expect(1, 64, '\P{  IS PosixAlpha}', "");
Expect(0, 64, '\P{^  IS PosixAlpha}', "");
Error('\p{:=		Paragraph SEPARATOR}');
Error('\P{:=		Paragraph SEPARATOR}');
Expect(1, 8233, '\p{paragraphseparator}', "");
Expect(0, 8233, '\p{^paragraphseparator}', "");
Expect(0, 8233, '\P{paragraphseparator}', "");
Expect(1, 8233, '\P{^paragraphseparator}', "");
Expect(0, 8232, '\p{paragraphseparator}', "");
Expect(1, 8232, '\p{^paragraphseparator}', "");
Expect(1, 8232, '\P{paragraphseparator}', "");
Expect(0, 8232, '\P{^paragraphseparator}', "");
Expect(1, 8233, '\p{_ Paragraph separator}', "");
Expect(0, 8233, '\p{^_ Paragraph separator}', "");
Expect(0, 8233, '\P{_ Paragraph separator}', "");
Expect(1, 8233, '\P{^_ Paragraph separator}', "");
Expect(0, 8232, '\p{_ Paragraph separator}', "");
Expect(1, 8232, '\p{^_ Paragraph separator}', "");
Expect(1, 8232, '\P{_ Paragraph separator}', "");
Expect(0, 8232, '\P{^_ Paragraph separator}', "");
Error('\p{	Is	Paragraph:=Separator}');
Error('\P{	Is	Paragraph:=Separator}');
Expect(1, 8233, '\p{isparagraphseparator}', "");
Expect(0, 8233, '\p{^isparagraphseparator}', "");
Expect(0, 8233, '\P{isparagraphseparator}', "");
Expect(1, 8233, '\P{^isparagraphseparator}', "");
Expect(0, 8232, '\p{isparagraphseparator}', "");
Expect(1, 8232, '\p{^isparagraphseparator}', "");
Expect(1, 8232, '\P{isparagraphseparator}', "");
Expect(0, 8232, '\P{^isparagraphseparator}', "");
Expect(1, 8233, '\p{-Is_Paragraphseparator}', "");
Expect(0, 8233, '\p{^-Is_Paragraphseparator}', "");
Expect(0, 8233, '\P{-Is_Paragraphseparator}', "");
Expect(1, 8233, '\P{^-Is_Paragraphseparator}', "");
Expect(0, 8232, '\p{-Is_Paragraphseparator}', "");
Expect(1, 8232, '\p{^-Is_Paragraphseparator}', "");
Expect(1, 8232, '\P{-Is_Paragraphseparator}', "");
Expect(0, 8232, '\P{^-Is_Paragraphseparator}', "");
Error('\p{-:=ZP}');
Error('\P{-:=ZP}');
Expect(1, 8233, '\p{zp}', "");
Expect(0, 8233, '\p{^zp}', "");
Expect(0, 8233, '\P{zp}', "");
Expect(1, 8233, '\P{^zp}', "");
Expect(0, 8232, '\p{zp}', "");
Expect(1, 8232, '\p{^zp}', "");
Expect(1, 8232, '\P{zp}', "");
Expect(0, 8232, '\P{^zp}', "");
Expect(1, 8233, '\p{ 	zp}', "");
Expect(0, 8233, '\p{^ 	zp}', "");
Expect(0, 8233, '\P{ 	zp}', "");
Expect(1, 8233, '\P{^ 	zp}', "");
Expect(0, 8232, '\p{ 	zp}', "");
Expect(1, 8232, '\p{^ 	zp}', "");
Expect(1, 8232, '\P{ 	zp}', "");
Expect(0, 8232, '\P{^ 	zp}', "");
Error('\p{	:=is_Zp}');
Error('\P{	:=is_Zp}');
Expect(1, 8233, '\p{iszp}', "");
Expect(0, 8233, '\p{^iszp}', "");
Expect(0, 8233, '\P{iszp}', "");
Expect(1, 8233, '\P{^iszp}', "");
Expect(0, 8232, '\p{iszp}', "");
Expect(1, 8232, '\p{^iszp}', "");
Expect(1, 8232, '\P{iszp}', "");
Expect(0, 8232, '\P{^iszp}', "");
Expect(1, 8233, '\p{_-is	Zp}', "");
Expect(0, 8233, '\p{^_-is	Zp}', "");
Expect(0, 8233, '\P{_-is	Zp}', "");
Expect(1, 8233, '\P{^_-is	Zp}', "");
Expect(0, 8232, '\p{_-is	Zp}', "");
Expect(1, 8232, '\p{^_-is	Zp}', "");
Expect(1, 8232, '\P{_-is	Zp}', "");
Expect(0, 8232, '\P{^_-is	Zp}', "");
Error('\p{/a/	 phagsPA}');
Error('\P{/a/	 phagsPA}');
Expect(1, 43127, '\p{phagspa}', "");
Expect(0, 43127, '\p{^phagspa}', "");
Expect(0, 43127, '\P{phagspa}', "");
Expect(1, 43127, '\P{^phagspa}', "");
Expect(0, 43071, '\p{phagspa}', "");
Expect(1, 43071, '\p{^phagspa}', "");
Expect(1, 43071, '\P{phagspa}', "");
Expect(0, 43071, '\P{^phagspa}', "");
Expect(1, 43127, '\p{-PHAGS Pa}', "");
Expect(0, 43127, '\p{^-PHAGS Pa}', "");
Expect(0, 43127, '\P{-PHAGS Pa}', "");
Expect(1, 43127, '\P{^-PHAGS Pa}', "");
Expect(0, 43071, '\p{-PHAGS Pa}', "");
Expect(1, 43071, '\p{^-PHAGS Pa}', "");
Expect(1, 43071, '\P{-PHAGS Pa}', "");
Expect(0, 43071, '\P{^-PHAGS Pa}', "");
Error('\p{/a/ _Is	phagsPa}');
Error('\P{/a/ _Is	phagsPa}');
Expect(1, 43127, '\p{isphagspa}', "");
Expect(0, 43127, '\p{^isphagspa}', "");
Expect(0, 43127, '\P{isphagspa}', "");
Expect(1, 43127, '\P{^isphagspa}', "");
Expect(0, 43071, '\p{isphagspa}', "");
Expect(1, 43071, '\p{^isphagspa}', "");
Expect(1, 43071, '\P{isphagspa}', "");
Expect(0, 43071, '\P{^isphagspa}', "");
Expect(1, 43127, '\p{  IsPHAGS Pa}', "");
Expect(0, 43127, '\p{^  IsPHAGS Pa}', "");
Expect(0, 43127, '\P{  IsPHAGS Pa}', "");
Expect(1, 43127, '\P{^  IsPHAGS Pa}', "");
Expect(0, 43071, '\p{  IsPHAGS Pa}', "");
Expect(1, 43071, '\p{^  IsPHAGS Pa}', "");
Expect(1, 43071, '\P{  IsPHAGS Pa}', "");
Expect(0, 43071, '\P{^  IsPHAGS Pa}', "");
Error('\p{_ Phag/a/}');
Error('\P{_ Phag/a/}');
Expect(1, 43127, '\p{phag}', "");
Expect(0, 43127, '\p{^phag}', "");
Expect(0, 43127, '\P{phag}', "");
Expect(1, 43127, '\P{^phag}', "");
Expect(0, 43071, '\p{phag}', "");
Expect(1, 43071, '\p{^phag}', "");
Expect(1, 43071, '\P{phag}', "");
Expect(0, 43071, '\P{^phag}', "");
Expect(1, 43127, '\p{_	PHAG}', "");
Expect(0, 43127, '\p{^_	PHAG}', "");
Expect(0, 43127, '\P{_	PHAG}', "");
Expect(1, 43127, '\P{^_	PHAG}', "");
Expect(0, 43071, '\p{_	PHAG}', "");
Expect(1, 43071, '\p{^_	PHAG}', "");
Expect(1, 43071, '\P{_	PHAG}', "");
Expect(0, 43071, '\P{^_	PHAG}', "");
Error('\p{_/a/IsPHAG}');
Error('\P{_/a/IsPHAG}');
Expect(1, 43127, '\p{isphag}', "");
Expect(0, 43127, '\p{^isphag}', "");
Expect(0, 43127, '\P{isphag}', "");
Expect(1, 43127, '\P{^isphag}', "");
Expect(0, 43071, '\p{isphag}', "");
Expect(1, 43071, '\p{^isphag}', "");
Expect(1, 43071, '\P{isphag}', "");
Expect(0, 43071, '\P{^isphag}', "");
Expect(1, 43127, '\p{	 ISPhag}', "");
Expect(0, 43127, '\p{^	 ISPhag}', "");
Expect(0, 43127, '\P{	 ISPhag}', "");
Expect(1, 43127, '\P{^	 ISPhag}', "");
Expect(0, 43071, '\p{	 ISPhag}', "");
Expect(1, 43071, '\p{^	 ISPhag}', "");
Expect(1, 43071, '\P{	 ISPhag}', "");
Expect(0, 43071, '\P{^	 ISPhag}', "");
Error('\p{/a/_Letter_number}');
Error('\P{/a/_Letter_number}');
Expect(1, 5872, '\p{letternumber}', "");
Expect(0, 5872, '\p{^letternumber}', "");
Expect(0, 5872, '\P{letternumber}', "");
Expect(1, 5872, '\P{^letternumber}', "");
Expect(0, 5869, '\p{letternumber}', "");
Expect(1, 5869, '\p{^letternumber}', "");
Expect(1, 5869, '\P{letternumber}', "");
Expect(0, 5869, '\P{^letternumber}', "");
Expect(1, 5872, '\p{Letter-NUMBER}', "");
Expect(0, 5872, '\p{^Letter-NUMBER}', "");
Expect(0, 5872, '\P{Letter-NUMBER}', "");
Expect(1, 5872, '\P{^Letter-NUMBER}', "");
Expect(0, 5869, '\p{Letter-NUMBER}', "");
Expect(1, 5869, '\p{^Letter-NUMBER}', "");
Expect(1, 5869, '\P{Letter-NUMBER}', "");
Expect(0, 5869, '\P{^Letter-NUMBER}', "");
Error('\p{__Is:=Letter	Number}');
Error('\P{__Is:=Letter	Number}');
Expect(1, 5872, '\p{isletternumber}', "");
Expect(0, 5872, '\p{^isletternumber}', "");
Expect(0, 5872, '\P{isletternumber}', "");
Expect(1, 5872, '\P{^isletternumber}', "");
Expect(0, 5869, '\p{isletternumber}', "");
Expect(1, 5869, '\p{^isletternumber}', "");
Expect(1, 5869, '\P{isletternumber}', "");
Expect(0, 5869, '\P{^isletternumber}', "");
Expect(1, 5872, '\p{ is LETTER	Number}', "");
Expect(0, 5872, '\p{^ is LETTER	Number}', "");
Expect(0, 5872, '\P{ is LETTER	Number}', "");
Expect(1, 5872, '\P{^ is LETTER	Number}', "");
Expect(0, 5869, '\p{ is LETTER	Number}', "");
Expect(1, 5869, '\p{^ is LETTER	Number}', "");
Expect(1, 5869, '\P{ is LETTER	Number}', "");
Expect(0, 5869, '\P{^ is LETTER	Number}', "");
Error('\p{-Nl:=}');
Error('\P{-Nl:=}');
Expect(1, 5872, '\p{nl}', "");
Expect(0, 5872, '\p{^nl}', "");
Expect(0, 5872, '\P{nl}', "");
Expect(1, 5872, '\P{^nl}', "");
Expect(0, 5869, '\p{nl}', "");
Expect(1, 5869, '\p{^nl}', "");
Expect(1, 5869, '\P{nl}', "");
Expect(0, 5869, '\P{^nl}', "");
Expect(1, 5872, '\p{ -NL}', "");
Expect(0, 5872, '\p{^ -NL}', "");
Expect(0, 5872, '\P{ -NL}', "");
Expect(1, 5872, '\P{^ -NL}', "");
Expect(0, 5869, '\p{ -NL}', "");
Expect(1, 5869, '\p{^ -NL}', "");
Expect(1, 5869, '\P{ -NL}', "");
Expect(0, 5869, '\P{^ -NL}', "");
Error('\p{ is:=nl}');
Error('\P{ is:=nl}');
Expect(1, 5872, '\p{isnl}', "");
Expect(0, 5872, '\p{^isnl}', "");
Expect(0, 5872, '\P{isnl}', "");
Expect(1, 5872, '\P{^isnl}', "");
Expect(0, 5869, '\p{isnl}', "");
Expect(1, 5869, '\p{^isnl}', "");
Expect(1, 5869, '\P{isnl}', "");
Expect(0, 5869, '\P{^isnl}', "");
Expect(1, 5872, '\p{--isNl}', "");
Expect(0, 5872, '\p{^--isNl}', "");
Expect(0, 5872, '\P{--isNl}', "");
Expect(1, 5872, '\P{^--isNl}', "");
Expect(0, 5869, '\p{--isNl}', "");
Expect(1, 5869, '\p{^--isNl}', "");
Expect(1, 5869, '\P{--isNl}', "");
Expect(0, 5869, '\P{^--isNl}', "");
Error('\p{-NUMBER_Forms/a/}');
Error('\P{-NUMBER_Forms/a/}');
Expect(1, 8591, '\p{numberforms}', "");
Expect(0, 8591, '\p{^numberforms}', "");
Expect(0, 8591, '\P{numberforms}', "");
Expect(1, 8591, '\P{^numberforms}', "");
Expect(0, 8527, '\p{numberforms}', "");
Expect(1, 8527, '\p{^numberforms}', "");
Expect(1, 8527, '\P{numberforms}', "");
Expect(0, 8527, '\P{^numberforms}', "");
Expect(1, 8591, '\p{- Number-Forms}', "");
Expect(0, 8591, '\p{^- Number-Forms}', "");
Expect(0, 8591, '\P{- Number-Forms}', "");
Expect(1, 8591, '\P{^- Number-Forms}', "");
Expect(0, 8527, '\p{- Number-Forms}', "");
Expect(1, 8527, '\p{^- Number-Forms}', "");
Expect(1, 8527, '\P{- Number-Forms}', "");
Expect(0, 8527, '\P{^- Number-Forms}', "");
Error('\p{_	Is-Number	Forms:=}');
Error('\P{_	Is-Number	Forms:=}');
Expect(1, 8591, '\p{isnumberforms}', "");
Expect(0, 8591, '\p{^isnumberforms}', "");
Expect(0, 8591, '\P{isnumberforms}', "");
Expect(1, 8591, '\P{^isnumberforms}', "");
Expect(0, 8527, '\p{isnumberforms}', "");
Expect(1, 8527, '\p{^isnumberforms}', "");
Expect(1, 8527, '\P{isnumberforms}', "");
Expect(0, 8527, '\P{^isnumberforms}', "");
Expect(1, 8591, '\p{-Is NUMBER_forms}', "");
Expect(0, 8591, '\p{^-Is NUMBER_forms}', "");
Expect(0, 8591, '\P{-Is NUMBER_forms}', "");
Expect(1, 8591, '\P{^-Is NUMBER_forms}', "");
Expect(0, 8527, '\p{-Is NUMBER_forms}', "");
Expect(1, 8527, '\p{^-Is NUMBER_forms}', "");
Expect(1, 8527, '\P{-Is NUMBER_forms}', "");
Expect(0, 8527, '\P{^-Is NUMBER_forms}', "");
Error('\p{_-INNUMBER-forms:=}');
Error('\P{_-INNUMBER-forms:=}');
Expect(1, 8591, '\p{innumberforms}', "");
Expect(0, 8591, '\p{^innumberforms}', "");
Expect(0, 8591, '\P{innumberforms}', "");
Expect(1, 8591, '\P{^innumberforms}', "");
Expect(0, 8527, '\p{innumberforms}', "");
Expect(1, 8527, '\p{^innumberforms}', "");
Expect(1, 8527, '\P{innumberforms}', "");
Expect(0, 8527, '\P{^innumberforms}', "");
Expect(1, 8591, '\p{ -In Number	FORMS}', "");
Expect(0, 8591, '\p{^ -In Number	FORMS}', "");
Expect(0, 8591, '\P{ -In Number	FORMS}', "");
Expect(1, 8591, '\P{^ -In Number	FORMS}', "");
Expect(0, 8527, '\p{ -In Number	FORMS}', "");
Expect(1, 8527, '\p{^ -In Number	FORMS}', "");
Expect(1, 8527, '\P{ -In Number	FORMS}', "");
Expect(0, 8527, '\P{^ -In Number	FORMS}', "");
Error('\p{_:=Alnum}');
Error('\P{_:=Alnum}');
Expect(1, 57, '\p{alnum}', "");
Expect(0, 57, '\p{^alnum}', "");
Expect(0, 57, '\P{alnum}', "");
Expect(1, 57, '\P{^alnum}', "");
Expect(0, 47, '\p{alnum}', "");
Expect(1, 47, '\p{^alnum}', "");
Expect(1, 47, '\P{alnum}', "");
Expect(0, 47, '\P{^alnum}', "");
Expect(1, 57, '\p{ ALNUM}', "");
Expect(0, 57, '\p{^ ALNUM}', "");
Expect(0, 57, '\P{ ALNUM}', "");
Expect(1, 57, '\P{^ ALNUM}', "");
Expect(0, 47, '\p{ ALNUM}', "");
Expect(1, 47, '\p{^ ALNUM}', "");
Expect(1, 47, '\P{ ALNUM}', "");
Expect(0, 47, '\P{^ ALNUM}', "");
Error('\p{- is:=alnum}');
Error('\P{- is:=alnum}');
Expect(1, 57, '\p{isalnum}', "");
Expect(0, 57, '\p{^isalnum}', "");
Expect(0, 57, '\P{isalnum}', "");
Expect(1, 57, '\P{^isalnum}', "");
Expect(0, 47, '\p{isalnum}', "");
Expect(1, 47, '\p{^isalnum}', "");
Expect(1, 47, '\P{isalnum}', "");
Expect(0, 47, '\P{^isalnum}', "");
Expect(1, 57, '\p{_IS_alnum}', "");
Expect(0, 57, '\p{^_IS_alnum}', "");
Expect(0, 57, '\P{_IS_alnum}', "");
Expect(1, 57, '\P{^_IS_alnum}', "");
Expect(0, 47, '\p{_IS_alnum}', "");
Expect(1, 47, '\p{^_IS_alnum}', "");
Expect(1, 47, '\P{_IS_alnum}', "");
Expect(0, 47, '\P{^_IS_alnum}', "");
Error('\p{/a/	 InSundanese}');
Error('\P{/a/	 InSundanese}');
Expect(1, 7103, '\p{insundanese}', "");
Expect(0, 7103, '\p{^insundanese}', "");
Expect(0, 7103, '\P{insundanese}', "");
Expect(1, 7103, '\P{^insundanese}', "");
Expect(0, 7039, '\p{insundanese}', "");
Expect(1, 7039, '\p{^insundanese}', "");
Expect(1, 7039, '\P{insundanese}', "");
Expect(0, 7039, '\P{^insundanese}', "");
Expect(1, 7103, '\p{ In	sundanese}', "");
Expect(0, 7103, '\p{^ In	sundanese}', "");
Expect(0, 7103, '\P{ In	sundanese}', "");
Expect(1, 7103, '\P{^ In	sundanese}', "");
Expect(0, 7039, '\p{ In	sundanese}', "");
Expect(1, 7039, '\p{^ In	sundanese}', "");
Expect(1, 7039, '\P{ In	sundanese}', "");
Expect(0, 7039, '\P{^ In	sundanese}', "");
Error('\p{-:=Arabic_Presentation_Forms	B}');
Error('\P{-:=Arabic_Presentation_Forms	B}');
Expect(1, 65279, '\p{arabicpresentationformsb}', "");
Expect(0, 65279, '\p{^arabicpresentationformsb}', "");
Expect(0, 65279, '\P{arabicpresentationformsb}', "");
Expect(1, 65279, '\P{^arabicpresentationformsb}', "");
Expect(0, 65135, '\p{arabicpresentationformsb}', "");
Expect(1, 65135, '\p{^arabicpresentationformsb}', "");
Expect(1, 65135, '\P{arabicpresentationformsb}', "");
Expect(0, 65135, '\P{^arabicpresentationformsb}', "");
Expect(1, 65279, '\p{	 Arabic-Presentation-FORMSb}', "");
Expect(0, 65279, '\p{^	 Arabic-Presentation-FORMSb}', "");
Expect(0, 65279, '\P{	 Arabic-Presentation-FORMSb}', "");
Expect(1, 65279, '\P{^	 Arabic-Presentation-FORMSb}', "");
Expect(0, 65135, '\p{	 Arabic-Presentation-FORMSb}', "");
Expect(1, 65135, '\p{^	 Arabic-Presentation-FORMSb}', "");
Expect(1, 65135, '\P{	 Arabic-Presentation-FORMSb}', "");
Expect(0, 65135, '\P{^	 Arabic-Presentation-FORMSb}', "");
Error('\p{	:=Isarabic Presentation-FORMSB}');
Error('\P{	:=Isarabic Presentation-FORMSB}');
Expect(1, 65279, '\p{isarabicpresentationformsb}', "");
Expect(0, 65279, '\p{^isarabicpresentationformsb}', "");
Expect(0, 65279, '\P{isarabicpresentationformsb}', "");
Expect(1, 65279, '\P{^isarabicpresentationformsb}', "");
Expect(0, 65135, '\p{isarabicpresentationformsb}', "");
Expect(1, 65135, '\p{^isarabicpresentationformsb}', "");
Expect(1, 65135, '\P{isarabicpresentationformsb}', "");
Expect(0, 65135, '\P{^isarabicpresentationformsb}', "");
Expect(1, 65279, '\p{_ Is arabic-PRESENTATION-forms-B}', "");
Expect(0, 65279, '\p{^_ Is arabic-PRESENTATION-forms-B}', "");
Expect(0, 65279, '\P{_ Is arabic-PRESENTATION-forms-B}', "");
Expect(1, 65279, '\P{^_ Is arabic-PRESENTATION-forms-B}', "");
Expect(0, 65135, '\p{_ Is arabic-PRESENTATION-forms-B}', "");
Expect(1, 65135, '\p{^_ Is arabic-PRESENTATION-forms-B}', "");
Expect(1, 65135, '\P{_ Is arabic-PRESENTATION-forms-B}', "");
Expect(0, 65135, '\P{^_ Is arabic-PRESENTATION-forms-B}', "");
Error('\p{- In/a/Arabic PRESENTATION	forms_B}');
Error('\P{- In/a/Arabic PRESENTATION	forms_B}');
Expect(1, 65279, '\p{inarabicpresentationformsb}', "");
Expect(0, 65279, '\p{^inarabicpresentationformsb}', "");
Expect(0, 65279, '\P{inarabicpresentationformsb}', "");
Expect(1, 65279, '\P{^inarabicpresentationformsb}', "");
Expect(0, 65135, '\p{inarabicpresentationformsb}', "");
Expect(1, 65135, '\p{^inarabicpresentationformsb}', "");
Expect(1, 65135, '\P{inarabicpresentationformsb}', "");
Expect(0, 65135, '\P{^inarabicpresentationformsb}', "");
Expect(1, 65279, '\p{	 In-Arabic PRESENTATION_FORMS-B}', "");
Expect(0, 65279, '\p{^	 In-Arabic PRESENTATION_FORMS-B}', "");
Expect(0, 65279, '\P{	 In-Arabic PRESENTATION_FORMS-B}', "");
Expect(1, 65279, '\P{^	 In-Arabic PRESENTATION_FORMS-B}', "");
Expect(0, 65135, '\p{	 In-Arabic PRESENTATION_FORMS-B}', "");
Expect(1, 65135, '\p{^	 In-Arabic PRESENTATION_FORMS-B}', "");
Expect(1, 65135, '\P{	 In-Arabic PRESENTATION_FORMS-B}', "");
Expect(0, 65135, '\P{^	 In-Arabic PRESENTATION_FORMS-B}', "");
Error('\p{_/a/Rumi-Numeral symbols}');
Error('\P{_/a/Rumi-Numeral symbols}');
Expect(1, 69247, '\p{ruminumeralsymbols}', "");
Expect(0, 69247, '\p{^ruminumeralsymbols}', "");
Expect(0, 69247, '\P{ruminumeralsymbols}', "");
Expect(1, 69247, '\P{^ruminumeralsymbols}', "");
Expect(0, 69215, '\p{ruminumeralsymbols}', "");
Expect(1, 69215, '\p{^ruminumeralsymbols}', "");
Expect(1, 69215, '\P{ruminumeralsymbols}', "");
Expect(0, 69215, '\P{^ruminumeralsymbols}', "");
Expect(1, 69247, '\p{ ruminumeral_SYMBOLS}', "");
Expect(0, 69247, '\p{^ ruminumeral_SYMBOLS}', "");
Expect(0, 69247, '\P{ ruminumeral_SYMBOLS}', "");
Expect(1, 69247, '\P{^ ruminumeral_SYMBOLS}', "");
Expect(0, 69215, '\p{ ruminumeral_SYMBOLS}', "");
Expect(1, 69215, '\p{^ ruminumeral_SYMBOLS}', "");
Expect(1, 69215, '\P{ ruminumeral_SYMBOLS}', "");
Expect(0, 69215, '\P{^ ruminumeral_SYMBOLS}', "");
Error('\p{ /a/IS-Rumi NUMERAL_Symbols}');
Error('\P{ /a/IS-Rumi NUMERAL_Symbols}');
Expect(1, 69247, '\p{isruminumeralsymbols}', "");
Expect(0, 69247, '\p{^isruminumeralsymbols}', "");
Expect(0, 69247, '\P{isruminumeralsymbols}', "");
Expect(1, 69247, '\P{^isruminumeralsymbols}', "");
Expect(0, 69215, '\p{isruminumeralsymbols}', "");
Expect(1, 69215, '\p{^isruminumeralsymbols}', "");
Expect(1, 69215, '\P{isruminumeralsymbols}', "");
Expect(0, 69215, '\P{^isruminumeralsymbols}', "");
Expect(1, 69247, '\p{--Is_Rumi_numeral Symbols}', "");
Expect(0, 69247, '\p{^--Is_Rumi_numeral Symbols}', "");
Expect(0, 69247, '\P{--Is_Rumi_numeral Symbols}', "");
Expect(1, 69247, '\P{^--Is_Rumi_numeral Symbols}', "");
Expect(0, 69215, '\p{--Is_Rumi_numeral Symbols}', "");
Expect(1, 69215, '\p{^--Is_Rumi_numeral Symbols}', "");
Expect(1, 69215, '\P{--Is_Rumi_numeral Symbols}', "");
Expect(0, 69215, '\P{^--Is_Rumi_numeral Symbols}', "");
Error('\p{-:=IN_RUMInumeralSYMBOLS}');
Error('\P{-:=IN_RUMInumeralSYMBOLS}');
Expect(1, 69247, '\p{inruminumeralsymbols}', "");
Expect(0, 69247, '\p{^inruminumeralsymbols}', "");
Expect(0, 69247, '\P{inruminumeralsymbols}', "");
Expect(1, 69247, '\P{^inruminumeralsymbols}', "");
Expect(0, 69215, '\p{inruminumeralsymbols}', "");
Expect(1, 69215, '\p{^inruminumeralsymbols}', "");
Expect(1, 69215, '\P{inruminumeralsymbols}', "");
Expect(0, 69215, '\P{^inruminumeralsymbols}', "");
Expect(1, 69247, '\p{ -IN_RUMI_Numeral-Symbols}', "");
Expect(0, 69247, '\p{^ -IN_RUMI_Numeral-Symbols}', "");
Expect(0, 69247, '\P{ -IN_RUMI_Numeral-Symbols}', "");
Expect(1, 69247, '\P{^ -IN_RUMI_Numeral-Symbols}', "");
Expect(0, 69215, '\p{ -IN_RUMI_Numeral-Symbols}', "");
Expect(1, 69215, '\p{^ -IN_RUMI_Numeral-Symbols}', "");
Expect(1, 69215, '\P{ -IN_RUMI_Numeral-Symbols}', "");
Expect(0, 69215, '\P{^ -IN_RUMI_Numeral-Symbols}', "");
Error('\p{:=Common_IndicNumber_FORMS}');
Error('\P{:=Common_IndicNumber_FORMS}');
Expect(1, 43071, '\p{commonindicnumberforms}', "");
Expect(0, 43071, '\p{^commonindicnumberforms}', "");
Expect(0, 43071, '\P{commonindicnumberforms}', "");
Expect(1, 43071, '\P{^commonindicnumberforms}', "");
Expect(0, 43055, '\p{commonindicnumberforms}', "");
Expect(1, 43055, '\p{^commonindicnumberforms}', "");
Expect(1, 43055, '\P{commonindicnumberforms}', "");
Expect(0, 43055, '\P{^commonindicnumberforms}', "");
Expect(1, 43071, '\p{ -common_indic NUMBER Forms}', "");
Expect(0, 43071, '\p{^ -common_indic NUMBER Forms}', "");
Expect(0, 43071, '\P{ -common_indic NUMBER Forms}', "");
Expect(1, 43071, '\P{^ -common_indic NUMBER Forms}', "");
Expect(0, 43055, '\p{ -common_indic NUMBER Forms}', "");
Expect(1, 43055, '\p{^ -common_indic NUMBER Forms}', "");
Expect(1, 43055, '\P{ -common_indic NUMBER Forms}', "");
Expect(0, 43055, '\P{^ -common_indic NUMBER Forms}', "");
Error('\p{	is common/a/indicnumber_Forms}');
Error('\P{	is common/a/indicnumber_Forms}');
Expect(1, 43071, '\p{iscommonindicnumberforms}', "");
Expect(0, 43071, '\p{^iscommonindicnumberforms}', "");
Expect(0, 43071, '\P{iscommonindicnumberforms}', "");
Expect(1, 43071, '\P{^iscommonindicnumberforms}', "");
Expect(0, 43055, '\p{iscommonindicnumberforms}', "");
Expect(1, 43055, '\p{^iscommonindicnumberforms}', "");
Expect(1, 43055, '\P{iscommonindicnumberforms}', "");
Expect(0, 43055, '\P{^iscommonindicnumberforms}', "");
Expect(1, 43071, '\p{ Is-common	indic_number-FORMS}', "");
Expect(0, 43071, '\p{^ Is-common	indic_number-FORMS}', "");
Expect(0, 43071, '\P{ Is-common	indic_number-FORMS}', "");
Expect(1, 43071, '\P{^ Is-common	indic_number-FORMS}', "");
Expect(0, 43055, '\p{ Is-common	indic_number-FORMS}', "");
Expect(1, 43055, '\p{^ Is-common	indic_number-FORMS}', "");
Expect(1, 43055, '\P{ Is-common	indic_number-FORMS}', "");
Expect(0, 43055, '\P{^ Is-common	indic_number-FORMS}', "");
Error('\p{-	inCommon/a/Indic Number	forms}');
Error('\P{-	inCommon/a/Indic Number	forms}');
Expect(1, 43071, '\p{incommonindicnumberforms}', "");
Expect(0, 43071, '\p{^incommonindicnumberforms}', "");
Expect(0, 43071, '\P{incommonindicnumberforms}', "");
Expect(1, 43071, '\P{^incommonindicnumberforms}', "");
Expect(0, 43055, '\p{incommonindicnumberforms}', "");
Expect(1, 43055, '\p{^incommonindicnumberforms}', "");
Expect(1, 43055, '\P{incommonindicnumberforms}', "");
Expect(0, 43055, '\P{^incommonindicnumberforms}', "");
Expect(1, 43071, '\p{	_In Common_Indic-Number_Forms}', "");
Expect(0, 43071, '\p{^	_In Common_Indic-Number_Forms}', "");
Expect(0, 43071, '\P{	_In Common_Indic-Number_Forms}', "");
Expect(1, 43071, '\P{^	_In Common_Indic-Number_Forms}', "");
Expect(0, 43055, '\p{	_In Common_Indic-Number_Forms}', "");
Expect(1, 43055, '\p{^	_In Common_Indic-Number_Forms}', "");
Expect(1, 43055, '\P{	_In Common_Indic-Number_Forms}', "");
Expect(0, 43055, '\P{^	_In Common_Indic-Number_Forms}', "");
Error('\p{-/a/Alpha}');
Error('\P{-/a/Alpha}');
Expect(1, 90, '\p{alpha}', "");
Expect(0, 90, '\p{^alpha}', "");
Expect(0, 90, '\P{alpha}', "");
Expect(1, 90, '\P{^alpha}', "");
Expect(0, 64, '\p{alpha}', "");
Expect(1, 64, '\p{^alpha}', "");
Expect(1, 64, '\P{alpha}', "");
Expect(0, 64, '\P{^alpha}', "");
Expect(1, 90, '\p{  Alpha}', "");
Expect(0, 90, '\p{^  Alpha}', "");
Expect(0, 90, '\P{  Alpha}', "");
Expect(1, 90, '\P{^  Alpha}', "");
Expect(0, 64, '\p{  Alpha}', "");
Expect(1, 64, '\p{^  Alpha}', "");
Expect(1, 64, '\P{  Alpha}', "");
Expect(0, 64, '\P{^  Alpha}', "");
Error('\p{--Is ALPHA:=}');
Error('\P{--Is ALPHA:=}');
Expect(1, 90, '\p{isalpha}', "");
Expect(0, 90, '\p{^isalpha}', "");
Expect(0, 90, '\P{isalpha}', "");
Expect(1, 90, '\P{^isalpha}', "");
Expect(0, 64, '\p{isalpha}', "");
Expect(1, 64, '\p{^isalpha}', "");
Expect(1, 64, '\P{isalpha}', "");
Expect(0, 64, '\P{^isalpha}', "");
Expect(1, 90, '\p{	IS ALPHA}', "");
Expect(0, 90, '\p{^	IS ALPHA}', "");
Expect(0, 90, '\P{	IS ALPHA}', "");
Expect(1, 90, '\P{^	IS ALPHA}', "");
Expect(0, 64, '\p{	IS ALPHA}', "");
Expect(1, 64, '\p{^	IS ALPHA}', "");
Expect(1, 64, '\P{	IS ALPHA}', "");
Expect(0, 64, '\P{^	IS ALPHA}', "");
Error('\p{/a/	_Alphabetic}');
Error('\P{/a/	_Alphabetic}');
Expect(1, 90, '\p{alphabetic}', "");
Expect(0, 90, '\p{^alphabetic}', "");
Expect(0, 90, '\P{alphabetic}', "");
Expect(1, 90, '\P{^alphabetic}', "");
Expect(0, 64, '\p{alphabetic}', "");
Expect(1, 64, '\p{^alphabetic}', "");
Expect(1, 64, '\P{alphabetic}', "");
Expect(0, 64, '\P{^alphabetic}', "");
Expect(1, 90, '\p{_Alphabetic}', "");
Expect(0, 90, '\p{^_Alphabetic}', "");
Expect(0, 90, '\P{_Alphabetic}', "");
Expect(1, 90, '\P{^_Alphabetic}', "");
Expect(0, 64, '\p{_Alphabetic}', "");
Expect(1, 64, '\p{^_Alphabetic}', "");
Expect(1, 64, '\P{_Alphabetic}', "");
Expect(0, 64, '\P{^_Alphabetic}', "");
Error('\p{-	Is:=ALPHABETIC}');
Error('\P{-	Is:=ALPHABETIC}');
Expect(1, 90, '\p{isalphabetic}', "");
Expect(0, 90, '\p{^isalphabetic}', "");
Expect(0, 90, '\P{isalphabetic}', "");
Expect(1, 90, '\P{^isalphabetic}', "");
Expect(0, 64, '\p{isalphabetic}', "");
Expect(1, 64, '\p{^isalphabetic}', "");
Expect(1, 64, '\P{isalphabetic}', "");
Expect(0, 64, '\P{^isalphabetic}', "");
Expect(1, 90, '\p{-Is-Alphabetic}', "");
Expect(0, 90, '\p{^-Is-Alphabetic}', "");
Expect(0, 90, '\P{-Is-Alphabetic}', "");
Expect(1, 90, '\P{^-Is-Alphabetic}', "");
Expect(0, 64, '\p{-Is-Alphabetic}', "");
Expect(1, 64, '\p{^-Is-Alphabetic}', "");
Expect(1, 64, '\P{-Is-Alphabetic}', "");
Expect(0, 64, '\P{^-Is-Alphabetic}', "");
Error('\p{-	In:=Egyptian HIEROGLYPHS}');
Error('\P{-	In:=Egyptian HIEROGLYPHS}');
Expect(1, 78895, '\p{inegyptianhieroglyphs}', "");
Expect(0, 78895, '\p{^inegyptianhieroglyphs}', "");
Expect(0, 78895, '\P{inegyptianhieroglyphs}', "");
Expect(1, 78895, '\P{^inegyptianhieroglyphs}', "");
Expect(0, 77823, '\p{inegyptianhieroglyphs}', "");
Expect(1, 77823, '\p{^inegyptianhieroglyphs}', "");
Expect(1, 77823, '\P{inegyptianhieroglyphs}', "");
Expect(0, 77823, '\P{^inegyptianhieroglyphs}', "");
Expect(1, 78895, '\p{	In	EGYPTIAN Hieroglyphs}', "");
Expect(0, 78895, '\p{^	In	EGYPTIAN Hieroglyphs}', "");
Expect(0, 78895, '\P{	In	EGYPTIAN Hieroglyphs}', "");
Expect(1, 78895, '\P{^	In	EGYPTIAN Hieroglyphs}', "");
Expect(0, 77823, '\p{	In	EGYPTIAN Hieroglyphs}', "");
Expect(1, 77823, '\p{^	In	EGYPTIAN Hieroglyphs}', "");
Expect(1, 77823, '\P{	In	EGYPTIAN Hieroglyphs}', "");
Expect(0, 77823, '\P{^	In	EGYPTIAN Hieroglyphs}', "");
Error('\p{_IN:=myanmar}');
Error('\P{_IN:=myanmar}');
Expect(1, 4255, '\p{inmyanmar}', "");
Expect(0, 4255, '\p{^inmyanmar}', "");
Expect(0, 4255, '\P{inmyanmar}', "");
Expect(1, 4255, '\P{^inmyanmar}', "");
Expect(0, 4095, '\p{inmyanmar}', "");
Expect(1, 4095, '\p{^inmyanmar}', "");
Expect(1, 4095, '\P{inmyanmar}', "");
Expect(0, 4095, '\P{^inmyanmar}', "");
Expect(1, 4255, '\p{_In-MYANMAR}', "");
Expect(0, 4255, '\p{^_In-MYANMAR}', "");
Expect(0, 4255, '\P{_In-MYANMAR}', "");
Expect(1, 4255, '\P{^_In-MYANMAR}', "");
Expect(0, 4095, '\p{_In-MYANMAR}', "");
Expect(1, 4095, '\p{^_In-MYANMAR}', "");
Expect(1, 4095, '\P{_In-MYANMAR}', "");
Expect(0, 4095, '\P{^_In-MYANMAR}', "");
Error('\p{ _Greek extended/a/}');
Error('\P{ _Greek extended/a/}');
Expect(1, 8191, '\p{greekextended}', "");
Expect(0, 8191, '\p{^greekextended}', "");
Expect(0, 8191, '\P{greekextended}', "");
Expect(1, 8191, '\P{^greekextended}', "");
Expect(0, 7935, '\p{greekextended}', "");
Expect(1, 7935, '\p{^greekextended}', "");
Expect(1, 7935, '\P{greekextended}', "");
Expect(0, 7935, '\P{^greekextended}', "");
Expect(1, 8191, '\p{-GREEK-EXTENDED}', "");
Expect(0, 8191, '\p{^-GREEK-EXTENDED}', "");
Expect(0, 8191, '\P{-GREEK-EXTENDED}', "");
Expect(1, 8191, '\P{^-GREEK-EXTENDED}', "");
Expect(0, 7935, '\p{-GREEK-EXTENDED}', "");
Expect(1, 7935, '\p{^-GREEK-EXTENDED}', "");
Expect(1, 7935, '\P{-GREEK-EXTENDED}', "");
Expect(0, 7935, '\P{^-GREEK-EXTENDED}', "");
Error('\p{ is/a/Greek EXTENDED}');
Error('\P{ is/a/Greek EXTENDED}');
Expect(1, 8191, '\p{isgreekextended}', "");
Expect(0, 8191, '\p{^isgreekextended}', "");
Expect(0, 8191, '\P{isgreekextended}', "");
Expect(1, 8191, '\P{^isgreekextended}', "");
Expect(0, 7935, '\p{isgreekextended}', "");
Expect(1, 7935, '\p{^isgreekextended}', "");
Expect(1, 7935, '\P{isgreekextended}', "");
Expect(0, 7935, '\P{^isgreekextended}', "");
Expect(1, 8191, '\p{ IS	GREEK_Extended}', "");
Expect(0, 8191, '\p{^ IS	GREEK_Extended}', "");
Expect(0, 8191, '\P{ IS	GREEK_Extended}', "");
Expect(1, 8191, '\P{^ IS	GREEK_Extended}', "");
Expect(0, 7935, '\p{ IS	GREEK_Extended}', "");
Expect(1, 7935, '\p{^ IS	GREEK_Extended}', "");
Expect(1, 7935, '\P{ IS	GREEK_Extended}', "");
Expect(0, 7935, '\P{^ IS	GREEK_Extended}', "");
Error('\p{-in Greek:=Extended}');
Error('\P{-in Greek:=Extended}');
Expect(1, 8191, '\p{ingreekextended}', "");
Expect(0, 8191, '\p{^ingreekextended}', "");
Expect(0, 8191, '\P{ingreekextended}', "");
Expect(1, 8191, '\P{^ingreekextended}', "");
Expect(0, 7935, '\p{ingreekextended}', "");
Expect(1, 7935, '\p{^ingreekextended}', "");
Expect(1, 7935, '\P{ingreekextended}', "");
Expect(0, 7935, '\P{^ingreekextended}', "");
Expect(1, 8191, '\p{	 InGreek_extended}', "");
Expect(0, 8191, '\p{^	 InGreek_extended}', "");
Expect(0, 8191, '\P{	 InGreek_extended}', "");
Expect(1, 8191, '\P{^	 InGreek_extended}', "");
Expect(0, 7935, '\p{	 InGreek_extended}', "");
Expect(1, 7935, '\p{^	 InGreek_extended}', "");
Expect(1, 7935, '\P{	 InGreek_extended}', "");
Expect(0, 7935, '\P{^	 InGreek_extended}', "");
Error('\p{--radical:=}');
Error('\P{--radical:=}');
Expect(1, 11929, '\p{radical}', "");
Expect(0, 11929, '\p{^radical}', "");
Expect(0, 11929, '\P{radical}', "");
Expect(1, 11929, '\P{^radical}', "");
Expect(0, 11903, '\p{radical}', "");
Expect(1, 11903, '\p{^radical}', "");
Expect(1, 11903, '\P{radical}', "");
Expect(0, 11903, '\P{^radical}', "");
Expect(1, 11929, '\p{ _Radical}', "");
Expect(0, 11929, '\p{^ _Radical}', "");
Expect(0, 11929, '\P{ _Radical}', "");
Expect(1, 11929, '\P{^ _Radical}', "");
Expect(0, 11903, '\p{ _Radical}', "");
Expect(1, 11903, '\p{^ _Radical}', "");
Expect(1, 11903, '\P{ _Radical}', "");
Expect(0, 11903, '\P{^ _Radical}', "");
Error('\p{/a/	_Is_RADICAL}');
Error('\P{/a/	_Is_RADICAL}');
Expect(1, 11929, '\p{isradical}', "");
Expect(0, 11929, '\p{^isradical}', "");
Expect(0, 11929, '\P{isradical}', "");
Expect(1, 11929, '\P{^isradical}', "");
Expect(0, 11903, '\p{isradical}', "");
Expect(1, 11903, '\p{^isradical}', "");
Expect(1, 11903, '\P{isradical}', "");
Expect(0, 11903, '\P{^isradical}', "");
Expect(1, 11929, '\p{	IS	Radical}', "");
Expect(0, 11929, '\p{^	IS	Radical}', "");
Expect(0, 11929, '\P{	IS	Radical}', "");
Expect(1, 11929, '\P{^	IS	Radical}', "");
Expect(0, 11903, '\p{	IS	Radical}', "");
Expect(1, 11903, '\p{^	IS	Radical}', "");
Expect(1, 11903, '\P{	IS	Radical}', "");
Expect(0, 11903, '\P{^	IS	Radical}', "");
Error('\p{:= 	LOW SURROGATES}');
Error('\P{:= 	LOW SURROGATES}');
Expect(0, 1, '\p{lowsurrogates}', "");
Expect(1, 1, '\p{^lowsurrogates}', "");
Expect(1, 1, '\P{lowsurrogates}', "");
Expect(0, 1, '\P{^lowsurrogates}', "");
Expect(0, 1, '\p{-_LOW_surrogates}', "");
Expect(1, 1, '\p{^-_LOW_surrogates}', "");
Expect(1, 1, '\P{-_LOW_surrogates}', "");
Expect(0, 1, '\P{^-_LOW_surrogates}', "");
Error('\p{:= _Is	Low-SURROGATES}');
Error('\P{:= _Is	Low-SURROGATES}');
Expect(0, 1, '\p{islowsurrogates}', "");
Expect(1, 1, '\p{^islowsurrogates}', "");
Expect(1, 1, '\P{islowsurrogates}', "");
Expect(0, 1, '\P{^islowsurrogates}', "");
Expect(0, 1, '\p{	 ISlow_Surrogates}', "");
Expect(1, 1, '\p{^	 ISlow_Surrogates}', "");
Expect(1, 1, '\P{	 ISlow_Surrogates}', "");
Expect(0, 1, '\P{^	 ISlow_Surrogates}', "");
Error('\p{/a/		In	Low-SURROGATES}');
Error('\P{/a/		In	Low-SURROGATES}');
Expect(0, 1, '\p{inlowsurrogates}', "");
Expect(1, 1, '\p{^inlowsurrogates}', "");
Expect(1, 1, '\P{inlowsurrogates}', "");
Expect(0, 1, '\P{^inlowsurrogates}', "");
Expect(0, 1, '\p{		in	low Surrogates}', "");
Expect(1, 1, '\p{^		in	low Surrogates}', "");
Expect(1, 1, '\P{		in	low Surrogates}', "");
Expect(0, 1, '\P{^		in	low Surrogates}', "");
Error('\p{	In/a/Phags Pa}');
Error('\P{	In/a/Phags Pa}');
Expect(1, 43135, '\p{inphagspa}', "");
Expect(0, 43135, '\p{^inphagspa}', "");
Expect(0, 43135, '\P{inphagspa}', "");
Expect(1, 43135, '\P{^inphagspa}', "");
Expect(0, 43071, '\p{inphagspa}', "");
Expect(1, 43071, '\p{^inphagspa}', "");
Expect(1, 43071, '\P{inphagspa}', "");
Expect(0, 43071, '\P{^inphagspa}', "");
Expect(1, 43135, '\p{_in-phags-Pa}', "");
Expect(0, 43135, '\p{^_in-phags-Pa}', "");
Expect(0, 43135, '\P{_in-phags-Pa}', "");
Expect(1, 43135, '\P{^_in-phags-Pa}', "");
Expect(0, 43071, '\p{_in-phags-Pa}', "");
Expect(1, 43071, '\p{^_in-phags-Pa}', "");
Expect(1, 43071, '\P{_in-phags-Pa}', "");
Expect(0, 43071, '\P{^_in-phags-Pa}', "");
Error('\p{_imperial/a/aramaic}');
Error('\P{_imperial/a/aramaic}');
Expect(1, 67669, '\p{imperialaramaic}', "");
Expect(0, 67669, '\p{^imperialaramaic}', "");
Expect(0, 67669, '\P{imperialaramaic}', "");
Expect(1, 67669, '\P{^imperialaramaic}', "");
Expect(0, 67647, '\p{imperialaramaic}', "");
Expect(1, 67647, '\p{^imperialaramaic}', "");
Expect(1, 67647, '\P{imperialaramaic}', "");
Expect(0, 67647, '\P{^imperialaramaic}', "");
Expect(1, 67669, '\p{ Imperial-aramaic}', "");
Expect(0, 67669, '\p{^ Imperial-aramaic}', "");
Expect(0, 67669, '\P{ Imperial-aramaic}', "");
Expect(1, 67669, '\P{^ Imperial-aramaic}', "");
Expect(0, 67647, '\p{ Imperial-aramaic}', "");
Expect(1, 67647, '\p{^ Imperial-aramaic}', "");
Expect(1, 67647, '\P{ Imperial-aramaic}', "");
Expect(0, 67647, '\P{^ Imperial-aramaic}', "");
Error('\p{_/a/Is Imperial-ARAMAIC}');
Error('\P{_/a/Is Imperial-ARAMAIC}');
Expect(1, 67669, '\p{isimperialaramaic}', "");
Expect(0, 67669, '\p{^isimperialaramaic}', "");
Expect(0, 67669, '\P{isimperialaramaic}', "");
Expect(1, 67669, '\P{^isimperialaramaic}', "");
Expect(0, 67647, '\p{isimperialaramaic}', "");
Expect(1, 67647, '\p{^isimperialaramaic}', "");
Expect(1, 67647, '\P{isimperialaramaic}', "");
Expect(0, 67647, '\P{^isimperialaramaic}', "");
Expect(1, 67669, '\p{	 IsImperial Aramaic}', "");
Expect(0, 67669, '\p{^	 IsImperial Aramaic}', "");
Expect(0, 67669, '\P{	 IsImperial Aramaic}', "");
Expect(1, 67669, '\P{^	 IsImperial Aramaic}', "");
Expect(0, 67647, '\p{	 IsImperial Aramaic}', "");
Expect(1, 67647, '\p{^	 IsImperial Aramaic}', "");
Expect(1, 67647, '\P{	 IsImperial Aramaic}', "");
Expect(0, 67647, '\P{^	 IsImperial Aramaic}', "");
Error('\p{:=	_ARMI}');
Error('\P{:=	_ARMI}');
Expect(1, 67669, '\p{armi}', "");
Expect(0, 67669, '\p{^armi}', "");
Expect(0, 67669, '\P{armi}', "");
Expect(1, 67669, '\P{^armi}', "");
Expect(0, 67647, '\p{armi}', "");
Expect(1, 67647, '\p{^armi}', "");
Expect(1, 67647, '\P{armi}', "");
Expect(0, 67647, '\P{^armi}', "");
Expect(1, 67669, '\p{ armi}', "");
Expect(0, 67669, '\p{^ armi}', "");
Expect(0, 67669, '\P{ armi}', "");
Expect(1, 67669, '\P{^ armi}', "");
Expect(0, 67647, '\p{ armi}', "");
Expect(1, 67647, '\p{^ armi}', "");
Expect(1, 67647, '\P{ armi}', "");
Expect(0, 67647, '\P{^ armi}', "");
Error('\p{/a/Is Armi}');
Error('\P{/a/Is Armi}');
Expect(1, 67669, '\p{isarmi}', "");
Expect(0, 67669, '\p{^isarmi}', "");
Expect(0, 67669, '\P{isarmi}', "");
Expect(1, 67669, '\P{^isarmi}', "");
Expect(0, 67647, '\p{isarmi}', "");
Expect(1, 67647, '\p{^isarmi}', "");
Expect(1, 67647, '\P{isarmi}', "");
Expect(0, 67647, '\P{^isarmi}', "");
Expect(1, 67669, '\p{-	Is	ARMI}', "");
Expect(0, 67669, '\p{^-	Is	ARMI}', "");
Expect(0, 67669, '\P{-	Is	ARMI}', "");
Expect(1, 67669, '\P{^-	Is	ARMI}', "");
Expect(0, 67647, '\p{-	Is	ARMI}', "");
Expect(1, 67647, '\p{^-	Is	ARMI}', "");
Expect(1, 67647, '\P{-	Is	ARMI}', "");
Expect(0, 67647, '\P{^-	Is	ARMI}', "");
Error('\p{/a/PERLSPACE}');
Error('\P{/a/PERLSPACE}');
Expect(1, 10, '\p{perlspace}', "");
Expect(0, 10, '\p{^perlspace}', "");
Expect(0, 10, '\P{perlspace}', "");
Expect(1, 10, '\P{^perlspace}', "");
Expect(0, 8, '\p{perlspace}', "");
Expect(1, 8, '\p{^perlspace}', "");
Expect(1, 8, '\P{perlspace}', "");
Expect(0, 8, '\P{^perlspace}', "");
Expect(1, 10, '\p{	_PerlSpace}', "");
Expect(0, 10, '\p{^	_PerlSpace}', "");
Expect(0, 10, '\P{	_PerlSpace}', "");
Expect(1, 10, '\P{^	_PerlSpace}', "");
Expect(0, 8, '\p{	_PerlSpace}', "");
Expect(1, 8, '\p{^	_PerlSpace}', "");
Expect(1, 8, '\P{	_PerlSpace}', "");
Expect(0, 8, '\P{^	_PerlSpace}', "");
Error('\p{:=_IsPerlSpace}');
Error('\P{:=_IsPerlSpace}');
Expect(1, 10, '\p{isperlspace}', "");
Expect(0, 10, '\p{^isperlspace}', "");
Expect(0, 10, '\P{isperlspace}', "");
Expect(1, 10, '\P{^isperlspace}', "");
Expect(0, 8, '\p{isperlspace}', "");
Expect(1, 8, '\p{^isperlspace}', "");
Expect(1, 8, '\P{isperlspace}', "");
Expect(0, 8, '\P{^isperlspace}', "");
Expect(1, 10, '\p{-IS-PERLSPACE}', "");
Expect(0, 10, '\p{^-IS-PERLSPACE}', "");
Expect(0, 10, '\P{-IS-PERLSPACE}', "");
Expect(1, 10, '\P{^-IS-PERLSPACE}', "");
Expect(0, 8, '\p{-IS-PERLSPACE}', "");
Expect(1, 8, '\p{^-IS-PERLSPACE}', "");
Expect(1, 8, '\P{-IS-PERLSPACE}', "");
Expect(0, 8, '\P{^-IS-PERLSPACE}', "");
Error('\p{	IDS-Binary:=operator}');
Error('\P{	IDS-Binary:=operator}');
Expect(1, 12273, '\p{idsbinaryoperator}', "");
Expect(0, 12273, '\p{^idsbinaryoperator}', "");
Expect(0, 12273, '\P{idsbinaryoperator}', "");
Expect(1, 12273, '\P{^idsbinaryoperator}', "");
Expect(0, 12271, '\p{idsbinaryoperator}', "");
Expect(1, 12271, '\p{^idsbinaryoperator}', "");
Expect(1, 12271, '\P{idsbinaryoperator}', "");
Expect(0, 12271, '\P{^idsbinaryoperator}', "");
Expect(1, 12273, '\p{_ids Binary Operator}', "");
Expect(0, 12273, '\p{^_ids Binary Operator}', "");
Expect(0, 12273, '\P{_ids Binary Operator}', "");
Expect(1, 12273, '\P{^_ids Binary Operator}', "");
Expect(0, 12271, '\p{_ids Binary Operator}', "");
Expect(1, 12271, '\p{^_ids Binary Operator}', "");
Expect(1, 12271, '\P{_ids Binary Operator}', "");
Expect(0, 12271, '\P{^_ids Binary Operator}', "");
Error('\p{ :=IS_IDS	Binary	operator}');
Error('\P{ :=IS_IDS	Binary	operator}');
Expect(1, 12273, '\p{isidsbinaryoperator}', "");
Expect(0, 12273, '\p{^isidsbinaryoperator}', "");
Expect(0, 12273, '\P{isidsbinaryoperator}', "");
Expect(1, 12273, '\P{^isidsbinaryoperator}', "");
Expect(0, 12271, '\p{isidsbinaryoperator}', "");
Expect(1, 12271, '\p{^isidsbinaryoperator}', "");
Expect(1, 12271, '\P{isidsbinaryoperator}', "");
Expect(0, 12271, '\P{^isidsbinaryoperator}', "");
Expect(1, 12273, '\p{  IS-IDS	binary_OPERATOR}', "");
Expect(0, 12273, '\p{^  IS-IDS	binary_OPERATOR}', "");
Expect(0, 12273, '\P{  IS-IDS	binary_OPERATOR}', "");
Expect(1, 12273, '\P{^  IS-IDS	binary_OPERATOR}', "");
Expect(0, 12271, '\p{  IS-IDS	binary_OPERATOR}', "");
Expect(1, 12271, '\p{^  IS-IDS	binary_OPERATOR}', "");
Expect(1, 12271, '\P{  IS-IDS	binary_OPERATOR}', "");
Expect(0, 12271, '\P{^  IS-IDS	binary_OPERATOR}', "");
Error('\p{-idsb/a/}');
Error('\P{-idsb/a/}');
Expect(1, 12273, '\p{idsb}', "");
Expect(0, 12273, '\p{^idsb}', "");
Expect(0, 12273, '\P{idsb}', "");
Expect(1, 12273, '\P{^idsb}', "");
Expect(0, 12271, '\p{idsb}', "");
Expect(1, 12271, '\p{^idsb}', "");
Expect(1, 12271, '\P{idsb}', "");
Expect(0, 12271, '\P{^idsb}', "");
Expect(1, 12273, '\p{--idsb}', "");
Expect(0, 12273, '\p{^--idsb}', "");
Expect(0, 12273, '\P{--idsb}', "");
Expect(1, 12273, '\P{^--idsb}', "");
Expect(0, 12271, '\p{--idsb}', "");
Expect(1, 12271, '\p{^--idsb}', "");
Expect(1, 12271, '\P{--idsb}', "");
Expect(0, 12271, '\P{^--idsb}', "");
Error('\p{:=		IsIDSB}');
Error('\P{:=		IsIDSB}');
Expect(1, 12273, '\p{isidsb}', "");
Expect(0, 12273, '\p{^isidsb}', "");
Expect(0, 12273, '\P{isidsb}', "");
Expect(1, 12273, '\P{^isidsb}', "");
Expect(0, 12271, '\p{isidsb}', "");
Expect(1, 12271, '\p{^isidsb}', "");
Expect(1, 12271, '\P{isidsb}', "");
Expect(0, 12271, '\P{^isidsb}', "");
Expect(1, 12273, '\p{ -Is	IDSB}', "");
Expect(0, 12273, '\p{^ -Is	IDSB}', "");
Expect(0, 12273, '\P{ -Is	IDSB}', "");
Expect(1, 12273, '\P{^ -Is	IDSB}', "");
Expect(0, 12271, '\p{ -Is	IDSB}', "");
Expect(1, 12271, '\p{^ -Is	IDSB}', "");
Expect(1, 12271, '\P{ -Is	IDSB}', "");
Expect(0, 12271, '\P{^ -Is	IDSB}', "");
Error('\p{	 Cntrl:=}');
Error('\P{	 Cntrl:=}');
Expect(1, 31, '\p{cntrl}', "");
Expect(0, 31, '\p{^cntrl}', "");
Expect(0, 31, '\P{cntrl}', "");
Expect(1, 31, '\P{^cntrl}', "");
Expect(0, 126, '\p{cntrl}', "");
Expect(1, 126, '\p{^cntrl}', "");
Expect(1, 126, '\P{cntrl}', "");
Expect(0, 126, '\P{^cntrl}', "");
Expect(1, 31, '\p{	-cntrl}', "");
Expect(0, 31, '\p{^	-cntrl}', "");
Expect(0, 31, '\P{	-cntrl}', "");
Expect(1, 31, '\P{^	-cntrl}', "");
Expect(0, 126, '\p{	-cntrl}', "");
Expect(1, 126, '\p{^	-cntrl}', "");
Expect(1, 126, '\P{	-cntrl}', "");
Expect(0, 126, '\P{^	-cntrl}', "");
Error('\p{_ Is:=cntrl}');
Error('\P{_ Is:=cntrl}');
Expect(1, 31, '\p{iscntrl}', "");
Expect(0, 31, '\p{^iscntrl}', "");
Expect(0, 31, '\P{iscntrl}', "");
Expect(1, 31, '\P{^iscntrl}', "");
Expect(0, 126, '\p{iscntrl}', "");
Expect(1, 126, '\p{^iscntrl}', "");
Expect(1, 126, '\P{iscntrl}', "");
Expect(0, 126, '\P{^iscntrl}', "");
Expect(1, 31, '\p{  Is CNTRL}', "");
Expect(0, 31, '\p{^  Is CNTRL}', "");
Expect(0, 31, '\P{  Is CNTRL}', "");
Expect(1, 31, '\P{^  Is CNTRL}', "");
Expect(0, 126, '\p{  Is CNTRL}', "");
Expect(1, 126, '\p{^  Is CNTRL}', "");
Expect(1, 126, '\P{  Is CNTRL}', "");
Expect(0, 126, '\P{^  Is CNTRL}', "");
Error('\p{:=-_CONTROL}');
Error('\P{:=-_CONTROL}');
Expect(1, 31, '\p{control}', "");
Expect(0, 31, '\p{^control}', "");
Expect(0, 31, '\P{control}', "");
Expect(1, 31, '\P{^control}', "");
Expect(0, 126, '\p{control}', "");
Expect(1, 126, '\p{^control}', "");
Expect(1, 126, '\P{control}', "");
Expect(0, 126, '\P{^control}', "");
Expect(1, 31, '\p{ -Control}', "");
Expect(0, 31, '\p{^ -Control}', "");
Expect(0, 31, '\P{ -Control}', "");
Expect(1, 31, '\P{^ -Control}', "");
Expect(0, 126, '\p{ -Control}', "");
Expect(1, 126, '\p{^ -Control}', "");
Expect(1, 126, '\P{ -Control}', "");
Expect(0, 126, '\P{^ -Control}', "");
Error('\p{__IS Control/a/}');
Error('\P{__IS Control/a/}');
Expect(1, 31, '\p{iscontrol}', "");
Expect(0, 31, '\p{^iscontrol}', "");
Expect(0, 31, '\P{iscontrol}', "");
Expect(1, 31, '\P{^iscontrol}', "");
Expect(0, 126, '\p{iscontrol}', "");
Expect(1, 126, '\p{^iscontrol}', "");
Expect(1, 126, '\P{iscontrol}', "");
Expect(0, 126, '\P{^iscontrol}', "");
Expect(1, 31, '\p{ -Is control}', "");
Expect(0, 31, '\p{^ -Is control}', "");
Expect(0, 31, '\P{ -Is control}', "");
Expect(1, 31, '\P{^ -Is control}', "");
Expect(0, 126, '\p{ -Is control}', "");
Expect(1, 126, '\p{^ -Is control}', "");
Expect(1, 126, '\P{ -Is control}', "");
Expect(0, 126, '\P{^ -Is control}', "");
Error('\p{:=-_CC}');
Error('\P{:=-_CC}');
Expect(1, 31, '\p{cc}', "");
Expect(0, 31, '\p{^cc}', "");
Expect(0, 31, '\P{cc}', "");
Expect(1, 31, '\P{^cc}', "");
Expect(0, 126, '\p{cc}', "");
Expect(1, 126, '\p{^cc}', "");
Expect(1, 126, '\P{cc}', "");
Expect(0, 126, '\P{^cc}', "");
Expect(1, 31, '\p{_cc}', "");
Expect(0, 31, '\p{^_cc}', "");
Expect(0, 31, '\P{_cc}', "");
Expect(1, 31, '\P{^_cc}', "");
Expect(0, 126, '\p{_cc}', "");
Expect(1, 126, '\p{^_cc}', "");
Expect(1, 126, '\P{_cc}', "");
Expect(0, 126, '\P{^_cc}', "");
Error('\p{/a/_ IS-Cc}');
Error('\P{/a/_ IS-Cc}');
Expect(1, 31, '\p{iscc}', "");
Expect(0, 31, '\p{^iscc}', "");
Expect(0, 31, '\P{iscc}', "");
Expect(1, 31, '\P{^iscc}', "");
Expect(0, 126, '\p{iscc}', "");
Expect(1, 126, '\p{^iscc}', "");
Expect(1, 126, '\P{iscc}', "");
Expect(0, 126, '\P{^iscc}', "");
Expect(1, 31, '\p{_-Is	Cc}', "");
Expect(0, 31, '\p{^_-Is	Cc}', "");
Expect(0, 31, '\P{_-Is	Cc}', "");
Expect(1, 31, '\P{^_-Is	Cc}', "");
Expect(0, 126, '\p{_-Is	Cc}', "");
Expect(1, 126, '\p{^_-Is	Cc}', "");
Expect(1, 126, '\P{_-Is	Cc}', "");
Expect(0, 126, '\P{^_-Is	Cc}', "");
Error('\p{_:=Changes_When_titlecased}');
Error('\P{_:=Changes_When_titlecased}');
Expect(1, 122, '\p{changeswhentitlecased}', "");
Expect(0, 122, '\p{^changeswhentitlecased}', "");
Expect(0, 122, '\P{changeswhentitlecased}', "");
Expect(1, 122, '\P{^changeswhentitlecased}', "");
Expect(0, 96, '\p{changeswhentitlecased}', "");
Expect(1, 96, '\p{^changeswhentitlecased}', "");
Expect(1, 96, '\P{changeswhentitlecased}', "");
Expect(0, 96, '\P{^changeswhentitlecased}', "");
Expect(1, 122, '\p{	_Changes-When_Titlecased}', "");
Expect(0, 122, '\p{^	_Changes-When_Titlecased}', "");
Expect(0, 122, '\P{	_Changes-When_Titlecased}', "");
Expect(1, 122, '\P{^	_Changes-When_Titlecased}', "");
Expect(0, 96, '\p{	_Changes-When_Titlecased}', "");
Expect(1, 96, '\p{^	_Changes-When_Titlecased}', "");
Expect(1, 96, '\P{	_Changes-When_Titlecased}', "");
Expect(0, 96, '\P{^	_Changes-When_Titlecased}', "");
Error('\p{_Is/a/CHANGESWHEN_titlecased}');
Error('\P{_Is/a/CHANGESWHEN_titlecased}');
Expect(1, 122, '\p{ischangeswhentitlecased}', "");
Expect(0, 122, '\p{^ischangeswhentitlecased}', "");
Expect(0, 122, '\P{ischangeswhentitlecased}', "");
Expect(1, 122, '\P{^ischangeswhentitlecased}', "");
Expect(0, 96, '\p{ischangeswhentitlecased}', "");
Expect(1, 96, '\p{^ischangeswhentitlecased}', "");
Expect(1, 96, '\P{ischangeswhentitlecased}', "");
Expect(0, 96, '\P{^ischangeswhentitlecased}', "");
Expect(1, 122, '\p{ IS_CHANGES	When	Titlecased}', "");
Expect(0, 122, '\p{^ IS_CHANGES	When	Titlecased}', "");
Expect(0, 122, '\P{ IS_CHANGES	When	Titlecased}', "");
Expect(1, 122, '\P{^ IS_CHANGES	When	Titlecased}', "");
Expect(0, 96, '\p{ IS_CHANGES	When	Titlecased}', "");
Expect(1, 96, '\p{^ IS_CHANGES	When	Titlecased}', "");
Expect(1, 96, '\P{ IS_CHANGES	When	Titlecased}', "");
Expect(0, 96, '\P{^ IS_CHANGES	When	Titlecased}', "");
Error('\p{	-CWT/a/}');
Error('\P{	-CWT/a/}');
Expect(1, 122, '\p{cwt}', "");
Expect(0, 122, '\p{^cwt}', "");
Expect(0, 122, '\P{cwt}', "");
Expect(1, 122, '\P{^cwt}', "");
Expect(0, 96, '\p{cwt}', "");
Expect(1, 96, '\p{^cwt}', "");
Expect(1, 96, '\P{cwt}', "");
Expect(0, 96, '\P{^cwt}', "");
Expect(1, 122, '\p{_CWT}', "");
Expect(0, 122, '\p{^_CWT}', "");
Expect(0, 122, '\P{_CWT}', "");
Expect(1, 122, '\P{^_CWT}', "");
Expect(0, 96, '\p{_CWT}', "");
Expect(1, 96, '\p{^_CWT}', "");
Expect(1, 96, '\P{_CWT}', "");
Expect(0, 96, '\P{^_CWT}', "");
Error('\p{Is:=cwt}');
Error('\P{Is:=cwt}');
Expect(1, 122, '\p{iscwt}', "");
Expect(0, 122, '\p{^iscwt}', "");
Expect(0, 122, '\P{iscwt}', "");
Expect(1, 122, '\P{^iscwt}', "");
Expect(0, 96, '\p{iscwt}', "");
Expect(1, 96, '\p{^iscwt}', "");
Expect(1, 96, '\P{iscwt}', "");
Expect(0, 96, '\P{^iscwt}', "");
Expect(1, 122, '\p{--Is	CWT}', "");
Expect(0, 122, '\p{^--Is	CWT}', "");
Expect(0, 122, '\P{--Is	CWT}', "");
Expect(1, 122, '\P{^--Is	CWT}', "");
Expect(0, 96, '\p{--Is	CWT}', "");
Expect(1, 96, '\p{^--Is	CWT}', "");
Expect(1, 96, '\P{--Is	CWT}', "");
Expect(0, 96, '\P{^--Is	CWT}', "");
Error('\p{-Cyrillic:=Extended_A}');
Error('\P{-Cyrillic:=Extended_A}');
Expect(1, 11775, '\p{cyrillicextendeda}', "");
Expect(0, 11775, '\p{^cyrillicextendeda}', "");
Expect(0, 11775, '\P{cyrillicextendeda}', "");
Expect(1, 11775, '\P{^cyrillicextendeda}', "");
Expect(0, 11743, '\p{cyrillicextendeda}', "");
Expect(1, 11743, '\p{^cyrillicextendeda}', "");
Expect(1, 11743, '\P{cyrillicextendeda}', "");
Expect(0, 11743, '\P{^cyrillicextendeda}', "");
Expect(1, 11775, '\p{	-Cyrillic Extended	A}', "");
Expect(0, 11775, '\p{^	-Cyrillic Extended	A}', "");
Expect(0, 11775, '\P{	-Cyrillic Extended	A}', "");
Expect(1, 11775, '\P{^	-Cyrillic Extended	A}', "");
Expect(0, 11743, '\p{	-Cyrillic Extended	A}', "");
Expect(1, 11743, '\p{^	-Cyrillic Extended	A}', "");
Expect(1, 11743, '\P{	-Cyrillic Extended	A}', "");
Expect(0, 11743, '\P{^	-Cyrillic Extended	A}', "");
Error('\p{__IsCYRILLICextendedA:=}');
Error('\P{__IsCYRILLICextendedA:=}');
Expect(1, 11775, '\p{iscyrillicextendeda}', "");
Expect(0, 11775, '\p{^iscyrillicextendeda}', "");
Expect(0, 11775, '\P{iscyrillicextendeda}', "");
Expect(1, 11775, '\P{^iscyrillicextendeda}', "");
Expect(0, 11743, '\p{iscyrillicextendeda}', "");
Expect(1, 11743, '\p{^iscyrillicextendeda}', "");
Expect(1, 11743, '\P{iscyrillicextendeda}', "");
Expect(0, 11743, '\P{^iscyrillicextendeda}', "");
Expect(1, 11775, '\p{ 	ISCyrillicExtendedA}', "");
Expect(0, 11775, '\p{^ 	ISCyrillicExtendedA}', "");
Expect(0, 11775, '\P{ 	ISCyrillicExtendedA}', "");
Expect(1, 11775, '\P{^ 	ISCyrillicExtendedA}', "");
Expect(0, 11743, '\p{ 	ISCyrillicExtendedA}', "");
Expect(1, 11743, '\p{^ 	ISCyrillicExtendedA}', "");
Expect(1, 11743, '\P{ 	ISCyrillicExtendedA}', "");
Expect(0, 11743, '\P{^ 	ISCyrillicExtendedA}', "");
Error('\p{-	In CyrillicEXTENDED A/a/}');
Error('\P{-	In CyrillicEXTENDED A/a/}');
Expect(1, 11775, '\p{incyrillicextendeda}', "");
Expect(0, 11775, '\p{^incyrillicextendeda}', "");
Expect(0, 11775, '\P{incyrillicextendeda}', "");
Expect(1, 11775, '\P{^incyrillicextendeda}', "");
Expect(0, 11743, '\p{incyrillicextendeda}', "");
Expect(1, 11743, '\p{^incyrillicextendeda}', "");
Expect(1, 11743, '\P{incyrillicextendeda}', "");
Expect(0, 11743, '\P{^incyrillicextendeda}', "");
Expect(1, 11775, '\p{-_IN-CYRILLIC EXTENDED_A}', "");
Expect(0, 11775, '\p{^-_IN-CYRILLIC EXTENDED_A}', "");
Expect(0, 11775, '\P{-_IN-CYRILLIC EXTENDED_A}', "");
Expect(1, 11775, '\P{^-_IN-CYRILLIC EXTENDED_A}', "");
Expect(0, 11743, '\p{-_IN-CYRILLIC EXTENDED_A}', "");
Expect(1, 11743, '\p{^-_IN-CYRILLIC EXTENDED_A}', "");
Expect(1, 11743, '\P{-_IN-CYRILLIC EXTENDED_A}', "");
Expect(0, 11743, '\P{^-_IN-CYRILLIC EXTENDED_A}', "");
Error('\p{/a/	 PosixLower}');
Error('\P{/a/	 PosixLower}');
Expect(1, 122, '\p{posixlower}', "");
Expect(0, 122, '\p{^posixlower}', "");
Expect(0, 122, '\P{posixlower}', "");
Expect(1, 122, '\P{^posixlower}', "");
Expect(0, 96, '\p{posixlower}', "");
Expect(1, 96, '\p{^posixlower}', "");
Expect(1, 96, '\P{posixlower}', "");
Expect(0, 96, '\P{^posixlower}', "");
Expect(1, 122, '\p{-	PosixLower}', "");
Expect(0, 122, '\p{^-	PosixLower}', "");
Expect(0, 122, '\P{-	PosixLower}', "");
Expect(1, 122, '\P{^-	PosixLower}', "");
Expect(0, 96, '\p{-	PosixLower}', "");
Expect(1, 96, '\p{^-	PosixLower}', "");
Expect(1, 96, '\P{-	PosixLower}', "");
Expect(0, 96, '\P{^-	PosixLower}', "");
Error('\p{ /a/Is-posixlower}');
Error('\P{ /a/Is-posixlower}');
Expect(1, 122, '\p{isposixlower}', "");
Expect(0, 122, '\p{^isposixlower}', "");
Expect(0, 122, '\P{isposixlower}', "");
Expect(1, 122, '\P{^isposixlower}', "");
Expect(0, 96, '\p{isposixlower}', "");
Expect(1, 96, '\p{^isposixlower}', "");
Expect(1, 96, '\P{isposixlower}', "");
Expect(0, 96, '\P{^isposixlower}', "");
Expect(1, 122, '\p{_-isposixlower}', "");
Expect(0, 122, '\p{^_-isposixlower}', "");
Expect(0, 122, '\P{_-isposixlower}', "");
Expect(1, 122, '\P{^_-isposixlower}', "");
Expect(0, 96, '\p{_-isposixlower}', "");
Expect(1, 96, '\p{^_-isposixlower}', "");
Expect(1, 96, '\P{_-isposixlower}', "");
Expect(0, 96, '\P{^_-isposixlower}', "");
Error('\p{__Other	Grapheme/a/Extend}');
Error('\P{__Other	Grapheme/a/Extend}');
Expect(1, 2494, '\p{othergraphemeextend}', 'deprecated');
Expect(0, 2494, '\p{^othergraphemeextend}', 'deprecated');
Expect(0, 2494, '\P{othergraphemeextend}', 'deprecated');
Expect(1, 2494, '\P{^othergraphemeextend}', 'deprecated');
Expect(0, 2493, '\p{othergraphemeextend}', 'deprecated');
Expect(1, 2493, '\p{^othergraphemeextend}', 'deprecated');
Expect(1, 2493, '\P{othergraphemeextend}', 'deprecated');
Expect(0, 2493, '\P{^othergraphemeextend}', 'deprecated');
Expect(1, 2494, '\p{_Other_Grapheme	EXTEND}', 'deprecated');
Expect(0, 2494, '\p{^_Other_Grapheme	EXTEND}', 'deprecated');
Expect(0, 2494, '\P{_Other_Grapheme	EXTEND}', 'deprecated');
Expect(1, 2494, '\P{^_Other_Grapheme	EXTEND}', 'deprecated');
Expect(0, 2493, '\p{_Other_Grapheme	EXTEND}', 'deprecated');
Expect(1, 2493, '\p{^_Other_Grapheme	EXTEND}', 'deprecated');
Expect(1, 2493, '\P{_Other_Grapheme	EXTEND}', 'deprecated');
Expect(0, 2493, '\P{^_Other_Grapheme	EXTEND}', 'deprecated');
Error('\p{/a/IS Other GRAPHEME	Extend}');
Error('\P{/a/IS Other GRAPHEME	Extend}');
Expect(1, 2494, '\p{isothergraphemeextend}', 'deprecated');
Expect(0, 2494, '\p{^isothergraphemeextend}', 'deprecated');
Expect(0, 2494, '\P{isothergraphemeextend}', 'deprecated');
Expect(1, 2494, '\P{^isothergraphemeextend}', 'deprecated');
Expect(0, 2493, '\p{isothergraphemeextend}', 'deprecated');
Expect(1, 2493, '\p{^isothergraphemeextend}', 'deprecated');
Expect(1, 2493, '\P{isothergraphemeextend}', 'deprecated');
Expect(0, 2493, '\P{^isothergraphemeextend}', 'deprecated');
Expect(1, 2494, '\p{ is_otherGRAPHEME EXTEND}', 'deprecated');
Expect(0, 2494, '\p{^ is_otherGRAPHEME EXTEND}', 'deprecated');
Expect(0, 2494, '\P{ is_otherGRAPHEME EXTEND}', 'deprecated');
Expect(1, 2494, '\P{^ is_otherGRAPHEME EXTEND}', 'deprecated');
Expect(0, 2493, '\p{ is_otherGRAPHEME EXTEND}', 'deprecated');
Expect(1, 2493, '\p{^ is_otherGRAPHEME EXTEND}', 'deprecated');
Expect(1, 2493, '\P{ is_otherGRAPHEME EXTEND}', 'deprecated');
Expect(0, 2493, '\P{^ is_otherGRAPHEME EXTEND}', 'deprecated');
Error('\p{-:=OGrext}');
Error('\P{-:=OGrext}');
Expect(1, 2494, '\p{ogrext}', 'deprecated');
Expect(0, 2494, '\p{^ogrext}', 'deprecated');
Expect(0, 2494, '\P{ogrext}', 'deprecated');
Expect(1, 2494, '\P{^ogrext}', 'deprecated');
Expect(0, 2493, '\p{ogrext}', 'deprecated');
Expect(1, 2493, '\p{^ogrext}', 'deprecated');
Expect(1, 2493, '\P{ogrext}', 'deprecated');
Expect(0, 2493, '\P{^ogrext}', 'deprecated');
Expect(1, 2494, '\p{ OGr-Ext}', 'deprecated');
Expect(0, 2494, '\p{^ OGr-Ext}', 'deprecated');
Expect(0, 2494, '\P{ OGr-Ext}', 'deprecated');
Expect(1, 2494, '\P{^ OGr-Ext}', 'deprecated');
Expect(0, 2493, '\p{ OGr-Ext}', 'deprecated');
Expect(1, 2493, '\p{^ OGr-Ext}', 'deprecated');
Expect(1, 2493, '\P{ OGr-Ext}', 'deprecated');
Expect(0, 2493, '\P{^ OGr-Ext}', 'deprecated');
Error('\p{--is:=OGr_Ext}');
Error('\P{--is:=OGr_Ext}');
Expect(1, 2494, '\p{isogrext}', 'deprecated');
Expect(0, 2494, '\p{^isogrext}', 'deprecated');
Expect(0, 2494, '\P{isogrext}', 'deprecated');
Expect(1, 2494, '\P{^isogrext}', 'deprecated');
Expect(0, 2493, '\p{isogrext}', 'deprecated');
Expect(1, 2493, '\p{^isogrext}', 'deprecated');
Expect(1, 2493, '\P{isogrext}', 'deprecated');
Expect(0, 2493, '\P{^isogrext}', 'deprecated');
Expect(1, 2494, '\p{	is	OGr-ext}', 'deprecated');
Expect(0, 2494, '\p{^	is	OGr-ext}', 'deprecated');
Expect(0, 2494, '\P{	is	OGr-ext}', 'deprecated');
Expect(1, 2494, '\P{^	is	OGr-ext}', 'deprecated');
Expect(0, 2493, '\p{	is	OGr-ext}', 'deprecated');
Expect(1, 2493, '\p{^	is	OGr-ext}', 'deprecated');
Expect(1, 2493, '\P{	is	OGr-ext}', 'deprecated');
Expect(0, 2493, '\P{^	is	OGr-ext}', 'deprecated');
Error('\p{	Oldpersian:=}');
Error('\P{	Oldpersian:=}');
Expect(1, 66499, '\p{oldpersian}', "");
Expect(0, 66499, '\p{^oldpersian}', "");
Expect(0, 66499, '\P{oldpersian}', "");
Expect(1, 66499, '\P{^oldpersian}', "");
Expect(0, 66463, '\p{oldpersian}', "");
Expect(1, 66463, '\p{^oldpersian}', "");
Expect(1, 66463, '\P{oldpersian}', "");
Expect(0, 66463, '\P{^oldpersian}', "");
Expect(1, 66499, '\p{	 Old-Persian}', "");
Expect(0, 66499, '\p{^	 Old-Persian}', "");
Expect(0, 66499, '\P{	 Old-Persian}', "");
Expect(1, 66499, '\P{^	 Old-Persian}', "");
Expect(0, 66463, '\p{	 Old-Persian}', "");
Expect(1, 66463, '\p{^	 Old-Persian}', "");
Expect(1, 66463, '\P{	 Old-Persian}', "");
Expect(0, 66463, '\P{^	 Old-Persian}', "");
Error('\p{-/a/isOLDPersian}');
Error('\P{-/a/isOLDPersian}');
Expect(1, 66499, '\p{isoldpersian}', "");
Expect(0, 66499, '\p{^isoldpersian}', "");
Expect(0, 66499, '\P{isoldpersian}', "");
Expect(1, 66499, '\P{^isoldpersian}', "");
Expect(0, 66463, '\p{isoldpersian}', "");
Expect(1, 66463, '\p{^isoldpersian}', "");
Expect(1, 66463, '\P{isoldpersian}', "");
Expect(0, 66463, '\P{^isoldpersian}', "");
Expect(1, 66499, '\p{ Is	Old PERSIAN}', "");
Expect(0, 66499, '\p{^ Is	Old PERSIAN}', "");
Expect(0, 66499, '\P{ Is	Old PERSIAN}', "");
Expect(1, 66499, '\P{^ Is	Old PERSIAN}', "");
Expect(0, 66463, '\p{ Is	Old PERSIAN}', "");
Expect(1, 66463, '\p{^ Is	Old PERSIAN}', "");
Expect(1, 66463, '\P{ Is	Old PERSIAN}', "");
Expect(0, 66463, '\P{^ Is	Old PERSIAN}', "");
Error('\p{/a/	_Xpeo}');
Error('\P{/a/	_Xpeo}');
Expect(1, 66499, '\p{xpeo}', "");
Expect(0, 66499, '\p{^xpeo}', "");
Expect(0, 66499, '\P{xpeo}', "");
Expect(1, 66499, '\P{^xpeo}', "");
Expect(0, 66463, '\p{xpeo}', "");
Expect(1, 66463, '\p{^xpeo}', "");
Expect(1, 66463, '\P{xpeo}', "");
Expect(0, 66463, '\P{^xpeo}', "");
Expect(1, 66499, '\p{	-xpeo}', "");
Expect(0, 66499, '\p{^	-xpeo}', "");
Expect(0, 66499, '\P{	-xpeo}', "");
Expect(1, 66499, '\P{^	-xpeo}', "");
Expect(0, 66463, '\p{	-xpeo}', "");
Expect(1, 66463, '\p{^	-xpeo}', "");
Expect(1, 66463, '\P{	-xpeo}', "");
Expect(0, 66463, '\P{^	-xpeo}', "");
Error('\p{	-is_Xpeo:=}');
Error('\P{	-is_Xpeo:=}');
Expect(1, 66499, '\p{isxpeo}', "");
Expect(0, 66499, '\p{^isxpeo}', "");
Expect(0, 66499, '\P{isxpeo}', "");
Expect(1, 66499, '\P{^isxpeo}', "");
Expect(0, 66463, '\p{isxpeo}', "");
Expect(1, 66463, '\p{^isxpeo}', "");
Expect(1, 66463, '\P{isxpeo}', "");
Expect(0, 66463, '\P{^isxpeo}', "");
Expect(1, 66499, '\p{Is-XPEO}', "");
Expect(0, 66499, '\p{^Is-XPEO}', "");
Expect(0, 66499, '\P{Is-XPEO}', "");
Expect(1, 66499, '\P{^Is-XPEO}', "");
Expect(0, 66463, '\p{Is-XPEO}', "");
Expect(1, 66463, '\p{^Is-XPEO}', "");
Expect(1, 66463, '\P{Is-XPEO}', "");
Expect(0, 66463, '\P{^Is-XPEO}', "");
Error('\p{ /a/NewtaiLue}');
Error('\P{ /a/NewtaiLue}');
Expect(1, 6571, '\p{newtailue}', "");
Expect(0, 6571, '\p{^newtailue}', "");
Expect(0, 6571, '\P{newtailue}', "");
Expect(1, 6571, '\P{^newtailue}', "");
Expect(0, 6527, '\p{newtailue}', "");
Expect(1, 6527, '\p{^newtailue}', "");
Expect(1, 6527, '\P{newtailue}', "");
Expect(0, 6527, '\P{^newtailue}', "");
Expect(1, 6571, '\p{-New_tai_lue}', "");
Expect(0, 6571, '\p{^-New_tai_lue}', "");
Expect(0, 6571, '\P{-New_tai_lue}', "");
Expect(1, 6571, '\P{^-New_tai_lue}', "");
Expect(0, 6527, '\p{-New_tai_lue}', "");
Expect(1, 6527, '\p{^-New_tai_lue}', "");
Expect(1, 6527, '\P{-New_tai_lue}', "");
Expect(0, 6527, '\P{^-New_tai_lue}', "");
Error('\p{_ IsNewtai/a/Lue}');
Error('\P{_ IsNewtai/a/Lue}');
Expect(1, 6571, '\p{isnewtailue}', "");
Expect(0, 6571, '\p{^isnewtailue}', "");
Expect(0, 6571, '\P{isnewtailue}', "");
Expect(1, 6571, '\P{^isnewtailue}', "");
Expect(0, 6527, '\p{isnewtailue}', "");
Expect(1, 6527, '\p{^isnewtailue}', "");
Expect(1, 6527, '\P{isnewtailue}', "");
Expect(0, 6527, '\P{^isnewtailue}', "");
Expect(1, 6571, '\p{	Is-NEW_TAI Lue}', "");
Expect(0, 6571, '\p{^	Is-NEW_TAI Lue}', "");
Expect(0, 6571, '\P{	Is-NEW_TAI Lue}', "");
Expect(1, 6571, '\P{^	Is-NEW_TAI Lue}', "");
Expect(0, 6527, '\p{	Is-NEW_TAI Lue}', "");
Expect(1, 6527, '\p{^	Is-NEW_TAI Lue}', "");
Expect(1, 6527, '\P{	Is-NEW_TAI Lue}', "");
Expect(0, 6527, '\P{^	Is-NEW_TAI Lue}', "");
Error('\p{_/a/Talu}');
Error('\P{_/a/Talu}');
Expect(1, 6571, '\p{talu}', "");
Expect(0, 6571, '\p{^talu}', "");
Expect(0, 6571, '\P{talu}', "");
Expect(1, 6571, '\P{^talu}', "");
Expect(0, 6527, '\p{talu}', "");
Expect(1, 6527, '\p{^talu}', "");
Expect(1, 6527, '\P{talu}', "");
Expect(0, 6527, '\P{^talu}', "");
Expect(1, 6571, '\p{_	talu}', "");
Expect(0, 6571, '\p{^_	talu}', "");
Expect(0, 6571, '\P{_	talu}', "");
Expect(1, 6571, '\P{^_	talu}', "");
Expect(0, 6527, '\p{_	talu}', "");
Expect(1, 6527, '\p{^_	talu}', "");
Expect(1, 6527, '\P{_	talu}', "");
Expect(0, 6527, '\P{^_	talu}', "");
Error('\p{/a/ Is_Talu}');
Error('\P{/a/ Is_Talu}');
Expect(1, 6571, '\p{istalu}', "");
Expect(0, 6571, '\p{^istalu}', "");
Expect(0, 6571, '\P{istalu}', "");
Expect(1, 6571, '\P{^istalu}', "");
Expect(0, 6527, '\p{istalu}', "");
Expect(1, 6527, '\p{^istalu}', "");
Expect(1, 6527, '\P{istalu}', "");
Expect(0, 6527, '\P{^istalu}', "");
Expect(1, 6571, '\p{	Is	Talu}', "");
Expect(0, 6571, '\p{^	Is	Talu}', "");
Expect(0, 6571, '\P{	Is	Talu}', "");
Expect(1, 6571, '\P{^	Is	Talu}', "");
Expect(0, 6527, '\p{	Is	Talu}', "");
Expect(1, 6527, '\p{^	Is	Talu}', "");
Expect(1, 6527, '\P{	Is	Talu}', "");
Expect(0, 6527, '\P{^	Is	Talu}', "");
Error('\p{:= unassigned}');
Error('\P{:= unassigned}');
Expect(1, 889, '\p{unassigned}', "");
Expect(0, 889, '\p{^unassigned}', "");
Expect(0, 889, '\P{unassigned}', "");
Expect(1, 889, '\P{^unassigned}', "");
Expect(0, 887, '\p{unassigned}', "");
Expect(1, 887, '\p{^unassigned}', "");
Expect(1, 887, '\P{unassigned}', "");
Expect(0, 887, '\P{^unassigned}', "");
Expect(1, 889, '\p{-unassigned}', "");
Expect(0, 889, '\p{^-unassigned}', "");
Expect(0, 889, '\P{-unassigned}', "");
Expect(1, 889, '\P{^-unassigned}', "");
Expect(0, 887, '\p{-unassigned}', "");
Expect(1, 887, '\p{^-unassigned}', "");
Expect(1, 887, '\P{-unassigned}', "");
Expect(0, 887, '\P{^-unassigned}', "");
Error('\p{	-is:=unassigned}');
Error('\P{	-is:=unassigned}');
Expect(1, 889, '\p{isunassigned}', "");
Expect(0, 889, '\p{^isunassigned}', "");
Expect(0, 889, '\P{isunassigned}', "");
Expect(1, 889, '\P{^isunassigned}', "");
Expect(0, 887, '\p{isunassigned}', "");
Expect(1, 887, '\p{^isunassigned}', "");
Expect(1, 887, '\P{isunassigned}', "");
Expect(0, 887, '\P{^isunassigned}', "");
Expect(1, 889, '\p{		IsUNASSIGNED}', "");
Expect(0, 889, '\p{^		IsUNASSIGNED}', "");
Expect(0, 889, '\P{		IsUNASSIGNED}', "");
Expect(1, 889, '\P{^		IsUNASSIGNED}', "");
Expect(0, 887, '\p{		IsUNASSIGNED}', "");
Expect(1, 887, '\p{^		IsUNASSIGNED}', "");
Expect(1, 887, '\P{		IsUNASSIGNED}', "");
Expect(0, 887, '\P{^		IsUNASSIGNED}', "");
Error('\p{	CN:=}');
Error('\P{	CN:=}');
Expect(1, 889, '\p{cn}', "");
Expect(0, 889, '\p{^cn}', "");
Expect(0, 889, '\P{cn}', "");
Expect(1, 889, '\P{^cn}', "");
Expect(0, 887, '\p{cn}', "");
Expect(1, 887, '\p{^cn}', "");
Expect(1, 887, '\P{cn}', "");
Expect(0, 887, '\P{^cn}', "");
Expect(1, 889, '\p{-Cn}', "");
Expect(0, 889, '\p{^-Cn}', "");
Expect(0, 889, '\P{-Cn}', "");
Expect(1, 889, '\P{^-Cn}', "");
Expect(0, 887, '\p{-Cn}', "");
Expect(1, 887, '\p{^-Cn}', "");
Expect(1, 887, '\P{-Cn}', "");
Expect(0, 887, '\P{^-Cn}', "");
Error('\p{ is/a/Cn}');
Error('\P{ is/a/Cn}');
Expect(1, 889, '\p{iscn}', "");
Expect(0, 889, '\p{^iscn}', "");
Expect(0, 889, '\P{iscn}', "");
Expect(1, 889, '\P{^iscn}', "");
Expect(0, 887, '\p{iscn}', "");
Expect(1, 887, '\p{^iscn}', "");
Expect(1, 887, '\P{iscn}', "");
Expect(0, 887, '\P{^iscn}', "");
Expect(1, 889, '\p{ IS CN}', "");
Expect(0, 889, '\p{^ IS CN}', "");
Expect(0, 889, '\P{ IS CN}', "");
Expect(1, 889, '\P{^ IS CN}', "");
Expect(0, 887, '\p{ IS CN}', "");
Expect(1, 887, '\p{^ IS CN}', "");
Expect(1, 887, '\P{ IS CN}', "");
Expect(0, 887, '\P{^ IS CN}', "");
Error('\p{_Lepcha:=}');
Error('\P{_Lepcha:=}');
Expect(1, 7223, '\p{lepcha}', "");
Expect(0, 7223, '\p{^lepcha}', "");
Expect(0, 7223, '\P{lepcha}', "");
Expect(1, 7223, '\P{^lepcha}', "");
Expect(0, 7167, '\p{lepcha}', "");
Expect(1, 7167, '\p{^lepcha}', "");
Expect(1, 7167, '\P{lepcha}', "");
Expect(0, 7167, '\P{^lepcha}', "");
Expect(1, 7223, '\p{-Lepcha}', "");
Expect(0, 7223, '\p{^-Lepcha}', "");
Expect(0, 7223, '\P{-Lepcha}', "");
Expect(1, 7223, '\P{^-Lepcha}', "");
Expect(0, 7167, '\p{-Lepcha}', "");
Expect(1, 7167, '\p{^-Lepcha}', "");
Expect(1, 7167, '\P{-Lepcha}', "");
Expect(0, 7167, '\P{^-Lepcha}', "");
Error('\p{/a/  Is Lepcha}');
Error('\P{/a/  Is Lepcha}');
Expect(1, 7223, '\p{islepcha}', "");
Expect(0, 7223, '\p{^islepcha}', "");
Expect(0, 7223, '\P{islepcha}', "");
Expect(1, 7223, '\P{^islepcha}', "");
Expect(0, 7167, '\p{islepcha}', "");
Expect(1, 7167, '\p{^islepcha}', "");
Expect(1, 7167, '\P{islepcha}', "");
Expect(0, 7167, '\P{^islepcha}', "");
Expect(1, 7223, '\p{ _is	lepcha}', "");
Expect(0, 7223, '\p{^ _is	lepcha}', "");
Expect(0, 7223, '\P{ _is	lepcha}', "");
Expect(1, 7223, '\P{^ _is	lepcha}', "");
Expect(0, 7167, '\p{ _is	lepcha}', "");
Expect(1, 7167, '\p{^ _is	lepcha}', "");
Expect(1, 7167, '\P{ _is	lepcha}', "");
Expect(0, 7167, '\P{^ _is	lepcha}', "");
Error('\p{:=_lepc}');
Error('\P{:=_lepc}');
Expect(1, 7223, '\p{lepc}', "");
Expect(0, 7223, '\p{^lepc}', "");
Expect(0, 7223, '\P{lepc}', "");
Expect(1, 7223, '\P{^lepc}', "");
Expect(0, 7167, '\p{lepc}', "");
Expect(1, 7167, '\p{^lepc}', "");
Expect(1, 7167, '\P{lepc}', "");
Expect(0, 7167, '\P{^lepc}', "");
Expect(1, 7223, '\p{ LEPC}', "");
Expect(0, 7223, '\p{^ LEPC}', "");
Expect(0, 7223, '\P{ LEPC}', "");
Expect(1, 7223, '\P{^ LEPC}', "");
Expect(0, 7167, '\p{ LEPC}', "");
Expect(1, 7167, '\p{^ LEPC}', "");
Expect(1, 7167, '\P{ LEPC}', "");
Expect(0, 7167, '\P{^ LEPC}', "");
Error('\p{  is_Lepc:=}');
Error('\P{  is_Lepc:=}');
Expect(1, 7223, '\p{islepc}', "");
Expect(0, 7223, '\p{^islepc}', "");
Expect(0, 7223, '\P{islepc}', "");
Expect(1, 7223, '\P{^islepc}', "");
Expect(0, 7167, '\p{islepc}', "");
Expect(1, 7167, '\p{^islepc}', "");
Expect(1, 7167, '\P{islepc}', "");
Expect(0, 7167, '\P{^islepc}', "");
Expect(1, 7223, '\p{_	Is_Lepc}', "");
Expect(0, 7223, '\p{^_	Is_Lepc}', "");
Expect(0, 7223, '\P{_	Is_Lepc}', "");
Expect(1, 7223, '\P{^_	Is_Lepc}', "");
Expect(0, 7167, '\p{_	Is_Lepc}', "");
Expect(1, 7167, '\p{^_	Is_Lepc}', "");
Expect(1, 7167, '\P{_	Is_Lepc}', "");
Expect(0, 7167, '\P{^_	Is_Lepc}', "");
Error('\p{	_ideographic	Description_CHARACTERS/a/}');
Error('\P{	_ideographic	Description_CHARACTERS/a/}');
Expect(1, 12287, '\p{ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^ideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^ideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{ideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^ideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{	-IDEOGRAPHIC	description Characters}', "");
Expect(0, 12287, '\p{^	-IDEOGRAPHIC	description Characters}', "");
Expect(0, 12287, '\P{	-IDEOGRAPHIC	description Characters}', "");
Expect(1, 12287, '\P{^	-IDEOGRAPHIC	description Characters}', "");
Expect(0, 12271, '\p{	-IDEOGRAPHIC	description Characters}', "");
Expect(1, 12271, '\p{^	-IDEOGRAPHIC	description Characters}', "");
Expect(1, 12271, '\P{	-IDEOGRAPHIC	description Characters}', "");
Expect(0, 12271, '\P{^	-IDEOGRAPHIC	description Characters}', "");
Error('\p{_	Is	Ideographic/a/description_Characters}');
Error('\P{_	Is	Ideographic/a/description_Characters}');
Expect(1, 12287, '\p{isideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^isideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{isideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^isideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{isideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^isideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{isideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^isideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{	_is Ideographicdescription-CHARACTERS}', "");
Expect(0, 12287, '\p{^	_is Ideographicdescription-CHARACTERS}', "");
Expect(0, 12287, '\P{	_is Ideographicdescription-CHARACTERS}', "");
Expect(1, 12287, '\P{^	_is Ideographicdescription-CHARACTERS}', "");
Expect(0, 12271, '\p{	_is Ideographicdescription-CHARACTERS}', "");
Expect(1, 12271, '\p{^	_is Ideographicdescription-CHARACTERS}', "");
Expect(1, 12271, '\P{	_is Ideographicdescription-CHARACTERS}', "");
Expect(0, 12271, '\P{^	_is Ideographicdescription-CHARACTERS}', "");
Error('\p{-	In_Ideographic description	Characters/a/}');
Error('\P{-	In_Ideographic description	Characters/a/}');
Expect(1, 12287, '\p{inideographicdescriptioncharacters}', "");
Expect(0, 12287, '\p{^inideographicdescriptioncharacters}', "");
Expect(0, 12287, '\P{inideographicdescriptioncharacters}', "");
Expect(1, 12287, '\P{^inideographicdescriptioncharacters}', "");
Expect(0, 12271, '\p{inideographicdescriptioncharacters}', "");
Expect(1, 12271, '\p{^inideographicdescriptioncharacters}', "");
Expect(1, 12271, '\P{inideographicdescriptioncharacters}', "");
Expect(0, 12271, '\P{^inideographicdescriptioncharacters}', "");
Expect(1, 12287, '\p{-	In Ideographic	DESCRIPTION	characters}', "");
Expect(0, 12287, '\p{^-	In Ideographic	DESCRIPTION	characters}', "");
Expect(0, 12287, '\P{-	In Ideographic	DESCRIPTION	characters}', "");
Expect(1, 12287, '\P{^-	In Ideographic	DESCRIPTION	characters}', "");
Expect(0, 12271, '\p{-	In Ideographic	DESCRIPTION	characters}', "");
Expect(1, 12271, '\p{^-	In Ideographic	DESCRIPTION	characters}', "");
Expect(1, 12271, '\P{-	In Ideographic	DESCRIPTION	characters}', "");
Expect(0, 12271, '\P{^-	In Ideographic	DESCRIPTION	characters}', "");
Error('\p{:=-_Combininghalf-marks}');
Error('\P{:=-_Combininghalf-marks}');
Expect(1, 65071, '\p{combininghalfmarks}', "");
Expect(0, 65071, '\p{^combininghalfmarks}', "");
Expect(0, 65071, '\P{combininghalfmarks}', "");
Expect(1, 65071, '\P{^combininghalfmarks}', "");
Expect(0, 65055, '\p{combininghalfmarks}', "");
Expect(1, 65055, '\p{^combininghalfmarks}', "");
Expect(1, 65055, '\P{combininghalfmarks}', "");
Expect(0, 65055, '\P{^combininghalfmarks}', "");
Expect(1, 65071, '\p{ -Combining_Half_Marks}', "");
Expect(0, 65071, '\p{^ -Combining_Half_Marks}', "");
Expect(0, 65071, '\P{ -Combining_Half_Marks}', "");
Expect(1, 65071, '\P{^ -Combining_Half_Marks}', "");
Expect(0, 65055, '\p{ -Combining_Half_Marks}', "");
Expect(1, 65055, '\p{^ -Combining_Half_Marks}', "");
Expect(1, 65055, '\P{ -Combining_Half_Marks}', "");
Expect(0, 65055, '\P{^ -Combining_Half_Marks}', "");
Error('\p{-	Is-Combining:=Half-marks}');
Error('\P{-	Is-Combining:=Half-marks}');
Expect(1, 65071, '\p{iscombininghalfmarks}', "");
Expect(0, 65071, '\p{^iscombininghalfmarks}', "");
Expect(0, 65071, '\P{iscombininghalfmarks}', "");
Expect(1, 65071, '\P{^iscombininghalfmarks}', "");
Expect(0, 65055, '\p{iscombininghalfmarks}', "");
Expect(1, 65055, '\p{^iscombininghalfmarks}', "");
Expect(1, 65055, '\P{iscombininghalfmarks}', "");
Expect(0, 65055, '\P{^iscombininghalfmarks}', "");
Expect(1, 65071, '\p{	_is-COMBINING_half-Marks}', "");
Expect(0, 65071, '\p{^	_is-COMBINING_half-Marks}', "");
Expect(0, 65071, '\P{	_is-COMBINING_half-Marks}', "");
Expect(1, 65071, '\P{^	_is-COMBINING_half-Marks}', "");
Expect(0, 65055, '\p{	_is-COMBINING_half-Marks}', "");
Expect(1, 65055, '\p{^	_is-COMBINING_half-Marks}', "");
Expect(1, 65055, '\P{	_is-COMBINING_half-Marks}', "");
Expect(0, 65055, '\P{^	_is-COMBINING_half-Marks}', "");
Error('\p{:=  In_COMBINING HALFmarks}');
Error('\P{:=  In_COMBINING HALFmarks}');
Expect(1, 65071, '\p{incombininghalfmarks}', "");
Expect(0, 65071, '\p{^incombininghalfmarks}', "");
Expect(0, 65071, '\P{incombininghalfmarks}', "");
Expect(1, 65071, '\P{^incombininghalfmarks}', "");
Expect(0, 65055, '\p{incombininghalfmarks}', "");
Expect(1, 65055, '\p{^incombininghalfmarks}', "");
Expect(1, 65055, '\P{incombininghalfmarks}', "");
Expect(0, 65055, '\P{^incombininghalfmarks}', "");
Expect(1, 65071, '\p{	INCOMBINING	HALF_Marks}', "");
Expect(0, 65071, '\p{^	INCOMBINING	HALF_Marks}', "");
Expect(0, 65071, '\P{	INCOMBINING	HALF_Marks}', "");
Expect(1, 65071, '\P{^	INCOMBINING	HALF_Marks}', "");
Expect(0, 65055, '\p{	INCOMBINING	HALF_Marks}', "");
Expect(1, 65055, '\p{^	INCOMBINING	HALF_Marks}', "");
Expect(1, 65055, '\P{	INCOMBINING	HALF_Marks}', "");
Expect(0, 65055, '\P{^	INCOMBINING	HALF_Marks}', "");
Error('\p{:=	-ORIYA}');
Error('\P{:=	-ORIYA}');
Expect(1, 2819, '\p{oriya}', "");
Expect(0, 2819, '\p{^oriya}', "");
Expect(0, 2819, '\P{oriya}', "");
Expect(1, 2819, '\P{^oriya}', "");
Expect(0, 2816, '\p{oriya}', "");
Expect(1, 2816, '\p{^oriya}', "");
Expect(1, 2816, '\P{oriya}', "");
Expect(0, 2816, '\P{^oriya}', "");
Expect(1, 2819, '\p{-Oriya}', "");
Expect(0, 2819, '\p{^-Oriya}', "");
Expect(0, 2819, '\P{-Oriya}', "");
Expect(1, 2819, '\P{^-Oriya}', "");
Expect(0, 2816, '\p{-Oriya}', "");
Expect(1, 2816, '\p{^-Oriya}', "");
Expect(1, 2816, '\P{-Oriya}', "");
Expect(0, 2816, '\P{^-Oriya}', "");
Error('\p{-:=Is_Oriya}');
Error('\P{-:=Is_Oriya}');
Expect(1, 2819, '\p{isoriya}', "");
Expect(0, 2819, '\p{^isoriya}', "");
Expect(0, 2819, '\P{isoriya}', "");
Expect(1, 2819, '\P{^isoriya}', "");
Expect(0, 2816, '\p{isoriya}', "");
Expect(1, 2816, '\p{^isoriya}', "");
Expect(1, 2816, '\P{isoriya}', "");
Expect(0, 2816, '\P{^isoriya}', "");
Expect(1, 2819, '\p{  IsORIYA}', "");
Expect(0, 2819, '\p{^  IsORIYA}', "");
Expect(0, 2819, '\P{  IsORIYA}', "");
Expect(1, 2819, '\P{^  IsORIYA}', "");
Expect(0, 2816, '\p{  IsORIYA}', "");
Expect(1, 2816, '\p{^  IsORIYA}', "");
Expect(1, 2816, '\P{  IsORIYA}', "");
Expect(0, 2816, '\P{^  IsORIYA}', "");
Error('\p{:= 	Orya}');
Error('\P{:= 	Orya}');
Expect(1, 2819, '\p{orya}', "");
Expect(0, 2819, '\p{^orya}', "");
Expect(0, 2819, '\P{orya}', "");
Expect(1, 2819, '\P{^orya}', "");
Expect(0, 2816, '\p{orya}', "");
Expect(1, 2816, '\p{^orya}', "");
Expect(1, 2816, '\P{orya}', "");
Expect(0, 2816, '\P{^orya}', "");
Expect(1, 2819, '\p{		orya}', "");
Expect(0, 2819, '\p{^		orya}', "");
Expect(0, 2819, '\P{		orya}', "");
Expect(1, 2819, '\P{^		orya}', "");
Expect(0, 2816, '\p{		orya}', "");
Expect(1, 2816, '\p{^		orya}', "");
Expect(1, 2816, '\P{		orya}', "");
Expect(0, 2816, '\P{^		orya}', "");
Error('\p{:=	 ISorya}');
Error('\P{:=	 ISorya}');
Expect(1, 2819, '\p{isorya}', "");
Expect(0, 2819, '\p{^isorya}', "");
Expect(0, 2819, '\P{isorya}', "");
Expect(1, 2819, '\P{^isorya}', "");
Expect(0, 2816, '\p{isorya}', "");
Expect(1, 2816, '\p{^isorya}', "");
Expect(1, 2816, '\P{isorya}', "");
Expect(0, 2816, '\P{^isorya}', "");
Expect(1, 2819, '\p{	 Is Orya}', "");
Expect(0, 2819, '\p{^	 Is Orya}', "");
Expect(0, 2819, '\P{	 Is Orya}', "");
Expect(1, 2819, '\P{^	 Is Orya}', "");
Expect(0, 2816, '\p{	 Is Orya}', "");
Expect(1, 2816, '\p{^	 Is Orya}', "");
Expect(1, 2816, '\P{	 Is Orya}', "");
Expect(0, 2816, '\P{^	 Is Orya}', "");
Error('\p{ 	Phonetic_Extensions:=}');
Error('\P{ 	Phonetic_Extensions:=}');
Expect(1, 7551, '\p{phoneticextensions}', "");
Expect(0, 7551, '\p{^phoneticextensions}', "");
Expect(0, 7551, '\P{phoneticextensions}', "");
Expect(1, 7551, '\P{^phoneticextensions}', "");
Expect(0, 7423, '\p{phoneticextensions}', "");
Expect(1, 7423, '\p{^phoneticextensions}', "");
Expect(1, 7423, '\P{phoneticextensions}', "");
Expect(0, 7423, '\P{^phoneticextensions}', "");
Expect(1, 7551, '\p{ 	Phonetic	Extensions}', "");
Expect(0, 7551, '\p{^ 	Phonetic	Extensions}', "");
Expect(0, 7551, '\P{ 	Phonetic	Extensions}', "");
Expect(1, 7551, '\P{^ 	Phonetic	Extensions}', "");
Expect(0, 7423, '\p{ 	Phonetic	Extensions}', "");
Expect(1, 7423, '\p{^ 	Phonetic	Extensions}', "");
Expect(1, 7423, '\P{ 	Phonetic	Extensions}', "");
Expect(0, 7423, '\P{^ 	Phonetic	Extensions}', "");
Error('\p{ /a/IS	Phonetic_Extensions}');
Error('\P{ /a/IS	Phonetic_Extensions}');
Expect(1, 7551, '\p{isphoneticextensions}', "");
Expect(0, 7551, '\p{^isphoneticextensions}', "");
Expect(0, 7551, '\P{isphoneticextensions}', "");
Expect(1, 7551, '\P{^isphoneticextensions}', "");
Expect(0, 7423, '\p{isphoneticextensions}', "");
Expect(1, 7423, '\p{^isphoneticextensions}', "");
Expect(1, 7423, '\P{isphoneticextensions}', "");
Expect(0, 7423, '\P{^isphoneticextensions}', "");
Expect(1, 7551, '\p{	-Is	phonetic_Extensions}', "");
Expect(0, 7551, '\p{^	-Is	phonetic_Extensions}', "");
Expect(0, 7551, '\P{	-Is	phonetic_Extensions}', "");
Expect(1, 7551, '\P{^	-Is	phonetic_Extensions}', "");
Expect(0, 7423, '\p{	-Is	phonetic_Extensions}', "");
Expect(1, 7423, '\p{^	-Is	phonetic_Extensions}', "");
Expect(1, 7423, '\P{	-Is	phonetic_Extensions}', "");
Expect(0, 7423, '\P{^	-Is	phonetic_Extensions}', "");
Error('\p{	In PHONETIC Extensions/a/}');
Error('\P{	In PHONETIC Extensions/a/}');
Expect(1, 7551, '\p{inphoneticextensions}', "");
Expect(0, 7551, '\p{^inphoneticextensions}', "");
Expect(0, 7551, '\P{inphoneticextensions}', "");
Expect(1, 7551, '\P{^inphoneticextensions}', "");
Expect(0, 7423, '\p{inphoneticextensions}', "");
Expect(1, 7423, '\p{^inphoneticextensions}', "");
Expect(1, 7423, '\P{inphoneticextensions}', "");
Expect(0, 7423, '\P{^inphoneticextensions}', "");
Expect(1, 7551, '\p{	-InPhonetic	Extensions}', "");
Expect(0, 7551, '\p{^	-InPhonetic	Extensions}', "");
Expect(0, 7551, '\P{	-InPhonetic	Extensions}', "");
Expect(1, 7551, '\P{^	-InPhonetic	Extensions}', "");
Expect(0, 7423, '\p{	-InPhonetic	Extensions}', "");
Expect(1, 7423, '\p{^	-InPhonetic	Extensions}', "");
Expect(1, 7423, '\P{	-InPhonetic	Extensions}', "");
Expect(0, 7423, '\P{^	-InPhonetic	Extensions}', "");
Error('\p{:=	-Grapheme	extend}');
Error('\P{:=	-Grapheme	extend}');
Expect(1, 879, '\p{graphemeextend}', "");
Expect(0, 879, '\p{^graphemeextend}', "");
Expect(0, 879, '\P{graphemeextend}', "");
Expect(1, 879, '\P{^graphemeextend}', "");
Expect(0, 767, '\p{graphemeextend}', "");
Expect(1, 767, '\p{^graphemeextend}', "");
Expect(1, 767, '\P{graphemeextend}', "");
Expect(0, 767, '\P{^graphemeextend}', "");
Expect(1, 879, '\p{-	grapheme	Extend}', "");
Expect(0, 879, '\p{^-	grapheme	Extend}', "");
Expect(0, 879, '\P{-	grapheme	Extend}', "");
Expect(1, 879, '\P{^-	grapheme	Extend}', "");
Expect(0, 767, '\p{-	grapheme	Extend}', "");
Expect(1, 767, '\p{^-	grapheme	Extend}', "");
Expect(1, 767, '\P{-	grapheme	Extend}', "");
Expect(0, 767, '\P{^-	grapheme	Extend}', "");
Error('\p{	Is_GRAPHEME/a/extend}');
Error('\P{	Is_GRAPHEME/a/extend}');
Expect(1, 879, '\p{isgraphemeextend}', "");
Expect(0, 879, '\p{^isgraphemeextend}', "");
Expect(0, 879, '\P{isgraphemeextend}', "");
Expect(1, 879, '\P{^isgraphemeextend}', "");
Expect(0, 767, '\p{isgraphemeextend}', "");
Expect(1, 767, '\p{^isgraphemeextend}', "");
Expect(1, 767, '\P{isgraphemeextend}', "");
Expect(0, 767, '\P{^isgraphemeextend}', "");
Expect(1, 879, '\p{	IsGRAPHEMEExtend}', "");
Expect(0, 879, '\p{^	IsGRAPHEMEExtend}', "");
Expect(0, 879, '\P{	IsGRAPHEMEExtend}', "");
Expect(1, 879, '\P{^	IsGRAPHEMEExtend}', "");
Expect(0, 767, '\p{	IsGRAPHEMEExtend}', "");
Expect(1, 767, '\p{^	IsGRAPHEMEExtend}', "");
Expect(1, 767, '\P{	IsGRAPHEMEExtend}', "");
Expect(0, 767, '\P{^	IsGRAPHEMEExtend}', "");
Error('\p{_-Gr/a/Ext}');
Error('\P{_-Gr/a/Ext}');
Expect(1, 879, '\p{grext}', "");
Expect(0, 879, '\p{^grext}', "");
Expect(0, 879, '\P{grext}', "");
Expect(1, 879, '\P{^grext}', "");
Expect(0, 767, '\p{grext}', "");
Expect(1, 767, '\p{^grext}', "");
Expect(1, 767, '\P{grext}', "");
Expect(0, 767, '\P{^grext}', "");
Expect(1, 879, '\p{_Gr Ext}', "");
Expect(0, 879, '\p{^_Gr Ext}', "");
Expect(0, 879, '\P{_Gr Ext}', "");
Expect(1, 879, '\P{^_Gr Ext}', "");
Expect(0, 767, '\p{_Gr Ext}', "");
Expect(1, 767, '\p{^_Gr Ext}', "");
Expect(1, 767, '\P{_Gr Ext}', "");
Expect(0, 767, '\P{^_Gr Ext}', "");
Error('\p{-:=Is	gr Ext}');
Error('\P{-:=Is	gr Ext}');
Expect(1, 879, '\p{isgrext}', "");
Expect(0, 879, '\p{^isgrext}', "");
Expect(0, 879, '\P{isgrext}', "");
Expect(1, 879, '\P{^isgrext}', "");
Expect(0, 767, '\p{isgrext}', "");
Expect(1, 767, '\p{^isgrext}', "");
Expect(1, 767, '\P{isgrext}', "");
Expect(0, 767, '\P{^isgrext}', "");
Expect(1, 879, '\p{_IsGRExt}', "");
Expect(0, 879, '\p{^_IsGRExt}', "");
Expect(0, 879, '\P{_IsGRExt}', "");
Expect(1, 879, '\P{^_IsGRExt}', "");
Expect(0, 767, '\p{_IsGRExt}', "");
Expect(1, 767, '\p{^_IsGRExt}', "");
Expect(1, 767, '\P{_IsGRExt}', "");
Expect(0, 767, '\P{^_IsGRExt}', "");
Error('\p{ Default_IGNORABLE/a/CODE_point}');
Error('\P{ Default_IGNORABLE/a/CODE_point}');
Expect(1, 173, '\p{defaultignorablecodepoint}', "");
Expect(0, 173, '\p{^defaultignorablecodepoint}', "");
Expect(0, 173, '\P{defaultignorablecodepoint}', "");
Expect(1, 173, '\P{^defaultignorablecodepoint}', "");
Expect(0, 172, '\p{defaultignorablecodepoint}', "");
Expect(1, 172, '\p{^defaultignorablecodepoint}', "");
Expect(1, 172, '\P{defaultignorablecodepoint}', "");
Expect(0, 172, '\P{^defaultignorablecodepoint}', "");
Expect(1, 173, '\p{ Default-Ignorable	Codepoint}', "");
Expect(0, 173, '\p{^ Default-Ignorable	Codepoint}', "");
Expect(0, 173, '\P{ Default-Ignorable	Codepoint}', "");
Expect(1, 173, '\P{^ Default-Ignorable	Codepoint}', "");
Expect(0, 172, '\p{ Default-Ignorable	Codepoint}', "");
Expect(1, 172, '\p{^ Default-Ignorable	Codepoint}', "");
Expect(1, 172, '\P{ Default-Ignorable	Codepoint}', "");
Expect(0, 172, '\P{^ Default-Ignorable	Codepoint}', "");
Error('\p{	/a/is_DefaultIGNORABLE_Code_point}');
Error('\P{	/a/is_DefaultIGNORABLE_Code_point}');
Expect(1, 173, '\p{isdefaultignorablecodepoint}', "");
Expect(0, 173, '\p{^isdefaultignorablecodepoint}', "");
Expect(0, 173, '\P{isdefaultignorablecodepoint}', "");
Expect(1, 173, '\P{^isdefaultignorablecodepoint}', "");
Expect(0, 172, '\p{isdefaultignorablecodepoint}', "");
Expect(1, 172, '\p{^isdefaultignorablecodepoint}', "");
Expect(1, 172, '\P{isdefaultignorablecodepoint}', "");
Expect(0, 172, '\P{^isdefaultignorablecodepoint}', "");
Expect(1, 173, '\p{-	is-default IGNORABLE CODE	Point}', "");
Expect(0, 173, '\p{^-	is-default IGNORABLE CODE	Point}', "");
Expect(0, 173, '\P{-	is-default IGNORABLE CODE	Point}', "");
Expect(1, 173, '\P{^-	is-default IGNORABLE CODE	Point}', "");
Expect(0, 172, '\p{-	is-default IGNORABLE CODE	Point}', "");
Expect(1, 172, '\p{^-	is-default IGNORABLE CODE	Point}', "");
Expect(1, 172, '\P{-	is-default IGNORABLE CODE	Point}', "");
Expect(0, 172, '\P{^-	is-default IGNORABLE CODE	Point}', "");
Error('\p{/a/ _DI}');
Error('\P{/a/ _DI}');
Expect(1, 173, '\p{di}', "");
Expect(0, 173, '\p{^di}', "");
Expect(0, 173, '\P{di}', "");
Expect(1, 173, '\P{^di}', "");
Expect(0, 172, '\p{di}', "");
Expect(1, 172, '\p{^di}', "");
Expect(1, 172, '\P{di}', "");
Expect(0, 172, '\P{^di}', "");
Expect(1, 173, '\p{- DI}', "");
Expect(0, 173, '\p{^- DI}', "");
Expect(0, 173, '\P{- DI}', "");
Expect(1, 173, '\P{^- DI}', "");
Expect(0, 172, '\p{- DI}', "");
Expect(1, 172, '\p{^- DI}', "");
Expect(1, 172, '\P{- DI}', "");
Expect(0, 172, '\P{^- DI}', "");
Error('\p{	-is_DI/a/}');
Error('\P{	-is_DI/a/}');
Expect(1, 173, '\p{isdi}', "");
Expect(0, 173, '\p{^isdi}', "");
Expect(0, 173, '\P{isdi}', "");
Expect(1, 173, '\P{^isdi}', "");
Expect(0, 172, '\p{isdi}', "");
Expect(1, 172, '\p{^isdi}', "");
Expect(1, 172, '\P{isdi}', "");
Expect(0, 172, '\P{^isdi}', "");
Expect(1, 173, '\p{IS di}', "");
Expect(0, 173, '\p{^IS di}', "");
Expect(0, 173, '\P{IS di}', "");
Expect(1, 173, '\P{^IS di}', "");
Expect(0, 172, '\p{IS di}', "");
Expect(1, 172, '\p{^IS di}', "");
Expect(1, 172, '\P{IS di}', "");
Expect(0, 172, '\P{^IS di}', "");
Error('\p{-:=ID	START}');
Error('\P{-:=ID	START}');
Expect(1, 90, '\p{idstart}', "");
Expect(0, 90, '\p{^idstart}', "");
Expect(0, 90, '\P{idstart}', "");
Expect(1, 90, '\P{^idstart}', "");
Expect(0, 64, '\p{idstart}', "");
Expect(1, 64, '\p{^idstart}', "");
Expect(1, 64, '\P{idstart}', "");
Expect(0, 64, '\P{^idstart}', "");
Expect(1, 90, '\p{--id_Start}', "");
Expect(0, 90, '\p{^--id_Start}', "");
Expect(0, 90, '\P{--id_Start}', "");
Expect(1, 90, '\P{^--id_Start}', "");
Expect(0, 64, '\p{--id_Start}', "");
Expect(1, 64, '\p{^--id_Start}', "");
Expect(1, 64, '\P{--id_Start}', "");
Expect(0, 64, '\P{^--id_Start}', "");
Error('\p{/a/Is-ID START}');
Error('\P{/a/Is-ID START}');
Expect(1, 90, '\p{isidstart}', "");
Expect(0, 90, '\p{^isidstart}', "");
Expect(0, 90, '\P{isidstart}', "");
Expect(1, 90, '\P{^isidstart}', "");
Expect(0, 64, '\p{isidstart}', "");
Expect(1, 64, '\p{^isidstart}', "");
Expect(1, 64, '\P{isidstart}', "");
Expect(0, 64, '\P{^isidstart}', "");
Expect(1, 90, '\p{_Is-id	Start}', "");
Expect(0, 90, '\p{^_Is-id	Start}', "");
Expect(0, 90, '\P{_Is-id	Start}', "");
Expect(1, 90, '\P{^_Is-id	Start}', "");
Expect(0, 64, '\p{_Is-id	Start}', "");
Expect(1, 64, '\p{^_Is-id	Start}', "");
Expect(1, 64, '\P{_Is-id	Start}', "");
Expect(0, 64, '\P{^_Is-id	Start}', "");
Error('\p{_IDS:=}');
Error('\P{_IDS:=}');
Expect(1, 90, '\p{ids}', "");
Expect(0, 90, '\p{^ids}', "");
Expect(0, 90, '\P{ids}', "");
Expect(1, 90, '\P{^ids}', "");
Expect(0, 64, '\p{ids}', "");
Expect(1, 64, '\p{^ids}', "");
Expect(1, 64, '\P{ids}', "");
Expect(0, 64, '\P{^ids}', "");
Expect(1, 90, '\p{ -IDS}', "");
Expect(0, 90, '\p{^ -IDS}', "");
Expect(0, 90, '\P{ -IDS}', "");
Expect(1, 90, '\P{^ -IDS}', "");
Expect(0, 64, '\p{ -IDS}', "");
Expect(1, 64, '\p{^ -IDS}', "");
Expect(1, 64, '\P{ -IDS}', "");
Expect(0, 64, '\P{^ -IDS}', "");
Error('\p{	is	IDS/a/}');
Error('\P{	is	IDS/a/}');
Expect(1, 90, '\p{isids}', "");
Expect(0, 90, '\p{^isids}', "");
Expect(0, 90, '\P{isids}', "");
Expect(1, 90, '\P{^isids}', "");
Expect(0, 64, '\p{isids}', "");
Expect(1, 64, '\p{^isids}', "");
Expect(1, 64, '\P{isids}', "");
Expect(0, 64, '\P{^isids}', "");
Expect(1, 90, '\p{--Is_IDS}', "");
Expect(0, 90, '\p{^--Is_IDS}', "");
Expect(0, 90, '\P{--Is_IDS}', "");
Expect(1, 90, '\P{^--Is_IDS}', "");
Expect(0, 64, '\p{--Is_IDS}', "");
Expect(1, 64, '\p{^--Is_IDS}', "");
Expect(1, 64, '\P{--Is_IDS}', "");
Expect(0, 64, '\P{^--Is_IDS}', "");
Error('\p{:=-_cyrillic	Supplement}');
Error('\P{:=-_cyrillic	Supplement}');
Expect(1, 1327, '\p{cyrillicsupplement}', "");
Expect(0, 1327, '\p{^cyrillicsupplement}', "");
Expect(0, 1327, '\P{cyrillicsupplement}', "");
Expect(1, 1327, '\P{^cyrillicsupplement}', "");
Expect(0, 1279, '\p{cyrillicsupplement}', "");
Expect(1, 1279, '\p{^cyrillicsupplement}', "");
Expect(1, 1279, '\P{cyrillicsupplement}', "");
Expect(0, 1279, '\P{^cyrillicsupplement}', "");
Expect(1, 1327, '\p{ -CYRILLIC_Supplement}', "");
Expect(0, 1327, '\p{^ -CYRILLIC_Supplement}', "");
Expect(0, 1327, '\P{ -CYRILLIC_Supplement}', "");
Expect(1, 1327, '\P{^ -CYRILLIC_Supplement}', "");
Expect(0, 1279, '\p{ -CYRILLIC_Supplement}', "");
Expect(1, 1279, '\p{^ -CYRILLIC_Supplement}', "");
Expect(1, 1279, '\P{ -CYRILLIC_Supplement}', "");
Expect(0, 1279, '\P{^ -CYRILLIC_Supplement}', "");
Error('\p{/a/	_is_Cyrillic-SUPPLEMENT}');
Error('\P{/a/	_is_Cyrillic-SUPPLEMENT}');
Expect(1, 1327, '\p{iscyrillicsupplement}', "");
Expect(0, 1327, '\p{^iscyrillicsupplement}', "");
Expect(0, 1327, '\P{iscyrillicsupplement}', "");
Expect(1, 1327, '\P{^iscyrillicsupplement}', "");
Expect(0, 1279, '\p{iscyrillicsupplement}', "");
Expect(1, 1279, '\p{^iscyrillicsupplement}', "");
Expect(1, 1279, '\P{iscyrillicsupplement}', "");
Expect(0, 1279, '\P{^iscyrillicsupplement}', "");
Expect(1, 1327, '\p{  IS	Cyrillic-supplement}', "");
Expect(0, 1327, '\p{^  IS	Cyrillic-supplement}', "");
Expect(0, 1327, '\P{  IS	Cyrillic-supplement}', "");
Expect(1, 1327, '\P{^  IS	Cyrillic-supplement}', "");
Expect(0, 1279, '\p{  IS	Cyrillic-supplement}', "");
Expect(1, 1279, '\p{^  IS	Cyrillic-supplement}', "");
Expect(1, 1279, '\P{  IS	Cyrillic-supplement}', "");
Expect(0, 1279, '\P{^  IS	Cyrillic-supplement}', "");
Error('\p{ :=InCyrillicsupplement}');
Error('\P{ :=InCyrillicsupplement}');
Expect(1, 1327, '\p{incyrillicsupplement}', "");
Expect(0, 1327, '\p{^incyrillicsupplement}', "");
Expect(0, 1327, '\P{incyrillicsupplement}', "");
Expect(1, 1327, '\P{^incyrillicsupplement}', "");
Expect(0, 1279, '\p{incyrillicsupplement}', "");
Expect(1, 1279, '\p{^incyrillicsupplement}', "");
Expect(1, 1279, '\P{incyrillicsupplement}', "");
Expect(0, 1279, '\P{^incyrillicsupplement}', "");
Expect(1, 1327, '\p{ IN Cyrillic_supplement}', "");
Expect(0, 1327, '\p{^ IN Cyrillic_supplement}', "");
Expect(0, 1327, '\P{ IN Cyrillic_supplement}', "");
Expect(1, 1327, '\P{^ IN Cyrillic_supplement}', "");
Expect(0, 1279, '\p{ IN Cyrillic_supplement}', "");
Expect(1, 1279, '\p{^ IN Cyrillic_supplement}', "");
Expect(1, 1279, '\P{ IN Cyrillic_supplement}', "");
Expect(0, 1279, '\P{^ IN Cyrillic_supplement}', "");
Error('\p{/a/Cyrillic Supplementary}');
Error('\P{/a/Cyrillic Supplementary}');
Expect(1, 1327, '\p{cyrillicsupplementary}', "");
Expect(0, 1327, '\p{^cyrillicsupplementary}', "");
Expect(0, 1327, '\P{cyrillicsupplementary}', "");
Expect(1, 1327, '\P{^cyrillicsupplementary}', "");
Expect(0, 1279, '\p{cyrillicsupplementary}', "");
Expect(1, 1279, '\p{^cyrillicsupplementary}', "");
Expect(1, 1279, '\P{cyrillicsupplementary}', "");
Expect(0, 1279, '\P{^cyrillicsupplementary}', "");
Expect(1, 1327, '\p{__CyrillicSupplementary}', "");
Expect(0, 1327, '\p{^__CyrillicSupplementary}', "");
Expect(0, 1327, '\P{__CyrillicSupplementary}', "");
Expect(1, 1327, '\P{^__CyrillicSupplementary}', "");
Expect(0, 1279, '\p{__CyrillicSupplementary}', "");
Expect(1, 1279, '\p{^__CyrillicSupplementary}', "");
Expect(1, 1279, '\P{__CyrillicSupplementary}', "");
Expect(0, 1279, '\P{^__CyrillicSupplementary}', "");
Error('\p{ is_Cyrillic:=Supplementary}');
Error('\P{ is_Cyrillic:=Supplementary}');
Expect(1, 1327, '\p{iscyrillicsupplementary}', "");
Expect(0, 1327, '\p{^iscyrillicsupplementary}', "");
Expect(0, 1327, '\P{iscyrillicsupplementary}', "");
Expect(1, 1327, '\P{^iscyrillicsupplementary}', "");
Expect(0, 1279, '\p{iscyrillicsupplementary}', "");
Expect(1, 1279, '\p{^iscyrillicsupplementary}', "");
Expect(1, 1279, '\P{iscyrillicsupplementary}', "");
Expect(0, 1279, '\P{^iscyrillicsupplementary}', "");
Expect(1, 1327, '\p{  Is	CYRILLIC	SUPPLEMENTARY}', "");
Expect(0, 1327, '\p{^  Is	CYRILLIC	SUPPLEMENTARY}', "");
Expect(0, 1327, '\P{  Is	CYRILLIC	SUPPLEMENTARY}', "");
Expect(1, 1327, '\P{^  Is	CYRILLIC	SUPPLEMENTARY}', "");
Expect(0, 1279, '\p{  Is	CYRILLIC	SUPPLEMENTARY}', "");
Expect(1, 1279, '\p{^  Is	CYRILLIC	SUPPLEMENTARY}', "");
Expect(1, 1279, '\P{  Is	CYRILLIC	SUPPLEMENTARY}', "");
Expect(0, 1279, '\P{^  Is	CYRILLIC	SUPPLEMENTARY}', "");
Error('\p{-:=in	cyrillic	SUPPLEMENTARY}');
Error('\P{-:=in	cyrillic	SUPPLEMENTARY}');
Expect(1, 1327, '\p{incyrillicsupplementary}', "");
Expect(0, 1327, '\p{^incyrillicsupplementary}', "");
Expect(0, 1327, '\P{incyrillicsupplementary}', "");
Expect(1, 1327, '\P{^incyrillicsupplementary}', "");
Expect(0, 1279, '\p{incyrillicsupplementary}', "");
Expect(1, 1279, '\p{^incyrillicsupplementary}', "");
Expect(1, 1279, '\P{incyrillicsupplementary}', "");
Expect(0, 1279, '\P{^incyrillicsupplementary}', "");
Expect(1, 1327, '\p{- INcyrillic SUPPLEMENTARY}', "");
Expect(0, 1327, '\p{^- INcyrillic SUPPLEMENTARY}', "");
Expect(0, 1327, '\P{- INcyrillic SUPPLEMENTARY}', "");
Expect(1, 1327, '\P{^- INcyrillic SUPPLEMENTARY}', "");
Expect(0, 1279, '\p{- INcyrillic SUPPLEMENTARY}', "");
Expect(1, 1279, '\p{^- INcyrillic SUPPLEMENTARY}', "");
Expect(1, 1279, '\P{- INcyrillic SUPPLEMENTARY}', "");
Expect(0, 1279, '\P{^- INcyrillic SUPPLEMENTARY}', "");
Error('\p{-Geometric-Shapes:=}');
Error('\P{-Geometric-Shapes:=}');
Expect(1, 9727, '\p{geometricshapes}', "");
Expect(0, 9727, '\p{^geometricshapes}', "");
Expect(0, 9727, '\P{geometricshapes}', "");
Expect(1, 9727, '\P{^geometricshapes}', "");
Expect(0, 9631, '\p{geometricshapes}', "");
Expect(1, 9631, '\p{^geometricshapes}', "");
Expect(1, 9631, '\P{geometricshapes}', "");
Expect(0, 9631, '\P{^geometricshapes}', "");
Expect(1, 9727, '\p{__Geometric_SHAPES}', "");
Expect(0, 9727, '\p{^__Geometric_SHAPES}', "");
Expect(0, 9727, '\P{__Geometric_SHAPES}', "");
Expect(1, 9727, '\P{^__Geometric_SHAPES}', "");
Expect(0, 9631, '\p{__Geometric_SHAPES}', "");
Expect(1, 9631, '\p{^__Geometric_SHAPES}', "");
Expect(1, 9631, '\P{__Geometric_SHAPES}', "");
Expect(0, 9631, '\P{^__Geometric_SHAPES}', "");
Error('\p{	-Is:=Geometric-Shapes}');
Error('\P{	-Is:=Geometric-Shapes}');
Expect(1, 9727, '\p{isgeometricshapes}', "");
Expect(0, 9727, '\p{^isgeometricshapes}', "");
Expect(0, 9727, '\P{isgeometricshapes}', "");
Expect(1, 9727, '\P{^isgeometricshapes}', "");
Expect(0, 9631, '\p{isgeometricshapes}', "");
Expect(1, 9631, '\p{^isgeometricshapes}', "");
Expect(1, 9631, '\P{isgeometricshapes}', "");
Expect(0, 9631, '\P{^isgeometricshapes}', "");
Expect(1, 9727, '\p{_ IS_Geometric	shapes}', "");
Expect(0, 9727, '\p{^_ IS_Geometric	shapes}', "");
Expect(0, 9727, '\P{_ IS_Geometric	shapes}', "");
Expect(1, 9727, '\P{^_ IS_Geometric	shapes}', "");
Expect(0, 9631, '\p{_ IS_Geometric	shapes}', "");
Expect(1, 9631, '\p{^_ IS_Geometric	shapes}', "");
Expect(1, 9631, '\P{_ IS_Geometric	shapes}', "");
Expect(0, 9631, '\P{^_ IS_Geometric	shapes}', "");
Error('\p{	Ingeometric-Shapes:=}');
Error('\P{	Ingeometric-Shapes:=}');
Expect(1, 9727, '\p{ingeometricshapes}', "");
Expect(0, 9727, '\p{^ingeometricshapes}', "");
Expect(0, 9727, '\P{ingeometricshapes}', "");
Expect(1, 9727, '\P{^ingeometricshapes}', "");
Expect(0, 9631, '\p{ingeometricshapes}', "");
Expect(1, 9631, '\p{^ingeometricshapes}', "");
Expect(1, 9631, '\P{ingeometricshapes}', "");
Expect(0, 9631, '\P{^ingeometricshapes}', "");
Expect(1, 9727, '\p{_-In-Geometric	shapes}', "");
Expect(0, 9727, '\p{^_-In-Geometric	shapes}', "");
Expect(0, 9727, '\P{_-In-Geometric	shapes}', "");
Expect(1, 9727, '\P{^_-In-Geometric	shapes}', "");
Expect(0, 9631, '\p{_-In-Geometric	shapes}', "");
Expect(1, 9631, '\p{^_-In-Geometric	shapes}', "");
Expect(1, 9631, '\P{_-In-Geometric	shapes}', "");
Expect(0, 9631, '\P{^_-In-Geometric	shapes}', "");
Error('\p{:=Latin_extended-D}');
Error('\P{:=Latin_extended-D}');
Expect(1, 43007, '\p{latinextendedd}', "");
Expect(0, 43007, '\p{^latinextendedd}', "");
Expect(0, 43007, '\P{latinextendedd}', "");
Expect(1, 43007, '\P{^latinextendedd}', "");
Expect(0, 42783, '\p{latinextendedd}', "");
Expect(1, 42783, '\p{^latinextendedd}', "");
Expect(1, 42783, '\P{latinextendedd}', "");
Expect(0, 42783, '\P{^latinextendedd}', "");
Expect(1, 43007, '\p{  LatinEXTENDED_d}', "");
Expect(0, 43007, '\p{^  LatinEXTENDED_d}', "");
Expect(0, 43007, '\P{  LatinEXTENDED_d}', "");
Expect(1, 43007, '\P{^  LatinEXTENDED_d}', "");
Expect(0, 42783, '\p{  LatinEXTENDED_d}', "");
Expect(1, 42783, '\p{^  LatinEXTENDED_d}', "");
Expect(1, 42783, '\P{  LatinEXTENDED_d}', "");
Expect(0, 42783, '\P{^  LatinEXTENDED_d}', "");
Error('\p{_/a/is_LATINExtendedD}');
Error('\P{_/a/is_LATINExtendedD}');
Expect(1, 43007, '\p{islatinextendedd}', "");
Expect(0, 43007, '\p{^islatinextendedd}', "");
Expect(0, 43007, '\P{islatinextendedd}', "");
Expect(1, 43007, '\P{^islatinextendedd}', "");
Expect(0, 42783, '\p{islatinextendedd}', "");
Expect(1, 42783, '\p{^islatinextendedd}', "");
Expect(1, 42783, '\P{islatinextendedd}', "");
Expect(0, 42783, '\P{^islatinextendedd}', "");
Expect(1, 43007, '\p{_	Is_latin_EXTENDED_D}', "");
Expect(0, 43007, '\p{^_	Is_latin_EXTENDED_D}', "");
Expect(0, 43007, '\P{_	Is_latin_EXTENDED_D}', "");
Expect(1, 43007, '\P{^_	Is_latin_EXTENDED_D}', "");
Expect(0, 42783, '\p{_	Is_latin_EXTENDED_D}', "");
Expect(1, 42783, '\p{^_	Is_latin_EXTENDED_D}', "");
Expect(1, 42783, '\P{_	Is_latin_EXTENDED_D}', "");
Expect(0, 42783, '\P{^_	Is_latin_EXTENDED_D}', "");
Error('\p{_-in:=LATIN_Extended-D}');
Error('\P{_-in:=LATIN_Extended-D}');
Expect(1, 43007, '\p{inlatinextendedd}', "");
Expect(0, 43007, '\p{^inlatinextendedd}', "");
Expect(0, 43007, '\P{inlatinextendedd}', "");
Expect(1, 43007, '\P{^inlatinextendedd}', "");
Expect(0, 42783, '\p{inlatinextendedd}', "");
Expect(1, 42783, '\p{^inlatinextendedd}', "");
Expect(1, 42783, '\P{inlatinextendedd}', "");
Expect(0, 42783, '\P{^inlatinextendedd}', "");
Expect(1, 43007, '\p{	INLatin EXTENDEDd}', "");
Expect(0, 43007, '\p{^	INLatin EXTENDEDd}', "");
Expect(0, 43007, '\P{	INLatin EXTENDEDd}', "");
Expect(1, 43007, '\P{^	INLatin EXTENDEDd}', "");
Expect(0, 42783, '\p{	INLatin EXTENDEDd}', "");
Expect(1, 42783, '\p{^	INLatin EXTENDEDd}', "");
Expect(1, 42783, '\P{	INLatin EXTENDEDd}', "");
Expect(0, 42783, '\P{^	INLatin EXTENDEDd}', "");
Error('\p{	/a/Buginese}');
Error('\P{	/a/Buginese}');
Expect(1, 6683, '\p{buginese}', "");
Expect(0, 6683, '\p{^buginese}', "");
Expect(0, 6683, '\P{buginese}', "");
Expect(1, 6683, '\P{^buginese}', "");
Expect(0, 6655, '\p{buginese}', "");
Expect(1, 6655, '\p{^buginese}', "");
Expect(1, 6655, '\P{buginese}', "");
Expect(0, 6655, '\P{^buginese}', "");
Expect(1, 6683, '\p{	_BUGINESE}', "");
Expect(0, 6683, '\p{^	_BUGINESE}', "");
Expect(0, 6683, '\P{	_BUGINESE}', "");
Expect(1, 6683, '\P{^	_BUGINESE}', "");
Expect(0, 6655, '\p{	_BUGINESE}', "");
Expect(1, 6655, '\p{^	_BUGINESE}', "");
Expect(1, 6655, '\P{	_BUGINESE}', "");
Expect(0, 6655, '\P{^	_BUGINESE}', "");
Error('\p{ Is	buginese:=}');
Error('\P{ Is	buginese:=}');
Expect(1, 6683, '\p{isbuginese}', "");
Expect(0, 6683, '\p{^isbuginese}', "");
Expect(0, 6683, '\P{isbuginese}', "");
Expect(1, 6683, '\P{^isbuginese}', "");
Expect(0, 6655, '\p{isbuginese}', "");
Expect(1, 6655, '\p{^isbuginese}', "");
Expect(1, 6655, '\P{isbuginese}', "");
Expect(0, 6655, '\P{^isbuginese}', "");
Expect(1, 6683, '\p{ 	Is	buginese}', "");
Expect(0, 6683, '\p{^ 	Is	buginese}', "");
Expect(0, 6683, '\P{ 	Is	buginese}', "");
Expect(1, 6683, '\P{^ 	Is	buginese}', "");
Expect(0, 6655, '\p{ 	Is	buginese}', "");
Expect(1, 6655, '\p{^ 	Is	buginese}', "");
Expect(1, 6655, '\P{ 	Is	buginese}', "");
Expect(0, 6655, '\P{^ 	Is	buginese}', "");
Error('\p{	-bugi:=}');
Error('\P{	-bugi:=}');
Expect(1, 6683, '\p{bugi}', "");
Expect(0, 6683, '\p{^bugi}', "");
Expect(0, 6683, '\P{bugi}', "");
Expect(1, 6683, '\P{^bugi}', "");
Expect(0, 6655, '\p{bugi}', "");
Expect(1, 6655, '\p{^bugi}', "");
Expect(1, 6655, '\P{bugi}', "");
Expect(0, 6655, '\P{^bugi}', "");
Expect(1, 6683, '\p{_Bugi}', "");
Expect(0, 6683, '\p{^_Bugi}', "");
Expect(0, 6683, '\P{_Bugi}', "");
Expect(1, 6683, '\P{^_Bugi}', "");
Expect(0, 6655, '\p{_Bugi}', "");
Expect(1, 6655, '\p{^_Bugi}', "");
Expect(1, 6655, '\P{_Bugi}', "");
Expect(0, 6655, '\P{^_Bugi}', "");
Error('\p{	Is/a/BUGI}');
Error('\P{	Is/a/BUGI}');
Expect(1, 6683, '\p{isbugi}', "");
Expect(0, 6683, '\p{^isbugi}', "");
Expect(0, 6683, '\P{isbugi}', "");
Expect(1, 6683, '\P{^isbugi}', "");
Expect(0, 6655, '\p{isbugi}', "");
Expect(1, 6655, '\p{^isbugi}', "");
Expect(1, 6655, '\P{isbugi}', "");
Expect(0, 6655, '\P{^isbugi}', "");
Expect(1, 6683, '\p{_IsBUGI}', "");
Expect(0, 6683, '\p{^_IsBUGI}', "");
Expect(0, 6683, '\P{_IsBUGI}', "");
Expect(1, 6683, '\P{^_IsBUGI}', "");
Expect(0, 6655, '\p{_IsBUGI}', "");
Expect(1, 6655, '\p{^_IsBUGI}', "");
Expect(1, 6655, '\P{_IsBUGI}', "");
Expect(0, 6655, '\P{^_IsBUGI}', "");
Error('\p{ /a/IN_MALAYALAM}');
Error('\P{ /a/IN_MALAYALAM}');
Expect(1, 3455, '\p{inmalayalam}', "");
Expect(0, 3455, '\p{^inmalayalam}', "");
Expect(0, 3455, '\P{inmalayalam}', "");
Expect(1, 3455, '\P{^inmalayalam}', "");
Expect(0, 3327, '\p{inmalayalam}', "");
Expect(1, 3327, '\p{^inmalayalam}', "");
Expect(1, 3327, '\P{inmalayalam}', "");
Expect(0, 3327, '\P{^inmalayalam}', "");
Expect(1, 3455, '\p{	 in-Malayalam}', "");
Expect(0, 3455, '\p{^	 in-Malayalam}', "");
Expect(0, 3455, '\P{	 in-Malayalam}', "");
Expect(1, 3455, '\P{^	 in-Malayalam}', "");
Expect(0, 3327, '\p{	 in-Malayalam}', "");
Expect(1, 3327, '\p{^	 in-Malayalam}', "");
Expect(1, 3327, '\P{	 in-Malayalam}', "");
Expect(0, 3327, '\P{^	 in-Malayalam}', "");
Error('\p{--INSCRIPTIONAL:=Pahlavi}');
Error('\P{--INSCRIPTIONAL:=Pahlavi}');
Expect(1, 68466, '\p{inscriptionalpahlavi}', "");
Expect(0, 68466, '\p{^inscriptionalpahlavi}', "");
Expect(0, 68466, '\P{inscriptionalpahlavi}', "");
Expect(1, 68466, '\P{^inscriptionalpahlavi}', "");
Expect(0, 68447, '\p{inscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^inscriptionalpahlavi}', "");
Expect(1, 68447, '\P{inscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^inscriptionalpahlavi}', "");
Expect(1, 68466, '\p{		Inscriptional_Pahlavi}', "");
Expect(0, 68466, '\p{^		Inscriptional_Pahlavi}', "");
Expect(0, 68466, '\P{		Inscriptional_Pahlavi}', "");
Expect(1, 68466, '\P{^		Inscriptional_Pahlavi}', "");
Expect(0, 68447, '\p{		Inscriptional_Pahlavi}', "");
Expect(1, 68447, '\p{^		Inscriptional_Pahlavi}', "");
Expect(1, 68447, '\P{		Inscriptional_Pahlavi}', "");
Expect(0, 68447, '\P{^		Inscriptional_Pahlavi}', "");
Error('\p{  is:=INSCRIPTIONAL	Pahlavi}');
Error('\P{  is:=INSCRIPTIONAL	Pahlavi}');
Expect(1, 68466, '\p{isinscriptionalpahlavi}', "");
Expect(0, 68466, '\p{^isinscriptionalpahlavi}', "");
Expect(0, 68466, '\P{isinscriptionalpahlavi}', "");
Expect(1, 68466, '\P{^isinscriptionalpahlavi}', "");
Expect(0, 68447, '\p{isinscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^isinscriptionalpahlavi}', "");
Expect(1, 68447, '\P{isinscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^isinscriptionalpahlavi}', "");
Expect(1, 68466, '\p{ is_INSCRIPTIONAL pahlavi}', "");
Expect(0, 68466, '\p{^ is_INSCRIPTIONAL pahlavi}', "");
Expect(0, 68466, '\P{ is_INSCRIPTIONAL pahlavi}', "");
Expect(1, 68466, '\P{^ is_INSCRIPTIONAL pahlavi}', "");
Expect(0, 68447, '\p{ is_INSCRIPTIONAL pahlavi}', "");
Expect(1, 68447, '\p{^ is_INSCRIPTIONAL pahlavi}', "");
Expect(1, 68447, '\P{ is_INSCRIPTIONAL pahlavi}', "");
Expect(0, 68447, '\P{^ is_INSCRIPTIONAL pahlavi}', "");
Error('\p{:=- Phli}');
Error('\P{:=- Phli}');
Expect(1, 68466, '\p{phli}', "");
Expect(0, 68466, '\p{^phli}', "");
Expect(0, 68466, '\P{phli}', "");
Expect(1, 68466, '\P{^phli}', "");
Expect(0, 68447, '\p{phli}', "");
Expect(1, 68447, '\p{^phli}', "");
Expect(1, 68447, '\P{phli}', "");
Expect(0, 68447, '\P{^phli}', "");
Expect(1, 68466, '\p{	 PHLI}', "");
Expect(0, 68466, '\p{^	 PHLI}', "");
Expect(0, 68466, '\P{	 PHLI}', "");
Expect(1, 68466, '\P{^	 PHLI}', "");
Expect(0, 68447, '\p{	 PHLI}', "");
Expect(1, 68447, '\p{^	 PHLI}', "");
Expect(1, 68447, '\P{	 PHLI}', "");
Expect(0, 68447, '\P{^	 PHLI}', "");
Error('\p{-is/a/Phli}');
Error('\P{-is/a/Phli}');
Expect(1, 68466, '\p{isphli}', "");
Expect(0, 68466, '\p{^isphli}', "");
Expect(0, 68466, '\P{isphli}', "");
Expect(1, 68466, '\P{^isphli}', "");
Expect(0, 68447, '\p{isphli}', "");
Expect(1, 68447, '\p{^isphli}', "");
Expect(1, 68447, '\P{isphli}', "");
Expect(0, 68447, '\P{^isphli}', "");
Expect(1, 68466, '\p{ ISPHLI}', "");
Expect(0, 68466, '\p{^ ISPHLI}', "");
Expect(0, 68466, '\P{ ISPHLI}', "");
Expect(1, 68466, '\P{^ ISPHLI}', "");
Expect(0, 68447, '\p{ ISPHLI}', "");
Expect(1, 68447, '\p{^ ISPHLI}', "");
Expect(1, 68447, '\P{ ISPHLI}', "");
Expect(0, 68447, '\P{^ ISPHLI}', "");
Error('\p{:=__CHAM}');
Error('\P{:=__CHAM}');
Expect(1, 43574, '\p{cham}', "");
Expect(0, 43574, '\p{^cham}', "");
Expect(0, 43574, '\P{cham}', "");
Expect(1, 43574, '\P{^cham}', "");
Expect(0, 43519, '\p{cham}', "");
Expect(1, 43519, '\p{^cham}', "");
Expect(1, 43519, '\P{cham}', "");
Expect(0, 43519, '\P{^cham}', "");
Expect(1, 43574, '\p{-Cham}', "");
Expect(0, 43574, '\p{^-Cham}', "");
Expect(0, 43574, '\P{-Cham}', "");
Expect(1, 43574, '\P{^-Cham}', "");
Expect(0, 43519, '\p{-Cham}', "");
Expect(1, 43519, '\p{^-Cham}', "");
Expect(1, 43519, '\P{-Cham}', "");
Expect(0, 43519, '\P{^-Cham}', "");
Error('\p{_ IsCham:=}');
Error('\P{_ IsCham:=}');
Expect(1, 43574, '\p{ischam}', "");
Expect(0, 43574, '\p{^ischam}', "");
Expect(0, 43574, '\P{ischam}', "");
Expect(1, 43574, '\P{^ischam}', "");
Expect(0, 43519, '\p{ischam}', "");
Expect(1, 43519, '\p{^ischam}', "");
Expect(1, 43519, '\P{ischam}', "");
Expect(0, 43519, '\P{^ischam}', "");
Expect(1, 43574, '\p{ Is Cham}', "");
Expect(0, 43574, '\p{^ Is Cham}', "");
Expect(0, 43574, '\P{ Is Cham}', "");
Expect(1, 43574, '\P{^ Is Cham}', "");
Expect(0, 43519, '\p{ Is Cham}', "");
Expect(1, 43519, '\p{^ Is Cham}', "");
Expect(1, 43519, '\P{ Is Cham}', "");
Expect(0, 43519, '\P{^ Is Cham}', "");
Error('\p{_BRAILLE/a/}');
Error('\P{_BRAILLE/a/}');
Expect(1, 10495, '\p{braille}', "");
Expect(0, 10495, '\p{^braille}', "");
Expect(0, 10495, '\P{braille}', "");
Expect(1, 10495, '\P{^braille}', "");
Expect(0, 10239, '\p{braille}', "");
Expect(1, 10239, '\p{^braille}', "");
Expect(1, 10239, '\P{braille}', "");
Expect(0, 10239, '\P{^braille}', "");
Expect(1, 10495, '\p{-Braille}', "");
Expect(0, 10495, '\p{^-Braille}', "");
Expect(0, 10495, '\P{-Braille}', "");
Expect(1, 10495, '\P{^-Braille}', "");
Expect(0, 10239, '\p{-Braille}', "");
Expect(1, 10239, '\p{^-Braille}', "");
Expect(1, 10239, '\P{-Braille}', "");
Expect(0, 10239, '\P{^-Braille}', "");
Error('\p{ -Is/a/braille}');
Error('\P{ -Is/a/braille}');
Expect(1, 10495, '\p{isbraille}', "");
Expect(0, 10495, '\p{^isbraille}', "");
Expect(0, 10495, '\P{isbraille}', "");
Expect(1, 10495, '\P{^isbraille}', "");
Expect(0, 10239, '\p{isbraille}', "");
Expect(1, 10239, '\p{^isbraille}', "");
Expect(1, 10239, '\P{isbraille}', "");
Expect(0, 10239, '\P{^isbraille}', "");
Expect(1, 10495, '\p{__Is_BRAILLE}', "");
Expect(0, 10495, '\p{^__Is_BRAILLE}', "");
Expect(0, 10495, '\P{__Is_BRAILLE}', "");
Expect(1, 10495, '\P{^__Is_BRAILLE}', "");
Expect(0, 10239, '\p{__Is_BRAILLE}', "");
Expect(1, 10239, '\p{^__Is_BRAILLE}', "");
Expect(1, 10239, '\P{__Is_BRAILLE}', "");
Expect(0, 10239, '\P{^__Is_BRAILLE}', "");
Error('\p{-/a/BRAI}');
Error('\P{-/a/BRAI}');
Expect(1, 10495, '\p{brai}', "");
Expect(0, 10495, '\p{^brai}', "");
Expect(0, 10495, '\P{brai}', "");
Expect(1, 10495, '\P{^brai}', "");
Expect(0, 10239, '\p{brai}', "");
Expect(1, 10239, '\p{^brai}', "");
Expect(1, 10239, '\P{brai}', "");
Expect(0, 10239, '\P{^brai}', "");
Expect(1, 10495, '\p{ 	Brai}', "");
Expect(0, 10495, '\p{^ 	Brai}', "");
Expect(0, 10495, '\P{ 	Brai}', "");
Expect(1, 10495, '\P{^ 	Brai}', "");
Expect(0, 10239, '\p{ 	Brai}', "");
Expect(1, 10239, '\p{^ 	Brai}', "");
Expect(1, 10239, '\P{ 	Brai}', "");
Expect(0, 10239, '\P{^ 	Brai}', "");
Error('\p{	/a/IS Brai}');
Error('\P{	/a/IS Brai}');
Expect(1, 10495, '\p{isbrai}', "");
Expect(0, 10495, '\p{^isbrai}', "");
Expect(0, 10495, '\P{isbrai}', "");
Expect(1, 10495, '\P{^isbrai}', "");
Expect(0, 10239, '\p{isbrai}', "");
Expect(1, 10239, '\p{^isbrai}', "");
Expect(1, 10239, '\P{isbrai}', "");
Expect(0, 10239, '\P{^isbrai}', "");
Expect(1, 10495, '\p{ _ISbrai}', "");
Expect(0, 10495, '\p{^ _ISbrai}', "");
Expect(0, 10495, '\P{ _ISbrai}', "");
Expect(1, 10495, '\P{^ _ISbrai}', "");
Expect(0, 10239, '\p{ _ISbrai}', "");
Expect(1, 10239, '\p{^ _ISbrai}', "");
Expect(1, 10239, '\P{ _ISbrai}', "");
Expect(0, 10239, '\P{^ _ISbrai}', "");
Error('\p{/a/--inOld-PERSIAN}');
Error('\P{/a/--inOld-PERSIAN}');
Expect(1, 66527, '\p{inoldpersian}', "");
Expect(0, 66527, '\p{^inoldpersian}', "");
Expect(0, 66527, '\P{inoldpersian}', "");
Expect(1, 66527, '\P{^inoldpersian}', "");
Expect(0, 66463, '\p{inoldpersian}', "");
Expect(1, 66463, '\p{^inoldpersian}', "");
Expect(1, 66463, '\P{inoldpersian}', "");
Expect(0, 66463, '\P{^inoldpersian}', "");
Expect(1, 66527, '\p{-	in old	Persian}', "");
Expect(0, 66527, '\p{^-	in old	Persian}', "");
Expect(0, 66527, '\P{-	in old	Persian}', "");
Expect(1, 66527, '\P{^-	in old	Persian}', "");
Expect(0, 66463, '\p{-	in old	Persian}', "");
Expect(1, 66463, '\p{^-	in old	Persian}', "");
Expect(1, 66463, '\P{-	in old	Persian}', "");
Expect(0, 66463, '\P{^-	in old	Persian}', "");
Error('\p{-	Box	drawing/a/}');
Error('\P{-	Box	drawing/a/}');
Expect(1, 9599, '\p{boxdrawing}', "");
Expect(0, 9599, '\p{^boxdrawing}', "");
Expect(0, 9599, '\P{boxdrawing}', "");
Expect(1, 9599, '\P{^boxdrawing}', "");
Expect(0, 9471, '\p{boxdrawing}', "");
Expect(1, 9471, '\p{^boxdrawing}', "");
Expect(1, 9471, '\P{boxdrawing}', "");
Expect(0, 9471, '\P{^boxdrawing}', "");
Expect(1, 9599, '\p{-	BOXDRAWING}', "");
Expect(0, 9599, '\p{^-	BOXDRAWING}', "");
Expect(0, 9599, '\P{-	BOXDRAWING}', "");
Expect(1, 9599, '\P{^-	BOXDRAWING}', "");
Expect(0, 9471, '\p{-	BOXDRAWING}', "");
Expect(1, 9471, '\p{^-	BOXDRAWING}', "");
Expect(1, 9471, '\P{-	BOXDRAWING}', "");
Expect(0, 9471, '\P{^-	BOXDRAWING}', "");
Error('\p{/a/is-box-Drawing}');
Error('\P{/a/is-box-Drawing}');
Expect(1, 9599, '\p{isboxdrawing}', "");
Expect(0, 9599, '\p{^isboxdrawing}', "");
Expect(0, 9599, '\P{isboxdrawing}', "");
Expect(1, 9599, '\P{^isboxdrawing}', "");
Expect(0, 9471, '\p{isboxdrawing}', "");
Expect(1, 9471, '\p{^isboxdrawing}', "");
Expect(1, 9471, '\P{isboxdrawing}', "");
Expect(0, 9471, '\P{^isboxdrawing}', "");
Expect(1, 9599, '\p{_	Is BOX-Drawing}', "");
Expect(0, 9599, '\p{^_	Is BOX-Drawing}', "");
Expect(0, 9599, '\P{_	Is BOX-Drawing}', "");
Expect(1, 9599, '\P{^_	Is BOX-Drawing}', "");
Expect(0, 9471, '\p{_	Is BOX-Drawing}', "");
Expect(1, 9471, '\p{^_	Is BOX-Drawing}', "");
Expect(1, 9471, '\P{_	Is BOX-Drawing}', "");
Expect(0, 9471, '\P{^_	Is BOX-Drawing}', "");
Error('\p{-:=In-Box DRAWING}');
Error('\P{-:=In-Box DRAWING}');
Expect(1, 9599, '\p{inboxdrawing}', "");
Expect(0, 9599, '\p{^inboxdrawing}', "");
Expect(0, 9599, '\P{inboxdrawing}', "");
Expect(1, 9599, '\P{^inboxdrawing}', "");
Expect(0, 9471, '\p{inboxdrawing}', "");
Expect(1, 9471, '\p{^inboxdrawing}', "");
Expect(1, 9471, '\P{inboxdrawing}', "");
Expect(0, 9471, '\P{^inboxdrawing}', "");
Expect(1, 9599, '\p{_In	Box	drawing}', "");
Expect(0, 9599, '\p{^_In	Box	drawing}', "");
Expect(0, 9599, '\P{_In	Box	drawing}', "");
Expect(1, 9599, '\P{^_In	Box	drawing}', "");
Expect(0, 9471, '\p{_In	Box	drawing}', "");
Expect(1, 9471, '\p{^_In	Box	drawing}', "");
Expect(1, 9471, '\P{_In	Box	drawing}', "");
Expect(0, 9471, '\P{^_In	Box	drawing}', "");
Error('\p{_/a/linear B}');
Error('\P{_/a/linear B}');
Expect(1, 65547, '\p{linearb}', "");
Expect(0, 65547, '\p{^linearb}', "");
Expect(0, 65547, '\P{linearb}', "");
Expect(1, 65547, '\P{^linearb}', "");
Expect(0, 1, '\p{linearb}', "");
Expect(1, 1, '\p{^linearb}', "");
Expect(1, 1, '\P{linearb}', "");
Expect(0, 1, '\P{^linearb}', "");
Expect(1, 65547, '\p{_Linear_B}', "");
Expect(0, 65547, '\p{^_Linear_B}', "");
Expect(0, 65547, '\P{_Linear_B}', "");
Expect(1, 65547, '\P{^_Linear_B}', "");
Expect(0, 1, '\p{_Linear_B}', "");
Expect(1, 1, '\p{^_Linear_B}', "");
Expect(1, 1, '\P{_Linear_B}', "");
Expect(0, 1, '\P{^_Linear_B}', "");
Error('\p{_/a/IsLinear_b}');
Error('\P{_/a/IsLinear_b}');
Expect(1, 65547, '\p{islinearb}', "");
Expect(0, 65547, '\p{^islinearb}', "");
Expect(0, 65547, '\P{islinearb}', "");
Expect(1, 65547, '\P{^islinearb}', "");
Expect(0, 1, '\p{islinearb}', "");
Expect(1, 1, '\p{^islinearb}', "");
Expect(1, 1, '\P{islinearb}', "");
Expect(0, 1, '\P{^islinearb}', "");
Expect(1, 65547, '\p{_-is-LINEAR B}', "");
Expect(0, 65547, '\p{^_-is-LINEAR B}', "");
Expect(0, 65547, '\P{_-is-LINEAR B}', "");
Expect(1, 65547, '\P{^_-is-LINEAR B}', "");
Expect(0, 1, '\p{_-is-LINEAR B}', "");
Expect(1, 1, '\p{^_-is-LINEAR B}', "");
Expect(1, 1, '\P{_-is-LINEAR B}', "");
Expect(0, 1, '\P{^_-is-LINEAR B}', "");
Error('\p{:=-Linb}');
Error('\P{:=-Linb}');
Expect(1, 65547, '\p{linb}', "");
Expect(0, 65547, '\p{^linb}', "");
Expect(0, 65547, '\P{linb}', "");
Expect(1, 65547, '\P{^linb}', "");
Expect(0, 1, '\p{linb}', "");
Expect(1, 1, '\p{^linb}', "");
Expect(1, 1, '\P{linb}', "");
Expect(0, 1, '\P{^linb}', "");
Expect(1, 65547, '\p{ linb}', "");
Expect(0, 65547, '\p{^ linb}', "");
Expect(0, 65547, '\P{ linb}', "");
Expect(1, 65547, '\P{^ linb}', "");
Expect(0, 1, '\p{ linb}', "");
Expect(1, 1, '\p{^ linb}', "");
Expect(1, 1, '\P{ linb}', "");
Expect(0, 1, '\P{^ linb}', "");
Error('\p{--IsLinb/a/}');
Error('\P{--IsLinb/a/}');
Expect(1, 65547, '\p{islinb}', "");
Expect(0, 65547, '\p{^islinb}', "");
Expect(0, 65547, '\P{islinb}', "");
Expect(1, 65547, '\P{^islinb}', "");
Expect(0, 1, '\p{islinb}', "");
Expect(1, 1, '\p{^islinb}', "");
Expect(1, 1, '\P{islinb}', "");
Expect(0, 1, '\P{^islinb}', "");
Expect(1, 65547, '\p{_Is-LINB}', "");
Expect(0, 65547, '\p{^_Is-LINB}', "");
Expect(0, 65547, '\P{_Is-LINB}', "");
Expect(1, 65547, '\P{^_Is-LINB}', "");
Expect(0, 1, '\p{_Is-LINB}', "");
Expect(1, 1, '\p{^_Is-LINB}', "");
Expect(1, 1, '\P{_Is-LINB}', "");
Expect(0, 1, '\P{^_Is-LINB}', "");
Error('\p{__TIFINAGH/a/}');
Error('\P{__TIFINAGH/a/}');
Expect(1, 11621, '\p{tifinagh}', "");
Expect(0, 11621, '\p{^tifinagh}', "");
Expect(0, 11621, '\P{tifinagh}', "");
Expect(1, 11621, '\P{^tifinagh}', "");
Expect(0, 11567, '\p{tifinagh}', "");
Expect(1, 11567, '\p{^tifinagh}', "");
Expect(1, 11567, '\P{tifinagh}', "");
Expect(0, 11567, '\P{^tifinagh}', "");
Expect(1, 11621, '\p{_-Tifinagh}', "");
Expect(0, 11621, '\p{^_-Tifinagh}', "");
Expect(0, 11621, '\P{_-Tifinagh}', "");
Expect(1, 11621, '\P{^_-Tifinagh}', "");
Expect(0, 11567, '\p{_-Tifinagh}', "");
Expect(1, 11567, '\p{^_-Tifinagh}', "");
Expect(1, 11567, '\P{_-Tifinagh}', "");
Expect(0, 11567, '\P{^_-Tifinagh}', "");
Error('\p{/a/Is Tifinagh}');
Error('\P{/a/Is Tifinagh}');
Expect(1, 11621, '\p{istifinagh}', "");
Expect(0, 11621, '\p{^istifinagh}', "");
Expect(0, 11621, '\P{istifinagh}', "");
Expect(1, 11621, '\P{^istifinagh}', "");
Expect(0, 11567, '\p{istifinagh}', "");
Expect(1, 11567, '\p{^istifinagh}', "");
Expect(1, 11567, '\P{istifinagh}', "");
Expect(0, 11567, '\P{^istifinagh}', "");
Expect(1, 11621, '\p{ IS Tifinagh}', "");
Expect(0, 11621, '\p{^ IS Tifinagh}', "");
Expect(0, 11621, '\P{ IS Tifinagh}', "");
Expect(1, 11621, '\P{^ IS Tifinagh}', "");
Expect(0, 11567, '\p{ IS Tifinagh}', "");
Expect(1, 11567, '\p{^ IS Tifinagh}', "");
Expect(1, 11567, '\P{ IS Tifinagh}', "");
Expect(0, 11567, '\P{^ IS Tifinagh}', "");
Error('\p{:=	 Tfng}');
Error('\P{:=	 Tfng}');
Expect(1, 11621, '\p{tfng}', "");
Expect(0, 11621, '\p{^tfng}', "");
Expect(0, 11621, '\P{tfng}', "");
Expect(1, 11621, '\P{^tfng}', "");
Expect(0, 11567, '\p{tfng}', "");
Expect(1, 11567, '\p{^tfng}', "");
Expect(1, 11567, '\P{tfng}', "");
Expect(0, 11567, '\P{^tfng}', "");
Expect(1, 11621, '\p{ _Tfng}', "");
Expect(0, 11621, '\p{^ _Tfng}', "");
Expect(0, 11621, '\P{ _Tfng}', "");
Expect(1, 11621, '\P{^ _Tfng}', "");
Expect(0, 11567, '\p{ _Tfng}', "");
Expect(1, 11567, '\p{^ _Tfng}', "");
Expect(1, 11567, '\P{ _Tfng}', "");
Expect(0, 11567, '\P{^ _Tfng}', "");
Error('\p{  Is-Tfng:=}');
Error('\P{  Is-Tfng:=}');
Expect(1, 11621, '\p{istfng}', "");
Expect(0, 11621, '\p{^istfng}', "");
Expect(0, 11621, '\P{istfng}', "");
Expect(1, 11621, '\P{^istfng}', "");
Expect(0, 11567, '\p{istfng}', "");
Expect(1, 11567, '\p{^istfng}', "");
Expect(1, 11567, '\P{istfng}', "");
Expect(0, 11567, '\P{^istfng}', "");
Expect(1, 11621, '\p{isTfng}', "");
Expect(0, 11621, '\p{^isTfng}', "");
Expect(0, 11621, '\P{isTfng}', "");
Expect(1, 11621, '\P{^isTfng}', "");
Expect(0, 11567, '\p{isTfng}', "");
Expect(1, 11567, '\p{^isTfng}', "");
Expect(1, 11567, '\P{isTfng}', "");
Expect(0, 11567, '\P{^isTfng}', "");
Error('\p{--Syloti:=Nagri}');
Error('\P{--Syloti:=Nagri}');
Expect(1, 43051, '\p{sylotinagri}', "");
Expect(0, 43051, '\p{^sylotinagri}', "");
Expect(0, 43051, '\P{sylotinagri}', "");
Expect(1, 43051, '\P{^sylotinagri}', "");
Expect(0, 43007, '\p{sylotinagri}', "");
Expect(1, 43007, '\p{^sylotinagri}', "");
Expect(1, 43007, '\P{sylotinagri}', "");
Expect(0, 43007, '\P{^sylotinagri}', "");
Expect(1, 43051, '\p{__syloti-NAGRI}', "");
Expect(0, 43051, '\p{^__syloti-NAGRI}', "");
Expect(0, 43051, '\P{__syloti-NAGRI}', "");
Expect(1, 43051, '\P{^__syloti-NAGRI}', "");
Expect(0, 43007, '\p{__syloti-NAGRI}', "");
Expect(1, 43007, '\p{^__syloti-NAGRI}', "");
Expect(1, 43007, '\P{__syloti-NAGRI}', "");
Expect(0, 43007, '\P{^__syloti-NAGRI}', "");
Error('\p{_ IS/a/syloti-nagri}');
Error('\P{_ IS/a/syloti-nagri}');
Expect(1, 43051, '\p{issylotinagri}', "");
Expect(0, 43051, '\p{^issylotinagri}', "");
Expect(0, 43051, '\P{issylotinagri}', "");
Expect(1, 43051, '\P{^issylotinagri}', "");
Expect(0, 43007, '\p{issylotinagri}', "");
Expect(1, 43007, '\p{^issylotinagri}', "");
Expect(1, 43007, '\P{issylotinagri}', "");
Expect(0, 43007, '\P{^issylotinagri}', "");
Expect(1, 43051, '\p{_ IS SylotiNAGRI}', "");
Expect(0, 43051, '\p{^_ IS SylotiNAGRI}', "");
Expect(0, 43051, '\P{_ IS SylotiNAGRI}', "");
Expect(1, 43051, '\P{^_ IS SylotiNAGRI}', "");
Expect(0, 43007, '\p{_ IS SylotiNAGRI}', "");
Expect(1, 43007, '\p{^_ IS SylotiNAGRI}', "");
Expect(1, 43007, '\P{_ IS SylotiNAGRI}', "");
Expect(0, 43007, '\P{^_ IS SylotiNAGRI}', "");
Error('\p{:=__Sylo}');
Error('\P{:=__Sylo}');
Expect(1, 43051, '\p{sylo}', "");
Expect(0, 43051, '\p{^sylo}', "");
Expect(0, 43051, '\P{sylo}', "");
Expect(1, 43051, '\P{^sylo}', "");
Expect(0, 43007, '\p{sylo}', "");
Expect(1, 43007, '\p{^sylo}', "");
Expect(1, 43007, '\P{sylo}', "");
Expect(0, 43007, '\P{^sylo}', "");
Expect(1, 43051, '\p{Sylo}', "");
Expect(0, 43051, '\p{^Sylo}', "");
Expect(0, 43051, '\P{Sylo}', "");
Expect(1, 43051, '\P{^Sylo}', "");
Expect(0, 43007, '\p{Sylo}', "");
Expect(1, 43007, '\p{^Sylo}', "");
Expect(1, 43007, '\P{Sylo}', "");
Expect(0, 43007, '\P{^Sylo}', "");
Error('\p{ 	Is	SYLO/a/}');
Error('\P{ 	Is	SYLO/a/}');
Expect(1, 43051, '\p{issylo}', "");
Expect(0, 43051, '\p{^issylo}', "");
Expect(0, 43051, '\P{issylo}', "");
Expect(1, 43051, '\P{^issylo}', "");
Expect(0, 43007, '\p{issylo}', "");
Expect(1, 43007, '\p{^issylo}', "");
Expect(1, 43007, '\P{issylo}', "");
Expect(0, 43007, '\P{^issylo}', "");
Expect(1, 43051, '\p{-	IsSylo}', "");
Expect(0, 43051, '\p{^-	IsSylo}', "");
Expect(0, 43051, '\P{-	IsSylo}', "");
Expect(1, 43051, '\P{^-	IsSylo}', "");
Expect(0, 43007, '\p{-	IsSylo}', "");
Expect(1, 43007, '\p{^-	IsSylo}', "");
Expect(1, 43007, '\P{-	IsSylo}', "");
Expect(0, 43007, '\P{^-	IsSylo}', "");
Error('\p{/a/		BALINESE}');
Error('\P{/a/		BALINESE}');
Expect(1, 6987, '\p{balinese}', "");
Expect(0, 6987, '\p{^balinese}', "");
Expect(0, 6987, '\P{balinese}', "");
Expect(1, 6987, '\P{^balinese}', "");
Expect(0, 6911, '\p{balinese}', "");
Expect(1, 6911, '\p{^balinese}', "");
Expect(1, 6911, '\P{balinese}', "");
Expect(0, 6911, '\P{^balinese}', "");
Expect(1, 6987, '\p{	-balinese}', "");
Expect(0, 6987, '\p{^	-balinese}', "");
Expect(0, 6987, '\P{	-balinese}', "");
Expect(1, 6987, '\P{^	-balinese}', "");
Expect(0, 6911, '\p{	-balinese}', "");
Expect(1, 6911, '\p{^	-balinese}', "");
Expect(1, 6911, '\P{	-balinese}', "");
Expect(0, 6911, '\P{^	-balinese}', "");
Error('\p{	_isbalinese/a/}');
Error('\P{	_isbalinese/a/}');
Expect(1, 6987, '\p{isbalinese}', "");
Expect(0, 6987, '\p{^isbalinese}', "");
Expect(0, 6987, '\P{isbalinese}', "");
Expect(1, 6987, '\P{^isbalinese}', "");
Expect(0, 6911, '\p{isbalinese}', "");
Expect(1, 6911, '\p{^isbalinese}', "");
Expect(1, 6911, '\P{isbalinese}', "");
Expect(0, 6911, '\P{^isbalinese}', "");
Expect(1, 6987, '\p{-	IS	balinese}', "");
Expect(0, 6987, '\p{^-	IS	balinese}', "");
Expect(0, 6987, '\P{-	IS	balinese}', "");
Expect(1, 6987, '\P{^-	IS	balinese}', "");
Expect(0, 6911, '\p{-	IS	balinese}', "");
Expect(1, 6911, '\p{^-	IS	balinese}', "");
Expect(1, 6911, '\P{-	IS	balinese}', "");
Expect(0, 6911, '\P{^-	IS	balinese}', "");
Error('\p{/a/__Bali}');
Error('\P{/a/__Bali}');
Expect(1, 6987, '\p{bali}', "");
Expect(0, 6987, '\p{^bali}', "");
Expect(0, 6987, '\P{bali}', "");
Expect(1, 6987, '\P{^bali}', "");
Expect(0, 6911, '\p{bali}', "");
Expect(1, 6911, '\p{^bali}', "");
Expect(1, 6911, '\P{bali}', "");
Expect(0, 6911, '\P{^bali}', "");
Expect(1, 6987, '\p{_	bali}', "");
Expect(0, 6987, '\p{^_	bali}', "");
Expect(0, 6987, '\P{_	bali}', "");
Expect(1, 6987, '\P{^_	bali}', "");
Expect(0, 6911, '\p{_	bali}', "");
Expect(1, 6911, '\p{^_	bali}', "");
Expect(1, 6911, '\P{_	bali}', "");
Expect(0, 6911, '\P{^_	bali}', "");
Error('\p{_Is:=BALI}');
Error('\P{_Is:=BALI}');
Expect(1, 6987, '\p{isbali}', "");
Expect(0, 6987, '\p{^isbali}', "");
Expect(0, 6987, '\P{isbali}', "");
Expect(1, 6987, '\P{^isbali}', "");
Expect(0, 6911, '\p{isbali}', "");
Expect(1, 6911, '\p{^isbali}', "");
Expect(1, 6911, '\P{isbali}', "");
Expect(0, 6911, '\P{^isbali}', "");
Expect(1, 6987, '\p{--IS	Bali}', "");
Expect(0, 6987, '\p{^--IS	Bali}', "");
Expect(0, 6987, '\P{--IS	Bali}', "");
Expect(1, 6987, '\P{^--IS	Bali}', "");
Expect(0, 6911, '\p{--IS	Bali}', "");
Expect(1, 6911, '\p{^--IS	Bali}', "");
Expect(1, 6911, '\P{--IS	Bali}', "");
Expect(0, 6911, '\P{^--IS	Bali}', "");
Error('\p{ -Miscellaneous SYMBOLS:=andARROWS}');
Error('\P{ -Miscellaneous SYMBOLS:=andARROWS}');
Expect(1, 11263, '\p{miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^miscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^miscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{miscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^miscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{-miscellaneous	SYMBOLS	AND-ARROWS}', "");
Expect(0, 11263, '\p{^-miscellaneous	SYMBOLS	AND-ARROWS}', "");
Expect(0, 11263, '\P{-miscellaneous	SYMBOLS	AND-ARROWS}', "");
Expect(1, 11263, '\P{^-miscellaneous	SYMBOLS	AND-ARROWS}', "");
Expect(0, 11007, '\p{-miscellaneous	SYMBOLS	AND-ARROWS}', "");
Expect(1, 11007, '\p{^-miscellaneous	SYMBOLS	AND-ARROWS}', "");
Expect(1, 11007, '\P{-miscellaneous	SYMBOLS	AND-ARROWS}', "");
Expect(0, 11007, '\P{^-miscellaneous	SYMBOLS	AND-ARROWS}', "");
Error('\p{-:=Is	Miscellaneous-symbols_And_Arrows}');
Error('\P{-:=Is	Miscellaneous-symbols_And_Arrows}');
Expect(1, 11263, '\p{ismiscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^ismiscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{ismiscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^ismiscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{ismiscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^ismiscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{ismiscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^ismiscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{_Is-miscellaneous Symbols_AND ARROWS}', "");
Expect(0, 11263, '\p{^_Is-miscellaneous Symbols_AND ARROWS}', "");
Expect(0, 11263, '\P{_Is-miscellaneous Symbols_AND ARROWS}', "");
Expect(1, 11263, '\P{^_Is-miscellaneous Symbols_AND ARROWS}', "");
Expect(0, 11007, '\p{_Is-miscellaneous Symbols_AND ARROWS}', "");
Expect(1, 11007, '\p{^_Is-miscellaneous Symbols_AND ARROWS}', "");
Expect(1, 11007, '\P{_Is-miscellaneous Symbols_AND ARROWS}', "");
Expect(0, 11007, '\P{^_Is-miscellaneous Symbols_AND ARROWS}', "");
Error('\p{--In	MISCELLANEOUS_Symbols-AndARROWS/a/}');
Error('\P{--In	MISCELLANEOUS_Symbols-AndARROWS/a/}');
Expect(1, 11263, '\p{inmiscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\p{^inmiscellaneoussymbolsandarrows}', "");
Expect(0, 11263, '\P{inmiscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\P{^inmiscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\p{inmiscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\p{^inmiscellaneoussymbolsandarrows}', "");
Expect(1, 11007, '\P{inmiscellaneoussymbolsandarrows}', "");
Expect(0, 11007, '\P{^inmiscellaneoussymbolsandarrows}', "");
Expect(1, 11263, '\p{_ In-Miscellaneous-Symbols AndArrows}', "");
Expect(0, 11263, '\p{^_ In-Miscellaneous-Symbols AndArrows}', "");
Expect(0, 11263, '\P{_ In-Miscellaneous-Symbols AndArrows}', "");
Expect(1, 11263, '\P{^_ In-Miscellaneous-Symbols AndArrows}', "");
Expect(0, 11007, '\p{_ In-Miscellaneous-Symbols AndArrows}', "");
Expect(1, 11007, '\p{^_ In-Miscellaneous-Symbols AndArrows}', "");
Expect(1, 11007, '\P{_ In-Miscellaneous-Symbols AndArrows}', "");
Expect(0, 11007, '\P{^_ In-Miscellaneous-Symbols AndArrows}', "");
Error('\p{	/a/Print}');
Error('\P{	/a/Print}');
Expect(1, 126, '\p{print}', "");
Expect(0, 126, '\p{^print}', "");
Expect(0, 126, '\P{print}', "");
Expect(1, 126, '\P{^print}', "");
Expect(0, 31, '\p{print}', "");
Expect(1, 31, '\p{^print}', "");
Expect(1, 31, '\P{print}', "");
Expect(0, 31, '\P{^print}', "");
Expect(1, 126, '\p{	 Print}', "");
Expect(0, 126, '\p{^	 Print}', "");
Expect(0, 126, '\P{	 Print}', "");
Expect(1, 126, '\P{^	 Print}', "");
Expect(0, 31, '\p{	 Print}', "");
Expect(1, 31, '\p{^	 Print}', "");
Expect(1, 31, '\P{	 Print}', "");
Expect(0, 31, '\P{^	 Print}', "");
Error('\p{/a/-_Is print}');
Error('\P{/a/-_Is print}');
Expect(1, 126, '\p{isprint}', "");
Expect(0, 126, '\p{^isprint}', "");
Expect(0, 126, '\P{isprint}', "");
Expect(1, 126, '\P{^isprint}', "");
Expect(0, 31, '\p{isprint}', "");
Expect(1, 31, '\p{^isprint}', "");
Expect(1, 31, '\P{isprint}', "");
Expect(0, 31, '\P{^isprint}', "");
Expect(1, 126, '\p{	-Is_print}', "");
Expect(0, 126, '\p{^	-Is_print}', "");
Expect(0, 126, '\P{	-Is_print}', "");
Expect(1, 126, '\P{^	-Is_print}', "");
Expect(0, 31, '\p{	-Is_print}', "");
Expect(1, 31, '\p{^	-Is_print}', "");
Expect(1, 31, '\P{	-Is_print}', "");
Expect(0, 31, '\P{^	-Is_print}', "");
Error('\p{:= -ids TRINARY Operator}');
Error('\P{:= -ids TRINARY Operator}');
Expect(1, 12275, '\p{idstrinaryoperator}', "");
Expect(0, 12275, '\p{^idstrinaryoperator}', "");
Expect(0, 12275, '\P{idstrinaryoperator}', "");
Expect(1, 12275, '\P{^idstrinaryoperator}', "");
Expect(0, 12273, '\p{idstrinaryoperator}', "");
Expect(1, 12273, '\p{^idstrinaryoperator}', "");
Expect(1, 12273, '\P{idstrinaryoperator}', "");
Expect(0, 12273, '\P{^idstrinaryoperator}', "");
Expect(1, 12275, '\p{		IDStrinary OPERATOR}', "");
Expect(0, 12275, '\p{^		IDStrinary OPERATOR}', "");
Expect(0, 12275, '\P{		IDStrinary OPERATOR}', "");
Expect(1, 12275, '\P{^		IDStrinary OPERATOR}', "");
Expect(0, 12273, '\p{		IDStrinary OPERATOR}', "");
Expect(1, 12273, '\p{^		IDStrinary OPERATOR}', "");
Expect(1, 12273, '\P{		IDStrinary OPERATOR}', "");
Expect(0, 12273, '\P{^		IDStrinary OPERATOR}', "");
Error('\p{is/a/ids	TRINARY-operator}');
Error('\P{is/a/ids	TRINARY-operator}');
Expect(1, 12275, '\p{isidstrinaryoperator}', "");
Expect(0, 12275, '\p{^isidstrinaryoperator}', "");
Expect(0, 12275, '\P{isidstrinaryoperator}', "");
Expect(1, 12275, '\P{^isidstrinaryoperator}', "");
Expect(0, 12273, '\p{isidstrinaryoperator}', "");
Expect(1, 12273, '\p{^isidstrinaryoperator}', "");
Expect(1, 12273, '\P{isidstrinaryoperator}', "");
Expect(0, 12273, '\P{^isidstrinaryoperator}', "");
Expect(1, 12275, '\p{-Is-IDS-Trinary Operator}', "");
Expect(0, 12275, '\p{^-Is-IDS-Trinary Operator}', "");
Expect(0, 12275, '\P{-Is-IDS-Trinary Operator}', "");
Expect(1, 12275, '\P{^-Is-IDS-Trinary Operator}', "");
Expect(0, 12273, '\p{-Is-IDS-Trinary Operator}', "");
Expect(1, 12273, '\p{^-Is-IDS-Trinary Operator}', "");
Expect(1, 12273, '\P{-Is-IDS-Trinary Operator}', "");
Expect(0, 12273, '\P{^-Is-IDS-Trinary Operator}', "");
Error('\p{/a/ IDST}');
Error('\P{/a/ IDST}');
Expect(1, 12275, '\p{idst}', "");
Expect(0, 12275, '\p{^idst}', "");
Expect(0, 12275, '\P{idst}', "");
Expect(1, 12275, '\P{^idst}', "");
Expect(0, 12273, '\p{idst}', "");
Expect(1, 12273, '\p{^idst}', "");
Expect(1, 12273, '\P{idst}', "");
Expect(0, 12273, '\P{^idst}', "");
Expect(1, 12275, '\p{_IDST}', "");
Expect(0, 12275, '\p{^_IDST}', "");
Expect(0, 12275, '\P{_IDST}', "");
Expect(1, 12275, '\P{^_IDST}', "");
Expect(0, 12273, '\p{_IDST}', "");
Expect(1, 12273, '\p{^_IDST}', "");
Expect(1, 12273, '\P{_IDST}', "");
Expect(0, 12273, '\P{^_IDST}', "");
Error('\p{	/a/isIDST}');
Error('\P{	/a/isIDST}');
Expect(1, 12275, '\p{isidst}', "");
Expect(0, 12275, '\p{^isidst}', "");
Expect(0, 12275, '\P{isidst}', "");
Expect(1, 12275, '\P{^isidst}', "");
Expect(0, 12273, '\p{isidst}', "");
Expect(1, 12273, '\p{^isidst}', "");
Expect(1, 12273, '\P{isidst}', "");
Expect(0, 12273, '\P{^isidst}', "");
Expect(1, 12275, '\p{	-isIDST}', "");
Expect(0, 12275, '\p{^	-isIDST}', "");
Expect(0, 12275, '\P{	-isIDST}', "");
Expect(1, 12275, '\P{^	-isIDST}', "");
Expect(0, 12273, '\p{	-isIDST}', "");
Expect(1, 12273, '\p{^	-isIDST}', "");
Expect(1, 12273, '\P{	-isIDST}', "");
Expect(0, 12273, '\P{^	-isIDST}', "");
Error('\p{ CJK_RADICALS:=Supplement}');
Error('\P{ CJK_RADICALS:=Supplement}');
Expect(1, 12031, '\p{cjkradicalssupplement}', "");
Expect(0, 12031, '\p{^cjkradicalssupplement}', "");
Expect(0, 12031, '\P{cjkradicalssupplement}', "");
Expect(1, 12031, '\P{^cjkradicalssupplement}', "");
Expect(0, 11903, '\p{cjkradicalssupplement}', "");
Expect(1, 11903, '\p{^cjkradicalssupplement}', "");
Expect(1, 11903, '\P{cjkradicalssupplement}', "");
Expect(0, 11903, '\P{^cjkradicalssupplement}', "");
Expect(1, 12031, '\p{	CJK Radicals Supplement}', "");
Expect(0, 12031, '\p{^	CJK Radicals Supplement}', "");
Expect(0, 12031, '\P{	CJK Radicals Supplement}', "");
Expect(1, 12031, '\P{^	CJK Radicals Supplement}', "");
Expect(0, 11903, '\p{	CJK Radicals Supplement}', "");
Expect(1, 11903, '\p{^	CJK Radicals Supplement}', "");
Expect(1, 11903, '\P{	CJK Radicals Supplement}', "");
Expect(0, 11903, '\P{^	CJK Radicals Supplement}', "");
Error('\p{:=-	IScjkRADICALS Supplement}');
Error('\P{:=-	IScjkRADICALS Supplement}');
Expect(1, 12031, '\p{iscjkradicalssupplement}', "");
Expect(0, 12031, '\p{^iscjkradicalssupplement}', "");
Expect(0, 12031, '\P{iscjkradicalssupplement}', "");
Expect(1, 12031, '\P{^iscjkradicalssupplement}', "");
Expect(0, 11903, '\p{iscjkradicalssupplement}', "");
Expect(1, 11903, '\p{^iscjkradicalssupplement}', "");
Expect(1, 11903, '\P{iscjkradicalssupplement}', "");
Expect(0, 11903, '\P{^iscjkradicalssupplement}', "");
Expect(1, 12031, '\p{ Is-CJKradicals-Supplement}', "");
Expect(0, 12031, '\p{^ Is-CJKradicals-Supplement}', "");
Expect(0, 12031, '\P{ Is-CJKradicals-Supplement}', "");
Expect(1, 12031, '\P{^ Is-CJKradicals-Supplement}', "");
Expect(0, 11903, '\p{ Is-CJKradicals-Supplement}', "");
Expect(1, 11903, '\p{^ Is-CJKradicals-Supplement}', "");
Expect(1, 11903, '\P{ Is-CJKradicals-Supplement}', "");
Expect(0, 11903, '\P{^ Is-CJKradicals-Supplement}', "");
Error('\p{ :=IN_CJK_RADICALSSupplement}');
Error('\P{ :=IN_CJK_RADICALSSupplement}');
Expect(1, 12031, '\p{incjkradicalssupplement}', "");
Expect(0, 12031, '\p{^incjkradicalssupplement}', "");
Expect(0, 12031, '\P{incjkradicalssupplement}', "");
Expect(1, 12031, '\P{^incjkradicalssupplement}', "");
Expect(0, 11903, '\p{incjkradicalssupplement}', "");
Expect(1, 11903, '\p{^incjkradicalssupplement}', "");
Expect(1, 11903, '\P{incjkradicalssupplement}', "");
Expect(0, 11903, '\P{^incjkradicalssupplement}', "");
Expect(1, 12031, '\p{_In	cjk RadicalsSupplement}', "");
Expect(0, 12031, '\p{^_In	cjk RadicalsSupplement}', "");
Expect(0, 12031, '\P{_In	cjk RadicalsSupplement}', "");
Expect(1, 12031, '\P{^_In	cjk RadicalsSupplement}', "");
Expect(0, 11903, '\p{_In	cjk RadicalsSupplement}', "");
Expect(1, 11903, '\p{^_In	cjk RadicalsSupplement}', "");
Expect(1, 11903, '\P{_In	cjk RadicalsSupplement}', "");
Expect(0, 11903, '\P{^_In	cjk RadicalsSupplement}', "");
Error('\p{-/a/In-vai}');
Error('\P{-/a/In-vai}');
Expect(1, 42559, '\p{invai}', "");
Expect(0, 42559, '\p{^invai}', "");
Expect(0, 42559, '\P{invai}', "");
Expect(1, 42559, '\P{^invai}', "");
Expect(0, 42239, '\p{invai}', "");
Expect(1, 42239, '\p{^invai}', "");
Expect(1, 42239, '\P{invai}', "");
Expect(0, 42239, '\P{^invai}', "");
Expect(1, 42559, '\p{	_In-VAI}', "");
Expect(0, 42559, '\p{^	_In-VAI}', "");
Expect(0, 42559, '\P{	_In-VAI}', "");
Expect(1, 42559, '\P{^	_In-VAI}', "");
Expect(0, 42239, '\p{	_In-VAI}', "");
Expect(1, 42239, '\p{^	_In-VAI}', "");
Expect(1, 42239, '\P{	_In-VAI}', "");
Expect(0, 42239, '\P{^	_In-VAI}', "");
Error('\p{- THAANA/a/}');
Error('\P{- THAANA/a/}');
Expect(1, 1969, '\p{thaana}', "");
Expect(0, 1969, '\p{^thaana}', "");
Expect(0, 1969, '\P{thaana}', "");
Expect(1, 1969, '\P{^thaana}', "");
Expect(0, 1919, '\p{thaana}', "");
Expect(1, 1919, '\p{^thaana}', "");
Expect(1, 1919, '\P{thaana}', "");
Expect(0, 1919, '\P{^thaana}', "");
Expect(1, 1969, '\p{_ thaana}', "");
Expect(0, 1969, '\p{^_ thaana}', "");
Expect(0, 1969, '\P{_ thaana}', "");
Expect(1, 1969, '\P{^_ thaana}', "");
Expect(0, 1919, '\p{_ thaana}', "");
Expect(1, 1919, '\p{^_ thaana}', "");
Expect(1, 1919, '\P{_ thaana}', "");
Expect(0, 1919, '\P{^_ thaana}', "");
Error('\p{_	IS_Thaana:=}');
Error('\P{_	IS_Thaana:=}');
Expect(1, 1969, '\p{isthaana}', "");
Expect(0, 1969, '\p{^isthaana}', "");
Expect(0, 1969, '\P{isthaana}', "");
Expect(1, 1969, '\P{^isthaana}', "");
Expect(0, 1919, '\p{isthaana}', "");
Expect(1, 1919, '\p{^isthaana}', "");
Expect(1, 1919, '\P{isthaana}', "");
Expect(0, 1919, '\P{^isthaana}', "");
Expect(1, 1969, '\p{	Is-Thaana}', "");
Expect(0, 1969, '\p{^	Is-Thaana}', "");
Expect(0, 1969, '\P{	Is-Thaana}', "");
Expect(1, 1969, '\P{^	Is-Thaana}', "");
Expect(0, 1919, '\p{	Is-Thaana}', "");
Expect(1, 1919, '\p{^	Is-Thaana}', "");
Expect(1, 1919, '\P{	Is-Thaana}', "");
Expect(0, 1919, '\P{^	Is-Thaana}', "");
Error('\p{:= thaa}');
Error('\P{:= thaa}');
Expect(1, 1969, '\p{thaa}', "");
Expect(0, 1969, '\p{^thaa}', "");
Expect(0, 1969, '\P{thaa}', "");
Expect(1, 1969, '\P{^thaa}', "");
Expect(0, 1919, '\p{thaa}', "");
Expect(1, 1919, '\p{^thaa}', "");
Expect(1, 1919, '\P{thaa}', "");
Expect(0, 1919, '\P{^thaa}', "");
Expect(1, 1969, '\p{_THAA}', "");
Expect(0, 1969, '\p{^_THAA}', "");
Expect(0, 1969, '\P{_THAA}', "");
Expect(1, 1969, '\P{^_THAA}', "");
Expect(0, 1919, '\p{_THAA}', "");
Expect(1, 1919, '\p{^_THAA}', "");
Expect(1, 1919, '\P{_THAA}', "");
Expect(0, 1919, '\P{^_THAA}', "");
Error('\p{- IS	THAA:=}');
Error('\P{- IS	THAA:=}');
Expect(1, 1969, '\p{isthaa}', "");
Expect(0, 1969, '\p{^isthaa}', "");
Expect(0, 1969, '\P{isthaa}', "");
Expect(1, 1969, '\P{^isthaa}', "");
Expect(0, 1919, '\p{isthaa}', "");
Expect(1, 1919, '\p{^isthaa}', "");
Expect(1, 1919, '\P{isthaa}', "");
Expect(0, 1919, '\P{^isthaa}', "");
Expect(1, 1969, '\p{		Is Thaa}', "");
Expect(0, 1969, '\p{^		Is Thaa}', "");
Expect(0, 1969, '\P{		Is Thaa}', "");
Expect(1, 1969, '\P{^		Is Thaa}', "");
Expect(0, 1919, '\p{		Is Thaa}', "");
Expect(1, 1919, '\p{^		Is Thaa}', "");
Expect(1, 1919, '\P{		Is Thaa}', "");
Expect(0, 1919, '\P{^		Is Thaa}', "");
Error('\p{ /a/other-IDStart}');
Error('\P{ /a/other-IDStart}');
Expect(1, 8472, '\p{otheridstart}', 'deprecated');
Expect(0, 8472, '\p{^otheridstart}', 'deprecated');
Expect(0, 8472, '\P{otheridstart}', 'deprecated');
Expect(1, 8472, '\P{^otheridstart}', 'deprecated');
Expect(0, 8471, '\p{otheridstart}', 'deprecated');
Expect(1, 8471, '\p{^otheridstart}', 'deprecated');
Expect(1, 8471, '\P{otheridstart}', 'deprecated');
Expect(0, 8471, '\P{^otheridstart}', 'deprecated');
Expect(1, 8472, '\p{ 	Other ID-start}', 'deprecated');
Expect(0, 8472, '\p{^ 	Other ID-start}', 'deprecated');
Expect(0, 8472, '\P{ 	Other ID-start}', 'deprecated');
Expect(1, 8472, '\P{^ 	Other ID-start}', 'deprecated');
Expect(0, 8471, '\p{ 	Other ID-start}', 'deprecated');
Expect(1, 8471, '\p{^ 	Other ID-start}', 'deprecated');
Expect(1, 8471, '\P{ 	Other ID-start}', 'deprecated');
Expect(0, 8471, '\P{^ 	Other ID-start}', 'deprecated');
Error('\p{_Is/a/Other_IDStart}');
Error('\P{_Is/a/Other_IDStart}');
Expect(1, 8472, '\p{isotheridstart}', 'deprecated');
Expect(0, 8472, '\p{^isotheridstart}', 'deprecated');
Expect(0, 8472, '\P{isotheridstart}', 'deprecated');
Expect(1, 8472, '\P{^isotheridstart}', 'deprecated');
Expect(0, 8471, '\p{isotheridstart}', 'deprecated');
Expect(1, 8471, '\p{^isotheridstart}', 'deprecated');
Expect(1, 8471, '\P{isotheridstart}', 'deprecated');
Expect(0, 8471, '\P{^isotheridstart}', 'deprecated');
Expect(1, 8472, '\p{		IS_OTHER ID_Start}', 'deprecated');
Expect(0, 8472, '\p{^		IS_OTHER ID_Start}', 'deprecated');
Expect(0, 8472, '\P{		IS_OTHER ID_Start}', 'deprecated');
Expect(1, 8472, '\P{^		IS_OTHER ID_Start}', 'deprecated');
Expect(0, 8471, '\p{		IS_OTHER ID_Start}', 'deprecated');
Expect(1, 8471, '\p{^		IS_OTHER ID_Start}', 'deprecated');
Expect(1, 8471, '\P{		IS_OTHER ID_Start}', 'deprecated');
Expect(0, 8471, '\P{^		IS_OTHER ID_Start}', 'deprecated');
Error('\p{/a/_ OIDS}');
Error('\P{/a/_ OIDS}');
Expect(1, 8472, '\p{oids}', 'deprecated');
Expect(0, 8472, '\p{^oids}', 'deprecated');
Expect(0, 8472, '\P{oids}', 'deprecated');
Expect(1, 8472, '\P{^oids}', 'deprecated');
Expect(0, 8471, '\p{oids}', 'deprecated');
Expect(1, 8471, '\p{^oids}', 'deprecated');
Expect(1, 8471, '\P{oids}', 'deprecated');
Expect(0, 8471, '\P{^oids}', 'deprecated');
Expect(1, 8472, '\p{__OIDS}', 'deprecated');
Expect(0, 8472, '\p{^__OIDS}', 'deprecated');
Expect(0, 8472, '\P{__OIDS}', 'deprecated');
Expect(1, 8472, '\P{^__OIDS}', 'deprecated');
Expect(0, 8471, '\p{__OIDS}', 'deprecated');
Expect(1, 8471, '\p{^__OIDS}', 'deprecated');
Expect(1, 8471, '\P{__OIDS}', 'deprecated');
Expect(0, 8471, '\P{^__OIDS}', 'deprecated');
Error('\p{ /a/Is OIDS}');
Error('\P{ /a/Is OIDS}');
Expect(1, 8472, '\p{isoids}', 'deprecated');
Expect(0, 8472, '\p{^isoids}', 'deprecated');
Expect(0, 8472, '\P{isoids}', 'deprecated');
Expect(1, 8472, '\P{^isoids}', 'deprecated');
Expect(0, 8471, '\p{isoids}', 'deprecated');
Expect(1, 8471, '\p{^isoids}', 'deprecated');
Expect(1, 8471, '\P{isoids}', 'deprecated');
Expect(0, 8471, '\P{^isoids}', 'deprecated');
Expect(1, 8472, '\p{__IS_OIDS}', 'deprecated');
Expect(0, 8472, '\p{^__IS_OIDS}', 'deprecated');
Expect(0, 8472, '\P{__IS_OIDS}', 'deprecated');
Expect(1, 8472, '\P{^__IS_OIDS}', 'deprecated');
Expect(0, 8471, '\p{__IS_OIDS}', 'deprecated');
Expect(1, 8471, '\p{^__IS_OIDS}', 'deprecated');
Expect(1, 8471, '\P{__IS_OIDS}', 'deprecated');
Expect(0, 8471, '\P{^__IS_OIDS}', 'deprecated');
Error('\p{/a/- Specials}');
Error('\P{/a/- Specials}');
Expect(1, 65520, '\p{specials}', "");
Expect(0, 65520, '\p{^specials}', "");
Expect(0, 65520, '\P{specials}', "");
Expect(1, 65520, '\P{^specials}', "");
Expect(0, 65519, '\p{specials}', "");
Expect(1, 65519, '\p{^specials}', "");
Expect(1, 65519, '\P{specials}', "");
Expect(0, 65519, '\P{^specials}', "");
Expect(1, 65520, '\p{SPECIALS}', "");
Expect(0, 65520, '\p{^SPECIALS}', "");
Expect(0, 65520, '\P{SPECIALS}', "");
Expect(1, 65520, '\P{^SPECIALS}', "");
Expect(0, 65519, '\p{SPECIALS}', "");
Expect(1, 65519, '\p{^SPECIALS}', "");
Expect(1, 65519, '\P{SPECIALS}', "");
Expect(0, 65519, '\P{^SPECIALS}', "");
Error('\p{IS:=specials}');
Error('\P{IS:=specials}');
Expect(1, 65520, '\p{isspecials}', "");
Expect(0, 65520, '\p{^isspecials}', "");
Expect(0, 65520, '\P{isspecials}', "");
Expect(1, 65520, '\P{^isspecials}', "");
Expect(0, 65519, '\p{isspecials}', "");
Expect(1, 65519, '\p{^isspecials}', "");
Expect(1, 65519, '\P{isspecials}', "");
Expect(0, 65519, '\P{^isspecials}', "");
Expect(1, 65520, '\p{	 Is	Specials}', "");
Expect(0, 65520, '\p{^	 Is	Specials}', "");
Expect(0, 65520, '\P{	 Is	Specials}', "");
Expect(1, 65520, '\P{^	 Is	Specials}', "");
Expect(0, 65519, '\p{	 Is	Specials}', "");
Expect(1, 65519, '\p{^	 Is	Specials}', "");
Expect(1, 65519, '\P{	 Is	Specials}', "");
Expect(0, 65519, '\P{^	 Is	Specials}', "");
Error('\p{_In_specials/a/}');
Error('\P{_In_specials/a/}');
Expect(1, 65520, '\p{inspecials}', "");
Expect(0, 65520, '\p{^inspecials}', "");
Expect(0, 65520, '\P{inspecials}', "");
Expect(1, 65520, '\P{^inspecials}', "");
Expect(0, 65519, '\p{inspecials}', "");
Expect(1, 65519, '\p{^inspecials}', "");
Expect(1, 65519, '\P{inspecials}', "");
Expect(0, 65519, '\P{^inspecials}', "");
Expect(1, 65520, '\p{__in Specials}', "");
Expect(0, 65520, '\p{^__in Specials}', "");
Expect(0, 65520, '\P{__in Specials}', "");
Expect(1, 65520, '\P{^__in Specials}', "");
Expect(0, 65519, '\p{__in Specials}', "");
Expect(1, 65519, '\p{^__in Specials}', "");
Expect(1, 65519, '\P{__in Specials}', "");
Expect(0, 65519, '\P{^__in Specials}', "");
Error('\p{ :=MATHEMATICAL-Operators}');
Error('\P{ :=MATHEMATICAL-Operators}');
Expect(1, 8959, '\p{mathematicaloperators}', "");
Expect(0, 8959, '\p{^mathematicaloperators}', "");
Expect(0, 8959, '\P{mathematicaloperators}', "");
Expect(1, 8959, '\P{^mathematicaloperators}', "");
Expect(0, 8703, '\p{mathematicaloperators}', "");
Expect(1, 8703, '\p{^mathematicaloperators}', "");
Expect(1, 8703, '\P{mathematicaloperators}', "");
Expect(0, 8703, '\P{^mathematicaloperators}', "");
Expect(1, 8959, '\p{  mathematicalOperators}', "");
Expect(0, 8959, '\p{^  mathematicalOperators}', "");
Expect(0, 8959, '\P{  mathematicalOperators}', "");
Expect(1, 8959, '\P{^  mathematicalOperators}', "");
Expect(0, 8703, '\p{  mathematicalOperators}', "");
Expect(1, 8703, '\p{^  mathematicalOperators}', "");
Expect(1, 8703, '\P{  mathematicalOperators}', "");
Expect(0, 8703, '\P{^  mathematicalOperators}', "");
Error('\p{	-is:=MATHEMATICAL	Operators}');
Error('\P{	-is:=MATHEMATICAL	Operators}');
Expect(1, 8959, '\p{ismathematicaloperators}', "");
Expect(0, 8959, '\p{^ismathematicaloperators}', "");
Expect(0, 8959, '\P{ismathematicaloperators}', "");
Expect(1, 8959, '\P{^ismathematicaloperators}', "");
Expect(0, 8703, '\p{ismathematicaloperators}', "");
Expect(1, 8703, '\p{^ismathematicaloperators}', "");
Expect(1, 8703, '\P{ismathematicaloperators}', "");
Expect(0, 8703, '\P{^ismathematicaloperators}', "");
Expect(1, 8959, '\p{_-is mathematical-operators}', "");
Expect(0, 8959, '\p{^_-is mathematical-operators}', "");
Expect(0, 8959, '\P{_-is mathematical-operators}', "");
Expect(1, 8959, '\P{^_-is mathematical-operators}', "");
Expect(0, 8703, '\p{_-is mathematical-operators}', "");
Expect(1, 8703, '\p{^_-is mathematical-operators}', "");
Expect(1, 8703, '\P{_-is mathematical-operators}', "");
Expect(0, 8703, '\P{^_-is mathematical-operators}', "");
Error('\p{--in_Mathematical:=operators}');
Error('\P{--in_Mathematical:=operators}');
Expect(1, 8959, '\p{inmathematicaloperators}', "");
Expect(0, 8959, '\p{^inmathematicaloperators}', "");
Expect(0, 8959, '\P{inmathematicaloperators}', "");
Expect(1, 8959, '\P{^inmathematicaloperators}', "");
Expect(0, 8703, '\p{inmathematicaloperators}', "");
Expect(1, 8703, '\p{^inmathematicaloperators}', "");
Expect(1, 8703, '\P{inmathematicaloperators}', "");
Expect(0, 8703, '\P{^inmathematicaloperators}', "");
Expect(1, 8959, '\p{	 InMATHEMATICAL_OPERATORS}', "");
Expect(0, 8959, '\p{^	 InMATHEMATICAL_OPERATORS}', "");
Expect(0, 8959, '\P{	 InMATHEMATICAL_OPERATORS}', "");
Expect(1, 8959, '\P{^	 InMATHEMATICAL_OPERATORS}', "");
Expect(0, 8703, '\p{	 InMATHEMATICAL_OPERATORS}', "");
Expect(1, 8703, '\p{^	 InMATHEMATICAL_OPERATORS}', "");
Expect(1, 8703, '\P{	 InMATHEMATICAL_OPERATORS}', "");
Expect(0, 8703, '\P{^	 InMATHEMATICAL_OPERATORS}', "");
Error('\p{-_bidi_MIRRORED/a/}');
Error('\P{-_bidi_MIRRORED/a/}');
Expect(1, 41, '\p{bidimirrored}', "");
Expect(0, 41, '\p{^bidimirrored}', "");
Expect(0, 41, '\P{bidimirrored}', "");
Expect(1, 41, '\P{^bidimirrored}', "");
Expect(0, 39, '\p{bidimirrored}', "");
Expect(1, 39, '\p{^bidimirrored}', "");
Expect(1, 39, '\P{bidimirrored}', "");
Expect(0, 39, '\P{^bidimirrored}', "");
Expect(1, 41, '\p{	bidimirrored}', "");
Expect(0, 41, '\p{^	bidimirrored}', "");
Expect(0, 41, '\P{	bidimirrored}', "");
Expect(1, 41, '\P{^	bidimirrored}', "");
Expect(0, 39, '\p{	bidimirrored}', "");
Expect(1, 39, '\p{^	bidimirrored}', "");
Expect(1, 39, '\P{	bidimirrored}', "");
Expect(0, 39, '\P{^	bidimirrored}', "");
Error('\p{/a/isbidi	mirrored}');
Error('\P{/a/isbidi	mirrored}');
Expect(1, 41, '\p{isbidimirrored}', "");
Expect(0, 41, '\p{^isbidimirrored}', "");
Expect(0, 41, '\P{isbidimirrored}', "");
Expect(1, 41, '\P{^isbidimirrored}', "");
Expect(0, 39, '\p{isbidimirrored}', "");
Expect(1, 39, '\p{^isbidimirrored}', "");
Expect(1, 39, '\P{isbidimirrored}', "");
Expect(0, 39, '\P{^isbidimirrored}', "");
Expect(1, 41, '\p{_-is	Bidi	MIRRORED}', "");
Expect(0, 41, '\p{^_-is	Bidi	MIRRORED}', "");
Expect(0, 41, '\P{_-is	Bidi	MIRRORED}', "");
Expect(1, 41, '\P{^_-is	Bidi	MIRRORED}', "");
Expect(0, 39, '\p{_-is	Bidi	MIRRORED}', "");
Expect(1, 39, '\p{^_-is	Bidi	MIRRORED}', "");
Expect(1, 39, '\P{_-is	Bidi	MIRRORED}', "");
Expect(0, 39, '\P{^_-is	Bidi	MIRRORED}', "");
Error('\p{	 BIDI/a/M}');
Error('\P{	 BIDI/a/M}');
Expect(1, 41, '\p{bidim}', "");
Expect(0, 41, '\p{^bidim}', "");
Expect(0, 41, '\P{bidim}', "");
Expect(1, 41, '\P{^bidim}', "");
Expect(0, 39, '\p{bidim}', "");
Expect(1, 39, '\p{^bidim}', "");
Expect(1, 39, '\P{bidim}', "");
Expect(0, 39, '\P{^bidim}', "");
Expect(1, 41, '\p{_BIDIM}', "");
Expect(0, 41, '\p{^_BIDIM}', "");
Expect(0, 41, '\P{_BIDIM}', "");
Expect(1, 41, '\P{^_BIDIM}', "");
Expect(0, 39, '\p{_BIDIM}', "");
Expect(1, 39, '\p{^_BIDIM}', "");
Expect(1, 39, '\P{_BIDIM}', "");
Expect(0, 39, '\P{^_BIDIM}', "");
Error('\p{	-Is_Bidi/a/M}');
Error('\P{	-Is_Bidi/a/M}');
Expect(1, 41, '\p{isbidim}', "");
Expect(0, 41, '\p{^isbidim}', "");
Expect(0, 41, '\P{isbidim}', "");
Expect(1, 41, '\P{^isbidim}', "");
Expect(0, 39, '\p{isbidim}', "");
Expect(1, 39, '\p{^isbidim}', "");
Expect(1, 39, '\P{isbidim}', "");
Expect(0, 39, '\P{^isbidim}', "");
Expect(1, 41, '\p{_	Is-Bidi_M}', "");
Expect(0, 41, '\p{^_	Is-Bidi_M}', "");
Expect(0, 41, '\P{_	Is-Bidi_M}', "");
Expect(1, 41, '\P{^_	Is-Bidi_M}', "");
Expect(0, 39, '\p{_	Is-Bidi_M}', "");
Expect(1, 39, '\p{^_	Is-Bidi_M}', "");
Expect(1, 39, '\P{_	Is-Bidi_M}', "");
Expect(0, 39, '\P{^_	Is-Bidi_M}', "");
Error('\p{Katakana_Or_Hiragana}');
Error('\P{Katakana_Or_Hiragana}');
Error('\p{Is_Katakana_Or_Hiragana}');
Error('\P{Is_Katakana_Or_Hiragana}');
Error('\p{Hrkt}');
Error('\P{Hrkt}');
Error('\p{Is_Hrkt}');
Error('\P{Is_Hrkt}');
Error('\p{:=	OTHER_symbol}');
Error('\P{:=	OTHER_symbol}');
Expect(1, 167, '\p{othersymbol}', "");
Expect(0, 167, '\p{^othersymbol}', "");
Expect(0, 167, '\P{othersymbol}', "");
Expect(1, 167, '\P{^othersymbol}', "");
Expect(0, 165, '\p{othersymbol}', "");
Expect(1, 165, '\p{^othersymbol}', "");
Expect(1, 165, '\P{othersymbol}', "");
Expect(0, 165, '\P{^othersymbol}', "");
Expect(1, 167, '\p{	Other	Symbol}', "");
Expect(0, 167, '\p{^	Other	Symbol}', "");
Expect(0, 167, '\P{	Other	Symbol}', "");
Expect(1, 167, '\P{^	Other	Symbol}', "");
Expect(0, 165, '\p{	Other	Symbol}', "");
Expect(1, 165, '\p{^	Other	Symbol}', "");
Expect(1, 165, '\P{	Other	Symbol}', "");
Expect(0, 165, '\P{^	Other	Symbol}', "");
Error('\p{/a/isOther_SYMBOL}');
Error('\P{/a/isOther_SYMBOL}');
Expect(1, 167, '\p{isothersymbol}', "");
Expect(0, 167, '\p{^isothersymbol}', "");
Expect(0, 167, '\P{isothersymbol}', "");
Expect(1, 167, '\P{^isothersymbol}', "");
Expect(0, 165, '\p{isothersymbol}', "");
Expect(1, 165, '\p{^isothersymbol}', "");
Expect(1, 165, '\P{isothersymbol}', "");
Expect(0, 165, '\P{^isothersymbol}', "");
Expect(1, 167, '\p{ Is Other-symbol}', "");
Expect(0, 167, '\p{^ Is Other-symbol}', "");
Expect(0, 167, '\P{ Is Other-symbol}', "");
Expect(1, 167, '\P{^ Is Other-symbol}', "");
Expect(0, 165, '\p{ Is Other-symbol}', "");
Expect(1, 165, '\p{^ Is Other-symbol}', "");
Expect(1, 165, '\P{ Is Other-symbol}', "");
Expect(0, 165, '\P{^ Is Other-symbol}', "");
Error('\p{:=So}');
Error('\P{:=So}');
Expect(1, 167, '\p{so}', "");
Expect(0, 167, '\p{^so}', "");
Expect(0, 167, '\P{so}', "");
Expect(1, 167, '\P{^so}', "");
Expect(0, 165, '\p{so}', "");
Expect(1, 165, '\p{^so}', "");
Expect(1, 165, '\P{so}', "");
Expect(0, 165, '\P{^so}', "");
Expect(1, 167, '\p{  So}', "");
Expect(0, 167, '\p{^  So}', "");
Expect(0, 167, '\P{  So}', "");
Expect(1, 167, '\P{^  So}', "");
Expect(0, 165, '\p{  So}', "");
Expect(1, 165, '\p{^  So}', "");
Expect(1, 165, '\P{  So}', "");
Expect(0, 165, '\P{^  So}', "");
Error('\p{-is:=SO}');
Error('\P{-is:=SO}');
Expect(1, 167, '\p{isso}', "");
Expect(0, 167, '\p{^isso}', "");
Expect(0, 167, '\P{isso}', "");
Expect(1, 167, '\P{^isso}', "");
Expect(0, 165, '\p{isso}', "");
Expect(1, 165, '\p{^isso}', "");
Expect(1, 165, '\P{isso}', "");
Expect(0, 165, '\P{^isso}', "");
Expect(1, 167, '\p{_	IS So}', "");
Expect(0, 167, '\p{^_	IS So}', "");
Expect(0, 167, '\P{_	IS So}', "");
Expect(1, 167, '\P{^_	IS So}', "");
Expect(0, 165, '\p{_	IS So}', "");
Expect(1, 165, '\p{^_	IS So}', "");
Expect(1, 165, '\P{_	IS So}', "");
Expect(0, 165, '\P{^_	IS So}', "");
Error('\p{ any/a/}');
Error('\P{ any/a/}');
Expect(1, 1, '\p{any}', "");
Expect(0, 1, '\p{^any}', "");
Expect(0, 1, '\P{any}', "");
Expect(1, 1, '\P{^any}', "");
Expect(1, 1, '\p{-_Any}', "");
Expect(0, 1, '\p{^-_Any}', "");
Expect(0, 1, '\P{-_Any}', "");
Expect(1, 1, '\P{^-_Any}', "");
Error('\p{  All/a/}');
Error('\P{  All/a/}');
Expect(1, 1, '\p{all}', "");
Expect(0, 1, '\p{^all}', "");
Expect(0, 1, '\P{all}', "");
Expect(1, 1, '\P{^all}', "");
Expect(1, 1, '\p{	-All}', "");
Expect(0, 1, '\p{^	-All}', "");
Expect(0, 1, '\P{	-All}', "");
Expect(1, 1, '\P{^	-All}', "");
Error('\p{_ IsAny:=}');
Error('\P{_ IsAny:=}');
Expect(1, 1, '\p{isany}', "");
Expect(0, 1, '\p{^isany}', "");
Expect(0, 1, '\P{isany}', "");
Expect(1, 1, '\P{^isany}', "");
Expect(1, 1, '\p{ _IS	any}', "");
Expect(0, 1, '\p{^ _IS	any}', "");
Expect(0, 1, '\P{ _IS	any}', "");
Expect(1, 1, '\P{^ _IS	any}', "");
Error('\p{_:=IsAll}');
Error('\P{_:=IsAll}');
Expect(1, 1, '\p{isall}', "");
Expect(0, 1, '\p{^isall}', "");
Expect(0, 1, '\P{isall}', "");
Expect(1, 1, '\P{^isall}', "");
Expect(1, 1, '\p{ _Is_All}', "");
Expect(0, 1, '\p{^ _Is_All}', "");
Expect(0, 1, '\P{ _Is_All}', "");
Expect(1, 1, '\P{^ _Is_All}', "");
Error('\p{/a/--Other	Letter}');
Error('\P{/a/--Other	Letter}');
Expect(1, 443, '\p{otherletter}', "");
Expect(0, 443, '\p{^otherletter}', "");
Expect(0, 443, '\P{otherletter}', "");
Expect(1, 443, '\P{^otherletter}', "");
Expect(0, 442, '\p{otherletter}', "");
Expect(1, 442, '\p{^otherletter}', "");
Expect(1, 442, '\P{otherletter}', "");
Expect(0, 442, '\P{^otherletter}', "");
Expect(1, 443, '\p{--OTHER	Letter}', "");
Expect(0, 443, '\p{^--OTHER	Letter}', "");
Expect(0, 443, '\P{--OTHER	Letter}', "");
Expect(1, 443, '\P{^--OTHER	Letter}', "");
Expect(0, 442, '\p{--OTHER	Letter}', "");
Expect(1, 442, '\p{^--OTHER	Letter}', "");
Expect(1, 442, '\P{--OTHER	Letter}', "");
Expect(0, 442, '\P{^--OTHER	Letter}', "");
Error('\p{ /a/Is OTHER-Letter}');
Error('\P{ /a/Is OTHER-Letter}');
Expect(1, 443, '\p{isotherletter}', "");
Expect(0, 443, '\p{^isotherletter}', "");
Expect(0, 443, '\P{isotherletter}', "");
Expect(1, 443, '\P{^isotherletter}', "");
Expect(0, 442, '\p{isotherletter}', "");
Expect(1, 442, '\p{^isotherletter}', "");
Expect(1, 442, '\P{isotherletter}', "");
Expect(0, 442, '\P{^isotherletter}', "");
Expect(1, 443, '\p{-IsOTHER	LETTER}', "");
Expect(0, 443, '\p{^-IsOTHER	LETTER}', "");
Expect(0, 443, '\P{-IsOTHER	LETTER}', "");
Expect(1, 443, '\P{^-IsOTHER	LETTER}', "");
Expect(0, 442, '\p{-IsOTHER	LETTER}', "");
Expect(1, 442, '\p{^-IsOTHER	LETTER}', "");
Expect(1, 442, '\P{-IsOTHER	LETTER}', "");
Expect(0, 442, '\P{^-IsOTHER	LETTER}', "");
Error('\p{/a/__lo}');
Error('\P{/a/__lo}');
Expect(1, 443, '\p{lo}', "");
Expect(0, 443, '\p{^lo}', "");
Expect(0, 443, '\P{lo}', "");
Expect(1, 443, '\P{^lo}', "");
Expect(0, 442, '\p{lo}', "");
Expect(1, 442, '\p{^lo}', "");
Expect(1, 442, '\P{lo}', "");
Expect(0, 442, '\P{^lo}', "");
Expect(1, 443, '\p{ -Lo}', "");
Expect(0, 443, '\p{^ -Lo}', "");
Expect(0, 443, '\P{ -Lo}', "");
Expect(1, 443, '\P{^ -Lo}', "");
Expect(0, 442, '\p{ -Lo}', "");
Expect(1, 442, '\p{^ -Lo}', "");
Expect(1, 442, '\P{ -Lo}', "");
Expect(0, 442, '\P{^ -Lo}', "");
Error('\p{	:=Is LO}');
Error('\P{	:=Is LO}');
Expect(1, 443, '\p{islo}', "");
Expect(0, 443, '\p{^islo}', "");
Expect(0, 443, '\P{islo}', "");
Expect(1, 443, '\P{^islo}', "");
Expect(0, 442, '\p{islo}', "");
Expect(1, 442, '\p{^islo}', "");
Expect(1, 442, '\P{islo}', "");
Expect(0, 442, '\P{^islo}', "");
Expect(1, 443, '\p{  Is_lo}', "");
Expect(0, 443, '\p{^  Is_lo}', "");
Expect(0, 443, '\P{  Is_lo}', "");
Expect(1, 443, '\P{^  Is_lo}', "");
Expect(0, 442, '\p{  Is_lo}', "");
Expect(1, 442, '\p{^  Is_lo}', "");
Expect(1, 442, '\P{  Is_lo}', "");
Expect(0, 442, '\P{^  Is_lo}', "");
Error('\p{_Other	Default_Ignorable CodePOINT:=}');
Error('\P{_Other	Default_Ignorable CodePOINT:=}');
Expect(1, 847, '\p{otherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 847, '\p{^otherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 847, '\P{otherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 847, '\P{^otherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 846, '\p{otherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 846, '\p{^otherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 846, '\P{otherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 846, '\P{^otherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 847, '\p{	 Other_Default ignorable Code_POINT}', 'deprecated');
Expect(0, 847, '\p{^	 Other_Default ignorable Code_POINT}', 'deprecated');
Expect(0, 847, '\P{	 Other_Default ignorable Code_POINT}', 'deprecated');
Expect(1, 847, '\P{^	 Other_Default ignorable Code_POINT}', 'deprecated');
Expect(0, 846, '\p{	 Other_Default ignorable Code_POINT}', 'deprecated');
Expect(1, 846, '\p{^	 Other_Default ignorable Code_POINT}', 'deprecated');
Expect(1, 846, '\P{	 Other_Default ignorable Code_POINT}', 'deprecated');
Expect(0, 846, '\P{^	 Other_Default ignorable Code_POINT}', 'deprecated');
Error('\p{_ is_other-DefaultIgnorable:=CodePOINT}');
Error('\P{_ is_other-DefaultIgnorable:=CodePOINT}');
Expect(1, 847, '\p{isotherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 847, '\p{^isotherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 847, '\P{isotherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 847, '\P{^isotherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 846, '\p{isotherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 846, '\p{^isotherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 846, '\P{isotherdefaultignorablecodepoint}', 'deprecated');
Expect(0, 846, '\P{^isotherdefaultignorablecodepoint}', 'deprecated');
Expect(1, 847, '\p{ IsOther Default_Ignorable_CodePOINT}', 'deprecated');
Expect(0, 847, '\p{^ IsOther Default_Ignorable_CodePOINT}', 'deprecated');
Expect(0, 847, '\P{ IsOther Default_Ignorable_CodePOINT}', 'deprecated');
Expect(1, 847, '\P{^ IsOther Default_Ignorable_CodePOINT}', 'deprecated');
Expect(0, 846, '\p{ IsOther Default_Ignorable_CodePOINT}', 'deprecated');
Expect(1, 846, '\p{^ IsOther Default_Ignorable_CodePOINT}', 'deprecated');
Expect(1, 846, '\P{ IsOther Default_Ignorable_CodePOINT}', 'deprecated');
Expect(0, 846, '\P{^ IsOther Default_Ignorable_CodePOINT}', 'deprecated');
Error('\p{:=-ODI}');
Error('\P{:=-ODI}');
Expect(1, 847, '\p{odi}', 'deprecated');
Expect(0, 847, '\p{^odi}', 'deprecated');
Expect(0, 847, '\P{odi}', 'deprecated');
Expect(1, 847, '\P{^odi}', 'deprecated');
Expect(0, 846, '\p{odi}', 'deprecated');
Expect(1, 846, '\p{^odi}', 'deprecated');
Expect(1, 846, '\P{odi}', 'deprecated');
Expect(0, 846, '\P{^odi}', 'deprecated');
Expect(1, 847, '\p{-odi}', 'deprecated');
Expect(0, 847, '\p{^-odi}', 'deprecated');
Expect(0, 847, '\P{-odi}', 'deprecated');
Expect(1, 847, '\P{^-odi}', 'deprecated');
Expect(0, 846, '\p{-odi}', 'deprecated');
Expect(1, 846, '\p{^-odi}', 'deprecated');
Expect(1, 846, '\P{-odi}', 'deprecated');
Expect(0, 846, '\P{^-odi}', 'deprecated');
Error('\p{ _Is odi/a/}');
Error('\P{ _Is odi/a/}');
Expect(1, 847, '\p{isodi}', 'deprecated');
Expect(0, 847, '\p{^isodi}', 'deprecated');
Expect(0, 847, '\P{isodi}', 'deprecated');
Expect(1, 847, '\P{^isodi}', 'deprecated');
Expect(0, 846, '\p{isodi}', 'deprecated');
Expect(1, 846, '\p{^isodi}', 'deprecated');
Expect(1, 846, '\P{isodi}', 'deprecated');
Expect(0, 846, '\P{^isodi}', 'deprecated');
Expect(1, 847, '\p{-_IS ODI}', 'deprecated');
Expect(0, 847, '\p{^-_IS ODI}', 'deprecated');
Expect(0, 847, '\P{-_IS ODI}', 'deprecated');
Expect(1, 847, '\P{^-_IS ODI}', 'deprecated');
Expect(0, 846, '\p{-_IS ODI}', 'deprecated');
Expect(1, 846, '\p{^-_IS ODI}', 'deprecated');
Expect(1, 846, '\P{-_IS ODI}', 'deprecated');
Expect(0, 846, '\P{^-_IS ODI}', 'deprecated');
Error('\p{		SUNDANESE/a/}');
Error('\P{		SUNDANESE/a/}');
Expect(1, 7082, '\p{sundanese}', "");
Expect(0, 7082, '\p{^sundanese}', "");
Expect(0, 7082, '\P{sundanese}', "");
Expect(1, 7082, '\P{^sundanese}', "");
Expect(0, 7039, '\p{sundanese}', "");
Expect(1, 7039, '\p{^sundanese}', "");
Expect(1, 7039, '\P{sundanese}', "");
Expect(0, 7039, '\P{^sundanese}', "");
Expect(1, 7082, '\p{	_Sundanese}', "");
Expect(0, 7082, '\p{^	_Sundanese}', "");
Expect(0, 7082, '\P{	_Sundanese}', "");
Expect(1, 7082, '\P{^	_Sundanese}', "");
Expect(0, 7039, '\p{	_Sundanese}', "");
Expect(1, 7039, '\p{^	_Sundanese}', "");
Expect(1, 7039, '\P{	_Sundanese}', "");
Expect(0, 7039, '\P{^	_Sundanese}', "");
Error('\p{_-Is-SUNDANESE:=}');
Error('\P{_-Is-SUNDANESE:=}');
Expect(1, 7082, '\p{issundanese}', "");
Expect(0, 7082, '\p{^issundanese}', "");
Expect(0, 7082, '\P{issundanese}', "");
Expect(1, 7082, '\P{^issundanese}', "");
Expect(0, 7039, '\p{issundanese}', "");
Expect(1, 7039, '\p{^issundanese}', "");
Expect(1, 7039, '\P{issundanese}', "");
Expect(0, 7039, '\P{^issundanese}', "");
Expect(1, 7082, '\p{ _is-Sundanese}', "");
Expect(0, 7082, '\p{^ _is-Sundanese}', "");
Expect(0, 7082, '\P{ _is-Sundanese}', "");
Expect(1, 7082, '\P{^ _is-Sundanese}', "");
Expect(0, 7039, '\p{ _is-Sundanese}', "");
Expect(1, 7039, '\p{^ _is-Sundanese}', "");
Expect(1, 7039, '\P{ _is-Sundanese}', "");
Expect(0, 7039, '\P{^ _is-Sundanese}', "");
Error('\p{_:=Sund}');
Error('\P{_:=Sund}');
Expect(1, 7082, '\p{sund}', "");
Expect(0, 7082, '\p{^sund}', "");
Expect(0, 7082, '\P{sund}', "");
Expect(1, 7082, '\P{^sund}', "");
Expect(0, 7039, '\p{sund}', "");
Expect(1, 7039, '\p{^sund}', "");
Expect(1, 7039, '\P{sund}', "");
Expect(0, 7039, '\P{^sund}', "");
Expect(1, 7082, '\p{_Sund}', "");
Expect(0, 7082, '\p{^_Sund}', "");
Expect(0, 7082, '\P{_Sund}', "");
Expect(1, 7082, '\P{^_Sund}', "");
Expect(0, 7039, '\p{_Sund}', "");
Expect(1, 7039, '\p{^_Sund}', "");
Expect(1, 7039, '\P{_Sund}', "");
Expect(0, 7039, '\P{^_Sund}', "");
Error('\p{ isSUND/a/}');
Error('\P{ isSUND/a/}');
Expect(1, 7082, '\p{issund}', "");
Expect(0, 7082, '\p{^issund}', "");
Expect(0, 7082, '\P{issund}', "");
Expect(1, 7082, '\P{^issund}', "");
Expect(0, 7039, '\p{issund}', "");
Expect(1, 7039, '\p{^issund}', "");
Expect(1, 7039, '\P{issund}', "");
Expect(0, 7039, '\P{^issund}', "");
Expect(1, 7082, '\p{-	IS sund}', "");
Expect(0, 7082, '\p{^-	IS sund}', "");
Expect(0, 7082, '\P{-	IS sund}', "");
Expect(1, 7082, '\P{^-	IS sund}', "");
Expect(0, 7039, '\p{-	IS sund}', "");
Expect(1, 7039, '\p{^-	IS sund}', "");
Expect(1, 7039, '\P{-	IS sund}', "");
Expect(0, 7039, '\P{^-	IS sund}', "");
Error('\p{:=	carian}');
Error('\P{:=	carian}');
Expect(1, 66256, '\p{carian}', "");
Expect(0, 66256, '\p{^carian}', "");
Expect(0, 66256, '\P{carian}', "");
Expect(1, 66256, '\P{^carian}', "");
Expect(0, 66207, '\p{carian}', "");
Expect(1, 66207, '\p{^carian}', "");
Expect(1, 66207, '\P{carian}', "");
Expect(0, 66207, '\P{^carian}', "");
Expect(1, 66256, '\p{-	CARIAN}', "");
Expect(0, 66256, '\p{^-	CARIAN}', "");
Expect(0, 66256, '\P{-	CARIAN}', "");
Expect(1, 66256, '\P{^-	CARIAN}', "");
Expect(0, 66207, '\p{-	CARIAN}', "");
Expect(1, 66207, '\p{^-	CARIAN}', "");
Expect(1, 66207, '\P{-	CARIAN}', "");
Expect(0, 66207, '\P{^-	CARIAN}', "");
Error('\p{-Is_Carian/a/}');
Error('\P{-Is_Carian/a/}');
Expect(1, 66256, '\p{iscarian}', "");
Expect(0, 66256, '\p{^iscarian}', "");
Expect(0, 66256, '\P{iscarian}', "");
Expect(1, 66256, '\P{^iscarian}', "");
Expect(0, 66207, '\p{iscarian}', "");
Expect(1, 66207, '\p{^iscarian}', "");
Expect(1, 66207, '\P{iscarian}', "");
Expect(0, 66207, '\P{^iscarian}', "");
Expect(1, 66256, '\p{	_Is-Carian}', "");
Expect(0, 66256, '\p{^	_Is-Carian}', "");
Expect(0, 66256, '\P{	_Is-Carian}', "");
Expect(1, 66256, '\P{^	_Is-Carian}', "");
Expect(0, 66207, '\p{	_Is-Carian}', "");
Expect(1, 66207, '\p{^	_Is-Carian}', "");
Expect(1, 66207, '\P{	_Is-Carian}', "");
Expect(0, 66207, '\P{^	_Is-Carian}', "");
Error('\p{ Cari:=}');
Error('\P{ Cari:=}');
Expect(1, 66256, '\p{cari}', "");
Expect(0, 66256, '\p{^cari}', "");
Expect(0, 66256, '\P{cari}', "");
Expect(1, 66256, '\P{^cari}', "");
Expect(0, 66207, '\p{cari}', "");
Expect(1, 66207, '\p{^cari}', "");
Expect(1, 66207, '\P{cari}', "");
Expect(0, 66207, '\P{^cari}', "");
Expect(1, 66256, '\p{		Cari}', "");
Expect(0, 66256, '\p{^		Cari}', "");
Expect(0, 66256, '\P{		Cari}', "");
Expect(1, 66256, '\P{^		Cari}', "");
Expect(0, 66207, '\p{		Cari}', "");
Expect(1, 66207, '\p{^		Cari}', "");
Expect(1, 66207, '\P{		Cari}', "");
Expect(0, 66207, '\P{^		Cari}', "");
Error('\p{-/a/Is-Cari}');
Error('\P{-/a/Is-Cari}');
Expect(1, 66256, '\p{iscari}', "");
Expect(0, 66256, '\p{^iscari}', "");
Expect(0, 66256, '\P{iscari}', "");
Expect(1, 66256, '\P{^iscari}', "");
Expect(0, 66207, '\p{iscari}', "");
Expect(1, 66207, '\p{^iscari}', "");
Expect(1, 66207, '\P{iscari}', "");
Expect(0, 66207, '\P{^iscari}', "");
Expect(1, 66256, '\p{_ IS	Cari}', "");
Expect(0, 66256, '\p{^_ IS	Cari}', "");
Expect(0, 66256, '\P{_ IS	Cari}', "");
Expect(1, 66256, '\P{^_ IS	Cari}', "");
Expect(0, 66207, '\p{_ IS	Cari}', "");
Expect(1, 66207, '\p{^_ IS	Cari}', "");
Expect(1, 66207, '\P{_ IS	Cari}', "");
Expect(0, 66207, '\P{^_ IS	Cari}', "");
Error('\p{ olditalic:=}');
Error('\P{ olditalic:=}');
Expect(1, 66334, '\p{olditalic}', "");
Expect(0, 66334, '\p{^olditalic}', "");
Expect(0, 66334, '\P{olditalic}', "");
Expect(1, 66334, '\P{^olditalic}', "");
Expect(0, 66303, '\p{olditalic}', "");
Expect(1, 66303, '\p{^olditalic}', "");
Expect(1, 66303, '\P{olditalic}', "");
Expect(0, 66303, '\P{^olditalic}', "");
Expect(1, 66334, '\p{-oldItalic}', "");
Expect(0, 66334, '\p{^-oldItalic}', "");
Expect(0, 66334, '\P{-oldItalic}', "");
Expect(1, 66334, '\P{^-oldItalic}', "");
Expect(0, 66303, '\p{-oldItalic}', "");
Expect(1, 66303, '\p{^-oldItalic}', "");
Expect(1, 66303, '\P{-oldItalic}', "");
Expect(0, 66303, '\P{^-oldItalic}', "");
Error('\p{-/a/IS Old-italic}');
Error('\P{-/a/IS Old-italic}');
Expect(1, 66334, '\p{isolditalic}', "");
Expect(0, 66334, '\p{^isolditalic}', "");
Expect(0, 66334, '\P{isolditalic}', "");
Expect(1, 66334, '\P{^isolditalic}', "");
Expect(0, 66303, '\p{isolditalic}', "");
Expect(1, 66303, '\p{^isolditalic}', "");
Expect(1, 66303, '\P{isolditalic}', "");
Expect(0, 66303, '\P{^isolditalic}', "");
Expect(1, 66334, '\p{_IS	Old	Italic}', "");
Expect(0, 66334, '\p{^_IS	Old	Italic}', "");
Expect(0, 66334, '\P{_IS	Old	Italic}', "");
Expect(1, 66334, '\P{^_IS	Old	Italic}', "");
Expect(0, 66303, '\p{_IS	Old	Italic}', "");
Expect(1, 66303, '\p{^_IS	Old	Italic}', "");
Expect(1, 66303, '\P{_IS	Old	Italic}', "");
Expect(0, 66303, '\P{^_IS	Old	Italic}', "");
Error('\p{ :=ital}');
Error('\P{ :=ital}');
Expect(1, 66334, '\p{ital}', "");
Expect(0, 66334, '\p{^ital}', "");
Expect(0, 66334, '\P{ital}', "");
Expect(1, 66334, '\P{^ital}', "");
Expect(0, 66303, '\p{ital}', "");
Expect(1, 66303, '\p{^ital}', "");
Expect(1, 66303, '\P{ital}', "");
Expect(0, 66303, '\P{^ital}', "");
Expect(1, 66334, '\p{- Ital}', "");
Expect(0, 66334, '\p{^- Ital}', "");
Expect(0, 66334, '\P{- Ital}', "");
Expect(1, 66334, '\P{^- Ital}', "");
Expect(0, 66303, '\p{- Ital}', "");
Expect(1, 66303, '\p{^- Ital}', "");
Expect(1, 66303, '\P{- Ital}', "");
Expect(0, 66303, '\P{^- Ital}', "");
Error('\p{_/a/IsItal}');
Error('\P{_/a/IsItal}');
Expect(1, 66334, '\p{isital}', "");
Expect(0, 66334, '\p{^isital}', "");
Expect(0, 66334, '\P{isital}', "");
Expect(1, 66334, '\P{^isital}', "");
Expect(0, 66303, '\p{isital}', "");
Expect(1, 66303, '\p{^isital}', "");
Expect(1, 66303, '\P{isital}', "");
Expect(0, 66303, '\P{^isital}', "");
Expect(1, 66334, '\p{_IS	ITAL}', "");
Expect(0, 66334, '\p{^_IS	ITAL}', "");
Expect(0, 66334, '\P{_IS	ITAL}', "");
Expect(1, 66334, '\P{^_IS	ITAL}', "");
Expect(0, 66303, '\p{_IS	ITAL}', "");
Expect(1, 66303, '\p{^_IS	ITAL}', "");
Expect(1, 66303, '\P{_IS	ITAL}', "");
Expect(0, 66303, '\P{^_IS	ITAL}', "");
Error('\p{_ xdigit/a/}');
Error('\P{_ xdigit/a/}');
Expect(1, 57, '\p{xdigit}', "");
Expect(0, 57, '\p{^xdigit}', "");
Expect(0, 57, '\P{xdigit}', "");
Expect(1, 57, '\P{^xdigit}', "");
Expect(0, 47, '\p{xdigit}', "");
Expect(1, 47, '\p{^xdigit}', "");
Expect(1, 47, '\P{xdigit}', "");
Expect(0, 47, '\P{^xdigit}', "");
Expect(1, 57, '\p{XDigit}', "");
Expect(0, 57, '\p{^XDigit}', "");
Expect(0, 57, '\P{XDigit}', "");
Expect(1, 57, '\P{^XDigit}', "");
Expect(0, 47, '\p{XDigit}', "");
Expect(1, 47, '\p{^XDigit}', "");
Expect(1, 47, '\P{XDigit}', "");
Expect(0, 47, '\P{^XDigit}', "");
Error('\p{:=-is_XDIGIT}');
Error('\P{:=-is_XDIGIT}');
Expect(1, 57, '\p{isxdigit}', "");
Expect(0, 57, '\p{^isxdigit}', "");
Expect(0, 57, '\P{isxdigit}', "");
Expect(1, 57, '\P{^isxdigit}', "");
Expect(0, 47, '\p{isxdigit}', "");
Expect(1, 47, '\p{^isxdigit}', "");
Expect(1, 47, '\P{isxdigit}', "");
Expect(0, 47, '\P{^isxdigit}', "");
Expect(1, 57, '\p{		is XDIGIT}', "");
Expect(0, 57, '\p{^		is XDIGIT}', "");
Expect(0, 57, '\P{		is XDIGIT}', "");
Expect(1, 57, '\P{^		is XDIGIT}', "");
Expect(0, 47, '\p{		is XDIGIT}', "");
Expect(1, 47, '\p{^		is XDIGIT}', "");
Expect(1, 47, '\P{		is XDIGIT}', "");
Expect(0, 47, '\P{^		is XDIGIT}', "");
Error('\p{ Hex/a/digit}');
Error('\P{ Hex/a/digit}');
Expect(1, 57, '\p{hexdigit}', "");
Expect(0, 57, '\p{^hexdigit}', "");
Expect(0, 57, '\P{hexdigit}', "");
Expect(1, 57, '\P{^hexdigit}', "");
Expect(0, 47, '\p{hexdigit}', "");
Expect(1, 47, '\p{^hexdigit}', "");
Expect(1, 47, '\P{hexdigit}', "");
Expect(0, 47, '\P{^hexdigit}', "");
Expect(1, 57, '\p{	_HexDIGIT}', "");
Expect(0, 57, '\p{^	_HexDIGIT}', "");
Expect(0, 57, '\P{	_HexDIGIT}', "");
Expect(1, 57, '\P{^	_HexDIGIT}', "");
Expect(0, 47, '\p{	_HexDIGIT}', "");
Expect(1, 47, '\p{^	_HexDIGIT}', "");
Expect(1, 47, '\P{	_HexDIGIT}', "");
Expect(0, 47, '\P{^	_HexDIGIT}', "");
Error('\p{ Is	hex digit/a/}');
Error('\P{ Is	hex digit/a/}');
Expect(1, 57, '\p{ishexdigit}', "");
Expect(0, 57, '\p{^ishexdigit}', "");
Expect(0, 57, '\P{ishexdigit}', "");
Expect(1, 57, '\P{^ishexdigit}', "");
Expect(0, 47, '\p{ishexdigit}', "");
Expect(1, 47, '\p{^ishexdigit}', "");
Expect(1, 47, '\P{ishexdigit}', "");
Expect(0, 47, '\P{^ishexdigit}', "");
Expect(1, 57, '\p{ IS	Hex-digit}', "");
Expect(0, 57, '\p{^ IS	Hex-digit}', "");
Expect(0, 57, '\P{ IS	Hex-digit}', "");
Expect(1, 57, '\P{^ IS	Hex-digit}', "");
Expect(0, 47, '\p{ IS	Hex-digit}', "");
Expect(1, 47, '\p{^ IS	Hex-digit}', "");
Expect(1, 47, '\P{ IS	Hex-digit}', "");
Expect(0, 47, '\P{^ IS	Hex-digit}', "");
Error('\p{ -Hex:=}');
Error('\P{ -Hex:=}');
Expect(1, 57, '\p{hex}', "");
Expect(0, 57, '\p{^hex}', "");
Expect(0, 57, '\P{hex}', "");
Expect(1, 57, '\P{^hex}', "");
Expect(0, 47, '\p{hex}', "");
Expect(1, 47, '\p{^hex}', "");
Expect(1, 47, '\P{hex}', "");
Expect(0, 47, '\P{^hex}', "");
Expect(1, 57, '\p{__hex}', "");
Expect(0, 57, '\p{^__hex}', "");
Expect(0, 57, '\P{__hex}', "");
Expect(1, 57, '\P{^__hex}', "");
Expect(0, 47, '\p{__hex}', "");
Expect(1, 47, '\p{^__hex}', "");
Expect(1, 47, '\P{__hex}', "");
Expect(0, 47, '\P{^__hex}', "");
Error('\p{_IS/a/HEX}');
Error('\P{_IS/a/HEX}');
Expect(1, 57, '\p{ishex}', "");
Expect(0, 57, '\p{^ishex}', "");
Expect(0, 57, '\P{ishex}', "");
Expect(1, 57, '\P{^ishex}', "");
Expect(0, 47, '\p{ishex}', "");
Expect(1, 47, '\p{^ishex}', "");
Expect(1, 47, '\P{ishex}', "");
Expect(0, 47, '\P{^ishex}', "");
Expect(1, 57, '\p{	Is-HEX}', "");
Expect(0, 57, '\p{^	Is-HEX}', "");
Expect(0, 57, '\P{	Is-HEX}', "");
Expect(1, 57, '\P{^	Is-HEX}', "");
Expect(0, 47, '\p{	Is-HEX}', "");
Expect(1, 47, '\p{^	Is-HEX}', "");
Expect(1, 47, '\P{	Is-HEX}', "");
Expect(0, 47, '\P{^	Is-HEX}', "");
Error('\p{	Title/a/}');
Error('\P{	Title/a/}');
Expect(1, 453, '\p{title}', "");
Expect(0, 453, '\p{^title}', "");
Expect(0, 453, '\P{title}', "");
Expect(1, 453, '\P{^title}', "");
Expect(0, 452, '\p{title}', "");
Expect(1, 452, '\p{^title}', "");
Expect(1, 452, '\P{title}', "");
Expect(0, 452, '\P{^title}', "");
Expect(1, 453, '\p{	title}', "");
Expect(0, 453, '\p{^	title}', "");
Expect(0, 453, '\P{	title}', "");
Expect(1, 453, '\P{^	title}', "");
Expect(0, 452, '\p{	title}', "");
Expect(1, 452, '\p{^	title}', "");
Expect(1, 452, '\P{	title}', "");
Expect(0, 452, '\P{^	title}', "");
Error('\p{ 	IS/a/Title}');
Error('\P{ 	IS/a/Title}');
Expect(1, 453, '\p{istitle}', "");
Expect(0, 453, '\p{^istitle}', "");
Expect(0, 453, '\P{istitle}', "");
Expect(1, 453, '\P{^istitle}', "");
Expect(0, 452, '\p{istitle}', "");
Expect(1, 452, '\p{^istitle}', "");
Expect(1, 452, '\P{istitle}', "");
Expect(0, 452, '\P{^istitle}', "");
Expect(1, 453, '\p{ IS	Title}', "");
Expect(0, 453, '\p{^ IS	Title}', "");
Expect(0, 453, '\P{ IS	Title}', "");
Expect(1, 453, '\P{^ IS	Title}', "");
Expect(0, 452, '\p{ IS	Title}', "");
Expect(1, 452, '\p{^ IS	Title}', "");
Expect(1, 452, '\P{ IS	Title}', "");
Expect(0, 452, '\P{^ IS	Title}', "");
Error('\p{_Titlecase	Letter:=}');
Error('\P{_Titlecase	Letter:=}');
Expect(1, 453, '\p{titlecaseletter}', "");
Expect(0, 453, '\p{^titlecaseletter}', "");
Expect(0, 453, '\P{titlecaseletter}', "");
Expect(1, 453, '\P{^titlecaseletter}', "");
Expect(0, 452, '\p{titlecaseletter}', "");
Expect(1, 452, '\p{^titlecaseletter}', "");
Expect(1, 452, '\P{titlecaseletter}', "");
Expect(0, 452, '\P{^titlecaseletter}', "");
Expect(1, 453, '\p{_Titlecase_Letter}', "");
Expect(0, 453, '\p{^_Titlecase_Letter}', "");
Expect(0, 453, '\P{_Titlecase_Letter}', "");
Expect(1, 453, '\P{^_Titlecase_Letter}', "");
Expect(0, 452, '\p{_Titlecase_Letter}', "");
Expect(1, 452, '\p{^_Titlecase_Letter}', "");
Expect(1, 452, '\P{_Titlecase_Letter}', "");
Expect(0, 452, '\P{^_Titlecase_Letter}', "");
Error('\p{_Is titlecase-LETTER:=}');
Error('\P{_Is titlecase-LETTER:=}');
Expect(1, 453, '\p{istitlecaseletter}', "");
Expect(0, 453, '\p{^istitlecaseletter}', "");
Expect(0, 453, '\P{istitlecaseletter}', "");
Expect(1, 453, '\P{^istitlecaseletter}', "");
Expect(0, 452, '\p{istitlecaseletter}', "");
Expect(1, 452, '\p{^istitlecaseletter}', "");
Expect(1, 452, '\P{istitlecaseletter}', "");
Expect(0, 452, '\P{^istitlecaseletter}', "");
Expect(1, 453, '\p{	Is-Titlecase-letter}', "");
Expect(0, 453, '\p{^	Is-Titlecase-letter}', "");
Expect(0, 453, '\P{	Is-Titlecase-letter}', "");
Expect(1, 453, '\P{^	Is-Titlecase-letter}', "");
Expect(0, 452, '\p{	Is-Titlecase-letter}', "");
Expect(1, 452, '\p{^	Is-Titlecase-letter}', "");
Expect(1, 452, '\P{	Is-Titlecase-letter}', "");
Expect(0, 452, '\P{^	Is-Titlecase-letter}', "");
Error('\p{/a/--lt}');
Error('\P{/a/--lt}');
Expect(1, 453, '\p{lt}', "");
Expect(0, 453, '\p{^lt}', "");
Expect(0, 453, '\P{lt}', "");
Expect(1, 453, '\P{^lt}', "");
Expect(0, 452, '\p{lt}', "");
Expect(1, 452, '\p{^lt}', "");
Expect(1, 452, '\P{lt}', "");
Expect(0, 452, '\P{^lt}', "");
Expect(1, 453, '\p{		LT}', "");
Expect(0, 453, '\p{^		LT}', "");
Expect(0, 453, '\P{		LT}', "");
Expect(1, 453, '\P{^		LT}', "");
Expect(0, 452, '\p{		LT}', "");
Expect(1, 452, '\p{^		LT}', "");
Expect(1, 452, '\P{		LT}', "");
Expect(0, 452, '\P{^		LT}', "");
Error('\p{/a/IS_LT}');
Error('\P{/a/IS_LT}');
Expect(1, 453, '\p{islt}', "");
Expect(0, 453, '\p{^islt}', "");
Expect(0, 453, '\P{islt}', "");
Expect(1, 453, '\P{^islt}', "");
Expect(0, 452, '\p{islt}', "");
Expect(1, 452, '\p{^islt}', "");
Expect(1, 452, '\P{islt}', "");
Expect(0, 452, '\P{^islt}', "");
Expect(1, 453, '\p{--Is	Lt}', "");
Expect(0, 453, '\p{^--Is	Lt}', "");
Expect(0, 453, '\P{--Is	Lt}', "");
Expect(1, 453, '\P{^--Is	Lt}', "");
Expect(0, 452, '\p{--Is	Lt}', "");
Expect(1, 452, '\p{^--Is	Lt}', "");
Expect(1, 452, '\P{--Is	Lt}', "");
Expect(0, 452, '\P{^--Is	Lt}', "");
Error('\p{	SPACING/a/modifier-LETTERS}');
Error('\P{	SPACING/a/modifier-LETTERS}');
Expect(1, 767, '\p{spacingmodifierletters}', "");
Expect(0, 767, '\p{^spacingmodifierletters}', "");
Expect(0, 767, '\P{spacingmodifierletters}', "");
Expect(1, 767, '\P{^spacingmodifierletters}', "");
Expect(0, 687, '\p{spacingmodifierletters}', "");
Expect(1, 687, '\p{^spacingmodifierletters}', "");
Expect(1, 687, '\P{spacingmodifierletters}', "");
Expect(0, 687, '\P{^spacingmodifierletters}', "");
Expect(1, 767, '\p{- SpacingmodifierLetters}', "");
Expect(0, 767, '\p{^- SpacingmodifierLetters}', "");
Expect(0, 767, '\P{- SpacingmodifierLetters}', "");
Expect(1, 767, '\P{^- SpacingmodifierLetters}', "");
Expect(0, 687, '\p{- SpacingmodifierLetters}', "");
Expect(1, 687, '\p{^- SpacingmodifierLetters}', "");
Expect(1, 687, '\P{- SpacingmodifierLetters}', "");
Expect(0, 687, '\P{^- SpacingmodifierLetters}', "");
Error('\p{-:=IS SpacingModifier	Letters}');
Error('\P{-:=IS SpacingModifier	Letters}');
Expect(1, 767, '\p{isspacingmodifierletters}', "");
Expect(0, 767, '\p{^isspacingmodifierletters}', "");
Expect(0, 767, '\P{isspacingmodifierletters}', "");
Expect(1, 767, '\P{^isspacingmodifierletters}', "");
Expect(0, 687, '\p{isspacingmodifierletters}', "");
Expect(1, 687, '\p{^isspacingmodifierletters}', "");
Expect(1, 687, '\P{isspacingmodifierletters}', "");
Expect(0, 687, '\P{^isspacingmodifierletters}', "");
Expect(1, 767, '\p{_IS_SPACING modifier_letters}', "");
Expect(0, 767, '\p{^_IS_SPACING modifier_letters}', "");
Expect(0, 767, '\P{_IS_SPACING modifier_letters}', "");
Expect(1, 767, '\P{^_IS_SPACING modifier_letters}', "");
Expect(0, 687, '\p{_IS_SPACING modifier_letters}', "");
Expect(1, 687, '\p{^_IS_SPACING modifier_letters}', "");
Expect(1, 687, '\P{_IS_SPACING modifier_letters}', "");
Expect(0, 687, '\P{^_IS_SPACING modifier_letters}', "");
Error('\p{IN-SPACING_Modifier:=Letters}');
Error('\P{IN-SPACING_Modifier:=Letters}');
Expect(1, 767, '\p{inspacingmodifierletters}', "");
Expect(0, 767, '\p{^inspacingmodifierletters}', "");
Expect(0, 767, '\P{inspacingmodifierletters}', "");
Expect(1, 767, '\P{^inspacingmodifierletters}', "");
Expect(0, 687, '\p{inspacingmodifierletters}', "");
Expect(1, 687, '\p{^inspacingmodifierletters}', "");
Expect(1, 687, '\P{inspacingmodifierletters}', "");
Expect(0, 687, '\P{^inspacingmodifierletters}', "");
Expect(1, 767, '\p{-_In	Spacing-modifier Letters}', "");
Expect(0, 767, '\p{^-_In	Spacing-modifier Letters}', "");
Expect(0, 767, '\P{-_In	Spacing-modifier Letters}', "");
Expect(1, 767, '\P{^-_In	Spacing-modifier Letters}', "");
Expect(0, 687, '\p{-_In	Spacing-modifier Letters}', "");
Expect(1, 687, '\p{^-_In	Spacing-modifier Letters}', "");
Expect(1, 687, '\P{-_In	Spacing-modifier Letters}', "");
Expect(0, 687, '\P{^-_In	Spacing-modifier Letters}', "");
Error('\p{Grapheme_Link}');
Error('\P{Grapheme_Link}');
Error('\p{Is_Grapheme_Link}');
Error('\P{Is_Grapheme_Link}');
Error('\p{Gr_Link}');
Error('\P{Gr_Link}');
Error('\p{Is_Gr_Link}');
Error('\P{Is_Gr_Link}');
Error('\p{_-Other/a/Lowercase}');
Error('\P{_-Other/a/Lowercase}');
Expect(1, 696, '\p{otherlowercase}', 'deprecated');
Expect(0, 696, '\p{^otherlowercase}', 'deprecated');
Expect(0, 696, '\P{otherlowercase}', 'deprecated');
Expect(1, 696, '\P{^otherlowercase}', 'deprecated');
Expect(0, 687, '\p{otherlowercase}', 'deprecated');
Expect(1, 687, '\p{^otherlowercase}', 'deprecated');
Expect(1, 687, '\P{otherlowercase}', 'deprecated');
Expect(0, 687, '\P{^otherlowercase}', 'deprecated');
Expect(1, 696, '\p{__Other	LOWERCASE}', 'deprecated');
Expect(0, 696, '\p{^__Other	LOWERCASE}', 'deprecated');
Expect(0, 696, '\P{__Other	LOWERCASE}', 'deprecated');
Expect(1, 696, '\P{^__Other	LOWERCASE}', 'deprecated');
Expect(0, 687, '\p{__Other	LOWERCASE}', 'deprecated');
Expect(1, 687, '\p{^__Other	LOWERCASE}', 'deprecated');
Expect(1, 687, '\P{__Other	LOWERCASE}', 'deprecated');
Expect(0, 687, '\P{^__Other	LOWERCASE}', 'deprecated');
Error('\p{_is:=OTHER_lowercase}');
Error('\P{_is:=OTHER_lowercase}');
Expect(1, 696, '\p{isotherlowercase}', 'deprecated');
Expect(0, 696, '\p{^isotherlowercase}', 'deprecated');
Expect(0, 696, '\P{isotherlowercase}', 'deprecated');
Expect(1, 696, '\P{^isotherlowercase}', 'deprecated');
Expect(0, 687, '\p{isotherlowercase}', 'deprecated');
Expect(1, 687, '\p{^isotherlowercase}', 'deprecated');
Expect(1, 687, '\P{isotherlowercase}', 'deprecated');
Expect(0, 687, '\P{^isotherlowercase}', 'deprecated');
Expect(1, 696, '\p{--IS_OtherLowercase}', 'deprecated');
Expect(0, 696, '\p{^--IS_OtherLowercase}', 'deprecated');
Expect(0, 696, '\P{--IS_OtherLowercase}', 'deprecated');
Expect(1, 696, '\P{^--IS_OtherLowercase}', 'deprecated');
Expect(0, 687, '\p{--IS_OtherLowercase}', 'deprecated');
Expect(1, 687, '\p{^--IS_OtherLowercase}', 'deprecated');
Expect(1, 687, '\P{--IS_OtherLowercase}', 'deprecated');
Expect(0, 687, '\P{^--IS_OtherLowercase}', 'deprecated');
Error('\p{_/a/OLower}');
Error('\P{_/a/OLower}');
Expect(1, 696, '\p{olower}', 'deprecated');
Expect(0, 696, '\p{^olower}', 'deprecated');
Expect(0, 696, '\P{olower}', 'deprecated');
Expect(1, 696, '\P{^olower}', 'deprecated');
Expect(0, 687, '\p{olower}', 'deprecated');
Expect(1, 687, '\p{^olower}', 'deprecated');
Expect(1, 687, '\P{olower}', 'deprecated');
Expect(0, 687, '\P{^olower}', 'deprecated');
Expect(1, 696, '\p{- OLOWER}', 'deprecated');
Expect(0, 696, '\p{^- OLOWER}', 'deprecated');
Expect(0, 696, '\P{- OLOWER}', 'deprecated');
Expect(1, 696, '\P{^- OLOWER}', 'deprecated');
Expect(0, 687, '\p{- OLOWER}', 'deprecated');
Expect(1, 687, '\p{^- OLOWER}', 'deprecated');
Expect(1, 687, '\P{- OLOWER}', 'deprecated');
Expect(0, 687, '\P{^- OLOWER}', 'deprecated');
Error('\p{ /a/Is	OLower}');
Error('\P{ /a/Is	OLower}');
Expect(1, 696, '\p{isolower}', 'deprecated');
Expect(0, 696, '\p{^isolower}', 'deprecated');
Expect(0, 696, '\P{isolower}', 'deprecated');
Expect(1, 696, '\P{^isolower}', 'deprecated');
Expect(0, 687, '\p{isolower}', 'deprecated');
Expect(1, 687, '\p{^isolower}', 'deprecated');
Expect(1, 687, '\P{isolower}', 'deprecated');
Expect(0, 687, '\P{^isolower}', 'deprecated');
Expect(1, 696, '\p{  Is	OLOWER}', 'deprecated');
Expect(0, 696, '\p{^  Is	OLOWER}', 'deprecated');
Expect(0, 696, '\P{  Is	OLOWER}', 'deprecated');
Expect(1, 696, '\P{^  Is	OLOWER}', 'deprecated');
Expect(0, 687, '\p{  Is	OLOWER}', 'deprecated');
Expect(1, 687, '\p{^  Is	OLOWER}', 'deprecated');
Expect(1, 687, '\P{  Is	OLOWER}', 'deprecated');
Expect(0, 687, '\P{^  Is	OLOWER}', 'deprecated');
Error('\p{/a/_Arabic}');
Error('\P{/a/_Arabic}');
Expect(1, 1547, '\p{arabic}', "");
Expect(0, 1547, '\p{^arabic}', "");
Expect(0, 1547, '\P{arabic}', "");
Expect(1, 1547, '\P{^arabic}', "");
Expect(0, 1541, '\p{arabic}', "");
Expect(1, 1541, '\p{^arabic}', "");
Expect(1, 1541, '\P{arabic}', "");
Expect(0, 1541, '\P{^arabic}', "");
Expect(1, 1547, '\p{ -arabic}', "");
Expect(0, 1547, '\p{^ -arabic}', "");
Expect(0, 1547, '\P{ -arabic}', "");
Expect(1, 1547, '\P{^ -arabic}', "");
Expect(0, 1541, '\p{ -arabic}', "");
Expect(1, 1541, '\p{^ -arabic}', "");
Expect(1, 1541, '\P{ -arabic}', "");
Expect(0, 1541, '\P{^ -arabic}', "");
Error('\p{-:=is arabic}');
Error('\P{-:=is arabic}');
Expect(1, 1547, '\p{isarabic}', "");
Expect(0, 1547, '\p{^isarabic}', "");
Expect(0, 1547, '\P{isarabic}', "");
Expect(1, 1547, '\P{^isarabic}', "");
Expect(0, 1541, '\p{isarabic}', "");
Expect(1, 1541, '\p{^isarabic}', "");
Expect(1, 1541, '\P{isarabic}', "");
Expect(0, 1541, '\P{^isarabic}', "");
Expect(1, 1547, '\p{- Is-ARABIC}', "");
Expect(0, 1547, '\p{^- Is-ARABIC}', "");
Expect(0, 1547, '\P{- Is-ARABIC}', "");
Expect(1, 1547, '\P{^- Is-ARABIC}', "");
Expect(0, 1541, '\p{- Is-ARABIC}', "");
Expect(1, 1541, '\p{^- Is-ARABIC}', "");
Expect(1, 1541, '\P{- Is-ARABIC}', "");
Expect(0, 1541, '\P{^- Is-ARABIC}', "");
Error('\p{/a/_Arab}');
Error('\P{/a/_Arab}');
Expect(1, 1547, '\p{arab}', "");
Expect(0, 1547, '\p{^arab}', "");
Expect(0, 1547, '\P{arab}', "");
Expect(1, 1547, '\P{^arab}', "");
Expect(0, 1541, '\p{arab}', "");
Expect(1, 1541, '\p{^arab}', "");
Expect(1, 1541, '\P{arab}', "");
Expect(0, 1541, '\P{^arab}', "");
Expect(1, 1547, '\p{_Arab}', "");
Expect(0, 1547, '\p{^_Arab}', "");
Expect(0, 1547, '\P{_Arab}', "");
Expect(1, 1547, '\P{^_Arab}', "");
Expect(0, 1541, '\p{_Arab}', "");
Expect(1, 1541, '\p{^_Arab}', "");
Expect(1, 1541, '\P{_Arab}', "");
Expect(0, 1541, '\P{^_Arab}', "");
Error('\p{:= 	Is Arab}');
Error('\P{:= 	Is Arab}');
Expect(1, 1547, '\p{isarab}', "");
Expect(0, 1547, '\p{^isarab}', "");
Expect(0, 1547, '\P{isarab}', "");
Expect(1, 1547, '\P{^isarab}', "");
Expect(0, 1541, '\p{isarab}', "");
Expect(1, 1541, '\p{^isarab}', "");
Expect(1, 1541, '\P{isarab}', "");
Expect(0, 1541, '\P{^isarab}', "");
Expect(1, 1547, '\p{- IS Arab}', "");
Expect(0, 1547, '\p{^- IS Arab}', "");
Expect(0, 1547, '\P{- IS Arab}', "");
Expect(1, 1547, '\P{^- IS Arab}', "");
Expect(0, 1541, '\p{- IS Arab}', "");
Expect(1, 1541, '\p{^- IS Arab}', "");
Expect(1, 1541, '\P{- IS Arab}', "");
Expect(0, 1541, '\P{^- IS Arab}', "");
Error('\p{/a/  Deseret}');
Error('\P{/a/  Deseret}');
Expect(1, 66639, '\p{deseret}', "");
Expect(0, 66639, '\p{^deseret}', "");
Expect(0, 66639, '\P{deseret}', "");
Expect(1, 66639, '\P{^deseret}', "");
Expect(0, 66559, '\p{deseret}', "");
Expect(1, 66559, '\p{^deseret}', "");
Expect(1, 66559, '\P{deseret}', "");
Expect(0, 66559, '\P{^deseret}', "");
Expect(1, 66639, '\p{--deseret}', "");
Expect(0, 66639, '\p{^--deseret}', "");
Expect(0, 66639, '\P{--deseret}', "");
Expect(1, 66639, '\P{^--deseret}', "");
Expect(0, 66559, '\p{--deseret}', "");
Expect(1, 66559, '\p{^--deseret}', "");
Expect(1, 66559, '\P{--deseret}', "");
Expect(0, 66559, '\P{^--deseret}', "");
Error('\p{__is/a/Deseret}');
Error('\P{__is/a/Deseret}');
Expect(1, 66639, '\p{isdeseret}', "");
Expect(0, 66639, '\p{^isdeseret}', "");
Expect(0, 66639, '\P{isdeseret}', "");
Expect(1, 66639, '\P{^isdeseret}', "");
Expect(0, 66559, '\p{isdeseret}', "");
Expect(1, 66559, '\p{^isdeseret}', "");
Expect(1, 66559, '\P{isdeseret}', "");
Expect(0, 66559, '\P{^isdeseret}', "");
Expect(1, 66639, '\p{_ isDESERET}', "");
Expect(0, 66639, '\p{^_ isDESERET}', "");
Expect(0, 66639, '\P{_ isDESERET}', "");
Expect(1, 66639, '\P{^_ isDESERET}', "");
Expect(0, 66559, '\p{_ isDESERET}', "");
Expect(1, 66559, '\p{^_ isDESERET}', "");
Expect(1, 66559, '\P{_ isDESERET}', "");
Expect(0, 66559, '\P{^_ isDESERET}', "");
Error('\p{:=_Dsrt}');
Error('\P{:=_Dsrt}');
Expect(1, 66639, '\p{dsrt}', "");
Expect(0, 66639, '\p{^dsrt}', "");
Expect(0, 66639, '\P{dsrt}', "");
Expect(1, 66639, '\P{^dsrt}', "");
Expect(0, 66559, '\p{dsrt}', "");
Expect(1, 66559, '\p{^dsrt}', "");
Expect(1, 66559, '\P{dsrt}', "");
Expect(0, 66559, '\P{^dsrt}', "");
Expect(1, 66639, '\p{	_Dsrt}', "");
Expect(0, 66639, '\p{^	_Dsrt}', "");
Expect(0, 66639, '\P{	_Dsrt}', "");
Expect(1, 66639, '\P{^	_Dsrt}', "");
Expect(0, 66559, '\p{	_Dsrt}', "");
Expect(1, 66559, '\p{^	_Dsrt}', "");
Expect(1, 66559, '\P{	_Dsrt}', "");
Expect(0, 66559, '\P{^	_Dsrt}', "");
Error('\p{/a/Is	dsrt}');
Error('\P{/a/Is	dsrt}');
Expect(1, 66639, '\p{isdsrt}', "");
Expect(0, 66639, '\p{^isdsrt}', "");
Expect(0, 66639, '\P{isdsrt}', "");
Expect(1, 66639, '\P{^isdsrt}', "");
Expect(0, 66559, '\p{isdsrt}', "");
Expect(1, 66559, '\p{^isdsrt}', "");
Expect(1, 66559, '\P{isdsrt}', "");
Expect(0, 66559, '\P{^isdsrt}', "");
Expect(1, 66639, '\p{	 IsDsrt}', "");
Expect(0, 66639, '\p{^	 IsDsrt}', "");
Expect(0, 66639, '\P{	 IsDsrt}', "");
Expect(1, 66639, '\P{^	 IsDsrt}', "");
Expect(0, 66559, '\p{	 IsDsrt}', "");
Expect(1, 66559, '\p{^	 IsDsrt}', "");
Expect(1, 66559, '\P{	 IsDsrt}', "");
Expect(0, 66559, '\P{^	 IsDsrt}', "");
Error('\p{/a/cased_Letter}');
Error('\P{/a/cased_Letter}');
Expect(1, 90, '\p{casedletter}', "");
Expect(0, 90, '\p{^casedletter}', "");
Expect(0, 90, '\P{casedletter}', "");
Expect(1, 90, '\P{^casedletter}', "");
Expect(0, 64, '\p{casedletter}', "");
Expect(1, 64, '\p{^casedletter}', "");
Expect(1, 64, '\P{casedletter}', "");
Expect(0, 64, '\P{^casedletter}', "");
Expect(1, 90, '\p{_CASED Letter}', "");
Expect(0, 90, '\p{^_CASED Letter}', "");
Expect(0, 90, '\P{_CASED Letter}', "");
Expect(1, 90, '\P{^_CASED Letter}', "");
Expect(0, 64, '\p{_CASED Letter}', "");
Expect(1, 64, '\p{^_CASED Letter}', "");
Expect(1, 64, '\P{_CASED Letter}', "");
Expect(0, 64, '\P{^_CASED Letter}', "");
Error('\p{- is CASED	Letter:=}');
Error('\P{- is CASED	Letter:=}');
Expect(1, 90, '\p{iscasedletter}', "");
Expect(0, 90, '\p{^iscasedletter}', "");
Expect(0, 90, '\P{iscasedletter}', "");
Expect(1, 90, '\P{^iscasedletter}', "");
Expect(0, 64, '\p{iscasedletter}', "");
Expect(1, 64, '\p{^iscasedletter}', "");
Expect(1, 64, '\P{iscasedletter}', "");
Expect(0, 64, '\P{^iscasedletter}', "");
Expect(1, 90, '\p{-is	cased_letter}', "");
Expect(0, 90, '\p{^-is	cased_letter}', "");
Expect(0, 90, '\P{-is	cased_letter}', "");
Expect(1, 90, '\P{^-is	cased_letter}', "");
Expect(0, 64, '\p{-is	cased_letter}', "");
Expect(1, 64, '\p{^-is	cased_letter}', "");
Expect(1, 64, '\P{-is	cased_letter}', "");
Expect(0, 64, '\P{^-is	cased_letter}', "");
Error('\p{:=_LC}');
Error('\P{:=_LC}');
Expect(1, 90, '\p{lc}', "");
Expect(0, 90, '\p{^lc}', "");
Expect(0, 90, '\P{lc}', "");
Expect(1, 90, '\P{^lc}', "");
Expect(0, 64, '\p{lc}', "");
Expect(1, 64, '\p{^lc}', "");
Expect(1, 64, '\P{lc}', "");
Expect(0, 64, '\P{^lc}', "");
Expect(1, 90, '\p{_LC}', "");
Expect(0, 90, '\p{^_LC}', "");
Expect(0, 90, '\P{_LC}', "");
Expect(1, 90, '\P{^_LC}', "");
Expect(0, 64, '\p{_LC}', "");
Expect(1, 64, '\p{^_LC}', "");
Expect(1, 64, '\P{_LC}', "");
Expect(0, 64, '\P{^_LC}', "");
Error('\p{/a/--IS	LC}');
Error('\P{/a/--IS	LC}');
Expect(1, 90, '\p{islc}', "");
Expect(0, 90, '\p{^islc}', "");
Expect(0, 90, '\P{islc}', "");
Expect(1, 90, '\P{^islc}', "");
Expect(0, 64, '\p{islc}', "");
Expect(1, 64, '\p{^islc}', "");
Expect(1, 64, '\P{islc}', "");
Expect(0, 64, '\P{^islc}', "");
Expect(1, 90, '\p{- Is LC}', "");
Expect(0, 90, '\p{^- Is LC}', "");
Expect(0, 90, '\P{- Is LC}', "");
Expect(1, 90, '\P{^- Is LC}', "");
Expect(0, 64, '\p{- Is LC}', "");
Expect(1, 64, '\p{^- Is LC}', "");
Expect(1, 64, '\P{- Is LC}', "");
Expect(0, 64, '\P{^- Is LC}', "");
Error('\p{	/a/L}');
Error('\P{	/a/L}');
Expect(1, 90, '\p{l_}', "");
Expect(0, 90, '\p{^l_}', "");
Expect(0, 90, '\P{l_}', "");
Expect(1, 90, '\P{^l_}', "");
Expect(0, 64, '\p{l_}', "");
Expect(1, 64, '\p{^l_}', "");
Expect(1, 64, '\P{l_}', "");
Expect(0, 64, '\P{^l_}', "");
Expect(1, 90, '\p{-	L}', "");
Expect(0, 90, '\p{^-	L}', "");
Expect(0, 90, '\P{-	L}', "");
Expect(1, 90, '\P{^-	L}', "");
Expect(0, 64, '\p{-	L}', "");
Expect(1, 64, '\p{^-	L}', "");
Expect(1, 64, '\P{-	L}', "");
Expect(0, 64, '\P{^-	L}', "");
Error('\p{	/a/Is l}');
Error('\P{	/a/Is l}');
Expect(1, 90, '\p{isl_}', "");
Expect(0, 90, '\p{^isl_}', "");
Expect(0, 90, '\P{isl_}', "");
Expect(1, 90, '\P{^isl_}', "");
Expect(0, 64, '\p{isl_}', "");
Expect(1, 64, '\p{^isl_}', "");
Expect(1, 64, '\P{isl_}', "");
Expect(0, 64, '\P{^isl_}', "");
Expect(1, 90, '\p{	Is-L}', "");
Expect(0, 90, '\p{^	Is-L}', "");
Expect(0, 90, '\P{	Is-L}', "");
Expect(1, 90, '\P{^	Is-L}', "");
Expect(0, 64, '\p{	Is-L}', "");
Expect(1, 64, '\p{^	Is-L}', "");
Expect(1, 64, '\P{	Is-L}', "");
Expect(0, 64, '\P{^	Is-L}', "");
Error('\p{_l&/a/}');
Error('\P{_l&/a/}');
Expect(1, 90, '\p{l&}', "");
Expect(0, 90, '\p{^l&}', "");
Expect(0, 90, '\P{l&}', "");
Expect(1, 90, '\P{^l&}', "");
Expect(0, 64, '\p{l&}', "");
Expect(1, 64, '\p{^l&}', "");
Expect(1, 64, '\P{l&}', "");
Expect(0, 64, '\P{^l&}', "");
Expect(1, 90, '\p{- L&}', "");
Expect(0, 90, '\p{^- L&}', "");
Expect(0, 90, '\P{- L&}', "");
Expect(1, 90, '\P{^- L&}', "");
Expect(0, 64, '\p{- L&}', "");
Expect(1, 64, '\p{^- L&}', "");
Expect(1, 64, '\P{- L&}', "");
Expect(0, 64, '\P{^- L&}', "");
Error('\p{-:=IS-L&}');
Error('\P{-:=IS-L&}');
Expect(1, 90, '\p{isl&}', "");
Expect(0, 90, '\p{^isl&}', "");
Expect(0, 90, '\P{isl&}', "");
Expect(1, 90, '\P{^isl&}', "");
Expect(0, 64, '\p{isl&}', "");
Expect(1, 64, '\p{^isl&}', "");
Expect(1, 64, '\P{isl&}', "");
Expect(0, 64, '\P{^isl&}', "");
Expect(1, 90, '\p{  Is	L&}', "");
Expect(0, 90, '\p{^  Is	L&}', "");
Expect(0, 90, '\P{  Is	L&}', "");
Expect(1, 90, '\P{^  Is	L&}', "");
Expect(0, 64, '\p{  Is	L&}', "");
Expect(1, 64, '\p{^  Is	L&}', "");
Expect(1, 64, '\P{  Is	L&}', "");
Expect(0, 64, '\P{^  Is	L&}', "");
Error('\p{:=	 SYMBOL}');
Error('\P{:=	 SYMBOL}');
Expect(1, 36, '\p{symbol}', "");
Expect(0, 36, '\p{^symbol}', "");
Expect(0, 36, '\P{symbol}', "");
Expect(1, 36, '\P{^symbol}', "");
Expect(0, 35, '\p{symbol}', "");
Expect(1, 35, '\p{^symbol}', "");
Expect(1, 35, '\P{symbol}', "");
Expect(0, 35, '\P{^symbol}', "");
Expect(1, 36, '\p{ 	SYMBOL}', "");
Expect(0, 36, '\p{^ 	SYMBOL}', "");
Expect(0, 36, '\P{ 	SYMBOL}', "");
Expect(1, 36, '\P{^ 	SYMBOL}', "");
Expect(0, 35, '\p{ 	SYMBOL}', "");
Expect(1, 35, '\p{^ 	SYMBOL}', "");
Expect(1, 35, '\P{ 	SYMBOL}', "");
Expect(0, 35, '\P{^ 	SYMBOL}', "");
Error('\p{ :=is Symbol}');
Error('\P{ :=is Symbol}');
Expect(1, 36, '\p{issymbol}', "");
Expect(0, 36, '\p{^issymbol}', "");
Expect(0, 36, '\P{issymbol}', "");
Expect(1, 36, '\P{^issymbol}', "");
Expect(0, 35, '\p{issymbol}', "");
Expect(1, 35, '\p{^issymbol}', "");
Expect(1, 35, '\P{issymbol}', "");
Expect(0, 35, '\P{^issymbol}', "");
Expect(1, 36, '\p{_	Is SYMBOL}', "");
Expect(0, 36, '\p{^_	Is SYMBOL}', "");
Expect(0, 36, '\P{_	Is SYMBOL}', "");
Expect(1, 36, '\P{^_	Is SYMBOL}', "");
Expect(0, 35, '\p{_	Is SYMBOL}', "");
Expect(1, 35, '\p{^_	Is SYMBOL}', "");
Expect(1, 35, '\P{_	Is SYMBOL}', "");
Expect(0, 35, '\P{^_	Is SYMBOL}', "");
Error('\p{/a/	_S}');
Error('\P{/a/	_S}');
Expect(1, 36, '\p{s}', "");
Expect(0, 36, '\p{^s}', "");
Expect(0, 36, '\P{s}', "");
Expect(1, 36, '\P{^s}', "");
Expect(0, 35, '\p{s}', "");
Expect(1, 35, '\p{^s}', "");
Expect(1, 35, '\P{s}', "");
Expect(0, 35, '\P{^s}', "");
Expect(1, 36, '\p{ 	S}', "");
Expect(0, 36, '\p{^ 	S}', "");
Expect(0, 36, '\P{ 	S}', "");
Expect(1, 36, '\P{^ 	S}', "");
Expect(0, 35, '\p{ 	S}', "");
Expect(1, 35, '\p{^ 	S}', "");
Expect(1, 35, '\P{ 	S}', "");
Expect(0, 35, '\P{^ 	S}', "");
Error('\p{-is_S:=}');
Error('\P{-is_S:=}');
Expect(1, 36, '\p{iss}', "");
Expect(0, 36, '\p{^iss}', "");
Expect(0, 36, '\P{iss}', "");
Expect(1, 36, '\P{^iss}', "");
Expect(0, 35, '\p{iss}', "");
Expect(1, 35, '\p{^iss}', "");
Expect(1, 35, '\P{iss}', "");
Expect(0, 35, '\P{^iss}', "");
Expect(1, 36, '\p{	is	S}', "");
Expect(0, 36, '\p{^	is	S}', "");
Expect(0, 36, '\P{	is	S}', "");
Expect(1, 36, '\P{^	is	S}', "");
Expect(0, 35, '\p{	is	S}', "");
Expect(1, 35, '\p{^	is	S}', "");
Expect(1, 35, '\P{	is	S}', "");
Expect(0, 35, '\P{^	is	S}', "");
Error('\p{/a/	-yijing_hexagram SYMBOLS}');
Error('\P{/a/	-yijing_hexagram SYMBOLS}');
Expect(1, 19967, '\p{yijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^yijinghexagramsymbols}', "");
Expect(0, 19967, '\P{yijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^yijinghexagramsymbols}', "");
Expect(0, 19903, '\p{yijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^yijinghexagramsymbols}', "");
Expect(1, 19903, '\P{yijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^yijinghexagramsymbols}', "");
Expect(1, 19967, '\p{	-yijing	hexagram_Symbols}', "");
Expect(0, 19967, '\p{^	-yijing	hexagram_Symbols}', "");
Expect(0, 19967, '\P{	-yijing	hexagram_Symbols}', "");
Expect(1, 19967, '\P{^	-yijing	hexagram_Symbols}', "");
Expect(0, 19903, '\p{	-yijing	hexagram_Symbols}', "");
Expect(1, 19903, '\p{^	-yijing	hexagram_Symbols}', "");
Expect(1, 19903, '\P{	-yijing	hexagram_Symbols}', "");
Expect(0, 19903, '\P{^	-yijing	hexagram_Symbols}', "");
Error('\p{ :=Is_yijing Hexagram_Symbols}');
Error('\P{ :=Is_yijing Hexagram_Symbols}');
Expect(1, 19967, '\p{isyijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^isyijinghexagramsymbols}', "");
Expect(0, 19967, '\P{isyijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^isyijinghexagramsymbols}', "");
Expect(0, 19903, '\p{isyijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^isyijinghexagramsymbols}', "");
Expect(1, 19903, '\P{isyijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^isyijinghexagramsymbols}', "");
Expect(1, 19967, '\p{-_Isyijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^-_Isyijinghexagramsymbols}', "");
Expect(0, 19967, '\P{-_Isyijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^-_Isyijinghexagramsymbols}', "");
Expect(0, 19903, '\p{-_Isyijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^-_Isyijinghexagramsymbols}', "");
Expect(1, 19903, '\P{-_Isyijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^-_Isyijinghexagramsymbols}', "");
Error('\p{- IN-Yijing/a/Hexagram-symbols}');
Error('\P{- IN-Yijing/a/Hexagram-symbols}');
Expect(1, 19967, '\p{inyijinghexagramsymbols}', "");
Expect(0, 19967, '\p{^inyijinghexagramsymbols}', "");
Expect(0, 19967, '\P{inyijinghexagramsymbols}', "");
Expect(1, 19967, '\P{^inyijinghexagramsymbols}', "");
Expect(0, 19903, '\p{inyijinghexagramsymbols}', "");
Expect(1, 19903, '\p{^inyijinghexagramsymbols}', "");
Expect(1, 19903, '\P{inyijinghexagramsymbols}', "");
Expect(0, 19903, '\P{^inyijinghexagramsymbols}', "");
Expect(1, 19967, '\p{In Yijing Hexagram	Symbols}', "");
Expect(0, 19967, '\p{^In Yijing Hexagram	Symbols}', "");
Expect(0, 19967, '\P{In Yijing Hexagram	Symbols}', "");
Expect(1, 19967, '\P{^In Yijing Hexagram	Symbols}', "");
Expect(0, 19903, '\p{In Yijing Hexagram	Symbols}', "");
Expect(1, 19903, '\p{^In Yijing Hexagram	Symbols}', "");
Expect(1, 19903, '\P{In Yijing Hexagram	Symbols}', "");
Expect(0, 19903, '\P{^In Yijing Hexagram	Symbols}', "");
Error('\p{	POSIXSPACE/a/}');
Error('\P{	POSIXSPACE/a/}');
Expect(1, 13, '\p{posixspace}', "");
Expect(0, 13, '\p{^posixspace}', "");
Expect(0, 13, '\P{posixspace}', "");
Expect(1, 13, '\P{^posixspace}', "");
Expect(0, 8, '\p{posixspace}', "");
Expect(1, 8, '\p{^posixspace}', "");
Expect(1, 8, '\P{posixspace}', "");
Expect(0, 8, '\P{^posixspace}', "");
Expect(1, 13, '\p{_ PosixSpace}', "");
Expect(0, 13, '\p{^_ PosixSpace}', "");
Expect(0, 13, '\P{_ PosixSpace}', "");
Expect(1, 13, '\P{^_ PosixSpace}', "");
Expect(0, 8, '\p{_ PosixSpace}', "");
Expect(1, 8, '\p{^_ PosixSpace}', "");
Expect(1, 8, '\P{_ PosixSpace}', "");
Expect(0, 8, '\P{^_ PosixSpace}', "");
Error('\p{/a/- IS PosixSpace}');
Error('\P{/a/- IS PosixSpace}');
Expect(1, 13, '\p{isposixspace}', "");
Expect(0, 13, '\p{^isposixspace}', "");
Expect(0, 13, '\P{isposixspace}', "");
Expect(1, 13, '\P{^isposixspace}', "");
Expect(0, 8, '\p{isposixspace}', "");
Expect(1, 8, '\p{^isposixspace}', "");
Expect(1, 8, '\P{isposixspace}', "");
Expect(0, 8, '\P{^isposixspace}', "");
Expect(1, 13, '\p{_-IsPosixSpace}', "");
Expect(0, 13, '\p{^_-IsPosixSpace}', "");
Expect(0, 13, '\P{_-IsPosixSpace}', "");
Expect(1, 13, '\P{^_-IsPosixSpace}', "");
Expect(0, 8, '\p{_-IsPosixSpace}', "");
Expect(1, 8, '\p{^_-IsPosixSpace}', "");
Expect(1, 8, '\P{_-IsPosixSpace}', "");
Expect(0, 8, '\P{^_-IsPosixSpace}', "");
Error('\p{:= 	currencySYMBOLS}');
Error('\P{:= 	currencySYMBOLS}');
Expect(1, 8399, '\p{currencysymbols}', "");
Expect(0, 8399, '\p{^currencysymbols}', "");
Expect(0, 8399, '\P{currencysymbols}', "");
Expect(1, 8399, '\P{^currencysymbols}', "");
Expect(0, 8351, '\p{currencysymbols}', "");
Expect(1, 8351, '\p{^currencysymbols}', "");
Expect(1, 8351, '\P{currencysymbols}', "");
Expect(0, 8351, '\P{^currencysymbols}', "");
Expect(1, 8399, '\p{-CURRENCYSymbols}', "");
Expect(0, 8399, '\p{^-CURRENCYSymbols}', "");
Expect(0, 8399, '\P{-CURRENCYSymbols}', "");
Expect(1, 8399, '\P{^-CURRENCYSymbols}', "");
Expect(0, 8351, '\p{-CURRENCYSymbols}', "");
Expect(1, 8351, '\p{^-CURRENCYSymbols}', "");
Expect(1, 8351, '\P{-CURRENCYSymbols}', "");
Expect(0, 8351, '\P{^-CURRENCYSymbols}', "");
Error('\p{_:=Is-Currency_symbols}');
Error('\P{_:=Is-Currency_symbols}');
Expect(1, 8399, '\p{iscurrencysymbols}', "");
Expect(0, 8399, '\p{^iscurrencysymbols}', "");
Expect(0, 8399, '\P{iscurrencysymbols}', "");
Expect(1, 8399, '\P{^iscurrencysymbols}', "");
Expect(0, 8351, '\p{iscurrencysymbols}', "");
Expect(1, 8351, '\p{^iscurrencysymbols}', "");
Expect(1, 8351, '\P{iscurrencysymbols}', "");
Expect(0, 8351, '\P{^iscurrencysymbols}', "");
Expect(1, 8399, '\p{-isCurrencySymbols}', "");
Expect(0, 8399, '\p{^-isCurrencySymbols}', "");
Expect(0, 8399, '\P{-isCurrencySymbols}', "");
Expect(1, 8399, '\P{^-isCurrencySymbols}', "");
Expect(0, 8351, '\p{-isCurrencySymbols}', "");
Expect(1, 8351, '\p{^-isCurrencySymbols}', "");
Expect(1, 8351, '\P{-isCurrencySymbols}', "");
Expect(0, 8351, '\P{^-isCurrencySymbols}', "");
Error('\p{_	In:=currency_symbols}');
Error('\P{_	In:=currency_symbols}');
Expect(1, 8399, '\p{incurrencysymbols}', "");
Expect(0, 8399, '\p{^incurrencysymbols}', "");
Expect(0, 8399, '\P{incurrencysymbols}', "");
Expect(1, 8399, '\P{^incurrencysymbols}', "");
Expect(0, 8351, '\p{incurrencysymbols}', "");
Expect(1, 8351, '\p{^incurrencysymbols}', "");
Expect(1, 8351, '\P{incurrencysymbols}', "");
Expect(0, 8351, '\P{^incurrencysymbols}', "");
Expect(1, 8399, '\p{ In	CURRENCY-symbols}', "");
Expect(0, 8399, '\p{^ In	CURRENCY-symbols}', "");
Expect(0, 8399, '\P{ In	CURRENCY-symbols}', "");
Expect(1, 8399, '\P{^ In	CURRENCY-symbols}', "");
Expect(0, 8351, '\p{ In	CURRENCY-symbols}', "");
Expect(1, 8351, '\p{^ In	CURRENCY-symbols}', "");
Expect(1, 8351, '\P{ In	CURRENCY-symbols}', "");
Expect(0, 8351, '\P{^ In	CURRENCY-symbols}', "");
Error('\p{_-Currency/a/symbol}');
Error('\P{_-Currency/a/symbol}');
Expect(1, 36, '\p{currencysymbol}', "");
Expect(0, 36, '\p{^currencysymbol}', "");
Expect(0, 36, '\P{currencysymbol}', "");
Expect(1, 36, '\P{^currencysymbol}', "");
Expect(0, 35, '\p{currencysymbol}', "");
Expect(1, 35, '\p{^currencysymbol}', "");
Expect(1, 35, '\P{currencysymbol}', "");
Expect(0, 35, '\P{^currencysymbol}', "");
Expect(1, 36, '\p{- Currency Symbol}', "");
Expect(0, 36, '\p{^- Currency Symbol}', "");
Expect(0, 36, '\P{- Currency Symbol}', "");
Expect(1, 36, '\P{^- Currency Symbol}', "");
Expect(0, 35, '\p{- Currency Symbol}', "");
Expect(1, 35, '\p{^- Currency Symbol}', "");
Expect(1, 35, '\P{- Currency Symbol}', "");
Expect(0, 35, '\P{^- Currency Symbol}', "");
Error('\p{	-isCURRENCYsymbol:=}');
Error('\P{	-isCURRENCYsymbol:=}');
Expect(1, 36, '\p{iscurrencysymbol}', "");
Expect(0, 36, '\p{^iscurrencysymbol}', "");
Expect(0, 36, '\P{iscurrencysymbol}', "");
Expect(1, 36, '\P{^iscurrencysymbol}', "");
Expect(0, 35, '\p{iscurrencysymbol}', "");
Expect(1, 35, '\p{^iscurrencysymbol}', "");
Expect(1, 35, '\P{iscurrencysymbol}', "");
Expect(0, 35, '\P{^iscurrencysymbol}', "");
Expect(1, 36, '\p{ IS Currency_Symbol}', "");
Expect(0, 36, '\p{^ IS Currency_Symbol}', "");
Expect(0, 36, '\P{ IS Currency_Symbol}', "");
Expect(1, 36, '\P{^ IS Currency_Symbol}', "");
Expect(0, 35, '\p{ IS Currency_Symbol}', "");
Expect(1, 35, '\p{^ IS Currency_Symbol}', "");
Expect(1, 35, '\P{ IS Currency_Symbol}', "");
Expect(0, 35, '\P{^ IS Currency_Symbol}', "");
Error('\p{		SC/a/}');
Error('\P{		SC/a/}');
Expect(1, 36, '\p{sc}', "");
Expect(0, 36, '\p{^sc}', "");
Expect(0, 36, '\P{sc}', "");
Expect(1, 36, '\P{^sc}', "");
Expect(0, 35, '\p{sc}', "");
Expect(1, 35, '\p{^sc}', "");
Expect(1, 35, '\P{sc}', "");
Expect(0, 35, '\P{^sc}', "");
Expect(1, 36, '\p{-SC}', "");
Expect(0, 36, '\p{^-SC}', "");
Expect(0, 36, '\P{-SC}', "");
Expect(1, 36, '\P{^-SC}', "");
Expect(0, 35, '\p{-SC}', "");
Expect(1, 35, '\p{^-SC}', "");
Expect(1, 35, '\P{-SC}', "");
Expect(0, 35, '\P{^-SC}', "");
Error('\p{ :=IS_SC}');
Error('\P{ :=IS_SC}');
Expect(1, 36, '\p{issc}', "");
Expect(0, 36, '\p{^issc}', "");
Expect(0, 36, '\P{issc}', "");
Expect(1, 36, '\P{^issc}', "");
Expect(0, 35, '\p{issc}', "");
Expect(1, 35, '\p{^issc}', "");
Expect(1, 35, '\P{issc}', "");
Expect(0, 35, '\P{^issc}', "");
Expect(1, 36, '\p{ IS-SC}', "");
Expect(0, 36, '\p{^ IS-SC}', "");
Expect(0, 36, '\P{ IS-SC}', "");
Expect(1, 36, '\P{^ IS-SC}', "");
Expect(0, 35, '\p{ IS-SC}', "");
Expect(1, 35, '\p{^ IS-SC}', "");
Expect(1, 35, '\P{ IS-SC}', "");
Expect(0, 35, '\P{^ IS-SC}', "");
Error('\p{_	High:=Surrogates}');
Error('\P{_	High:=Surrogates}');
Expect(0, 55295, '\p{highsurrogates}', "");
Expect(1, 55295, '\p{^highsurrogates}', "");
Expect(1, 55295, '\P{highsurrogates}', "");
Expect(0, 55295, '\P{^highsurrogates}', "");
Expect(0, 55295, '\p{ 	HIGH_Surrogates}', "");
Expect(1, 55295, '\p{^ 	HIGH_Surrogates}', "");
Expect(1, 55295, '\P{ 	HIGH_Surrogates}', "");
Expect(0, 55295, '\P{^ 	HIGH_Surrogates}', "");
Error('\p{:=IShigh Surrogates}');
Error('\P{:=IShigh Surrogates}');
Expect(0, 55295, '\p{ishighsurrogates}', "");
Expect(1, 55295, '\p{^ishighsurrogates}', "");
Expect(1, 55295, '\P{ishighsurrogates}', "");
Expect(0, 55295, '\P{^ishighsurrogates}', "");
Expect(0, 55295, '\p{-IS high-SURROGATES}', "");
Expect(1, 55295, '\p{^-IS high-SURROGATES}', "");
Expect(1, 55295, '\P{-IS high-SURROGATES}', "");
Expect(0, 55295, '\P{^-IS high-SURROGATES}', "");
Error('\p{ 	IN	HIGH/a/SURROGATES}');
Error('\P{ 	IN	HIGH/a/SURROGATES}');
Expect(0, 55295, '\p{inhighsurrogates}', "");
Expect(1, 55295, '\p{^inhighsurrogates}', "");
Expect(1, 55295, '\P{inhighsurrogates}', "");
Expect(0, 55295, '\P{^inhighsurrogates}', "");
Expect(0, 55295, '\p{  In HIGH	SURROGATES}', "");
Expect(1, 55295, '\p{^  In HIGH	SURROGATES}', "");
Expect(1, 55295, '\P{  In HIGH	SURROGATES}', "");
Expect(0, 55295, '\P{^  In HIGH	SURROGATES}', "");
Error('\p{/a/-_INDESERET}');
Error('\P{/a/-_INDESERET}');
Expect(1, 66639, '\p{indeseret}', "");
Expect(0, 66639, '\p{^indeseret}', "");
Expect(0, 66639, '\P{indeseret}', "");
Expect(1, 66639, '\P{^indeseret}', "");
Expect(0, 66559, '\p{indeseret}', "");
Expect(1, 66559, '\p{^indeseret}', "");
Expect(1, 66559, '\P{indeseret}', "");
Expect(0, 66559, '\P{^indeseret}', "");
Expect(1, 66639, '\p{_InDeseret}', "");
Expect(0, 66639, '\p{^_InDeseret}', "");
Expect(0, 66639, '\P{_InDeseret}', "");
Expect(1, 66639, '\P{^_InDeseret}', "");
Expect(0, 66559, '\p{_InDeseret}', "");
Expect(1, 66559, '\p{^_InDeseret}', "");
Expect(1, 66559, '\P{_InDeseret}', "");
Expect(0, 66559, '\P{^_InDeseret}', "");
Error('\p{:= 	Other_Alphabetic}');
Error('\P{:= 	Other_Alphabetic}');
Expect(1, 837, '\p{otheralphabetic}', 'deprecated');
Expect(0, 837, '\p{^otheralphabetic}', 'deprecated');
Expect(0, 837, '\P{otheralphabetic}', 'deprecated');
Expect(1, 837, '\P{^otheralphabetic}', 'deprecated');
Expect(0, 836, '\p{otheralphabetic}', 'deprecated');
Expect(1, 836, '\p{^otheralphabetic}', 'deprecated');
Expect(1, 836, '\P{otheralphabetic}', 'deprecated');
Expect(0, 836, '\P{^otheralphabetic}', 'deprecated');
Expect(1, 837, '\p{ Other alphabetic}', 'deprecated');
Expect(0, 837, '\p{^ Other alphabetic}', 'deprecated');
Expect(0, 837, '\P{ Other alphabetic}', 'deprecated');
Expect(1, 837, '\P{^ Other alphabetic}', 'deprecated');
Expect(0, 836, '\p{ Other alphabetic}', 'deprecated');
Expect(1, 836, '\p{^ Other alphabetic}', 'deprecated');
Expect(1, 836, '\P{ Other alphabetic}', 'deprecated');
Expect(0, 836, '\P{^ Other alphabetic}', 'deprecated');
Error('\p{-/a/is_OtherAlphabetic}');
Error('\P{-/a/is_OtherAlphabetic}');
Expect(1, 837, '\p{isotheralphabetic}', 'deprecated');
Expect(0, 837, '\p{^isotheralphabetic}', 'deprecated');
Expect(0, 837, '\P{isotheralphabetic}', 'deprecated');
Expect(1, 837, '\P{^isotheralphabetic}', 'deprecated');
Expect(0, 836, '\p{isotheralphabetic}', 'deprecated');
Expect(1, 836, '\p{^isotheralphabetic}', 'deprecated');
Expect(1, 836, '\P{isotheralphabetic}', 'deprecated');
Expect(0, 836, '\P{^isotheralphabetic}', 'deprecated');
Expect(1, 837, '\p{ 	is Other-Alphabetic}', 'deprecated');
Expect(0, 837, '\p{^ 	is Other-Alphabetic}', 'deprecated');
Expect(0, 837, '\P{ 	is Other-Alphabetic}', 'deprecated');
Expect(1, 837, '\P{^ 	is Other-Alphabetic}', 'deprecated');
Expect(0, 836, '\p{ 	is Other-Alphabetic}', 'deprecated');
Expect(1, 836, '\p{^ 	is Other-Alphabetic}', 'deprecated');
Expect(1, 836, '\P{ 	is Other-Alphabetic}', 'deprecated');
Expect(0, 836, '\P{^ 	is Other-Alphabetic}', 'deprecated');
Error('\p{/a/	OAlpha}');
Error('\P{/a/	OAlpha}');
Expect(1, 837, '\p{oalpha}', 'deprecated');
Expect(0, 837, '\p{^oalpha}', 'deprecated');
Expect(0, 837, '\P{oalpha}', 'deprecated');
Expect(1, 837, '\P{^oalpha}', 'deprecated');
Expect(0, 836, '\p{oalpha}', 'deprecated');
Expect(1, 836, '\p{^oalpha}', 'deprecated');
Expect(1, 836, '\P{oalpha}', 'deprecated');
Expect(0, 836, '\P{^oalpha}', 'deprecated');
Expect(1, 837, '\p{	 oalpha}', 'deprecated');
Expect(0, 837, '\p{^	 oalpha}', 'deprecated');
Expect(0, 837, '\P{	 oalpha}', 'deprecated');
Expect(1, 837, '\P{^	 oalpha}', 'deprecated');
Expect(0, 836, '\p{	 oalpha}', 'deprecated');
Expect(1, 836, '\p{^	 oalpha}', 'deprecated');
Expect(1, 836, '\P{	 oalpha}', 'deprecated');
Expect(0, 836, '\P{^	 oalpha}', 'deprecated');
Error('\p{-/a/Is OALPHA}');
Error('\P{-/a/Is OALPHA}');
Expect(1, 837, '\p{isoalpha}', 'deprecated');
Expect(0, 837, '\p{^isoalpha}', 'deprecated');
Expect(0, 837, '\P{isoalpha}', 'deprecated');
Expect(1, 837, '\P{^isoalpha}', 'deprecated');
Expect(0, 836, '\p{isoalpha}', 'deprecated');
Expect(1, 836, '\p{^isoalpha}', 'deprecated');
Expect(1, 836, '\P{isoalpha}', 'deprecated');
Expect(0, 836, '\P{^isoalpha}', 'deprecated');
Expect(1, 837, '\p{	_Is oalpha}', 'deprecated');
Expect(0, 837, '\p{^	_Is oalpha}', 'deprecated');
Expect(0, 837, '\P{	_Is oalpha}', 'deprecated');
Expect(1, 837, '\P{^	_Is oalpha}', 'deprecated');
Expect(0, 836, '\p{	_Is oalpha}', 'deprecated');
Expect(1, 836, '\p{^	_Is oalpha}', 'deprecated');
Expect(1, 836, '\P{	_Is oalpha}', 'deprecated');
Expect(0, 836, '\P{^	_Is oalpha}', 'deprecated');
Error('\p{_/a/Supplementary Privateuse_AREA_A}');
Error('\P{_/a/Supplementary Privateuse_AREA_A}');
Expect(1, 983040, '\p{supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^supplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^supplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{supplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^supplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{supplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^supplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{_	Supplementary_PRIVATE_Use Area-A}', "");
Expect(0, 983040, '\p{^_	Supplementary_PRIVATE_Use Area-A}', "");
Expect(0, 983040, '\P{_	Supplementary_PRIVATE_Use Area-A}', "");
Expect(1, 983040, '\P{^_	Supplementary_PRIVATE_Use Area-A}', "");
Expect(0, 1, '\p{_	Supplementary_PRIVATE_Use Area-A}', "");
Expect(1, 1, '\p{^_	Supplementary_PRIVATE_Use Area-A}', "");
Expect(1, 1, '\P{_	Supplementary_PRIVATE_Use Area-A}', "");
Expect(0, 1, '\P{^_	Supplementary_PRIVATE_Use Area-A}', "");
Error('\p{	 Is_SUPPLEMENTARYPRIVATE_Use-Area/a/A}');
Error('\P{	 Is_SUPPLEMENTARYPRIVATE_Use-Area/a/A}');
Expect(1, 983040, '\p{issupplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^issupplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{issupplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^issupplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{issupplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^issupplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{issupplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^issupplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{- IS	SUPPLEMENTARYprivate_USE Area_A}', "");
Expect(0, 983040, '\p{^- IS	SUPPLEMENTARYprivate_USE Area_A}', "");
Expect(0, 983040, '\P{- IS	SUPPLEMENTARYprivate_USE Area_A}', "");
Expect(1, 983040, '\P{^- IS	SUPPLEMENTARYprivate_USE Area_A}', "");
Expect(0, 1, '\p{- IS	SUPPLEMENTARYprivate_USE Area_A}', "");
Expect(1, 1, '\p{^- IS	SUPPLEMENTARYprivate_USE Area_A}', "");
Expect(1, 1, '\P{- IS	SUPPLEMENTARYprivate_USE Area_A}', "");
Expect(0, 1, '\P{^- IS	SUPPLEMENTARYprivate_USE Area_A}', "");
Error('\p{_in-SUPPLEMENTARYPRIVATE:=useArea-A}');
Error('\P{_in-SUPPLEMENTARYPRIVATE:=useArea-A}');
Expect(1, 983040, '\p{insupplementaryprivateuseareaa}', "");
Expect(0, 983040, '\p{^insupplementaryprivateuseareaa}', "");
Expect(0, 983040, '\P{insupplementaryprivateuseareaa}', "");
Expect(1, 983040, '\P{^insupplementaryprivateuseareaa}', "");
Expect(0, 1, '\p{insupplementaryprivateuseareaa}', "");
Expect(1, 1, '\p{^insupplementaryprivateuseareaa}', "");
Expect(1, 1, '\P{insupplementaryprivateuseareaa}', "");
Expect(0, 1, '\P{^insupplementaryprivateuseareaa}', "");
Expect(1, 983040, '\p{-In supplementary-Private-use	Area-A}', "");
Expect(0, 983040, '\p{^-In supplementary-Private-use	Area-A}', "");
Expect(0, 983040, '\P{-In supplementary-Private-use	Area-A}', "");
Expect(1, 983040, '\P{^-In supplementary-Private-use	Area-A}', "");
Expect(0, 1, '\p{-In supplementary-Private-use	Area-A}', "");
Expect(1, 1, '\p{^-In supplementary-Private-use	Area-A}', "");
Expect(1, 1, '\P{-In supplementary-Private-use	Area-A}', "");
Expect(0, 1, '\P{^-In supplementary-Private-use	Area-A}', "");
Error('\p{	 SAURASHTRA/a/}');
Error('\P{	 SAURASHTRA/a/}');
Expect(1, 43204, '\p{saurashtra}', "");
Expect(0, 43204, '\p{^saurashtra}', "");
Expect(0, 43204, '\P{saurashtra}', "");
Expect(1, 43204, '\P{^saurashtra}', "");
Expect(0, 43135, '\p{saurashtra}', "");
Expect(1, 43135, '\p{^saurashtra}', "");
Expect(1, 43135, '\P{saurashtra}', "");
Expect(0, 43135, '\P{^saurashtra}', "");
Expect(1, 43204, '\p{	_SAURASHTRA}', "");
Expect(0, 43204, '\p{^	_SAURASHTRA}', "");
Expect(0, 43204, '\P{	_SAURASHTRA}', "");
Expect(1, 43204, '\P{^	_SAURASHTRA}', "");
Expect(0, 43135, '\p{	_SAURASHTRA}', "");
Expect(1, 43135, '\p{^	_SAURASHTRA}', "");
Expect(1, 43135, '\P{	_SAURASHTRA}', "");
Expect(0, 43135, '\P{^	_SAURASHTRA}', "");
Error('\p{	Is Saurashtra/a/}');
Error('\P{	Is Saurashtra/a/}');
Expect(1, 43204, '\p{issaurashtra}', "");
Expect(0, 43204, '\p{^issaurashtra}', "");
Expect(0, 43204, '\P{issaurashtra}', "");
Expect(1, 43204, '\P{^issaurashtra}', "");
Expect(0, 43135, '\p{issaurashtra}', "");
Expect(1, 43135, '\p{^issaurashtra}', "");
Expect(1, 43135, '\P{issaurashtra}', "");
Expect(0, 43135, '\P{^issaurashtra}', "");
Expect(1, 43204, '\p{_ Is_Saurashtra}', "");
Expect(0, 43204, '\p{^_ Is_Saurashtra}', "");
Expect(0, 43204, '\P{_ Is_Saurashtra}', "");
Expect(1, 43204, '\P{^_ Is_Saurashtra}', "");
Expect(0, 43135, '\p{_ Is_Saurashtra}', "");
Expect(1, 43135, '\p{^_ Is_Saurashtra}', "");
Expect(1, 43135, '\P{_ Is_Saurashtra}', "");
Expect(0, 43135, '\P{^_ Is_Saurashtra}', "");
Error('\p{ /a/Saur}');
Error('\P{ /a/Saur}');
Expect(1, 43204, '\p{saur}', "");
Expect(0, 43204, '\p{^saur}', "");
Expect(0, 43204, '\P{saur}', "");
Expect(1, 43204, '\P{^saur}', "");
Expect(0, 43135, '\p{saur}', "");
Expect(1, 43135, '\p{^saur}', "");
Expect(1, 43135, '\P{saur}', "");
Expect(0, 43135, '\P{^saur}', "");
Expect(1, 43204, '\p{	saur}', "");
Expect(0, 43204, '\p{^	saur}', "");
Expect(0, 43204, '\P{	saur}', "");
Expect(1, 43204, '\P{^	saur}', "");
Expect(0, 43135, '\p{	saur}', "");
Expect(1, 43135, '\p{^	saur}', "");
Expect(1, 43135, '\P{	saur}', "");
Expect(0, 43135, '\P{^	saur}', "");
Error('\p{-/a/Is Saur}');
Error('\P{-/a/Is Saur}');
Expect(1, 43204, '\p{issaur}', "");
Expect(0, 43204, '\p{^issaur}', "");
Expect(0, 43204, '\P{issaur}', "");
Expect(1, 43204, '\P{^issaur}', "");
Expect(0, 43135, '\p{issaur}', "");
Expect(1, 43135, '\p{^issaur}', "");
Expect(1, 43135, '\P{issaur}', "");
Expect(0, 43135, '\P{^issaur}', "");
Expect(1, 43204, '\p{_	is-SAUR}', "");
Expect(0, 43204, '\p{^_	is-SAUR}', "");
Expect(0, 43204, '\P{_	is-SAUR}', "");
Expect(1, 43204, '\P{^_	is-SAUR}', "");
Expect(0, 43135, '\p{_	is-SAUR}', "");
Expect(1, 43135, '\p{^_	is-SAUR}', "");
Expect(1, 43135, '\P{_	is-SAUR}', "");
Expect(0, 43135, '\P{^_	is-SAUR}', "");
Error('\p{	_X-extend/a/}');
Error('\P{	_X-extend/a/}');
Expect(1, 879, '\p{_X_EXTEND}', "");
Expect(0, 879, '\p{^_X_EXTEND}', "");
Expect(0, 879, '\P{_X_EXTEND}', "");
Expect(1, 879, '\P{^_X_EXTEND}', "");
Expect(0, 767, '\p{_X_EXTEND}', "");
Expect(1, 767, '\p{^_X_EXTEND}', "");
Expect(1, 767, '\P{_X_EXTEND}', "");
Expect(0, 767, '\P{^_X_EXTEND}', "");
Error('\p{-tagbanwa:=}');
Error('\P{-tagbanwa:=}');
Expect(1, 5996, '\p{tagbanwa}', "");
Expect(0, 5996, '\p{^tagbanwa}', "");
Expect(0, 5996, '\P{tagbanwa}', "");
Expect(1, 5996, '\P{^tagbanwa}', "");
Expect(0, 5983, '\p{tagbanwa}', "");
Expect(1, 5983, '\p{^tagbanwa}', "");
Expect(1, 5983, '\P{tagbanwa}', "");
Expect(0, 5983, '\P{^tagbanwa}', "");
Expect(1, 5996, '\p{ TAGBANWA}', "");
Expect(0, 5996, '\p{^ TAGBANWA}', "");
Expect(0, 5996, '\P{ TAGBANWA}', "");
Expect(1, 5996, '\P{^ TAGBANWA}', "");
Expect(0, 5983, '\p{ TAGBANWA}', "");
Expect(1, 5983, '\p{^ TAGBANWA}', "");
Expect(1, 5983, '\P{ TAGBANWA}', "");
Expect(0, 5983, '\P{^ TAGBANWA}', "");
Error('\p{	/a/Is-tagbanwa}');
Error('\P{	/a/Is-tagbanwa}');
Expect(1, 5996, '\p{istagbanwa}', "");
Expect(0, 5996, '\p{^istagbanwa}', "");
Expect(0, 5996, '\P{istagbanwa}', "");
Expect(1, 5996, '\P{^istagbanwa}', "");
Expect(0, 5983, '\p{istagbanwa}', "");
Expect(1, 5983, '\p{^istagbanwa}', "");
Expect(1, 5983, '\P{istagbanwa}', "");
Expect(0, 5983, '\P{^istagbanwa}', "");
Expect(1, 5996, '\p{_istagbanwa}', "");
Expect(0, 5996, '\p{^_istagbanwa}', "");
Expect(0, 5996, '\P{_istagbanwa}', "");
Expect(1, 5996, '\P{^_istagbanwa}', "");
Expect(0, 5983, '\p{_istagbanwa}', "");
Expect(1, 5983, '\p{^_istagbanwa}', "");
Expect(1, 5983, '\P{_istagbanwa}', "");
Expect(0, 5983, '\P{^_istagbanwa}', "");
Error('\p{	_Tagb/a/}');
Error('\P{	_Tagb/a/}');
Expect(1, 5996, '\p{tagb}', "");
Expect(0, 5996, '\p{^tagb}', "");
Expect(0, 5996, '\P{tagb}', "");
Expect(1, 5996, '\P{^tagb}', "");
Expect(0, 5983, '\p{tagb}', "");
Expect(1, 5983, '\p{^tagb}', "");
Expect(1, 5983, '\P{tagb}', "");
Expect(0, 5983, '\P{^tagb}', "");
Expect(1, 5996, '\p{_-Tagb}', "");
Expect(0, 5996, '\p{^_-Tagb}', "");
Expect(0, 5996, '\P{_-Tagb}', "");
Expect(1, 5996, '\P{^_-Tagb}', "");
Expect(0, 5983, '\p{_-Tagb}', "");
Expect(1, 5983, '\p{^_-Tagb}', "");
Expect(1, 5983, '\P{_-Tagb}', "");
Expect(0, 5983, '\P{^_-Tagb}', "");
Error('\p{		IS/a/tagb}');
Error('\P{		IS/a/tagb}');
Expect(1, 5996, '\p{istagb}', "");
Expect(0, 5996, '\p{^istagb}', "");
Expect(0, 5996, '\P{istagb}', "");
Expect(1, 5996, '\P{^istagb}', "");
Expect(0, 5983, '\p{istagb}', "");
Expect(1, 5983, '\p{^istagb}', "");
Expect(1, 5983, '\P{istagb}', "");
Expect(0, 5983, '\P{^istagb}', "");
Expect(1, 5996, '\p{ 	is Tagb}', "");
Expect(0, 5996, '\p{^ 	is Tagb}', "");
Expect(0, 5996, '\P{ 	is Tagb}', "");
Expect(1, 5996, '\P{^ 	is Tagb}', "");
Expect(0, 5983, '\p{ 	is Tagb}', "");
Expect(1, 5983, '\p{^ 	is Tagb}', "");
Expect(1, 5983, '\P{ 	is Tagb}', "");
Expect(0, 5983, '\P{^ 	is Tagb}', "");
Error('\p{	 khmer Symbols:=}');
Error('\P{	 khmer Symbols:=}');
Expect(1, 6655, '\p{khmersymbols}', "");
Expect(0, 6655, '\p{^khmersymbols}', "");
Expect(0, 6655, '\P{khmersymbols}', "");
Expect(1, 6655, '\P{^khmersymbols}', "");
Expect(0, 6623, '\p{khmersymbols}', "");
Expect(1, 6623, '\p{^khmersymbols}', "");
Expect(1, 6623, '\P{khmersymbols}', "");
Expect(0, 6623, '\P{^khmersymbols}', "");
Expect(1, 6655, '\p{		KhmerSymbols}', "");
Expect(0, 6655, '\p{^		KhmerSymbols}', "");
Expect(0, 6655, '\P{		KhmerSymbols}', "");
Expect(1, 6655, '\P{^		KhmerSymbols}', "");
Expect(0, 6623, '\p{		KhmerSymbols}', "");
Expect(1, 6623, '\p{^		KhmerSymbols}', "");
Expect(1, 6623, '\P{		KhmerSymbols}', "");
Expect(0, 6623, '\P{^		KhmerSymbols}', "");
Error('\p{_IS:=Khmer-symbols}');
Error('\P{_IS:=Khmer-symbols}');
Expect(1, 6655, '\p{iskhmersymbols}', "");
Expect(0, 6655, '\p{^iskhmersymbols}', "");
Expect(0, 6655, '\P{iskhmersymbols}', "");
Expect(1, 6655, '\P{^iskhmersymbols}', "");
Expect(0, 6623, '\p{iskhmersymbols}', "");
Expect(1, 6623, '\p{^iskhmersymbols}', "");
Expect(1, 6623, '\P{iskhmersymbols}', "");
Expect(0, 6623, '\P{^iskhmersymbols}', "");
Expect(1, 6655, '\p{--is	khmer-SYMBOLS}', "");
Expect(0, 6655, '\p{^--is	khmer-SYMBOLS}', "");
Expect(0, 6655, '\P{--is	khmer-SYMBOLS}', "");
Expect(1, 6655, '\P{^--is	khmer-SYMBOLS}', "");
Expect(0, 6623, '\p{--is	khmer-SYMBOLS}', "");
Expect(1, 6623, '\p{^--is	khmer-SYMBOLS}', "");
Expect(1, 6623, '\P{--is	khmer-SYMBOLS}', "");
Expect(0, 6623, '\P{^--is	khmer-SYMBOLS}', "");
Error('\p{  In_khmer	symbols/a/}');
Error('\P{  In_khmer	symbols/a/}');
Expect(1, 6655, '\p{inkhmersymbols}', "");
Expect(0, 6655, '\p{^inkhmersymbols}', "");
Expect(0, 6655, '\P{inkhmersymbols}', "");
Expect(1, 6655, '\P{^inkhmersymbols}', "");
Expect(0, 6623, '\p{inkhmersymbols}', "");
Expect(1, 6623, '\p{^inkhmersymbols}', "");
Expect(1, 6623, '\P{inkhmersymbols}', "");
Expect(0, 6623, '\P{^inkhmersymbols}', "");
Expect(1, 6655, '\p{ 	in	khmerSymbols}', "");
Expect(0, 6655, '\p{^ 	in	khmerSymbols}', "");
Expect(0, 6655, '\P{ 	in	khmerSymbols}', "");
Expect(1, 6655, '\P{^ 	in	khmerSymbols}', "");
Expect(0, 6623, '\p{ 	in	khmerSymbols}', "");
Expect(1, 6623, '\p{^ 	in	khmerSymbols}', "");
Expect(1, 6623, '\P{ 	in	khmerSymbols}', "");
Expect(0, 6623, '\P{^ 	in	khmerSymbols}', "");
Error('\p{_/a/math}');
Error('\P{_/a/math}');
Expect(1, 43, '\p{math}', "");
Expect(0, 43, '\p{^math}', "");
Expect(0, 43, '\P{math}', "");
Expect(1, 43, '\P{^math}', "");
Expect(0, 42, '\p{math}', "");
Expect(1, 42, '\p{^math}', "");
Expect(1, 42, '\P{math}', "");
Expect(0, 42, '\P{^math}', "");
Expect(1, 43, '\p{_-Math}', "");
Expect(0, 43, '\p{^_-Math}', "");
Expect(0, 43, '\P{_-Math}', "");
Expect(1, 43, '\P{^_-Math}', "");
Expect(0, 42, '\p{_-Math}', "");
Expect(1, 42, '\p{^_-Math}', "");
Expect(1, 42, '\P{_-Math}', "");
Expect(0, 42, '\P{^_-Math}', "");
Error('\p{/a/-Is_Math}');
Error('\P{/a/-Is_Math}');
Expect(1, 43, '\p{ismath}', "");
Expect(0, 43, '\p{^ismath}', "");
Expect(0, 43, '\P{ismath}', "");
Expect(1, 43, '\P{^ismath}', "");
Expect(0, 42, '\p{ismath}', "");
Expect(1, 42, '\p{^ismath}', "");
Expect(1, 42, '\P{ismath}', "");
Expect(0, 42, '\P{^ismath}', "");
Expect(1, 43, '\p{-Is Math}', "");
Expect(0, 43, '\p{^-Is Math}', "");
Expect(0, 43, '\P{-Is Math}', "");
Expect(1, 43, '\P{^-Is Math}', "");
Expect(0, 42, '\p{-Is Math}', "");
Expect(1, 42, '\p{^-Is Math}', "");
Expect(1, 42, '\P{-Is Math}', "");
Expect(0, 42, '\P{^-Is Math}', "");
Error('\p{ Buhid/a/}');
Error('\P{ Buhid/a/}');
Expect(1, 5971, '\p{buhid}', "");
Expect(0, 5971, '\p{^buhid}', "");
Expect(0, 5971, '\P{buhid}', "");
Expect(1, 5971, '\P{^buhid}', "");
Expect(0, 5951, '\p{buhid}', "");
Expect(1, 5951, '\p{^buhid}', "");
Expect(1, 5951, '\P{buhid}', "");
Expect(0, 5951, '\P{^buhid}', "");
Expect(1, 5971, '\p{_-Buhid}', "");
Expect(0, 5971, '\p{^_-Buhid}', "");
Expect(0, 5971, '\P{_-Buhid}', "");
Expect(1, 5971, '\P{^_-Buhid}', "");
Expect(0, 5951, '\p{_-Buhid}', "");
Expect(1, 5951, '\p{^_-Buhid}', "");
Expect(1, 5951, '\P{_-Buhid}', "");
Expect(0, 5951, '\P{^_-Buhid}', "");
Error('\p{_Is BUHID:=}');
Error('\P{_Is BUHID:=}');
Expect(1, 5971, '\p{isbuhid}', "");
Expect(0, 5971, '\p{^isbuhid}', "");
Expect(0, 5971, '\P{isbuhid}', "");
Expect(1, 5971, '\P{^isbuhid}', "");
Expect(0, 5951, '\p{isbuhid}', "");
Expect(1, 5951, '\p{^isbuhid}', "");
Expect(1, 5951, '\P{isbuhid}', "");
Expect(0, 5951, '\P{^isbuhid}', "");
Expect(1, 5971, '\p{--Is-Buhid}', "");
Expect(0, 5971, '\p{^--Is-Buhid}', "");
Expect(0, 5971, '\P{--Is-Buhid}', "");
Expect(1, 5971, '\P{^--Is-Buhid}', "");
Expect(0, 5951, '\p{--Is-Buhid}', "");
Expect(1, 5951, '\p{^--Is-Buhid}', "");
Expect(1, 5951, '\P{--Is-Buhid}', "");
Expect(0, 5951, '\P{^--Is-Buhid}', "");
Error('\p{_ buhd/a/}');
Error('\P{_ buhd/a/}');
Expect(1, 5971, '\p{buhd}', "");
Expect(0, 5971, '\p{^buhd}', "");
Expect(0, 5971, '\P{buhd}', "");
Expect(1, 5971, '\P{^buhd}', "");
Expect(0, 5951, '\p{buhd}', "");
Expect(1, 5951, '\p{^buhd}', "");
Expect(1, 5951, '\P{buhd}', "");
Expect(0, 5951, '\P{^buhd}', "");
Expect(1, 5971, '\p{	Buhd}', "");
Expect(0, 5971, '\p{^	Buhd}', "");
Expect(0, 5971, '\P{	Buhd}', "");
Expect(1, 5971, '\P{^	Buhd}', "");
Expect(0, 5951, '\p{	Buhd}', "");
Expect(1, 5951, '\p{^	Buhd}', "");
Expect(1, 5951, '\P{	Buhd}', "");
Expect(0, 5951, '\P{^	Buhd}', "");
Error('\p{/a/is_buhd}');
Error('\P{/a/is_buhd}');
Expect(1, 5971, '\p{isbuhd}', "");
Expect(0, 5971, '\p{^isbuhd}', "");
Expect(0, 5971, '\P{isbuhd}', "");
Expect(1, 5971, '\P{^isbuhd}', "");
Expect(0, 5951, '\p{isbuhd}', "");
Expect(1, 5951, '\p{^isbuhd}', "");
Expect(1, 5951, '\P{isbuhd}', "");
Expect(0, 5951, '\P{^isbuhd}', "");
Expect(1, 5971, '\p{	-IS Buhd}', "");
Expect(0, 5971, '\p{^	-IS Buhd}', "");
Expect(0, 5971, '\P{	-IS Buhd}', "");
Expect(1, 5971, '\P{^	-IS Buhd}', "");
Expect(0, 5951, '\p{	-IS Buhd}', "");
Expect(1, 5951, '\p{^	-IS Buhd}', "");
Expect(1, 5951, '\P{	-IS Buhd}', "");
Expect(0, 5951, '\P{^	-IS Buhd}', "");
Error('\p{:=GREEKAND_Coptic}');
Error('\P{:=GREEKAND_Coptic}');
Expect(1, 1023, '\p{greekandcoptic}', "");
Expect(0, 1023, '\p{^greekandcoptic}', "");
Expect(0, 1023, '\P{greekandcoptic}', "");
Expect(1, 1023, '\P{^greekandcoptic}', "");
Expect(0, 879, '\p{greekandcoptic}', "");
Expect(1, 879, '\p{^greekandcoptic}', "");
Expect(1, 879, '\P{greekandcoptic}', "");
Expect(0, 879, '\P{^greekandcoptic}', "");
Expect(1, 1023, '\p{ Greek And Coptic}', "");
Expect(0, 1023, '\p{^ Greek And Coptic}', "");
Expect(0, 1023, '\P{ Greek And Coptic}', "");
Expect(1, 1023, '\P{^ Greek And Coptic}', "");
Expect(0, 879, '\p{ Greek And Coptic}', "");
Expect(1, 879, '\p{^ Greek And Coptic}', "");
Expect(1, 879, '\P{ Greek And Coptic}', "");
Expect(0, 879, '\P{^ Greek And Coptic}', "");
Error('\p{/a/is	Greek_and Coptic}');
Error('\P{/a/is	Greek_and Coptic}');
Expect(1, 1023, '\p{isgreekandcoptic}', "");
Expect(0, 1023, '\p{^isgreekandcoptic}', "");
Expect(0, 1023, '\P{isgreekandcoptic}', "");
Expect(1, 1023, '\P{^isgreekandcoptic}', "");
Expect(0, 879, '\p{isgreekandcoptic}', "");
Expect(1, 879, '\p{^isgreekandcoptic}', "");
Expect(1, 879, '\P{isgreekandcoptic}', "");
Expect(0, 879, '\P{^isgreekandcoptic}', "");
Expect(1, 1023, '\p{ _IsGreekAnd Coptic}', "");
Expect(0, 1023, '\p{^ _IsGreekAnd Coptic}', "");
Expect(0, 1023, '\P{ _IsGreekAnd Coptic}', "");
Expect(1, 1023, '\P{^ _IsGreekAnd Coptic}', "");
Expect(0, 879, '\p{ _IsGreekAnd Coptic}', "");
Expect(1, 879, '\p{^ _IsGreekAnd Coptic}', "");
Expect(1, 879, '\P{ _IsGreekAnd Coptic}', "");
Expect(0, 879, '\P{^ _IsGreekAnd Coptic}', "");
Error('\p{_-in GreekAnd/a/Coptic}');
Error('\P{_-in GreekAnd/a/Coptic}');
Expect(1, 1023, '\p{ingreekandcoptic}', "");
Expect(0, 1023, '\p{^ingreekandcoptic}', "");
Expect(0, 1023, '\P{ingreekandcoptic}', "");
Expect(1, 1023, '\P{^ingreekandcoptic}', "");
Expect(0, 879, '\p{ingreekandcoptic}', "");
Expect(1, 879, '\p{^ingreekandcoptic}', "");
Expect(1, 879, '\P{ingreekandcoptic}', "");
Expect(0, 879, '\P{^ingreekandcoptic}', "");
Expect(1, 1023, '\p{ IN-GREEK_And	Coptic}', "");
Expect(0, 1023, '\p{^ IN-GREEK_And	Coptic}', "");
Expect(0, 1023, '\P{ IN-GREEK_And	Coptic}', "");
Expect(1, 1023, '\P{^ IN-GREEK_And	Coptic}', "");
Expect(0, 879, '\p{ IN-GREEK_And	Coptic}', "");
Expect(1, 879, '\p{^ IN-GREEK_And	Coptic}', "");
Expect(1, 879, '\P{ IN-GREEK_And	Coptic}', "");
Expect(0, 879, '\P{^ IN-GREEK_And	Coptic}', "");
Error('\p{ 	IN/a/Greek}');
Error('\P{ 	IN/a/Greek}');
Expect(1, 1023, '\p{ingreek}', "");
Expect(0, 1023, '\p{^ingreek}', "");
Expect(0, 1023, '\P{ingreek}', "");
Expect(1, 1023, '\P{^ingreek}', "");
Expect(0, 879, '\p{ingreek}', "");
Expect(1, 879, '\p{^ingreek}', "");
Expect(1, 879, '\P{ingreek}', "");
Expect(0, 879, '\P{^ingreek}', "");
Expect(1, 1023, '\p{--In greek}', "");
Expect(0, 1023, '\p{^--In greek}', "");
Expect(0, 1023, '\P{--In greek}', "");
Expect(1, 1023, '\P{^--In greek}', "");
Expect(0, 879, '\p{--In greek}', "");
Expect(1, 879, '\p{^--In greek}', "");
Expect(1, 879, '\P{--In greek}', "");
Expect(0, 879, '\P{^--In greek}', "");
Error('\p{:=--White	Space}');
Error('\P{:=--White	Space}');
Expect(1, 13, '\p{whitespace}', "");
Expect(0, 13, '\p{^whitespace}', "");
Expect(0, 13, '\P{whitespace}', "");
Expect(1, 13, '\P{^whitespace}', "");
Expect(0, 8, '\p{whitespace}', "");
Expect(1, 8, '\p{^whitespace}', "");
Expect(1, 8, '\P{whitespace}', "");
Expect(0, 8, '\P{^whitespace}', "");
Expect(1, 13, '\p{__white_Space}', "");
Expect(0, 13, '\p{^__white_Space}', "");
Expect(0, 13, '\P{__white_Space}', "");
Expect(1, 13, '\P{^__white_Space}', "");
Expect(0, 8, '\p{__white_Space}', "");
Expect(1, 8, '\p{^__white_Space}', "");
Expect(1, 8, '\P{__white_Space}', "");
Expect(0, 8, '\P{^__white_Space}', "");
Error('\p{-/a/Is	White Space}');
Error('\P{-/a/Is	White Space}');
Expect(1, 13, '\p{iswhitespace}', "");
Expect(0, 13, '\p{^iswhitespace}', "");
Expect(0, 13, '\P{iswhitespace}', "");
Expect(1, 13, '\P{^iswhitespace}', "");
Expect(0, 8, '\p{iswhitespace}', "");
Expect(1, 8, '\p{^iswhitespace}', "");
Expect(1, 8, '\P{iswhitespace}', "");
Expect(0, 8, '\P{^iswhitespace}', "");
Expect(1, 13, '\p{__Is	white_Space}', "");
Expect(0, 13, '\p{^__Is	white_Space}', "");
Expect(0, 13, '\P{__Is	white_Space}', "");
Expect(1, 13, '\P{^__Is	white_Space}', "");
Expect(0, 8, '\p{__Is	white_Space}', "");
Expect(1, 8, '\p{^__Is	white_Space}', "");
Expect(1, 8, '\P{__Is	white_Space}', "");
Expect(0, 8, '\P{^__Is	white_Space}', "");
Error('\p{	:=WSPACE}');
Error('\P{	:=WSPACE}');
Expect(1, 13, '\p{wspace}', "");
Expect(0, 13, '\p{^wspace}', "");
Expect(0, 13, '\P{wspace}', "");
Expect(1, 13, '\P{^wspace}', "");
Expect(0, 8, '\p{wspace}', "");
Expect(1, 8, '\p{^wspace}', "");
Expect(1, 8, '\P{wspace}', "");
Expect(0, 8, '\P{^wspace}', "");
Expect(1, 13, '\p{	_wspace}', "");
Expect(0, 13, '\p{^	_wspace}', "");
Expect(0, 13, '\P{	_wspace}', "");
Expect(1, 13, '\P{^	_wspace}', "");
Expect(0, 8, '\p{	_wspace}', "");
Expect(1, 8, '\p{^	_wspace}', "");
Expect(1, 8, '\P{	_wspace}', "");
Expect(0, 8, '\P{^	_wspace}', "");
Error('\p{_:=Is_WSpace}');
Error('\P{_:=Is_WSpace}');
Expect(1, 13, '\p{iswspace}', "");
Expect(0, 13, '\p{^iswspace}', "");
Expect(0, 13, '\P{iswspace}', "");
Expect(1, 13, '\P{^iswspace}', "");
Expect(0, 8, '\p{iswspace}', "");
Expect(1, 8, '\p{^iswspace}', "");
Expect(1, 8, '\P{iswspace}', "");
Expect(0, 8, '\P{^iswspace}', "");
Expect(1, 13, '\p{_	is	wspace}', "");
Expect(0, 13, '\p{^_	is	wspace}', "");
Expect(0, 13, '\P{_	is	wspace}', "");
Expect(1, 13, '\P{^_	is	wspace}', "");
Expect(0, 8, '\p{_	is	wspace}', "");
Expect(1, 8, '\p{^_	is	wspace}', "");
Expect(1, 8, '\P{_	is	wspace}', "");
Expect(0, 8, '\P{^_	is	wspace}', "");
Error('\p{-supplementary Private Use:=Area-B}');
Error('\P{-supplementary Private Use:=Area-B}');
Expect(1, 1048576, '\p{supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^supplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^supplementaryprivateuseareab}', "");
Expect(0, 1, '\p{supplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^supplementaryprivateuseareab}', "");
Expect(1, 1, '\P{supplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^supplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{-	SUPPLEMENTARY Private_Use_AREAB}', "");
Expect(0, 1048576, '\p{^-	SUPPLEMENTARY Private_Use_AREAB}', "");
Expect(0, 1048576, '\P{-	SUPPLEMENTARY Private_Use_AREAB}', "");
Expect(1, 1048576, '\P{^-	SUPPLEMENTARY Private_Use_AREAB}', "");
Expect(0, 1, '\p{-	SUPPLEMENTARY Private_Use_AREAB}', "");
Expect(1, 1, '\p{^-	SUPPLEMENTARY Private_Use_AREAB}', "");
Expect(1, 1, '\P{-	SUPPLEMENTARY Private_Use_AREAB}', "");
Expect(0, 1, '\P{^-	SUPPLEMENTARY Private_Use_AREAB}', "");
Error('\p{:=Is Supplementary-PRIVATE_Use_area	B}');
Error('\P{:=Is Supplementary-PRIVATE_Use_area	B}');
Expect(1, 1048576, '\p{issupplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^issupplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{issupplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^issupplementaryprivateuseareab}', "");
Expect(0, 1, '\p{issupplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^issupplementaryprivateuseareab}', "");
Expect(1, 1, '\P{issupplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^issupplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{ is Supplementary PRIVATE USE-areaB}', "");
Expect(0, 1048576, '\p{^ is Supplementary PRIVATE USE-areaB}', "");
Expect(0, 1048576, '\P{ is Supplementary PRIVATE USE-areaB}', "");
Expect(1, 1048576, '\P{^ is Supplementary PRIVATE USE-areaB}', "");
Expect(0, 1, '\p{ is Supplementary PRIVATE USE-areaB}', "");
Expect(1, 1, '\p{^ is Supplementary PRIVATE USE-areaB}', "");
Expect(1, 1, '\P{ is Supplementary PRIVATE USE-areaB}', "");
Expect(0, 1, '\P{^ is Supplementary PRIVATE USE-areaB}', "");
Error('\p{:=IN	Supplementary Privateuse-areaB}');
Error('\P{:=IN	Supplementary Privateuse-areaB}');
Expect(1, 1048576, '\p{insupplementaryprivateuseareab}', "");
Expect(0, 1048576, '\p{^insupplementaryprivateuseareab}', "");
Expect(0, 1048576, '\P{insupplementaryprivateuseareab}', "");
Expect(1, 1048576, '\P{^insupplementaryprivateuseareab}', "");
Expect(0, 1, '\p{insupplementaryprivateuseareab}', "");
Expect(1, 1, '\p{^insupplementaryprivateuseareab}', "");
Expect(1, 1, '\P{insupplementaryprivateuseareab}', "");
Expect(0, 1, '\P{^insupplementaryprivateuseareab}', "");
Expect(1, 1048576, '\p{In SUPPLEMENTARY-Private	Use Area	B}', "");
Expect(0, 1048576, '\p{^In SUPPLEMENTARY-Private	Use Area	B}', "");
Expect(0, 1048576, '\P{In SUPPLEMENTARY-Private	Use Area	B}', "");
Expect(1, 1048576, '\P{^In SUPPLEMENTARY-Private	Use Area	B}', "");
Expect(0, 1, '\p{In SUPPLEMENTARY-Private	Use Area	B}', "");
Expect(1, 1, '\p{^In SUPPLEMENTARY-Private	Use Area	B}', "");
Expect(1, 1, '\P{In SUPPLEMENTARY-Private	Use Area	B}', "");
Expect(0, 1, '\P{^In SUPPLEMENTARY-Private	Use Area	B}', "");
Error('\p{_-in:=CUNEIFORM}');
Error('\P{_-in:=CUNEIFORM}');
Expect(1, 74751, '\p{incuneiform}', "");
Expect(0, 74751, '\p{^incuneiform}', "");
Expect(0, 74751, '\P{incuneiform}', "");
Expect(1, 74751, '\P{^incuneiform}', "");
Expect(0, 73727, '\p{incuneiform}', "");
Expect(1, 73727, '\p{^incuneiform}', "");
Expect(1, 73727, '\P{incuneiform}', "");
Expect(0, 73727, '\P{^incuneiform}', "");
Expect(1, 74751, '\p{	In cuneiform}', "");
Expect(0, 74751, '\p{^	In cuneiform}', "");
Expect(0, 74751, '\P{	In cuneiform}', "");
Expect(1, 74751, '\P{^	In cuneiform}', "");
Expect(0, 73727, '\p{	In cuneiform}', "");
Expect(1, 73727, '\p{^	In cuneiform}', "");
Expect(1, 73727, '\P{	In cuneiform}', "");
Expect(0, 73727, '\P{^	In cuneiform}', "");
Error('\p{- cjk-Symbols:=AND	Punctuation}');
Error('\P{- cjk-Symbols:=AND	Punctuation}');
Expect(1, 12351, '\p{cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^cjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^cjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{cjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^cjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{	 cjk_Symbols And-PUNCTUATION}', "");
Expect(0, 12351, '\p{^	 cjk_Symbols And-PUNCTUATION}', "");
Expect(0, 12351, '\P{	 cjk_Symbols And-PUNCTUATION}', "");
Expect(1, 12351, '\P{^	 cjk_Symbols And-PUNCTUATION}', "");
Expect(0, 12287, '\p{	 cjk_Symbols And-PUNCTUATION}', "");
Expect(1, 12287, '\p{^	 cjk_Symbols And-PUNCTUATION}', "");
Expect(1, 12287, '\P{	 cjk_Symbols And-PUNCTUATION}', "");
Expect(0, 12287, '\P{^	 cjk_Symbols And-PUNCTUATION}', "");
Error('\p{-Is-CJK/a/symbols AND	Punctuation}');
Error('\P{-Is-CJK/a/symbols AND	Punctuation}');
Expect(1, 12351, '\p{iscjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^iscjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{iscjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^iscjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{iscjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^iscjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{iscjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^iscjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{IS CJKSymbols and	Punctuation}', "");
Expect(0, 12351, '\p{^IS CJKSymbols and	Punctuation}', "");
Expect(0, 12351, '\P{IS CJKSymbols and	Punctuation}', "");
Expect(1, 12351, '\P{^IS CJKSymbols and	Punctuation}', "");
Expect(0, 12287, '\p{IS CJKSymbols and	Punctuation}', "");
Expect(1, 12287, '\p{^IS CJKSymbols and	Punctuation}', "");
Expect(1, 12287, '\P{IS CJKSymbols and	Punctuation}', "");
Expect(0, 12287, '\P{^IS CJKSymbols and	Punctuation}', "");
Error('\p{-In/a/CJK_symbols_AND-PUNCTUATION}');
Error('\P{-In/a/CJK_symbols_AND-PUNCTUATION}');
Expect(1, 12351, '\p{incjksymbolsandpunctuation}', "");
Expect(0, 12351, '\p{^incjksymbolsandpunctuation}', "");
Expect(0, 12351, '\P{incjksymbolsandpunctuation}', "");
Expect(1, 12351, '\P{^incjksymbolsandpunctuation}', "");
Expect(0, 12287, '\p{incjksymbolsandpunctuation}', "");
Expect(1, 12287, '\p{^incjksymbolsandpunctuation}', "");
Expect(1, 12287, '\P{incjksymbolsandpunctuation}', "");
Expect(0, 12287, '\P{^incjksymbolsandpunctuation}', "");
Expect(1, 12351, '\p{-Incjk	Symbols_Andpunctuation}', "");
Expect(0, 12351, '\p{^-Incjk	Symbols_Andpunctuation}', "");
Expect(0, 12351, '\P{-Incjk	Symbols_Andpunctuation}', "");
Expect(1, 12351, '\P{^-Incjk	Symbols_Andpunctuation}', "");
Expect(0, 12287, '\p{-Incjk	Symbols_Andpunctuation}', "");
Expect(1, 12287, '\p{^-Incjk	Symbols_Andpunctuation}', "");
Expect(1, 12287, '\P{-Incjk	Symbols_Andpunctuation}', "");
Expect(0, 12287, '\P{^-Incjk	Symbols_Andpunctuation}', "");
Error('\p{:=	surrogate}');
Error('\P{:=	surrogate}');
Expect(0, 55295, '\p{surrogate}', "");
Expect(1, 55295, '\p{^surrogate}', "");
Expect(1, 55295, '\P{surrogate}', "");
Expect(0, 55295, '\P{^surrogate}', "");
Expect(0, 55295, '\p{__Surrogate}', "");
Expect(1, 55295, '\p{^__Surrogate}', "");
Expect(1, 55295, '\P{__Surrogate}', "");
Expect(0, 55295, '\P{^__Surrogate}', "");
Error('\p{	 is/a/SURROGATE}');
Error('\P{	 is/a/SURROGATE}');
Expect(0, 55295, '\p{issurrogate}', "");
Expect(1, 55295, '\p{^issurrogate}', "");
Expect(1, 55295, '\P{issurrogate}', "");
Expect(0, 55295, '\P{^issurrogate}', "");
Expect(0, 55295, '\p{-is-surrogate}', "");
Expect(1, 55295, '\p{^-is-surrogate}', "");
Expect(1, 55295, '\P{-is-surrogate}', "");
Expect(0, 55295, '\P{^-is-surrogate}', "");
Error('\p{_ cs:=}');
Error('\P{_ cs:=}');
Expect(0, 55295, '\p{cs}', "");
Expect(1, 55295, '\p{^cs}', "");
Expect(1, 55295, '\P{cs}', "");
Expect(0, 55295, '\P{^cs}', "");
Expect(0, 55295, '\p{	-CS}', "");
Expect(1, 55295, '\p{^	-CS}', "");
Expect(1, 55295, '\P{	-CS}', "");
Expect(0, 55295, '\P{^	-CS}', "");
Error('\p{/a/ 	Is	Cs}');
Error('\P{/a/ 	Is	Cs}');
Expect(0, 55295, '\p{iscs}', "");
Expect(1, 55295, '\p{^iscs}', "");
Expect(1, 55295, '\P{iscs}', "");
Expect(0, 55295, '\P{^iscs}', "");
Expect(0, 55295, '\p{_IS	cs}', "");
Expect(1, 55295, '\p{^_IS	cs}', "");
Expect(1, 55295, '\P{_IS	cs}', "");
Expect(0, 55295, '\P{^_IS	cs}', "");
Error('\p{ _In:=Coptic}');
Error('\P{ _In:=Coptic}');
Expect(1, 11519, '\p{incoptic}', "");
Expect(0, 11519, '\p{^incoptic}', "");
Expect(0, 11519, '\P{incoptic}', "");
Expect(1, 11519, '\P{^incoptic}', "");
Expect(0, 11391, '\p{incoptic}', "");
Expect(1, 11391, '\p{^incoptic}', "");
Expect(1, 11391, '\P{incoptic}', "");
Expect(0, 11391, '\P{^incoptic}', "");
Expect(1, 11519, '\p{_ inCOPTIC}', "");
Expect(0, 11519, '\p{^_ inCOPTIC}', "");
Expect(0, 11519, '\P{_ inCOPTIC}', "");
Expect(1, 11519, '\P{^_ inCOPTIC}', "");
Expect(0, 11391, '\p{_ inCOPTIC}', "");
Expect(1, 11391, '\p{^_ inCOPTIC}', "");
Expect(1, 11391, '\P{_ inCOPTIC}', "");
Expect(0, 11391, '\P{^_ inCOPTIC}', "");
Error('\p{	/a/Khmer}');
Error('\P{	/a/Khmer}');
Expect(1, 6109, '\p{khmer}', "");
Expect(0, 6109, '\p{^khmer}', "");
Expect(0, 6109, '\P{khmer}', "");
Expect(1, 6109, '\P{^khmer}', "");
Expect(0, 6015, '\p{khmer}', "");
Expect(1, 6015, '\p{^khmer}', "");
Expect(1, 6015, '\P{khmer}', "");
Expect(0, 6015, '\P{^khmer}', "");
Expect(1, 6109, '\p{-	Khmer}', "");
Expect(0, 6109, '\p{^-	Khmer}', "");
Expect(0, 6109, '\P{-	Khmer}', "");
Expect(1, 6109, '\P{^-	Khmer}', "");
Expect(0, 6015, '\p{-	Khmer}', "");
Expect(1, 6015, '\p{^-	Khmer}', "");
Expect(1, 6015, '\P{-	Khmer}', "");
Expect(0, 6015, '\P{^-	Khmer}', "");
Error('\p{_	IS	KHMER:=}');
Error('\P{_	IS	KHMER:=}');
Expect(1, 6109, '\p{iskhmer}', "");
Expect(0, 6109, '\p{^iskhmer}', "");
Expect(0, 6109, '\P{iskhmer}', "");
Expect(1, 6109, '\P{^iskhmer}', "");
Expect(0, 6015, '\p{iskhmer}', "");
Expect(1, 6015, '\p{^iskhmer}', "");
Expect(1, 6015, '\P{iskhmer}', "");
Expect(0, 6015, '\P{^iskhmer}', "");
Expect(1, 6109, '\p{ ISKhmer}', "");
Expect(0, 6109, '\p{^ ISKhmer}', "");
Expect(0, 6109, '\P{ ISKhmer}', "");
Expect(1, 6109, '\P{^ ISKhmer}', "");
Expect(0, 6015, '\p{ ISKhmer}', "");
Expect(1, 6015, '\p{^ ISKhmer}', "");
Expect(1, 6015, '\P{ ISKhmer}', "");
Expect(0, 6015, '\P{^ ISKhmer}', "");
Error('\p{	/a/khmr}');
Error('\P{	/a/khmr}');
Expect(1, 6109, '\p{khmr}', "");
Expect(0, 6109, '\p{^khmr}', "");
Expect(0, 6109, '\P{khmr}', "");
Expect(1, 6109, '\P{^khmr}', "");
Expect(0, 6015, '\p{khmr}', "");
Expect(1, 6015, '\p{^khmr}', "");
Expect(1, 6015, '\P{khmr}', "");
Expect(0, 6015, '\P{^khmr}', "");
Expect(1, 6109, '\p{	 khmr}', "");
Expect(0, 6109, '\p{^	 khmr}', "");
Expect(0, 6109, '\P{	 khmr}', "");
Expect(1, 6109, '\P{^	 khmr}', "");
Expect(0, 6015, '\p{	 khmr}', "");
Expect(1, 6015, '\p{^	 khmr}', "");
Expect(1, 6015, '\P{	 khmr}', "");
Expect(0, 6015, '\P{^	 khmr}', "");
Error('\p{		is Khmr:=}');
Error('\P{		is Khmr:=}');
Expect(1, 6109, '\p{iskhmr}', "");
Expect(0, 6109, '\p{^iskhmr}', "");
Expect(0, 6109, '\P{iskhmr}', "");
Expect(1, 6109, '\P{^iskhmr}', "");
Expect(0, 6015, '\p{iskhmr}', "");
Expect(1, 6015, '\p{^iskhmr}', "");
Expect(1, 6015, '\P{iskhmr}', "");
Expect(0, 6015, '\P{^iskhmr}', "");
Expect(1, 6109, '\p{ IS	Khmr}', "");
Expect(0, 6109, '\p{^ IS	Khmr}', "");
Expect(0, 6109, '\P{ IS	Khmr}', "");
Expect(1, 6109, '\P{^ IS	Khmr}', "");
Expect(0, 6015, '\p{ IS	Khmr}', "");
Expect(1, 6015, '\p{^ IS	Khmr}', "");
Expect(1, 6015, '\P{ IS	Khmr}', "");
Expect(0, 6015, '\P{^ IS	Khmr}', "");
Error('\p{/a/_	In	NKO}');
Error('\P{/a/_	In	NKO}');
Expect(1, 2047, '\p{innko}', "");
Expect(0, 2047, '\p{^innko}', "");
Expect(0, 2047, '\P{innko}', "");
Expect(1, 2047, '\P{^innko}', "");
Expect(0, 1983, '\p{innko}', "");
Expect(1, 1983, '\p{^innko}', "");
Expect(1, 1983, '\P{innko}', "");
Expect(0, 1983, '\P{^innko}', "");
Expect(1, 2047, '\p{ _In	nko}', "");
Expect(0, 2047, '\p{^ _In	nko}', "");
Expect(0, 2047, '\P{ _In	nko}', "");
Expect(1, 2047, '\P{^ _In	nko}', "");
Expect(0, 1983, '\p{ _In	nko}', "");
Expect(1, 1983, '\p{^ _In	nko}', "");
Expect(1, 1983, '\P{ _In	nko}', "");
Expect(0, 1983, '\P{^ _In	nko}', "");
Error('\p{	linear/a/B-Syllabary}');
Error('\P{	linear/a/B-Syllabary}');
Expect(1, 65663, '\p{linearbsyllabary}', "");
Expect(0, 65663, '\p{^linearbsyllabary}', "");
Expect(0, 65663, '\P{linearbsyllabary}', "");
Expect(1, 65663, '\P{^linearbsyllabary}', "");
Expect(0, 1, '\p{linearbsyllabary}', "");
Expect(1, 1, '\p{^linearbsyllabary}', "");
Expect(1, 1, '\P{linearbsyllabary}', "");
Expect(0, 1, '\P{^linearbsyllabary}', "");
Expect(1, 65663, '\p{	 Linear-B	SYLLABARY}', "");
Expect(0, 65663, '\p{^	 Linear-B	SYLLABARY}', "");
Expect(0, 65663, '\P{	 Linear-B	SYLLABARY}', "");
Expect(1, 65663, '\P{^	 Linear-B	SYLLABARY}', "");
Expect(0, 1, '\p{	 Linear-B	SYLLABARY}', "");
Expect(1, 1, '\p{^	 Linear-B	SYLLABARY}', "");
Expect(1, 1, '\P{	 Linear-B	SYLLABARY}', "");
Expect(0, 1, '\P{^	 Linear-B	SYLLABARY}', "");
Error('\p{	/a/Is	linear	B-SYLLABARY}');
Error('\P{	/a/Is	linear	B-SYLLABARY}');
Expect(1, 65663, '\p{islinearbsyllabary}', "");
Expect(0, 65663, '\p{^islinearbsyllabary}', "");
Expect(0, 65663, '\P{islinearbsyllabary}', "");
Expect(1, 65663, '\P{^islinearbsyllabary}', "");
Expect(0, 1, '\p{islinearbsyllabary}', "");
Expect(1, 1, '\p{^islinearbsyllabary}', "");
Expect(1, 1, '\P{islinearbsyllabary}', "");
Expect(0, 1, '\P{^islinearbsyllabary}', "");
Expect(1, 65663, '\p{ 	is-Linear-b	SYLLABARY}', "");
Expect(0, 65663, '\p{^ 	is-Linear-b	SYLLABARY}', "");
Expect(0, 65663, '\P{ 	is-Linear-b	SYLLABARY}', "");
Expect(1, 65663, '\P{^ 	is-Linear-b	SYLLABARY}', "");
Expect(0, 1, '\p{ 	is-Linear-b	SYLLABARY}', "");
Expect(1, 1, '\p{^ 	is-Linear-b	SYLLABARY}', "");
Expect(1, 1, '\P{ 	is-Linear-b	SYLLABARY}', "");
Expect(0, 1, '\P{^ 	is-Linear-b	SYLLABARY}', "");
Error('\p{ /a/InLinear b-Syllabary}');
Error('\P{ /a/InLinear b-Syllabary}');
Expect(1, 65663, '\p{inlinearbsyllabary}', "");
Expect(0, 65663, '\p{^inlinearbsyllabary}', "");
Expect(0, 65663, '\P{inlinearbsyllabary}', "");
Expect(1, 65663, '\P{^inlinearbsyllabary}', "");
Expect(0, 1, '\p{inlinearbsyllabary}', "");
Expect(1, 1, '\p{^inlinearbsyllabary}', "");
Expect(1, 1, '\P{inlinearbsyllabary}', "");
Expect(0, 1, '\P{^inlinearbsyllabary}', "");
Expect(1, 65663, '\p{In LinearB-Syllabary}', "");
Expect(0, 65663, '\p{^In LinearB-Syllabary}', "");
Expect(0, 65663, '\P{In LinearB-Syllabary}', "");
Expect(1, 65663, '\P{^In LinearB-Syllabary}', "");
Expect(0, 1, '\p{In LinearB-Syllabary}', "");
Expect(1, 1, '\p{^In LinearB-Syllabary}', "");
Expect(1, 1, '\P{In LinearB-Syllabary}', "");
Expect(0, 1, '\P{^In LinearB-Syllabary}', "");
Error('\p{/a/hangul_jamo	Extended	B}');
Error('\P{/a/hangul_jamo	Extended	B}');
Expect(1, 55295, '\p{hanguljamoextendedb}', "");
Expect(0, 55295, '\p{^hanguljamoextendedb}', "");
Expect(0, 55295, '\P{hanguljamoextendedb}', "");
Expect(1, 55295, '\P{^hanguljamoextendedb}', "");
Expect(0, 55215, '\p{hanguljamoextendedb}', "");
Expect(1, 55215, '\p{^hanguljamoextendedb}', "");
Expect(1, 55215, '\P{hanguljamoextendedb}', "");
Expect(0, 55215, '\P{^hanguljamoextendedb}', "");
Expect(1, 55295, '\p{HANGUL-jamo_Extended	B}', "");
Expect(0, 55295, '\p{^HANGUL-jamo_Extended	B}', "");
Expect(0, 55295, '\P{HANGUL-jamo_Extended	B}', "");
Expect(1, 55295, '\P{^HANGUL-jamo_Extended	B}', "");
Expect(0, 55215, '\p{HANGUL-jamo_Extended	B}', "");
Expect(1, 55215, '\p{^HANGUL-jamo_Extended	B}', "");
Expect(1, 55215, '\P{HANGUL-jamo_Extended	B}', "");
Expect(0, 55215, '\P{^HANGUL-jamo_Extended	B}', "");
Error('\p{-/a/Is_HANGUL	Jamo	Extended-B}');
Error('\P{-/a/Is_HANGUL	Jamo	Extended-B}');
Expect(1, 55295, '\p{ishanguljamoextendedb}', "");
Expect(0, 55295, '\p{^ishanguljamoextendedb}', "");
Expect(0, 55295, '\P{ishanguljamoextendedb}', "");
Expect(1, 55295, '\P{^ishanguljamoextendedb}', "");
Expect(0, 55215, '\p{ishanguljamoextendedb}', "");
Expect(1, 55215, '\p{^ishanguljamoextendedb}', "");
Expect(1, 55215, '\P{ishanguljamoextendedb}', "");
Expect(0, 55215, '\P{^ishanguljamoextendedb}', "");
Expect(1, 55295, '\p{- Is	Hangul_Jamo-Extended	B}', "");
Expect(0, 55295, '\p{^- Is	Hangul_Jamo-Extended	B}', "");
Expect(0, 55295, '\P{- Is	Hangul_Jamo-Extended	B}', "");
Expect(1, 55295, '\P{^- Is	Hangul_Jamo-Extended	B}', "");
Expect(0, 55215, '\p{- Is	Hangul_Jamo-Extended	B}', "");
Expect(1, 55215, '\p{^- Is	Hangul_Jamo-Extended	B}', "");
Expect(1, 55215, '\P{- Is	Hangul_Jamo-Extended	B}', "");
Expect(0, 55215, '\P{^- Is	Hangul_Jamo-Extended	B}', "");
Error('\p{-_IN:=hangul	jamo-extended_B}');
Error('\P{-_IN:=hangul	jamo-extended_B}');
Expect(1, 55295, '\p{inhanguljamoextendedb}', "");
Expect(0, 55295, '\p{^inhanguljamoextendedb}', "");
Expect(0, 55295, '\P{inhanguljamoextendedb}', "");
Expect(1, 55295, '\P{^inhanguljamoextendedb}', "");
Expect(0, 55215, '\p{inhanguljamoextendedb}', "");
Expect(1, 55215, '\p{^inhanguljamoextendedb}', "");
Expect(1, 55215, '\P{inhanguljamoextendedb}', "");
Expect(0, 55215, '\P{^inhanguljamoextendedb}', "");
Expect(1, 55295, '\p{_in	HANGUL Jamo	Extended	b}', "");
Expect(0, 55295, '\p{^_in	HANGUL Jamo	Extended	b}', "");
Expect(0, 55295, '\P{_in	HANGUL Jamo	Extended	b}', "");
Expect(1, 55295, '\P{^_in	HANGUL Jamo	Extended	b}', "");
Expect(0, 55215, '\p{_in	HANGUL Jamo	Extended	b}', "");
Expect(1, 55215, '\p{^_in	HANGUL Jamo	Extended	b}', "");
Expect(1, 55215, '\P{_in	HANGUL Jamo	Extended	b}', "");
Expect(0, 55215, '\P{^_in	HANGUL Jamo	Extended	b}', "");
Error('\p{_	Inbuginese:=}');
Error('\P{_	Inbuginese:=}');
Expect(1, 6687, '\p{inbuginese}', "");
Expect(0, 6687, '\p{^inbuginese}', "");
Expect(0, 6687, '\P{inbuginese}', "");
Expect(1, 6687, '\P{^inbuginese}', "");
Expect(0, 6655, '\p{inbuginese}', "");
Expect(1, 6655, '\p{^inbuginese}', "");
Expect(1, 6655, '\P{inbuginese}', "");
Expect(0, 6655, '\P{^inbuginese}', "");
Expect(1, 6687, '\p{	-In-Buginese}', "");
Expect(0, 6687, '\p{^	-In-Buginese}', "");
Expect(0, 6687, '\P{	-In-Buginese}', "");
Expect(1, 6687, '\P{^	-In-Buginese}', "");
Expect(0, 6655, '\p{	-In-Buginese}', "");
Expect(1, 6655, '\p{^	-In-Buginese}', "");
Expect(1, 6655, '\P{	-In-Buginese}', "");
Expect(0, 6655, '\P{^	-In-Buginese}', "");
Error('\p{	_INTagbanwa/a/}');
Error('\P{	_INTagbanwa/a/}');
Expect(1, 6015, '\p{intagbanwa}', "");
Expect(0, 6015, '\p{^intagbanwa}', "");
Expect(0, 6015, '\P{intagbanwa}', "");
Expect(1, 6015, '\P{^intagbanwa}', "");
Expect(0, 5983, '\p{intagbanwa}', "");
Expect(1, 5983, '\p{^intagbanwa}', "");
Expect(1, 5983, '\P{intagbanwa}', "");
Expect(0, 5983, '\P{^intagbanwa}', "");
Expect(1, 6015, '\p{-In-Tagbanwa}', "");
Expect(0, 6015, '\p{^-In-Tagbanwa}', "");
Expect(0, 6015, '\P{-In-Tagbanwa}', "");
Expect(1, 6015, '\P{^-In-Tagbanwa}', "");
Expect(0, 5983, '\p{-In-Tagbanwa}', "");
Expect(1, 5983, '\p{^-In-Tagbanwa}', "");
Expect(1, 5983, '\P{-In-Tagbanwa}', "");
Expect(0, 5983, '\P{^-In-Tagbanwa}', "");
Error('\p{_	XID-Start/a/}');
Error('\P{_	XID-Start/a/}');
Expect(1, 90, '\p{xidstart}', "");
Expect(0, 90, '\p{^xidstart}', "");
Expect(0, 90, '\P{xidstart}', "");
Expect(1, 90, '\P{^xidstart}', "");
Expect(0, 64, '\p{xidstart}', "");
Expect(1, 64, '\p{^xidstart}', "");
Expect(1, 64, '\P{xidstart}', "");
Expect(0, 64, '\P{^xidstart}', "");
Expect(1, 90, '\p{	xid Start}', "");
Expect(0, 90, '\p{^	xid Start}', "");
Expect(0, 90, '\P{	xid Start}', "");
Expect(1, 90, '\P{^	xid Start}', "");
Expect(0, 64, '\p{	xid Start}', "");
Expect(1, 64, '\p{^	xid Start}', "");
Expect(1, 64, '\P{	xid Start}', "");
Expect(0, 64, '\P{^	xid Start}', "");
Error('\p{_/a/Is-xid START}');
Error('\P{_/a/Is-xid START}');
Expect(1, 90, '\p{isxidstart}', "");
Expect(0, 90, '\p{^isxidstart}', "");
Expect(0, 90, '\P{isxidstart}', "");
Expect(1, 90, '\P{^isxidstart}', "");
Expect(0, 64, '\p{isxidstart}', "");
Expect(1, 64, '\p{^isxidstart}', "");
Expect(1, 64, '\P{isxidstart}', "");
Expect(0, 64, '\P{^isxidstart}', "");
Expect(1, 90, '\p{	IsXIDstart}', "");
Expect(0, 90, '\p{^	IsXIDstart}', "");
Expect(0, 90, '\P{	IsXIDstart}', "");
Expect(1, 90, '\P{^	IsXIDstart}', "");
Expect(0, 64, '\p{	IsXIDstart}', "");
Expect(1, 64, '\p{^	IsXIDstart}', "");
Expect(1, 64, '\P{	IsXIDstart}', "");
Expect(0, 64, '\P{^	IsXIDstart}', "");
Error('\p{/a/	_XIDS}');
Error('\P{/a/	_XIDS}');
Expect(1, 90, '\p{xids}', "");
Expect(0, 90, '\p{^xids}', "");
Expect(0, 90, '\P{xids}', "");
Expect(1, 90, '\P{^xids}', "");
Expect(0, 64, '\p{xids}', "");
Expect(1, 64, '\p{^xids}', "");
Expect(1, 64, '\P{xids}', "");
Expect(0, 64, '\P{^xids}', "");
Expect(1, 90, '\p{ -xids}', "");
Expect(0, 90, '\p{^ -xids}', "");
Expect(0, 90, '\P{ -xids}', "");
Expect(1, 90, '\P{^ -xids}', "");
Expect(0, 64, '\p{ -xids}', "");
Expect(1, 64, '\p{^ -xids}', "");
Expect(1, 64, '\P{ -xids}', "");
Expect(0, 64, '\P{^ -xids}', "");
Error('\p{_:=is_XIDS}');
Error('\P{_:=is_XIDS}');
Expect(1, 90, '\p{isxids}', "");
Expect(0, 90, '\p{^isxids}', "");
Expect(0, 90, '\P{isxids}', "");
Expect(1, 90, '\P{^isxids}', "");
Expect(0, 64, '\p{isxids}', "");
Expect(1, 64, '\p{^isxids}', "");
Expect(1, 64, '\P{isxids}', "");
Expect(0, 64, '\P{^isxids}', "");
Expect(1, 90, '\p{Is_XIDS}', "");
Expect(0, 90, '\p{^Is_XIDS}', "");
Expect(0, 90, '\P{Is_XIDS}', "");
Expect(1, 90, '\P{^Is_XIDS}', "");
Expect(0, 64, '\p{Is_XIDS}', "");
Expect(1, 64, '\p{^Is_XIDS}', "");
Expect(1, 64, '\P{Is_XIDS}', "");
Expect(0, 64, '\P{^Is_XIDS}', "");
Error('\p{/a/- graph}');
Error('\P{/a/- graph}');
Expect(1, 126, '\p{graph}', "");
Expect(0, 126, '\p{^graph}', "");
Expect(0, 126, '\P{graph}', "");
Expect(1, 126, '\P{^graph}', "");
Expect(0, 32, '\p{graph}', "");
Expect(1, 32, '\p{^graph}', "");
Expect(1, 32, '\P{graph}', "");
Expect(0, 32, '\P{^graph}', "");
Expect(1, 126, '\p{- GRAPH}', "");
Expect(0, 126, '\p{^- GRAPH}', "");
Expect(0, 126, '\P{- GRAPH}', "");
Expect(1, 126, '\P{^- GRAPH}', "");
Expect(0, 32, '\p{- GRAPH}', "");
Expect(1, 32, '\p{^- GRAPH}', "");
Expect(1, 32, '\P{- GRAPH}', "");
Expect(0, 32, '\P{^- GRAPH}', "");
Error('\p{_/a/Is	Graph}');
Error('\P{_/a/Is	Graph}');
Expect(1, 126, '\p{isgraph}', "");
Expect(0, 126, '\p{^isgraph}', "");
Expect(0, 126, '\P{isgraph}', "");
Expect(1, 126, '\P{^isgraph}', "");
Expect(0, 32, '\p{isgraph}', "");
Expect(1, 32, '\p{^isgraph}', "");
Expect(1, 32, '\P{isgraph}', "");
Expect(0, 32, '\P{^isgraph}', "");
Expect(1, 126, '\p{	-is Graph}', "");
Expect(0, 126, '\p{^	-is Graph}', "");
Expect(0, 126, '\P{	-is Graph}', "");
Expect(1, 126, '\P{^	-is Graph}', "");
Expect(0, 32, '\p{	-is Graph}', "");
Expect(1, 32, '\p{^	-is Graph}', "");
Expect(1, 32, '\P{	-is Graph}', "");
Expect(0, 32, '\P{^	-is Graph}', "");
Error('\p{	Phonetic	Extensions/a/Supplement}');
Error('\P{	Phonetic	Extensions/a/Supplement}');
Expect(1, 7615, '\p{phoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^phoneticextensionssupplement}', "");
Expect(0, 7615, '\P{phoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^phoneticextensionssupplement}', "");
Expect(0, 7551, '\p{phoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^phoneticextensionssupplement}', "");
Expect(1, 7551, '\P{phoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^phoneticextensionssupplement}', "");
Expect(1, 7615, '\p{ phonetic_extensions	supplement}', "");
Expect(0, 7615, '\p{^ phonetic_extensions	supplement}', "");
Expect(0, 7615, '\P{ phonetic_extensions	supplement}', "");
Expect(1, 7615, '\P{^ phonetic_extensions	supplement}', "");
Expect(0, 7551, '\p{ phonetic_extensions	supplement}', "");
Expect(1, 7551, '\p{^ phonetic_extensions	supplement}', "");
Expect(1, 7551, '\P{ phonetic_extensions	supplement}', "");
Expect(0, 7551, '\P{^ phonetic_extensions	supplement}', "");
Error('\p{/a/	is-PhoneticextensionsSupplement}');
Error('\P{/a/	is-PhoneticextensionsSupplement}');
Expect(1, 7615, '\p{isphoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^isphoneticextensionssupplement}', "");
Expect(0, 7615, '\P{isphoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^isphoneticextensionssupplement}', "");
Expect(0, 7551, '\p{isphoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^isphoneticextensionssupplement}', "");
Expect(1, 7551, '\P{isphoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^isphoneticextensionssupplement}', "");
Expect(1, 7615, '\p{ -Is phoneticEXTENSIONS-Supplement}', "");
Expect(0, 7615, '\p{^ -Is phoneticEXTENSIONS-Supplement}', "");
Expect(0, 7615, '\P{ -Is phoneticEXTENSIONS-Supplement}', "");
Expect(1, 7615, '\P{^ -Is phoneticEXTENSIONS-Supplement}', "");
Expect(0, 7551, '\p{ -Is phoneticEXTENSIONS-Supplement}', "");
Expect(1, 7551, '\p{^ -Is phoneticEXTENSIONS-Supplement}', "");
Expect(1, 7551, '\P{ -Is phoneticEXTENSIONS-Supplement}', "");
Expect(0, 7551, '\P{^ -Is phoneticEXTENSIONS-Supplement}', "");
Error('\p{ -In	PHONETIC:=extensions supplement}');
Error('\P{ -In	PHONETIC:=extensions supplement}');
Expect(1, 7615, '\p{inphoneticextensionssupplement}', "");
Expect(0, 7615, '\p{^inphoneticextensionssupplement}', "");
Expect(0, 7615, '\P{inphoneticextensionssupplement}', "");
Expect(1, 7615, '\P{^inphoneticextensionssupplement}', "");
Expect(0, 7551, '\p{inphoneticextensionssupplement}', "");
Expect(1, 7551, '\p{^inphoneticextensionssupplement}', "");
Expect(1, 7551, '\P{inphoneticextensionssupplement}', "");
Expect(0, 7551, '\P{^inphoneticextensionssupplement}', "");
Expect(1, 7615, '\p{- In_PHONETIC-ExtensionsSupplement}', "");
Expect(0, 7615, '\p{^- In_PHONETIC-ExtensionsSupplement}', "");
Expect(0, 7615, '\P{- In_PHONETIC-ExtensionsSupplement}', "");
Expect(1, 7615, '\P{^- In_PHONETIC-ExtensionsSupplement}', "");
Expect(0, 7551, '\p{- In_PHONETIC-ExtensionsSupplement}', "");
Expect(1, 7551, '\p{^- In_PHONETIC-ExtensionsSupplement}', "");
Expect(1, 7551, '\P{- In_PHONETIC-ExtensionsSupplement}', "");
Expect(0, 7551, '\P{^- In_PHONETIC-ExtensionsSupplement}', "");
Error('\p{- Modifier Tone:=LETTERS}');
Error('\P{- Modifier Tone:=LETTERS}');
Expect(1, 42783, '\p{modifiertoneletters}', "");
Expect(0, 42783, '\p{^modifiertoneletters}', "");
Expect(0, 42783, '\P{modifiertoneletters}', "");
Expect(1, 42783, '\P{^modifiertoneletters}', "");
Expect(0, 42751, '\p{modifiertoneletters}', "");
Expect(1, 42751, '\p{^modifiertoneletters}', "");
Expect(1, 42751, '\P{modifiertoneletters}', "");
Expect(0, 42751, '\P{^modifiertoneletters}', "");
Expect(1, 42783, '\p{		Modifier tone	letters}', "");
Expect(0, 42783, '\p{^		Modifier tone	letters}', "");
Expect(0, 42783, '\P{		Modifier tone	letters}', "");
Expect(1, 42783, '\P{^		Modifier tone	letters}', "");
Expect(0, 42751, '\p{		Modifier tone	letters}', "");
Expect(1, 42751, '\p{^		Modifier tone	letters}', "");
Expect(1, 42751, '\P{		Modifier tone	letters}', "");
Expect(0, 42751, '\P{^		Modifier tone	letters}', "");
Error('\p{- Is-Modifier	Tone:=Letters}');
Error('\P{- Is-Modifier	Tone:=Letters}');
Expect(1, 42783, '\p{ismodifiertoneletters}', "");
Expect(0, 42783, '\p{^ismodifiertoneletters}', "");
Expect(0, 42783, '\P{ismodifiertoneletters}', "");
Expect(1, 42783, '\P{^ismodifiertoneletters}', "");
Expect(0, 42751, '\p{ismodifiertoneletters}', "");
Expect(1, 42751, '\p{^ismodifiertoneletters}', "");
Expect(1, 42751, '\P{ismodifiertoneletters}', "");
Expect(0, 42751, '\P{^ismodifiertoneletters}', "");
Expect(1, 42783, '\p{	is MODIFIER	Tone Letters}', "");
Expect(0, 42783, '\p{^	is MODIFIER	Tone Letters}', "");
Expect(0, 42783, '\P{	is MODIFIER	Tone Letters}', "");
Expect(1, 42783, '\P{^	is MODIFIER	Tone Letters}', "");
Expect(0, 42751, '\p{	is MODIFIER	Tone Letters}', "");
Expect(1, 42751, '\p{^	is MODIFIER	Tone Letters}', "");
Expect(1, 42751, '\P{	is MODIFIER	Tone Letters}', "");
Expect(0, 42751, '\P{^	is MODIFIER	Tone Letters}', "");
Error('\p{-In:=modifierTone-LETTERS}');
Error('\P{-In:=modifierTone-LETTERS}');
Expect(1, 42783, '\p{inmodifiertoneletters}', "");
Expect(0, 42783, '\p{^inmodifiertoneletters}', "");
Expect(0, 42783, '\P{inmodifiertoneletters}', "");
Expect(1, 42783, '\P{^inmodifiertoneletters}', "");
Expect(0, 42751, '\p{inmodifiertoneletters}', "");
Expect(1, 42751, '\p{^inmodifiertoneletters}', "");
Expect(1, 42751, '\P{inmodifiertoneletters}', "");
Expect(0, 42751, '\P{^inmodifiertoneletters}', "");
Expect(1, 42783, '\p{_ inModifier tone_letters}', "");
Expect(0, 42783, '\p{^_ inModifier tone_letters}', "");
Expect(0, 42783, '\P{_ inModifier tone_letters}', "");
Expect(1, 42783, '\P{^_ inModifier tone_letters}', "");
Expect(0, 42751, '\p{_ inModifier tone_letters}', "");
Expect(1, 42751, '\p{^_ inModifier tone_letters}', "");
Expect(1, 42751, '\P{_ inModifier tone_letters}', "");
Expect(0, 42751, '\P{^_ inModifier tone_letters}', "");
Error('\p{  changes_whenCASEFOLDED:=}');
Error('\P{  changes_whenCASEFOLDED:=}');
Expect(1, 90, '\p{changeswhencasefolded}', "");
Expect(0, 90, '\p{^changeswhencasefolded}', "");
Expect(0, 90, '\P{changeswhencasefolded}', "");
Expect(1, 90, '\P{^changeswhencasefolded}', "");
Expect(0, 64, '\p{changeswhencasefolded}', "");
Expect(1, 64, '\p{^changeswhencasefolded}', "");
Expect(1, 64, '\P{changeswhencasefolded}', "");
Expect(0, 64, '\P{^changeswhencasefolded}', "");
Expect(1, 90, '\p{	 Changes_When	Casefolded}', "");
Expect(0, 90, '\p{^	 Changes_When	Casefolded}', "");
Expect(0, 90, '\P{	 Changes_When	Casefolded}', "");
Expect(1, 90, '\P{^	 Changes_When	Casefolded}', "");
Expect(0, 64, '\p{	 Changes_When	Casefolded}', "");
Expect(1, 64, '\p{^	 Changes_When	Casefolded}', "");
Expect(1, 64, '\P{	 Changes_When	Casefolded}', "");
Expect(0, 64, '\P{^	 Changes_When	Casefolded}', "");
Error('\p{-:=is	changes-When	Casefolded}');
Error('\P{-:=is	changes-When	Casefolded}');
Expect(1, 90, '\p{ischangeswhencasefolded}', "");
Expect(0, 90, '\p{^ischangeswhencasefolded}', "");
Expect(0, 90, '\P{ischangeswhencasefolded}', "");
Expect(1, 90, '\P{^ischangeswhencasefolded}', "");
Expect(0, 64, '\p{ischangeswhencasefolded}', "");
Expect(1, 64, '\p{^ischangeswhencasefolded}', "");
Expect(1, 64, '\P{ischangeswhencasefolded}', "");
Expect(0, 64, '\P{^ischangeswhencasefolded}', "");
Expect(1, 90, '\p{  Is Changeswhen-casefolded}', "");
Expect(0, 90, '\p{^  Is Changeswhen-casefolded}', "");
Expect(0, 90, '\P{  Is Changeswhen-casefolded}', "");
Expect(1, 90, '\P{^  Is Changeswhen-casefolded}', "");
Expect(0, 64, '\p{  Is Changeswhen-casefolded}', "");
Expect(1, 64, '\p{^  Is Changeswhen-casefolded}', "");
Expect(1, 64, '\P{  Is Changeswhen-casefolded}', "");
Expect(0, 64, '\P{^  Is Changeswhen-casefolded}', "");
Error('\p{/a/CWCF}');
Error('\P{/a/CWCF}');
Expect(1, 90, '\p{cwcf}', "");
Expect(0, 90, '\p{^cwcf}', "");
Expect(0, 90, '\P{cwcf}', "");
Expect(1, 90, '\P{^cwcf}', "");
Expect(0, 64, '\p{cwcf}', "");
Expect(1, 64, '\p{^cwcf}', "");
Expect(1, 64, '\P{cwcf}', "");
Expect(0, 64, '\P{^cwcf}', "");
Expect(1, 90, '\p{-cwcf}', "");
Expect(0, 90, '\p{^-cwcf}', "");
Expect(0, 90, '\P{-cwcf}', "");
Expect(1, 90, '\P{^-cwcf}', "");
Expect(0, 64, '\p{-cwcf}', "");
Expect(1, 64, '\p{^-cwcf}', "");
Expect(1, 64, '\P{-cwcf}', "");
Expect(0, 64, '\P{^-cwcf}', "");
Error('\p{-/a/is_CWCF}');
Error('\P{-/a/is_CWCF}');
Expect(1, 90, '\p{iscwcf}', "");
Expect(0, 90, '\p{^iscwcf}', "");
Expect(0, 90, '\P{iscwcf}', "");
Expect(1, 90, '\P{^iscwcf}', "");
Expect(0, 64, '\p{iscwcf}', "");
Expect(1, 64, '\p{^iscwcf}', "");
Expect(1, 64, '\P{iscwcf}', "");
Expect(0, 64, '\P{^iscwcf}', "");
Expect(1, 90, '\p{-is-cwcf}', "");
Expect(0, 90, '\p{^-is-cwcf}', "");
Expect(0, 90, '\P{-is-cwcf}', "");
Expect(1, 90, '\P{^-is-cwcf}', "");
Expect(0, 64, '\p{-is-cwcf}', "");
Expect(1, 64, '\p{^-is-cwcf}', "");
Expect(1, 64, '\P{-is-cwcf}', "");
Expect(0, 64, '\P{^-is-cwcf}', "");
Error('\p{/a/ -private_usearea}');
Error('\P{/a/ -private_usearea}');
Expect(1, 63743, '\p{privateusearea}', "");
Expect(0, 63743, '\p{^privateusearea}', "");
Expect(0, 63743, '\P{privateusearea}', "");
Expect(1, 63743, '\P{^privateusearea}', "");
Expect(0, 1, '\p{privateusearea}', "");
Expect(1, 1, '\p{^privateusearea}', "");
Expect(1, 1, '\P{privateusearea}', "");
Expect(0, 1, '\P{^privateusearea}', "");
Expect(1, 63743, '\p{	-PRIVATE	Use-area}', "");
Expect(0, 63743, '\p{^	-PRIVATE	Use-area}', "");
Expect(0, 63743, '\P{	-PRIVATE	Use-area}', "");
Expect(1, 63743, '\P{^	-PRIVATE	Use-area}', "");
Expect(0, 1, '\p{	-PRIVATE	Use-area}', "");
Expect(1, 1, '\p{^	-PRIVATE	Use-area}', "");
Expect(1, 1, '\P{	-PRIVATE	Use-area}', "");
Expect(0, 1, '\P{^	-PRIVATE	Use-area}', "");
Error('\p{_	is	PRIVATEuse/a/Area}');
Error('\P{_	is	PRIVATEuse/a/Area}');
Expect(1, 63743, '\p{isprivateusearea}', "");
Expect(0, 63743, '\p{^isprivateusearea}', "");
Expect(0, 63743, '\P{isprivateusearea}', "");
Expect(1, 63743, '\P{^isprivateusearea}', "");
Expect(0, 1, '\p{isprivateusearea}', "");
Expect(1, 1, '\p{^isprivateusearea}', "");
Expect(1, 1, '\P{isprivateusearea}', "");
Expect(0, 1, '\P{^isprivateusearea}', "");
Expect(1, 63743, '\p{-_is	PRIVATE-USE-Area}', "");
Expect(0, 63743, '\p{^-_is	PRIVATE-USE-Area}', "");
Expect(0, 63743, '\P{-_is	PRIVATE-USE-Area}', "");
Expect(1, 63743, '\P{^-_is	PRIVATE-USE-Area}', "");
Expect(0, 1, '\p{-_is	PRIVATE-USE-Area}', "");
Expect(1, 1, '\p{^-_is	PRIVATE-USE-Area}', "");
Expect(1, 1, '\P{-_is	PRIVATE-USE-Area}', "");
Expect(0, 1, '\P{^-_is	PRIVATE-USE-Area}', "");
Error('\p{_ IN/a/Private Use	AREA}');
Error('\P{_ IN/a/Private Use	AREA}');
Expect(1, 63743, '\p{inprivateusearea}', "");
Expect(0, 63743, '\p{^inprivateusearea}', "");
Expect(0, 63743, '\P{inprivateusearea}', "");
Expect(1, 63743, '\P{^inprivateusearea}', "");
Expect(0, 1, '\p{inprivateusearea}', "");
Expect(1, 1, '\p{^inprivateusearea}', "");
Expect(1, 1, '\P{inprivateusearea}', "");
Expect(0, 1, '\P{^inprivateusearea}', "");
Expect(1, 63743, '\p{ IN_private-Use_area}', "");
Expect(0, 63743, '\p{^ IN_private-Use_area}', "");
Expect(0, 63743, '\P{ IN_private-Use_area}', "");
Expect(1, 63743, '\P{^ IN_private-Use_area}', "");
Expect(0, 1, '\p{ IN_private-Use_area}', "");
Expect(1, 1, '\p{^ IN_private-Use_area}', "");
Expect(1, 1, '\P{ IN_private-Use_area}', "");
Expect(0, 1, '\P{^ IN_private-Use_area}', "");
Error('\p{:=InPrivate USE}');
Error('\P{:=InPrivate USE}');
Expect(1, 63743, '\p{inprivateuse}', "");
Expect(0, 63743, '\p{^inprivateuse}', "");
Expect(0, 63743, '\P{inprivateuse}', "");
Expect(1, 63743, '\P{^inprivateuse}', "");
Expect(0, 1, '\p{inprivateuse}', "");
Expect(1, 1, '\p{^inprivateuse}', "");
Expect(1, 1, '\P{inprivateuse}', "");
Expect(0, 1, '\P{^inprivateuse}', "");
Expect(1, 63743, '\p{--IN	PRIVATEuse}', "");
Expect(0, 63743, '\p{^--IN	PRIVATEuse}', "");
Expect(0, 63743, '\P{--IN	PRIVATEuse}', "");
Expect(1, 63743, '\P{^--IN	PRIVATEuse}', "");
Expect(0, 1, '\p{--IN	PRIVATEuse}', "");
Expect(1, 1, '\p{^--IN	PRIVATEuse}', "");
Expect(1, 1, '\P{--IN	PRIVATEuse}', "");
Expect(0, 1, '\P{^--IN	PRIVATEuse}', "");
Error('\p{ /a/lycian}');
Error('\P{ /a/lycian}');
Expect(1, 66204, '\p{lycian}', "");
Expect(0, 66204, '\p{^lycian}', "");
Expect(0, 66204, '\P{lycian}', "");
Expect(1, 66204, '\P{^lycian}', "");
Expect(0, 66175, '\p{lycian}', "");
Expect(1, 66175, '\p{^lycian}', "");
Expect(1, 66175, '\P{lycian}', "");
Expect(0, 66175, '\P{^lycian}', "");
Expect(1, 66204, '\p{Lycian}', "");
Expect(0, 66204, '\p{^Lycian}', "");
Expect(0, 66204, '\P{Lycian}', "");
Expect(1, 66204, '\P{^Lycian}', "");
Expect(0, 66175, '\p{Lycian}', "");
Expect(1, 66175, '\p{^Lycian}', "");
Expect(1, 66175, '\P{Lycian}', "");
Expect(0, 66175, '\P{^Lycian}', "");
Error('\p{-/a/Is-Lycian}');
Error('\P{-/a/Is-Lycian}');
Expect(1, 66204, '\p{islycian}', "");
Expect(0, 66204, '\p{^islycian}', "");
Expect(0, 66204, '\P{islycian}', "");
Expect(1, 66204, '\P{^islycian}', "");
Expect(0, 66175, '\p{islycian}', "");
Expect(1, 66175, '\p{^islycian}', "");
Expect(1, 66175, '\P{islycian}', "");
Expect(0, 66175, '\P{^islycian}', "");
Expect(1, 66204, '\p{ -Islycian}', "");
Expect(0, 66204, '\p{^ -Islycian}', "");
Expect(0, 66204, '\P{ -Islycian}', "");
Expect(1, 66204, '\P{^ -Islycian}', "");
Expect(0, 66175, '\p{ -Islycian}', "");
Expect(1, 66175, '\p{^ -Islycian}', "");
Expect(1, 66175, '\P{ -Islycian}', "");
Expect(0, 66175, '\P{^ -Islycian}', "");
Error('\p{--Lyci/a/}');
Error('\P{--Lyci/a/}');
Expect(1, 66204, '\p{lyci}', "");
Expect(0, 66204, '\p{^lyci}', "");
Expect(0, 66204, '\P{lyci}', "");
Expect(1, 66204, '\P{^lyci}', "");
Expect(0, 66175, '\p{lyci}', "");
Expect(1, 66175, '\p{^lyci}', "");
Expect(1, 66175, '\P{lyci}', "");
Expect(0, 66175, '\P{^lyci}', "");
Expect(1, 66204, '\p{--lyci}', "");
Expect(0, 66204, '\p{^--lyci}', "");
Expect(0, 66204, '\P{--lyci}', "");
Expect(1, 66204, '\P{^--lyci}', "");
Expect(0, 66175, '\p{--lyci}', "");
Expect(1, 66175, '\p{^--lyci}', "");
Expect(1, 66175, '\P{--lyci}', "");
Expect(0, 66175, '\P{^--lyci}', "");
Error('\p{_IS:=Lyci}');
Error('\P{_IS:=Lyci}');
Expect(1, 66204, '\p{islyci}', "");
Expect(0, 66204, '\p{^islyci}', "");
Expect(0, 66204, '\P{islyci}', "");
Expect(1, 66204, '\P{^islyci}', "");
Expect(0, 66175, '\p{islyci}', "");
Expect(1, 66175, '\p{^islyci}', "");
Expect(1, 66175, '\P{islyci}', "");
Expect(0, 66175, '\P{^islyci}', "");
Expect(1, 66204, '\p{	-IS_lyci}', "");
Expect(0, 66204, '\p{^	-IS_lyci}', "");
Expect(0, 66204, '\P{	-IS_lyci}', "");
Expect(1, 66204, '\P{^	-IS_lyci}', "");
Expect(0, 66175, '\p{	-IS_lyci}', "");
Expect(1, 66175, '\p{^	-IS_lyci}', "");
Expect(1, 66175, '\P{	-IS_lyci}', "");
Expect(0, 66175, '\P{^	-IS_lyci}', "");
Error('\p{/a/--NUMBER}');
Error('\P{/a/--NUMBER}');
Expect(1, 57, '\p{number}', "");
Expect(0, 57, '\p{^number}', "");
Expect(0, 57, '\P{number}', "");
Expect(1, 57, '\P{^number}', "");
Expect(0, 47, '\p{number}', "");
Expect(1, 47, '\p{^number}', "");
Expect(1, 47, '\P{number}', "");
Expect(0, 47, '\P{^number}', "");
Expect(1, 57, '\p{ 	Number}', "");
Expect(0, 57, '\p{^ 	Number}', "");
Expect(0, 57, '\P{ 	Number}', "");
Expect(1, 57, '\P{^ 	Number}', "");
Expect(0, 47, '\p{ 	Number}', "");
Expect(1, 47, '\p{^ 	Number}', "");
Expect(1, 47, '\P{ 	Number}', "");
Expect(0, 47, '\P{^ 	Number}', "");
Error('\p{_-Is-NUMBER/a/}');
Error('\P{_-Is-NUMBER/a/}');
Expect(1, 57, '\p{isnumber}', "");
Expect(0, 57, '\p{^isnumber}', "");
Expect(0, 57, '\P{isnumber}', "");
Expect(1, 57, '\P{^isnumber}', "");
Expect(0, 47, '\p{isnumber}', "");
Expect(1, 47, '\p{^isnumber}', "");
Expect(1, 47, '\P{isnumber}', "");
Expect(0, 47, '\P{^isnumber}', "");
Expect(1, 57, '\p{_ Is_number}', "");
Expect(0, 57, '\p{^_ Is_number}', "");
Expect(0, 57, '\P{_ Is_number}', "");
Expect(1, 57, '\P{^_ Is_number}', "");
Expect(0, 47, '\p{_ Is_number}', "");
Expect(1, 47, '\p{^_ Is_number}', "");
Expect(1, 47, '\P{_ Is_number}', "");
Expect(0, 47, '\P{^_ Is_number}', "");
Error('\p{-/a/N}');
Error('\P{-/a/N}');
Expect(1, 57, '\p{n}', "");
Expect(0, 57, '\p{^n}', "");
Expect(0, 57, '\P{n}', "");
Expect(1, 57, '\P{^n}', "");
Expect(0, 47, '\p{n}', "");
Expect(1, 47, '\p{^n}', "");
Expect(1, 47, '\P{n}', "");
Expect(0, 47, '\P{^n}', "");
Expect(1, 57, '\p{_N}', "");
Expect(0, 57, '\p{^_N}', "");
Expect(0, 57, '\P{_N}', "");
Expect(1, 57, '\P{^_N}', "");
Expect(0, 47, '\p{_N}', "");
Expect(1, 47, '\p{^_N}', "");
Expect(1, 47, '\P{_N}', "");
Expect(0, 47, '\P{^_N}', "");
Error('\p{/a/	 ISN}');
Error('\P{/a/	 ISN}');
Expect(1, 57, '\p{isn}', "");
Expect(0, 57, '\p{^isn}', "");
Expect(0, 57, '\P{isn}', "");
Expect(1, 57, '\P{^isn}', "");
Expect(0, 47, '\p{isn}', "");
Expect(1, 47, '\p{^isn}', "");
Expect(1, 47, '\P{isn}', "");
Expect(0, 47, '\P{^isn}', "");
Expect(1, 57, '\p{-Is-n}', "");
Expect(0, 57, '\p{^-Is-n}', "");
Expect(0, 57, '\P{-Is-n}', "");
Expect(1, 57, '\P{^-Is-n}', "");
Expect(0, 47, '\p{-Is-n}', "");
Expect(1, 47, '\p{^-Is-n}', "");
Expect(1, 47, '\P{-Is-n}', "");
Expect(0, 47, '\P{^-Is-n}', "");
Error('\p{-PosixDigit/a/}');
Error('\P{-PosixDigit/a/}');
Expect(1, 57, '\p{posixdigit}', "");
Expect(0, 57, '\p{^posixdigit}', "");
Expect(0, 57, '\P{posixdigit}', "");
Expect(1, 57, '\P{^posixdigit}', "");
Expect(0, 47, '\p{posixdigit}', "");
Expect(1, 47, '\p{^posixdigit}', "");
Expect(1, 47, '\P{posixdigit}', "");
Expect(0, 47, '\P{^posixdigit}', "");
Expect(1, 57, '\p{-PosixDigit}', "");
Expect(0, 57, '\p{^-PosixDigit}', "");
Expect(0, 57, '\P{-PosixDigit}', "");
Expect(1, 57, '\P{^-PosixDigit}', "");
Expect(0, 47, '\p{-PosixDigit}', "");
Expect(1, 47, '\p{^-PosixDigit}', "");
Expect(1, 47, '\P{-PosixDigit}', "");
Expect(0, 47, '\P{^-PosixDigit}', "");
Error('\p{		Is:=PosixDigit}');
Error('\P{		Is:=PosixDigit}');
Expect(1, 57, '\p{isposixdigit}', "");
Expect(0, 57, '\p{^isposixdigit}', "");
Expect(0, 57, '\P{isposixdigit}', "");
Expect(1, 57, '\P{^isposixdigit}', "");
Expect(0, 47, '\p{isposixdigit}', "");
Expect(1, 47, '\p{^isposixdigit}', "");
Expect(1, 47, '\P{isposixdigit}', "");
Expect(0, 47, '\P{^isposixdigit}', "");
Expect(1, 57, '\p{ is-POSIXDIGIT}', "");
Expect(0, 57, '\p{^ is-POSIXDIGIT}', "");
Expect(0, 57, '\P{ is-POSIXDIGIT}', "");
Expect(1, 57, '\P{^ is-POSIXDIGIT}', "");
Expect(0, 47, '\p{ is-POSIXDIGIT}', "");
Expect(1, 47, '\p{^ is-POSIXDIGIT}', "");
Expect(1, 47, '\P{ is-POSIXDIGIT}', "");
Expect(0, 47, '\P{^ is-POSIXDIGIT}', "");
Error('\p{:=_GEORGIAN}');
Error('\P{:=_GEORGIAN}');
Expect(1, 4293, '\p{georgian}', "");
Expect(0, 4293, '\p{^georgian}', "");
Expect(0, 4293, '\P{georgian}', "");
Expect(1, 4293, '\P{^georgian}', "");
Expect(0, 4255, '\p{georgian}', "");
Expect(1, 4255, '\p{^georgian}', "");
Expect(1, 4255, '\P{georgian}', "");
Expect(0, 4255, '\P{^georgian}', "");
Expect(1, 4293, '\p{- georgian}', "");
Expect(0, 4293, '\p{^- georgian}', "");
Expect(0, 4293, '\P{- georgian}', "");
Expect(1, 4293, '\P{^- georgian}', "");
Expect(0, 4255, '\p{- georgian}', "");
Expect(1, 4255, '\p{^- georgian}', "");
Expect(1, 4255, '\P{- georgian}', "");
Expect(0, 4255, '\P{^- georgian}', "");
Error('\p{_-Is	georgian:=}');
Error('\P{_-Is	georgian:=}');
Expect(1, 4293, '\p{isgeorgian}', "");
Expect(0, 4293, '\p{^isgeorgian}', "");
Expect(0, 4293, '\P{isgeorgian}', "");
Expect(1, 4293, '\P{^isgeorgian}', "");
Expect(0, 4255, '\p{isgeorgian}', "");
Expect(1, 4255, '\p{^isgeorgian}', "");
Expect(1, 4255, '\P{isgeorgian}', "");
Expect(0, 4255, '\P{^isgeorgian}', "");
Expect(1, 4293, '\p{_-is georgian}', "");
Expect(0, 4293, '\p{^_-is georgian}', "");
Expect(0, 4293, '\P{_-is georgian}', "");
Expect(1, 4293, '\P{^_-is georgian}', "");
Expect(0, 4255, '\p{_-is georgian}', "");
Expect(1, 4255, '\p{^_-is georgian}', "");
Expect(1, 4255, '\P{_-is georgian}', "");
Expect(0, 4255, '\P{^_-is georgian}', "");
Error('\p{:=	 geor}');
Error('\P{:=	 geor}');
Expect(1, 4293, '\p{geor}', "");
Expect(0, 4293, '\p{^geor}', "");
Expect(0, 4293, '\P{geor}', "");
Expect(1, 4293, '\P{^geor}', "");
Expect(0, 4255, '\p{geor}', "");
Expect(1, 4255, '\p{^geor}', "");
Expect(1, 4255, '\P{geor}', "");
Expect(0, 4255, '\P{^geor}', "");
Expect(1, 4293, '\p{	geor}', "");
Expect(0, 4293, '\p{^	geor}', "");
Expect(0, 4293, '\P{	geor}', "");
Expect(1, 4293, '\P{^	geor}', "");
Expect(0, 4255, '\p{	geor}', "");
Expect(1, 4255, '\p{^	geor}', "");
Expect(1, 4255, '\P{	geor}', "");
Expect(0, 4255, '\P{^	geor}', "");
Error('\p{	/a/Is-GEOR}');
Error('\P{	/a/Is-GEOR}');
Expect(1, 4293, '\p{isgeor}', "");
Expect(0, 4293, '\p{^isgeor}', "");
Expect(0, 4293, '\P{isgeor}', "");
Expect(1, 4293, '\P{^isgeor}', "");
Expect(0, 4255, '\p{isgeor}', "");
Expect(1, 4255, '\p{^isgeor}', "");
Expect(1, 4255, '\P{isgeor}', "");
Expect(0, 4255, '\P{^isgeor}', "");
Expect(1, 4293, '\p{__Is	Geor}', "");
Expect(0, 4293, '\p{^__Is	Geor}', "");
Expect(0, 4293, '\P{__Is	Geor}', "");
Expect(1, 4293, '\P{^__Is	Geor}', "");
Expect(0, 4255, '\p{__Is	Geor}', "");
Expect(1, 4255, '\p{^__Is	Geor}', "");
Expect(1, 4255, '\P{__Is	Geor}', "");
Expect(0, 4255, '\P{^__Is	Geor}', "");
Error('\p{ :=No_BLOCK}');
Error('\P{ :=No_BLOCK}');
Expect(1, 2303, '\p{noblock}', "");
Expect(0, 2303, '\p{^noblock}', "");
Expect(0, 2303, '\P{noblock}', "");
Expect(1, 2303, '\P{^noblock}', "");
Expect(0, 2111, '\p{noblock}', "");
Expect(1, 2111, '\p{^noblock}', "");
Expect(1, 2111, '\P{noblock}', "");
Expect(0, 2111, '\P{^noblock}', "");
Expect(1, 2303, '\p{  NOblock}', "");
Expect(0, 2303, '\p{^  NOblock}', "");
Expect(0, 2303, '\P{  NOblock}', "");
Expect(1, 2303, '\P{^  NOblock}', "");
Expect(0, 2111, '\p{  NOblock}', "");
Expect(1, 2111, '\p{^  NOblock}', "");
Expect(1, 2111, '\P{  NOblock}', "");
Expect(0, 2111, '\P{^  NOblock}', "");
Error('\p{	Is-NOBlock/a/}');
Error('\P{	Is-NOBlock/a/}');
Expect(1, 2303, '\p{isnoblock}', "");
Expect(0, 2303, '\p{^isnoblock}', "");
Expect(0, 2303, '\P{isnoblock}', "");
Expect(1, 2303, '\P{^isnoblock}', "");
Expect(0, 2111, '\p{isnoblock}', "");
Expect(1, 2111, '\p{^isnoblock}', "");
Expect(1, 2111, '\P{isnoblock}', "");
Expect(0, 2111, '\P{^isnoblock}', "");
Expect(1, 2303, '\p{_-IsNO block}', "");
Expect(0, 2303, '\p{^_-IsNO block}', "");
Expect(0, 2303, '\P{_-IsNO block}', "");
Expect(1, 2303, '\P{^_-IsNO block}', "");
Expect(0, 2111, '\p{_-IsNO block}', "");
Expect(1, 2111, '\p{^_-IsNO block}', "");
Expect(1, 2111, '\P{_-IsNO block}', "");
Expect(0, 2111, '\P{^_-IsNO block}', "");
Error('\p{  In:=NO Block}');
Error('\P{  In:=NO Block}');
Expect(1, 2303, '\p{innoblock}', "");
Expect(0, 2303, '\p{^innoblock}', "");
Expect(0, 2303, '\P{innoblock}', "");
Expect(1, 2303, '\P{^innoblock}', "");
Expect(0, 2111, '\p{innoblock}', "");
Expect(1, 2111, '\p{^innoblock}', "");
Expect(1, 2111, '\P{innoblock}', "");
Expect(0, 2111, '\P{^innoblock}', "");
Expect(1, 2303, '\p{		In no Block}', "");
Expect(0, 2303, '\p{^		In no Block}', "");
Expect(0, 2303, '\P{		In no Block}', "");
Expect(1, 2303, '\P{^		In no Block}', "");
Expect(0, 2111, '\p{		In no Block}', "");
Expect(1, 2111, '\p{^		In no Block}', "");
Expect(1, 2111, '\P{		In no Block}', "");
Expect(0, 2111, '\P{^		In no Block}', "");
Error('\p{_:=ASSIGNED}');
Error('\P{_:=ASSIGNED}');
Expect(1, 887, '\p{assigned}', "");
Expect(0, 887, '\p{^assigned}', "");
Expect(0, 887, '\P{assigned}', "");
Expect(1, 887, '\P{^assigned}', "");
Expect(0, 889, '\p{assigned}', "");
Expect(1, 889, '\p{^assigned}', "");
Expect(1, 889, '\P{assigned}', "");
Expect(0, 889, '\P{^assigned}', "");
Expect(1, 887, '\p{-Assigned}', "");
Expect(0, 887, '\p{^-Assigned}', "");
Expect(0, 887, '\P{-Assigned}', "");
Expect(1, 887, '\P{^-Assigned}', "");
Expect(0, 889, '\p{-Assigned}', "");
Expect(1, 889, '\p{^-Assigned}', "");
Expect(1, 889, '\P{-Assigned}', "");
Expect(0, 889, '\P{^-Assigned}', "");
Error('\p{ -is/a/Assigned}');
Error('\P{ -is/a/Assigned}');
Expect(1, 887, '\p{isassigned}', "");
Expect(0, 887, '\p{^isassigned}', "");
Expect(0, 887, '\P{isassigned}', "");
Expect(1, 887, '\P{^isassigned}', "");
Expect(0, 889, '\p{isassigned}', "");
Expect(1, 889, '\p{^isassigned}', "");
Expect(1, 889, '\P{isassigned}', "");
Expect(0, 889, '\P{^isassigned}', "");
Expect(1, 887, '\p{_ISAssigned}', "");
Expect(0, 887, '\p{^_ISAssigned}', "");
Expect(0, 887, '\P{_ISAssigned}', "");
Expect(1, 887, '\P{^_ISAssigned}', "");
Expect(0, 889, '\p{_ISAssigned}', "");
Expect(1, 889, '\p{^_ISAssigned}', "");
Expect(1, 889, '\P{_ISAssigned}', "");
Expect(0, 889, '\P{^_ISAssigned}', "");
Error('\p{	/a/VerticalForms}');
Error('\P{	/a/VerticalForms}');
Expect(1, 65055, '\p{verticalforms}', "");
Expect(0, 65055, '\p{^verticalforms}', "");
Expect(0, 65055, '\P{verticalforms}', "");
Expect(1, 65055, '\P{^verticalforms}', "");
Expect(0, 65039, '\p{verticalforms}', "");
Expect(1, 65039, '\p{^verticalforms}', "");
Expect(1, 65039, '\P{verticalforms}', "");
Expect(0, 65039, '\P{^verticalforms}', "");
Expect(1, 65055, '\p{	-Vertical FORMS}', "");
Expect(0, 65055, '\p{^	-Vertical FORMS}', "");
Expect(0, 65055, '\P{	-Vertical FORMS}', "");
Expect(1, 65055, '\P{^	-Vertical FORMS}', "");
Expect(0, 65039, '\p{	-Vertical FORMS}', "");
Expect(1, 65039, '\p{^	-Vertical FORMS}', "");
Expect(1, 65039, '\P{	-Vertical FORMS}', "");
Expect(0, 65039, '\P{^	-Vertical FORMS}', "");
Error('\p{_-Is	Vertical_Forms:=}');
Error('\P{_-Is	Vertical_Forms:=}');
Expect(1, 65055, '\p{isverticalforms}', "");
Expect(0, 65055, '\p{^isverticalforms}', "");
Expect(0, 65055, '\P{isverticalforms}', "");
Expect(1, 65055, '\P{^isverticalforms}', "");
Expect(0, 65039, '\p{isverticalforms}', "");
Expect(1, 65039, '\p{^isverticalforms}', "");
Expect(1, 65039, '\P{isverticalforms}', "");
Expect(0, 65039, '\P{^isverticalforms}', "");
Expect(1, 65055, '\p{ 	is-VERTICALForms}', "");
Expect(0, 65055, '\p{^ 	is-VERTICALForms}', "");
Expect(0, 65055, '\P{ 	is-VERTICALForms}', "");
Expect(1, 65055, '\P{^ 	is-VERTICALForms}', "");
Expect(0, 65039, '\p{ 	is-VERTICALForms}', "");
Expect(1, 65039, '\p{^ 	is-VERTICALForms}', "");
Expect(1, 65039, '\P{ 	is-VERTICALForms}', "");
Expect(0, 65039, '\P{^ 	is-VERTICALForms}', "");
Error('\p{	:=in	vertical	Forms}');
Error('\P{	:=in	vertical	Forms}');
Expect(1, 65055, '\p{inverticalforms}', "");
Expect(0, 65055, '\p{^inverticalforms}', "");
Expect(0, 65055, '\P{inverticalforms}', "");
Expect(1, 65055, '\P{^inverticalforms}', "");
Expect(0, 65039, '\p{inverticalforms}', "");
Expect(1, 65039, '\p{^inverticalforms}', "");
Expect(1, 65039, '\P{inverticalforms}', "");
Expect(0, 65039, '\P{^inverticalforms}', "");
Expect(1, 65055, '\p{ INVertical_FORMS}', "");
Expect(0, 65055, '\p{^ INVertical_FORMS}', "");
Expect(0, 65055, '\P{ INVertical_FORMS}', "");
Expect(1, 65055, '\P{^ INVertical_FORMS}', "");
Expect(0, 65039, '\p{ INVertical_FORMS}', "");
Expect(1, 65039, '\p{^ INVertical_FORMS}', "");
Expect(1, 65039, '\P{ INVertical_FORMS}', "");
Expect(0, 65039, '\P{^ INVertical_FORMS}', "");
Error('\p{ cjk:=compatibility}');
Error('\P{ cjk:=compatibility}');
Expect(1, 13311, '\p{cjkcompatibility}', "");
Expect(0, 13311, '\p{^cjkcompatibility}', "");
Expect(0, 13311, '\P{cjkcompatibility}', "");
Expect(1, 13311, '\P{^cjkcompatibility}', "");
Expect(0, 13055, '\p{cjkcompatibility}', "");
Expect(1, 13055, '\p{^cjkcompatibility}', "");
Expect(1, 13055, '\P{cjkcompatibility}', "");
Expect(0, 13055, '\P{^cjkcompatibility}', "");
Expect(1, 13311, '\p{ CJK_Compatibility}', "");
Expect(0, 13311, '\p{^ CJK_Compatibility}', "");
Expect(0, 13311, '\P{ CJK_Compatibility}', "");
Expect(1, 13311, '\P{^ CJK_Compatibility}', "");
Expect(0, 13055, '\p{ CJK_Compatibility}', "");
Expect(1, 13055, '\p{^ CJK_Compatibility}', "");
Expect(1, 13055, '\P{ CJK_Compatibility}', "");
Expect(0, 13055, '\P{^ CJK_Compatibility}', "");
Error('\p{/a/_	ISCJK Compatibility}');
Error('\P{/a/_	ISCJK Compatibility}');
Expect(1, 13311, '\p{iscjkcompatibility}', "");
Expect(0, 13311, '\p{^iscjkcompatibility}', "");
Expect(0, 13311, '\P{iscjkcompatibility}', "");
Expect(1, 13311, '\P{^iscjkcompatibility}', "");
Expect(0, 13055, '\p{iscjkcompatibility}', "");
Expect(1, 13055, '\p{^iscjkcompatibility}', "");
Expect(1, 13055, '\P{iscjkcompatibility}', "");
Expect(0, 13055, '\P{^iscjkcompatibility}', "");
Expect(1, 13311, '\p{-	Is_CJKCOMPATIBILITY}', "");
Expect(0, 13311, '\p{^-	Is_CJKCOMPATIBILITY}', "");
Expect(0, 13311, '\P{-	Is_CJKCOMPATIBILITY}', "");
Expect(1, 13311, '\P{^-	Is_CJKCOMPATIBILITY}', "");
Expect(0, 13055, '\p{-	Is_CJKCOMPATIBILITY}', "");
Expect(1, 13055, '\p{^-	Is_CJKCOMPATIBILITY}', "");
Expect(1, 13055, '\P{-	Is_CJKCOMPATIBILITY}', "");
Expect(0, 13055, '\P{^-	Is_CJKCOMPATIBILITY}', "");
Error('\p{  In/a/CJK Compatibility}');
Error('\P{  In/a/CJK Compatibility}');
Expect(1, 13311, '\p{incjkcompatibility}', "");
Expect(0, 13311, '\p{^incjkcompatibility}', "");
Expect(0, 13311, '\P{incjkcompatibility}', "");
Expect(1, 13311, '\P{^incjkcompatibility}', "");
Expect(0, 13055, '\p{incjkcompatibility}', "");
Expect(1, 13055, '\p{^incjkcompatibility}', "");
Expect(1, 13055, '\P{incjkcompatibility}', "");
Expect(0, 13055, '\P{^incjkcompatibility}', "");
Expect(1, 13311, '\p{_	in cjk-COMPATIBILITY}', "");
Expect(0, 13311, '\p{^_	in cjk-COMPATIBILITY}', "");
Expect(0, 13311, '\P{_	in cjk-COMPATIBILITY}', "");
Expect(1, 13311, '\P{^_	in cjk-COMPATIBILITY}', "");
Expect(0, 13055, '\p{_	in cjk-COMPATIBILITY}', "");
Expect(1, 13055, '\p{^_	in cjk-COMPATIBILITY}', "");
Expect(1, 13055, '\P{_	in cjk-COMPATIBILITY}', "");
Expect(0, 13055, '\P{^_	in cjk-COMPATIBILITY}', "");
Error('\p{	-CJK Unified Ideographs	extension A:=}');
Error('\P{	-CJK Unified Ideographs	extension A:=}');
Expect(1, 19903, '\p{cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^cjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^cjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{cjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^cjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{	 CJK_Unified	Ideographs	Extension-A}', "");
Expect(0, 19903, '\p{^	 CJK_Unified	Ideographs	Extension-A}', "");
Expect(0, 19903, '\P{	 CJK_Unified	Ideographs	Extension-A}', "");
Expect(1, 19903, '\P{^	 CJK_Unified	Ideographs	Extension-A}', "");
Expect(0, 13311, '\p{	 CJK_Unified	Ideographs	Extension-A}', "");
Expect(1, 13311, '\p{^	 CJK_Unified	Ideographs	Extension-A}', "");
Expect(1, 13311, '\P{	 CJK_Unified	Ideographs	Extension-A}', "");
Expect(0, 13311, '\P{^	 CJK_Unified	Ideographs	Extension-A}', "");
Error('\p{	is_cjk-Unified_IDEOGRAPHS:=EXTENSION A}');
Error('\P{	is_cjk-Unified_IDEOGRAPHS:=EXTENSION A}');
Expect(1, 19903, '\p{iscjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^iscjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{iscjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^iscjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{iscjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^iscjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{iscjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^iscjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{_ IS CJKunifiedideographs_EXTENSION_A}', "");
Expect(0, 19903, '\p{^_ IS CJKunifiedideographs_EXTENSION_A}', "");
Expect(0, 19903, '\P{_ IS CJKunifiedideographs_EXTENSION_A}', "");
Expect(1, 19903, '\P{^_ IS CJKunifiedideographs_EXTENSION_A}', "");
Expect(0, 13311, '\p{_ IS CJKunifiedideographs_EXTENSION_A}', "");
Expect(1, 13311, '\p{^_ IS CJKunifiedideographs_EXTENSION_A}', "");
Expect(1, 13311, '\P{_ IS CJKunifiedideographs_EXTENSION_A}', "");
Expect(0, 13311, '\P{^_ IS CJKunifiedideographs_EXTENSION_A}', "");
Error('\p{-	inCJK unified_ideographs-extension/a/A}');
Error('\P{-	inCJK unified_ideographs-extension/a/A}');
Expect(1, 19903, '\p{incjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\p{^incjkunifiedideographsextensiona}', "");
Expect(0, 19903, '\P{incjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\P{^incjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\p{incjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\p{^incjkunifiedideographsextensiona}', "");
Expect(1, 13311, '\P{incjkunifiedideographsextensiona}', "");
Expect(0, 13311, '\P{^incjkunifiedideographsextensiona}', "");
Expect(1, 19903, '\p{-In-CJK_Unified	IDEOGRAPHS	Extension_A}', "");
Expect(0, 19903, '\p{^-In-CJK_Unified	IDEOGRAPHS	Extension_A}', "");
Expect(0, 19903, '\P{-In-CJK_Unified	IDEOGRAPHS	Extension_A}', "");
Expect(1, 19903, '\P{^-In-CJK_Unified	IDEOGRAPHS	Extension_A}', "");
Expect(0, 13311, '\p{-In-CJK_Unified	IDEOGRAPHS	Extension_A}', "");
Expect(1, 13311, '\p{^-In-CJK_Unified	IDEOGRAPHS	Extension_A}', "");
Expect(1, 13311, '\P{-In-CJK_Unified	IDEOGRAPHS	Extension_A}', "");
Expect(0, 13311, '\P{^-In-CJK_Unified	IDEOGRAPHS	Extension_A}', "");
Error('\p{:=-KHAROSHTHI}');
Error('\P{:=-KHAROSHTHI}');
Expect(1, 68099, '\p{kharoshthi}', "");
Expect(0, 68099, '\p{^kharoshthi}', "");
Expect(0, 68099, '\P{kharoshthi}', "");
Expect(1, 68099, '\P{^kharoshthi}', "");
Expect(0, 68095, '\p{kharoshthi}', "");
Expect(1, 68095, '\p{^kharoshthi}', "");
Expect(1, 68095, '\P{kharoshthi}', "");
Expect(0, 68095, '\P{^kharoshthi}', "");
Expect(1, 68099, '\p{ KHAROSHTHI}', "");
Expect(0, 68099, '\p{^ KHAROSHTHI}', "");
Expect(0, 68099, '\P{ KHAROSHTHI}', "");
Expect(1, 68099, '\P{^ KHAROSHTHI}', "");
Expect(0, 68095, '\p{ KHAROSHTHI}', "");
Expect(1, 68095, '\p{^ KHAROSHTHI}', "");
Expect(1, 68095, '\P{ KHAROSHTHI}', "");
Expect(0, 68095, '\P{^ KHAROSHTHI}', "");
Error('\p{ :=Is-KHAROSHTHI}');
Error('\P{ :=Is-KHAROSHTHI}');
Expect(1, 68099, '\p{iskharoshthi}', "");
Expect(0, 68099, '\p{^iskharoshthi}', "");
Expect(0, 68099, '\P{iskharoshthi}', "");
Expect(1, 68099, '\P{^iskharoshthi}', "");
Expect(0, 68095, '\p{iskharoshthi}', "");
Expect(1, 68095, '\p{^iskharoshthi}', "");
Expect(1, 68095, '\P{iskharoshthi}', "");
Expect(0, 68095, '\P{^iskharoshthi}', "");
Expect(1, 68099, '\p{  Is_kharoshthi}', "");
Expect(0, 68099, '\p{^  Is_kharoshthi}', "");
Expect(0, 68099, '\P{  Is_kharoshthi}', "");
Expect(1, 68099, '\P{^  Is_kharoshthi}', "");
Expect(0, 68095, '\p{  Is_kharoshthi}', "");
Expect(1, 68095, '\p{^  Is_kharoshthi}', "");
Expect(1, 68095, '\P{  Is_kharoshthi}', "");
Expect(0, 68095, '\P{^  Is_kharoshthi}', "");
Error('\p{_	Khar:=}');
Error('\P{_	Khar:=}');
Expect(1, 68099, '\p{khar}', "");
Expect(0, 68099, '\p{^khar}', "");
Expect(0, 68099, '\P{khar}', "");
Expect(1, 68099, '\P{^khar}', "");
Expect(0, 68095, '\p{khar}', "");
Expect(1, 68095, '\p{^khar}', "");
Expect(1, 68095, '\P{khar}', "");
Expect(0, 68095, '\P{^khar}', "");
Expect(1, 68099, '\p{  Khar}', "");
Expect(0, 68099, '\p{^  Khar}', "");
Expect(0, 68099, '\P{  Khar}', "");
Expect(1, 68099, '\P{^  Khar}', "");
Expect(0, 68095, '\p{  Khar}', "");
Expect(1, 68095, '\p{^  Khar}', "");
Expect(1, 68095, '\P{  Khar}', "");
Expect(0, 68095, '\P{^  Khar}', "");
Error('\p{_-IS khar:=}');
Error('\P{_-IS khar:=}');
Expect(1, 68099, '\p{iskhar}', "");
Expect(0, 68099, '\p{^iskhar}', "");
Expect(0, 68099, '\P{iskhar}', "");
Expect(1, 68099, '\P{^iskhar}', "");
Expect(0, 68095, '\p{iskhar}', "");
Expect(1, 68095, '\p{^iskhar}', "");
Expect(1, 68095, '\P{iskhar}', "");
Expect(0, 68095, '\P{^iskhar}', "");
Expect(1, 68099, '\p{_Is-Khar}', "");
Expect(0, 68099, '\p{^_Is-Khar}', "");
Expect(0, 68099, '\P{_Is-Khar}', "");
Expect(1, 68099, '\P{^_Is-Khar}', "");
Expect(0, 68095, '\p{_Is-Khar}', "");
Expect(1, 68095, '\p{^_Is-Khar}', "");
Expect(1, 68095, '\P{_Is-Khar}', "");
Expect(0, 68095, '\P{^_Is-Khar}', "");
Error('\p{/a/ -MathSYMBOL}');
Error('\P{/a/ -MathSYMBOL}');
Expect(1, 43, '\p{mathsymbol}', "");
Expect(0, 43, '\p{^mathsymbol}', "");
Expect(0, 43, '\P{mathsymbol}', "");
Expect(1, 43, '\P{^mathsymbol}', "");
Expect(0, 42, '\p{mathsymbol}', "");
Expect(1, 42, '\p{^mathsymbol}', "");
Expect(1, 42, '\P{mathsymbol}', "");
Expect(0, 42, '\P{^mathsymbol}', "");
Expect(1, 43, '\p{		Math	Symbol}', "");
Expect(0, 43, '\p{^		Math	Symbol}', "");
Expect(0, 43, '\P{		Math	Symbol}', "");
Expect(1, 43, '\P{^		Math	Symbol}', "");
Expect(0, 42, '\p{		Math	Symbol}', "");
Expect(1, 42, '\p{^		Math	Symbol}', "");
Expect(1, 42, '\P{		Math	Symbol}', "");
Expect(0, 42, '\P{^		Math	Symbol}', "");
Error('\p{:=is	Math-Symbol}');
Error('\P{:=is	Math-Symbol}');
Expect(1, 43, '\p{ismathsymbol}', "");
Expect(0, 43, '\p{^ismathsymbol}', "");
Expect(0, 43, '\P{ismathsymbol}', "");
Expect(1, 43, '\P{^ismathsymbol}', "");
Expect(0, 42, '\p{ismathsymbol}', "");
Expect(1, 42, '\p{^ismathsymbol}', "");
Expect(1, 42, '\P{ismathsymbol}', "");
Expect(0, 42, '\P{^ismathsymbol}', "");
Expect(1, 43, '\p{ Is_math	Symbol}', "");
Expect(0, 43, '\p{^ Is_math	Symbol}', "");
Expect(0, 43, '\P{ Is_math	Symbol}', "");
Expect(1, 43, '\P{^ Is_math	Symbol}', "");
Expect(0, 42, '\p{ Is_math	Symbol}', "");
Expect(1, 42, '\p{^ Is_math	Symbol}', "");
Expect(1, 42, '\P{ Is_math	Symbol}', "");
Expect(0, 42, '\P{^ Is_math	Symbol}', "");
Error('\p{/a/Sm}');
Error('\P{/a/Sm}');
Expect(1, 43, '\p{sm}', "");
Expect(0, 43, '\p{^sm}', "");
Expect(0, 43, '\P{sm}', "");
Expect(1, 43, '\P{^sm}', "");
Expect(0, 42, '\p{sm}', "");
Expect(1, 42, '\p{^sm}', "");
Expect(1, 42, '\P{sm}', "");
Expect(0, 42, '\P{^sm}', "");
Expect(1, 43, '\p{ SM}', "");
Expect(0, 43, '\p{^ SM}', "");
Expect(0, 43, '\P{ SM}', "");
Expect(1, 43, '\P{^ SM}', "");
Expect(0, 42, '\p{ SM}', "");
Expect(1, 42, '\p{^ SM}', "");
Expect(1, 42, '\P{ SM}', "");
Expect(0, 42, '\P{^ SM}', "");
Error('\p{-/a/Is Sm}');
Error('\P{-/a/Is Sm}');
Expect(1, 43, '\p{issm}', "");
Expect(0, 43, '\p{^issm}', "");
Expect(0, 43, '\P{issm}', "");
Expect(1, 43, '\P{^issm}', "");
Expect(0, 42, '\p{issm}', "");
Expect(1, 42, '\p{^issm}', "");
Expect(1, 42, '\P{issm}', "");
Expect(0, 42, '\P{^issm}', "");
Expect(1, 43, '\p{Is	Sm}', "");
Expect(0, 43, '\p{^Is	Sm}', "");
Expect(0, 43, '\P{Is	Sm}', "");
Expect(1, 43, '\P{^Is	Sm}', "");
Expect(0, 42, '\p{Is	Sm}', "");
Expect(1, 42, '\p{^Is	Sm}', "");
Expect(1, 42, '\P{Is	Sm}', "");
Expect(0, 42, '\P{^Is	Sm}', "");
Error('\p{Tagalog/a/}');
Error('\P{Tagalog/a/}');
Expect(1, 5900, '\p{tagalog}', "");
Expect(0, 5900, '\p{^tagalog}', "");
Expect(0, 5900, '\P{tagalog}', "");
Expect(1, 5900, '\P{^tagalog}', "");
Expect(0, 5887, '\p{tagalog}', "");
Expect(1, 5887, '\p{^tagalog}', "");
Expect(1, 5887, '\P{tagalog}', "");
Expect(0, 5887, '\P{^tagalog}', "");
Expect(1, 5900, '\p{ Tagalog}', "");
Expect(0, 5900, '\p{^ Tagalog}', "");
Expect(0, 5900, '\P{ Tagalog}', "");
Expect(1, 5900, '\P{^ Tagalog}', "");
Expect(0, 5887, '\p{ Tagalog}', "");
Expect(1, 5887, '\p{^ Tagalog}', "");
Expect(1, 5887, '\P{ Tagalog}', "");
Expect(0, 5887, '\P{^ Tagalog}', "");
Error('\p{_is-Tagalog:=}');
Error('\P{_is-Tagalog:=}');
Expect(1, 5900, '\p{istagalog}', "");
Expect(0, 5900, '\p{^istagalog}', "");
Expect(0, 5900, '\P{istagalog}', "");
Expect(1, 5900, '\P{^istagalog}', "");
Expect(0, 5887, '\p{istagalog}', "");
Expect(1, 5887, '\p{^istagalog}', "");
Expect(1, 5887, '\P{istagalog}', "");
Expect(0, 5887, '\P{^istagalog}', "");
Expect(1, 5900, '\p{_-isTAGALOG}', "");
Expect(0, 5900, '\p{^_-isTAGALOG}', "");
Expect(0, 5900, '\P{_-isTAGALOG}', "");
Expect(1, 5900, '\P{^_-isTAGALOG}', "");
Expect(0, 5887, '\p{_-isTAGALOG}', "");
Expect(1, 5887, '\p{^_-isTAGALOG}', "");
Expect(1, 5887, '\P{_-isTAGALOG}', "");
Expect(0, 5887, '\P{^_-isTAGALOG}', "");
Error('\p{_tglg/a/}');
Error('\P{_tglg/a/}');
Expect(1, 5900, '\p{tglg}', "");
Expect(0, 5900, '\p{^tglg}', "");
Expect(0, 5900, '\P{tglg}', "");
Expect(1, 5900, '\P{^tglg}', "");
Expect(0, 5887, '\p{tglg}', "");
Expect(1, 5887, '\p{^tglg}', "");
Expect(1, 5887, '\P{tglg}', "");
Expect(0, 5887, '\P{^tglg}', "");
Error('\p{	Is/a/Tglg}');
Error('\P{	Is/a/Tglg}');
Expect(1, 5900, '\p{istglg}', "");
Expect(0, 5900, '\p{^istglg}', "");
Expect(0, 5900, '\P{istglg}', "");
Expect(1, 5900, '\P{^istglg}', "");
Expect(0, 5887, '\p{istglg}', "");
Expect(1, 5887, '\p{^istglg}', "");
Expect(1, 5887, '\P{istglg}', "");
Expect(0, 5887, '\P{^istglg}', "");
Expect(1, 5900, '\p{	IS	Tglg}', "");
Expect(0, 5900, '\p{^	IS	Tglg}', "");
Expect(0, 5900, '\P{	IS	Tglg}', "");
Expect(1, 5900, '\P{^	IS	Tglg}', "");
Expect(0, 5887, '\p{	IS	Tglg}', "");
Expect(1, 5887, '\p{^	IS	Tglg}', "");
Expect(1, 5887, '\P{	IS	Tglg}', "");
Expect(0, 5887, '\P{^	IS	Tglg}', "");
Error('\p{:=	-Syriac}');
Error('\P{:=	-Syriac}');
Expect(1, 1805, '\p{syriac}', "");
Expect(0, 1805, '\p{^syriac}', "");
Expect(0, 1805, '\P{syriac}', "");
Expect(1, 1805, '\P{^syriac}', "");
Expect(0, 1791, '\p{syriac}', "");
Expect(1, 1791, '\p{^syriac}', "");
Expect(1, 1791, '\P{syriac}', "");
Expect(0, 1791, '\P{^syriac}', "");
Expect(1, 1805, '\p{ -Syriac}', "");
Expect(0, 1805, '\p{^ -Syriac}', "");
Expect(0, 1805, '\P{ -Syriac}', "");
Expect(1, 1805, '\P{^ -Syriac}', "");
Expect(0, 1791, '\p{ -Syriac}', "");
Expect(1, 1791, '\p{^ -Syriac}', "");
Expect(1, 1791, '\P{ -Syriac}', "");
Expect(0, 1791, '\P{^ -Syriac}', "");
Error('\p{_:=IS_syriac}');
Error('\P{_:=IS_syriac}');
Expect(1, 1805, '\p{issyriac}', "");
Expect(0, 1805, '\p{^issyriac}', "");
Expect(0, 1805, '\P{issyriac}', "");
Expect(1, 1805, '\P{^issyriac}', "");
Expect(0, 1791, '\p{issyriac}', "");
Expect(1, 1791, '\p{^issyriac}', "");
Expect(1, 1791, '\P{issyriac}', "");
Expect(0, 1791, '\P{^issyriac}', "");
Expect(1, 1805, '\p{-IS-Syriac}', "");
Expect(0, 1805, '\p{^-IS-Syriac}', "");
Expect(0, 1805, '\P{-IS-Syriac}', "");
Expect(1, 1805, '\P{^-IS-Syriac}', "");
Expect(0, 1791, '\p{-IS-Syriac}', "");
Expect(1, 1791, '\p{^-IS-Syriac}', "");
Expect(1, 1791, '\P{-IS-Syriac}', "");
Expect(0, 1791, '\P{^-IS-Syriac}', "");
Error('\p{ /a/Syrc}');
Error('\P{ /a/Syrc}');
Expect(1, 1805, '\p{syrc}', "");
Expect(0, 1805, '\p{^syrc}', "");
Expect(0, 1805, '\P{syrc}', "");
Expect(1, 1805, '\P{^syrc}', "");
Expect(0, 1791, '\p{syrc}', "");
Expect(1, 1791, '\p{^syrc}', "");
Expect(1, 1791, '\P{syrc}', "");
Expect(0, 1791, '\P{^syrc}', "");
Expect(1, 1805, '\p{-_SYRC}', "");
Expect(0, 1805, '\p{^-_SYRC}', "");
Expect(0, 1805, '\P{-_SYRC}', "");
Expect(1, 1805, '\P{^-_SYRC}', "");
Expect(0, 1791, '\p{-_SYRC}', "");
Expect(1, 1791, '\p{^-_SYRC}', "");
Expect(1, 1791, '\P{-_SYRC}', "");
Expect(0, 1791, '\P{^-_SYRC}', "");
Error('\p{	-is/a/syrc}');
Error('\P{	-is/a/syrc}');
Expect(1, 1805, '\p{issyrc}', "");
Expect(0, 1805, '\p{^issyrc}', "");
Expect(0, 1805, '\P{issyrc}', "");
Expect(1, 1805, '\P{^issyrc}', "");
Expect(0, 1791, '\p{issyrc}', "");
Expect(1, 1791, '\p{^issyrc}', "");
Expect(1, 1791, '\P{issyrc}', "");
Expect(0, 1791, '\P{^issyrc}', "");
Expect(1, 1805, '\p{-IS_syrc}', "");
Expect(0, 1805, '\p{^-IS_syrc}', "");
Expect(0, 1805, '\P{-IS_syrc}', "");
Expect(1, 1805, '\P{^-IS_syrc}', "");
Expect(0, 1791, '\p{-IS_syrc}', "");
Expect(1, 1791, '\p{^-IS_syrc}', "");
Expect(1, 1791, '\P{-IS_syrc}', "");
Expect(0, 1791, '\P{^-IS_syrc}', "");
Error('\p{		IN/a/Phoenician}');
Error('\P{		IN/a/Phoenician}');
Expect(1, 67871, '\p{inphoenician}', "");
Expect(0, 67871, '\p{^inphoenician}', "");
Expect(0, 67871, '\P{inphoenician}', "");
Expect(1, 67871, '\P{^inphoenician}', "");
Expect(0, 67839, '\p{inphoenician}', "");
Expect(1, 67839, '\p{^inphoenician}', "");
Expect(1, 67839, '\P{inphoenician}', "");
Expect(0, 67839, '\P{^inphoenician}', "");
Expect(1, 67871, '\p{	_IN-PHOENICIAN}', "");
Expect(0, 67871, '\p{^	_IN-PHOENICIAN}', "");
Expect(0, 67871, '\P{	_IN-PHOENICIAN}', "");
Expect(1, 67871, '\P{^	_IN-PHOENICIAN}', "");
Expect(0, 67839, '\p{	_IN-PHOENICIAN}', "");
Expect(1, 67839, '\p{^	_IN-PHOENICIAN}', "");
Expect(1, 67839, '\P{	_IN-PHOENICIAN}', "");
Expect(0, 67839, '\P{^	_IN-PHOENICIAN}', "");
Error('\p{_:=perlword}');
Error('\P{_:=perlword}');
Expect(1, 57, '\p{perlword}', "");
Expect(0, 57, '\p{^perlword}', "");
Expect(0, 57, '\P{perlword}', "");
Expect(1, 57, '\P{^perlword}', "");
Expect(0, 47, '\p{perlword}', "");
Expect(1, 47, '\p{^perlword}', "");
Expect(1, 47, '\P{perlword}', "");
Expect(0, 47, '\P{^perlword}', "");
Expect(1, 57, '\p{_perlword}', "");
Expect(0, 57, '\p{^_perlword}', "");
Expect(0, 57, '\P{_perlword}', "");
Expect(1, 57, '\P{^_perlword}', "");
Expect(0, 47, '\p{_perlword}', "");
Expect(1, 47, '\p{^_perlword}', "");
Expect(1, 47, '\P{_perlword}', "");
Expect(0, 47, '\P{^_perlword}', "");
Error('\p{-:=Is_PerlWord}');
Error('\P{-:=Is_PerlWord}');
Expect(1, 57, '\p{isperlword}', "");
Expect(0, 57, '\p{^isperlword}', "");
Expect(0, 57, '\P{isperlword}', "");
Expect(1, 57, '\P{^isperlword}', "");
Expect(0, 47, '\p{isperlword}', "");
Expect(1, 47, '\p{^isperlword}', "");
Expect(1, 47, '\P{isperlword}', "");
Expect(0, 47, '\P{^isperlword}', "");
Expect(1, 57, '\p{ _Is_PerlWord}', "");
Expect(0, 57, '\p{^ _Is_PerlWord}', "");
Expect(0, 57, '\P{ _Is_PerlWord}', "");
Expect(1, 57, '\P{^ _Is_PerlWord}', "");
Expect(0, 47, '\p{ _Is_PerlWord}', "");
Expect(1, 47, '\p{^ _Is_PerlWord}', "");
Expect(1, 47, '\P{ _Is_PerlWord}', "");
Expect(0, 47, '\P{^ _Is_PerlWord}', "");
Error('\p{/a/Halfwidth	and	fullwidth FORMS}');
Error('\P{/a/Halfwidth	and	fullwidth FORMS}');
Expect(1, 65519, '\p{halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^halfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^halfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{halfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^halfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{ 	Halfwidth-And Fullwidth	FORMS}', "");
Expect(0, 65519, '\p{^ 	Halfwidth-And Fullwidth	FORMS}', "");
Expect(0, 65519, '\P{ 	Halfwidth-And Fullwidth	FORMS}', "");
Expect(1, 65519, '\P{^ 	Halfwidth-And Fullwidth	FORMS}', "");
Expect(0, 65279, '\p{ 	Halfwidth-And Fullwidth	FORMS}', "");
Expect(1, 65279, '\p{^ 	Halfwidth-And Fullwidth	FORMS}', "");
Expect(1, 65279, '\P{ 	Halfwidth-And Fullwidth	FORMS}', "");
Expect(0, 65279, '\P{^ 	Halfwidth-And Fullwidth	FORMS}', "");
Error('\p{ /a/Ishalfwidth_And-fullwidth forms}');
Error('\P{ /a/Ishalfwidth_And-fullwidth forms}');
Expect(1, 65519, '\p{ishalfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^ishalfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{ishalfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^ishalfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{ishalfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^ishalfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{ishalfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^ishalfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{-isHALFWIDTHAnd-Fullwidth Forms}', "");
Expect(0, 65519, '\p{^-isHALFWIDTHAnd-Fullwidth Forms}', "");
Expect(0, 65519, '\P{-isHALFWIDTHAnd-Fullwidth Forms}', "");
Expect(1, 65519, '\P{^-isHALFWIDTHAnd-Fullwidth Forms}', "");
Expect(0, 65279, '\p{-isHALFWIDTHAnd-Fullwidth Forms}', "");
Expect(1, 65279, '\p{^-isHALFWIDTHAnd-Fullwidth Forms}', "");
Expect(1, 65279, '\P{-isHALFWIDTHAnd-Fullwidth Forms}', "");
Expect(0, 65279, '\P{^-isHALFWIDTHAnd-Fullwidth Forms}', "");
Error('\p{_:=IN halfwidth	AND-fullwidth_Forms}');
Error('\P{_:=IN halfwidth	AND-fullwidth_Forms}');
Expect(1, 65519, '\p{inhalfwidthandfullwidthforms}', "");
Expect(0, 65519, '\p{^inhalfwidthandfullwidthforms}', "");
Expect(0, 65519, '\P{inhalfwidthandfullwidthforms}', "");
Expect(1, 65519, '\P{^inhalfwidthandfullwidthforms}', "");
Expect(0, 65279, '\p{inhalfwidthandfullwidthforms}', "");
Expect(1, 65279, '\p{^inhalfwidthandfullwidthforms}', "");
Expect(1, 65279, '\P{inhalfwidthandfullwidthforms}', "");
Expect(0, 65279, '\P{^inhalfwidthandfullwidthforms}', "");
Expect(1, 65519, '\p{	 IN_Halfwidth_And-FULLWIDTHFORMS}', "");
Expect(0, 65519, '\p{^	 IN_Halfwidth_And-FULLWIDTHFORMS}', "");
Expect(0, 65519, '\P{	 IN_Halfwidth_And-FULLWIDTHFORMS}', "");
Expect(1, 65519, '\P{^	 IN_Halfwidth_And-FULLWIDTHFORMS}', "");
Expect(0, 65279, '\p{	 IN_Halfwidth_And-FULLWIDTHFORMS}', "");
Expect(1, 65279, '\p{^	 IN_Halfwidth_And-FULLWIDTHFORMS}', "");
Expect(1, 65279, '\P{	 IN_Halfwidth_And-FULLWIDTHFORMS}', "");
Expect(0, 65279, '\P{^	 IN_Halfwidth_And-FULLWIDTHFORMS}', "");
Error('\p{:=_	Ancient_greek Numbers}');
Error('\P{:=_	Ancient_greek Numbers}');
Expect(1, 65935, '\p{ancientgreeknumbers}', "");
Expect(0, 65935, '\p{^ancientgreeknumbers}', "");
Expect(0, 65935, '\P{ancientgreeknumbers}', "");
Expect(1, 65935, '\P{^ancientgreeknumbers}', "");
Expect(0, 65855, '\p{ancientgreeknumbers}', "");
Expect(1, 65855, '\p{^ancientgreeknumbers}', "");
Expect(1, 65855, '\P{ancientgreeknumbers}', "");
Expect(0, 65855, '\P{^ancientgreeknumbers}', "");
Expect(1, 65935, '\p{_Ancient-Greek Numbers}', "");
Expect(0, 65935, '\p{^_Ancient-Greek Numbers}', "");
Expect(0, 65935, '\P{_Ancient-Greek Numbers}', "");
Expect(1, 65935, '\P{^_Ancient-Greek Numbers}', "");
Expect(0, 65855, '\p{_Ancient-Greek Numbers}', "");
Expect(1, 65855, '\p{^_Ancient-Greek Numbers}', "");
Expect(1, 65855, '\P{_Ancient-Greek Numbers}', "");
Expect(0, 65855, '\P{^_Ancient-Greek Numbers}', "");
Error('\p{ _Is/a/ANCIENT_GreekNUMBERS}');
Error('\P{ _Is/a/ANCIENT_GreekNUMBERS}');
Expect(1, 65935, '\p{isancientgreeknumbers}', "");
Expect(0, 65935, '\p{^isancientgreeknumbers}', "");
Expect(0, 65935, '\P{isancientgreeknumbers}', "");
Expect(1, 65935, '\P{^isancientgreeknumbers}', "");
Expect(0, 65855, '\p{isancientgreeknumbers}', "");
Expect(1, 65855, '\p{^isancientgreeknumbers}', "");
Expect(1, 65855, '\P{isancientgreeknumbers}', "");
Expect(0, 65855, '\P{^isancientgreeknumbers}', "");
Expect(1, 65935, '\p{-_Is	ancient	greek_Numbers}', "");
Expect(0, 65935, '\p{^-_Is	ancient	greek_Numbers}', "");
Expect(0, 65935, '\P{-_Is	ancient	greek_Numbers}', "");
Expect(1, 65935, '\P{^-_Is	ancient	greek_Numbers}', "");
Expect(0, 65855, '\p{-_Is	ancient	greek_Numbers}', "");
Expect(1, 65855, '\p{^-_Is	ancient	greek_Numbers}', "");
Expect(1, 65855, '\P{-_Is	ancient	greek_Numbers}', "");
Expect(0, 65855, '\P{^-_Is	ancient	greek_Numbers}', "");
Error('\p{_In Ancient:=Greek_Numbers}');
Error('\P{_In Ancient:=Greek_Numbers}');
Expect(1, 65935, '\p{inancientgreeknumbers}', "");
Expect(0, 65935, '\p{^inancientgreeknumbers}', "");
Expect(0, 65935, '\P{inancientgreeknumbers}', "");
Expect(1, 65935, '\P{^inancientgreeknumbers}', "");
Expect(0, 65855, '\p{inancientgreeknumbers}', "");
Expect(1, 65855, '\p{^inancientgreeknumbers}', "");
Expect(1, 65855, '\P{inancientgreeknumbers}', "");
Expect(0, 65855, '\P{^inancientgreeknumbers}', "");
Expect(1, 65935, '\p{_	IN AncientGreek_NUMBERS}', "");
Expect(0, 65935, '\p{^_	IN AncientGreek_NUMBERS}', "");
Expect(0, 65935, '\P{_	IN AncientGreek_NUMBERS}', "");
Expect(1, 65935, '\P{^_	IN AncientGreek_NUMBERS}', "");
Expect(0, 65855, '\p{_	IN AncientGreek_NUMBERS}', "");
Expect(1, 65855, '\p{^_	IN AncientGreek_NUMBERS}', "");
Expect(1, 65855, '\P{_	IN AncientGreek_NUMBERS}', "");
Expect(0, 65855, '\P{^_	IN AncientGreek_NUMBERS}', "");
Error('\p{	/a/opticalCHARACTERRecognition}');
Error('\P{	/a/opticalCHARACTERRecognition}');
Expect(1, 9311, '\p{opticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^opticalcharacterrecognition}', "");
Expect(0, 9311, '\P{opticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^opticalcharacterrecognition}', "");
Expect(0, 9279, '\p{opticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^opticalcharacterrecognition}', "");
Expect(1, 9279, '\P{opticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^opticalcharacterrecognition}', "");
Expect(1, 9311, '\p{	optical CHARACTER	RECOGNITION}', "");
Expect(0, 9311, '\p{^	optical CHARACTER	RECOGNITION}', "");
Expect(0, 9311, '\P{	optical CHARACTER	RECOGNITION}', "");
Expect(1, 9311, '\P{^	optical CHARACTER	RECOGNITION}', "");
Expect(0, 9279, '\p{	optical CHARACTER	RECOGNITION}', "");
Expect(1, 9279, '\p{^	optical CHARACTER	RECOGNITION}', "");
Expect(1, 9279, '\P{	optical CHARACTER	RECOGNITION}', "");
Expect(0, 9279, '\P{^	optical CHARACTER	RECOGNITION}', "");
Error('\p{:=	Is_optical	character_recognition}');
Error('\P{:=	Is_optical	character_recognition}');
Expect(1, 9311, '\p{isopticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^isopticalcharacterrecognition}', "");
Expect(0, 9311, '\P{isopticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^isopticalcharacterrecognition}', "");
Expect(0, 9279, '\p{isopticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^isopticalcharacterrecognition}', "");
Expect(1, 9279, '\P{isopticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^isopticalcharacterrecognition}', "");
Expect(1, 9311, '\p{_Is Optical_characterRECOGNITION}', "");
Expect(0, 9311, '\p{^_Is Optical_characterRECOGNITION}', "");
Expect(0, 9311, '\P{_Is Optical_characterRECOGNITION}', "");
Expect(1, 9311, '\P{^_Is Optical_characterRECOGNITION}', "");
Expect(0, 9279, '\p{_Is Optical_characterRECOGNITION}', "");
Expect(1, 9279, '\p{^_Is Optical_characterRECOGNITION}', "");
Expect(1, 9279, '\P{_Is Optical_characterRECOGNITION}', "");
Expect(0, 9279, '\P{^_Is Optical_characterRECOGNITION}', "");
Error('\p{/a/-inOPTICAL-character	Recognition}');
Error('\P{/a/-inOPTICAL-character	Recognition}');
Expect(1, 9311, '\p{inopticalcharacterrecognition}', "");
Expect(0, 9311, '\p{^inopticalcharacterrecognition}', "");
Expect(0, 9311, '\P{inopticalcharacterrecognition}', "");
Expect(1, 9311, '\P{^inopticalcharacterrecognition}', "");
Expect(0, 9279, '\p{inopticalcharacterrecognition}', "");
Expect(1, 9279, '\p{^inopticalcharacterrecognition}', "");
Expect(1, 9279, '\P{inopticalcharacterrecognition}', "");
Expect(0, 9279, '\P{^inopticalcharacterrecognition}', "");
Expect(1, 9311, '\p{_In_Optical-character-Recognition}', "");
Expect(0, 9311, '\p{^_In_Optical-character-Recognition}', "");
Expect(0, 9311, '\P{_In_Optical-character-Recognition}', "");
Expect(1, 9311, '\P{^_In_Optical-character-Recognition}', "");
Expect(0, 9279, '\p{_In_Optical-character-Recognition}', "");
Expect(1, 9279, '\p{^_In_Optical-character-Recognition}', "");
Expect(1, 9279, '\P{_In_Optical-character-Recognition}', "");
Expect(0, 9279, '\P{^_In_Optical-character-Recognition}', "");
Error('\p{/a/ LIMBU}');
Error('\P{/a/ LIMBU}');
Expect(1, 6428, '\p{limbu}', "");
Expect(0, 6428, '\p{^limbu}', "");
Expect(0, 6428, '\P{limbu}', "");
Expect(1, 6428, '\P{^limbu}', "");
Expect(0, 6399, '\p{limbu}', "");
Expect(1, 6399, '\p{^limbu}', "");
Expect(1, 6399, '\P{limbu}', "");
Expect(0, 6399, '\P{^limbu}', "");
Expect(1, 6428, '\p{ 	Limbu}', "");
Expect(0, 6428, '\p{^ 	Limbu}', "");
Expect(0, 6428, '\P{ 	Limbu}', "");
Expect(1, 6428, '\P{^ 	Limbu}', "");
Expect(0, 6399, '\p{ 	Limbu}', "");
Expect(1, 6399, '\p{^ 	Limbu}', "");
Expect(1, 6399, '\P{ 	Limbu}', "");
Expect(0, 6399, '\P{^ 	Limbu}', "");
Error('\p{-	Is-LIMBU/a/}');
Error('\P{-	Is-LIMBU/a/}');
Expect(1, 6428, '\p{islimbu}', "");
Expect(0, 6428, '\p{^islimbu}', "");
Expect(0, 6428, '\P{islimbu}', "");
Expect(1, 6428, '\P{^islimbu}', "");
Expect(0, 6399, '\p{islimbu}', "");
Expect(1, 6399, '\p{^islimbu}', "");
Expect(1, 6399, '\P{islimbu}', "");
Expect(0, 6399, '\P{^islimbu}', "");
Expect(1, 6428, '\p{	is-LIMBU}', "");
Expect(0, 6428, '\p{^	is-LIMBU}', "");
Expect(0, 6428, '\P{	is-LIMBU}', "");
Expect(1, 6428, '\P{^	is-LIMBU}', "");
Expect(0, 6399, '\p{	is-LIMBU}', "");
Expect(1, 6399, '\p{^	is-LIMBU}', "");
Expect(1, 6399, '\P{	is-LIMBU}', "");
Expect(0, 6399, '\P{^	is-LIMBU}', "");
Error('\p{:=- limb}');
Error('\P{:=- limb}');
Expect(1, 6428, '\p{limb}', "");
Expect(0, 6428, '\p{^limb}', "");
Expect(0, 6428, '\P{limb}', "");
Expect(1, 6428, '\P{^limb}', "");
Expect(0, 6399, '\p{limb}', "");
Expect(1, 6399, '\p{^limb}', "");
Expect(1, 6399, '\P{limb}', "");
Expect(0, 6399, '\P{^limb}', "");
Expect(1, 6428, '\p{_Limb}', "");
Expect(0, 6428, '\p{^_Limb}', "");
Expect(0, 6428, '\P{_Limb}', "");
Expect(1, 6428, '\P{^_Limb}', "");
Expect(0, 6399, '\p{_Limb}', "");
Expect(1, 6399, '\p{^_Limb}', "");
Expect(1, 6399, '\P{_Limb}', "");
Expect(0, 6399, '\P{^_Limb}', "");
Error('\p{/a/ _Is_limb}');
Error('\P{/a/ _Is_limb}');
Expect(1, 6428, '\p{islimb}', "");
Expect(0, 6428, '\p{^islimb}', "");
Expect(0, 6428, '\P{islimb}', "");
Expect(1, 6428, '\P{^islimb}', "");
Expect(0, 6399, '\p{islimb}', "");
Expect(1, 6399, '\p{^islimb}', "");
Expect(1, 6399, '\P{islimb}', "");
Expect(0, 6399, '\P{^islimb}', "");
Expect(1, 6428, '\p{ is Limb}', "");
Expect(0, 6428, '\p{^ is Limb}', "");
Expect(0, 6428, '\P{ is Limb}', "");
Expect(1, 6428, '\P{^ is Limb}', "");
Expect(0, 6399, '\p{ is Limb}', "");
Expect(1, 6399, '\p{^ is Limb}', "");
Expect(1, 6399, '\P{ is Limb}', "");
Expect(0, 6399, '\P{^ is Limb}', "");
Error('\p{_:=Terminal Punctuation}');
Error('\P{_:=Terminal Punctuation}');
Expect(1, 33, '\p{terminalpunctuation}', "");
Expect(0, 33, '\p{^terminalpunctuation}', "");
Expect(0, 33, '\P{terminalpunctuation}', "");
Expect(1, 33, '\P{^terminalpunctuation}', "");
Expect(0, 32, '\p{terminalpunctuation}', "");
Expect(1, 32, '\p{^terminalpunctuation}', "");
Expect(1, 32, '\P{terminalpunctuation}', "");
Expect(0, 32, '\P{^terminalpunctuation}', "");
Expect(1, 33, '\p{_TERMINALPUNCTUATION}', "");
Expect(0, 33, '\p{^_TERMINALPUNCTUATION}', "");
Expect(0, 33, '\P{_TERMINALPUNCTUATION}', "");
Expect(1, 33, '\P{^_TERMINALPUNCTUATION}', "");
Expect(0, 32, '\p{_TERMINALPUNCTUATION}', "");
Expect(1, 32, '\p{^_TERMINALPUNCTUATION}', "");
Expect(1, 32, '\P{_TERMINALPUNCTUATION}', "");
Expect(0, 32, '\P{^_TERMINALPUNCTUATION}', "");
Error('\p{	-is:=Terminal_Punctuation}');
Error('\P{	-is:=Terminal_Punctuation}');
Expect(1, 33, '\p{isterminalpunctuation}', "");
Expect(0, 33, '\p{^isterminalpunctuation}', "");
Expect(0, 33, '\P{isterminalpunctuation}', "");
Expect(1, 33, '\P{^isterminalpunctuation}', "");
Expect(0, 32, '\p{isterminalpunctuation}', "");
Expect(1, 32, '\p{^isterminalpunctuation}', "");
Expect(1, 32, '\P{isterminalpunctuation}', "");
Expect(0, 32, '\P{^isterminalpunctuation}', "");
Expect(1, 33, '\p{ is-terminalPunctuation}', "");
Expect(0, 33, '\p{^ is-terminalPunctuation}', "");
Expect(0, 33, '\P{ is-terminalPunctuation}', "");
Expect(1, 33, '\P{^ is-terminalPunctuation}', "");
Expect(0, 32, '\p{ is-terminalPunctuation}', "");
Expect(1, 32, '\p{^ is-terminalPunctuation}', "");
Expect(1, 32, '\P{ is-terminalPunctuation}', "");
Expect(0, 32, '\P{^ is-terminalPunctuation}', "");
Error('\p{	/a/Term}');
Error('\P{	/a/Term}');
Expect(1, 33, '\p{term}', "");
Expect(0, 33, '\p{^term}', "");
Expect(0, 33, '\P{term}', "");
Expect(1, 33, '\P{^term}', "");
Expect(0, 32, '\p{term}', "");
Expect(1, 32, '\p{^term}', "");
Expect(1, 32, '\P{term}', "");
Expect(0, 32, '\P{^term}', "");
Expect(1, 33, '\p{_-TERM}', "");
Expect(0, 33, '\p{^_-TERM}', "");
Expect(0, 33, '\P{_-TERM}', "");
Expect(1, 33, '\P{^_-TERM}', "");
Expect(0, 32, '\p{_-TERM}', "");
Expect(1, 32, '\p{^_-TERM}', "");
Expect(1, 32, '\P{_-TERM}', "");
Expect(0, 32, '\P{^_-TERM}', "");
Error('\p{ 	is	term/a/}');
Error('\P{ 	is	term/a/}');
Expect(1, 33, '\p{isterm}', "");
Expect(0, 33, '\p{^isterm}', "");
Expect(0, 33, '\P{isterm}', "");
Expect(1, 33, '\P{^isterm}', "");
Expect(0, 32, '\p{isterm}', "");
Expect(1, 32, '\p{^isterm}', "");
Expect(1, 32, '\P{isterm}', "");
Expect(0, 32, '\P{^isterm}', "");
Expect(1, 33, '\p{ _Is_Term}', "");
Expect(0, 33, '\p{^ _Is_Term}', "");
Expect(0, 33, '\P{ _Is_Term}', "");
Expect(1, 33, '\P{^ _Is_Term}', "");
Expect(0, 32, '\p{ _Is_Term}', "");
Expect(1, 32, '\p{^ _Is_Term}', "");
Expect(1, 32, '\P{ _Is_Term}', "");
Expect(0, 32, '\P{^ _Is_Term}', "");
Error('\p{:=	-Other-uppercase}');
Error('\P{:=	-Other-uppercase}');
Expect(1, 8559, '\p{otheruppercase}', 'deprecated');
Expect(0, 8559, '\p{^otheruppercase}', 'deprecated');
Expect(0, 8559, '\P{otheruppercase}', 'deprecated');
Expect(1, 8559, '\P{^otheruppercase}', 'deprecated');
Expect(0, 8543, '\p{otheruppercase}', 'deprecated');
Expect(1, 8543, '\p{^otheruppercase}', 'deprecated');
Expect(1, 8543, '\P{otheruppercase}', 'deprecated');
Expect(0, 8543, '\P{^otheruppercase}', 'deprecated');
Expect(1, 8559, '\p{_Other	uppercase}', 'deprecated');
Expect(0, 8559, '\p{^_Other	uppercase}', 'deprecated');
Expect(0, 8559, '\P{_Other	uppercase}', 'deprecated');
Expect(1, 8559, '\P{^_Other	uppercase}', 'deprecated');
Expect(0, 8543, '\p{_Other	uppercase}', 'deprecated');
Expect(1, 8543, '\p{^_Other	uppercase}', 'deprecated');
Expect(1, 8543, '\P{_Other	uppercase}', 'deprecated');
Expect(0, 8543, '\P{^_Other	uppercase}', 'deprecated');
Error('\p{/a/_Is-Other-Uppercase}');
Error('\P{/a/_Is-Other-Uppercase}');
Expect(1, 8559, '\p{isotheruppercase}', 'deprecated');
Expect(0, 8559, '\p{^isotheruppercase}', 'deprecated');
Expect(0, 8559, '\P{isotheruppercase}', 'deprecated');
Expect(1, 8559, '\P{^isotheruppercase}', 'deprecated');
Expect(0, 8543, '\p{isotheruppercase}', 'deprecated');
Expect(1, 8543, '\p{^isotheruppercase}', 'deprecated');
Expect(1, 8543, '\P{isotheruppercase}', 'deprecated');
Expect(0, 8543, '\P{^isotheruppercase}', 'deprecated');
Expect(1, 8559, '\p{-	IsOther UPPERCASE}', 'deprecated');
Expect(0, 8559, '\p{^-	IsOther UPPERCASE}', 'deprecated');
Expect(0, 8559, '\P{-	IsOther UPPERCASE}', 'deprecated');
Expect(1, 8559, '\P{^-	IsOther UPPERCASE}', 'deprecated');
Expect(0, 8543, '\p{-	IsOther UPPERCASE}', 'deprecated');
Expect(1, 8543, '\p{^-	IsOther UPPERCASE}', 'deprecated');
Expect(1, 8543, '\P{-	IsOther UPPERCASE}', 'deprecated');
Expect(0, 8543, '\P{^-	IsOther UPPERCASE}', 'deprecated');
Error('\p{-	OUpper/a/}');
Error('\P{-	OUpper/a/}');
Expect(1, 8559, '\p{oupper}', 'deprecated');
Expect(0, 8559, '\p{^oupper}', 'deprecated');
Expect(0, 8559, '\P{oupper}', 'deprecated');
Expect(1, 8559, '\P{^oupper}', 'deprecated');
Expect(0, 8543, '\p{oupper}', 'deprecated');
Expect(1, 8543, '\p{^oupper}', 'deprecated');
Expect(1, 8543, '\P{oupper}', 'deprecated');
Expect(0, 8543, '\P{^oupper}', 'deprecated');
Expect(1, 8559, '\p{	-OUPPER}', 'deprecated');
Expect(0, 8559, '\p{^	-OUPPER}', 'deprecated');
Expect(0, 8559, '\P{	-OUPPER}', 'deprecated');
Expect(1, 8559, '\P{^	-OUPPER}', 'deprecated');
Expect(0, 8543, '\p{	-OUPPER}', 'deprecated');
Expect(1, 8543, '\p{^	-OUPPER}', 'deprecated');
Expect(1, 8543, '\P{	-OUPPER}', 'deprecated');
Expect(0, 8543, '\P{^	-OUPPER}', 'deprecated');
Error('\p{_ isOUpper/a/}');
Error('\P{_ isOUpper/a/}');
Expect(1, 8559, '\p{isoupper}', 'deprecated');
Expect(0, 8559, '\p{^isoupper}', 'deprecated');
Expect(0, 8559, '\P{isoupper}', 'deprecated');
Expect(1, 8559, '\P{^isoupper}', 'deprecated');
Expect(0, 8543, '\p{isoupper}', 'deprecated');
Expect(1, 8543, '\p{^isoupper}', 'deprecated');
Expect(1, 8543, '\P{isoupper}', 'deprecated');
Expect(0, 8543, '\P{^isoupper}', 'deprecated');
Expect(1, 8559, '\p{- is OUPPER}', 'deprecated');
Expect(0, 8559, '\p{^- is OUPPER}', 'deprecated');
Expect(0, 8559, '\P{- is OUPPER}', 'deprecated');
Expect(1, 8559, '\P{^- is OUPPER}', 'deprecated');
Expect(0, 8543, '\p{- is OUPPER}', 'deprecated');
Expect(1, 8543, '\p{^- is OUPPER}', 'deprecated');
Expect(1, 8543, '\P{- is OUPPER}', 'deprecated');
Expect(0, 8543, '\P{^- is OUPPER}', 'deprecated');
Error('\p{:=	-PosixPunct}');
Error('\P{:=	-PosixPunct}');
Expect(1, 47, '\p{posixpunct}', "");
Expect(0, 47, '\p{^posixpunct}', "");
Expect(0, 47, '\P{posixpunct}', "");
Expect(1, 47, '\P{^posixpunct}', "");
Expect(0, 32, '\p{posixpunct}', "");
Expect(1, 32, '\p{^posixpunct}', "");
Expect(1, 32, '\P{posixpunct}', "");
Expect(0, 32, '\P{^posixpunct}', "");
Expect(1, 47, '\p{_PosixPunct}', "");
Expect(0, 47, '\p{^_PosixPunct}', "");
Expect(0, 47, '\P{_PosixPunct}', "");
Expect(1, 47, '\P{^_PosixPunct}', "");
Expect(0, 32, '\p{_PosixPunct}', "");
Expect(1, 32, '\p{^_PosixPunct}', "");
Expect(1, 32, '\P{_PosixPunct}', "");
Expect(0, 32, '\P{^_PosixPunct}', "");
Error('\p{ :=Is-posixpunct}');
Error('\P{ :=Is-posixpunct}');
Expect(1, 47, '\p{isposixpunct}', "");
Expect(0, 47, '\p{^isposixpunct}', "");
Expect(0, 47, '\P{isposixpunct}', "");
Expect(1, 47, '\P{^isposixpunct}', "");
Expect(0, 32, '\p{isposixpunct}', "");
Expect(1, 32, '\p{^isposixpunct}', "");
Expect(1, 32, '\P{isposixpunct}', "");
Expect(0, 32, '\P{^isposixpunct}', "");
Expect(1, 47, '\p{	is posixpunct}', "");
Expect(0, 47, '\p{^	is posixpunct}', "");
Expect(0, 47, '\P{	is posixpunct}', "");
Expect(1, 47, '\P{^	is posixpunct}', "");
Expect(0, 32, '\p{	is posixpunct}', "");
Expect(1, 32, '\p{^	is posixpunct}', "");
Expect(1, 32, '\P{	is posixpunct}', "");
Expect(0, 32, '\P{^	is posixpunct}', "");
Error('\p{:=-_blockElements}');
Error('\P{:=-_blockElements}');
Expect(1, 9631, '\p{blockelements}', "");
Expect(0, 9631, '\p{^blockelements}', "");
Expect(0, 9631, '\P{blockelements}', "");
Expect(1, 9631, '\P{^blockelements}', "");
Expect(0, 9599, '\p{blockelements}', "");
Expect(1, 9599, '\p{^blockelements}', "");
Expect(1, 9599, '\P{blockelements}', "");
Expect(0, 9599, '\P{^blockelements}', "");
Expect(1, 9631, '\p{_ Block-ELEMENTS}', "");
Expect(0, 9631, '\p{^_ Block-ELEMENTS}', "");
Expect(0, 9631, '\P{_ Block-ELEMENTS}', "");
Expect(1, 9631, '\P{^_ Block-ELEMENTS}', "");
Expect(0, 9599, '\p{_ Block-ELEMENTS}', "");
Expect(1, 9599, '\p{^_ Block-ELEMENTS}', "");
Expect(1, 9599, '\P{_ Block-ELEMENTS}', "");
Expect(0, 9599, '\P{^_ Block-ELEMENTS}', "");
Error('\p{:=	is-Block Elements}');
Error('\P{:=	is-Block Elements}');
Expect(1, 9631, '\p{isblockelements}', "");
Expect(0, 9631, '\p{^isblockelements}', "");
Expect(0, 9631, '\P{isblockelements}', "");
Expect(1, 9631, '\P{^isblockelements}', "");
Expect(0, 9599, '\p{isblockelements}', "");
Expect(1, 9599, '\p{^isblockelements}', "");
Expect(1, 9599, '\P{isblockelements}', "");
Expect(0, 9599, '\P{^isblockelements}', "");
Expect(1, 9631, '\p{Is block ELEMENTS}', "");
Expect(0, 9631, '\p{^Is block ELEMENTS}', "");
Expect(0, 9631, '\P{Is block ELEMENTS}', "");
Expect(1, 9631, '\P{^Is block ELEMENTS}', "");
Expect(0, 9599, '\p{Is block ELEMENTS}', "");
Expect(1, 9599, '\p{^Is block ELEMENTS}', "");
Expect(1, 9599, '\P{Is block ELEMENTS}', "");
Expect(0, 9599, '\P{^Is block ELEMENTS}', "");
Error('\p{ -In BLOCK	elements:=}');
Error('\P{ -In BLOCK	elements:=}');
Expect(1, 9631, '\p{inblockelements}', "");
Expect(0, 9631, '\p{^inblockelements}', "");
Expect(0, 9631, '\P{inblockelements}', "");
Expect(1, 9631, '\P{^inblockelements}', "");
Expect(0, 9599, '\p{inblockelements}', "");
Expect(1, 9599, '\p{^inblockelements}', "");
Expect(1, 9599, '\P{inblockelements}', "");
Expect(0, 9599, '\P{^inblockelements}', "");
Expect(1, 9631, '\p{-	InBLOCK-elements}', "");
Expect(0, 9631, '\p{^-	InBLOCK-elements}', "");
Expect(0, 9631, '\P{-	InBLOCK-elements}', "");
Expect(1, 9631, '\P{^-	InBLOCK-elements}', "");
Expect(0, 9599, '\p{-	InBLOCK-elements}', "");
Expect(1, 9599, '\p{^-	InBLOCK-elements}', "");
Expect(1, 9599, '\P{-	InBLOCK-elements}', "");
Expect(0, 9599, '\P{^-	InBLOCK-elements}', "");
Error('\p{/a/	In	Kaithi}');
Error('\P{/a/	In	Kaithi}');
Expect(1, 69839, '\p{inkaithi}', "");
Expect(0, 69839, '\p{^inkaithi}', "");
Expect(0, 69839, '\P{inkaithi}', "");
Expect(1, 69839, '\P{^inkaithi}', "");
Expect(0, 69759, '\p{inkaithi}', "");
Expect(1, 69759, '\p{^inkaithi}', "");
Expect(1, 69759, '\P{inkaithi}', "");
Expect(0, 69759, '\P{^inkaithi}', "");
Expect(1, 69839, '\p{  In_kaithi}', "");
Expect(0, 69839, '\p{^  In_kaithi}', "");
Expect(0, 69839, '\P{  In_kaithi}', "");
Expect(1, 69839, '\P{^  In_kaithi}', "");
Expect(0, 69759, '\p{  In_kaithi}', "");
Expect(1, 69759, '\p{^  In_kaithi}', "");
Expect(1, 69759, '\P{  In_kaithi}', "");
Expect(0, 69759, '\P{^  In_kaithi}', "");
Error('\p{/a/_ Han}');
Error('\P{/a/_ Han}');
Expect(1, 11929, '\p{han}', "");
Expect(0, 11929, '\p{^han}', "");
Expect(0, 11929, '\P{han}', "");
Expect(1, 11929, '\P{^han}', "");
Expect(0, 11903, '\p{han}', "");
Expect(1, 11903, '\p{^han}', "");
Expect(1, 11903, '\P{han}', "");
Expect(0, 11903, '\P{^han}', "");
Expect(1, 11929, '\p{		Han}', "");
Expect(0, 11929, '\p{^		Han}', "");
Expect(0, 11929, '\P{		Han}', "");
Expect(1, 11929, '\P{^		Han}', "");
Expect(0, 11903, '\p{		Han}', "");
Expect(1, 11903, '\p{^		Han}', "");
Expect(1, 11903, '\P{		Han}', "");
Expect(0, 11903, '\P{^		Han}', "");
Error('\p{/a/ 	Is	Han}');
Error('\P{/a/ 	Is	Han}');
Expect(1, 11929, '\p{ishan}', "");
Expect(0, 11929, '\p{^ishan}', "");
Expect(0, 11929, '\P{ishan}', "");
Expect(1, 11929, '\P{^ishan}', "");
Expect(0, 11903, '\p{ishan}', "");
Expect(1, 11903, '\p{^ishan}', "");
Expect(1, 11903, '\P{ishan}', "");
Expect(0, 11903, '\P{^ishan}', "");
Expect(1, 11929, '\p{_IShan}', "");
Expect(0, 11929, '\p{^_IShan}', "");
Expect(0, 11929, '\P{_IShan}', "");
Expect(1, 11929, '\P{^_IShan}', "");
Expect(0, 11903, '\p{_IShan}', "");
Expect(1, 11903, '\p{^_IShan}', "");
Expect(1, 11903, '\P{_IShan}', "");
Expect(0, 11903, '\P{^_IShan}', "");
Error('\p{	hani:=}');
Error('\P{	hani:=}');
Expect(1, 11929, '\p{hani}', "");
Expect(0, 11929, '\p{^hani}', "");
Expect(0, 11929, '\P{hani}', "");
Expect(1, 11929, '\P{^hani}', "");
Expect(0, 11903, '\p{hani}', "");
Expect(1, 11903, '\p{^hani}', "");
Expect(1, 11903, '\P{hani}', "");
Expect(0, 11903, '\P{^hani}', "");
Expect(1, 11929, '\p{_	Hani}', "");
Expect(0, 11929, '\p{^_	Hani}', "");
Expect(0, 11929, '\P{_	Hani}', "");
Expect(1, 11929, '\P{^_	Hani}', "");
Expect(0, 11903, '\p{_	Hani}', "");
Expect(1, 11903, '\p{^_	Hani}', "");
Expect(1, 11903, '\P{_	Hani}', "");
Expect(0, 11903, '\P{^_	Hani}', "");
Error('\p{-	Is	Hani:=}');
Error('\P{-	Is	Hani:=}');
Expect(1, 11929, '\p{ishani}', "");
Expect(0, 11929, '\p{^ishani}', "");
Expect(0, 11929, '\P{ishani}', "");
Expect(1, 11929, '\P{^ishani}', "");
Expect(0, 11903, '\p{ishani}', "");
Expect(1, 11903, '\p{^ishani}', "");
Expect(1, 11903, '\P{ishani}', "");
Expect(0, 11903, '\P{^ishani}', "");
Expect(1, 11929, '\p{-is	hani}', "");
Expect(0, 11929, '\p{^-is	hani}', "");
Expect(0, 11929, '\P{-is	hani}', "");
Expect(1, 11929, '\P{^-is	hani}', "");
Expect(0, 11903, '\p{-is	hani}', "");
Expect(1, 11903, '\p{^-is	hani}', "");
Expect(1, 11903, '\P{-is	hani}', "");
Expect(0, 11903, '\P{^-is	hani}', "");
Error('\p{/a/Hanunoo}');
Error('\P{/a/Hanunoo}');
Expect(1, 5940, '\p{hanunoo}', "");
Expect(0, 5940, '\p{^hanunoo}', "");
Expect(0, 5940, '\P{hanunoo}', "");
Expect(1, 5940, '\P{^hanunoo}', "");
Expect(0, 5919, '\p{hanunoo}', "");
Expect(1, 5919, '\p{^hanunoo}', "");
Expect(1, 5919, '\P{hanunoo}', "");
Expect(0, 5919, '\P{^hanunoo}', "");
Expect(1, 5940, '\p{_	HANUNOO}', "");
Expect(0, 5940, '\p{^_	HANUNOO}', "");
Expect(0, 5940, '\P{_	HANUNOO}', "");
Expect(1, 5940, '\P{^_	HANUNOO}', "");
Expect(0, 5919, '\p{_	HANUNOO}', "");
Expect(1, 5919, '\p{^_	HANUNOO}', "");
Expect(1, 5919, '\P{_	HANUNOO}', "");
Expect(0, 5919, '\P{^_	HANUNOO}', "");
Error('\p{Is:=hanunoo}');
Error('\P{Is:=hanunoo}');
Expect(1, 5940, '\p{ishanunoo}', "");
Expect(0, 5940, '\p{^ishanunoo}', "");
Expect(0, 5940, '\P{ishanunoo}', "");
Expect(1, 5940, '\P{^ishanunoo}', "");
Expect(0, 5919, '\p{ishanunoo}', "");
Expect(1, 5919, '\p{^ishanunoo}', "");
Expect(1, 5919, '\P{ishanunoo}', "");
Expect(0, 5919, '\P{^ishanunoo}', "");
Expect(1, 5940, '\p{-is hanunoo}', "");
Expect(0, 5940, '\p{^-is hanunoo}', "");
Expect(0, 5940, '\P{-is hanunoo}', "");
Expect(1, 5940, '\P{^-is hanunoo}', "");
Expect(0, 5919, '\p{-is hanunoo}', "");
Expect(1, 5919, '\p{^-is hanunoo}', "");
Expect(1, 5919, '\P{-is hanunoo}', "");
Expect(0, 5919, '\P{^-is hanunoo}', "");
Error('\p{-	Hano/a/}');
Error('\P{-	Hano/a/}');
Expect(1, 5940, '\p{hano}', "");
Expect(0, 5940, '\p{^hano}', "");
Expect(0, 5940, '\P{hano}', "");
Expect(1, 5940, '\P{^hano}', "");
Expect(0, 5919, '\p{hano}', "");
Expect(1, 5919, '\p{^hano}', "");
Expect(1, 5919, '\P{hano}', "");
Expect(0, 5919, '\P{^hano}', "");
Expect(1, 5940, '\p{-_HANO}', "");
Expect(0, 5940, '\p{^-_HANO}', "");
Expect(0, 5940, '\P{-_HANO}', "");
Expect(1, 5940, '\P{^-_HANO}', "");
Expect(0, 5919, '\p{-_HANO}', "");
Expect(1, 5919, '\p{^-_HANO}', "");
Expect(1, 5919, '\P{-_HANO}', "");
Expect(0, 5919, '\P{^-_HANO}', "");
Error('\p{/a/Is-Hano}');
Error('\P{/a/Is-Hano}');
Expect(1, 5940, '\p{ishano}', "");
Expect(0, 5940, '\p{^ishano}', "");
Expect(0, 5940, '\P{ishano}', "");
Expect(1, 5940, '\P{^ishano}', "");
Expect(0, 5919, '\p{ishano}', "");
Expect(1, 5919, '\p{^ishano}', "");
Expect(1, 5919, '\P{ishano}', "");
Expect(0, 5919, '\P{^ishano}', "");
Expect(1, 5940, '\p{IsHano}', "");
Expect(0, 5940, '\p{^IsHano}', "");
Expect(0, 5940, '\P{IsHano}', "");
Expect(1, 5940, '\P{^IsHano}', "");
Expect(0, 5919, '\p{IsHano}', "");
Expect(1, 5919, '\p{^IsHano}', "");
Expect(1, 5919, '\P{IsHano}', "");
Expect(0, 5919, '\P{^IsHano}', "");
Error('\p{- IN_meetei/a/Mayek}');
Error('\P{- IN_meetei/a/Mayek}');
Expect(1, 44031, '\p{inmeeteimayek}', "");
Expect(0, 44031, '\p{^inmeeteimayek}', "");
Expect(0, 44031, '\P{inmeeteimayek}', "");
Expect(1, 44031, '\P{^inmeeteimayek}', "");
Expect(0, 43967, '\p{inmeeteimayek}', "");
Expect(1, 43967, '\p{^inmeeteimayek}', "");
Expect(1, 43967, '\P{inmeeteimayek}', "");
Expect(0, 43967, '\P{^inmeeteimayek}', "");
Expect(1, 44031, '\p{-_In Meetei	MAYEK}', "");
Expect(0, 44031, '\p{^-_In Meetei	MAYEK}', "");
Expect(0, 44031, '\P{-_In Meetei	MAYEK}', "");
Expect(1, 44031, '\P{^-_In Meetei	MAYEK}', "");
Expect(0, 43967, '\p{-_In Meetei	MAYEK}', "");
Expect(1, 43967, '\p{^-_In Meetei	MAYEK}', "");
Expect(1, 43967, '\P{-_In Meetei	MAYEK}', "");
Expect(0, 43967, '\P{^-_In Meetei	MAYEK}', "");
Error('\p{/a/-	VertSpace}');
Error('\P{/a/-	VertSpace}');
Expect(1, 13, '\p{vertspace}', "");
Expect(0, 13, '\p{^vertspace}', "");
Expect(0, 13, '\P{vertspace}', "");
Expect(1, 13, '\P{^vertspace}', "");
Expect(0, 9, '\p{vertspace}', "");
Expect(1, 9, '\p{^vertspace}', "");
Expect(1, 9, '\P{vertspace}', "");
Expect(0, 9, '\P{^vertspace}', "");
Expect(1, 13, '\p{VERTSPACE}', "");
Expect(0, 13, '\p{^VERTSPACE}', "");
Expect(0, 13, '\P{VERTSPACE}', "");
Expect(1, 13, '\P{^VERTSPACE}', "");
Expect(0, 9, '\p{VERTSPACE}', "");
Expect(1, 9, '\p{^VERTSPACE}', "");
Expect(1, 9, '\P{VERTSPACE}', "");
Expect(0, 9, '\P{^VERTSPACE}', "");
Error('\p{	IS vertspace/a/}');
Error('\P{	IS vertspace/a/}');
Expect(1, 13, '\p{isvertspace}', "");
Expect(0, 13, '\p{^isvertspace}', "");
Expect(0, 13, '\P{isvertspace}', "");
Expect(1, 13, '\P{^isvertspace}', "");
Expect(0, 9, '\p{isvertspace}', "");
Expect(1, 9, '\p{^isvertspace}', "");
Expect(1, 9, '\P{isvertspace}', "");
Expect(0, 9, '\P{^isvertspace}', "");
Expect(1, 13, '\p{	is	vertspace}', "");
Expect(0, 13, '\p{^	is	vertspace}', "");
Expect(0, 13, '\P{	is	vertspace}', "");
Expect(1, 13, '\P{^	is	vertspace}', "");
Expect(0, 9, '\p{	is	vertspace}', "");
Expect(1, 9, '\p{^	is	vertspace}', "");
Expect(1, 9, '\P{	is	vertspace}', "");
Expect(0, 9, '\P{^	is	vertspace}', "");
Error('\p{-Letterlike/a/Symbols}');
Error('\P{-Letterlike/a/Symbols}');
Expect(1, 8527, '\p{letterlikesymbols}', "");
Expect(0, 8527, '\p{^letterlikesymbols}', "");
Expect(0, 8527, '\P{letterlikesymbols}', "");
Expect(1, 8527, '\P{^letterlikesymbols}', "");
Expect(0, 8447, '\p{letterlikesymbols}', "");
Expect(1, 8447, '\p{^letterlikesymbols}', "");
Expect(1, 8447, '\P{letterlikesymbols}', "");
Expect(0, 8447, '\P{^letterlikesymbols}', "");
Expect(1, 8527, '\p{-letterlike_Symbols}', "");
Expect(0, 8527, '\p{^-letterlike_Symbols}', "");
Expect(0, 8527, '\P{-letterlike_Symbols}', "");
Expect(1, 8527, '\P{^-letterlike_Symbols}', "");
Expect(0, 8447, '\p{-letterlike_Symbols}', "");
Expect(1, 8447, '\p{^-letterlike_Symbols}', "");
Expect(1, 8447, '\P{-letterlike_Symbols}', "");
Expect(0, 8447, '\P{^-letterlike_Symbols}', "");
Error('\p{ Is/a/letterlike-Symbols}');
Error('\P{ Is/a/letterlike-Symbols}');
Expect(1, 8527, '\p{isletterlikesymbols}', "");
Expect(0, 8527, '\p{^isletterlikesymbols}', "");
Expect(0, 8527, '\P{isletterlikesymbols}', "");
Expect(1, 8527, '\P{^isletterlikesymbols}', "");
Expect(0, 8447, '\p{isletterlikesymbols}', "");
Expect(1, 8447, '\p{^isletterlikesymbols}', "");
Expect(1, 8447, '\P{isletterlikesymbols}', "");
Expect(0, 8447, '\P{^isletterlikesymbols}', "");
Expect(1, 8527, '\p{_	IS_Letterlike	SYMBOLS}', "");
Expect(0, 8527, '\p{^_	IS_Letterlike	SYMBOLS}', "");
Expect(0, 8527, '\P{_	IS_Letterlike	SYMBOLS}', "");
Expect(1, 8527, '\P{^_	IS_Letterlike	SYMBOLS}', "");
Expect(0, 8447, '\p{_	IS_Letterlike	SYMBOLS}', "");
Expect(1, 8447, '\p{^_	IS_Letterlike	SYMBOLS}', "");
Expect(1, 8447, '\P{_	IS_Letterlike	SYMBOLS}', "");
Expect(0, 8447, '\P{^_	IS_Letterlike	SYMBOLS}', "");
Error('\p{ :=in-Letterlikesymbols}');
Error('\P{ :=in-Letterlikesymbols}');
Expect(1, 8527, '\p{inletterlikesymbols}', "");
Expect(0, 8527, '\p{^inletterlikesymbols}', "");
Expect(0, 8527, '\P{inletterlikesymbols}', "");
Expect(1, 8527, '\P{^inletterlikesymbols}', "");
Expect(0, 8447, '\p{inletterlikesymbols}', "");
Expect(1, 8447, '\p{^inletterlikesymbols}', "");
Expect(1, 8447, '\P{inletterlikesymbols}', "");
Expect(0, 8447, '\P{^inletterlikesymbols}', "");
Expect(1, 8527, '\p{ In letterlike_symbols}', "");
Expect(0, 8527, '\p{^ In letterlike_symbols}', "");
Expect(0, 8527, '\P{ In letterlike_symbols}', "");
Expect(1, 8527, '\P{^ In letterlike_symbols}', "");
Expect(0, 8447, '\p{ In letterlike_symbols}', "");
Expect(1, 8447, '\p{^ In letterlike_symbols}', "");
Expect(1, 8447, '\P{ In letterlike_symbols}', "");
Expect(0, 8447, '\P{^ In letterlike_symbols}', "");
Error('\p{-_In/a/Mongolian}');
Error('\P{-_In/a/Mongolian}');
Expect(1, 6319, '\p{inmongolian}', "");
Expect(0, 6319, '\p{^inmongolian}', "");
Expect(0, 6319, '\P{inmongolian}', "");
Expect(1, 6319, '\P{^inmongolian}', "");
Expect(0, 6143, '\p{inmongolian}', "");
Expect(1, 6143, '\p{^inmongolian}', "");
Expect(1, 6143, '\P{inmongolian}', "");
Expect(0, 6143, '\P{^inmongolian}', "");
Expect(1, 6319, '\p{-In_mongolian}', "");
Expect(0, 6319, '\p{^-In_mongolian}', "");
Expect(0, 6319, '\P{-In_mongolian}', "");
Expect(1, 6319, '\P{^-In_mongolian}', "");
Expect(0, 6143, '\p{-In_mongolian}', "");
Expect(1, 6143, '\p{^-In_mongolian}', "");
Expect(1, 6143, '\P{-In_mongolian}', "");
Expect(0, 6143, '\P{^-In_mongolian}', "");
Error('\p{__Ideographic:=}');
Error('\P{__Ideographic:=}');
Expect(1, 12295, '\p{ideographic}', "");
Expect(0, 12295, '\p{^ideographic}', "");
Expect(0, 12295, '\P{ideographic}', "");
Expect(1, 12295, '\P{^ideographic}', "");
Expect(0, 12293, '\p{ideographic}', "");
Expect(1, 12293, '\p{^ideographic}', "");
Expect(1, 12293, '\P{ideographic}', "");
Expect(0, 12293, '\P{^ideographic}', "");
Expect(1, 12295, '\p{- Ideographic}', "");
Expect(0, 12295, '\p{^- Ideographic}', "");
Expect(0, 12295, '\P{- Ideographic}', "");
Expect(1, 12295, '\P{^- Ideographic}', "");
Expect(0, 12293, '\p{- Ideographic}', "");
Expect(1, 12293, '\p{^- Ideographic}', "");
Expect(1, 12293, '\P{- Ideographic}', "");
Expect(0, 12293, '\P{^- Ideographic}', "");
Error('\p{_-Is:=Ideographic}');
Error('\P{_-Is:=Ideographic}');
Expect(1, 12295, '\p{isideographic}', "");
Expect(0, 12295, '\p{^isideographic}', "");
Expect(0, 12295, '\P{isideographic}', "");
Expect(1, 12295, '\P{^isideographic}', "");
Expect(0, 12293, '\p{isideographic}', "");
Expect(1, 12293, '\p{^isideographic}', "");
Expect(1, 12293, '\P{isideographic}', "");
Expect(0, 12293, '\P{^isideographic}', "");
Expect(1, 12295, '\p{	 IS IDEOGRAPHIC}', "");
Expect(0, 12295, '\p{^	 IS IDEOGRAPHIC}', "");
Expect(0, 12295, '\P{	 IS IDEOGRAPHIC}', "");
Expect(1, 12295, '\P{^	 IS IDEOGRAPHIC}', "");
Expect(0, 12293, '\p{	 IS IDEOGRAPHIC}', "");
Expect(1, 12293, '\p{^	 IS IDEOGRAPHIC}', "");
Expect(1, 12293, '\P{	 IS IDEOGRAPHIC}', "");
Expect(0, 12293, '\P{^	 IS IDEOGRAPHIC}', "");
Error('\p{-/a/Ideo}');
Error('\P{-/a/Ideo}');
Expect(1, 12295, '\p{ideo}', "");
Expect(0, 12295, '\p{^ideo}', "");
Expect(0, 12295, '\P{ideo}', "");
Expect(1, 12295, '\P{^ideo}', "");
Expect(0, 12293, '\p{ideo}', "");
Expect(1, 12293, '\p{^ideo}', "");
Expect(1, 12293, '\P{ideo}', "");
Expect(0, 12293, '\P{^ideo}', "");
Expect(1, 12295, '\p{ Ideo}', "");
Expect(0, 12295, '\p{^ Ideo}', "");
Expect(0, 12295, '\P{ Ideo}', "");
Expect(1, 12295, '\P{^ Ideo}', "");
Expect(0, 12293, '\p{ Ideo}', "");
Expect(1, 12293, '\p{^ Ideo}', "");
Expect(1, 12293, '\P{ Ideo}', "");
Expect(0, 12293, '\P{^ Ideo}', "");
Error('\p{_/a/Is Ideo}');
Error('\P{_/a/Is Ideo}');
Expect(1, 12295, '\p{isideo}', "");
Expect(0, 12295, '\p{^isideo}', "");
Expect(0, 12295, '\P{isideo}', "");
Expect(1, 12295, '\P{^isideo}', "");
Expect(0, 12293, '\p{isideo}', "");
Expect(1, 12293, '\p{^isideo}', "");
Expect(1, 12293, '\P{isideo}', "");
Expect(0, 12293, '\P{^isideo}', "");
Expect(1, 12295, '\p{__IS_Ideo}', "");
Expect(0, 12295, '\p{^__IS_Ideo}', "");
Expect(0, 12295, '\P{__IS_Ideo}', "");
Expect(1, 12295, '\P{^__IS_Ideo}', "");
Expect(0, 12293, '\p{__IS_Ideo}', "");
Expect(1, 12293, '\p{^__IS_Ideo}', "");
Expect(1, 12293, '\P{__IS_Ideo}', "");
Expect(0, 12293, '\P{^__IS_Ideo}', "");
Error('\p{--VARIATION_SELECTORS:=SUPPLEMENT}');
Error('\P{--VARIATION_SELECTORS:=SUPPLEMENT}');
Expect(1, 917999, '\p{variationselectorssupplement}', "");
Expect(0, 917999, '\p{^variationselectorssupplement}', "");
Expect(0, 917999, '\P{variationselectorssupplement}', "");
Expect(1, 917999, '\P{^variationselectorssupplement}', "");
Expect(0, 917759, '\p{variationselectorssupplement}', "");
Expect(1, 917759, '\p{^variationselectorssupplement}', "");
Expect(1, 917759, '\P{variationselectorssupplement}', "");
Expect(0, 917759, '\P{^variationselectorssupplement}', "");
Expect(1, 917999, '\p{ -VARIATION-Selectors SUPPLEMENT}', "");
Expect(0, 917999, '\p{^ -VARIATION-Selectors SUPPLEMENT}', "");
Expect(0, 917999, '\P{ -VARIATION-Selectors SUPPLEMENT}', "");
Expect(1, 917999, '\P{^ -VARIATION-Selectors SUPPLEMENT}', "");
Expect(0, 917759, '\p{ -VARIATION-Selectors SUPPLEMENT}', "");
Expect(1, 917759, '\p{^ -VARIATION-Selectors SUPPLEMENT}', "");
Expect(1, 917759, '\P{ -VARIATION-Selectors SUPPLEMENT}', "");
Expect(0, 917759, '\P{^ -VARIATION-Selectors SUPPLEMENT}', "");
Error('\p{	IS-Variationselectors:=Supplement}');
Error('\P{	IS-Variationselectors:=Supplement}');
Expect(1, 917999, '\p{isvariationselectorssupplement}', "");
Expect(0, 917999, '\p{^isvariationselectorssupplement}', "");
Expect(0, 917999, '\P{isvariationselectorssupplement}', "");
Expect(1, 917999, '\P{^isvariationselectorssupplement}', "");
Expect(0, 917759, '\p{isvariationselectorssupplement}', "");
Expect(1, 917759, '\p{^isvariationselectorssupplement}', "");
Expect(1, 917759, '\P{isvariationselectorssupplement}', "");
Expect(0, 917759, '\P{^isvariationselectorssupplement}', "");
Expect(1, 917999, '\p{__IsVARIATION	selectorsSupplement}', "");
Expect(0, 917999, '\p{^__IsVARIATION	selectorsSupplement}', "");
Expect(0, 917999, '\P{__IsVARIATION	selectorsSupplement}', "");
Expect(1, 917999, '\P{^__IsVARIATION	selectorsSupplement}', "");
Expect(0, 917759, '\p{__IsVARIATION	selectorsSupplement}', "");
Expect(1, 917759, '\p{^__IsVARIATION	selectorsSupplement}', "");
Expect(1, 917759, '\P{__IsVARIATION	selectorsSupplement}', "");
Expect(0, 917759, '\P{^__IsVARIATION	selectorsSupplement}', "");
Error('\p{	/a/In Variation	Selectors-Supplement}');
Error('\P{	/a/In Variation	Selectors-Supplement}');
Expect(1, 917999, '\p{invariationselectorssupplement}', "");
Expect(0, 917999, '\p{^invariationselectorssupplement}', "");
Expect(0, 917999, '\P{invariationselectorssupplement}', "");
Expect(1, 917999, '\P{^invariationselectorssupplement}', "");
Expect(0, 917759, '\p{invariationselectorssupplement}', "");
Expect(1, 917759, '\p{^invariationselectorssupplement}', "");
Expect(1, 917759, '\P{invariationselectorssupplement}', "");
Expect(0, 917759, '\P{^invariationselectorssupplement}', "");
Expect(1, 917999, '\p{ 	IN_Variation SELECTORS_Supplement}', "");
Expect(0, 917999, '\p{^ 	IN_Variation SELECTORS_Supplement}', "");
Expect(0, 917999, '\P{ 	IN_Variation SELECTORS_Supplement}', "");
Expect(1, 917999, '\P{^ 	IN_Variation SELECTORS_Supplement}', "");
Expect(0, 917759, '\p{ 	IN_Variation SELECTORS_Supplement}', "");
Expect(1, 917759, '\p{^ 	IN_Variation SELECTORS_Supplement}', "");
Expect(1, 917759, '\P{ 	IN_Variation SELECTORS_Supplement}', "");
Expect(0, 917759, '\P{^ 	IN_Variation SELECTORS_Supplement}', "");
Error('\p{-:=In	THAANA}');
Error('\P{-:=In	THAANA}');
Expect(1, 1983, '\p{inthaana}', "");
Expect(0, 1983, '\p{^inthaana}', "");
Expect(0, 1983, '\P{inthaana}', "");
Expect(1, 1983, '\P{^inthaana}', "");
Expect(0, 1919, '\p{inthaana}', "");
Expect(1, 1919, '\p{^inthaana}', "");
Expect(1, 1919, '\P{inthaana}', "");
Expect(0, 1919, '\P{^inthaana}', "");
Expect(1, 1983, '\p{	_in	thaana}', "");
Expect(0, 1983, '\p{^	_in	thaana}', "");
Expect(0, 1983, '\P{	_in	thaana}', "");
Expect(1, 1983, '\P{^	_in	thaana}', "");
Expect(0, 1919, '\p{	_in	thaana}', "");
Expect(1, 1919, '\p{^	_in	thaana}', "");
Expect(1, 1919, '\P{	_in	thaana}', "");
Expect(0, 1919, '\P{^	_in	thaana}', "");
Error('\p{--supplemental	Arrows:=A}');
Error('\P{--supplemental	Arrows:=A}');
Expect(1, 10239, '\p{supplementalarrowsa}', "");
Expect(0, 10239, '\p{^supplementalarrowsa}', "");
Expect(0, 10239, '\P{supplementalarrowsa}', "");
Expect(1, 10239, '\P{^supplementalarrowsa}', "");
Expect(0, 10223, '\p{supplementalarrowsa}', "");
Expect(1, 10223, '\p{^supplementalarrowsa}', "");
Expect(1, 10223, '\P{supplementalarrowsa}', "");
Expect(0, 10223, '\P{^supplementalarrowsa}', "");
Expect(1, 10239, '\p{SUPPLEMENTAL ArrowsA}', "");
Expect(0, 10239, '\p{^SUPPLEMENTAL ArrowsA}', "");
Expect(0, 10239, '\P{SUPPLEMENTAL ArrowsA}', "");
Expect(1, 10239, '\P{^SUPPLEMENTAL ArrowsA}', "");
Expect(0, 10223, '\p{SUPPLEMENTAL ArrowsA}', "");
Expect(1, 10223, '\p{^SUPPLEMENTAL ArrowsA}', "");
Expect(1, 10223, '\P{SUPPLEMENTAL ArrowsA}', "");
Expect(0, 10223, '\P{^SUPPLEMENTAL ArrowsA}', "");
Error('\p{--issupplemental:=Arrows	A}');
Error('\P{--issupplemental:=Arrows	A}');
Expect(1, 10239, '\p{issupplementalarrowsa}', "");
Expect(0, 10239, '\p{^issupplementalarrowsa}', "");
Expect(0, 10239, '\P{issupplementalarrowsa}', "");
Expect(1, 10239, '\P{^issupplementalarrowsa}', "");
Expect(0, 10223, '\p{issupplementalarrowsa}', "");
Expect(1, 10223, '\p{^issupplementalarrowsa}', "");
Expect(1, 10223, '\P{issupplementalarrowsa}', "");
Expect(0, 10223, '\P{^issupplementalarrowsa}', "");
Expect(1, 10239, '\p{__Is_Supplemental	Arrows_A}', "");
Expect(0, 10239, '\p{^__Is_Supplemental	Arrows_A}', "");
Expect(0, 10239, '\P{__Is_Supplemental	Arrows_A}', "");
Expect(1, 10239, '\P{^__Is_Supplemental	Arrows_A}', "");
Expect(0, 10223, '\p{__Is_Supplemental	Arrows_A}', "");
Expect(1, 10223, '\p{^__Is_Supplemental	Arrows_A}', "");
Expect(1, 10223, '\P{__Is_Supplemental	Arrows_A}', "");
Expect(0, 10223, '\P{^__Is_Supplemental	Arrows_A}', "");
Error('\p{	 Insupplemental/a/ARROWSA}');
Error('\P{	 Insupplemental/a/ARROWSA}');
Expect(1, 10239, '\p{insupplementalarrowsa}', "");
Expect(0, 10239, '\p{^insupplementalarrowsa}', "");
Expect(0, 10239, '\P{insupplementalarrowsa}', "");
Expect(1, 10239, '\P{^insupplementalarrowsa}', "");
Expect(0, 10223, '\p{insupplementalarrowsa}', "");
Expect(1, 10223, '\p{^insupplementalarrowsa}', "");
Expect(1, 10223, '\P{insupplementalarrowsa}', "");
Expect(0, 10223, '\P{^insupplementalarrowsa}', "");
Expect(1, 10239, '\p{__In	supplemental_ARROWS-A}', "");
Expect(0, 10239, '\p{^__In	supplemental_ARROWS-A}', "");
Expect(0, 10239, '\P{__In	supplemental_ARROWS-A}', "");
Expect(1, 10239, '\P{^__In	supplemental_ARROWS-A}', "");
Expect(0, 10223, '\p{__In	supplemental_ARROWS-A}', "");
Expect(1, 10223, '\p{^__In	supplemental_ARROWS-A}', "");
Expect(1, 10223, '\P{__In	supplemental_ARROWS-A}', "");
Expect(0, 10223, '\P{^__In	supplemental_ARROWS-A}', "");
Error('\p{_ CHANGES	WHEN/a/uppercased}');
Error('\P{_ CHANGES	WHEN/a/uppercased}');
Expect(1, 122, '\p{changeswhenuppercased}', "");
Expect(0, 122, '\p{^changeswhenuppercased}', "");
Expect(0, 122, '\P{changeswhenuppercased}', "");
Expect(1, 122, '\P{^changeswhenuppercased}', "");
Expect(0, 96, '\p{changeswhenuppercased}', "");
Expect(1, 96, '\p{^changeswhenuppercased}', "");
Expect(1, 96, '\P{changeswhenuppercased}', "");
Expect(0, 96, '\P{^changeswhenuppercased}', "");
Expect(1, 122, '\p{ _Changeswhen-Uppercased}', "");
Expect(0, 122, '\p{^ _Changeswhen-Uppercased}', "");
Expect(0, 122, '\P{ _Changeswhen-Uppercased}', "");
Expect(1, 122, '\P{^ _Changeswhen-Uppercased}', "");
Expect(0, 96, '\p{ _Changeswhen-Uppercased}', "");
Expect(1, 96, '\p{^ _Changeswhen-Uppercased}', "");
Expect(1, 96, '\P{ _Changeswhen-Uppercased}', "");
Expect(0, 96, '\P{^ _Changeswhen-Uppercased}', "");
Error('\p{/a/		is changes	WHEN-UPPERCASED}');
Error('\P{/a/		is changes	WHEN-UPPERCASED}');
Expect(1, 122, '\p{ischangeswhenuppercased}', "");
Expect(0, 122, '\p{^ischangeswhenuppercased}', "");
Expect(0, 122, '\P{ischangeswhenuppercased}', "");
Expect(1, 122, '\P{^ischangeswhenuppercased}', "");
Expect(0, 96, '\p{ischangeswhenuppercased}', "");
Expect(1, 96, '\p{^ischangeswhenuppercased}', "");
Expect(1, 96, '\P{ischangeswhenuppercased}', "");
Expect(0, 96, '\P{^ischangeswhenuppercased}', "");
Expect(1, 122, '\p{--IS-CHANGES_when Uppercased}', "");
Expect(0, 122, '\p{^--IS-CHANGES_when Uppercased}', "");
Expect(0, 122, '\P{--IS-CHANGES_when Uppercased}', "");
Expect(1, 122, '\P{^--IS-CHANGES_when Uppercased}', "");
Expect(0, 96, '\p{--IS-CHANGES_when Uppercased}', "");
Expect(1, 96, '\p{^--IS-CHANGES_when Uppercased}', "");
Expect(1, 96, '\P{--IS-CHANGES_when Uppercased}', "");
Expect(0, 96, '\P{^--IS-CHANGES_when Uppercased}', "");
Error('\p{CWU/a/}');
Error('\P{CWU/a/}');
Expect(1, 122, '\p{cwu}', "");
Expect(0, 122, '\p{^cwu}', "");
Expect(0, 122, '\P{cwu}', "");
Expect(1, 122, '\P{^cwu}', "");
Expect(0, 96, '\p{cwu}', "");
Expect(1, 96, '\p{^cwu}', "");
Expect(1, 96, '\P{cwu}', "");
Expect(0, 96, '\P{^cwu}', "");
Expect(1, 122, '\p{ 	cwu}', "");
Expect(0, 122, '\p{^ 	cwu}', "");
Expect(0, 122, '\P{ 	cwu}', "");
Expect(1, 122, '\P{^ 	cwu}', "");
Expect(0, 96, '\p{ 	cwu}', "");
Expect(1, 96, '\p{^ 	cwu}', "");
Expect(1, 96, '\P{ 	cwu}', "");
Expect(0, 96, '\P{^ 	cwu}', "");
Error('\p{_Is	CWU/a/}');
Error('\P{_Is	CWU/a/}');
Expect(1, 122, '\p{iscwu}', "");
Expect(0, 122, '\p{^iscwu}', "");
Expect(0, 122, '\P{iscwu}', "");
Expect(1, 122, '\P{^iscwu}', "");
Expect(0, 96, '\p{iscwu}', "");
Expect(1, 96, '\p{^iscwu}', "");
Expect(1, 96, '\P{iscwu}', "");
Expect(0, 96, '\P{^iscwu}', "");
Expect(1, 122, '\p{--IS	cwu}', "");
Expect(0, 122, '\p{^--IS	cwu}', "");
Expect(0, 122, '\P{--IS	cwu}', "");
Expect(1, 122, '\P{^--IS	cwu}', "");
Expect(0, 96, '\p{--IS	cwu}', "");
Expect(1, 96, '\p{^--IS	cwu}', "");
Expect(1, 96, '\P{--IS	cwu}', "");
Expect(0, 96, '\P{^--IS	cwu}', "");
Error('\p{	:=IN	Syriac}');
Error('\P{	:=IN	Syriac}');
Expect(1, 1871, '\p{insyriac}', "");
Expect(0, 1871, '\p{^insyriac}', "");
Expect(0, 1871, '\P{insyriac}', "");
Expect(1, 1871, '\P{^insyriac}', "");
Expect(0, 1791, '\p{insyriac}', "");
Expect(1, 1791, '\p{^insyriac}', "");
Expect(1, 1791, '\P{insyriac}', "");
Expect(0, 1791, '\P{^insyriac}', "");
Expect(1, 1871, '\p{_In Syriac}', "");
Expect(0, 1871, '\p{^_In Syriac}', "");
Expect(0, 1871, '\P{_In Syriac}', "");
Expect(1, 1871, '\P{^_In Syriac}', "");
Expect(0, 1791, '\p{_In Syriac}', "");
Expect(1, 1791, '\p{^_In Syriac}', "");
Expect(1, 1791, '\P{_In Syriac}', "");
Expect(0, 1791, '\P{^_In Syriac}', "");
Error('\p{:=_-EthiopicExtended}');
Error('\P{:=_-EthiopicExtended}');
Expect(1, 11743, '\p{ethiopicextended}', "");
Expect(0, 11743, '\p{^ethiopicextended}', "");
Expect(0, 11743, '\P{ethiopicextended}', "");
Expect(1, 11743, '\P{^ethiopicextended}', "");
Expect(0, 11647, '\p{ethiopicextended}', "");
Expect(1, 11647, '\p{^ethiopicextended}', "");
Expect(1, 11647, '\P{ethiopicextended}', "");
Expect(0, 11647, '\P{^ethiopicextended}', "");
Expect(1, 11743, '\p{-Ethiopic	EXTENDED}', "");
Expect(0, 11743, '\p{^-Ethiopic	EXTENDED}', "");
Expect(0, 11743, '\P{-Ethiopic	EXTENDED}', "");
Expect(1, 11743, '\P{^-Ethiopic	EXTENDED}', "");
Expect(0, 11647, '\p{-Ethiopic	EXTENDED}', "");
Expect(1, 11647, '\p{^-Ethiopic	EXTENDED}', "");
Expect(1, 11647, '\P{-Ethiopic	EXTENDED}', "");
Expect(0, 11647, '\P{^-Ethiopic	EXTENDED}', "");
Error('\p{	Is Ethiopic:=EXTENDED}');
Error('\P{	Is Ethiopic:=EXTENDED}');
Expect(1, 11743, '\p{isethiopicextended}', "");
Expect(0, 11743, '\p{^isethiopicextended}', "");
Expect(0, 11743, '\P{isethiopicextended}', "");
Expect(1, 11743, '\P{^isethiopicextended}', "");
Expect(0, 11647, '\p{isethiopicextended}', "");
Expect(1, 11647, '\p{^isethiopicextended}', "");
Expect(1, 11647, '\P{isethiopicextended}', "");
Expect(0, 11647, '\P{^isethiopicextended}', "");
Expect(1, 11743, '\p{_ Is-ethiopic_Extended}', "");
Expect(0, 11743, '\p{^_ Is-ethiopic_Extended}', "");
Expect(0, 11743, '\P{_ Is-ethiopic_Extended}', "");
Expect(1, 11743, '\P{^_ Is-ethiopic_Extended}', "");
Expect(0, 11647, '\p{_ Is-ethiopic_Extended}', "");
Expect(1, 11647, '\p{^_ Is-ethiopic_Extended}', "");
Expect(1, 11647, '\P{_ Is-ethiopic_Extended}', "");
Expect(0, 11647, '\P{^_ Is-ethiopic_Extended}', "");
Error('\p{ :=InEthiopic Extended}');
Error('\P{ :=InEthiopic Extended}');
Expect(1, 11743, '\p{inethiopicextended}', "");
Expect(0, 11743, '\p{^inethiopicextended}', "");
Expect(0, 11743, '\P{inethiopicextended}', "");
Expect(1, 11743, '\P{^inethiopicextended}', "");
Expect(0, 11647, '\p{inethiopicextended}', "");
Expect(1, 11647, '\p{^inethiopicextended}', "");
Expect(1, 11647, '\P{inethiopicextended}', "");
Expect(0, 11647, '\P{^inethiopicextended}', "");
Expect(1, 11743, '\p{	In	ETHIOPIC EXTENDED}', "");
Expect(0, 11743, '\p{^	In	ETHIOPIC EXTENDED}', "");
Expect(0, 11743, '\P{	In	ETHIOPIC EXTENDED}', "");
Expect(1, 11743, '\P{^	In	ETHIOPIC EXTENDED}', "");
Expect(0, 11647, '\p{	In	ETHIOPIC EXTENDED}', "");
Expect(1, 11647, '\p{^	In	ETHIOPIC EXTENDED}', "");
Expect(1, 11647, '\P{	In	ETHIOPIC EXTENDED}', "");
Expect(0, 11647, '\P{^	In	ETHIOPIC EXTENDED}', "");
Error('\p{--phoenician/a/}');
Error('\P{--phoenician/a/}');
Expect(1, 67867, '\p{phoenician}', "");
Expect(0, 67867, '\p{^phoenician}', "");
Expect(0, 67867, '\P{phoenician}', "");
Expect(1, 67867, '\P{^phoenician}', "");
Expect(0, 67839, '\p{phoenician}', "");
Expect(1, 67839, '\p{^phoenician}', "");
Expect(1, 67839, '\P{phoenician}', "");
Expect(0, 67839, '\P{^phoenician}', "");
Expect(1, 67867, '\p{_Phoenician}', "");
Expect(0, 67867, '\p{^_Phoenician}', "");
Expect(0, 67867, '\P{_Phoenician}', "");
Expect(1, 67867, '\P{^_Phoenician}', "");
Expect(0, 67839, '\p{_Phoenician}', "");
Expect(1, 67839, '\p{^_Phoenician}', "");
Expect(1, 67839, '\P{_Phoenician}', "");
Expect(0, 67839, '\P{^_Phoenician}', "");
Error('\p{--IS_Phoenician:=}');
Error('\P{--IS_Phoenician:=}');
Expect(1, 67867, '\p{isphoenician}', "");
Expect(0, 67867, '\p{^isphoenician}', "");
Expect(0, 67867, '\P{isphoenician}', "");
Expect(1, 67867, '\P{^isphoenician}', "");
Expect(0, 67839, '\p{isphoenician}', "");
Expect(1, 67839, '\p{^isphoenician}', "");
Expect(1, 67839, '\P{isphoenician}', "");
Expect(0, 67839, '\P{^isphoenician}', "");
Expect(1, 67867, '\p{- Isphoenician}', "");
Expect(0, 67867, '\p{^- Isphoenician}', "");
Expect(0, 67867, '\P{- Isphoenician}', "");
Expect(1, 67867, '\P{^- Isphoenician}', "");
Expect(0, 67839, '\p{- Isphoenician}', "");
Expect(1, 67839, '\p{^- Isphoenician}', "");
Expect(1, 67839, '\P{- Isphoenician}', "");
Expect(0, 67839, '\P{^- Isphoenician}', "");
Error('\p{/a/_Phnx}');
Error('\P{/a/_Phnx}');
Expect(1, 67867, '\p{phnx}', "");
Expect(0, 67867, '\p{^phnx}', "");
Expect(0, 67867, '\P{phnx}', "");
Expect(1, 67867, '\P{^phnx}', "");
Expect(0, 67839, '\p{phnx}', "");
Expect(1, 67839, '\p{^phnx}', "");
Expect(1, 67839, '\P{phnx}', "");
Expect(0, 67839, '\P{^phnx}', "");
Expect(1, 67867, '\p{  Phnx}', "");
Expect(0, 67867, '\p{^  Phnx}', "");
Expect(0, 67867, '\P{  Phnx}', "");
Expect(1, 67867, '\P{^  Phnx}', "");
Expect(0, 67839, '\p{  Phnx}', "");
Expect(1, 67839, '\p{^  Phnx}', "");
Expect(1, 67839, '\P{  Phnx}', "");
Expect(0, 67839, '\P{^  Phnx}', "");
Error('\p{/a/IS phnx}');
Error('\P{/a/IS phnx}');
Expect(1, 67867, '\p{isphnx}', "");
Expect(0, 67867, '\p{^isphnx}', "");
Expect(0, 67867, '\P{isphnx}', "");
Expect(1, 67867, '\P{^isphnx}', "");
Expect(0, 67839, '\p{isphnx}', "");
Expect(1, 67839, '\p{^isphnx}', "");
Expect(1, 67839, '\P{isphnx}', "");
Expect(0, 67839, '\P{^isphnx}', "");
Expect(1, 67867, '\p{_-isPhnx}', "");
Expect(0, 67867, '\p{^_-isPhnx}', "");
Expect(0, 67867, '\P{_-isPhnx}', "");
Expect(1, 67867, '\P{^_-isPhnx}', "");
Expect(0, 67839, '\p{_-isPhnx}', "");
Expect(1, 67839, '\p{^_-isPhnx}', "");
Expect(1, 67839, '\P{_-isPhnx}', "");
Expect(0, 67839, '\P{^_-isPhnx}', "");
Error('\p{_	myanmarExtended:=A}');
Error('\P{_	myanmarExtended:=A}');
Expect(1, 43647, '\p{myanmarextendeda}', "");
Expect(0, 43647, '\p{^myanmarextendeda}', "");
Expect(0, 43647, '\P{myanmarextendeda}', "");
Expect(1, 43647, '\P{^myanmarextendeda}', "");
Expect(0, 43615, '\p{myanmarextendeda}', "");
Expect(1, 43615, '\p{^myanmarextendeda}', "");
Expect(1, 43615, '\P{myanmarextendeda}', "");
Expect(0, 43615, '\P{^myanmarextendeda}', "");
Expect(1, 43647, '\p{  Myanmar_Extended_a}', "");
Expect(0, 43647, '\p{^  Myanmar_Extended_a}', "");
Expect(0, 43647, '\P{  Myanmar_Extended_a}', "");
Expect(1, 43647, '\P{^  Myanmar_Extended_a}', "");
Expect(0, 43615, '\p{  Myanmar_Extended_a}', "");
Expect(1, 43615, '\p{^  Myanmar_Extended_a}', "");
Expect(1, 43615, '\P{  Myanmar_Extended_a}', "");
Expect(0, 43615, '\P{^  Myanmar_Extended_a}', "");
Error('\p{- Is	Myanmar:=EXTENDED	A}');
Error('\P{- Is	Myanmar:=EXTENDED	A}');
Expect(1, 43647, '\p{ismyanmarextendeda}', "");
Expect(0, 43647, '\p{^ismyanmarextendeda}', "");
Expect(0, 43647, '\P{ismyanmarextendeda}', "");
Expect(1, 43647, '\P{^ismyanmarextendeda}', "");
Expect(0, 43615, '\p{ismyanmarextendeda}', "");
Expect(1, 43615, '\p{^ismyanmarextendeda}', "");
Expect(1, 43615, '\P{ismyanmarextendeda}', "");
Expect(0, 43615, '\P{^ismyanmarextendeda}', "");
Expect(1, 43647, '\p{ _Is	MyanmarExtended-A}', "");
Expect(0, 43647, '\p{^ _Is	MyanmarExtended-A}', "");
Expect(0, 43647, '\P{ _Is	MyanmarExtended-A}', "");
Expect(1, 43647, '\P{^ _Is	MyanmarExtended-A}', "");
Expect(0, 43615, '\p{ _Is	MyanmarExtended-A}', "");
Expect(1, 43615, '\p{^ _Is	MyanmarExtended-A}', "");
Expect(1, 43615, '\P{ _Is	MyanmarExtended-A}', "");
Expect(0, 43615, '\P{^ _Is	MyanmarExtended-A}', "");
Error('\p{-	In	Myanmar_extended_A/a/}');
Error('\P{-	In	Myanmar_extended_A/a/}');
Expect(1, 43647, '\p{inmyanmarextendeda}', "");
Expect(0, 43647, '\p{^inmyanmarextendeda}', "");
Expect(0, 43647, '\P{inmyanmarextendeda}', "");
Expect(1, 43647, '\P{^inmyanmarextendeda}', "");
Expect(0, 43615, '\p{inmyanmarextendeda}', "");
Expect(1, 43615, '\p{^inmyanmarextendeda}', "");
Expect(1, 43615, '\P{inmyanmarextendeda}', "");
Expect(0, 43615, '\P{^inmyanmarextendeda}', "");
Expect(1, 43647, '\p{  In Myanmar extended-A}', "");
Expect(0, 43647, '\p{^  In Myanmar extended-A}', "");
Expect(0, 43647, '\P{  In Myanmar extended-A}', "");
Expect(1, 43647, '\P{^  In Myanmar extended-A}', "");
Expect(0, 43615, '\p{  In Myanmar extended-A}', "");
Expect(1, 43615, '\p{^  In Myanmar extended-A}', "");
Expect(1, 43615, '\P{  In Myanmar extended-A}', "");
Expect(0, 43615, '\P{^  In Myanmar extended-A}', "");
Error('\p{-/a/RUNIC}');
Error('\P{-/a/RUNIC}');
Expect(1, 5866, '\p{runic}', "");
Expect(0, 5866, '\p{^runic}', "");
Expect(0, 5866, '\P{runic}', "");
Expect(1, 5866, '\P{^runic}', "");
Expect(0, 5791, '\p{runic}', "");
Expect(1, 5791, '\p{^runic}', "");
Expect(1, 5791, '\P{runic}', "");
Expect(0, 5791, '\P{^runic}', "");
Expect(1, 5866, '\p{ runic}', "");
Expect(0, 5866, '\p{^ runic}', "");
Expect(0, 5866, '\P{ runic}', "");
Expect(1, 5866, '\P{^ runic}', "");
Expect(0, 5791, '\p{ runic}', "");
Expect(1, 5791, '\p{^ runic}', "");
Expect(1, 5791, '\P{ runic}', "");
Expect(0, 5791, '\P{^ runic}', "");
Error('\p{-/a/Is	Runic}');
Error('\P{-/a/Is	Runic}');
Expect(1, 5866, '\p{isrunic}', "");
Expect(0, 5866, '\p{^isrunic}', "");
Expect(0, 5866, '\P{isrunic}', "");
Expect(1, 5866, '\P{^isrunic}', "");
Expect(0, 5791, '\p{isrunic}', "");
Expect(1, 5791, '\p{^isrunic}', "");
Expect(1, 5791, '\P{isrunic}', "");
Expect(0, 5791, '\P{^isrunic}', "");
Expect(1, 5866, '\p{_-Is Runic}', "");
Expect(0, 5866, '\p{^_-Is Runic}', "");
Expect(0, 5866, '\P{_-Is Runic}', "");
Expect(1, 5866, '\P{^_-Is Runic}', "");
Expect(0, 5791, '\p{_-Is Runic}', "");
Expect(1, 5791, '\p{^_-Is Runic}', "");
Expect(1, 5791, '\P{_-Is Runic}', "");
Expect(0, 5791, '\P{^_-Is Runic}', "");
Error('\p{:=__Runr}');
Error('\P{:=__Runr}');
Expect(1, 5866, '\p{runr}', "");
Expect(0, 5866, '\p{^runr}', "");
Expect(0, 5866, '\P{runr}', "");
Expect(1, 5866, '\P{^runr}', "");
Expect(0, 5791, '\p{runr}', "");
Expect(1, 5791, '\p{^runr}', "");
Expect(1, 5791, '\P{runr}', "");
Expect(0, 5791, '\P{^runr}', "");
Expect(1, 5866, '\p{-Runr}', "");
Expect(0, 5866, '\p{^-Runr}', "");
Expect(0, 5866, '\P{-Runr}', "");
Expect(1, 5866, '\P{^-Runr}', "");
Expect(0, 5791, '\p{-Runr}', "");
Expect(1, 5791, '\p{^-Runr}', "");
Expect(1, 5791, '\P{-Runr}', "");
Expect(0, 5791, '\P{^-Runr}', "");
Error('\p{_:=is-Runr}');
Error('\P{_:=is-Runr}');
Expect(1, 5866, '\p{isrunr}', "");
Expect(0, 5866, '\p{^isrunr}', "");
Expect(0, 5866, '\P{isrunr}', "");
Expect(1, 5866, '\P{^isrunr}', "");
Expect(0, 5791, '\p{isrunr}', "");
Expect(1, 5791, '\p{^isrunr}', "");
Expect(1, 5791, '\P{isrunr}', "");
Expect(0, 5791, '\P{^isrunr}', "");
Expect(1, 5866, '\p{ -IsRUNR}', "");
Expect(0, 5866, '\p{^ -IsRUNR}', "");
Expect(0, 5866, '\P{ -IsRUNR}', "");
Expect(1, 5866, '\P{^ -IsRUNR}', "");
Expect(0, 5791, '\p{ -IsRUNR}', "");
Expect(1, 5791, '\p{^ -IsRUNR}', "");
Expect(1, 5791, '\P{ -IsRUNR}', "");
Expect(0, 5791, '\P{^ -IsRUNR}', "");
Error('\p{_-High/a/PRIVATE_useSurrogates}');
Error('\P{_-High/a/PRIVATE_useSurrogates}');
Expect(0, 1, '\p{highprivateusesurrogates}', "");
Expect(1, 1, '\p{^highprivateusesurrogates}', "");
Expect(1, 1, '\P{highprivateusesurrogates}', "");
Expect(0, 1, '\P{^highprivateusesurrogates}', "");
Expect(0, 1, '\p{ HIGHPrivateUseSurrogates}', "");
Expect(1, 1, '\p{^ HIGHPrivateUseSurrogates}', "");
Expect(1, 1, '\P{ HIGHPrivateUseSurrogates}', "");
Expect(0, 1, '\P{^ HIGHPrivateUseSurrogates}', "");
Error('\p{	Is	highPRIVATE USE_surrogates:=}');
Error('\P{	Is	highPRIVATE USE_surrogates:=}');
Expect(0, 1, '\p{ishighprivateusesurrogates}', "");
Expect(1, 1, '\p{^ishighprivateusesurrogates}', "");
Expect(1, 1, '\P{ishighprivateusesurrogates}', "");
Expect(0, 1, '\P{^ishighprivateusesurrogates}', "");
Expect(0, 1, '\p{	Ishigh_Private use	Surrogates}', "");
Expect(1, 1, '\p{^	Ishigh_Private use	Surrogates}', "");
Expect(1, 1, '\P{	Ishigh_Private use	Surrogates}', "");
Expect(0, 1, '\P{^	Ishigh_Private use	Surrogates}', "");
Error('\p{:= _InHigh Private-use	Surrogates}');
Error('\P{:= _InHigh Private-use	Surrogates}');
Expect(0, 1, '\p{inhighprivateusesurrogates}', "");
Expect(1, 1, '\p{^inhighprivateusesurrogates}', "");
Expect(1, 1, '\P{inhighprivateusesurrogates}', "");
Expect(0, 1, '\P{^inhighprivateusesurrogates}', "");
Expect(0, 1, '\p{	 in_HIGHprivate-use_surrogates}', "");
Expect(1, 1, '\p{^	 in_HIGHprivate-use_surrogates}', "");
Expect(1, 1, '\P{	 in_HIGHprivate-use_surrogates}', "");
Expect(0, 1, '\P{^	 in_HIGHprivate-use_surrogates}', "");
Error('\p{		Kayah	Li:=}');
Error('\P{		Kayah	Li:=}');
Expect(1, 43311, '\p{kayahli}', "");
Expect(0, 43311, '\p{^kayahli}', "");
Expect(0, 43311, '\P{kayahli}', "");
Expect(1, 43311, '\P{^kayahli}', "");
Expect(0, 43263, '\p{kayahli}', "");
Expect(1, 43263, '\p{^kayahli}', "");
Expect(1, 43263, '\P{kayahli}', "");
Expect(0, 43263, '\P{^kayahli}', "");
Expect(1, 43311, '\p{	KayahLI}', "");
Expect(0, 43311, '\p{^	KayahLI}', "");
Expect(0, 43311, '\P{	KayahLI}', "");
Expect(1, 43311, '\P{^	KayahLI}', "");
Expect(0, 43263, '\p{	KayahLI}', "");
Expect(1, 43263, '\p{^	KayahLI}', "");
Expect(1, 43263, '\P{	KayahLI}', "");
Expect(0, 43263, '\P{^	KayahLI}', "");
Error('\p{:=	 Is	Kayah_Li}');
Error('\P{:=	 Is	Kayah_Li}');
Expect(1, 43311, '\p{iskayahli}', "");
Expect(0, 43311, '\p{^iskayahli}', "");
Expect(0, 43311, '\P{iskayahli}', "");
Expect(1, 43311, '\P{^iskayahli}', "");
Expect(0, 43263, '\p{iskayahli}', "");
Expect(1, 43263, '\p{^iskayahli}', "");
Expect(1, 43263, '\P{iskayahli}', "");
Expect(0, 43263, '\P{^iskayahli}', "");
Expect(1, 43311, '\p{ 	is	Kayah	li}', "");
Expect(0, 43311, '\p{^ 	is	Kayah	li}', "");
Expect(0, 43311, '\P{ 	is	Kayah	li}', "");
Expect(1, 43311, '\P{^ 	is	Kayah	li}', "");
Expect(0, 43263, '\p{ 	is	Kayah	li}', "");
Expect(1, 43263, '\p{^ 	is	Kayah	li}', "");
Expect(1, 43263, '\P{ 	is	Kayah	li}', "");
Expect(0, 43263, '\P{^ 	is	Kayah	li}', "");
Error('\p{-_KALI:=}');
Error('\P{-_KALI:=}');
Expect(1, 43311, '\p{kali}', "");
Expect(0, 43311, '\p{^kali}', "");
Expect(0, 43311, '\P{kali}', "");
Expect(1, 43311, '\P{^kali}', "");
Expect(0, 43263, '\p{kali}', "");
Expect(1, 43263, '\p{^kali}', "");
Expect(1, 43263, '\P{kali}', "");
Expect(0, 43263, '\P{^kali}', "");
Expect(1, 43311, '\p{ 	kali}', "");
Expect(0, 43311, '\p{^ 	kali}', "");
Expect(0, 43311, '\P{ 	kali}', "");
Expect(1, 43311, '\P{^ 	kali}', "");
Expect(0, 43263, '\p{ 	kali}', "");
Expect(1, 43263, '\p{^ 	kali}', "");
Expect(1, 43263, '\P{ 	kali}', "");
Expect(0, 43263, '\P{^ 	kali}', "");
Error('\p{ Is/a/kali}');
Error('\P{ Is/a/kali}');
Expect(1, 43311, '\p{iskali}', "");
Expect(0, 43311, '\p{^iskali}', "");
Expect(0, 43311, '\P{iskali}', "");
Expect(1, 43311, '\P{^iskali}', "");
Expect(0, 43263, '\p{iskali}', "");
Expect(1, 43263, '\p{^iskali}', "");
Expect(1, 43263, '\P{iskali}', "");
Expect(0, 43263, '\P{^iskali}', "");
Expect(1, 43311, '\p{is_Kali}', "");
Expect(0, 43311, '\p{^is_Kali}', "");
Expect(0, 43311, '\P{is_Kali}', "");
Expect(1, 43311, '\P{^is_Kali}', "");
Expect(0, 43263, '\p{is_Kali}', "");
Expect(1, 43263, '\p{^is_Kali}', "");
Expect(1, 43263, '\P{is_Kali}', "");
Expect(0, 43263, '\P{^is_Kali}', "");
Error('\p{ PosixGraph:=}');
Error('\P{ PosixGraph:=}');
Expect(1, 126, '\p{posixgraph}', "");
Expect(0, 126, '\p{^posixgraph}', "");
Expect(0, 126, '\P{posixgraph}', "");
Expect(1, 126, '\P{^posixgraph}', "");
Expect(0, 32, '\p{posixgraph}', "");
Expect(1, 32, '\p{^posixgraph}', "");
Expect(1, 32, '\P{posixgraph}', "");
Expect(0, 32, '\P{^posixgraph}', "");
Expect(1, 126, '\p{	PosixGraph}', "");
Expect(0, 126, '\p{^	PosixGraph}', "");
Expect(0, 126, '\P{	PosixGraph}', "");
Expect(1, 126, '\P{^	PosixGraph}', "");
Expect(0, 32, '\p{	PosixGraph}', "");
Expect(1, 32, '\p{^	PosixGraph}', "");
Expect(1, 32, '\P{	PosixGraph}', "");
Expect(0, 32, '\P{^	PosixGraph}', "");
Error('\p{/a/ is-posixgraph}');
Error('\P{/a/ is-posixgraph}');
Expect(1, 126, '\p{isposixgraph}', "");
Expect(0, 126, '\p{^isposixgraph}', "");
Expect(0, 126, '\P{isposixgraph}', "");
Expect(1, 126, '\P{^isposixgraph}', "");
Expect(0, 32, '\p{isposixgraph}', "");
Expect(1, 32, '\p{^isposixgraph}', "");
Expect(1, 32, '\P{isposixgraph}', "");
Expect(0, 32, '\P{^isposixgraph}', "");
Expect(1, 126, '\p{_IS PosixGraph}', "");
Expect(0, 126, '\p{^_IS PosixGraph}', "");
Expect(0, 126, '\P{_IS PosixGraph}', "");
Expect(1, 126, '\P{^_IS PosixGraph}', "");
Expect(0, 32, '\p{_IS PosixGraph}', "");
Expect(1, 32, '\p{^_IS PosixGraph}', "");
Expect(1, 32, '\P{_IS PosixGraph}', "");
Expect(0, 32, '\P{^_IS PosixGraph}', "");
Error('\p{ IN/a/OLD	TURKIC}');
Error('\P{ IN/a/OLD	TURKIC}');
Expect(1, 68687, '\p{inoldturkic}', "");
Expect(0, 68687, '\p{^inoldturkic}', "");
Expect(0, 68687, '\P{inoldturkic}', "");
Expect(1, 68687, '\P{^inoldturkic}', "");
Expect(0, 68607, '\p{inoldturkic}', "");
Expect(1, 68607, '\p{^inoldturkic}', "");
Expect(1, 68607, '\P{inoldturkic}', "");
Expect(0, 68607, '\P{^inoldturkic}', "");
Expect(1, 68687, '\p{ _in_Old	TURKIC}', "");
Expect(0, 68687, '\p{^ _in_Old	TURKIC}', "");
Expect(0, 68687, '\P{ _in_Old	TURKIC}', "");
Expect(1, 68687, '\P{^ _in_Old	TURKIC}', "");
Expect(0, 68607, '\p{ _in_Old	TURKIC}', "");
Expect(1, 68607, '\p{^ _in_Old	TURKIC}', "");
Expect(1, 68607, '\P{ _in_Old	TURKIC}', "");
Expect(0, 68607, '\P{^ _in_Old	TURKIC}', "");
Error('\p{:=	Grapheme-base}');
Error('\P{:=	Grapheme-base}');
Expect(1, 126, '\p{graphemebase}', "");
Expect(0, 126, '\p{^graphemebase}', "");
Expect(0, 126, '\P{graphemebase}', "");
Expect(1, 126, '\P{^graphemebase}', "");
Expect(0, 31, '\p{graphemebase}', "");
Expect(1, 31, '\p{^graphemebase}', "");
Expect(1, 31, '\P{graphemebase}', "");
Expect(0, 31, '\P{^graphemebase}', "");
Expect(1, 126, '\p{	-GRAPHEME	Base}', "");
Expect(0, 126, '\p{^	-GRAPHEME	Base}', "");
Expect(0, 126, '\P{	-GRAPHEME	Base}', "");
Expect(1, 126, '\P{^	-GRAPHEME	Base}', "");
Expect(0, 31, '\p{	-GRAPHEME	Base}', "");
Expect(1, 31, '\p{^	-GRAPHEME	Base}', "");
Expect(1, 31, '\P{	-GRAPHEME	Base}', "");
Expect(0, 31, '\P{^	-GRAPHEME	Base}', "");
Error('\p{	-is/a/graphemeBASE}');
Error('\P{	-is/a/graphemeBASE}');
Expect(1, 126, '\p{isgraphemebase}', "");
Expect(0, 126, '\p{^isgraphemebase}', "");
Expect(0, 126, '\P{isgraphemebase}', "");
Expect(1, 126, '\P{^isgraphemebase}', "");
Expect(0, 31, '\p{isgraphemebase}', "");
Expect(1, 31, '\p{^isgraphemebase}', "");
Expect(1, 31, '\P{isgraphemebase}', "");
Expect(0, 31, '\P{^isgraphemebase}', "");
Expect(1, 126, '\p{		IS_Grapheme	Base}', "");
Expect(0, 126, '\p{^		IS_Grapheme	Base}', "");
Expect(0, 126, '\P{		IS_Grapheme	Base}', "");
Expect(1, 126, '\P{^		IS_Grapheme	Base}', "");
Expect(0, 31, '\p{		IS_Grapheme	Base}', "");
Expect(1, 31, '\p{^		IS_Grapheme	Base}', "");
Expect(1, 31, '\P{		IS_Grapheme	Base}', "");
Expect(0, 31, '\P{^		IS_Grapheme	Base}', "");
Error('\p{ GR_Base:=}');
Error('\P{ GR_Base:=}');
Expect(1, 126, '\p{grbase}', "");
Expect(0, 126, '\p{^grbase}', "");
Expect(0, 126, '\P{grbase}', "");
Expect(1, 126, '\P{^grbase}', "");
Expect(0, 31, '\p{grbase}', "");
Expect(1, 31, '\p{^grbase}', "");
Expect(1, 31, '\P{grbase}', "");
Expect(0, 31, '\P{^grbase}', "");
Expect(1, 126, '\p{		Gr-Base}', "");
Expect(0, 126, '\p{^		Gr-Base}', "");
Expect(0, 126, '\P{		Gr-Base}', "");
Expect(1, 126, '\P{^		Gr-Base}', "");
Expect(0, 31, '\p{		Gr-Base}', "");
Expect(1, 31, '\p{^		Gr-Base}', "");
Expect(1, 31, '\P{		Gr-Base}', "");
Expect(0, 31, '\P{^		Gr-Base}', "");
Error('\p{:=_Is	gr Base}');
Error('\P{:=_Is	gr Base}');
Expect(1, 126, '\p{isgrbase}', "");
Expect(0, 126, '\p{^isgrbase}', "");
Expect(0, 126, '\P{isgrbase}', "");
Expect(1, 126, '\P{^isgrbase}', "");
Expect(0, 31, '\p{isgrbase}', "");
Expect(1, 31, '\p{^isgrbase}', "");
Expect(1, 31, '\P{isgrbase}', "");
Expect(0, 31, '\P{^isgrbase}', "");
Expect(1, 126, '\p{--Is-GR_base}', "");
Expect(0, 126, '\p{^--Is-GR_base}', "");
Expect(0, 126, '\P{--Is-GR_base}', "");
Expect(1, 126, '\P{^--Is-GR_base}', "");
Expect(0, 31, '\p{--Is-GR_base}', "");
Expect(1, 31, '\p{^--Is-GR_base}', "");
Expect(1, 31, '\P{--Is-GR_base}', "");
Expect(0, 31, '\P{^--Is-GR_base}', "");
Error('\p{_/a/IN UGARITIC}');
Error('\P{_/a/IN UGARITIC}');
Expect(1, 66463, '\p{inugaritic}', "");
Expect(0, 66463, '\p{^inugaritic}', "");
Expect(0, 66463, '\P{inugaritic}', "");
Expect(1, 66463, '\P{^inugaritic}', "");
Expect(0, 66431, '\p{inugaritic}', "");
Expect(1, 66431, '\p{^inugaritic}', "");
Expect(1, 66431, '\P{inugaritic}', "");
Expect(0, 66431, '\P{^inugaritic}', "");
Expect(1, 66463, '\p{_-IN	UGARITIC}', "");
Expect(0, 66463, '\p{^_-IN	UGARITIC}', "");
Expect(0, 66463, '\P{_-IN	UGARITIC}', "");
Expect(1, 66463, '\P{^_-IN	UGARITIC}', "");
Expect(0, 66431, '\p{_-IN	UGARITIC}', "");
Expect(1, 66431, '\p{^_-IN	UGARITIC}', "");
Expect(1, 66431, '\P{_-IN	UGARITIC}', "");
Expect(0, 66431, '\P{^_-IN	UGARITIC}', "");
Error('\p{	:=Devanagari}');
Error('\P{	:=Devanagari}');
Expect(1, 2361, '\p{devanagari}', "");
Expect(0, 2361, '\p{^devanagari}', "");
Expect(0, 2361, '\P{devanagari}', "");
Expect(1, 2361, '\P{^devanagari}', "");
Expect(0, 2303, '\p{devanagari}', "");
Expect(1, 2303, '\p{^devanagari}', "");
Expect(1, 2303, '\P{devanagari}', "");
Expect(0, 2303, '\P{^devanagari}', "");
Expect(1, 2361, '\p{-_DEVANAGARI}', "");
Expect(0, 2361, '\p{^-_DEVANAGARI}', "");
Expect(0, 2361, '\P{-_DEVANAGARI}', "");
Expect(1, 2361, '\P{^-_DEVANAGARI}', "");
Expect(0, 2303, '\p{-_DEVANAGARI}', "");
Expect(1, 2303, '\p{^-_DEVANAGARI}', "");
Expect(1, 2303, '\P{-_DEVANAGARI}', "");
Expect(0, 2303, '\P{^-_DEVANAGARI}', "");
Error('\p{_Is	Devanagari:=}');
Error('\P{_Is	Devanagari:=}');
Expect(1, 2361, '\p{isdevanagari}', "");
Expect(0, 2361, '\p{^isdevanagari}', "");
Expect(0, 2361, '\P{isdevanagari}', "");
Expect(1, 2361, '\P{^isdevanagari}', "");
Expect(0, 2303, '\p{isdevanagari}', "");
Expect(1, 2303, '\p{^isdevanagari}', "");
Expect(1, 2303, '\P{isdevanagari}', "");
Expect(0, 2303, '\P{^isdevanagari}', "");
Expect(1, 2361, '\p{-_Is_DEVANAGARI}', "");
Expect(0, 2361, '\p{^-_Is_DEVANAGARI}', "");
Expect(0, 2361, '\P{-_Is_DEVANAGARI}', "");
Expect(1, 2361, '\P{^-_Is_DEVANAGARI}', "");
Expect(0, 2303, '\p{-_Is_DEVANAGARI}', "");
Expect(1, 2303, '\p{^-_Is_DEVANAGARI}', "");
Expect(1, 2303, '\P{-_Is_DEVANAGARI}', "");
Expect(0, 2303, '\P{^-_Is_DEVANAGARI}', "");
Error('\p{_-Deva/a/}');
Error('\P{_-Deva/a/}');
Expect(1, 2361, '\p{deva}', "");
Expect(0, 2361, '\p{^deva}', "");
Expect(0, 2361, '\P{deva}', "");
Expect(1, 2361, '\P{^deva}', "");
Expect(0, 2303, '\p{deva}', "");
Expect(1, 2303, '\p{^deva}', "");
Expect(1, 2303, '\P{deva}', "");
Expect(0, 2303, '\P{^deva}', "");
Expect(1, 2361, '\p{-	Deva}', "");
Expect(0, 2361, '\p{^-	Deva}', "");
Expect(0, 2361, '\P{-	Deva}', "");
Expect(1, 2361, '\P{^-	Deva}', "");
Expect(0, 2303, '\p{-	Deva}', "");
Expect(1, 2303, '\p{^-	Deva}', "");
Expect(1, 2303, '\P{-	Deva}', "");
Expect(0, 2303, '\P{^-	Deva}', "");
Error('\p{/a/Is-Deva}');
Error('\P{/a/Is-Deva}');
Expect(1, 2361, '\p{isdeva}', "");
Expect(0, 2361, '\p{^isdeva}', "");
Expect(0, 2361, '\P{isdeva}', "");
Expect(1, 2361, '\P{^isdeva}', "");
Expect(0, 2303, '\p{isdeva}', "");
Expect(1, 2303, '\p{^isdeva}', "");
Expect(1, 2303, '\P{isdeva}', "");
Expect(0, 2303, '\P{^isdeva}', "");
Expect(1, 2361, '\p{-Is	Deva}', "");
Expect(0, 2361, '\p{^-Is	Deva}', "");
Expect(0, 2361, '\P{-Is	Deva}', "");
Expect(1, 2361, '\P{^-Is	Deva}', "");
Expect(0, 2303, '\p{-Is	Deva}', "");
Expect(1, 2303, '\p{^-Is	Deva}', "");
Expect(1, 2303, '\P{-Is	Deva}', "");
Expect(0, 2303, '\P{^-Is	Deva}', "");
Error('\p{	-Final/a/Punctuation}');
Error('\P{	-Final/a/Punctuation}');
Expect(1, 187, '\p{finalpunctuation}', "");
Expect(0, 187, '\p{^finalpunctuation}', "");
Expect(0, 187, '\P{finalpunctuation}', "");
Expect(1, 187, '\P{^finalpunctuation}', "");
Expect(0, 186, '\p{finalpunctuation}', "");
Expect(1, 186, '\p{^finalpunctuation}', "");
Expect(1, 186, '\P{finalpunctuation}', "");
Expect(0, 186, '\P{^finalpunctuation}', "");
Expect(1, 187, '\p{	-Final_Punctuation}', "");
Expect(0, 187, '\p{^	-Final_Punctuation}', "");
Expect(0, 187, '\P{	-Final_Punctuation}', "");
Expect(1, 187, '\P{^	-Final_Punctuation}', "");
Expect(0, 186, '\p{	-Final_Punctuation}', "");
Expect(1, 186, '\p{^	-Final_Punctuation}', "");
Expect(1, 186, '\P{	-Final_Punctuation}', "");
Expect(0, 186, '\P{^	-Final_Punctuation}', "");
Error('\p{	is:=Final	Punctuation}');
Error('\P{	is:=Final	Punctuation}');
Expect(1, 187, '\p{isfinalpunctuation}', "");
Expect(0, 187, '\p{^isfinalpunctuation}', "");
Expect(0, 187, '\P{isfinalpunctuation}', "");
Expect(1, 187, '\P{^isfinalpunctuation}', "");
Expect(0, 186, '\p{isfinalpunctuation}', "");
Expect(1, 186, '\p{^isfinalpunctuation}', "");
Expect(1, 186, '\P{isfinalpunctuation}', "");
Expect(0, 186, '\P{^isfinalpunctuation}', "");
Expect(1, 187, '\p{IS	Final	Punctuation}', "");
Expect(0, 187, '\p{^IS	Final	Punctuation}', "");
Expect(0, 187, '\P{IS	Final	Punctuation}', "");
Expect(1, 187, '\P{^IS	Final	Punctuation}', "");
Expect(0, 186, '\p{IS	Final	Punctuation}', "");
Expect(1, 186, '\p{^IS	Final	Punctuation}', "");
Expect(1, 186, '\P{IS	Final	Punctuation}', "");
Expect(0, 186, '\P{^IS	Final	Punctuation}', "");
Error('\p{  Pf/a/}');
Error('\P{  Pf/a/}');
Expect(1, 187, '\p{pf}', "");
Expect(0, 187, '\p{^pf}', "");
Expect(0, 187, '\P{pf}', "");
Expect(1, 187, '\P{^pf}', "");
Expect(0, 186, '\p{pf}', "");
Expect(1, 186, '\p{^pf}', "");
Expect(1, 186, '\P{pf}', "");
Expect(0, 186, '\P{^pf}', "");
Expect(1, 187, '\p{ Pf}', "");
Expect(0, 187, '\p{^ Pf}', "");
Expect(0, 187, '\P{ Pf}', "");
Expect(1, 187, '\P{^ Pf}', "");
Expect(0, 186, '\p{ Pf}', "");
Expect(1, 186, '\p{^ Pf}', "");
Expect(1, 186, '\P{ Pf}', "");
Expect(0, 186, '\P{^ Pf}', "");
Error('\p{/a/_IsPF}');
Error('\P{/a/_IsPF}');
Expect(1, 187, '\p{ispf}', "");
Expect(0, 187, '\p{^ispf}', "");
Expect(0, 187, '\P{ispf}', "");
Expect(1, 187, '\P{^ispf}', "");
Expect(0, 186, '\p{ispf}', "");
Expect(1, 186, '\p{^ispf}', "");
Expect(1, 186, '\P{ispf}', "");
Expect(0, 186, '\P{^ispf}', "");
Expect(1, 187, '\p{_-Is	PF}', "");
Expect(0, 187, '\p{^_-Is	PF}', "");
Expect(0, 187, '\P{_-Is	PF}', "");
Expect(1, 187, '\P{^_-Is	PF}', "");
Expect(0, 186, '\p{_-Is	PF}', "");
Expect(1, 186, '\p{^_-Is	PF}', "");
Expect(1, 186, '\P{_-Is	PF}', "");
Expect(0, 186, '\P{^_-Is	PF}', "");
Error('\p{  modifier/a/letter}');
Error('\P{  modifier/a/letter}');
Expect(1, 705, '\p{modifierletter}', "");
Expect(0, 705, '\p{^modifierletter}', "");
Expect(0, 705, '\P{modifierletter}', "");
Expect(1, 705, '\P{^modifierletter}', "");
Expect(0, 687, '\p{modifierletter}', "");
Expect(1, 687, '\p{^modifierletter}', "");
Expect(1, 687, '\P{modifierletter}', "");
Expect(0, 687, '\P{^modifierletter}', "");
Expect(1, 705, '\p{ -Modifier	Letter}', "");
Expect(0, 705, '\p{^ -Modifier	Letter}', "");
Expect(0, 705, '\P{ -Modifier	Letter}', "");
Expect(1, 705, '\P{^ -Modifier	Letter}', "");
Expect(0, 687, '\p{ -Modifier	Letter}', "");
Expect(1, 687, '\p{^ -Modifier	Letter}', "");
Expect(1, 687, '\P{ -Modifier	Letter}', "");
Expect(0, 687, '\P{^ -Modifier	Letter}', "");
Error('\p{ -IS:=Modifier_LETTER}');
Error('\P{ -IS:=Modifier_LETTER}');
Expect(1, 705, '\p{ismodifierletter}', "");
Expect(0, 705, '\p{^ismodifierletter}', "");
Expect(0, 705, '\P{ismodifierletter}', "");
Expect(1, 705, '\P{^ismodifierletter}', "");
Expect(0, 687, '\p{ismodifierletter}', "");
Expect(1, 687, '\p{^ismodifierletter}', "");
Expect(1, 687, '\P{ismodifierletter}', "");
Expect(0, 687, '\P{^ismodifierletter}', "");
Expect(1, 705, '\p{ Is	Modifier	LETTER}', "");
Expect(0, 705, '\p{^ Is	Modifier	LETTER}', "");
Expect(0, 705, '\P{ Is	Modifier	LETTER}', "");
Expect(1, 705, '\P{^ Is	Modifier	LETTER}', "");
Expect(0, 687, '\p{ Is	Modifier	LETTER}', "");
Expect(1, 687, '\p{^ Is	Modifier	LETTER}', "");
Expect(1, 687, '\P{ Is	Modifier	LETTER}', "");
Expect(0, 687, '\P{^ Is	Modifier	LETTER}', "");
Error('\p{-:=Lm}');
Error('\P{-:=Lm}');
Expect(1, 705, '\p{lm}', "");
Expect(0, 705, '\p{^lm}', "");
Expect(0, 705, '\P{lm}', "");
Expect(1, 705, '\P{^lm}', "");
Expect(0, 687, '\p{lm}', "");
Expect(1, 687, '\p{^lm}', "");
Expect(1, 687, '\P{lm}', "");
Expect(0, 687, '\P{^lm}', "");
Expect(1, 705, '\p{_-lm}', "");
Expect(0, 705, '\p{^_-lm}', "");
Expect(0, 705, '\P{_-lm}', "");
Expect(1, 705, '\P{^_-lm}', "");
Expect(0, 687, '\p{_-lm}', "");
Expect(1, 687, '\p{^_-lm}', "");
Expect(1, 687, '\P{_-lm}', "");
Expect(0, 687, '\P{^_-lm}', "");
Error('\p{:= 	IS-LM}');
Error('\P{:= 	IS-LM}');
Expect(1, 705, '\p{islm}', "");
Expect(0, 705, '\p{^islm}', "");
Expect(0, 705, '\P{islm}', "");
Expect(1, 705, '\P{^islm}', "");
Expect(0, 687, '\p{islm}', "");
Expect(1, 687, '\p{^islm}', "");
Expect(1, 687, '\P{islm}', "");
Expect(0, 687, '\P{^islm}', "");
Expect(1, 705, '\p{_ Is-lm}', "");
Expect(0, 705, '\p{^_ Is-lm}', "");
Expect(0, 705, '\P{_ Is-lm}', "");
Expect(1, 705, '\P{^_ Is-lm}', "");
Expect(0, 687, '\p{_ Is-lm}', "");
Expect(1, 687, '\p{^_ Is-lm}', "");
Expect(1, 687, '\P{_ Is-lm}', "");
Expect(0, 687, '\P{^_ Is-lm}', "");
Error('\p{_	Kanbun:=}');
Error('\P{_	Kanbun:=}');
Expect(1, 12703, '\p{kanbun}', "");
Expect(0, 12703, '\p{^kanbun}', "");
Expect(0, 12703, '\P{kanbun}', "");
Expect(1, 12703, '\P{^kanbun}', "");
Expect(0, 12687, '\p{kanbun}', "");
Expect(1, 12687, '\p{^kanbun}', "");
Expect(1, 12687, '\P{kanbun}', "");
Expect(0, 12687, '\P{^kanbun}', "");
Expect(1, 12703, '\p{ 	Kanbun}', "");
Expect(0, 12703, '\p{^ 	Kanbun}', "");
Expect(0, 12703, '\P{ 	Kanbun}', "");
Expect(1, 12703, '\P{^ 	Kanbun}', "");
Expect(0, 12687, '\p{ 	Kanbun}', "");
Expect(1, 12687, '\p{^ 	Kanbun}', "");
Expect(1, 12687, '\P{ 	Kanbun}', "");
Expect(0, 12687, '\P{^ 	Kanbun}', "");
Error('\p{:= IS_Kanbun}');
Error('\P{:= IS_Kanbun}');
Expect(1, 12703, '\p{iskanbun}', "");
Expect(0, 12703, '\p{^iskanbun}', "");
Expect(0, 12703, '\P{iskanbun}', "");
Expect(1, 12703, '\P{^iskanbun}', "");
Expect(0, 12687, '\p{iskanbun}', "");
Expect(1, 12687, '\p{^iskanbun}', "");
Expect(1, 12687, '\P{iskanbun}', "");
Expect(0, 12687, '\P{^iskanbun}', "");
Expect(1, 12703, '\p{ IS-Kanbun}', "");
Expect(0, 12703, '\p{^ IS-Kanbun}', "");
Expect(0, 12703, '\P{ IS-Kanbun}', "");
Expect(1, 12703, '\P{^ IS-Kanbun}', "");
Expect(0, 12687, '\p{ IS-Kanbun}', "");
Expect(1, 12687, '\p{^ IS-Kanbun}', "");
Expect(1, 12687, '\P{ IS-Kanbun}', "");
Expect(0, 12687, '\P{^ IS-Kanbun}', "");
Error('\p{-	In:=kanbun}');
Error('\P{-	In:=kanbun}');
Expect(1, 12703, '\p{inkanbun}', "");
Expect(0, 12703, '\p{^inkanbun}', "");
Expect(0, 12703, '\P{inkanbun}', "");
Expect(1, 12703, '\P{^inkanbun}', "");
Expect(0, 12687, '\p{inkanbun}', "");
Expect(1, 12687, '\p{^inkanbun}', "");
Expect(1, 12687, '\P{inkanbun}', "");
Expect(0, 12687, '\P{^inkanbun}', "");
Expect(1, 12703, '\p{ _InKANBUN}', "");
Expect(0, 12703, '\p{^ _InKANBUN}', "");
Expect(0, 12703, '\P{ _InKANBUN}', "");
Expect(1, 12703, '\P{^ _InKANBUN}', "");
Expect(0, 12687, '\p{ _InKANBUN}', "");
Expect(1, 12687, '\p{^ _InKANBUN}', "");
Expect(1, 12687, '\P{ _InKANBUN}', "");
Expect(0, 12687, '\P{^ _InKANBUN}', "");
Error('\p{-:=Miscellaneous	mathematical symbols	A}');
Error('\P{-:=Miscellaneous	mathematical symbols	A}');
Expect(1, 10223, '\p{miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{miscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^miscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{	 miscellaneous-Mathematical_symbols	A}', "");
Expect(0, 10223, '\p{^	 miscellaneous-Mathematical_symbols	A}', "");
Expect(0, 10223, '\P{	 miscellaneous-Mathematical_symbols	A}', "");
Expect(1, 10223, '\P{^	 miscellaneous-Mathematical_symbols	A}', "");
Expect(0, 10175, '\p{	 miscellaneous-Mathematical_symbols	A}', "");
Expect(1, 10175, '\p{^	 miscellaneous-Mathematical_symbols	A}', "");
Expect(1, 10175, '\P{	 miscellaneous-Mathematical_symbols	A}', "");
Expect(0, 10175, '\P{^	 miscellaneous-Mathematical_symbols	A}', "");
Error('\p{_ is miscellaneous/a/Mathematical	Symbols	A}');
Error('\P{_ is miscellaneous/a/Mathematical	Symbols	A}');
Expect(1, 10223, '\p{ismiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^ismiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{ismiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^ismiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{ismiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^ismiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{ismiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^ismiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{ Is-miscellaneousMATHEMATICAL Symbols	A}', "");
Expect(0, 10223, '\p{^ Is-miscellaneousMATHEMATICAL Symbols	A}', "");
Expect(0, 10223, '\P{ Is-miscellaneousMATHEMATICAL Symbols	A}', "");
Expect(1, 10223, '\P{^ Is-miscellaneousMATHEMATICAL Symbols	A}', "");
Expect(0, 10175, '\p{ Is-miscellaneousMATHEMATICAL Symbols	A}', "");
Expect(1, 10175, '\p{^ Is-miscellaneousMATHEMATICAL Symbols	A}', "");
Expect(1, 10175, '\P{ Is-miscellaneousMATHEMATICAL Symbols	A}', "");
Expect(0, 10175, '\P{^ Is-miscellaneousMATHEMATICAL Symbols	A}', "");
Error('\p{	-IN:=Miscellaneousmathematical	SYMBOLS A}');
Error('\P{	-IN:=Miscellaneousmathematical	SYMBOLS A}');
Expect(1, 10223, '\p{inmiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\p{^inmiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10223, '\P{inmiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\P{^inmiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\p{inmiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\p{^inmiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10175, '\P{inmiscellaneousmathematicalsymbolsa}', "");
Expect(0, 10175, '\P{^inmiscellaneousmathematicalsymbolsa}', "");
Expect(1, 10223, '\p{ 	IN miscellaneousMATHEMATICAL_SYMBOLS	A}', "");
Expect(0, 10223, '\p{^ 	IN miscellaneousMATHEMATICAL_SYMBOLS	A}', "");
Expect(0, 10223, '\P{ 	IN miscellaneousMATHEMATICAL_SYMBOLS	A}', "");
Expect(1, 10223, '\P{^ 	IN miscellaneousMATHEMATICAL_SYMBOLS	A}', "");
Expect(0, 10175, '\p{ 	IN miscellaneousMATHEMATICAL_SYMBOLS	A}', "");
Expect(1, 10175, '\p{^ 	IN miscellaneousMATHEMATICAL_SYMBOLS	A}', "");
Expect(1, 10175, '\P{ 	IN miscellaneousMATHEMATICAL_SYMBOLS	A}', "");
Expect(0, 10175, '\P{^ 	IN miscellaneousMATHEMATICAL_SYMBOLS	A}', "");
Error('\p{-/a/In	Devanagari}');
Error('\P{-/a/In	Devanagari}');
Expect(1, 2431, '\p{indevanagari}', "");
Expect(0, 2431, '\p{^indevanagari}', "");
Expect(0, 2431, '\P{indevanagari}', "");
Expect(1, 2431, '\P{^indevanagari}', "");
Expect(0, 2303, '\p{indevanagari}', "");
Expect(1, 2303, '\p{^indevanagari}', "");
Expect(1, 2303, '\P{indevanagari}', "");
Expect(0, 2303, '\P{^indevanagari}', "");
Expect(1, 2431, '\p{__In devanagari}', "");
Expect(0, 2431, '\p{^__In devanagari}', "");
Expect(0, 2431, '\P{__In devanagari}', "");
Expect(1, 2431, '\P{^__In devanagari}', "");
Expect(0, 2303, '\p{__In devanagari}', "");
Expect(1, 2303, '\p{^__In devanagari}', "");
Expect(1, 2303, '\P{__In devanagari}', "");
Expect(0, 2303, '\P{^__In devanagari}', "");
Error('\p{	:=Tibetan}');
Error('\P{	:=Tibetan}');
Expect(1, 3911, '\p{tibetan}', "");
Expect(0, 3911, '\p{^tibetan}', "");
Expect(0, 3911, '\P{tibetan}', "");
Expect(1, 3911, '\P{^tibetan}', "");
Expect(0, 3839, '\p{tibetan}', "");
Expect(1, 3839, '\p{^tibetan}', "");
Expect(1, 3839, '\P{tibetan}', "");
Expect(0, 3839, '\P{^tibetan}', "");
Expect(1, 3911, '\p{	TIBETAN}', "");
Expect(0, 3911, '\p{^	TIBETAN}', "");
Expect(0, 3911, '\P{	TIBETAN}', "");
Expect(1, 3911, '\P{^	TIBETAN}', "");
Expect(0, 3839, '\p{	TIBETAN}', "");
Expect(1, 3839, '\p{^	TIBETAN}', "");
Expect(1, 3839, '\P{	TIBETAN}', "");
Expect(0, 3839, '\P{^	TIBETAN}', "");
Error('\p{ /a/IsTibetan}');
Error('\P{ /a/IsTibetan}');
Expect(1, 3911, '\p{istibetan}', "");
Expect(0, 3911, '\p{^istibetan}', "");
Expect(0, 3911, '\P{istibetan}', "");
Expect(1, 3911, '\P{^istibetan}', "");
Expect(0, 3839, '\p{istibetan}', "");
Expect(1, 3839, '\p{^istibetan}', "");
Expect(1, 3839, '\P{istibetan}', "");
Expect(0, 3839, '\P{^istibetan}', "");
Expect(1, 3911, '\p{--IS_Tibetan}', "");
Expect(0, 3911, '\p{^--IS_Tibetan}', "");
Expect(0, 3911, '\P{--IS_Tibetan}', "");
Expect(1, 3911, '\P{^--IS_Tibetan}', "");
Expect(0, 3839, '\p{--IS_Tibetan}', "");
Expect(1, 3839, '\p{^--IS_Tibetan}', "");
Expect(1, 3839, '\P{--IS_Tibetan}', "");
Expect(0, 3839, '\P{^--IS_Tibetan}', "");
Error('\p{:=	-Tibt}');
Error('\P{:=	-Tibt}');
Expect(1, 3911, '\p{tibt}', "");
Expect(0, 3911, '\p{^tibt}', "");
Expect(0, 3911, '\P{tibt}', "");
Expect(1, 3911, '\P{^tibt}', "");
Expect(0, 3839, '\p{tibt}', "");
Expect(1, 3839, '\p{^tibt}', "");
Expect(1, 3839, '\P{tibt}', "");
Expect(0, 3839, '\P{^tibt}', "");
Expect(1, 3911, '\p{	tibt}', "");
Expect(0, 3911, '\p{^	tibt}', "");
Expect(0, 3911, '\P{	tibt}', "");
Expect(1, 3911, '\P{^	tibt}', "");
Expect(0, 3839, '\p{	tibt}', "");
Expect(1, 3839, '\p{^	tibt}', "");
Expect(1, 3839, '\P{	tibt}', "");
Expect(0, 3839, '\P{^	tibt}', "");
Error('\p{-Is_Tibt:=}');
Error('\P{-Is_Tibt:=}');
Expect(1, 3911, '\p{istibt}', "");
Expect(0, 3911, '\p{^istibt}', "");
Expect(0, 3911, '\P{istibt}', "");
Expect(1, 3911, '\P{^istibt}', "");
Expect(0, 3839, '\p{istibt}', "");
Expect(1, 3839, '\p{^istibt}', "");
Expect(1, 3839, '\P{istibt}', "");
Expect(0, 3839, '\P{^istibt}', "");
Expect(1, 3911, '\p{	is_TIBT}', "");
Expect(0, 3911, '\p{^	is_TIBT}', "");
Expect(0, 3911, '\P{	is_TIBT}', "");
Expect(1, 3911, '\P{^	is_TIBT}', "");
Expect(0, 3839, '\p{	is_TIBT}', "");
Expect(1, 3839, '\p{^	is_TIBT}', "");
Expect(1, 3839, '\P{	is_TIBT}', "");
Expect(0, 3839, '\P{^	is_TIBT}', "");
Error('\p{_ javanese/a/}');
Error('\P{_ javanese/a/}');
Expect(1, 43469, '\p{javanese}', "");
Expect(0, 43469, '\p{^javanese}', "");
Expect(0, 43469, '\P{javanese}', "");
Expect(1, 43469, '\P{^javanese}', "");
Expect(0, 43391, '\p{javanese}', "");
Expect(1, 43391, '\p{^javanese}', "");
Expect(1, 43391, '\P{javanese}', "");
Expect(0, 43391, '\P{^javanese}', "");
Expect(1, 43469, '\p{--JAVANESE}', "");
Expect(0, 43469, '\p{^--JAVANESE}', "");
Expect(0, 43469, '\P{--JAVANESE}', "");
Expect(1, 43469, '\P{^--JAVANESE}', "");
Expect(0, 43391, '\p{--JAVANESE}', "");
Expect(1, 43391, '\p{^--JAVANESE}', "");
Expect(1, 43391, '\P{--JAVANESE}', "");
Expect(0, 43391, '\P{^--JAVANESE}', "");
Error('\p{		is_javanese:=}');
Error('\P{		is_javanese:=}');
Expect(1, 43469, '\p{isjavanese}', "");
Expect(0, 43469, '\p{^isjavanese}', "");
Expect(0, 43469, '\P{isjavanese}', "");
Expect(1, 43469, '\P{^isjavanese}', "");
Expect(0, 43391, '\p{isjavanese}', "");
Expect(1, 43391, '\p{^isjavanese}', "");
Expect(1, 43391, '\P{isjavanese}', "");
Expect(0, 43391, '\P{^isjavanese}', "");
Expect(1, 43469, '\p{Is-javanese}', "");
Expect(0, 43469, '\p{^Is-javanese}', "");
Expect(0, 43469, '\P{Is-javanese}', "");
Expect(1, 43469, '\P{^Is-javanese}', "");
Expect(0, 43391, '\p{Is-javanese}', "");
Expect(1, 43391, '\p{^Is-javanese}', "");
Expect(1, 43391, '\P{Is-javanese}', "");
Expect(0, 43391, '\P{^Is-javanese}', "");
Error('\p{/a/--Java}');
Error('\P{/a/--Java}');
Expect(1, 43469, '\p{java}', "");
Expect(0, 43469, '\p{^java}', "");
Expect(0, 43469, '\P{java}', "");
Expect(1, 43469, '\P{^java}', "");
Expect(0, 43391, '\p{java}', "");
Expect(1, 43391, '\p{^java}', "");
Expect(1, 43391, '\P{java}', "");
Expect(0, 43391, '\P{^java}', "");
Expect(1, 43469, '\p{_Java}', "");
Expect(0, 43469, '\p{^_Java}', "");
Expect(0, 43469, '\P{_Java}', "");
Expect(1, 43469, '\P{^_Java}', "");
Expect(0, 43391, '\p{_Java}', "");
Expect(1, 43391, '\p{^_Java}', "");
Expect(1, 43391, '\P{_Java}', "");
Expect(0, 43391, '\P{^_Java}', "");
Error('\p{	:=Is_Java}');
Error('\P{	:=Is_Java}');
Expect(1, 43469, '\p{isjava}', "");
Expect(0, 43469, '\p{^isjava}', "");
Expect(0, 43469, '\P{isjava}', "");
Expect(1, 43469, '\P{^isjava}', "");
Expect(0, 43391, '\p{isjava}', "");
Expect(1, 43391, '\p{^isjava}', "");
Expect(1, 43391, '\P{isjava}', "");
Expect(0, 43391, '\P{^isjava}', "");
Expect(1, 43469, '\p{	 isjava}', "");
Expect(0, 43469, '\p{^	 isjava}', "");
Expect(0, 43469, '\P{	 isjava}', "");
Expect(1, 43469, '\P{^	 isjava}', "");
Expect(0, 43391, '\p{	 isjava}', "");
Expect(1, 43391, '\p{^	 isjava}', "");
Expect(1, 43391, '\P{	 isjava}', "");
Expect(0, 43391, '\P{^	 isjava}', "");
Error('\p{	/a/Telugu}');
Error('\P{	/a/Telugu}');
Expect(1, 3075, '\p{telugu}', "");
Expect(0, 3075, '\p{^telugu}', "");
Expect(0, 3075, '\P{telugu}', "");
Expect(1, 3075, '\P{^telugu}', "");
Expect(0, 3072, '\p{telugu}', "");
Expect(1, 3072, '\p{^telugu}', "");
Expect(1, 3072, '\P{telugu}', "");
Expect(0, 3072, '\P{^telugu}', "");
Expect(1, 3075, '\p{_ Telugu}', "");
Expect(0, 3075, '\p{^_ Telugu}', "");
Expect(0, 3075, '\P{_ Telugu}', "");
Expect(1, 3075, '\P{^_ Telugu}', "");
Expect(0, 3072, '\p{_ Telugu}', "");
Expect(1, 3072, '\p{^_ Telugu}', "");
Expect(1, 3072, '\P{_ Telugu}', "");
Expect(0, 3072, '\P{^_ Telugu}', "");
Error('\p{ :=isTelugu}');
Error('\P{ :=isTelugu}');
Expect(1, 3075, '\p{istelugu}', "");
Expect(0, 3075, '\p{^istelugu}', "");
Expect(0, 3075, '\P{istelugu}', "");
Expect(1, 3075, '\P{^istelugu}', "");
Expect(0, 3072, '\p{istelugu}', "");
Expect(1, 3072, '\p{^istelugu}', "");
Expect(1, 3072, '\P{istelugu}', "");
Expect(0, 3072, '\P{^istelugu}', "");
Expect(1, 3075, '\p{-_IS	Telugu}', "");
Expect(0, 3075, '\p{^-_IS	Telugu}', "");
Expect(0, 3075, '\P{-_IS	Telugu}', "");
Expect(1, 3075, '\P{^-_IS	Telugu}', "");
Expect(0, 3072, '\p{-_IS	Telugu}', "");
Expect(1, 3072, '\p{^-_IS	Telugu}', "");
Expect(1, 3072, '\P{-_IS	Telugu}', "");
Expect(0, 3072, '\P{^-_IS	Telugu}', "");
Error('\p{/a/	 Telu}');
Error('\P{/a/	 Telu}');
Expect(1, 3075, '\p{telu}', "");
Expect(0, 3075, '\p{^telu}', "");
Expect(0, 3075, '\P{telu}', "");
Expect(1, 3075, '\P{^telu}', "");
Expect(0, 3072, '\p{telu}', "");
Expect(1, 3072, '\p{^telu}', "");
Expect(1, 3072, '\P{telu}', "");
Expect(0, 3072, '\P{^telu}', "");
Expect(1, 3075, '\p{_	telu}', "");
Expect(0, 3075, '\p{^_	telu}', "");
Expect(0, 3075, '\P{_	telu}', "");
Expect(1, 3075, '\P{^_	telu}', "");
Expect(0, 3072, '\p{_	telu}', "");
Expect(1, 3072, '\p{^_	telu}', "");
Expect(1, 3072, '\P{_	telu}', "");
Expect(0, 3072, '\P{^_	telu}', "");
Error('\p{ /a/IsTelu}');
Error('\P{ /a/IsTelu}');
Expect(1, 3075, '\p{istelu}', "");
Expect(0, 3075, '\p{^istelu}', "");
Expect(0, 3075, '\P{istelu}', "");
Expect(1, 3075, '\P{^istelu}', "");
Expect(0, 3072, '\p{istelu}', "");
Expect(1, 3072, '\p{^istelu}', "");
Expect(1, 3072, '\P{istelu}', "");
Expect(0, 3072, '\P{^istelu}', "");
Expect(1, 3075, '\p{- Is-TELU}', "");
Expect(0, 3075, '\p{^- Is-TELU}', "");
Expect(0, 3075, '\P{- Is-TELU}', "");
Expect(1, 3075, '\P{^- Is-TELU}', "");
Expect(0, 3072, '\p{- Is-TELU}', "");
Expect(1, 3072, '\p{^- Is-TELU}', "");
Expect(1, 3072, '\P{- Is-TELU}', "");
Expect(0, 3072, '\P{^- Is-TELU}', "");
Error('\p{	:=Yi	Radicals}');
Error('\P{	:=Yi	Radicals}');
Expect(1, 42191, '\p{yiradicals}', "");
Expect(0, 42191, '\p{^yiradicals}', "");
Expect(0, 42191, '\P{yiradicals}', "");
Expect(1, 42191, '\P{^yiradicals}', "");
Expect(0, 42127, '\p{yiradicals}', "");
Expect(1, 42127, '\p{^yiradicals}', "");
Expect(1, 42127, '\P{yiradicals}', "");
Expect(0, 42127, '\P{^yiradicals}', "");
Expect(1, 42191, '\p{- YI Radicals}', "");
Expect(0, 42191, '\p{^- YI Radicals}', "");
Expect(0, 42191, '\P{- YI Radicals}', "");
Expect(1, 42191, '\P{^- YI Radicals}', "");
Expect(0, 42127, '\p{- YI Radicals}', "");
Expect(1, 42127, '\p{^- YI Radicals}', "");
Expect(1, 42127, '\P{- YI Radicals}', "");
Expect(0, 42127, '\P{^- YI Radicals}', "");
Error('\p{-Is/a/yi	Radicals}');
Error('\P{-Is/a/yi	Radicals}');
Expect(1, 42191, '\p{isyiradicals}', "");
Expect(0, 42191, '\p{^isyiradicals}', "");
Expect(0, 42191, '\P{isyiradicals}', "");
Expect(1, 42191, '\P{^isyiradicals}', "");
Expect(0, 42127, '\p{isyiradicals}', "");
Expect(1, 42127, '\p{^isyiradicals}', "");
Expect(1, 42127, '\P{isyiradicals}', "");
Expect(0, 42127, '\P{^isyiradicals}', "");
Expect(1, 42191, '\p{-IS yi	RADICALS}', "");
Expect(0, 42191, '\p{^-IS yi	RADICALS}', "");
Expect(0, 42191, '\P{-IS yi	RADICALS}', "");
Expect(1, 42191, '\P{^-IS yi	RADICALS}', "");
Expect(0, 42127, '\p{-IS yi	RADICALS}', "");
Expect(1, 42127, '\p{^-IS yi	RADICALS}', "");
Expect(1, 42127, '\P{-IS yi	RADICALS}', "");
Expect(0, 42127, '\P{^-IS yi	RADICALS}', "");
Error('\p{-In-YiRadicals:=}');
Error('\P{-In-YiRadicals:=}');
Expect(1, 42191, '\p{inyiradicals}', "");
Expect(0, 42191, '\p{^inyiradicals}', "");
Expect(0, 42191, '\P{inyiradicals}', "");
Expect(1, 42191, '\P{^inyiradicals}', "");
Expect(0, 42127, '\p{inyiradicals}', "");
Expect(1, 42127, '\p{^inyiradicals}', "");
Expect(1, 42127, '\P{inyiradicals}', "");
Expect(0, 42127, '\P{^inyiradicals}', "");
Expect(1, 42191, '\p{_	In-YIRadicals}', "");
Expect(0, 42191, '\p{^_	In-YIRadicals}', "");
Expect(0, 42191, '\P{_	In-YIRadicals}', "");
Expect(1, 42191, '\P{^_	In-YIRadicals}', "");
Expect(0, 42127, '\p{_	In-YIRadicals}', "");
Expect(1, 42127, '\p{^_	In-YIRadicals}', "");
Expect(1, 42127, '\P{_	In-YIRadicals}', "");
Expect(0, 42127, '\P{^_	In-YIRadicals}', "");
Error('\p{ IN-Shavian/a/}');
Error('\P{ IN-Shavian/a/}');
Expect(1, 66687, '\p{inshavian}', "");
Expect(0, 66687, '\p{^inshavian}', "");
Expect(0, 66687, '\P{inshavian}', "");
Expect(1, 66687, '\P{^inshavian}', "");
Expect(0, 66639, '\p{inshavian}', "");
Expect(1, 66639, '\p{^inshavian}', "");
Expect(1, 66639, '\P{inshavian}', "");
Expect(0, 66639, '\P{^inshavian}', "");
Expect(1, 66687, '\p{-InShavian}', "");
Expect(0, 66687, '\p{^-InShavian}', "");
Expect(0, 66687, '\P{-InShavian}', "");
Expect(1, 66687, '\P{^-InShavian}', "");
Expect(0, 66639, '\p{-InShavian}', "");
Expect(1, 66639, '\p{^-InShavian}', "");
Expect(1, 66639, '\P{-InShavian}', "");
Expect(0, 66639, '\P{^-InShavian}', "");
Error('\p{ /a/Ancient-SYMBOLS}');
Error('\P{ /a/Ancient-SYMBOLS}');
Expect(1, 65999, '\p{ancientsymbols}', "");
Expect(0, 65999, '\p{^ancientsymbols}', "");
Expect(0, 65999, '\P{ancientsymbols}', "");
Expect(1, 65999, '\P{^ancientsymbols}', "");
Expect(0, 65935, '\p{ancientsymbols}', "");
Expect(1, 65935, '\p{^ancientsymbols}', "");
Expect(1, 65935, '\P{ancientsymbols}', "");
Expect(0, 65935, '\P{^ancientsymbols}', "");
Expect(1, 65999, '\p{  Ancient-SYMBOLS}', "");
Expect(0, 65999, '\p{^  Ancient-SYMBOLS}', "");
Expect(0, 65999, '\P{  Ancient-SYMBOLS}', "");
Expect(1, 65999, '\P{^  Ancient-SYMBOLS}', "");
Expect(0, 65935, '\p{  Ancient-SYMBOLS}', "");
Expect(1, 65935, '\p{^  Ancient-SYMBOLS}', "");
Expect(1, 65935, '\P{  Ancient-SYMBOLS}', "");
Expect(0, 65935, '\P{^  Ancient-SYMBOLS}', "");
Error('\p{_ ISAncient:=symbols}');
Error('\P{_ ISAncient:=symbols}');
Expect(1, 65999, '\p{isancientsymbols}', "");
Expect(0, 65999, '\p{^isancientsymbols}', "");
Expect(0, 65999, '\P{isancientsymbols}', "");
Expect(1, 65999, '\P{^isancientsymbols}', "");
Expect(0, 65935, '\p{isancientsymbols}', "");
Expect(1, 65935, '\p{^isancientsymbols}', "");
Expect(1, 65935, '\P{isancientsymbols}', "");
Expect(0, 65935, '\P{^isancientsymbols}', "");
Expect(1, 65999, '\p{	IS ancient-symbols}', "");
Expect(0, 65999, '\p{^	IS ancient-symbols}', "");
Expect(0, 65999, '\P{	IS ancient-symbols}', "");
Expect(1, 65999, '\P{^	IS ancient-symbols}', "");
Expect(0, 65935, '\p{	IS ancient-symbols}', "");
Expect(1, 65935, '\p{^	IS ancient-symbols}', "");
Expect(1, 65935, '\P{	IS ancient-symbols}', "");
Expect(0, 65935, '\P{^	IS ancient-symbols}', "");
Error('\p{ 	IN Ancientsymbols/a/}');
Error('\P{ 	IN Ancientsymbols/a/}');
Expect(1, 65999, '\p{inancientsymbols}', "");
Expect(0, 65999, '\p{^inancientsymbols}', "");
Expect(0, 65999, '\P{inancientsymbols}', "");
Expect(1, 65999, '\P{^inancientsymbols}', "");
Expect(0, 65935, '\p{inancientsymbols}', "");
Expect(1, 65935, '\p{^inancientsymbols}', "");
Expect(1, 65935, '\P{inancientsymbols}', "");
Expect(0, 65935, '\P{^inancientsymbols}', "");
Expect(1, 65999, '\p{ In_ancient-Symbols}', "");
Expect(0, 65999, '\p{^ In_ancient-Symbols}', "");
Expect(0, 65999, '\P{ In_ancient-Symbols}', "");
Expect(1, 65999, '\P{^ In_ancient-Symbols}', "");
Expect(0, 65935, '\p{ In_ancient-Symbols}', "");
Expect(1, 65935, '\p{^ In_ancient-Symbols}', "");
Expect(1, 65935, '\P{ In_ancient-Symbols}', "");
Expect(0, 65935, '\P{^ In_ancient-Symbols}', "");
Error('\p{	:=QUOTATIONmark}');
Error('\P{	:=QUOTATIONmark}');
Expect(1, 34, '\p{quotationmark}', "");
Expect(0, 34, '\p{^quotationmark}', "");
Expect(0, 34, '\P{quotationmark}', "");
Expect(1, 34, '\P{^quotationmark}', "");
Expect(0, 33, '\p{quotationmark}', "");
Expect(1, 33, '\p{^quotationmark}', "");
Expect(1, 33, '\P{quotationmark}', "");
Expect(0, 33, '\P{^quotationmark}', "");
Expect(1, 34, '\p{	 QUOTATION-Mark}', "");
Expect(0, 34, '\p{^	 QUOTATION-Mark}', "");
Expect(0, 34, '\P{	 QUOTATION-Mark}', "");
Expect(1, 34, '\P{^	 QUOTATION-Mark}', "");
Expect(0, 33, '\p{	 QUOTATION-Mark}', "");
Expect(1, 33, '\p{^	 QUOTATION-Mark}', "");
Expect(1, 33, '\P{	 QUOTATION-Mark}', "");
Expect(0, 33, '\P{^	 QUOTATION-Mark}', "");
Error('\p{	IS:=QuotationMark}');
Error('\P{	IS:=QuotationMark}');
Expect(1, 34, '\p{isquotationmark}', "");
Expect(0, 34, '\p{^isquotationmark}', "");
Expect(0, 34, '\P{isquotationmark}', "");
Expect(1, 34, '\P{^isquotationmark}', "");
Expect(0, 33, '\p{isquotationmark}', "");
Expect(1, 33, '\p{^isquotationmark}', "");
Expect(1, 33, '\P{isquotationmark}', "");
Expect(0, 33, '\P{^isquotationmark}', "");
Expect(1, 34, '\p{		Is-QUOTATION_Mark}', "");
Expect(0, 34, '\p{^		Is-QUOTATION_Mark}', "");
Expect(0, 34, '\P{		Is-QUOTATION_Mark}', "");
Expect(1, 34, '\P{^		Is-QUOTATION_Mark}', "");
Expect(0, 33, '\p{		Is-QUOTATION_Mark}', "");
Expect(1, 33, '\p{^		Is-QUOTATION_Mark}', "");
Expect(1, 33, '\P{		Is-QUOTATION_Mark}', "");
Expect(0, 33, '\P{^		Is-QUOTATION_Mark}', "");
Error('\p{ /a/QMARK}');
Error('\P{ /a/QMARK}');
Expect(1, 34, '\p{qmark}', "");
Expect(0, 34, '\p{^qmark}', "");
Expect(0, 34, '\P{qmark}', "");
Expect(1, 34, '\P{^qmark}', "");
Expect(0, 33, '\p{qmark}', "");
Expect(1, 33, '\p{^qmark}', "");
Expect(1, 33, '\P{qmark}', "");
Expect(0, 33, '\P{^qmark}', "");
Expect(1, 34, '\p{  QMark}', "");
Expect(0, 34, '\p{^  QMark}', "");
Expect(0, 34, '\P{  QMark}', "");
Expect(1, 34, '\P{^  QMark}', "");
Expect(0, 33, '\p{  QMark}', "");
Expect(1, 33, '\p{^  QMark}', "");
Expect(1, 33, '\P{  QMark}', "");
Expect(0, 33, '\P{^  QMark}', "");
Error('\p{_ Is_QMark:=}');
Error('\P{_ Is_QMark:=}');
Expect(1, 34, '\p{isqmark}', "");
Expect(0, 34, '\p{^isqmark}', "");
Expect(0, 34, '\P{isqmark}', "");
Expect(1, 34, '\P{^isqmark}', "");
Expect(0, 33, '\p{isqmark}', "");
Expect(1, 33, '\p{^isqmark}', "");
Expect(1, 33, '\P{isqmark}', "");
Expect(0, 33, '\P{^isqmark}', "");
Expect(1, 34, '\p{  Is_QMark}', "");
Expect(0, 34, '\p{^  Is_QMark}', "");
Expect(0, 34, '\P{  Is_QMark}', "");
Expect(1, 34, '\P{^  Is_QMark}', "");
Expect(0, 33, '\p{  Is_QMark}', "");
Expect(1, 33, '\p{^  Is_QMark}', "");
Expect(1, 33, '\P{  Is_QMark}', "");
Expect(0, 33, '\P{^  Is_QMark}', "");
Error('\p{/a/in	tibetan}');
Error('\P{/a/in	tibetan}');
Expect(1, 4095, '\p{intibetan}', "");
Expect(0, 4095, '\p{^intibetan}', "");
Expect(0, 4095, '\P{intibetan}', "");
Expect(1, 4095, '\P{^intibetan}', "");
Expect(0, 3839, '\p{intibetan}', "");
Expect(1, 3839, '\p{^intibetan}', "");
Expect(1, 3839, '\P{intibetan}', "");
Expect(0, 3839, '\P{^intibetan}', "");
Expect(1, 4095, '\p{	-in	tibetan}', "");
Expect(0, 4095, '\p{^	-in	tibetan}', "");
Expect(0, 4095, '\P{	-in	tibetan}', "");
Expect(1, 4095, '\P{^	-in	tibetan}', "");
Expect(0, 3839, '\p{	-in	tibetan}', "");
Expect(1, 3839, '\p{^	-in	tibetan}', "");
Expect(1, 3839, '\P{	-in	tibetan}', "");
Expect(0, 3839, '\P{^	-in	tibetan}', "");
Error('\p{ supplemental:=mathematical_Operators}');
Error('\P{ supplemental:=mathematical_Operators}');
Expect(1, 11007, '\p{supplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^supplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{supplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^supplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{supplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^supplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{supplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^supplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{ Supplemental	Mathematical Operators}', "");
Expect(0, 11007, '\p{^ Supplemental	Mathematical Operators}', "");
Expect(0, 11007, '\P{ Supplemental	Mathematical Operators}', "");
Expect(1, 11007, '\P{^ Supplemental	Mathematical Operators}', "");
Expect(0, 10751, '\p{ Supplemental	Mathematical Operators}', "");
Expect(1, 10751, '\p{^ Supplemental	Mathematical Operators}', "");
Expect(1, 10751, '\P{ Supplemental	Mathematical Operators}', "");
Expect(0, 10751, '\P{^ Supplemental	Mathematical Operators}', "");
Error('\p{ 	is:=SupplementalMathematical-Operators}');
Error('\P{ 	is:=SupplementalMathematical-Operators}');
Expect(1, 11007, '\p{issupplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^issupplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{issupplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^issupplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{issupplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^issupplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{issupplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^issupplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{ Is-Supplemental-mathematicalOperators}', "");
Expect(0, 11007, '\p{^ Is-Supplemental-mathematicalOperators}', "");
Expect(0, 11007, '\P{ Is-Supplemental-mathematicalOperators}', "");
Expect(1, 11007, '\P{^ Is-Supplemental-mathematicalOperators}', "");
Expect(0, 10751, '\p{ Is-Supplemental-mathematicalOperators}', "");
Expect(1, 10751, '\p{^ Is-Supplemental-mathematicalOperators}', "");
Expect(1, 10751, '\P{ Is-Supplemental-mathematicalOperators}', "");
Expect(0, 10751, '\P{^ Is-Supplemental-mathematicalOperators}', "");
Error('\p{/a/in-supplemental	Mathematical Operators}');
Error('\P{/a/in-supplemental	Mathematical Operators}');
Expect(1, 11007, '\p{insupplementalmathematicaloperators}', "");
Expect(0, 11007, '\p{^insupplementalmathematicaloperators}', "");
Expect(0, 11007, '\P{insupplementalmathematicaloperators}', "");
Expect(1, 11007, '\P{^insupplementalmathematicaloperators}', "");
Expect(0, 10751, '\p{insupplementalmathematicaloperators}', "");
Expect(1, 10751, '\p{^insupplementalmathematicaloperators}', "");
Expect(1, 10751, '\P{insupplementalmathematicaloperators}', "");
Expect(0, 10751, '\P{^insupplementalmathematicaloperators}', "");
Expect(1, 11007, '\p{	-IN_supplemental_Mathematical operators}', "");
Expect(0, 11007, '\p{^	-IN_supplemental_Mathematical operators}', "");
Expect(0, 11007, '\P{	-IN_supplemental_Mathematical operators}', "");
Expect(1, 11007, '\P{^	-IN_supplemental_Mathematical operators}', "");
Expect(0, 10751, '\p{	-IN_supplemental_Mathematical operators}', "");
Expect(1, 10751, '\p{^	-IN_supplemental_Mathematical operators}', "");
Expect(1, 10751, '\P{	-IN_supplemental_Mathematical operators}', "");
Expect(0, 10751, '\P{^	-IN_supplemental_Mathematical operators}', "");
Error('\p{__Incarian/a/}');
Error('\P{__Incarian/a/}');
Expect(1, 66271, '\p{incarian}', "");
Expect(0, 66271, '\p{^incarian}', "");
Expect(0, 66271, '\P{incarian}', "");
Expect(1, 66271, '\P{^incarian}', "");
Expect(0, 66207, '\p{incarian}', "");
Expect(1, 66207, '\p{^incarian}', "");
Expect(1, 66207, '\P{incarian}', "");
Expect(0, 66207, '\P{^incarian}', "");
Expect(1, 66271, '\p{-inCARIAN}', "");
Expect(0, 66271, '\p{^-inCARIAN}', "");
Expect(0, 66271, '\P{-inCARIAN}', "");
Expect(1, 66271, '\P{^-inCARIAN}', "");
Expect(0, 66207, '\p{-inCARIAN}', "");
Expect(1, 66207, '\p{^-inCARIAN}', "");
Expect(1, 66207, '\P{-inCARIAN}', "");
Expect(0, 66207, '\P{^-inCARIAN}', "");
Error('\p{-In_arabic:=}');
Error('\P{-In_arabic:=}');
Expect(1, 1791, '\p{inarabic}', "");
Expect(0, 1791, '\p{^inarabic}', "");
Expect(0, 1791, '\P{inarabic}', "");
Expect(1, 1791, '\P{^inarabic}', "");
Expect(0, 1535, '\p{inarabic}', "");
Expect(1, 1535, '\p{^inarabic}', "");
Expect(1, 1535, '\P{inarabic}', "");
Expect(0, 1535, '\P{^inarabic}', "");
Expect(1, 1791, '\p{ _In ARABIC}', "");
Expect(0, 1791, '\p{^ _In ARABIC}', "");
Expect(0, 1791, '\P{ _In ARABIC}', "");
Expect(1, 1791, '\P{^ _In ARABIC}', "");
Expect(0, 1535, '\p{ _In ARABIC}', "");
Expect(1, 1535, '\p{^ _In ARABIC}', "");
Expect(1, 1535, '\P{ _In ARABIC}', "");
Expect(0, 1535, '\P{^ _In ARABIC}', "");
Error('\p{ :=PosixCntrl}');
Error('\P{ :=PosixCntrl}');
Expect(1, 31, '\p{posixcntrl}', "");
Expect(0, 31, '\p{^posixcntrl}', "");
Expect(0, 31, '\P{posixcntrl}', "");
Expect(1, 31, '\P{^posixcntrl}', "");
Expect(0, 126, '\p{posixcntrl}', "");
Expect(1, 126, '\p{^posixcntrl}', "");
Expect(1, 126, '\P{posixcntrl}', "");
Expect(0, 126, '\P{^posixcntrl}', "");
Expect(1, 31, '\p{_-POSIXCNTRL}', "");
Expect(0, 31, '\p{^_-POSIXCNTRL}', "");
Expect(0, 31, '\P{_-POSIXCNTRL}', "");
Expect(1, 31, '\P{^_-POSIXCNTRL}', "");
Expect(0, 126, '\p{_-POSIXCNTRL}', "");
Expect(1, 126, '\p{^_-POSIXCNTRL}', "");
Expect(1, 126, '\P{_-POSIXCNTRL}', "");
Expect(0, 126, '\P{^_-POSIXCNTRL}', "");
Error('\p{:=	 Is-POSIXCNTRL}');
Error('\P{:=	 Is-POSIXCNTRL}');
Expect(1, 31, '\p{isposixcntrl}', "");
Expect(0, 31, '\p{^isposixcntrl}', "");
Expect(0, 31, '\P{isposixcntrl}', "");
Expect(1, 31, '\P{^isposixcntrl}', "");
Expect(0, 126, '\p{isposixcntrl}', "");
Expect(1, 126, '\p{^isposixcntrl}', "");
Expect(1, 126, '\P{isposixcntrl}', "");
Expect(0, 126, '\P{^isposixcntrl}', "");
Expect(1, 31, '\p{ Is_PosixCntrl}', "");
Expect(0, 31, '\p{^ Is_PosixCntrl}', "");
Expect(0, 31, '\P{ Is_PosixCntrl}', "");
Expect(1, 31, '\P{^ Is_PosixCntrl}', "");
Expect(0, 126, '\p{ Is_PosixCntrl}', "");
Expect(1, 126, '\p{^ Is_PosixCntrl}', "");
Expect(1, 126, '\P{ Is_PosixCntrl}', "");
Expect(0, 126, '\P{^ Is_PosixCntrl}', "");
Error('\p{_:=IN Gothic}');
Error('\P{_:=IN Gothic}');
Expect(1, 66383, '\p{ingothic}', "");
Expect(0, 66383, '\p{^ingothic}', "");
Expect(0, 66383, '\P{ingothic}', "");
Expect(1, 66383, '\P{^ingothic}', "");
Expect(0, 66351, '\p{ingothic}', "");
Expect(1, 66351, '\p{^ingothic}', "");
Expect(1, 66351, '\P{ingothic}', "");
Expect(0, 66351, '\P{^ingothic}', "");
Expect(1, 66383, '\p{ _IN-GOTHIC}', "");
Expect(0, 66383, '\p{^ _IN-GOTHIC}', "");
Expect(0, 66383, '\P{ _IN-GOTHIC}', "");
Expect(1, 66383, '\P{^ _IN-GOTHIC}', "");
Expect(0, 66351, '\p{ _IN-GOTHIC}', "");
Expect(1, 66351, '\p{^ _IN-GOTHIC}', "");
Expect(1, 66351, '\P{ _IN-GOTHIC}', "");
Expect(0, 66351, '\P{^ _IN-GOTHIC}', "");
Error('\p{-:=MARK}');
Error('\P{-:=MARK}');
Expect(1, 879, '\p{mark}', "");
Expect(0, 879, '\p{^mark}', "");
Expect(0, 879, '\P{mark}', "");
Expect(1, 879, '\P{^mark}', "");
Expect(0, 767, '\p{mark}', "");
Expect(1, 767, '\p{^mark}', "");
Expect(1, 767, '\P{mark}', "");
Expect(0, 767, '\P{^mark}', "");
Expect(1, 879, '\p{-Mark}', "");
Expect(0, 879, '\p{^-Mark}', "");
Expect(0, 879, '\P{-Mark}', "");
Expect(1, 879, '\P{^-Mark}', "");
Expect(0, 767, '\p{-Mark}', "");
Expect(1, 767, '\p{^-Mark}', "");
Expect(1, 767, '\P{-Mark}', "");
Expect(0, 767, '\P{^-Mark}', "");
Error('\p{/a/IS-mark}');
Error('\P{/a/IS-mark}');
Expect(1, 879, '\p{ismark}', "");
Expect(0, 879, '\p{^ismark}', "");
Expect(0, 879, '\P{ismark}', "");
Expect(1, 879, '\P{^ismark}', "");
Expect(0, 767, '\p{ismark}', "");
Expect(1, 767, '\p{^ismark}', "");
Expect(1, 767, '\P{ismark}', "");
Expect(0, 767, '\P{^ismark}', "");
Expect(1, 879, '\p{__Is-Mark}', "");
Expect(0, 879, '\p{^__Is-Mark}', "");
Expect(0, 879, '\P{__Is-Mark}', "");
Expect(1, 879, '\P{^__Is-Mark}', "");
Expect(0, 767, '\p{__Is-Mark}', "");
Expect(1, 767, '\p{^__Is-Mark}', "");
Expect(1, 767, '\P{__Is-Mark}', "");
Expect(0, 767, '\P{^__Is-Mark}', "");
Error('\p{_/a/M}');
Error('\P{_/a/M}');
Expect(1, 879, '\p{m}', "");
Expect(0, 879, '\p{^m}', "");
Expect(0, 879, '\P{m}', "");
Expect(1, 879, '\P{^m}', "");
Expect(0, 767, '\p{m}', "");
Expect(1, 767, '\p{^m}', "");
Expect(1, 767, '\P{m}', "");
Expect(0, 767, '\P{^m}', "");
Expect(1, 879, '\p{__M}', "");
Expect(0, 879, '\p{^__M}', "");
Expect(0, 879, '\P{__M}', "");
Expect(1, 879, '\P{^__M}', "");
Expect(0, 767, '\p{__M}', "");
Expect(1, 767, '\p{^__M}', "");
Expect(1, 767, '\P{__M}', "");
Expect(0, 767, '\P{^__M}', "");
Error('\p{- is/a/M}');
Error('\P{- is/a/M}');
Expect(1, 879, '\p{ism}', "");
Expect(0, 879, '\p{^ism}', "");
Expect(0, 879, '\P{ism}', "");
Expect(1, 879, '\P{^ism}', "");
Expect(0, 767, '\p{ism}', "");
Expect(1, 767, '\p{^ism}', "");
Expect(1, 767, '\P{ism}', "");
Expect(0, 767, '\P{^ism}', "");
Expect(1, 879, '\p{ Is_M}', "");
Expect(0, 879, '\p{^ Is_M}', "");
Expect(0, 879, '\P{ Is_M}', "");
Expect(1, 879, '\P{^ Is_M}', "");
Expect(0, 767, '\p{ Is_M}', "");
Expect(1, 767, '\p{^ Is_M}', "");
Expect(1, 767, '\P{ Is_M}', "");
Expect(0, 767, '\P{^ Is_M}', "");
Error('\p{/a/ HANGUL-syllables}');
Error('\P{/a/ HANGUL-syllables}');
Expect(1, 55215, '\p{hangulsyllables}', "");
Expect(0, 55215, '\p{^hangulsyllables}', "");
Expect(0, 55215, '\P{hangulsyllables}', "");
Expect(1, 55215, '\P{^hangulsyllables}', "");
Expect(0, 44031, '\p{hangulsyllables}', "");
Expect(1, 44031, '\p{^hangulsyllables}', "");
Expect(1, 44031, '\P{hangulsyllables}', "");
Expect(0, 44031, '\P{^hangulsyllables}', "");
Expect(1, 55215, '\p{	Hangul	Syllables}', "");
Expect(0, 55215, '\p{^	Hangul	Syllables}', "");
Expect(0, 55215, '\P{	Hangul	Syllables}', "");
Expect(1, 55215, '\P{^	Hangul	Syllables}', "");
Expect(0, 44031, '\p{	Hangul	Syllables}', "");
Expect(1, 44031, '\p{^	Hangul	Syllables}', "");
Expect(1, 44031, '\P{	Hangul	Syllables}', "");
Expect(0, 44031, '\P{^	Hangul	Syllables}', "");
Error('\p{ 	Is	Hangul-Syllables/a/}');
Error('\P{ 	Is	Hangul-Syllables/a/}');
Expect(1, 55215, '\p{ishangulsyllables}', "");
Expect(0, 55215, '\p{^ishangulsyllables}', "");
Expect(0, 55215, '\P{ishangulsyllables}', "");
Expect(1, 55215, '\P{^ishangulsyllables}', "");
Expect(0, 44031, '\p{ishangulsyllables}', "");
Expect(1, 44031, '\p{^ishangulsyllables}', "");
Expect(1, 44031, '\P{ishangulsyllables}', "");
Expect(0, 44031, '\P{^ishangulsyllables}', "");
Expect(1, 55215, '\p{		IS	hangul	Syllables}', "");
Expect(0, 55215, '\p{^		IS	hangul	Syllables}', "");
Expect(0, 55215, '\P{		IS	hangul	Syllables}', "");
Expect(1, 55215, '\P{^		IS	hangul	Syllables}', "");
Expect(0, 44031, '\p{		IS	hangul	Syllables}', "");
Expect(1, 44031, '\p{^		IS	hangul	Syllables}', "");
Expect(1, 44031, '\P{		IS	hangul	Syllables}', "");
Expect(0, 44031, '\P{^		IS	hangul	Syllables}', "");
Error('\p{ :=in hangul syllables}');
Error('\P{ :=in hangul syllables}');
Expect(1, 55215, '\p{inhangulsyllables}', "");
Expect(0, 55215, '\p{^inhangulsyllables}', "");
Expect(0, 55215, '\P{inhangulsyllables}', "");
Expect(1, 55215, '\P{^inhangulsyllables}', "");
Expect(0, 44031, '\p{inhangulsyllables}', "");
Expect(1, 44031, '\p{^inhangulsyllables}', "");
Expect(1, 44031, '\P{inhangulsyllables}', "");
Expect(0, 44031, '\P{^inhangulsyllables}', "");
Expect(1, 55215, '\p{_-In_Hangul-Syllables}', "");
Expect(0, 55215, '\p{^_-In_Hangul-Syllables}', "");
Expect(0, 55215, '\P{_-In_Hangul-Syllables}', "");
Expect(1, 55215, '\P{^_-In_Hangul-Syllables}', "");
Expect(0, 44031, '\p{_-In_Hangul-Syllables}', "");
Expect(1, 44031, '\p{^_-In_Hangul-Syllables}', "");
Expect(1, 44031, '\P{_-In_Hangul-Syllables}', "");
Expect(0, 44031, '\P{^_-In_Hangul-Syllables}', "");
Error('\p{:=Space}');
Error('\P{:=Space}');
Expect(1, 13, '\p{space}', "");
Expect(0, 13, '\p{^space}', "");
Expect(0, 13, '\P{space}', "");
Expect(1, 13, '\P{^space}', "");
Expect(0, 8, '\p{space}', "");
Expect(1, 8, '\p{^space}', "");
Expect(1, 8, '\P{space}', "");
Expect(0, 8, '\P{^space}', "");
Expect(1, 13, '\p{	_Space}', "");
Expect(0, 13, '\p{^	_Space}', "");
Expect(0, 13, '\P{	_Space}', "");
Expect(1, 13, '\P{^	_Space}', "");
Expect(0, 8, '\p{	_Space}', "");
Expect(1, 8, '\p{^	_Space}', "");
Expect(1, 8, '\P{	_Space}', "");
Expect(0, 8, '\P{^	_Space}', "");
Error('\p{_:=Is-SPACE}');
Error('\P{_:=Is-SPACE}');
Expect(1, 13, '\p{isspace}', "");
Expect(0, 13, '\p{^isspace}', "");
Expect(0, 13, '\P{isspace}', "");
Expect(1, 13, '\P{^isspace}', "");
Expect(0, 8, '\p{isspace}', "");
Expect(1, 8, '\p{^isspace}', "");
Expect(1, 8, '\P{isspace}', "");
Expect(0, 8, '\P{^isspace}', "");
Expect(1, 13, '\p{	_Is-Space}', "");
Expect(0, 13, '\p{^	_Is-Space}', "");
Expect(0, 13, '\P{	_Is-Space}', "");
Expect(1, 13, '\P{^	_Is-Space}', "");
Expect(0, 8, '\p{	_Is-Space}', "");
Expect(1, 8, '\p{^	_Is-Space}', "");
Expect(1, 8, '\P{	_Is-Space}', "");
Expect(0, 8, '\P{^	_Is-Space}', "");
Error('\p{ -IN:=Telugu}');
Error('\P{ -IN:=Telugu}');
Expect(1, 3199, '\p{intelugu}', "");
Expect(0, 3199, '\p{^intelugu}', "");
Expect(0, 3199, '\P{intelugu}', "");
Expect(1, 3199, '\P{^intelugu}', "");
Expect(0, 3071, '\p{intelugu}', "");
Expect(1, 3071, '\p{^intelugu}', "");
Expect(1, 3071, '\P{intelugu}', "");
Expect(0, 3071, '\P{^intelugu}', "");
Expect(1, 3199, '\p{ in TELUGU}', "");
Expect(0, 3199, '\p{^ in TELUGU}', "");
Expect(0, 3199, '\P{ in TELUGU}', "");
Expect(1, 3199, '\P{^ in TELUGU}', "");
Expect(0, 3071, '\p{ in TELUGU}', "");
Expect(1, 3071, '\p{^ in TELUGU}', "");
Expect(1, 3071, '\P{ in TELUGU}', "");
Expect(0, 3071, '\P{^ in TELUGU}', "");
Error('\p{-/a/CJK	UnifiedIdeographs ExtensionB}');
Error('\P{-/a/CJK	UnifiedIdeographs ExtensionB}');
Expect(1, 173791, '\p{cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^cjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^cjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{cjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^cjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{-	cjkUnified Ideographs extension b}', "");
Expect(0, 173791, '\p{^-	cjkUnified Ideographs extension b}', "");
Expect(0, 173791, '\P{-	cjkUnified Ideographs extension b}', "");
Expect(1, 173791, '\P{^-	cjkUnified Ideographs extension b}', "");
Expect(0, 1, '\p{-	cjkUnified Ideographs extension b}', "");
Expect(1, 1, '\p{^-	cjkUnified Ideographs extension b}', "");
Expect(1, 1, '\P{-	cjkUnified Ideographs extension b}', "");
Expect(0, 1, '\P{^-	cjkUnified Ideographs extension b}', "");
Error('\p{ -IS:=CJKunifiedideographs extension_B}');
Error('\P{ -IS:=CJKunifiedideographs extension_B}');
Expect(1, 173791, '\p{iscjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^iscjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{iscjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^iscjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{iscjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^iscjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{iscjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^iscjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{--Is CJKUNIFIED-Ideographs-EXTENSION B}', "");
Expect(0, 173791, '\p{^--Is CJKUNIFIED-Ideographs-EXTENSION B}', "");
Expect(0, 173791, '\P{--Is CJKUNIFIED-Ideographs-EXTENSION B}', "");
Expect(1, 173791, '\P{^--Is CJKUNIFIED-Ideographs-EXTENSION B}', "");
Expect(0, 1, '\p{--Is CJKUNIFIED-Ideographs-EXTENSION B}', "");
Expect(1, 1, '\p{^--Is CJKUNIFIED-Ideographs-EXTENSION B}', "");
Expect(1, 1, '\P{--Is CJKUNIFIED-Ideographs-EXTENSION B}', "");
Expect(0, 1, '\P{^--Is CJKUNIFIED-Ideographs-EXTENSION B}', "");
Error('\p{_In/a/cjk-unified	IdeographsEXTENSION_B}');
Error('\P{_In/a/cjk-unified	IdeographsEXTENSION_B}');
Expect(1, 173791, '\p{incjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\p{^incjkunifiedideographsextensionb}', "");
Expect(0, 173791, '\P{incjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\P{^incjkunifiedideographsextensionb}', "");
Expect(0, 1, '\p{incjkunifiedideographsextensionb}', "");
Expect(1, 1, '\p{^incjkunifiedideographsextensionb}', "");
Expect(1, 1, '\P{incjkunifiedideographsextensionb}', "");
Expect(0, 1, '\P{^incjkunifiedideographsextensionb}', "");
Expect(1, 173791, '\p{_in	CJK_UNIFIEDIdeographs	EXTENSION b}', "");
Expect(0, 173791, '\p{^_in	CJK_UNIFIEDIdeographs	EXTENSION b}', "");
Expect(0, 173791, '\P{_in	CJK_UNIFIEDIdeographs	EXTENSION b}', "");
Expect(1, 173791, '\P{^_in	CJK_UNIFIEDIdeographs	EXTENSION b}', "");
Expect(0, 1, '\p{_in	CJK_UNIFIEDIdeographs	EXTENSION b}', "");
Expect(1, 1, '\p{^_in	CJK_UNIFIEDIdeographs	EXTENSION b}', "");
Expect(1, 1, '\P{_in	CJK_UNIFIEDIdeographs	EXTENSION b}', "");
Expect(0, 1, '\P{^_in	CJK_UNIFIEDIdeographs	EXTENSION b}', "");
Error('\p{/a/in_TAIViet}');
Error('\P{/a/in_TAIViet}');
Expect(1, 43743, '\p{intaiviet}', "");
Expect(0, 43743, '\p{^intaiviet}', "");
Expect(0, 43743, '\P{intaiviet}', "");
Expect(1, 43743, '\P{^intaiviet}', "");
Expect(0, 43647, '\p{intaiviet}', "");
Expect(1, 43647, '\p{^intaiviet}', "");
Expect(1, 43647, '\P{intaiviet}', "");
Expect(0, 43647, '\P{^intaiviet}', "");
Expect(1, 43743, '\p{	INTai Viet}', "");
Expect(0, 43743, '\p{^	INTai Viet}', "");
Expect(0, 43743, '\P{	INTai Viet}', "");
Expect(1, 43743, '\P{^	INTai Viet}', "");
Expect(0, 43647, '\p{	INTai Viet}', "");
Expect(1, 43647, '\p{^	INTai Viet}', "");
Expect(1, 43647, '\P{	INTai Viet}', "");
Expect(0, 43647, '\P{^	INTai Viet}', "");
Error('\p{/a/		IN	sylotinagri}');
Error('\P{/a/		IN	sylotinagri}');
Expect(1, 43055, '\p{insylotinagri}', "");
Expect(0, 43055, '\p{^insylotinagri}', "");
Expect(0, 43055, '\P{insylotinagri}', "");
Expect(1, 43055, '\P{^insylotinagri}', "");
Expect(0, 43007, '\p{insylotinagri}', "");
Expect(1, 43007, '\p{^insylotinagri}', "");
Expect(1, 43007, '\P{insylotinagri}', "");
Expect(0, 43007, '\P{^insylotinagri}', "");
Expect(1, 43055, '\p{_-inSyloti	NAGRI}', "");
Expect(0, 43055, '\p{^_-inSyloti	NAGRI}', "");
Expect(0, 43055, '\P{_-inSyloti	NAGRI}', "");
Expect(1, 43055, '\P{^_-inSyloti	NAGRI}', "");
Expect(0, 43007, '\p{_-inSyloti	NAGRI}', "");
Expect(1, 43007, '\p{^_-inSyloti	NAGRI}', "");
Expect(1, 43007, '\P{_-inSyloti	NAGRI}', "");
Expect(0, 43007, '\P{^_-inSyloti	NAGRI}', "");
Error('\p{	Cuneiform-numbers	And/a/punctuation}');
Error('\P{	Cuneiform-numbers	And/a/punctuation}');
Expect(1, 74879, '\p{cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^cuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^cuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{cuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^cuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{ _cuneiform numbers-andPUNCTUATION}', "");
Expect(0, 74879, '\p{^ _cuneiform numbers-andPUNCTUATION}', "");
Expect(0, 74879, '\P{ _cuneiform numbers-andPUNCTUATION}', "");
Expect(1, 74879, '\P{^ _cuneiform numbers-andPUNCTUATION}', "");
Expect(0, 74751, '\p{ _cuneiform numbers-andPUNCTUATION}', "");
Expect(1, 74751, '\p{^ _cuneiform numbers-andPUNCTUATION}', "");
Expect(1, 74751, '\P{ _cuneiform numbers-andPUNCTUATION}', "");
Expect(0, 74751, '\P{^ _cuneiform numbers-andPUNCTUATION}', "");
Error('\p{:=Is	Cuneiform NUMBERS-And_Punctuation}');
Error('\P{:=Is	Cuneiform NUMBERS-And_Punctuation}');
Expect(1, 74879, '\p{iscuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^iscuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{iscuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^iscuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{iscuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^iscuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{iscuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^iscuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{-is-CUNEIFORM NUMBERSAnd_punctuation}', "");
Expect(0, 74879, '\p{^-is-CUNEIFORM NUMBERSAnd_punctuation}', "");
Expect(0, 74879, '\P{-is-CUNEIFORM NUMBERSAnd_punctuation}', "");
Expect(1, 74879, '\P{^-is-CUNEIFORM NUMBERSAnd_punctuation}', "");
Expect(0, 74751, '\p{-is-CUNEIFORM NUMBERSAnd_punctuation}', "");
Expect(1, 74751, '\p{^-is-CUNEIFORM NUMBERSAnd_punctuation}', "");
Expect(1, 74751, '\P{-is-CUNEIFORM NUMBERSAnd_punctuation}', "");
Expect(0, 74751, '\P{^-is-CUNEIFORM NUMBERSAnd_punctuation}', "");
Error('\p{_ In/a/Cuneiform	numbers-and-PUNCTUATION}');
Error('\P{_ In/a/Cuneiform	numbers-and-PUNCTUATION}');
Expect(1, 74879, '\p{incuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\p{^incuneiformnumbersandpunctuation}', "");
Expect(0, 74879, '\P{incuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\P{^incuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\p{incuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\p{^incuneiformnumbersandpunctuation}', "");
Expect(1, 74751, '\P{incuneiformnumbersandpunctuation}', "");
Expect(0, 74751, '\P{^incuneiformnumbersandpunctuation}', "");
Expect(1, 74879, '\p{-INCuneiform_NUMBERS_and_PUNCTUATION}', "");
Expect(0, 74879, '\p{^-INCuneiform_NUMBERS_and_PUNCTUATION}', "");
Expect(0, 74879, '\P{-INCuneiform_NUMBERS_and_PUNCTUATION}', "");
Expect(1, 74879, '\P{^-INCuneiform_NUMBERS_and_PUNCTUATION}', "");
Expect(0, 74751, '\p{-INCuneiform_NUMBERS_and_PUNCTUATION}', "");
Expect(1, 74751, '\p{^-INCuneiform_NUMBERS_and_PUNCTUATION}', "");
Expect(1, 74751, '\P{-INCuneiform_NUMBERS_and_PUNCTUATION}', "");
Expect(0, 74751, '\P{^-INCuneiform_NUMBERS_and_PUNCTUATION}', "");
Error('\p{:=_	Kaithi}');
Error('\P{:=_	Kaithi}');
Expect(1, 69825, '\p{kaithi}', "");
Expect(0, 69825, '\p{^kaithi}', "");
Expect(0, 69825, '\P{kaithi}', "");
Expect(1, 69825, '\P{^kaithi}', "");
Expect(0, 69759, '\p{kaithi}', "");
Expect(1, 69759, '\p{^kaithi}', "");
Expect(1, 69759, '\P{kaithi}', "");
Expect(0, 69759, '\P{^kaithi}', "");
Expect(1, 69825, '\p{ -Kaithi}', "");
Expect(0, 69825, '\p{^ -Kaithi}', "");
Expect(0, 69825, '\P{ -Kaithi}', "");
Expect(1, 69825, '\P{^ -Kaithi}', "");
Expect(0, 69759, '\p{ -Kaithi}', "");
Expect(1, 69759, '\p{^ -Kaithi}', "");
Expect(1, 69759, '\P{ -Kaithi}', "");
Expect(0, 69759, '\P{^ -Kaithi}', "");
Error('\p{	 IS:=Kaithi}');
Error('\P{	 IS:=Kaithi}');
Expect(1, 69825, '\p{iskaithi}', "");
Expect(0, 69825, '\p{^iskaithi}', "");
Expect(0, 69825, '\P{iskaithi}', "");
Expect(1, 69825, '\P{^iskaithi}', "");
Expect(0, 69759, '\p{iskaithi}', "");
Expect(1, 69759, '\p{^iskaithi}', "");
Expect(1, 69759, '\P{iskaithi}', "");
Expect(0, 69759, '\P{^iskaithi}', "");
Expect(1, 69825, '\p{	 Is kaithi}', "");
Expect(0, 69825, '\p{^	 Is kaithi}', "");
Expect(0, 69825, '\P{	 Is kaithi}', "");
Expect(1, 69825, '\P{^	 Is kaithi}', "");
Expect(0, 69759, '\p{	 Is kaithi}', "");
Expect(1, 69759, '\p{^	 Is kaithi}', "");
Expect(1, 69759, '\P{	 Is kaithi}', "");
Expect(0, 69759, '\P{^	 Is kaithi}', "");
Error('\p{/a/	-Kthi}');
Error('\P{/a/	-Kthi}');
Expect(1, 69825, '\p{kthi}', "");
Expect(0, 69825, '\p{^kthi}', "");
Expect(0, 69825, '\P{kthi}', "");
Expect(1, 69825, '\P{^kthi}', "");
Expect(0, 69759, '\p{kthi}', "");
Expect(1, 69759, '\p{^kthi}', "");
Expect(1, 69759, '\P{kthi}', "");
Expect(0, 69759, '\P{^kthi}', "");
Expect(1, 69825, '\p{ _KTHI}', "");
Expect(0, 69825, '\p{^ _KTHI}', "");
Expect(0, 69825, '\P{ _KTHI}', "");
Expect(1, 69825, '\P{^ _KTHI}', "");
Expect(0, 69759, '\p{ _KTHI}', "");
Expect(1, 69759, '\p{^ _KTHI}', "");
Expect(1, 69759, '\P{ _KTHI}', "");
Expect(0, 69759, '\P{^ _KTHI}', "");
Error('\p{	:=Is Kthi}');
Error('\P{	:=Is Kthi}');
Expect(1, 69825, '\p{iskthi}', "");
Expect(0, 69825, '\p{^iskthi}', "");
Expect(0, 69825, '\P{iskthi}', "");
Expect(1, 69825, '\P{^iskthi}', "");
Expect(0, 69759, '\p{iskthi}', "");
Expect(1, 69759, '\p{^iskthi}', "");
Expect(1, 69759, '\P{iskthi}', "");
Expect(0, 69759, '\P{^iskthi}', "");
Expect(1, 69825, '\p{	is KTHI}', "");
Expect(0, 69825, '\p{^	is KTHI}', "");
Expect(0, 69825, '\P{	is KTHI}', "");
Expect(1, 69825, '\P{^	is KTHI}', "");
Expect(0, 69759, '\p{	is KTHI}', "");
Expect(1, 69759, '\p{^	is KTHI}', "");
Expect(1, 69759, '\P{	is KTHI}', "");
Expect(0, 69759, '\P{^	is KTHI}', "");
Error('\p{_:=In-Old-ITALIC}');
Error('\P{_:=In-Old-ITALIC}');
Expect(1, 66351, '\p{inolditalic}', "");
Expect(0, 66351, '\p{^inolditalic}', "");
Expect(0, 66351, '\P{inolditalic}', "");
Expect(1, 66351, '\P{^inolditalic}', "");
Expect(0, 66303, '\p{inolditalic}', "");
Expect(1, 66303, '\p{^inolditalic}', "");
Expect(1, 66303, '\P{inolditalic}', "");
Expect(0, 66303, '\P{^inolditalic}', "");
Expect(1, 66351, '\p{ INOLD-Italic}', "");
Expect(0, 66351, '\p{^ INOLD-Italic}', "");
Expect(0, 66351, '\P{ INOLD-Italic}', "");
Expect(1, 66351, '\P{^ INOLD-Italic}', "");
Expect(0, 66303, '\p{ INOLD-Italic}', "");
Expect(1, 66303, '\p{^ INOLD-Italic}', "");
Expect(1, 66303, '\P{ INOLD-Italic}', "");
Expect(0, 66303, '\P{^ INOLD-Italic}', "");
Error('\p{_/a/IN	Avestan}');
Error('\P{_/a/IN	Avestan}');
Expect(1, 68415, '\p{inavestan}', "");
Expect(0, 68415, '\p{^inavestan}', "");
Expect(0, 68415, '\P{inavestan}', "");
Expect(1, 68415, '\P{^inavestan}', "");
Expect(0, 68351, '\p{inavestan}', "");
Expect(1, 68351, '\p{^inavestan}', "");
Expect(1, 68351, '\P{inavestan}', "");
Expect(0, 68351, '\P{^inavestan}', "");
Expect(1, 68415, '\p{ -in	avestan}', "");
Expect(0, 68415, '\p{^ -in	avestan}', "");
Expect(0, 68415, '\P{ -in	avestan}', "");
Expect(1, 68415, '\P{^ -in	avestan}', "");
Expect(0, 68351, '\p{ -in	avestan}', "");
Expect(1, 68351, '\p{^ -in	avestan}', "");
Expect(1, 68351, '\P{ -in	avestan}', "");
Expect(0, 68351, '\P{^ -in	avestan}', "");
Error('\p{/a/	MISCELLANEOUSSymbols}');
Error('\P{/a/	MISCELLANEOUSSymbols}');
Expect(1, 9983, '\p{miscellaneoussymbols}', "");
Expect(0, 9983, '\p{^miscellaneoussymbols}', "");
Expect(0, 9983, '\P{miscellaneoussymbols}', "");
Expect(1, 9983, '\P{^miscellaneoussymbols}', "");
Expect(0, 9727, '\p{miscellaneoussymbols}', "");
Expect(1, 9727, '\p{^miscellaneoussymbols}', "");
Expect(1, 9727, '\P{miscellaneoussymbols}', "");
Expect(0, 9727, '\P{^miscellaneoussymbols}', "");
Expect(1, 9983, '\p{-Miscellaneous Symbols}', "");
Expect(0, 9983, '\p{^-Miscellaneous Symbols}', "");
Expect(0, 9983, '\P{-Miscellaneous Symbols}', "");
Expect(1, 9983, '\P{^-Miscellaneous Symbols}', "");
Expect(0, 9727, '\p{-Miscellaneous Symbols}', "");
Expect(1, 9727, '\p{^-Miscellaneous Symbols}', "");
Expect(1, 9727, '\P{-Miscellaneous Symbols}', "");
Expect(0, 9727, '\P{^-Miscellaneous Symbols}', "");
Error('\p{/a/- Is	Miscellaneous-SYMBOLS}');
Error('\P{/a/- Is	Miscellaneous-SYMBOLS}');
Expect(1, 9983, '\p{ismiscellaneoussymbols}', "");
Expect(0, 9983, '\p{^ismiscellaneoussymbols}', "");
Expect(0, 9983, '\P{ismiscellaneoussymbols}', "");
Expect(1, 9983, '\P{^ismiscellaneoussymbols}', "");
Expect(0, 9727, '\p{ismiscellaneoussymbols}', "");
Expect(1, 9727, '\p{^ismiscellaneoussymbols}', "");
Expect(1, 9727, '\P{ismiscellaneoussymbols}', "");
Expect(0, 9727, '\P{^ismiscellaneoussymbols}', "");
Expect(1, 9983, '\p{-is	MISCELLANEOUS Symbols}', "");
Expect(0, 9983, '\p{^-is	MISCELLANEOUS Symbols}', "");
Expect(0, 9983, '\P{-is	MISCELLANEOUS Symbols}', "");
Expect(1, 9983, '\P{^-is	MISCELLANEOUS Symbols}', "");
Expect(0, 9727, '\p{-is	MISCELLANEOUS Symbols}', "");
Expect(1, 9727, '\p{^-is	MISCELLANEOUS Symbols}', "");
Expect(1, 9727, '\P{-is	MISCELLANEOUS Symbols}', "");
Expect(0, 9727, '\P{^-is	MISCELLANEOUS Symbols}', "");
Error('\p{/a/	In	MISCELLANEOUS	SYMBOLS}');
Error('\P{/a/	In	MISCELLANEOUS	SYMBOLS}');
Expect(1, 9983, '\p{inmiscellaneoussymbols}', "");
Expect(0, 9983, '\p{^inmiscellaneoussymbols}', "");
Expect(0, 9983, '\P{inmiscellaneoussymbols}', "");
Expect(1, 9983, '\P{^inmiscellaneoussymbols}', "");
Expect(0, 9727, '\p{inmiscellaneoussymbols}', "");
Expect(1, 9727, '\p{^inmiscellaneoussymbols}', "");
Expect(1, 9727, '\P{inmiscellaneoussymbols}', "");
Expect(0, 9727, '\P{^inmiscellaneoussymbols}', "");
Expect(1, 9983, '\p{	-IN-MiscellaneousSymbols}', "");
Expect(0, 9983, '\p{^	-IN-MiscellaneousSymbols}', "");
Expect(0, 9983, '\P{	-IN-MiscellaneousSymbols}', "");
Expect(1, 9983, '\P{^	-IN-MiscellaneousSymbols}', "");
Expect(0, 9727, '\p{	-IN-MiscellaneousSymbols}', "");
Expect(1, 9727, '\p{^	-IN-MiscellaneousSymbols}', "");
Expect(1, 9727, '\P{	-IN-MiscellaneousSymbols}', "");
Expect(0, 9727, '\P{^	-IN-MiscellaneousSymbols}', "");
Error('\p{ _In:=javanese}');
Error('\P{ _In:=javanese}');
Expect(1, 43487, '\p{injavanese}', "");
Expect(0, 43487, '\p{^injavanese}', "");
Expect(0, 43487, '\P{injavanese}', "");
Expect(1, 43487, '\P{^injavanese}', "");
Expect(0, 43391, '\p{injavanese}', "");
Expect(1, 43391, '\p{^injavanese}', "");
Expect(1, 43391, '\P{injavanese}', "");
Expect(0, 43391, '\P{^injavanese}', "");
Expect(1, 43487, '\p{ -In-javanese}', "");
Expect(0, 43487, '\p{^ -In-javanese}', "");
Expect(0, 43487, '\P{ -In-javanese}', "");
Expect(1, 43487, '\P{^ -In-javanese}', "");
Expect(0, 43391, '\p{ -In-javanese}', "");
Expect(1, 43391, '\p{^ -In-javanese}', "");
Expect(1, 43391, '\P{ -In-javanese}', "");
Expect(0, 43391, '\P{^ -In-javanese}', "");
Error('\p{:=_-PosixAlnum}');
Error('\P{:=_-PosixAlnum}');
Expect(1, 57, '\p{posixalnum}', "");
Expect(0, 57, '\p{^posixalnum}', "");
Expect(0, 57, '\P{posixalnum}', "");
Expect(1, 57, '\P{^posixalnum}', "");
Expect(0, 47, '\p{posixalnum}', "");
Expect(1, 47, '\p{^posixalnum}', "");
Expect(1, 47, '\P{posixalnum}', "");
Expect(0, 47, '\P{^posixalnum}', "");
Expect(1, 57, '\p{-	POSIXALNUM}', "");
Expect(0, 57, '\p{^-	POSIXALNUM}', "");
Expect(0, 57, '\P{-	POSIXALNUM}', "");
Expect(1, 57, '\P{^-	POSIXALNUM}', "");
Expect(0, 47, '\p{-	POSIXALNUM}', "");
Expect(1, 47, '\p{^-	POSIXALNUM}', "");
Expect(1, 47, '\P{-	POSIXALNUM}', "");
Expect(0, 47, '\P{^-	POSIXALNUM}', "");
Error('\p{ -Is-POSIXALNUM:=}');
Error('\P{ -Is-POSIXALNUM:=}');
Expect(1, 57, '\p{isposixalnum}', "");
Expect(0, 57, '\p{^isposixalnum}', "");
Expect(0, 57, '\P{isposixalnum}', "");
Expect(1, 57, '\P{^isposixalnum}', "");
Expect(0, 47, '\p{isposixalnum}', "");
Expect(1, 47, '\p{^isposixalnum}', "");
Expect(1, 47, '\P{isposixalnum}', "");
Expect(0, 47, '\P{^isposixalnum}', "");
Expect(1, 57, '\p{ _Is_PosixAlnum}', "");
Expect(0, 57, '\p{^ _Is_PosixAlnum}', "");
Expect(0, 57, '\P{ _Is_PosixAlnum}', "");
Expect(1, 57, '\P{^ _Is_PosixAlnum}', "");
Expect(0, 47, '\p{ _Is_PosixAlnum}', "");
Expect(1, 47, '\p{^ _Is_PosixAlnum}', "");
Expect(1, 47, '\P{ _Is_PosixAlnum}', "");
Expect(0, 47, '\P{^ _Is_PosixAlnum}', "");
Error('\p{	-arabic Supplement:=}');
Error('\P{	-arabic Supplement:=}');
Expect(1, 1919, '\p{arabicsupplement}', "");
Expect(0, 1919, '\p{^arabicsupplement}', "");
Expect(0, 1919, '\P{arabicsupplement}', "");
Expect(1, 1919, '\P{^arabicsupplement}', "");
Expect(0, 1871, '\p{arabicsupplement}', "");
Expect(1, 1871, '\p{^arabicsupplement}', "");
Expect(1, 1871, '\P{arabicsupplement}', "");
Expect(0, 1871, '\P{^arabicsupplement}', "");
Expect(1, 1919, '\p{	 Arabic	Supplement}', "");
Expect(0, 1919, '\p{^	 Arabic	Supplement}', "");
Expect(0, 1919, '\P{	 Arabic	Supplement}', "");
Expect(1, 1919, '\P{^	 Arabic	Supplement}', "");
Expect(0, 1871, '\p{	 Arabic	Supplement}', "");
Expect(1, 1871, '\p{^	 Arabic	Supplement}', "");
Expect(1, 1871, '\P{	 Arabic	Supplement}', "");
Expect(0, 1871, '\P{^	 Arabic	Supplement}', "");
Error('\p{:=	-Is	Arabic-SUPPLEMENT}');
Error('\P{:=	-Is	Arabic-SUPPLEMENT}');
Expect(1, 1919, '\p{isarabicsupplement}', "");
Expect(0, 1919, '\p{^isarabicsupplement}', "");
Expect(0, 1919, '\P{isarabicsupplement}', "");
Expect(1, 1919, '\P{^isarabicsupplement}', "");
Expect(0, 1871, '\p{isarabicsupplement}', "");
Expect(1, 1871, '\p{^isarabicsupplement}', "");
Expect(1, 1871, '\P{isarabicsupplement}', "");
Expect(0, 1871, '\P{^isarabicsupplement}', "");
Expect(1, 1919, '\p{		ISARABIC-Supplement}', "");
Expect(0, 1919, '\p{^		ISARABIC-Supplement}', "");
Expect(0, 1919, '\P{		ISARABIC-Supplement}', "");
Expect(1, 1919, '\P{^		ISARABIC-Supplement}', "");
Expect(0, 1871, '\p{		ISARABIC-Supplement}', "");
Expect(1, 1871, '\p{^		ISARABIC-Supplement}', "");
Expect(1, 1871, '\P{		ISARABIC-Supplement}', "");
Expect(0, 1871, '\P{^		ISARABIC-Supplement}', "");
Error('\p{	 In_Arabic_SUPPLEMENT:=}');
Error('\P{	 In_Arabic_SUPPLEMENT:=}');
Expect(1, 1919, '\p{inarabicsupplement}', "");
Expect(0, 1919, '\p{^inarabicsupplement}', "");
Expect(0, 1919, '\P{inarabicsupplement}', "");
Expect(1, 1919, '\P{^inarabicsupplement}', "");
Expect(0, 1871, '\p{inarabicsupplement}', "");
Expect(1, 1871, '\p{^inarabicsupplement}', "");
Expect(1, 1871, '\P{inarabicsupplement}', "");
Expect(0, 1871, '\P{^inarabicsupplement}', "");
Expect(1, 1919, '\p{ _in arabic-SUPPLEMENT}', "");
Expect(0, 1919, '\p{^ _in arabic-SUPPLEMENT}', "");
Expect(0, 1919, '\P{ _in arabic-SUPPLEMENT}', "");
Expect(1, 1919, '\P{^ _in arabic-SUPPLEMENT}', "");
Expect(0, 1871, '\p{ _in arabic-SUPPLEMENT}', "");
Expect(1, 1871, '\p{^ _in arabic-SUPPLEMENT}', "");
Expect(1, 1871, '\P{ _in arabic-SUPPLEMENT}', "");
Expect(0, 1871, '\P{^ _in arabic-SUPPLEMENT}', "");
Error('\p{:=_CJK compatibility_IDEOGRAPHSSupplement}');
Error('\P{:=_CJK compatibility_IDEOGRAPHSSupplement}');
Expect(1, 195103, '\p{cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^cjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^cjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{cjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^cjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{	_CJK_Compatibility_Ideographs	Supplement}', "");
Expect(0, 195103, '\p{^	_CJK_Compatibility_Ideographs	Supplement}', "");
Expect(0, 195103, '\P{	_CJK_Compatibility_Ideographs	Supplement}', "");
Expect(1, 195103, '\P{^	_CJK_Compatibility_Ideographs	Supplement}', "");
Expect(0, 194559, '\p{	_CJK_Compatibility_Ideographs	Supplement}', "");
Expect(1, 194559, '\p{^	_CJK_Compatibility_Ideographs	Supplement}', "");
Expect(1, 194559, '\P{	_CJK_Compatibility_Ideographs	Supplement}', "");
Expect(0, 194559, '\P{^	_CJK_Compatibility_Ideographs	Supplement}', "");
Error('\p{-/a/IS cjk_compatibility-Ideographs Supplement}');
Error('\P{-/a/IS cjk_compatibility-Ideographs Supplement}');
Expect(1, 195103, '\p{iscjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^iscjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{iscjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^iscjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{iscjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^iscjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{iscjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^iscjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{__Is_CJK-Compatibility_IDEOGRAPHSSupplement}', "");
Expect(0, 195103, '\p{^__Is_CJK-Compatibility_IDEOGRAPHSSupplement}', "");
Expect(0, 195103, '\P{__Is_CJK-Compatibility_IDEOGRAPHSSupplement}', "");
Expect(1, 195103, '\P{^__Is_CJK-Compatibility_IDEOGRAPHSSupplement}', "");
Expect(0, 194559, '\p{__Is_CJK-Compatibility_IDEOGRAPHSSupplement}', "");
Expect(1, 194559, '\p{^__Is_CJK-Compatibility_IDEOGRAPHSSupplement}', "");
Expect(1, 194559, '\P{__Is_CJK-Compatibility_IDEOGRAPHSSupplement}', "");
Expect(0, 194559, '\P{^__Is_CJK-Compatibility_IDEOGRAPHSSupplement}', "");
Error('\p{-/a/IN-CJK Compatibility	Ideographs-Supplement}');
Error('\P{-/a/IN-CJK Compatibility	Ideographs-Supplement}');
Expect(1, 195103, '\p{incjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\p{^incjkcompatibilityideographssupplement}', "");
Expect(0, 195103, '\P{incjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\P{^incjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\p{incjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\p{^incjkcompatibilityideographssupplement}', "");
Expect(1, 194559, '\P{incjkcompatibilityideographssupplement}', "");
Expect(0, 194559, '\P{^incjkcompatibilityideographssupplement}', "");
Expect(1, 195103, '\p{	In	CJK COMPATIBILITY-Ideographs-SUPPLEMENT}', "");
Expect(0, 195103, '\p{^	In	CJK COMPATIBILITY-Ideographs-SUPPLEMENT}', "");
Expect(0, 195103, '\P{	In	CJK COMPATIBILITY-Ideographs-SUPPLEMENT}', "");
Expect(1, 195103, '\P{^	In	CJK COMPATIBILITY-Ideographs-SUPPLEMENT}', "");
Expect(0, 194559, '\p{	In	CJK COMPATIBILITY-Ideographs-SUPPLEMENT}', "");
Expect(1, 194559, '\p{^	In	CJK COMPATIBILITY-Ideographs-SUPPLEMENT}', "");
Expect(1, 194559, '\P{	In	CJK COMPATIBILITY-Ideographs-SUPPLEMENT}', "");
Expect(0, 194559, '\P{^	In	CJK COMPATIBILITY-Ideographs-SUPPLEMENT}', "");
Error('\p{ _INGurmukhi/a/}');
Error('\P{ _INGurmukhi/a/}');
Expect(1, 2687, '\p{ingurmukhi}', "");
Expect(0, 2687, '\p{^ingurmukhi}', "");
Expect(0, 2687, '\P{ingurmukhi}', "");
Expect(1, 2687, '\P{^ingurmukhi}', "");
Expect(0, 2559, '\p{ingurmukhi}', "");
Expect(1, 2559, '\p{^ingurmukhi}', "");
Expect(1, 2559, '\P{ingurmukhi}', "");
Expect(0, 2559, '\P{^ingurmukhi}', "");
Expect(1, 2687, '\p{-in_Gurmukhi}', "");
Expect(0, 2687, '\p{^-in_Gurmukhi}', "");
Expect(0, 2687, '\P{-in_Gurmukhi}', "");
Expect(1, 2687, '\P{^-in_Gurmukhi}', "");
Expect(0, 2559, '\p{-in_Gurmukhi}', "");
Expect(1, 2559, '\p{^-in_Gurmukhi}', "");
Expect(1, 2559, '\P{-in_Gurmukhi}', "");
Expect(0, 2559, '\P{^-in_Gurmukhi}', "");
Error('\p{:=PHAISTOS_Disc}');
Error('\P{:=PHAISTOS_Disc}');
Expect(1, 66047, '\p{phaistosdisc}', "");
Expect(0, 66047, '\p{^phaistosdisc}', "");
Expect(0, 66047, '\P{phaistosdisc}', "");
Expect(1, 66047, '\P{^phaistosdisc}', "");
Expect(0, 65999, '\p{phaistosdisc}', "");
Expect(1, 65999, '\p{^phaistosdisc}', "");
Expect(1, 65999, '\P{phaistosdisc}', "");
Expect(0, 65999, '\P{^phaistosdisc}', "");
Expect(1, 66047, '\p{_Phaistos	disc}', "");
Expect(0, 66047, '\p{^_Phaistos	disc}', "");
Expect(0, 66047, '\P{_Phaistos	disc}', "");
Expect(1, 66047, '\P{^_Phaistos	disc}', "");
Expect(0, 65999, '\p{_Phaistos	disc}', "");
Expect(1, 65999, '\p{^_Phaistos	disc}', "");
Expect(1, 65999, '\P{_Phaistos	disc}', "");
Expect(0, 65999, '\P{^_Phaistos	disc}', "");
Error('\p{:= _Is Phaistos	Disc}');
Error('\P{:= _Is Phaistos	Disc}');
Expect(1, 66047, '\p{isphaistosdisc}', "");
Expect(0, 66047, '\p{^isphaistosdisc}', "");
Expect(0, 66047, '\P{isphaistosdisc}', "");
Expect(1, 66047, '\P{^isphaistosdisc}', "");
Expect(0, 65999, '\p{isphaistosdisc}', "");
Expect(1, 65999, '\p{^isphaistosdisc}', "");
Expect(1, 65999, '\P{isphaistosdisc}', "");
Expect(0, 65999, '\P{^isphaistosdisc}', "");
Expect(1, 66047, '\p{_Is Phaistos Disc}', "");
Expect(0, 66047, '\p{^_Is Phaistos Disc}', "");
Expect(0, 66047, '\P{_Is Phaistos Disc}', "");
Expect(1, 66047, '\P{^_Is Phaistos Disc}', "");
Expect(0, 65999, '\p{_Is Phaistos Disc}', "");
Expect(1, 65999, '\p{^_Is Phaistos Disc}', "");
Expect(1, 65999, '\P{_Is Phaistos Disc}', "");
Expect(0, 65999, '\P{^_Is Phaistos Disc}', "");
Error('\p{_ InPhaistos:=disc}');
Error('\P{_ InPhaistos:=disc}');
Expect(1, 66047, '\p{inphaistosdisc}', "");
Expect(0, 66047, '\p{^inphaistosdisc}', "");
Expect(0, 66047, '\P{inphaistosdisc}', "");
Expect(1, 66047, '\P{^inphaistosdisc}', "");
Expect(0, 65999, '\p{inphaistosdisc}', "");
Expect(1, 65999, '\p{^inphaistosdisc}', "");
Expect(1, 65999, '\P{inphaistosdisc}', "");
Expect(0, 65999, '\P{^inphaistosdisc}', "");
Expect(1, 66047, '\p{	 INphaistos-DISC}', "");
Expect(0, 66047, '\p{^	 INphaistos-DISC}', "");
Expect(0, 66047, '\P{	 INphaistos-DISC}', "");
Expect(1, 66047, '\P{^	 INphaistos-DISC}', "");
Expect(0, 65999, '\p{	 INphaistos-DISC}', "");
Expect(1, 65999, '\p{^	 INphaistos-DISC}', "");
Expect(1, 65999, '\P{	 INphaistos-DISC}', "");
Expect(0, 65999, '\P{^	 INphaistos-DISC}', "");
Error('\p{-:=-CombAbove}');
Error('\P{-:=-CombAbove}');
Expect(1, 788, '\p{_CombAbove}', "");
Expect(0, 788, '\p{^_CombAbove}', "");
Expect(0, 788, '\P{_CombAbove}', "");
Expect(1, 788, '\P{^_CombAbove}', "");
Expect(0, 767, '\p{_CombAbove}', "");
Expect(1, 767, '\p{^_CombAbove}', "");
Expect(1, 767, '\P{_CombAbove}', "");
Expect(0, 767, '\P{^_CombAbove}', "");
Error('\p{_:=Other-ID-CONTINUE}');
Error('\P{_:=Other-ID-CONTINUE}');
Expect(1, 183, '\p{otheridcontinue}', 'deprecated');
Expect(0, 183, '\p{^otheridcontinue}', 'deprecated');
Expect(0, 183, '\P{otheridcontinue}', 'deprecated');
Expect(1, 183, '\P{^otheridcontinue}', 'deprecated');
Expect(0, 182, '\p{otheridcontinue}', 'deprecated');
Expect(1, 182, '\p{^otheridcontinue}', 'deprecated');
Expect(1, 182, '\P{otheridcontinue}', 'deprecated');
Expect(0, 182, '\P{^otheridcontinue}', 'deprecated');
Expect(1, 183, '\p{	Other ID Continue}', 'deprecated');
Expect(0, 183, '\p{^	Other ID Continue}', 'deprecated');
Expect(0, 183, '\P{	Other ID Continue}', 'deprecated');
Expect(1, 183, '\P{^	Other ID Continue}', 'deprecated');
Expect(0, 182, '\p{	Other ID Continue}', 'deprecated');
Expect(1, 182, '\p{^	Other ID Continue}', 'deprecated');
Expect(1, 182, '\P{	Other ID Continue}', 'deprecated');
Expect(0, 182, '\P{^	Other ID Continue}', 'deprecated');
Error('\p{_ Is_Other-id	Continue:=}');
Error('\P{_ Is_Other-id	Continue:=}');
Expect(1, 183, '\p{isotheridcontinue}', 'deprecated');
Expect(0, 183, '\p{^isotheridcontinue}', 'deprecated');
Expect(0, 183, '\P{isotheridcontinue}', 'deprecated');
Expect(1, 183, '\P{^isotheridcontinue}', 'deprecated');
Expect(0, 182, '\p{isotheridcontinue}', 'deprecated');
Expect(1, 182, '\p{^isotheridcontinue}', 'deprecated');
Expect(1, 182, '\P{isotheridcontinue}', 'deprecated');
Expect(0, 182, '\P{^isotheridcontinue}', 'deprecated');
Expect(1, 183, '\p{  Is-OtherID-continue}', 'deprecated');
Expect(0, 183, '\p{^  Is-OtherID-continue}', 'deprecated');
Expect(0, 183, '\P{  Is-OtherID-continue}', 'deprecated');
Expect(1, 183, '\P{^  Is-OtherID-continue}', 'deprecated');
Expect(0, 182, '\p{  Is-OtherID-continue}', 'deprecated');
Expect(1, 182, '\p{^  Is-OtherID-continue}', 'deprecated');
Expect(1, 182, '\P{  Is-OtherID-continue}', 'deprecated');
Expect(0, 182, '\P{^  Is-OtherID-continue}', 'deprecated');
Error('\p{-:=OIDC}');
Error('\P{-:=OIDC}');
Expect(1, 183, '\p{oidc}', 'deprecated');
Expect(0, 183, '\p{^oidc}', 'deprecated');
Expect(0, 183, '\P{oidc}', 'deprecated');
Expect(1, 183, '\P{^oidc}', 'deprecated');
Expect(0, 182, '\p{oidc}', 'deprecated');
Expect(1, 182, '\p{^oidc}', 'deprecated');
Expect(1, 182, '\P{oidc}', 'deprecated');
Expect(0, 182, '\P{^oidc}', 'deprecated');
Expect(1, 183, '\p{-_oidc}', 'deprecated');
Expect(0, 183, '\p{^-_oidc}', 'deprecated');
Expect(0, 183, '\P{-_oidc}', 'deprecated');
Expect(1, 183, '\P{^-_oidc}', 'deprecated');
Expect(0, 182, '\p{-_oidc}', 'deprecated');
Expect(1, 182, '\p{^-_oidc}', 'deprecated');
Expect(1, 182, '\P{-_oidc}', 'deprecated');
Expect(0, 182, '\P{^-_oidc}', 'deprecated');
Error('\p{ :=Is OIDC}');
Error('\P{ :=Is OIDC}');
Expect(1, 183, '\p{isoidc}', 'deprecated');
Expect(0, 183, '\p{^isoidc}', 'deprecated');
Expect(0, 183, '\P{isoidc}', 'deprecated');
Expect(1, 183, '\P{^isoidc}', 'deprecated');
Expect(0, 182, '\p{isoidc}', 'deprecated');
Expect(1, 182, '\p{^isoidc}', 'deprecated');
Expect(1, 182, '\P{isoidc}', 'deprecated');
Expect(0, 182, '\P{^isoidc}', 'deprecated');
Expect(1, 183, '\p{_-Is_oidc}', 'deprecated');
Expect(0, 183, '\p{^_-Is_oidc}', 'deprecated');
Expect(0, 183, '\P{_-Is_oidc}', 'deprecated');
Expect(1, 183, '\P{^_-Is_oidc}', 'deprecated');
Expect(0, 182, '\p{_-Is_oidc}', 'deprecated');
Expect(1, 182, '\p{^_-Is_oidc}', 'deprecated');
Expect(1, 182, '\P{_-Is_oidc}', 'deprecated');
Expect(0, 182, '\P{^_-Is_oidc}', 'deprecated');
Error('\p{	-BAMUM:=}');
Error('\P{	-BAMUM:=}');
Expect(1, 42743, '\p{bamum}', "");
Expect(0, 42743, '\p{^bamum}', "");
Expect(0, 42743, '\P{bamum}', "");
Expect(1, 42743, '\P{^bamum}', "");
Expect(0, 42655, '\p{bamum}', "");
Expect(1, 42655, '\p{^bamum}', "");
Expect(1, 42655, '\P{bamum}', "");
Expect(0, 42655, '\P{^bamum}', "");
Expect(1, 42743, '\p{	-Bamum}', "");
Expect(0, 42743, '\p{^	-Bamum}', "");
Expect(0, 42743, '\P{	-Bamum}', "");
Expect(1, 42743, '\P{^	-Bamum}', "");
Expect(0, 42655, '\p{	-Bamum}', "");
Expect(1, 42655, '\p{^	-Bamum}', "");
Expect(1, 42655, '\P{	-Bamum}', "");
Expect(0, 42655, '\P{^	-Bamum}', "");
Error('\p{ Is:=bamum}');
Error('\P{ Is:=bamum}');
Expect(1, 42743, '\p{isbamum}', "");
Expect(0, 42743, '\p{^isbamum}', "");
Expect(0, 42743, '\P{isbamum}', "");
Expect(1, 42743, '\P{^isbamum}', "");
Expect(0, 42655, '\p{isbamum}', "");
Expect(1, 42655, '\p{^isbamum}', "");
Expect(1, 42655, '\P{isbamum}', "");
Expect(0, 42655, '\P{^isbamum}', "");
Expect(1, 42743, '\p{	-Is Bamum}', "");
Expect(0, 42743, '\p{^	-Is Bamum}', "");
Expect(0, 42743, '\P{	-Is Bamum}', "");
Expect(1, 42743, '\P{^	-Is Bamum}', "");
Expect(0, 42655, '\p{	-Is Bamum}', "");
Expect(1, 42655, '\p{^	-Is Bamum}', "");
Expect(1, 42655, '\P{	-Is Bamum}', "");
Expect(0, 42655, '\P{^	-Is Bamum}', "");
Error('\p{--Bamu/a/}');
Error('\P{--Bamu/a/}');
Expect(1, 42743, '\p{bamu}', "");
Expect(0, 42743, '\p{^bamu}', "");
Expect(0, 42743, '\P{bamu}', "");
Expect(1, 42743, '\P{^bamu}', "");
Expect(0, 42655, '\p{bamu}', "");
Expect(1, 42655, '\p{^bamu}', "");
Expect(1, 42655, '\P{bamu}', "");
Expect(0, 42655, '\P{^bamu}', "");
Expect(1, 42743, '\p{  bamu}', "");
Expect(0, 42743, '\p{^  bamu}', "");
Expect(0, 42743, '\P{  bamu}', "");
Expect(1, 42743, '\P{^  bamu}', "");
Expect(0, 42655, '\p{  bamu}', "");
Expect(1, 42655, '\p{^  bamu}', "");
Expect(1, 42655, '\P{  bamu}', "");
Expect(0, 42655, '\P{^  bamu}', "");
Error('\p{ :=IsBamu}');
Error('\P{ :=IsBamu}');
Expect(1, 42743, '\p{isbamu}', "");
Expect(0, 42743, '\p{^isbamu}', "");
Expect(0, 42743, '\P{isbamu}', "");
Expect(1, 42743, '\P{^isbamu}', "");
Expect(0, 42655, '\p{isbamu}', "");
Expect(1, 42655, '\p{^isbamu}', "");
Expect(1, 42655, '\P{isbamu}', "");
Expect(0, 42655, '\P{^isbamu}', "");
Expect(1, 42743, '\p{- Is-bamu}', "");
Expect(0, 42743, '\p{^- Is-bamu}', "");
Expect(0, 42743, '\P{- Is-bamu}', "");
Expect(1, 42743, '\P{^- Is-bamu}', "");
Expect(0, 42655, '\p{- Is-bamu}', "");
Expect(1, 42655, '\p{^- Is-bamu}', "");
Expect(1, 42655, '\P{- Is-bamu}', "");
Expect(0, 42655, '\P{^- Is-bamu}', "");
Error('\p{	 In	bengali/a/}');
Error('\P{	 In	bengali/a/}');
Expect(1, 2559, '\p{inbengali}', "");
Expect(0, 2559, '\p{^inbengali}', "");
Expect(0, 2559, '\P{inbengali}', "");
Expect(1, 2559, '\P{^inbengali}', "");
Expect(0, 2431, '\p{inbengali}', "");
Expect(1, 2431, '\p{^inbengali}', "");
Expect(1, 2431, '\P{inbengali}', "");
Expect(0, 2431, '\P{^inbengali}', "");
Expect(1, 2559, '\p{-IN	bengali}', "");
Expect(0, 2559, '\p{^-IN	bengali}', "");
Expect(0, 2559, '\P{-IN	bengali}', "");
Expect(1, 2559, '\P{^-IN	bengali}', "");
Expect(0, 2431, '\p{-IN	bengali}', "");
Expect(1, 2431, '\p{^-IN	bengali}', "");
Expect(1, 2431, '\P{-IN	bengali}', "");
Expect(0, 2431, '\P{^-IN	bengali}', "");
Error('\p{-cuneiform/a/}');
Error('\P{-cuneiform/a/}');
Expect(1, 74606, '\p{cuneiform}', "");
Expect(0, 74606, '\p{^cuneiform}', "");
Expect(0, 74606, '\P{cuneiform}', "");
Expect(1, 74606, '\P{^cuneiform}', "");
Expect(0, 73727, '\p{cuneiform}', "");
Expect(1, 73727, '\p{^cuneiform}', "");
Expect(1, 73727, '\P{cuneiform}', "");
Expect(0, 73727, '\P{^cuneiform}', "");
Expect(1, 74606, '\p{ cuneiform}', "");
Expect(0, 74606, '\p{^ cuneiform}', "");
Expect(0, 74606, '\P{ cuneiform}', "");
Expect(1, 74606, '\P{^ cuneiform}', "");
Expect(0, 73727, '\p{ cuneiform}', "");
Expect(1, 73727, '\p{^ cuneiform}', "");
Expect(1, 73727, '\P{ cuneiform}', "");
Expect(0, 73727, '\P{^ cuneiform}', "");
Error('\p{:=	-Is	Cuneiform}');
Error('\P{:=	-Is	Cuneiform}');
Expect(1, 74606, '\p{iscuneiform}', "");
Expect(0, 74606, '\p{^iscuneiform}', "");
Expect(0, 74606, '\P{iscuneiform}', "");
Expect(1, 74606, '\P{^iscuneiform}', "");
Expect(0, 73727, '\p{iscuneiform}', "");
Expect(1, 73727, '\p{^iscuneiform}', "");
Expect(1, 73727, '\P{iscuneiform}', "");
Expect(0, 73727, '\P{^iscuneiform}', "");
Expect(1, 74606, '\p{_IS_Cuneiform}', "");
Expect(0, 74606, '\p{^_IS_Cuneiform}', "");
Expect(0, 74606, '\P{_IS_Cuneiform}', "");
Expect(1, 74606, '\P{^_IS_Cuneiform}', "");
Expect(0, 73727, '\p{_IS_Cuneiform}', "");
Expect(1, 73727, '\p{^_IS_Cuneiform}', "");
Expect(1, 73727, '\P{_IS_Cuneiform}', "");
Expect(0, 73727, '\P{^_IS_Cuneiform}', "");
Error('\p{_	Xsux/a/}');
Error('\P{_	Xsux/a/}');
Expect(1, 74606, '\p{xsux}', "");
Expect(0, 74606, '\p{^xsux}', "");
Expect(0, 74606, '\P{xsux}', "");
Expect(1, 74606, '\P{^xsux}', "");
Expect(0, 73727, '\p{xsux}', "");
Expect(1, 73727, '\p{^xsux}', "");
Expect(1, 73727, '\P{xsux}', "");
Expect(0, 73727, '\P{^xsux}', "");
Expect(1, 74606, '\p{-Xsux}', "");
Expect(0, 74606, '\p{^-Xsux}', "");
Expect(0, 74606, '\P{-Xsux}', "");
Expect(1, 74606, '\P{^-Xsux}', "");
Expect(0, 73727, '\p{-Xsux}', "");
Expect(1, 73727, '\p{^-Xsux}', "");
Expect(1, 73727, '\P{-Xsux}', "");
Expect(0, 73727, '\P{^-Xsux}', "");
Error('\p{	/a/Is xsux}');
Error('\P{	/a/Is xsux}');
Expect(1, 74606, '\p{isxsux}', "");
Expect(0, 74606, '\p{^isxsux}', "");
Expect(0, 74606, '\P{isxsux}', "");
Expect(1, 74606, '\P{^isxsux}', "");
Expect(0, 73727, '\p{isxsux}', "");
Expect(1, 73727, '\p{^isxsux}', "");
Expect(1, 73727, '\P{isxsux}', "");
Expect(0, 73727, '\P{^isxsux}', "");
Expect(1, 74606, '\p{_	Is_Xsux}', "");
Expect(0, 74606, '\p{^_	Is_Xsux}', "");
Expect(0, 74606, '\P{_	Is_Xsux}', "");
Expect(1, 74606, '\P{^_	Is_Xsux}', "");
Expect(0, 73727, '\p{_	Is_Xsux}', "");
Expect(1, 73727, '\p{^_	Is_Xsux}', "");
Expect(1, 73727, '\P{_	Is_Xsux}', "");
Expect(0, 73727, '\P{^_	Is_Xsux}', "");
Error('\p{-HANGUL/a/Jamo	ExtendedA}');
Error('\P{-HANGUL/a/Jamo	ExtendedA}');
Expect(1, 43391, '\p{hanguljamoextendeda}', "");
Expect(0, 43391, '\p{^hanguljamoextendeda}', "");
Expect(0, 43391, '\P{hanguljamoextendeda}', "");
Expect(1, 43391, '\P{^hanguljamoextendeda}', "");
Expect(0, 43359, '\p{hanguljamoextendeda}', "");
Expect(1, 43359, '\p{^hanguljamoextendeda}', "");
Expect(1, 43359, '\P{hanguljamoextendeda}', "");
Expect(0, 43359, '\P{^hanguljamoextendeda}', "");
Expect(1, 43391, '\p{	Hangul	Jamo extended	A}', "");
Expect(0, 43391, '\p{^	Hangul	Jamo extended	A}', "");
Expect(0, 43391, '\P{	Hangul	Jamo extended	A}', "");
Expect(1, 43391, '\P{^	Hangul	Jamo extended	A}', "");
Expect(0, 43359, '\p{	Hangul	Jamo extended	A}', "");
Expect(1, 43359, '\p{^	Hangul	Jamo extended	A}', "");
Expect(1, 43359, '\P{	Hangul	Jamo extended	A}', "");
Expect(0, 43359, '\P{^	Hangul	Jamo extended	A}', "");
Error('\p{-/a/Ishangul	JAMO extended	A}');
Error('\P{-/a/Ishangul	JAMO extended	A}');
Expect(1, 43391, '\p{ishanguljamoextendeda}', "");
Expect(0, 43391, '\p{^ishanguljamoextendeda}', "");
Expect(0, 43391, '\P{ishanguljamoextendeda}', "");
Expect(1, 43391, '\P{^ishanguljamoextendeda}', "");
Expect(0, 43359, '\p{ishanguljamoextendeda}', "");
Expect(1, 43359, '\p{^ishanguljamoextendeda}', "");
Expect(1, 43359, '\P{ishanguljamoextendeda}', "");
Expect(0, 43359, '\P{^ishanguljamoextendeda}', "");
Expect(1, 43391, '\p{  Is-hangul	jamo-Extended	A}', "");
Expect(0, 43391, '\p{^  Is-hangul	jamo-Extended	A}', "");
Expect(0, 43391, '\P{  Is-hangul	jamo-Extended	A}', "");
Expect(1, 43391, '\P{^  Is-hangul	jamo-Extended	A}', "");
Expect(0, 43359, '\p{  Is-hangul	jamo-Extended	A}', "");
Expect(1, 43359, '\p{^  Is-hangul	jamo-Extended	A}', "");
Expect(1, 43359, '\P{  Is-hangul	jamo-Extended	A}', "");
Expect(0, 43359, '\P{^  Is-hangul	jamo-Extended	A}', "");
Error('\p{	in	hangul_Jamo EXTENDED_A:=}');
Error('\P{	in	hangul_Jamo EXTENDED_A:=}');
Expect(1, 43391, '\p{inhanguljamoextendeda}', "");
Expect(0, 43391, '\p{^inhanguljamoextendeda}', "");
Expect(0, 43391, '\P{inhanguljamoextendeda}', "");
Expect(1, 43391, '\P{^inhanguljamoextendeda}', "");
Expect(0, 43359, '\p{inhanguljamoextendeda}', "");
Expect(1, 43359, '\p{^inhanguljamoextendeda}', "");
Expect(1, 43359, '\P{inhanguljamoextendeda}', "");
Expect(0, 43359, '\P{^inhanguljamoextendeda}', "");
Expect(1, 43391, '\p{		IN Hangul Jamo-Extended	A}', "");
Expect(0, 43391, '\p{^		IN Hangul Jamo-Extended	A}', "");
Expect(0, 43391, '\P{		IN Hangul Jamo-Extended	A}', "");
Expect(1, 43391, '\P{^		IN Hangul Jamo-Extended	A}', "");
Expect(0, 43359, '\p{		IN Hangul Jamo-Extended	A}', "");
Expect(1, 43359, '\p{^		IN Hangul Jamo-Extended	A}', "");
Expect(1, 43359, '\P{		IN Hangul Jamo-Extended	A}', "");
Expect(0, 43359, '\P{^		IN Hangul Jamo-Extended	A}', "");
Error('\p{:=_-cased}');
Error('\P{:=_-cased}');
Expect(1, 90, '\p{cased}', "");
Expect(0, 90, '\p{^cased}', "");
Expect(0, 90, '\P{cased}', "");
Expect(1, 90, '\P{^cased}', "");
Expect(0, 64, '\p{cased}', "");
Expect(1, 64, '\p{^cased}', "");
Expect(1, 64, '\P{cased}', "");
Expect(0, 64, '\P{^cased}', "");
Expect(1, 90, '\p{  Cased}', "");
Expect(0, 90, '\p{^  Cased}', "");
Expect(0, 90, '\P{  Cased}', "");
Expect(1, 90, '\P{^  Cased}', "");
Expect(0, 64, '\p{  Cased}', "");
Expect(1, 64, '\p{^  Cased}', "");
Expect(1, 64, '\P{  Cased}', "");
Expect(0, 64, '\P{^  Cased}', "");
Error('\p{ :=Iscased}');
Error('\P{ :=Iscased}');
Expect(1, 90, '\p{iscased}', "");
Expect(0, 90, '\p{^iscased}', "");
Expect(0, 90, '\P{iscased}', "");
Expect(1, 90, '\P{^iscased}', "");
Expect(0, 64, '\p{iscased}', "");
Expect(1, 64, '\p{^iscased}', "");
Expect(1, 64, '\P{iscased}', "");
Expect(0, 64, '\P{^iscased}', "");
Expect(1, 90, '\p{		Is_Cased}', "");
Expect(0, 90, '\p{^		Is_Cased}', "");
Expect(0, 90, '\P{		Is_Cased}', "");
Expect(1, 90, '\P{^		Is_Cased}', "");
Expect(0, 64, '\p{		Is_Cased}', "");
Expect(1, 64, '\p{^		Is_Cased}', "");
Expect(1, 64, '\P{		Is_Cased}', "");
Expect(0, 64, '\P{^		Is_Cased}', "");
Error('\p{ 	In:=Katakana}');
Error('\P{ 	In:=Katakana}');
Expect(1, 12543, '\p{inkatakana}', "");
Expect(0, 12543, '\p{^inkatakana}', "");
Expect(0, 12543, '\P{inkatakana}', "");
Expect(1, 12543, '\P{^inkatakana}', "");
Expect(0, 12447, '\p{inkatakana}', "");
Expect(1, 12447, '\p{^inkatakana}', "");
Expect(1, 12447, '\P{inkatakana}', "");
Expect(0, 12447, '\P{^inkatakana}', "");
Expect(1, 12543, '\p{		inKatakana}', "");
Expect(0, 12543, '\p{^		inKatakana}', "");
Expect(0, 12543, '\P{		inKatakana}', "");
Expect(1, 12543, '\P{^		inKatakana}', "");
Expect(0, 12447, '\p{		inKatakana}', "");
Expect(1, 12447, '\p{^		inKatakana}', "");
Expect(1, 12447, '\P{		inKatakana}', "");
Expect(0, 12447, '\P{^		inKatakana}', "");
Error('\p{_:=ARABIC PRESENTATION-Forms_A}');
Error('\P{_:=ARABIC PRESENTATION-Forms_A}');
Expect(1, 65023, '\p{arabicpresentationformsa}', "");
Expect(0, 65023, '\p{^arabicpresentationformsa}', "");
Expect(0, 65023, '\P{arabicpresentationformsa}', "");
Expect(1, 65023, '\P{^arabicpresentationformsa}', "");
Expect(0, 64335, '\p{arabicpresentationformsa}', "");
Expect(1, 64335, '\p{^arabicpresentationformsa}', "");
Expect(1, 64335, '\P{arabicpresentationformsa}', "");
Expect(0, 64335, '\P{^arabicpresentationformsa}', "");
Expect(1, 65023, '\p{ 	arabic	PRESENTATIONFORMS A}', "");
Expect(0, 65023, '\p{^ 	arabic	PRESENTATIONFORMS A}', "");
Expect(0, 65023, '\P{ 	arabic	PRESENTATIONFORMS A}', "");
Expect(1, 65023, '\P{^ 	arabic	PRESENTATIONFORMS A}', "");
Expect(0, 64335, '\p{ 	arabic	PRESENTATIONFORMS A}', "");
Expect(1, 64335, '\p{^ 	arabic	PRESENTATIONFORMS A}', "");
Expect(1, 64335, '\P{ 	arabic	PRESENTATIONFORMS A}', "");
Expect(0, 64335, '\P{^ 	arabic	PRESENTATIONFORMS A}', "");
Error('\p{-_is	arabicpresentationFormsa:=}');
Error('\P{-_is	arabicpresentationFormsa:=}');
Expect(1, 65023, '\p{isarabicpresentationformsa}', "");
Expect(0, 65023, '\p{^isarabicpresentationformsa}', "");
Expect(0, 65023, '\P{isarabicpresentationformsa}', "");
Expect(1, 65023, '\P{^isarabicpresentationformsa}', "");
Expect(0, 64335, '\p{isarabicpresentationformsa}', "");
Expect(1, 64335, '\p{^isarabicpresentationformsa}', "");
Expect(1, 64335, '\P{isarabicpresentationformsa}', "");
Expect(0, 64335, '\P{^isarabicpresentationformsa}', "");
Expect(1, 65023, '\p{	_Is_ArabicPRESENTATIONForms_a}', "");
Expect(0, 65023, '\p{^	_Is_ArabicPRESENTATIONForms_a}', "");
Expect(0, 65023, '\P{	_Is_ArabicPRESENTATIONForms_a}', "");
Expect(1, 65023, '\P{^	_Is_ArabicPRESENTATIONForms_a}', "");
Expect(0, 64335, '\p{	_Is_ArabicPRESENTATIONForms_a}', "");
Expect(1, 64335, '\p{^	_Is_ArabicPRESENTATIONForms_a}', "");
Expect(1, 64335, '\P{	_Is_ArabicPRESENTATIONForms_a}', "");
Expect(0, 64335, '\P{^	_Is_ArabicPRESENTATIONForms_a}', "");
Error('\p{	-inARABIC/a/Presentation FORMS	A}');
Error('\P{	-inARABIC/a/Presentation FORMS	A}');
Expect(1, 65023, '\p{inarabicpresentationformsa}', "");
Expect(0, 65023, '\p{^inarabicpresentationformsa}', "");
Expect(0, 65023, '\P{inarabicpresentationformsa}', "");
Expect(1, 65023, '\P{^inarabicpresentationformsa}', "");
Expect(0, 64335, '\p{inarabicpresentationformsa}', "");
Expect(1, 64335, '\p{^inarabicpresentationformsa}', "");
Expect(1, 64335, '\P{inarabicpresentationformsa}', "");
Expect(0, 64335, '\P{^inarabicpresentationformsa}', "");
Expect(1, 65023, '\p{		InArabic-Presentation	Forms a}', "");
Expect(0, 65023, '\p{^		InArabic-Presentation	Forms a}', "");
Expect(0, 65023, '\P{		InArabic-Presentation	Forms a}', "");
Expect(1, 65023, '\P{^		InArabic-Presentation	Forms a}', "");
Expect(0, 64335, '\p{		InArabic-Presentation	Forms a}', "");
Expect(1, 64335, '\p{^		InArabic-Presentation	Forms a}', "");
Expect(1, 64335, '\P{		InArabic-Presentation	Forms a}', "");
Expect(0, 64335, '\P{^		InArabic-Presentation	Forms a}', "");
Error('\p{	In/a/Tai THAM}');
Error('\P{	In/a/Tai THAM}');
Expect(1, 6831, '\p{intaitham}', "");
Expect(0, 6831, '\p{^intaitham}', "");
Expect(0, 6831, '\P{intaitham}', "");
Expect(1, 6831, '\P{^intaitham}', "");
Expect(0, 6687, '\p{intaitham}', "");
Expect(1, 6687, '\p{^intaitham}', "");
Expect(1, 6687, '\P{intaitham}', "");
Expect(0, 6687, '\P{^intaitham}', "");
Expect(1, 6831, '\p{	 In-taiTham}', "");
Expect(0, 6831, '\p{^	 In-taiTham}', "");
Expect(0, 6831, '\P{	 In-taiTham}', "");
Expect(1, 6831, '\P{^	 In-taiTham}', "");
Expect(0, 6687, '\p{	 In-taiTham}', "");
Expect(1, 6687, '\p{^	 In-taiTham}', "");
Expect(1, 6687, '\P{	 In-taiTham}', "");
Expect(0, 6687, '\P{^	 In-taiTham}', "");
Error('\p{	/a/IN TAGALOG}');
Error('\P{	/a/IN TAGALOG}');
Expect(1, 5919, '\p{intagalog}', "");
Expect(0, 5919, '\p{^intagalog}', "");
Expect(0, 5919, '\P{intagalog}', "");
Expect(1, 5919, '\P{^intagalog}', "");
Expect(0, 5887, '\p{intagalog}', "");
Expect(1, 5887, '\p{^intagalog}', "");
Expect(1, 5887, '\P{intagalog}', "");
Expect(0, 5887, '\P{^intagalog}', "");
Expect(1, 5919, '\p{ InTagalog}', "");
Expect(0, 5919, '\p{^ InTagalog}', "");
Expect(0, 5919, '\P{ InTagalog}', "");
Expect(1, 5919, '\P{^ InTagalog}', "");
Expect(0, 5887, '\p{ InTagalog}', "");
Expect(1, 5887, '\p{^ InTagalog}', "");
Expect(1, 5887, '\P{ InTagalog}', "");
Expect(0, 5887, '\P{^ InTagalog}', "");
Error('\p{_/a/Tai	XuanJing	symbols}');
Error('\P{_/a/Tai	XuanJing	symbols}');
Expect(1, 119647, '\p{taixuanjingsymbols}', "");
Expect(0, 119647, '\p{^taixuanjingsymbols}', "");
Expect(0, 119647, '\P{taixuanjingsymbols}', "");
Expect(1, 119647, '\P{^taixuanjingsymbols}', "");
Expect(0, 119551, '\p{taixuanjingsymbols}', "");
Expect(1, 119551, '\p{^taixuanjingsymbols}', "");
Expect(1, 119551, '\P{taixuanjingsymbols}', "");
Expect(0, 119551, '\P{^taixuanjingsymbols}', "");
Expect(1, 119647, '\p{_tai XUAN JINGSymbols}', "");
Expect(0, 119647, '\p{^_tai XUAN JINGSymbols}', "");
Expect(0, 119647, '\P{_tai XUAN JINGSymbols}', "");
Expect(1, 119647, '\P{^_tai XUAN JINGSymbols}', "");
Expect(0, 119551, '\p{_tai XUAN JINGSymbols}', "");
Expect(1, 119551, '\p{^_tai XUAN JINGSymbols}', "");
Expect(1, 119551, '\P{_tai XUAN JINGSymbols}', "");
Expect(0, 119551, '\P{^_tai XUAN JINGSymbols}', "");
Error('\p{_IS_tai/a/XUAN-JING symbols}');
Error('\P{_IS_tai/a/XUAN-JING symbols}');
Expect(1, 119647, '\p{istaixuanjingsymbols}', "");
Expect(0, 119647, '\p{^istaixuanjingsymbols}', "");
Expect(0, 119647, '\P{istaixuanjingsymbols}', "");
Expect(1, 119647, '\P{^istaixuanjingsymbols}', "");
Expect(0, 119551, '\p{istaixuanjingsymbols}', "");
Expect(1, 119551, '\p{^istaixuanjingsymbols}', "");
Expect(1, 119551, '\P{istaixuanjingsymbols}', "");
Expect(0, 119551, '\P{^istaixuanjingsymbols}', "");
Expect(1, 119647, '\p{ Is Tai-XUAN-jing-SYMBOLS}', "");
Expect(0, 119647, '\p{^ Is Tai-XUAN-jing-SYMBOLS}', "");
Expect(0, 119647, '\P{ Is Tai-XUAN-jing-SYMBOLS}', "");
Expect(1, 119647, '\P{^ Is Tai-XUAN-jing-SYMBOLS}', "");
Expect(0, 119551, '\p{ Is Tai-XUAN-jing-SYMBOLS}', "");
Expect(1, 119551, '\p{^ Is Tai-XUAN-jing-SYMBOLS}', "");
Expect(1, 119551, '\P{ Is Tai-XUAN-jing-SYMBOLS}', "");
Expect(0, 119551, '\P{^ Is Tai-XUAN-jing-SYMBOLS}', "");
Error('\p{:=In-TaiXUAN	Jing Symbols}');
Error('\P{:=In-TaiXUAN	Jing Symbols}');
Expect(1, 119647, '\p{intaixuanjingsymbols}', "");
Expect(0, 119647, '\p{^intaixuanjingsymbols}', "");
Expect(0, 119647, '\P{intaixuanjingsymbols}', "");
Expect(1, 119647, '\P{^intaixuanjingsymbols}', "");
Expect(0, 119551, '\p{intaixuanjingsymbols}', "");
Expect(1, 119551, '\p{^intaixuanjingsymbols}', "");
Expect(1, 119551, '\P{intaixuanjingsymbols}', "");
Expect(0, 119551, '\P{^intaixuanjingsymbols}', "");
Expect(1, 119647, '\p{  In_TAI XUAN_JING SYMBOLS}', "");
Expect(0, 119647, '\p{^  In_TAI XUAN_JING SYMBOLS}', "");
Expect(0, 119647, '\P{  In_TAI XUAN_JING SYMBOLS}', "");
Expect(1, 119647, '\P{^  In_TAI XUAN_JING SYMBOLS}', "");
Expect(0, 119551, '\p{  In_TAI XUAN_JING SYMBOLS}', "");
Expect(1, 119551, '\p{^  In_TAI XUAN_JING SYMBOLS}', "");
Expect(1, 119551, '\P{  In_TAI XUAN_JING SYMBOLS}', "");
Expect(0, 119551, '\P{^  In_TAI XUAN_JING SYMBOLS}', "");
Error('\p{_/a/in_lepcha}');
Error('\P{_/a/in_lepcha}');
Expect(1, 7247, '\p{inlepcha}', "");
Expect(0, 7247, '\p{^inlepcha}', "");
Expect(0, 7247, '\P{inlepcha}', "");
Expect(1, 7247, '\P{^inlepcha}', "");
Expect(0, 7167, '\p{inlepcha}', "");
Expect(1, 7167, '\p{^inlepcha}', "");
Expect(1, 7167, '\P{inlepcha}', "");
Expect(0, 7167, '\P{^inlepcha}', "");
Expect(1, 7247, '\p{	in	Lepcha}', "");
Expect(0, 7247, '\p{^	in	Lepcha}', "");
Expect(0, 7247, '\P{	in	Lepcha}', "");
Expect(1, 7247, '\P{^	in	Lepcha}', "");
Expect(0, 7167, '\p{	in	Lepcha}', "");
Expect(1, 7167, '\p{^	in	Lepcha}', "");
Expect(1, 7167, '\P{	in	Lepcha}', "");
Expect(0, 7167, '\P{^	in	Lepcha}', "");
Error('\p{_-In/a/Cham}');
Error('\P{_-In/a/Cham}');
Expect(1, 43615, '\p{incham}', "");
Expect(0, 43615, '\p{^incham}', "");
Expect(0, 43615, '\P{incham}', "");
Expect(1, 43615, '\P{^incham}', "");
Expect(0, 43519, '\p{incham}', "");
Expect(1, 43519, '\p{^incham}', "");
Expect(1, 43519, '\P{incham}', "");
Expect(0, 43519, '\P{^incham}', "");
Expect(1, 43615, '\p{-_IN Cham}', "");
Expect(0, 43615, '\p{^-_IN Cham}', "");
Expect(0, 43615, '\P{-_IN Cham}', "");
Expect(1, 43615, '\P{^-_IN Cham}', "");
Expect(0, 43519, '\p{-_IN Cham}', "");
Expect(1, 43519, '\p{^-_IN Cham}', "");
Expect(1, 43519, '\P{-_IN Cham}', "");
Expect(0, 43519, '\P{^-_IN Cham}', "");
Error('\p{	_in:=bopomofo}');
Error('\P{	_in:=bopomofo}');
Expect(1, 12591, '\p{inbopomofo}', "");
Expect(0, 12591, '\p{^inbopomofo}', "");
Expect(0, 12591, '\P{inbopomofo}', "");
Expect(1, 12591, '\P{^inbopomofo}', "");
Expect(0, 12543, '\p{inbopomofo}', "");
Expect(1, 12543, '\p{^inbopomofo}', "");
Expect(1, 12543, '\P{inbopomofo}', "");
Expect(0, 12543, '\P{^inbopomofo}', "");
Expect(1, 12591, '\p{-_In	bopomofo}', "");
Expect(0, 12591, '\p{^-_In	bopomofo}', "");
Expect(0, 12591, '\P{-_In	bopomofo}', "");
Expect(1, 12591, '\P{^-_In	bopomofo}', "");
Expect(0, 12543, '\p{-_In	bopomofo}', "");
Expect(1, 12543, '\p{^-_In	bopomofo}', "");
Expect(1, 12543, '\P{-_In	bopomofo}', "");
Expect(0, 12543, '\P{^-_In	bopomofo}', "");
Error('\p{-:=CJK_CompatibilityIdeographs}');
Error('\P{-:=CJK_CompatibilityIdeographs}');
Expect(1, 64255, '\p{cjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^cjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{cjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^cjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{cjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^cjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{cjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^cjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{CJKCOMPATIBILITYideographs}', "");
Expect(0, 64255, '\p{^CJKCOMPATIBILITYideographs}', "");
Expect(0, 64255, '\P{CJKCOMPATIBILITYideographs}', "");
Expect(1, 64255, '\P{^CJKCOMPATIBILITYideographs}', "");
Expect(0, 63743, '\p{CJKCOMPATIBILITYideographs}', "");
Expect(1, 63743, '\p{^CJKCOMPATIBILITYideographs}', "");
Expect(1, 63743, '\P{CJKCOMPATIBILITYideographs}', "");
Expect(0, 63743, '\P{^CJKCOMPATIBILITYideographs}', "");
Error('\p{-:=IscjkCOMPATIBILITY_ideographs}');
Error('\P{-:=IscjkCOMPATIBILITY_ideographs}');
Expect(1, 64255, '\p{iscjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^iscjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{iscjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^iscjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{iscjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^iscjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{iscjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^iscjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{	-Is_CJK compatibility Ideographs}', "");
Expect(0, 64255, '\p{^	-Is_CJK compatibility Ideographs}', "");
Expect(0, 64255, '\P{	-Is_CJK compatibility Ideographs}', "");
Expect(1, 64255, '\P{^	-Is_CJK compatibility Ideographs}', "");
Expect(0, 63743, '\p{	-Is_CJK compatibility Ideographs}', "");
Expect(1, 63743, '\p{^	-Is_CJK compatibility Ideographs}', "");
Expect(1, 63743, '\P{	-Is_CJK compatibility Ideographs}', "");
Expect(0, 63743, '\P{^	-Is_CJK compatibility Ideographs}', "");
Error('\p{	:=incjk-compatibility Ideographs}');
Error('\P{	:=incjk-compatibility Ideographs}');
Expect(1, 64255, '\p{incjkcompatibilityideographs}', "");
Expect(0, 64255, '\p{^incjkcompatibilityideographs}', "");
Expect(0, 64255, '\P{incjkcompatibilityideographs}', "");
Expect(1, 64255, '\P{^incjkcompatibilityideographs}', "");
Expect(0, 63743, '\p{incjkcompatibilityideographs}', "");
Expect(1, 63743, '\p{^incjkcompatibilityideographs}', "");
Expect(1, 63743, '\P{incjkcompatibilityideographs}', "");
Expect(0, 63743, '\P{^incjkcompatibilityideographs}', "");
Expect(1, 64255, '\p{_IN_CJKCompatibility-Ideographs}', "");
Expect(0, 64255, '\p{^_IN_CJKCompatibility-Ideographs}', "");
Expect(0, 64255, '\P{_IN_CJKCompatibility-Ideographs}', "");
Expect(1, 64255, '\P{^_IN_CJKCompatibility-Ideographs}', "");
Expect(0, 63743, '\p{_IN_CJKCompatibility-Ideographs}', "");
Expect(1, 63743, '\p{^_IN_CJKCompatibility-Ideographs}', "");
Expect(1, 63743, '\P{_IN_CJKCompatibility-Ideographs}', "");
Expect(0, 63743, '\P{^_IN_CJKCompatibility-Ideographs}', "");
Error('\p{__ARROWS:=}');
Error('\P{__ARROWS:=}');
Expect(1, 8703, '\p{arrows}', "");
Expect(0, 8703, '\p{^arrows}', "");
Expect(0, 8703, '\P{arrows}', "");
Expect(1, 8703, '\P{^arrows}', "");
Expect(0, 8591, '\p{arrows}', "");
Expect(1, 8591, '\p{^arrows}', "");
Expect(1, 8591, '\P{arrows}', "");
Expect(0, 8591, '\P{^arrows}', "");
Expect(1, 8703, '\p{-Arrows}', "");
Expect(0, 8703, '\p{^-Arrows}', "");
Expect(0, 8703, '\P{-Arrows}', "");
Expect(1, 8703, '\P{^-Arrows}', "");
Expect(0, 8591, '\p{-Arrows}', "");
Expect(1, 8591, '\p{^-Arrows}', "");
Expect(1, 8591, '\P{-Arrows}', "");
Expect(0, 8591, '\P{^-Arrows}', "");
Error('\p{ :=is_ARROWS}');
Error('\P{ :=is_ARROWS}');
Expect(1, 8703, '\p{isarrows}', "");
Expect(0, 8703, '\p{^isarrows}', "");
Expect(0, 8703, '\P{isarrows}', "");
Expect(1, 8703, '\P{^isarrows}', "");
Expect(0, 8591, '\p{isarrows}', "");
Expect(1, 8591, '\p{^isarrows}', "");
Expect(1, 8591, '\P{isarrows}', "");
Expect(0, 8591, '\P{^isarrows}', "");
Expect(1, 8703, '\p{- IS	Arrows}', "");
Expect(0, 8703, '\p{^- IS	Arrows}', "");
Expect(0, 8703, '\P{- IS	Arrows}', "");
Expect(1, 8703, '\P{^- IS	Arrows}', "");
Expect(0, 8591, '\p{- IS	Arrows}', "");
Expect(1, 8591, '\p{^- IS	Arrows}', "");
Expect(1, 8591, '\P{- IS	Arrows}', "");
Expect(0, 8591, '\P{^- IS	Arrows}', "");
Error('\p{_ In-Arrows:=}');
Error('\P{_ In-Arrows:=}');
Expect(1, 8703, '\p{inarrows}', "");
Expect(0, 8703, '\p{^inarrows}', "");
Expect(0, 8703, '\P{inarrows}', "");
Expect(1, 8703, '\P{^inarrows}', "");
Expect(0, 8591, '\p{inarrows}', "");
Expect(1, 8591, '\p{^inarrows}', "");
Expect(1, 8591, '\P{inarrows}', "");
Expect(0, 8591, '\P{^inarrows}', "");
Expect(1, 8703, '\p{ -IN arrows}', "");
Expect(0, 8703, '\p{^ -IN arrows}', "");
Expect(0, 8703, '\P{ -IN arrows}', "");
Expect(1, 8703, '\P{^ -IN arrows}', "");
Expect(0, 8591, '\p{ -IN arrows}', "");
Expect(1, 8591, '\p{^ -IN arrows}', "");
Expect(1, 8591, '\P{ -IN arrows}', "");
Expect(0, 8591, '\P{^ -IN arrows}', "");
Error('\p{/a/	_In Lao}');
Error('\P{/a/	_In Lao}');
Expect(1, 3839, '\p{inlao}', "");
Expect(0, 3839, '\p{^inlao}', "");
Expect(0, 3839, '\P{inlao}', "");
Expect(1, 3839, '\P{^inlao}', "");
Expect(0, 3711, '\p{inlao}', "");
Expect(1, 3711, '\p{^inlao}', "");
Expect(1, 3711, '\P{inlao}', "");
Expect(0, 3711, '\P{^inlao}', "");
Expect(1, 3839, '\p{_In	Lao}', "");
Expect(0, 3839, '\p{^_In	Lao}', "");
Expect(0, 3839, '\P{_In	Lao}', "");
Expect(1, 3839, '\P{^_In	Lao}', "");
Expect(0, 3711, '\p{_In	Lao}', "");
Expect(1, 3711, '\p{^_In	Lao}', "");
Expect(1, 3711, '\P{_In	Lao}', "");
Expect(0, 3711, '\P{^_In	Lao}', "");
Error('\p{:=-Connector-Punctuation}');
Error('\P{:=-Connector-Punctuation}');
Expect(1, 95, '\p{connectorpunctuation}', "");
Expect(0, 95, '\p{^connectorpunctuation}', "");
Expect(0, 95, '\P{connectorpunctuation}', "");
Expect(1, 95, '\P{^connectorpunctuation}', "");
Expect(0, 94, '\p{connectorpunctuation}', "");
Expect(1, 94, '\p{^connectorpunctuation}', "");
Expect(1, 94, '\P{connectorpunctuation}', "");
Expect(0, 94, '\P{^connectorpunctuation}', "");
Expect(1, 95, '\p{-	ConnectorPUNCTUATION}', "");
Expect(0, 95, '\p{^-	ConnectorPUNCTUATION}', "");
Expect(0, 95, '\P{-	ConnectorPUNCTUATION}', "");
Expect(1, 95, '\P{^-	ConnectorPUNCTUATION}', "");
Expect(0, 94, '\p{-	ConnectorPUNCTUATION}', "");
Expect(1, 94, '\p{^-	ConnectorPUNCTUATION}', "");
Expect(1, 94, '\P{-	ConnectorPUNCTUATION}', "");
Expect(0, 94, '\P{^-	ConnectorPUNCTUATION}', "");
Error('\p{-	Is	CONNECTOR:=Punctuation}');
Error('\P{-	Is	CONNECTOR:=Punctuation}');
Expect(1, 95, '\p{isconnectorpunctuation}', "");
Expect(0, 95, '\p{^isconnectorpunctuation}', "");
Expect(0, 95, '\P{isconnectorpunctuation}', "");
Expect(1, 95, '\P{^isconnectorpunctuation}', "");
Expect(0, 94, '\p{isconnectorpunctuation}', "");
Expect(1, 94, '\p{^isconnectorpunctuation}', "");
Expect(1, 94, '\P{isconnectorpunctuation}', "");
Expect(0, 94, '\P{^isconnectorpunctuation}', "");
Expect(1, 95, '\p{is Connector PUNCTUATION}', "");
Expect(0, 95, '\p{^is Connector PUNCTUATION}', "");
Expect(0, 95, '\P{is Connector PUNCTUATION}', "");
Expect(1, 95, '\P{^is Connector PUNCTUATION}', "");
Expect(0, 94, '\p{is Connector PUNCTUATION}', "");
Expect(1, 94, '\p{^is Connector PUNCTUATION}', "");
Expect(1, 94, '\P{is Connector PUNCTUATION}', "");
Expect(0, 94, '\P{^is Connector PUNCTUATION}', "");
Error('\p{/a/-pc}');
Error('\P{/a/-pc}');
Expect(1, 95, '\p{pc}', "");
Expect(0, 95, '\p{^pc}', "");
Expect(0, 95, '\P{pc}', "");
Expect(1, 95, '\P{^pc}', "");
Expect(0, 94, '\p{pc}', "");
Expect(1, 94, '\p{^pc}', "");
Expect(1, 94, '\P{pc}', "");
Expect(0, 94, '\P{^pc}', "");
Expect(1, 95, '\p{__Pc}', "");
Expect(0, 95, '\p{^__Pc}', "");
Expect(0, 95, '\P{__Pc}', "");
Expect(1, 95, '\P{^__Pc}', "");
Expect(0, 94, '\p{__Pc}', "");
Expect(1, 94, '\p{^__Pc}', "");
Expect(1, 94, '\P{__Pc}', "");
Expect(0, 94, '\P{^__Pc}', "");
Error('\p{	/a/Ispc}');
Error('\P{	/a/Ispc}');
Expect(1, 95, '\p{ispc}', "");
Expect(0, 95, '\p{^ispc}', "");
Expect(0, 95, '\P{ispc}', "");
Expect(1, 95, '\P{^ispc}', "");
Expect(0, 94, '\p{ispc}', "");
Expect(1, 94, '\p{^ispc}', "");
Expect(1, 94, '\P{ispc}', "");
Expect(0, 94, '\P{^ispc}', "");
Expect(1, 95, '\p{	 Is	pc}', "");
Expect(0, 95, '\p{^	 Is	pc}', "");
Expect(0, 95, '\P{	 Is	pc}', "");
Expect(1, 95, '\P{^	 Is	pc}', "");
Expect(0, 94, '\p{	 Is	pc}', "");
Expect(1, 94, '\p{^	 Is	pc}', "");
Expect(1, 94, '\P{	 Is	pc}', "");
Expect(0, 94, '\P{^	 Is	pc}', "");
Error('\p{- IN:=InscriptionalPahlavi}');
Error('\P{- IN:=InscriptionalPahlavi}');
Expect(1, 68479, '\p{ininscriptionalpahlavi}', "");
Expect(0, 68479, '\p{^ininscriptionalpahlavi}', "");
Expect(0, 68479, '\P{ininscriptionalpahlavi}', "");
Expect(1, 68479, '\P{^ininscriptionalpahlavi}', "");
Expect(0, 68447, '\p{ininscriptionalpahlavi}', "");
Expect(1, 68447, '\p{^ininscriptionalpahlavi}', "");
Expect(1, 68447, '\P{ininscriptionalpahlavi}', "");
Expect(0, 68447, '\P{^ininscriptionalpahlavi}', "");
Expect(1, 68479, '\p{- InINSCRIPTIONAL	Pahlavi}', "");
Expect(0, 68479, '\p{^- InINSCRIPTIONAL	Pahlavi}', "");
Expect(0, 68479, '\P{- InINSCRIPTIONAL	Pahlavi}', "");
Expect(1, 68479, '\P{^- InINSCRIPTIONAL	Pahlavi}', "");
Expect(0, 68447, '\p{- InINSCRIPTIONAL	Pahlavi}', "");
Expect(1, 68447, '\p{^- InINSCRIPTIONAL	Pahlavi}', "");
Expect(1, 68447, '\P{- InINSCRIPTIONAL	Pahlavi}', "");
Expect(0, 68447, '\P{^- InINSCRIPTIONAL	Pahlavi}', "");
Error('\p{:=	Variation	selectors}');
Error('\P{:=	Variation	selectors}');
Expect(1, 65039, '\p{variationselectors}', "");
Expect(0, 65039, '\p{^variationselectors}', "");
Expect(0, 65039, '\P{variationselectors}', "");
Expect(1, 65039, '\P{^variationselectors}', "");
Expect(0, 65023, '\p{variationselectors}', "");
Expect(1, 65023, '\p{^variationselectors}', "");
Expect(1, 65023, '\P{variationselectors}', "");
Expect(0, 65023, '\P{^variationselectors}', "");
Expect(1, 65039, '\p{- VARIATION	SELECTORS}', "");
Expect(0, 65039, '\p{^- VARIATION	SELECTORS}', "");
Expect(0, 65039, '\P{- VARIATION	SELECTORS}', "");
Expect(1, 65039, '\P{^- VARIATION	SELECTORS}', "");
Expect(0, 65023, '\p{- VARIATION	SELECTORS}', "");
Expect(1, 65023, '\p{^- VARIATION	SELECTORS}', "");
Expect(1, 65023, '\P{- VARIATION	SELECTORS}', "");
Expect(0, 65023, '\P{^- VARIATION	SELECTORS}', "");
Error('\p{	 IS:=Variation-selectors}');
Error('\P{	 IS:=Variation-selectors}');
Expect(1, 65039, '\p{isvariationselectors}', "");
Expect(0, 65039, '\p{^isvariationselectors}', "");
Expect(0, 65039, '\P{isvariationselectors}', "");
Expect(1, 65039, '\P{^isvariationselectors}', "");
Expect(0, 65023, '\p{isvariationselectors}', "");
Expect(1, 65023, '\p{^isvariationselectors}', "");
Expect(1, 65023, '\P{isvariationselectors}', "");
Expect(0, 65023, '\P{^isvariationselectors}', "");
Expect(1, 65039, '\p{	 Is-Variation	SELECTORS}', "");
Expect(0, 65039, '\p{^	 Is-Variation	SELECTORS}', "");
Expect(0, 65039, '\P{	 Is-Variation	SELECTORS}', "");
Expect(1, 65039, '\P{^	 Is-Variation	SELECTORS}', "");
Expect(0, 65023, '\p{	 Is-Variation	SELECTORS}', "");
Expect(1, 65023, '\p{^	 Is-Variation	SELECTORS}', "");
Expect(1, 65023, '\P{	 Is-Variation	SELECTORS}', "");
Expect(0, 65023, '\P{^	 Is-Variation	SELECTORS}', "");
Error('\p{-:=In Variation	Selectors}');
Error('\P{-:=In Variation	Selectors}');
Expect(1, 65039, '\p{invariationselectors}', "");
Expect(0, 65039, '\p{^invariationselectors}', "");
Expect(0, 65039, '\P{invariationselectors}', "");
Expect(1, 65039, '\P{^invariationselectors}', "");
Expect(0, 65023, '\p{invariationselectors}', "");
Expect(1, 65023, '\p{^invariationselectors}', "");
Expect(1, 65023, '\P{invariationselectors}', "");
Expect(0, 65023, '\P{^invariationselectors}', "");
Expect(1, 65039, '\p{	_In-Variation-Selectors}', "");
Expect(0, 65039, '\p{^	_In-Variation-Selectors}', "");
Expect(0, 65039, '\P{	_In-Variation-Selectors}', "");
Expect(1, 65039, '\P{^	_In-Variation-Selectors}', "");
Expect(0, 65023, '\p{	_In-Variation-Selectors}', "");
Expect(1, 65023, '\p{^	_In-Variation-Selectors}', "");
Expect(1, 65023, '\P{	_In-Variation-Selectors}', "");
Expect(0, 65023, '\P{^	_In-Variation-Selectors}', "");
Error('\p{__:=XLVLVT_V}');
Error('\P{__:=XLVLVT_V}');
Expect(1, 4519, '\p{_X_lv_LVT_v}', "");
Expect(0, 4519, '\p{^_X_lv_LVT_v}', "");
Expect(0, 4519, '\P{_X_lv_LVT_v}', "");
Expect(1, 4519, '\P{^_X_lv_LVT_v}', "");
Expect(0, 4447, '\p{_X_lv_LVT_v}', "");
Expect(1, 4447, '\p{^_X_lv_LVT_v}', "");
Expect(1, 4447, '\P{_X_lv_LVT_v}', "");
Expect(0, 4447, '\P{^_X_lv_LVT_v}', "");
Error('\p{_:=private Use}');
Error('\P{_:=private Use}');
Expect(1, 63743, '\p{privateuse}', "");
Expect(0, 63743, '\p{^privateuse}', "");
Expect(0, 63743, '\P{privateuse}', "");
Expect(1, 63743, '\P{^privateuse}', "");
Expect(0, 1, '\p{privateuse}', "");
Expect(1, 1, '\p{^privateuse}', "");
Expect(1, 1, '\P{privateuse}', "");
Expect(0, 1, '\P{^privateuse}', "");
Expect(1, 63743, '\p{-Private	Use}', "");
Expect(0, 63743, '\p{^-Private	Use}', "");
Expect(0, 63743, '\P{-Private	Use}', "");
Expect(1, 63743, '\P{^-Private	Use}', "");
Expect(0, 1, '\p{-Private	Use}', "");
Expect(1, 1, '\p{^-Private	Use}', "");
Expect(1, 1, '\P{-Private	Use}', "");
Expect(0, 1, '\P{^-Private	Use}', "");
Error('\p{ /a/IsPRIVATE USE}');
Error('\P{ /a/IsPRIVATE USE}');
Expect(1, 63743, '\p{isprivateuse}', "");
Expect(0, 63743, '\p{^isprivateuse}', "");
Expect(0, 63743, '\P{isprivateuse}', "");
Expect(1, 63743, '\P{^isprivateuse}', "");
Expect(0, 1, '\p{isprivateuse}', "");
Expect(1, 1, '\p{^isprivateuse}', "");
Expect(1, 1, '\P{isprivateuse}', "");
Expect(0, 1, '\P{^isprivateuse}', "");
Expect(1, 63743, '\p{Is	Private	Use}', "");
Expect(0, 63743, '\p{^Is	Private	Use}', "");
Expect(0, 63743, '\P{Is	Private	Use}', "");
Expect(1, 63743, '\P{^Is	Private	Use}', "");
Expect(0, 1, '\p{Is	Private	Use}', "");
Expect(1, 1, '\p{^Is	Private	Use}', "");
Expect(1, 1, '\P{Is	Private	Use}', "");
Expect(0, 1, '\P{^Is	Private	Use}', "");
Error('\p{ :=CO}');
Error('\P{ :=CO}');
Expect(1, 63743, '\p{co}', "");
Expect(0, 63743, '\p{^co}', "");
Expect(0, 63743, '\P{co}', "");
Expect(1, 63743, '\P{^co}', "");
Expect(0, 1, '\p{co}', "");
Expect(1, 1, '\p{^co}', "");
Expect(1, 1, '\P{co}', "");
Expect(0, 1, '\P{^co}', "");
Expect(1, 63743, '\p{_	co}', "");
Expect(0, 63743, '\p{^_	co}', "");
Expect(0, 63743, '\P{_	co}', "");
Expect(1, 63743, '\P{^_	co}', "");
Expect(0, 1, '\p{_	co}', "");
Expect(1, 1, '\p{^_	co}', "");
Expect(1, 1, '\P{_	co}', "");
Expect(0, 1, '\P{^_	co}', "");
Error('\p{	-Is:=Co}');
Error('\P{	-Is:=Co}');
Expect(1, 63743, '\p{isco}', "");
Expect(0, 63743, '\p{^isco}', "");
Expect(0, 63743, '\P{isco}', "");
Expect(1, 63743, '\P{^isco}', "");
Expect(0, 1, '\p{isco}', "");
Expect(1, 1, '\p{^isco}', "");
Expect(1, 1, '\P{isco}', "");
Expect(0, 1, '\P{^isco}', "");
Expect(1, 63743, '\p{- is-Co}', "");
Expect(0, 63743, '\p{^- is-Co}', "");
Expect(0, 63743, '\P{- is-Co}', "");
Expect(1, 63743, '\P{^- is-Co}', "");
Expect(0, 1, '\p{- is-Co}', "");
Expect(1, 1, '\p{^- is-Co}', "");
Expect(1, 1, '\P{- is-Co}', "");
Expect(0, 1, '\P{^- is-Co}', "");
Error('\p{ :=In Lisu}');
Error('\P{ :=In Lisu}');
Expect(1, 42239, '\p{inlisu}', "");
Expect(0, 42239, '\p{^inlisu}', "");
Expect(0, 42239, '\P{inlisu}', "");
Expect(1, 42239, '\P{^inlisu}', "");
Expect(0, 42191, '\p{inlisu}', "");
Expect(1, 42191, '\p{^inlisu}', "");
Expect(1, 42191, '\P{inlisu}', "");
Expect(0, 42191, '\P{^inlisu}', "");
Expect(1, 42239, '\p{__InLisu}', "");
Expect(0, 42239, '\p{^__InLisu}', "");
Expect(0, 42239, '\P{__InLisu}', "");
Expect(1, 42239, '\P{^__InLisu}', "");
Expect(0, 42191, '\p{__InLisu}', "");
Expect(1, 42191, '\p{^__InLisu}', "");
Expect(1, 42191, '\P{__InLisu}', "");
Expect(0, 42191, '\P{^__InLisu}', "");
Error('\p{ dash:=Punctuation}');
Error('\P{ dash:=Punctuation}');
Expect(1, 45, '\p{dashpunctuation}', "");
Expect(0, 45, '\p{^dashpunctuation}', "");
Expect(0, 45, '\P{dashpunctuation}', "");
Expect(1, 45, '\P{^dashpunctuation}', "");
Expect(0, 44, '\p{dashpunctuation}', "");
Expect(1, 44, '\p{^dashpunctuation}', "");
Expect(1, 44, '\P{dashpunctuation}', "");
Expect(0, 44, '\P{^dashpunctuation}', "");
Expect(1, 45, '\p{-dashPUNCTUATION}', "");
Expect(0, 45, '\p{^-dashPUNCTUATION}', "");
Expect(0, 45, '\P{-dashPUNCTUATION}', "");
Expect(1, 45, '\P{^-dashPUNCTUATION}', "");
Expect(0, 44, '\p{-dashPUNCTUATION}', "");
Expect(1, 44, '\p{^-dashPUNCTUATION}', "");
Expect(1, 44, '\P{-dashPUNCTUATION}', "");
Expect(0, 44, '\P{^-dashPUNCTUATION}', "");
Error('\p{_ Is-dash_PUNCTUATION:=}');
Error('\P{_ Is-dash_PUNCTUATION:=}');
Expect(1, 45, '\p{isdashpunctuation}', "");
Expect(0, 45, '\p{^isdashpunctuation}', "");
Expect(0, 45, '\P{isdashpunctuation}', "");
Expect(1, 45, '\P{^isdashpunctuation}', "");
Expect(0, 44, '\p{isdashpunctuation}', "");
Expect(1, 44, '\p{^isdashpunctuation}', "");
Expect(1, 44, '\P{isdashpunctuation}', "");
Expect(0, 44, '\P{^isdashpunctuation}', "");
Expect(1, 45, '\p{__IS-DashPUNCTUATION}', "");
Expect(0, 45, '\p{^__IS-DashPUNCTUATION}', "");
Expect(0, 45, '\P{__IS-DashPUNCTUATION}', "");
Expect(1, 45, '\P{^__IS-DashPUNCTUATION}', "");
Expect(0, 44, '\p{__IS-DashPUNCTUATION}', "");
Expect(1, 44, '\p{^__IS-DashPUNCTUATION}', "");
Expect(1, 44, '\P{__IS-DashPUNCTUATION}', "");
Expect(0, 44, '\P{^__IS-DashPUNCTUATION}', "");
Error('\p{:=-_Pd}');
Error('\P{:=-_Pd}');
Expect(1, 45, '\p{pd}', "");
Expect(0, 45, '\p{^pd}', "");
Expect(0, 45, '\P{pd}', "");
Expect(1, 45, '\P{^pd}', "");
Expect(0, 44, '\p{pd}', "");
Expect(1, 44, '\p{^pd}', "");
Expect(1, 44, '\P{pd}', "");
Expect(0, 44, '\P{^pd}', "");
Expect(1, 45, '\p{Pd}', "");
Expect(0, 45, '\p{^Pd}', "");
Expect(0, 45, '\P{Pd}', "");
Expect(1, 45, '\P{^Pd}', "");
Expect(0, 44, '\p{Pd}', "");
Expect(1, 44, '\p{^Pd}', "");
Expect(1, 44, '\P{Pd}', "");
Expect(0, 44, '\P{^Pd}', "");
Error('\p{/a/_-Is	PD}');
Error('\P{/a/_-Is	PD}');
Expect(1, 45, '\p{ispd}', "");
Expect(0, 45, '\p{^ispd}', "");
Expect(0, 45, '\P{ispd}', "");
Expect(1, 45, '\P{^ispd}', "");
Expect(0, 44, '\p{ispd}', "");
Expect(1, 44, '\p{^ispd}', "");
Expect(1, 44, '\P{ispd}', "");
Expect(0, 44, '\P{^ispd}', "");
Expect(1, 45, '\p{--IS pd}', "");
Expect(0, 45, '\p{^--IS pd}', "");
Expect(0, 45, '\P{--IS pd}', "");
Expect(1, 45, '\P{^--IS pd}', "");
Expect(0, 44, '\p{--IS pd}', "");
Expect(1, 44, '\p{^--IS pd}', "");
Expect(1, 44, '\P{--IS pd}', "");
Expect(0, 44, '\P{^--IS pd}', "");
Error('\p{ _BopomofoEXTENDED:=}');
Error('\P{ _BopomofoEXTENDED:=}');
Expect(1, 12735, '\p{bopomofoextended}', "");
Expect(0, 12735, '\p{^bopomofoextended}', "");
Expect(0, 12735, '\P{bopomofoextended}', "");
Expect(1, 12735, '\P{^bopomofoextended}', "");
Expect(0, 12703, '\p{bopomofoextended}', "");
Expect(1, 12703, '\p{^bopomofoextended}', "");
Expect(1, 12703, '\P{bopomofoextended}', "");
Expect(0, 12703, '\P{^bopomofoextended}', "");
Expect(1, 12735, '\p{_	bopomofo-Extended}', "");
Expect(0, 12735, '\p{^_	bopomofo-Extended}', "");
Expect(0, 12735, '\P{_	bopomofo-Extended}', "");
Expect(1, 12735, '\P{^_	bopomofo-Extended}', "");
Expect(0, 12703, '\p{_	bopomofo-Extended}', "");
Expect(1, 12703, '\p{^_	bopomofo-Extended}', "");
Expect(1, 12703, '\P{_	bopomofo-Extended}', "");
Expect(0, 12703, '\P{^_	bopomofo-Extended}', "");
Error('\p{	-Is:=BOPOMOFO	Extended}');
Error('\P{	-Is:=BOPOMOFO	Extended}');
Expect(1, 12735, '\p{isbopomofoextended}', "");
Expect(0, 12735, '\p{^isbopomofoextended}', "");
Expect(0, 12735, '\P{isbopomofoextended}', "");
Expect(1, 12735, '\P{^isbopomofoextended}', "");
Expect(0, 12703, '\p{isbopomofoextended}', "");
Expect(1, 12703, '\p{^isbopomofoextended}', "");
Expect(1, 12703, '\P{isbopomofoextended}', "");
Expect(0, 12703, '\P{^isbopomofoextended}', "");
Expect(1, 12735, '\p{ Is-BOPOMOFO-Extended}', "");
Expect(0, 12735, '\p{^ Is-BOPOMOFO-Extended}', "");
Expect(0, 12735, '\P{ Is-BOPOMOFO-Extended}', "");
Expect(1, 12735, '\P{^ Is-BOPOMOFO-Extended}', "");
Expect(0, 12703, '\p{ Is-BOPOMOFO-Extended}', "");
Expect(1, 12703, '\p{^ Is-BOPOMOFO-Extended}', "");
Expect(1, 12703, '\P{ Is-BOPOMOFO-Extended}', "");
Expect(0, 12703, '\P{^ Is-BOPOMOFO-Extended}', "");
Error('\p{--IN bopomofo/a/Extended}');
Error('\P{--IN bopomofo/a/Extended}');
Expect(1, 12735, '\p{inbopomofoextended}', "");
Expect(0, 12735, '\p{^inbopomofoextended}', "");
Expect(0, 12735, '\P{inbopomofoextended}', "");
Expect(1, 12735, '\P{^inbopomofoextended}', "");
Expect(0, 12703, '\p{inbopomofoextended}', "");
Expect(1, 12703, '\p{^inbopomofoextended}', "");
Expect(1, 12703, '\P{inbopomofoextended}', "");
Expect(0, 12703, '\P{^inbopomofoextended}', "");
Expect(1, 12735, '\p{_	In	Bopomofo	extended}', "");
Expect(0, 12735, '\p{^_	In	Bopomofo	extended}', "");
Expect(0, 12735, '\P{_	In	Bopomofo	extended}', "");
Expect(1, 12735, '\P{^_	In	Bopomofo	extended}', "");
Expect(0, 12703, '\p{_	In	Bopomofo	extended}', "");
Expect(1, 12703, '\p{^_	In	Bopomofo	extended}', "");
Expect(1, 12703, '\P{_	In	Bopomofo	extended}', "");
Expect(0, 12703, '\P{^_	In	Bopomofo	extended}', "");
Error('\p{_:=IN	khmer}');
Error('\P{_:=IN	khmer}');
Expect(1, 6143, '\p{inkhmer}', "");
Expect(0, 6143, '\p{^inkhmer}', "");
Expect(0, 6143, '\P{inkhmer}', "");
Expect(1, 6143, '\P{^inkhmer}', "");
Expect(0, 6015, '\p{inkhmer}', "");
Expect(1, 6015, '\p{^inkhmer}', "");
Expect(1, 6015, '\P{inkhmer}', "");
Expect(0, 6015, '\P{^inkhmer}', "");
Expect(1, 6143, '\p{--in_Khmer}', "");
Expect(0, 6143, '\p{^--in_Khmer}', "");
Expect(0, 6143, '\P{--in_Khmer}', "");
Expect(1, 6143, '\P{^--in_Khmer}', "");
Expect(0, 6015, '\p{--in_Khmer}', "");
Expect(1, 6015, '\p{^--in_Khmer}', "");
Expect(1, 6015, '\P{--in_Khmer}', "");
Expect(0, 6015, '\P{^--in_Khmer}', "");
Error('\p{ :=IN_Samaritan}');
Error('\P{ :=IN_Samaritan}');
Expect(1, 2111, '\p{insamaritan}', "");
Expect(0, 2111, '\p{^insamaritan}', "");
Expect(0, 2111, '\P{insamaritan}', "");
Expect(1, 2111, '\P{^insamaritan}', "");
Expect(0, 2047, '\p{insamaritan}', "");
Expect(1, 2047, '\p{^insamaritan}', "");
Expect(1, 2047, '\P{insamaritan}', "");
Expect(0, 2047, '\P{^insamaritan}', "");
Expect(1, 2111, '\p{_in_samaritan}', "");
Expect(0, 2111, '\p{^_in_samaritan}', "");
Expect(0, 2111, '\P{_in_samaritan}', "");
Expect(1, 2111, '\P{^_in_samaritan}', "");
Expect(0, 2047, '\p{_in_samaritan}', "");
Expect(1, 2047, '\p{^_in_samaritan}', "");
Expect(1, 2047, '\P{_in_samaritan}', "");
Expect(0, 2047, '\P{^_in_samaritan}', "");
Error('\p{	:=General_Punctuation}');
Error('\P{	:=General_Punctuation}');
Expect(1, 8303, '\p{generalpunctuation}', "");
Expect(0, 8303, '\p{^generalpunctuation}', "");
Expect(0, 8303, '\P{generalpunctuation}', "");
Expect(1, 8303, '\P{^generalpunctuation}', "");
Expect(0, 8191, '\p{generalpunctuation}', "");
Expect(1, 8191, '\p{^generalpunctuation}', "");
Expect(1, 8191, '\P{generalpunctuation}', "");
Expect(0, 8191, '\P{^generalpunctuation}', "");
Expect(1, 8303, '\p{_general	Punctuation}', "");
Expect(0, 8303, '\p{^_general	Punctuation}', "");
Expect(0, 8303, '\P{_general	Punctuation}', "");
Expect(1, 8303, '\P{^_general	Punctuation}', "");
Expect(0, 8191, '\p{_general	Punctuation}', "");
Expect(1, 8191, '\p{^_general	Punctuation}', "");
Expect(1, 8191, '\P{_general	Punctuation}', "");
Expect(0, 8191, '\P{^_general	Punctuation}', "");
Error('\p{_ IS GENERAL/a/Punctuation}');
Error('\P{_ IS GENERAL/a/Punctuation}');
Expect(1, 8303, '\p{isgeneralpunctuation}', "");
Expect(0, 8303, '\p{^isgeneralpunctuation}', "");
Expect(0, 8303, '\P{isgeneralpunctuation}', "");
Expect(1, 8303, '\P{^isgeneralpunctuation}', "");
Expect(0, 8191, '\p{isgeneralpunctuation}', "");
Expect(1, 8191, '\p{^isgeneralpunctuation}', "");
Expect(1, 8191, '\P{isgeneralpunctuation}', "");
Expect(0, 8191, '\P{^isgeneralpunctuation}', "");
Expect(1, 8303, '\p{	Is-general_punctuation}', "");
Expect(0, 8303, '\p{^	Is-general_punctuation}', "");
Expect(0, 8303, '\P{	Is-general_punctuation}', "");
Expect(1, 8303, '\P{^	Is-general_punctuation}', "");
Expect(0, 8191, '\p{	Is-general_punctuation}', "");
Expect(1, 8191, '\p{^	Is-general_punctuation}', "");
Expect(1, 8191, '\P{	Is-general_punctuation}', "");
Expect(0, 8191, '\P{^	Is-general_punctuation}', "");
Error('\p{:=_in	General	punctuation}');
Error('\P{:=_in	General	punctuation}');
Expect(1, 8303, '\p{ingeneralpunctuation}', "");
Expect(0, 8303, '\p{^ingeneralpunctuation}', "");
Expect(0, 8303, '\P{ingeneralpunctuation}', "");
Expect(1, 8303, '\P{^ingeneralpunctuation}', "");
Expect(0, 8191, '\p{ingeneralpunctuation}', "");
Expect(1, 8191, '\p{^ingeneralpunctuation}', "");
Expect(1, 8191, '\P{ingeneralpunctuation}', "");
Expect(0, 8191, '\P{^ingeneralpunctuation}', "");
Expect(1, 8303, '\p{ In_General-punctuation}', "");
Expect(0, 8303, '\p{^ In_General-punctuation}', "");
Expect(0, 8303, '\P{ In_General-punctuation}', "");
Expect(1, 8303, '\P{^ In_General-punctuation}', "");
Expect(0, 8191, '\p{ In_General-punctuation}', "");
Expect(1, 8191, '\p{^ In_General-punctuation}', "");
Expect(1, 8191, '\P{ In_General-punctuation}', "");
Expect(0, 8191, '\P{^ In_General-punctuation}', "");
Error('\p{/a/_ InGeorgian}');
Error('\P{/a/_ InGeorgian}');
Expect(1, 4351, '\p{ingeorgian}', "");
Expect(0, 4351, '\p{^ingeorgian}', "");
Expect(0, 4351, '\P{ingeorgian}', "");
Expect(1, 4351, '\P{^ingeorgian}', "");
Expect(0, 4255, '\p{ingeorgian}', "");
Expect(1, 4255, '\p{^ingeorgian}', "");
Expect(1, 4255, '\P{ingeorgian}', "");
Expect(0, 4255, '\P{^ingeorgian}', "");
Expect(1, 4351, '\p{	in Georgian}', "");
Expect(0, 4351, '\p{^	in Georgian}', "");
Expect(0, 4351, '\P{	in Georgian}', "");
Expect(1, 4351, '\P{^	in Georgian}', "");
Expect(0, 4255, '\p{	in Georgian}', "");
Expect(1, 4255, '\p{^	in Georgian}', "");
Expect(1, 4255, '\P{	in Georgian}', "");
Expect(0, 4255, '\P{^	in Georgian}', "");
Error('\p{:=-InLimbu}');
Error('\P{:=-InLimbu}');
Expect(1, 6479, '\p{inlimbu}', "");
Expect(0, 6479, '\p{^inlimbu}', "");
Expect(0, 6479, '\P{inlimbu}', "");
Expect(1, 6479, '\P{^inlimbu}', "");
Expect(0, 6399, '\p{inlimbu}', "");
Expect(1, 6399, '\p{^inlimbu}', "");
Expect(1, 6399, '\P{inlimbu}', "");
Expect(0, 6399, '\P{^inlimbu}', "");
Expect(1, 6479, '\p{_-In limbu}', "");
Expect(0, 6479, '\p{^_-In limbu}', "");
Expect(0, 6479, '\P{_-In limbu}', "");
Expect(1, 6479, '\P{^_-In limbu}', "");
Expect(0, 6399, '\p{_-In limbu}', "");
Expect(1, 6399, '\p{^_-In limbu}', "");
Expect(1, 6399, '\P{_-In limbu}', "");
Expect(0, 6399, '\P{^_-In limbu}', "");
Error('\p{	in-Lydian:=}');
Error('\P{	in-Lydian:=}');
Expect(1, 67903, '\p{inlydian}', "");
Expect(0, 67903, '\p{^inlydian}', "");
Expect(0, 67903, '\P{inlydian}', "");
Expect(1, 67903, '\P{^inlydian}', "");
Expect(0, 67871, '\p{inlydian}', "");
Expect(1, 67871, '\p{^inlydian}', "");
Expect(1, 67871, '\P{inlydian}', "");
Expect(0, 67871, '\P{^inlydian}', "");
Expect(1, 67903, '\p{	 In lydian}', "");
Expect(0, 67903, '\p{^	 In lydian}', "");
Expect(0, 67903, '\P{	 In lydian}', "");
Expect(1, 67903, '\P{^	 In lydian}', "");
Expect(0, 67871, '\p{	 In lydian}', "");
Expect(1, 67871, '\p{^	 In lydian}', "");
Expect(1, 67871, '\P{	 In lydian}', "");
Expect(0, 67871, '\P{^	 In lydian}', "");
Error('\p{-_In-Old	south-Arabian:=}');
Error('\P{-_In-Old	south-Arabian:=}');
Expect(1, 68223, '\p{inoldsoutharabian}', "");
Expect(0, 68223, '\p{^inoldsoutharabian}', "");
Expect(0, 68223, '\P{inoldsoutharabian}', "");
Expect(1, 68223, '\P{^inoldsoutharabian}', "");
Expect(0, 68191, '\p{inoldsoutharabian}', "");
Expect(1, 68191, '\p{^inoldsoutharabian}', "");
Expect(1, 68191, '\P{inoldsoutharabian}', "");
Expect(0, 68191, '\P{^inoldsoutharabian}', "");
Expect(1, 68223, '\p{	In-oldsouth arabian}', "");
Expect(0, 68223, '\p{^	In-oldsouth arabian}', "");
Expect(0, 68223, '\P{	In-oldsouth arabian}', "");
Expect(1, 68223, '\P{^	In-oldsouth arabian}', "");
Expect(0, 68191, '\p{	In-oldsouth arabian}', "");
Expect(1, 68191, '\p{^	In-oldsouth arabian}', "");
Expect(1, 68191, '\P{	In-oldsouth arabian}', "");
Expect(0, 68191, '\P{^	In-oldsouth arabian}', "");
Error('\p{:=_IN	kharoshthi}');
Error('\P{:=_IN	kharoshthi}');
Expect(1, 68191, '\p{inkharoshthi}', "");
Expect(0, 68191, '\p{^inkharoshthi}', "");
Expect(0, 68191, '\P{inkharoshthi}', "");
Expect(1, 68191, '\P{^inkharoshthi}', "");
Expect(0, 68095, '\p{inkharoshthi}', "");
Expect(1, 68095, '\p{^inkharoshthi}', "");
Expect(1, 68095, '\P{inkharoshthi}', "");
Expect(0, 68095, '\P{^inkharoshthi}', "");
Expect(1, 68191, '\p{_	In-Kharoshthi}', "");
Expect(0, 68191, '\p{^_	In-Kharoshthi}', "");
Expect(0, 68191, '\P{_	In-Kharoshthi}', "");
Expect(1, 68191, '\P{^_	In-Kharoshthi}', "");
Expect(0, 68095, '\p{_	In-Kharoshthi}', "");
Expect(1, 68095, '\p{^_	In-Kharoshthi}', "");
Expect(1, 68095, '\P{_	In-Kharoshthi}', "");
Expect(0, 68095, '\P{^_	In-Kharoshthi}', "");
Error('\p{-	in BAMUM:=}');
Error('\P{-	in BAMUM:=}');
Expect(1, 42751, '\p{inbamum}', "");
Expect(0, 42751, '\p{^inbamum}', "");
Expect(0, 42751, '\P{inbamum}', "");
Expect(1, 42751, '\P{^inbamum}', "");
Expect(0, 42655, '\p{inbamum}', "");
Expect(1, 42655, '\p{^inbamum}', "");
Expect(1, 42655, '\P{inbamum}', "");
Expect(0, 42655, '\P{^inbamum}', "");
Expect(1, 42751, '\p{__in	Bamum}', "");
Expect(0, 42751, '\p{^__in	Bamum}', "");
Expect(0, 42751, '\P{__in	Bamum}', "");
Expect(1, 42751, '\P{^__in	Bamum}', "");
Expect(0, 42655, '\p{__in	Bamum}', "");
Expect(1, 42655, '\p{^__in	Bamum}', "");
Expect(1, 42655, '\P{__in	Bamum}', "");
Expect(0, 42655, '\P{^__in	Bamum}', "");
Error('\p{_	Changes when/a/Casemapped}');
Error('\P{_	Changes when/a/Casemapped}');
Expect(1, 90, '\p{changeswhencasemapped}', "");
Expect(0, 90, '\p{^changeswhencasemapped}', "");
Expect(0, 90, '\P{changeswhencasemapped}', "");
Expect(1, 90, '\P{^changeswhencasemapped}', "");
Expect(0, 64, '\p{changeswhencasemapped}', "");
Expect(1, 64, '\p{^changeswhencasemapped}', "");
Expect(1, 64, '\P{changeswhencasemapped}', "");
Expect(0, 64, '\P{^changeswhencasemapped}', "");
Expect(1, 90, '\p{_-changeswhen_Casemapped}', "");
Expect(0, 90, '\p{^_-changeswhen_Casemapped}', "");
Expect(0, 90, '\P{_-changeswhen_Casemapped}', "");
Expect(1, 90, '\P{^_-changeswhen_Casemapped}', "");
Expect(0, 64, '\p{_-changeswhen_Casemapped}', "");
Expect(1, 64, '\p{^_-changeswhen_Casemapped}', "");
Expect(1, 64, '\P{_-changeswhen_Casemapped}', "");
Expect(0, 64, '\P{^_-changeswhen_Casemapped}', "");
Error('\p{ _Is:=Changes WHEN-Casemapped}');
Error('\P{ _Is:=Changes WHEN-Casemapped}');
Expect(1, 90, '\p{ischangeswhencasemapped}', "");
Expect(0, 90, '\p{^ischangeswhencasemapped}', "");
Expect(0, 90, '\P{ischangeswhencasemapped}', "");
Expect(1, 90, '\P{^ischangeswhencasemapped}', "");
Expect(0, 64, '\p{ischangeswhencasemapped}', "");
Expect(1, 64, '\p{^ischangeswhencasemapped}', "");
Expect(1, 64, '\P{ischangeswhencasemapped}', "");
Expect(0, 64, '\P{^ischangeswhencasemapped}', "");
Expect(1, 90, '\p{-Is Changes-When_Casemapped}', "");
Expect(0, 90, '\p{^-Is Changes-When_Casemapped}', "");
Expect(0, 90, '\P{-Is Changes-When_Casemapped}', "");
Expect(1, 90, '\P{^-Is Changes-When_Casemapped}', "");
Expect(0, 64, '\p{-Is Changes-When_Casemapped}', "");
Expect(1, 64, '\p{^-Is Changes-When_Casemapped}', "");
Expect(1, 64, '\P{-Is Changes-When_Casemapped}', "");
Expect(0, 64, '\P{^-Is Changes-When_Casemapped}', "");
Error('\p{_	cwcm/a/}');
Error('\P{_	cwcm/a/}');
Expect(1, 90, '\p{cwcm}', "");
Expect(0, 90, '\p{^cwcm}', "");
Expect(0, 90, '\P{cwcm}', "");
Expect(1, 90, '\P{^cwcm}', "");
Expect(0, 64, '\p{cwcm}', "");
Expect(1, 64, '\p{^cwcm}', "");
Expect(1, 64, '\P{cwcm}', "");
Expect(0, 64, '\P{^cwcm}', "");
Expect(1, 90, '\p{- cwcm}', "");
Expect(0, 90, '\p{^- cwcm}', "");
Expect(0, 90, '\P{- cwcm}', "");
Expect(1, 90, '\P{^- cwcm}', "");
Expect(0, 64, '\p{- cwcm}', "");
Expect(1, 64, '\p{^- cwcm}', "");
Expect(1, 64, '\P{- cwcm}', "");
Expect(0, 64, '\P{^- cwcm}', "");
Error('\p{/a/_ IsCWCM}');
Error('\P{/a/_ IsCWCM}');
Expect(1, 90, '\p{iscwcm}', "");
Expect(0, 90, '\p{^iscwcm}', "");
Expect(0, 90, '\P{iscwcm}', "");
Expect(1, 90, '\P{^iscwcm}', "");
Expect(0, 64, '\p{iscwcm}', "");
Expect(1, 64, '\p{^iscwcm}', "");
Expect(1, 64, '\P{iscwcm}', "");
Expect(0, 64, '\P{^iscwcm}', "");
Expect(1, 90, '\p{		Is	cwcm}', "");
Expect(0, 90, '\p{^		Is	cwcm}', "");
Expect(0, 90, '\P{		Is	cwcm}', "");
Expect(1, 90, '\P{^		Is	cwcm}', "");
Expect(0, 64, '\p{		Is	cwcm}', "");
Expect(1, 64, '\p{^		Is	cwcm}', "");
Expect(1, 64, '\P{		Is	cwcm}', "");
Expect(0, 64, '\P{^		Is	cwcm}', "");
Error('\p{:=  Dash}');
Error('\P{:=  Dash}');
Expect(1, 45, '\p{dash}', "");
Expect(0, 45, '\p{^dash}', "");
Expect(0, 45, '\P{dash}', "");
Expect(1, 45, '\P{^dash}', "");
Expect(0, 44, '\p{dash}', "");
Expect(1, 44, '\p{^dash}', "");
Expect(1, 44, '\P{dash}', "");
Expect(0, 44, '\P{^dash}', "");
Expect(1, 45, '\p{  DASH}', "");
Expect(0, 45, '\p{^  DASH}', "");
Expect(0, 45, '\P{  DASH}', "");
Expect(1, 45, '\P{^  DASH}', "");
Expect(0, 44, '\p{  DASH}', "");
Expect(1, 44, '\p{^  DASH}', "");
Expect(1, 44, '\P{  DASH}', "");
Expect(0, 44, '\P{^  DASH}', "");
Error('\p{  Is:=DASH}');
Error('\P{  Is:=DASH}');
Expect(1, 45, '\p{isdash}', "");
Expect(0, 45, '\p{^isdash}', "");
Expect(0, 45, '\P{isdash}', "");
Expect(1, 45, '\P{^isdash}', "");
Expect(0, 44, '\p{isdash}', "");
Expect(1, 44, '\p{^isdash}', "");
Expect(1, 44, '\P{isdash}', "");
Expect(0, 44, '\P{^isdash}', "");
Expect(1, 45, '\p{-	Is Dash}', "");
Expect(0, 45, '\p{^-	Is Dash}', "");
Expect(0, 45, '\P{-	Is Dash}', "");
Expect(1, 45, '\P{^-	Is Dash}', "");
Expect(0, 44, '\p{-	Is Dash}', "");
Expect(1, 44, '\p{^-	Is Dash}', "");
Expect(1, 44, '\P{-	Is Dash}', "");
Expect(0, 44, '\P{^-	Is Dash}', "");
Error('\p{	:=Counting	rod_Numerals}');
Error('\P{	:=Counting	rod_Numerals}');
Expect(1, 119679, '\p{countingrodnumerals}', "");
Expect(0, 119679, '\p{^countingrodnumerals}', "");
Expect(0, 119679, '\P{countingrodnumerals}', "");
Expect(1, 119679, '\P{^countingrodnumerals}', "");
Expect(0, 119647, '\p{countingrodnumerals}', "");
Expect(1, 119647, '\p{^countingrodnumerals}', "");
Expect(1, 119647, '\P{countingrodnumerals}', "");
Expect(0, 119647, '\P{^countingrodnumerals}', "");
Expect(1, 119679, '\p{	-CountingRod-Numerals}', "");
Expect(0, 119679, '\p{^	-CountingRod-Numerals}', "");
Expect(0, 119679, '\P{	-CountingRod-Numerals}', "");
Expect(1, 119679, '\P{^	-CountingRod-Numerals}', "");
Expect(0, 119647, '\p{	-CountingRod-Numerals}', "");
Expect(1, 119647, '\p{^	-CountingRod-Numerals}', "");
Expect(1, 119647, '\P{	-CountingRod-Numerals}', "");
Expect(0, 119647, '\P{^	-CountingRod-Numerals}', "");
Error('\p{ /a/IS-counting-Rod Numerals}');
Error('\P{ /a/IS-counting-Rod Numerals}');
Expect(1, 119679, '\p{iscountingrodnumerals}', "");
Expect(0, 119679, '\p{^iscountingrodnumerals}', "");
Expect(0, 119679, '\P{iscountingrodnumerals}', "");
Expect(1, 119679, '\P{^iscountingrodnumerals}', "");
Expect(0, 119647, '\p{iscountingrodnumerals}', "");
Expect(1, 119647, '\p{^iscountingrodnumerals}', "");
Expect(1, 119647, '\P{iscountingrodnumerals}', "");
Expect(0, 119647, '\P{^iscountingrodnumerals}', "");
Expect(1, 119679, '\p{	-is Counting_RODnumerals}', "");
Expect(0, 119679, '\p{^	-is Counting_RODnumerals}', "");
Expect(0, 119679, '\P{	-is Counting_RODnumerals}', "");
Expect(1, 119679, '\P{^	-is Counting_RODnumerals}', "");
Expect(0, 119647, '\p{	-is Counting_RODnumerals}', "");
Expect(1, 119647, '\p{^	-is Counting_RODnumerals}', "");
Expect(1, 119647, '\P{	-is Counting_RODnumerals}', "");
Expect(0, 119647, '\P{^	-is Counting_RODnumerals}', "");
Error('\p{/a/- In-COUNTING Rod-NUMERALS}');
Error('\P{/a/- In-COUNTING Rod-NUMERALS}');
Expect(1, 119679, '\p{incountingrodnumerals}', "");
Expect(0, 119679, '\p{^incountingrodnumerals}', "");
Expect(0, 119679, '\P{incountingrodnumerals}', "");
Expect(1, 119679, '\P{^incountingrodnumerals}', "");
Expect(0, 119647, '\p{incountingrodnumerals}', "");
Expect(1, 119647, '\p{^incountingrodnumerals}', "");
Expect(1, 119647, '\P{incountingrodnumerals}', "");
Expect(0, 119647, '\P{^incountingrodnumerals}', "");
Expect(1, 119679, '\p{- in counting	Rod-NUMERALS}', "");
Expect(0, 119679, '\p{^- in counting	Rod-NUMERALS}', "");
Expect(0, 119679, '\P{- in counting	Rod-NUMERALS}', "");
Expect(1, 119679, '\P{^- in counting	Rod-NUMERALS}', "");
Expect(0, 119647, '\p{- in counting	Rod-NUMERALS}', "");
Expect(1, 119647, '\p{^- in counting	Rod-NUMERALS}', "");
Expect(1, 119647, '\P{- in counting	Rod-NUMERALS}', "");
Expect(0, 119647, '\P{^- in counting	Rod-NUMERALS}', "");
Error('\p{ 	ENCLOSED:=ALPHANUMERIC	SUPPLEMENT}');
Error('\P{ 	ENCLOSED:=ALPHANUMERIC	SUPPLEMENT}');
Expect(1, 127487, '\p{enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^enclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^enclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{enclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^enclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{ -ENCLOSED	Alphanumeric supplement}', "");
Expect(0, 127487, '\p{^ -ENCLOSED	Alphanumeric supplement}', "");
Expect(0, 127487, '\P{ -ENCLOSED	Alphanumeric supplement}', "");
Expect(1, 127487, '\P{^ -ENCLOSED	Alphanumeric supplement}', "");
Expect(0, 127231, '\p{ -ENCLOSED	Alphanumeric supplement}', "");
Expect(1, 127231, '\p{^ -ENCLOSED	Alphanumeric supplement}', "");
Expect(1, 127231, '\P{ -ENCLOSED	Alphanumeric supplement}', "");
Expect(0, 127231, '\P{^ -ENCLOSED	Alphanumeric supplement}', "");
Error('\p{ :=isEnclosed_ALPHANUMERIC	supplement}');
Error('\P{ :=isEnclosed_ALPHANUMERIC	supplement}');
Expect(1, 127487, '\p{isenclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^isenclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{isenclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^isenclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{isenclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^isenclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{isenclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^isenclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{ _Is enclosed	Alphanumeric	SUPPLEMENT}', "");
Expect(0, 127487, '\p{^ _Is enclosed	Alphanumeric	SUPPLEMENT}', "");
Expect(0, 127487, '\P{ _Is enclosed	Alphanumeric	SUPPLEMENT}', "");
Expect(1, 127487, '\P{^ _Is enclosed	Alphanumeric	SUPPLEMENT}', "");
Expect(0, 127231, '\p{ _Is enclosed	Alphanumeric	SUPPLEMENT}', "");
Expect(1, 127231, '\p{^ _Is enclosed	Alphanumeric	SUPPLEMENT}', "");
Expect(1, 127231, '\P{ _Is enclosed	Alphanumeric	SUPPLEMENT}', "");
Expect(0, 127231, '\P{^ _Is enclosed	Alphanumeric	SUPPLEMENT}', "");
Error('\p{ _IN	Enclosed_Alphanumeric:=supplement}');
Error('\P{ _IN	Enclosed_Alphanumeric:=supplement}');
Expect(1, 127487, '\p{inenclosedalphanumericsupplement}', "");
Expect(0, 127487, '\p{^inenclosedalphanumericsupplement}', "");
Expect(0, 127487, '\P{inenclosedalphanumericsupplement}', "");
Expect(1, 127487, '\P{^inenclosedalphanumericsupplement}', "");
Expect(0, 127231, '\p{inenclosedalphanumericsupplement}', "");
Expect(1, 127231, '\p{^inenclosedalphanumericsupplement}', "");
Expect(1, 127231, '\P{inenclosedalphanumericsupplement}', "");
Expect(0, 127231, '\P{^inenclosedalphanumericsupplement}', "");
Expect(1, 127487, '\p{_	InEnclosed-ALPHANUMERIC	SUPPLEMENT}', "");
Expect(0, 127487, '\p{^_	InEnclosed-ALPHANUMERIC	SUPPLEMENT}', "");
Expect(0, 127487, '\P{_	InEnclosed-ALPHANUMERIC	SUPPLEMENT}', "");
Expect(1, 127487, '\P{^_	InEnclosed-ALPHANUMERIC	SUPPLEMENT}', "");
Expect(0, 127231, '\p{_	InEnclosed-ALPHANUMERIC	SUPPLEMENT}', "");
Expect(1, 127231, '\p{^_	InEnclosed-ALPHANUMERIC	SUPPLEMENT}', "");
Expect(1, 127231, '\P{_	InEnclosed-ALPHANUMERIC	SUPPLEMENT}', "");
Expect(0, 127231, '\P{^_	InEnclosed-ALPHANUMERIC	SUPPLEMENT}', "");
Error('\p{	IN/a/Tamil}');
Error('\P{	IN/a/Tamil}');
Expect(1, 3071, '\p{intamil}', "");
Expect(0, 3071, '\p{^intamil}', "");
Expect(0, 3071, '\P{intamil}', "");
Expect(1, 3071, '\P{^intamil}', "");
Expect(0, 2943, '\p{intamil}', "");
Expect(1, 2943, '\p{^intamil}', "");
Expect(1, 2943, '\P{intamil}', "");
Expect(0, 2943, '\P{^intamil}', "");
Expect(1, 3071, '\p{ -in-tamil}', "");
Expect(0, 3071, '\p{^ -in-tamil}', "");
Expect(0, 3071, '\P{ -in-tamil}', "");
Expect(1, 3071, '\P{^ -in-tamil}', "");
Expect(0, 2943, '\p{ -in-tamil}', "");
Expect(1, 2943, '\p{^ -in-tamil}', "");
Expect(1, 2943, '\P{ -in-tamil}', "");
Expect(0, 2943, '\P{^ -in-tamil}', "");
Error('\p{--IN:=ETHIOPIC}');
Error('\P{--IN:=ETHIOPIC}');
Expect(1, 4991, '\p{inethiopic}', "");
Expect(0, 4991, '\p{^inethiopic}', "");
Expect(0, 4991, '\P{inethiopic}', "");
Expect(1, 4991, '\P{^inethiopic}', "");
Expect(0, 4607, '\p{inethiopic}', "");
Expect(1, 4607, '\p{^inethiopic}', "");
Expect(1, 4607, '\P{inethiopic}', "");
Expect(0, 4607, '\P{^inethiopic}', "");
Expect(1, 4991, '\p{-_IN Ethiopic}', "");
Expect(0, 4991, '\p{^-_IN Ethiopic}', "");
Expect(0, 4991, '\P{-_IN Ethiopic}', "");
Expect(1, 4991, '\P{^-_IN Ethiopic}', "");
Expect(0, 4607, '\p{-_IN Ethiopic}', "");
Expect(1, 4607, '\p{^-_IN Ethiopic}', "");
Expect(1, 4607, '\P{-_IN Ethiopic}', "");
Expect(0, 4607, '\P{^-_IN Ethiopic}', "");
Error('\p{-_in-TAI/a/Le}');
Error('\P{-_in-TAI/a/Le}');
Expect(1, 6527, '\p{intaile}', "");
Expect(0, 6527, '\p{^intaile}', "");
Expect(0, 6527, '\P{intaile}', "");
Expect(1, 6527, '\P{^intaile}', "");
Expect(0, 6479, '\p{intaile}', "");
Expect(1, 6479, '\p{^intaile}', "");
Expect(1, 6479, '\P{intaile}', "");
Expect(0, 6479, '\P{^intaile}', "");
Expect(1, 6527, '\p{	-in TAI-Le}', "");
Expect(0, 6527, '\p{^	-in TAI-Le}', "");
Expect(0, 6527, '\P{	-in TAI-Le}', "");
Expect(1, 6527, '\P{^	-in TAI-Le}', "");
Expect(0, 6479, '\p{	-in TAI-Le}', "");
Expect(1, 6479, '\p{^	-in TAI-Le}', "");
Expect(1, 6479, '\P{	-in TAI-Le}', "");
Expect(0, 6479, '\P{^	-in TAI-Le}', "");
Error('\p{	:=Kangxi	radicals}');
Error('\P{	:=Kangxi	radicals}');
Expect(1, 12255, '\p{kangxiradicals}', "");
Expect(0, 12255, '\p{^kangxiradicals}', "");
Expect(0, 12255, '\P{kangxiradicals}', "");
Expect(1, 12255, '\P{^kangxiradicals}', "");
Expect(0, 12031, '\p{kangxiradicals}', "");
Expect(1, 12031, '\p{^kangxiradicals}', "");
Expect(1, 12031, '\P{kangxiradicals}', "");
Expect(0, 12031, '\P{^kangxiradicals}', "");
Expect(1, 12255, '\p{_kangxi_RADICALS}', "");
Expect(0, 12255, '\p{^_kangxi_RADICALS}', "");
Expect(0, 12255, '\P{_kangxi_RADICALS}', "");
Expect(1, 12255, '\P{^_kangxi_RADICALS}', "");
Expect(0, 12031, '\p{_kangxi_RADICALS}', "");
Expect(1, 12031, '\p{^_kangxi_RADICALS}', "");
Expect(1, 12031, '\P{_kangxi_RADICALS}', "");
Expect(0, 12031, '\P{^_kangxi_RADICALS}', "");
Error('\p{-:=IS	kangxi	RADICALS}');
Error('\P{-:=IS	kangxi	RADICALS}');
Expect(1, 12255, '\p{iskangxiradicals}', "");
Expect(0, 12255, '\p{^iskangxiradicals}', "");
Expect(0, 12255, '\P{iskangxiradicals}', "");
Expect(1, 12255, '\P{^iskangxiradicals}', "");
Expect(0, 12031, '\p{iskangxiradicals}', "");
Expect(1, 12031, '\p{^iskangxiradicals}', "");
Expect(1, 12031, '\P{iskangxiradicals}', "");
Expect(0, 12031, '\P{^iskangxiradicals}', "");
Expect(1, 12255, '\p{	is	kangxi RADICALS}', "");
Expect(0, 12255, '\p{^	is	kangxi RADICALS}', "");
Expect(0, 12255, '\P{	is	kangxi RADICALS}', "");
Expect(1, 12255, '\P{^	is	kangxi RADICALS}', "");
Expect(0, 12031, '\p{	is	kangxi RADICALS}', "");
Expect(1, 12031, '\p{^	is	kangxi RADICALS}', "");
Expect(1, 12031, '\P{	is	kangxi RADICALS}', "");
Expect(0, 12031, '\P{^	is	kangxi RADICALS}', "");
Error('\p{__In:=kangxi_radicals}');
Error('\P{__In:=kangxi_radicals}');
Expect(1, 12255, '\p{inkangxiradicals}', "");
Expect(0, 12255, '\p{^inkangxiradicals}', "");
Expect(0, 12255, '\P{inkangxiradicals}', "");
Expect(1, 12255, '\P{^inkangxiradicals}', "");
Expect(0, 12031, '\p{inkangxiradicals}', "");
Expect(1, 12031, '\p{^inkangxiradicals}', "");
Expect(1, 12031, '\P{inkangxiradicals}', "");
Expect(0, 12031, '\P{^inkangxiradicals}', "");
Expect(1, 12255, '\p{ 	in Kangxiradicals}', "");
Expect(0, 12255, '\p{^ 	in Kangxiradicals}', "");
Expect(0, 12255, '\P{ 	in Kangxiradicals}', "");
Expect(1, 12255, '\P{^ 	in Kangxiradicals}', "");
Expect(0, 12031, '\p{ 	in Kangxiradicals}', "");
Expect(1, 12031, '\p{^ 	in Kangxiradicals}', "");
Expect(1, 12031, '\P{ 	in Kangxiradicals}', "");
Expect(0, 12031, '\P{^ 	in Kangxiradicals}', "");
Error('\p{	InHebrew/a/}');
Error('\P{	InHebrew/a/}');
Expect(1, 1535, '\p{inhebrew}', "");
Expect(0, 1535, '\p{^inhebrew}', "");
Expect(0, 1535, '\P{inhebrew}', "");
Expect(1, 1535, '\P{^inhebrew}', "");
Expect(0, 1423, '\p{inhebrew}', "");
Expect(1, 1423, '\p{^inhebrew}', "");
Expect(1, 1423, '\P{inhebrew}', "");
Expect(0, 1423, '\P{^inhebrew}', "");
Expect(1, 1535, '\p{ 	in-HEBREW}', "");
Expect(0, 1535, '\p{^ 	in-HEBREW}', "");
Expect(0, 1535, '\P{ 	in-HEBREW}', "");
Expect(1, 1535, '\P{^ 	in-HEBREW}', "");
Expect(0, 1423, '\p{ 	in-HEBREW}', "");
Expect(1, 1423, '\p{^ 	in-HEBREW}', "");
Expect(1, 1423, '\P{ 	in-HEBREW}', "");
Expect(0, 1423, '\P{^ 	in-HEBREW}', "");
Error('\p{__IN	inscriptional:=Parthian}');
Error('\P{__IN	inscriptional:=Parthian}');
Expect(1, 68447, '\p{ininscriptionalparthian}', "");
Expect(0, 68447, '\p{^ininscriptionalparthian}', "");
Expect(0, 68447, '\P{ininscriptionalparthian}', "");
Expect(1, 68447, '\P{^ininscriptionalparthian}', "");
Expect(0, 68415, '\p{ininscriptionalparthian}', "");
Expect(1, 68415, '\p{^ininscriptionalparthian}', "");
Expect(1, 68415, '\P{ininscriptionalparthian}', "");
Expect(0, 68415, '\P{^ininscriptionalparthian}', "");
Expect(1, 68447, '\p{-_in Inscriptional parthian}', "");
Expect(0, 68447, '\p{^-_in Inscriptional parthian}', "");
Expect(0, 68447, '\P{-_in Inscriptional parthian}', "");
Expect(1, 68447, '\P{^-_in Inscriptional parthian}', "");
Expect(0, 68415, '\p{-_in Inscriptional parthian}', "");
Expect(1, 68415, '\p{^-_in Inscriptional parthian}', "");
Expect(1, 68415, '\P{-_in Inscriptional parthian}', "");
Expect(0, 68415, '\P{^-_in Inscriptional parthian}', "");
Error('\p{	/a/In NEW	tai	Lue}');
Error('\P{	/a/In NEW	tai	Lue}');
Expect(1, 6623, '\p{innewtailue}', "");
Expect(0, 6623, '\p{^innewtailue}', "");
Expect(0, 6623, '\P{innewtailue}', "");
Expect(1, 6623, '\P{^innewtailue}', "");
Expect(0, 6527, '\p{innewtailue}', "");
Expect(1, 6527, '\p{^innewtailue}', "");
Expect(1, 6527, '\P{innewtailue}', "");
Expect(0, 6527, '\P{^innewtailue}', "");
Expect(1, 6623, '\p{	-InNEW-TaiLue}', "");
Expect(0, 6623, '\p{^	-InNEW-TaiLue}', "");
Expect(0, 6623, '\P{	-InNEW-TaiLue}', "");
Expect(1, 6623, '\P{^	-InNEW-TaiLue}', "");
Expect(0, 6527, '\p{	-InNEW-TaiLue}', "");
Expect(1, 6527, '\p{^	-InNEW-TaiLue}', "");
Expect(1, 6527, '\P{	-InNEW-TaiLue}', "");
Expect(0, 6527, '\P{^	-InNEW-TaiLue}', "");
Error('\p{:=	_in-Imperial-Aramaic}');
Error('\P{:=	_in-Imperial-Aramaic}');
Expect(1, 67679, '\p{inimperialaramaic}', "");
Expect(0, 67679, '\p{^inimperialaramaic}', "");
Expect(0, 67679, '\P{inimperialaramaic}', "");
Expect(1, 67679, '\P{^inimperialaramaic}', "");
Expect(0, 67647, '\p{inimperialaramaic}', "");
Expect(1, 67647, '\p{^inimperialaramaic}', "");
Expect(1, 67647, '\P{inimperialaramaic}', "");
Expect(0, 67647, '\P{^inimperialaramaic}', "");
Expect(1, 67679, '\p{__INimperial-ARAMAIC}', "");
Expect(0, 67679, '\p{^__INimperial-ARAMAIC}', "");
Expect(0, 67679, '\P{__INimperial-ARAMAIC}', "");
Expect(1, 67679, '\P{^__INimperial-ARAMAIC}', "");
Expect(0, 67647, '\p{__INimperial-ARAMAIC}', "");
Expect(1, 67647, '\p{^__INimperial-ARAMAIC}', "");
Expect(1, 67647, '\P{__INimperial-ARAMAIC}', "");
Expect(0, 67647, '\P{^__INimperial-ARAMAIC}', "");
Error('\p{	_CJKCOMPATIBILITY/a/forms}');
Error('\P{	_CJKCOMPATIBILITY/a/forms}');
Expect(1, 65103, '\p{cjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^cjkcompatibilityforms}', "");
Expect(0, 65103, '\P{cjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^cjkcompatibilityforms}', "");
Expect(0, 65071, '\p{cjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^cjkcompatibilityforms}', "");
Expect(1, 65071, '\P{cjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^cjkcompatibilityforms}', "");
Expect(1, 65103, '\p{	_cjk-COMPATIBILITY	Forms}', "");
Expect(0, 65103, '\p{^	_cjk-COMPATIBILITY	Forms}', "");
Expect(0, 65103, '\P{	_cjk-COMPATIBILITY	Forms}', "");
Expect(1, 65103, '\P{^	_cjk-COMPATIBILITY	Forms}', "");
Expect(0, 65071, '\p{	_cjk-COMPATIBILITY	Forms}', "");
Expect(1, 65071, '\p{^	_cjk-COMPATIBILITY	Forms}', "");
Expect(1, 65071, '\P{	_cjk-COMPATIBILITY	Forms}', "");
Expect(0, 65071, '\P{^	_cjk-COMPATIBILITY	Forms}', "");
Error('\p{	 is/a/CJKCompatibilityFORMS}');
Error('\P{	 is/a/CJKCompatibilityFORMS}');
Expect(1, 65103, '\p{iscjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^iscjkcompatibilityforms}', "");
Expect(0, 65103, '\P{iscjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^iscjkcompatibilityforms}', "");
Expect(0, 65071, '\p{iscjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^iscjkcompatibilityforms}', "");
Expect(1, 65071, '\P{iscjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^iscjkcompatibilityforms}', "");
Expect(1, 65103, '\p{	 Is-CJK	Compatibility_FORMS}', "");
Expect(0, 65103, '\p{^	 Is-CJK	Compatibility_FORMS}', "");
Expect(0, 65103, '\P{	 Is-CJK	Compatibility_FORMS}', "");
Expect(1, 65103, '\P{^	 Is-CJK	Compatibility_FORMS}', "");
Expect(0, 65071, '\p{	 Is-CJK	Compatibility_FORMS}', "");
Expect(1, 65071, '\p{^	 Is-CJK	Compatibility_FORMS}', "");
Expect(1, 65071, '\P{	 Is-CJK	Compatibility_FORMS}', "");
Expect(0, 65071, '\P{^	 Is-CJK	Compatibility_FORMS}', "");
Error('\p{In-CJK_COMPATIBILITY/a/Forms}');
Error('\P{In-CJK_COMPATIBILITY/a/Forms}');
Expect(1, 65103, '\p{incjkcompatibilityforms}', "");
Expect(0, 65103, '\p{^incjkcompatibilityforms}', "");
Expect(0, 65103, '\P{incjkcompatibilityforms}', "");
Expect(1, 65103, '\P{^incjkcompatibilityforms}', "");
Expect(0, 65071, '\p{incjkcompatibilityforms}', "");
Expect(1, 65071, '\p{^incjkcompatibilityforms}', "");
Expect(1, 65071, '\P{incjkcompatibilityforms}', "");
Expect(0, 65071, '\P{^incjkcompatibilityforms}', "");
Expect(1, 65103, '\p{__inCJKCompatibility FORMS}', "");
Expect(0, 65103, '\p{^__inCJKCompatibility FORMS}', "");
Expect(0, 65103, '\P{__inCJKCompatibility FORMS}', "");
Expect(1, 65103, '\P{^__inCJKCompatibility FORMS}', "");
Expect(0, 65071, '\p{__inCJKCompatibility FORMS}', "");
Expect(1, 65071, '\p{^__inCJKCompatibility FORMS}', "");
Expect(1, 65071, '\P{__inCJKCompatibility FORMS}', "");
Expect(0, 65071, '\P{^__inCJKCompatibility FORMS}', "");
Error('\p{/a/-In Saurashtra}');
Error('\P{/a/-In Saurashtra}');
Expect(1, 43231, '\p{insaurashtra}', "");
Expect(0, 43231, '\p{^insaurashtra}', "");
Expect(0, 43231, '\P{insaurashtra}', "");
Expect(1, 43231, '\P{^insaurashtra}', "");
Expect(0, 43135, '\p{insaurashtra}', "");
Expect(1, 43135, '\p{^insaurashtra}', "");
Expect(1, 43135, '\P{insaurashtra}', "");
Expect(0, 43135, '\P{^insaurashtra}', "");
Expect(1, 43231, '\p{ IN_saurashtra}', "");
Expect(0, 43231, '\p{^ IN_saurashtra}', "");
Expect(0, 43231, '\P{ IN_saurashtra}', "");
Expect(1, 43231, '\P{^ IN_saurashtra}', "");
Expect(0, 43135, '\p{ IN_saurashtra}', "");
Expect(1, 43135, '\p{^ IN_saurashtra}', "");
Expect(1, 43135, '\P{ IN_saurashtra}', "");
Expect(0, 43135, '\P{^ IN_saurashtra}', "");
Error('\p{ :=In_Gujarati}');
Error('\P{ :=In_Gujarati}');
Expect(1, 2815, '\p{ingujarati}', "");
Expect(0, 2815, '\p{^ingujarati}', "");
Expect(0, 2815, '\P{ingujarati}', "");
Expect(1, 2815, '\P{^ingujarati}', "");
Expect(0, 2687, '\p{ingujarati}', "");
Expect(1, 2687, '\p{^ingujarati}', "");
Expect(1, 2687, '\P{ingujarati}', "");
Expect(0, 2687, '\P{^ingujarati}', "");
Expect(1, 2815, '\p{_-In GUJARATI}', "");
Expect(0, 2815, '\p{^_-In GUJARATI}', "");
Expect(0, 2815, '\P{_-In GUJARATI}', "");
Expect(1, 2815, '\P{^_-In GUJARATI}', "");
Expect(0, 2687, '\p{_-In GUJARATI}', "");
Expect(1, 2687, '\p{^_-In GUJARATI}', "");
Expect(1, 2687, '\P{_-In GUJARATI}', "");
Expect(0, 2687, '\P{^_-In GUJARATI}', "");
Error('\p{_/a/In Osmanya}');
Error('\P{_/a/In Osmanya}');
Expect(1, 66735, '\p{inosmanya}', "");
Expect(0, 66735, '\p{^inosmanya}', "");
Expect(0, 66735, '\P{inosmanya}', "");
Expect(1, 66735, '\P{^inosmanya}', "");
Expect(0, 66687, '\p{inosmanya}', "");
Expect(1, 66687, '\p{^inosmanya}', "");
Expect(1, 66687, '\P{inosmanya}', "");
Expect(0, 66687, '\P{^inosmanya}', "");
Expect(1, 66735, '\p{- Inosmanya}', "");
Expect(0, 66735, '\p{^- Inosmanya}', "");
Expect(0, 66735, '\P{- Inosmanya}', "");
Expect(1, 66735, '\P{^- Inosmanya}', "");
Expect(0, 66687, '\p{- Inosmanya}', "");
Expect(1, 66687, '\p{^- Inosmanya}', "");
Expect(1, 66687, '\P{- Inosmanya}', "");
Expect(0, 66687, '\P{^- Inosmanya}', "");
Error('\p{:=In_TIFINAGH}');
Error('\P{:=In_TIFINAGH}');
Expect(1, 11647, '\p{intifinagh}', "");
Expect(0, 11647, '\p{^intifinagh}', "");
Expect(0, 11647, '\P{intifinagh}', "");
Expect(1, 11647, '\P{^intifinagh}', "");
Expect(0, 11567, '\p{intifinagh}', "");
Expect(1, 11567, '\p{^intifinagh}', "");
Expect(1, 11567, '\P{intifinagh}', "");
Expect(0, 11567, '\P{^intifinagh}', "");
Expect(1, 11647, '\p{-InTIFINAGH}', "");
Expect(0, 11647, '\p{^-InTIFINAGH}', "");
Expect(0, 11647, '\P{-InTIFINAGH}', "");
Expect(1, 11647, '\P{^-InTIFINAGH}', "");
Expect(0, 11567, '\p{-InTIFINAGH}', "");
Expect(1, 11567, '\p{^-InTIFINAGH}', "");
Expect(1, 11567, '\P{-InTIFINAGH}', "");
Expect(0, 11567, '\P{^-InTIFINAGH}', "");
Error('\p{-	posixprint/a/}');
Error('\P{-	posixprint/a/}');
Expect(1, 126, '\p{posixprint}', "");
Expect(0, 126, '\p{^posixprint}', "");
Expect(0, 126, '\P{posixprint}', "");
Expect(1, 126, '\P{^posixprint}', "");
Expect(0, 31, '\p{posixprint}', "");
Expect(1, 31, '\p{^posixprint}', "");
Expect(1, 31, '\P{posixprint}', "");
Expect(0, 31, '\P{^posixprint}', "");
Expect(1, 126, '\p{-_PosixPrint}', "");
Expect(0, 126, '\p{^-_PosixPrint}', "");
Expect(0, 126, '\P{-_PosixPrint}', "");
Expect(1, 126, '\P{^-_PosixPrint}', "");
Expect(0, 31, '\p{-_PosixPrint}', "");
Expect(1, 31, '\p{^-_PosixPrint}', "");
Expect(1, 31, '\P{-_PosixPrint}', "");
Expect(0, 31, '\P{^-_PosixPrint}', "");
Error('\p{:=-IsPOSIXPRINT}');
Error('\P{:=-IsPOSIXPRINT}');
Expect(1, 126, '\p{isposixprint}', "");
Expect(0, 126, '\p{^isposixprint}', "");
Expect(0, 126, '\P{isposixprint}', "");
Expect(1, 126, '\P{^isposixprint}', "");
Expect(0, 31, '\p{isposixprint}', "");
Expect(1, 31, '\p{^isposixprint}', "");
Expect(1, 31, '\P{isposixprint}', "");
Expect(0, 31, '\P{^isposixprint}', "");
Expect(1, 126, '\p{ -isPOSIXPRINT}', "");
Expect(0, 126, '\p{^ -isPOSIXPRINT}', "");
Expect(0, 126, '\P{ -isPOSIXPRINT}', "");
Expect(1, 126, '\P{^ -isPOSIXPRINT}', "");
Expect(0, 31, '\p{ -isPOSIXPRINT}', "");
Expect(1, 31, '\p{^ -isPOSIXPRINT}', "");
Expect(1, 31, '\P{ -isPOSIXPRINT}', "");
Expect(0, 31, '\P{^ -isPOSIXPRINT}', "");
Error('\p{_/a/in-Hanunoo}');
Error('\P{_/a/in-Hanunoo}');
Expect(1, 5951, '\p{inhanunoo}', "");
Expect(0, 5951, '\p{^inhanunoo}', "");
Expect(0, 5951, '\P{inhanunoo}', "");
Expect(1, 5951, '\P{^inhanunoo}', "");
Expect(0, 5919, '\p{inhanunoo}', "");
Expect(1, 5919, '\p{^inhanunoo}', "");
Expect(1, 5919, '\P{inhanunoo}', "");
Expect(0, 5919, '\P{^inhanunoo}', "");
Expect(1, 5951, '\p{-_in Hanunoo}', "");
Expect(0, 5951, '\p{^-_in Hanunoo}', "");
Expect(0, 5951, '\P{-_in Hanunoo}', "");
Expect(1, 5951, '\P{^-_in Hanunoo}', "");
Expect(0, 5919, '\p{-_in Hanunoo}', "");
Expect(1, 5919, '\p{^-_in Hanunoo}', "");
Expect(1, 5919, '\P{-_in Hanunoo}', "");
Expect(0, 5919, '\P{^-_in Hanunoo}', "");
Error('\p{:=	 INCyrillic}');
Error('\P{:=	 INCyrillic}');
Expect(1, 1279, '\p{incyrillic}', "");
Expect(0, 1279, '\p{^incyrillic}', "");
Expect(0, 1279, '\P{incyrillic}', "");
Expect(1, 1279, '\P{^incyrillic}', "");
Expect(0, 1023, '\p{incyrillic}', "");
Expect(1, 1023, '\p{^incyrillic}', "");
Expect(1, 1023, '\P{incyrillic}', "");
Expect(0, 1023, '\P{^incyrillic}', "");
Expect(1, 1279, '\p{_in_Cyrillic}', "");
Expect(0, 1279, '\p{^_in_Cyrillic}', "");
Expect(0, 1279, '\P{_in_Cyrillic}', "");
Expect(1, 1279, '\P{^_in_Cyrillic}', "");
Expect(0, 1023, '\p{_in_Cyrillic}', "");
Expect(1, 1023, '\p{^_in_Cyrillic}', "");
Expect(1, 1023, '\P{_in_Cyrillic}', "");
Expect(0, 1023, '\P{^_in_Cyrillic}', "");
Error('\p{-/a/In buhid}');
Error('\P{-/a/In buhid}');
Expect(1, 5983, '\p{inbuhid}', "");
Expect(0, 5983, '\p{^inbuhid}', "");
Expect(0, 5983, '\P{inbuhid}', "");
Expect(1, 5983, '\P{^inbuhid}', "");
Expect(0, 5951, '\p{inbuhid}', "");
Expect(1, 5951, '\p{^inbuhid}', "");
Expect(1, 5951, '\P{inbuhid}', "");
Expect(0, 5951, '\P{^inbuhid}', "");
Expect(1, 5983, '\p{	In	Buhid}', "");
Expect(0, 5983, '\p{^	In	Buhid}', "");
Expect(0, 5983, '\P{	In	Buhid}', "");
Expect(1, 5983, '\P{^	In	Buhid}', "");
Expect(0, 5951, '\p{	In	Buhid}', "");
Expect(1, 5951, '\p{^	In	Buhid}', "");
Expect(1, 5951, '\P{	In	Buhid}', "");
Expect(0, 5951, '\P{^	In	Buhid}', "");
Error('\p{	/a/In Runic}');
Error('\P{	/a/In Runic}');
Expect(1, 5887, '\p{inrunic}', "");
Expect(0, 5887, '\p{^inrunic}', "");
Expect(0, 5887, '\P{inrunic}', "");
Expect(1, 5887, '\P{^inrunic}', "");
Expect(0, 5791, '\p{inrunic}', "");
Expect(1, 5791, '\p{^inrunic}', "");
Expect(1, 5791, '\P{inrunic}', "");
Expect(0, 5791, '\P{^inrunic}', "");
Expect(1, 5887, '\p{ _IN_RUNIC}', "");
Expect(0, 5887, '\p{^ _IN_RUNIC}', "");
Expect(0, 5887, '\P{ _IN_RUNIC}', "");
Expect(1, 5887, '\P{^ _IN_RUNIC}', "");
Expect(0, 5791, '\p{ _IN_RUNIC}', "");
Expect(1, 5791, '\p{^ _IN_RUNIC}', "");
Expect(1, 5791, '\P{ _IN_RUNIC}', "");
Expect(0, 5791, '\P{^ _IN_RUNIC}', "");
Error('\p{IDS_Binary_Operator=-/a/yes}');
Error('\P{IDS_Binary_Operator=-/a/yes}');
Expect(1, 12273, '\p{IDS_Binary_Operator=yes}', "");
Expect(0, 12273, '\p{^IDS_Binary_Operator=yes}', "");
Expect(0, 12273, '\P{IDS_Binary_Operator=yes}', "");
Expect(1, 12273, '\P{^IDS_Binary_Operator=yes}', "");
Expect(0, 12271, '\p{IDS_Binary_Operator=yes}', "");
Expect(1, 12271, '\p{^IDS_Binary_Operator=yes}', "");
Expect(1, 12271, '\P{IDS_Binary_Operator=yes}', "");
Expect(0, 12271, '\P{^IDS_Binary_Operator=yes}', "");
Expect(1, 12273, '\p{IDS_Binary_Operator=-yes}', "");
Expect(0, 12273, '\p{^IDS_Binary_Operator=-yes}', "");
Expect(0, 12273, '\P{IDS_Binary_Operator=-yes}', "");
Expect(1, 12273, '\P{^IDS_Binary_Operator=-yes}', "");
Expect(0, 12271, '\p{IDS_Binary_Operator=-yes}', "");
Expect(1, 12271, '\p{^IDS_Binary_Operator=-yes}', "");
Expect(1, 12271, '\P{IDS_Binary_Operator=-yes}', "");
Expect(0, 12271, '\P{^IDS_Binary_Operator=-yes}', "");
Error('\p{IDSB=:=Y}');
Error('\P{IDSB=:=Y}');
Expect(1, 12273, '\p{IDSB=y}', "");
Expect(0, 12273, '\p{^IDSB=y}', "");
Expect(0, 12273, '\P{IDSB=y}', "");
Expect(1, 12273, '\P{^IDSB=y}', "");
Expect(0, 12271, '\p{IDSB=y}', "");
Expect(1, 12271, '\p{^IDSB=y}', "");
Expect(1, 12271, '\P{IDSB=y}', "");
Expect(0, 12271, '\P{^IDSB=y}', "");
Expect(1, 12273, '\p{IDSB=	Y}', "");
Expect(0, 12273, '\p{^IDSB=	Y}', "");
Expect(0, 12273, '\P{IDSB=	Y}', "");
Expect(1, 12273, '\P{^IDSB=	Y}', "");
Expect(0, 12271, '\p{IDSB=	Y}', "");
Expect(1, 12271, '\p{^IDSB=	Y}', "");
Expect(1, 12271, '\P{IDSB=	Y}', "");
Expect(0, 12271, '\P{^IDSB=	Y}', "");
Error('\p{Is_IDS_Binary_Operator:	:=-t}');
Error('\P{Is_IDS_Binary_Operator:	:=-t}');
Expect(1, 12273, '\p{Is_IDS_Binary_Operator=t}', "");
Expect(0, 12273, '\p{^Is_IDS_Binary_Operator=t}', "");
Expect(0, 12273, '\P{Is_IDS_Binary_Operator=t}', "");
Expect(1, 12273, '\P{^Is_IDS_Binary_Operator=t}', "");
Expect(0, 12271, '\p{Is_IDS_Binary_Operator=t}', "");
Expect(1, 12271, '\p{^Is_IDS_Binary_Operator=t}', "");
Expect(1, 12271, '\P{Is_IDS_Binary_Operator=t}', "");
Expect(0, 12271, '\P{^Is_IDS_Binary_Operator=t}', "");
Expect(1, 12273, '\p{Is_IDS_Binary_Operator=_ T}', "");
Expect(0, 12273, '\p{^Is_IDS_Binary_Operator=_ T}', "");
Expect(0, 12273, '\P{Is_IDS_Binary_Operator=_ T}', "");
Expect(1, 12273, '\P{^Is_IDS_Binary_Operator=_ T}', "");
Expect(0, 12271, '\p{Is_IDS_Binary_Operator=_ T}', "");
Expect(1, 12271, '\p{^Is_IDS_Binary_Operator=_ T}', "");
Expect(1, 12271, '\P{Is_IDS_Binary_Operator=_ T}', "");
Expect(0, 12271, '\P{^Is_IDS_Binary_Operator=_ T}', "");
Error('\p{Is_IDSB=/a/True}');
Error('\P{Is_IDSB=/a/True}');
Expect(1, 12273, '\p{Is_IDSB=true}', "");
Expect(0, 12273, '\p{^Is_IDSB=true}', "");
Expect(0, 12273, '\P{Is_IDSB=true}', "");
Expect(1, 12273, '\P{^Is_IDSB=true}', "");
Expect(0, 12271, '\p{Is_IDSB=true}', "");
Expect(1, 12271, '\p{^Is_IDSB=true}', "");
Expect(1, 12271, '\P{Is_IDSB=true}', "");
Expect(0, 12271, '\P{^Is_IDSB=true}', "");
Expect(1, 12273, '\p{Is_IDSB=	-TRUE}', "");
Expect(0, 12273, '\p{^Is_IDSB=	-TRUE}', "");
Expect(0, 12273, '\P{Is_IDSB=	-TRUE}', "");
Expect(1, 12273, '\P{^Is_IDSB=	-TRUE}', "");
Expect(0, 12271, '\p{Is_IDSB=	-TRUE}', "");
Expect(1, 12271, '\p{^Is_IDSB=	-TRUE}', "");
Expect(1, 12271, '\P{Is_IDSB=	-TRUE}', "");
Expect(0, 12271, '\P{^Is_IDSB=	-TRUE}', "");
Error('\p{IDS_Binary_Operator=/a/-NO}');
Error('\P{IDS_Binary_Operator=/a/-NO}');
Expect(1, 12271, '\p{IDS_Binary_Operator=no}', "");
Expect(0, 12271, '\p{^IDS_Binary_Operator=no}', "");
Expect(0, 12271, '\P{IDS_Binary_Operator=no}', "");
Expect(1, 12271, '\P{^IDS_Binary_Operator=no}', "");
Expect(0, 12273, '\p{IDS_Binary_Operator=no}', "");
Expect(1, 12273, '\p{^IDS_Binary_Operator=no}', "");
Expect(1, 12273, '\P{IDS_Binary_Operator=no}', "");
Expect(0, 12273, '\P{^IDS_Binary_Operator=no}', "");
Expect(1, 12271, '\p{IDS_Binary_Operator=_	No}', "");
Expect(0, 12271, '\p{^IDS_Binary_Operator=_	No}', "");
Expect(0, 12271, '\P{IDS_Binary_Operator=_	No}', "");
Expect(1, 12271, '\P{^IDS_Binary_Operator=_	No}', "");
Expect(0, 12273, '\p{IDS_Binary_Operator=_	No}', "");
Expect(1, 12273, '\p{^IDS_Binary_Operator=_	No}', "");
Expect(1, 12273, '\P{IDS_Binary_Operator=_	No}', "");
Expect(0, 12273, '\P{^IDS_Binary_Operator=_	No}', "");
Error('\p{IDSB=_ N:=}');
Error('\P{IDSB=_ N:=}');
Expect(1, 12271, '\p{IDSB=n}', "");
Expect(0, 12271, '\p{^IDSB=n}', "");
Expect(0, 12271, '\P{IDSB=n}', "");
Expect(1, 12271, '\P{^IDSB=n}', "");
Expect(0, 12273, '\p{IDSB=n}', "");
Expect(1, 12273, '\p{^IDSB=n}', "");
Expect(1, 12273, '\P{IDSB=n}', "");
Expect(0, 12273, '\P{^IDSB=n}', "");
Expect(1, 12271, '\p{IDSB=_ N}', "");
Expect(0, 12271, '\p{^IDSB=_ N}', "");
Expect(0, 12271, '\P{IDSB=_ N}', "");
Expect(1, 12271, '\P{^IDSB=_ N}', "");
Expect(0, 12273, '\p{IDSB=_ N}', "");
Expect(1, 12273, '\p{^IDSB=_ N}', "");
Expect(1, 12273, '\P{IDSB=_ N}', "");
Expect(0, 12273, '\P{^IDSB=_ N}', "");
Error('\p{Is_IDS_Binary_Operator=_/a/f}');
Error('\P{Is_IDS_Binary_Operator=_/a/f}');
Expect(1, 12271, '\p{Is_IDS_Binary_Operator=f}', "");
Expect(0, 12271, '\p{^Is_IDS_Binary_Operator=f}', "");
Expect(0, 12271, '\P{Is_IDS_Binary_Operator=f}', "");
Expect(1, 12271, '\P{^Is_IDS_Binary_Operator=f}', "");
Expect(0, 12273, '\p{Is_IDS_Binary_Operator=f}', "");
Expect(1, 12273, '\p{^Is_IDS_Binary_Operator=f}', "");
Expect(1, 12273, '\P{Is_IDS_Binary_Operator=f}', "");
Expect(0, 12273, '\P{^Is_IDS_Binary_Operator=f}', "");
Expect(1, 12271, '\p{Is_IDS_Binary_Operator=  f}', "");
Expect(0, 12271, '\p{^Is_IDS_Binary_Operator=  f}', "");
Expect(0, 12271, '\P{Is_IDS_Binary_Operator=  f}', "");
Expect(1, 12271, '\P{^Is_IDS_Binary_Operator=  f}', "");
Expect(0, 12273, '\p{Is_IDS_Binary_Operator=  f}', "");
Expect(1, 12273, '\p{^Is_IDS_Binary_Operator=  f}', "");
Expect(1, 12273, '\P{Is_IDS_Binary_Operator=  f}', "");
Expect(0, 12273, '\P{^Is_IDS_Binary_Operator=  f}', "");
Error('\p{Is_IDSB=/a/ False}');
Error('\P{Is_IDSB=/a/ False}');
Expect(1, 12271, '\p{Is_IDSB:	false}', "");
Expect(0, 12271, '\p{^Is_IDSB:	false}', "");
Expect(0, 12271, '\P{Is_IDSB:	false}', "");
Expect(1, 12271, '\P{^Is_IDSB:	false}', "");
Expect(0, 12273, '\p{Is_IDSB:	false}', "");
Expect(1, 12273, '\p{^Is_IDSB:	false}', "");
Expect(1, 12273, '\P{Is_IDSB:	false}', "");
Expect(0, 12273, '\P{^Is_IDSB:	false}', "");
Expect(1, 12271, '\p{Is_IDSB=	False}', "");
Expect(0, 12271, '\p{^Is_IDSB=	False}', "");
Expect(0, 12271, '\P{Is_IDSB=	False}', "");
Expect(1, 12271, '\P{^Is_IDSB=	False}', "");
Expect(0, 12273, '\p{Is_IDSB=	False}', "");
Expect(1, 12273, '\p{^Is_IDSB=	False}', "");
Expect(1, 12273, '\P{Is_IDSB=	False}', "");
Expect(0, 12273, '\P{^Is_IDSB=	False}', "");
Error('\p{General_Category=:=_	symbol}');
Error('\P{General_Category=:=_	symbol}');
Expect(1, 36, '\p{General_Category=symbol}', "");
Expect(0, 36, '\p{^General_Category=symbol}', "");
Expect(0, 36, '\P{General_Category=symbol}', "");
Expect(1, 36, '\P{^General_Category=symbol}', "");
Expect(0, 35, '\p{General_Category=symbol}', "");
Expect(1, 35, '\p{^General_Category=symbol}', "");
Expect(1, 35, '\P{General_Category=symbol}', "");
Expect(0, 35, '\P{^General_Category=symbol}', "");
Expect(1, 36, '\p{General_Category= -Symbol}', "");
Expect(0, 36, '\p{^General_Category= -Symbol}', "");
Expect(0, 36, '\P{General_Category= -Symbol}', "");
Expect(1, 36, '\P{^General_Category= -Symbol}', "");
Expect(0, 35, '\p{General_Category= -Symbol}', "");
Expect(1, 35, '\p{^General_Category= -Symbol}', "");
Expect(1, 35, '\P{General_Category= -Symbol}', "");
Expect(0, 35, '\P{^General_Category= -Symbol}', "");
Error('\p{Gc=-/a/S}');
Error('\P{Gc=-/a/S}');
Expect(1, 36, '\p{Gc=s}', "");
Expect(0, 36, '\p{^Gc=s}', "");
Expect(0, 36, '\P{Gc=s}', "");
Expect(1, 36, '\P{^Gc=s}', "");
Expect(0, 35, '\p{Gc=s}', "");
Expect(1, 35, '\p{^Gc=s}', "");
Expect(1, 35, '\P{Gc=s}', "");
Expect(0, 35, '\P{^Gc=s}', "");
Expect(1, 36, '\p{Gc= s}', "");
Expect(0, 36, '\p{^Gc= s}', "");
Expect(0, 36, '\P{Gc= s}', "");
Expect(1, 36, '\P{^Gc= s}', "");
Expect(0, 35, '\p{Gc= s}', "");
Expect(1, 35, '\p{^Gc= s}', "");
Expect(1, 35, '\P{Gc= s}', "");
Expect(0, 35, '\P{^Gc= s}', "");
Error('\p{Category=/a/SYMBOL}');
Error('\P{Category=/a/SYMBOL}');
Expect(1, 36, '\p{Category=symbol}', "");
Expect(0, 36, '\p{^Category=symbol}', "");
Expect(0, 36, '\P{Category=symbol}', "");
Expect(1, 36, '\P{^Category=symbol}', "");
Expect(0, 35, '\p{Category=symbol}', "");
Expect(1, 35, '\p{^Category=symbol}', "");
Expect(1, 35, '\P{Category=symbol}', "");
Expect(0, 35, '\P{^Category=symbol}', "");
Expect(1, 36, '\p{Category= _symbol}', "");
Expect(0, 36, '\p{^Category= _symbol}', "");
Expect(0, 36, '\P{Category= _symbol}', "");
Expect(1, 36, '\P{^Category= _symbol}', "");
Expect(0, 35, '\p{Category= _symbol}', "");
Expect(1, 35, '\p{^Category= _symbol}', "");
Expect(1, 35, '\P{Category= _symbol}', "");
Expect(0, 35, '\P{^Category= _symbol}', "");
Error('\p{Is_General_Category=:=		S}');
Error('\P{Is_General_Category=:=		S}');
Expect(1, 36, '\p{Is_General_Category=s}', "");
Expect(0, 36, '\p{^Is_General_Category=s}', "");
Expect(0, 36, '\P{Is_General_Category=s}', "");
Expect(1, 36, '\P{^Is_General_Category=s}', "");
Expect(0, 35, '\p{Is_General_Category=s}', "");
Expect(1, 35, '\p{^Is_General_Category=s}', "");
Expect(1, 35, '\P{Is_General_Category=s}', "");
Expect(0, 35, '\P{^Is_General_Category=s}', "");
Expect(1, 36, '\p{Is_General_Category=_	S}', "");
Expect(0, 36, '\p{^Is_General_Category=_	S}', "");
Expect(0, 36, '\P{Is_General_Category=_	S}', "");
Expect(1, 36, '\P{^Is_General_Category=_	S}', "");
Expect(0, 35, '\p{Is_General_Category=_	S}', "");
Expect(1, 35, '\p{^Is_General_Category=_	S}', "");
Expect(1, 35, '\P{Is_General_Category=_	S}', "");
Expect(0, 35, '\P{^Is_General_Category=_	S}', "");
Error('\p{Is_Gc=- SYMBOL/a/}');
Error('\P{Is_Gc=- SYMBOL/a/}');
Expect(1, 36, '\p{Is_Gc=symbol}', "");
Expect(0, 36, '\p{^Is_Gc=symbol}', "");
Expect(0, 36, '\P{Is_Gc=symbol}', "");
Expect(1, 36, '\P{^Is_Gc=symbol}', "");
Expect(0, 35, '\p{Is_Gc=symbol}', "");
Expect(1, 35, '\p{^Is_Gc=symbol}', "");
Expect(1, 35, '\P{Is_Gc=symbol}', "");
Expect(0, 35, '\P{^Is_Gc=symbol}', "");
Expect(1, 36, '\p{Is_Gc=	Symbol}', "");
Expect(0, 36, '\p{^Is_Gc=	Symbol}', "");
Expect(0, 36, '\P{Is_Gc=	Symbol}', "");
Expect(1, 36, '\P{^Is_Gc=	Symbol}', "");
Expect(0, 35, '\p{Is_Gc=	Symbol}', "");
Expect(1, 35, '\p{^Is_Gc=	Symbol}', "");
Expect(1, 35, '\P{Is_Gc=	Symbol}', "");
Expect(0, 35, '\P{^Is_Gc=	Symbol}', "");
Error('\p{Is_Category=- S/a/}');
Error('\P{Is_Category=- S/a/}');
Expect(1, 36, '\p{Is_Category=s}', "");
Expect(0, 36, '\p{^Is_Category=s}', "");
Expect(0, 36, '\P{Is_Category=s}', "");
Expect(1, 36, '\P{^Is_Category=s}', "");
Expect(0, 35, '\p{Is_Category=s}', "");
Expect(1, 35, '\p{^Is_Category=s}', "");
Expect(1, 35, '\P{Is_Category=s}', "");
Expect(0, 35, '\P{^Is_Category=s}', "");
Expect(1, 36, '\p{Is_Category=	 S}', "");
Expect(0, 36, '\p{^Is_Category=	 S}', "");
Expect(0, 36, '\P{Is_Category=	 S}', "");
Expect(1, 36, '\P{^Is_Category=	 S}', "");
Expect(0, 35, '\p{Is_Category=	 S}', "");
Expect(1, 35, '\p{^Is_Category=	 S}', "");
Expect(1, 35, '\P{Is_Category=	 S}', "");
Expect(0, 35, '\P{^Is_Category=	 S}', "");
Error('\p{General_Category=	Spacing-MARK/a/}');
Error('\P{General_Category=	Spacing-MARK/a/}');
Expect(1, 2307, '\p{General_Category=spacingmark}', "");
Expect(0, 2307, '\p{^General_Category=spacingmark}', "");
Expect(0, 2307, '\P{General_Category=spacingmark}', "");
Expect(1, 2307, '\P{^General_Category=spacingmark}', "");
Expect(0, 2306, '\p{General_Category=spacingmark}', "");
Expect(1, 2306, '\p{^General_Category=spacingmark}', "");
Expect(1, 2306, '\P{General_Category=spacingmark}', "");
Expect(0, 2306, '\P{^General_Category=spacingmark}', "");
Expect(1, 2307, '\p{General_Category=	_SPACING-Mark}', "");
Expect(0, 2307, '\p{^General_Category=	_SPACING-Mark}', "");
Expect(0, 2307, '\P{General_Category=	_SPACING-Mark}', "");
Expect(1, 2307, '\P{^General_Category=	_SPACING-Mark}', "");
Expect(0, 2306, '\p{General_Category=	_SPACING-Mark}', "");
Expect(1, 2306, '\p{^General_Category=	_SPACING-Mark}', "");
Expect(1, 2306, '\P{General_Category=	_SPACING-Mark}', "");
Expect(0, 2306, '\P{^General_Category=	_SPACING-Mark}', "");
Error('\p{Gc=/a/	 Mc}');
Error('\P{Gc=/a/	 Mc}');
Expect(1, 2307, '\p{Gc=mc}', "");
Expect(0, 2307, '\p{^Gc=mc}', "");
Expect(0, 2307, '\P{Gc=mc}', "");
Expect(1, 2307, '\P{^Gc=mc}', "");
Expect(0, 2306, '\p{Gc=mc}', "");
Expect(1, 2306, '\p{^Gc=mc}', "");
Expect(1, 2306, '\P{Gc=mc}', "");
Expect(0, 2306, '\P{^Gc=mc}', "");
Expect(1, 2307, '\p{Gc:   mc}', "");
Expect(0, 2307, '\p{^Gc:   mc}', "");
Expect(0, 2307, '\P{Gc:   mc}', "");
Expect(1, 2307, '\P{^Gc:   mc}', "");
Expect(0, 2306, '\p{Gc:   mc}', "");
Expect(1, 2306, '\p{^Gc:   mc}', "");
Expect(1, 2306, '\P{Gc:   mc}', "");
Expect(0, 2306, '\P{^Gc:   mc}', "");
Error('\p{Category=	:=SPACINGMARK}');
Error('\P{Category=	:=SPACINGMARK}');
Expect(1, 2307, '\p{Category=spacingmark}', "");
Expect(0, 2307, '\p{^Category=spacingmark}', "");
Expect(0, 2307, '\P{Category=spacingmark}', "");
Expect(1, 2307, '\P{^Category=spacingmark}', "");
Expect(0, 2306, '\p{Category=spacingmark}', "");
Expect(1, 2306, '\p{^Category=spacingmark}', "");
Expect(1, 2306, '\P{Category=spacingmark}', "");
Expect(0, 2306, '\P{^Category=spacingmark}', "");
Expect(1, 2307, '\p{Category=-SPACING Mark}', "");
Expect(0, 2307, '\p{^Category=-SPACING Mark}', "");
Expect(0, 2307, '\P{Category=-SPACING Mark}', "");
Expect(1, 2307, '\P{^Category=-SPACING Mark}', "");
Expect(0, 2306, '\p{Category=-SPACING Mark}', "");
Expect(1, 2306, '\p{^Category=-SPACING Mark}', "");
Expect(1, 2306, '\P{Category=-SPACING Mark}', "");
Expect(0, 2306, '\P{^Category=-SPACING Mark}', "");
Error('\p{Is_General_Category=/a/	MC}');
Error('\P{Is_General_Category=/a/	MC}');
Expect(1, 2307, '\p{Is_General_Category:   mc}', "");
Expect(0, 2307, '\p{^Is_General_Category:   mc}', "");
Expect(0, 2307, '\P{Is_General_Category:   mc}', "");
Expect(1, 2307, '\P{^Is_General_Category:   mc}', "");
Expect(0, 2306, '\p{Is_General_Category:   mc}', "");
Expect(1, 2306, '\p{^Is_General_Category:   mc}', "");
Expect(1, 2306, '\P{Is_General_Category:   mc}', "");
Expect(0, 2306, '\P{^Is_General_Category:   mc}', "");
Expect(1, 2307, '\p{Is_General_Category:  Mc}', "");
Expect(0, 2307, '\p{^Is_General_Category:  Mc}', "");
Expect(0, 2307, '\P{Is_General_Category:  Mc}', "");
Expect(1, 2307, '\P{^Is_General_Category:  Mc}', "");
Expect(0, 2306, '\p{Is_General_Category:  Mc}', "");
Expect(1, 2306, '\p{^Is_General_Category:  Mc}', "");
Expect(1, 2306, '\P{Is_General_Category:  Mc}', "");
Expect(0, 2306, '\P{^Is_General_Category:  Mc}', "");
Error('\p{Is_Gc=_spacing_mark/a/}');
Error('\P{Is_Gc=_spacing_mark/a/}');
Expect(1, 2307, '\p{Is_Gc=spacingmark}', "");
Expect(0, 2307, '\p{^Is_Gc=spacingmark}', "");
Expect(0, 2307, '\P{Is_Gc=spacingmark}', "");
Expect(1, 2307, '\P{^Is_Gc=spacingmark}', "");
Expect(0, 2306, '\p{Is_Gc=spacingmark}', "");
Expect(1, 2306, '\p{^Is_Gc=spacingmark}', "");
Expect(1, 2306, '\P{Is_Gc=spacingmark}', "");
Expect(0, 2306, '\P{^Is_Gc=spacingmark}', "");
Expect(1, 2307, '\p{Is_Gc:_Spacing-MARK}', "");
Expect(0, 2307, '\p{^Is_Gc:_Spacing-MARK}', "");
Expect(0, 2307, '\P{Is_Gc:_Spacing-MARK}', "");
Expect(1, 2307, '\P{^Is_Gc:_Spacing-MARK}', "");
Expect(0, 2306, '\p{Is_Gc:_Spacing-MARK}', "");
Expect(1, 2306, '\p{^Is_Gc:_Spacing-MARK}', "");
Expect(1, 2306, '\P{Is_Gc:_Spacing-MARK}', "");
Expect(0, 2306, '\P{^Is_Gc:_Spacing-MARK}', "");
Error('\p{Is_Category=:=__mc}');
Error('\P{Is_Category=:=__mc}');
Expect(1, 2307, '\p{Is_Category=mc}', "");
Expect(0, 2307, '\p{^Is_Category=mc}', "");
Expect(0, 2307, '\P{Is_Category=mc}', "");
Expect(1, 2307, '\P{^Is_Category=mc}', "");
Expect(0, 2306, '\p{Is_Category=mc}', "");
Expect(1, 2306, '\p{^Is_Category=mc}', "");
Expect(1, 2306, '\P{Is_Category=mc}', "");
Expect(0, 2306, '\P{^Is_Category=mc}', "");
Expect(1, 2307, '\p{Is_Category=-	Mc}', "");
Expect(0, 2307, '\p{^Is_Category=-	Mc}', "");
Expect(0, 2307, '\P{Is_Category=-	Mc}', "");
Expect(1, 2307, '\P{^Is_Category=-	Mc}', "");
Expect(0, 2306, '\p{Is_Category=-	Mc}', "");
Expect(1, 2306, '\p{^Is_Category=-	Mc}', "");
Expect(1, 2306, '\P{Is_Category=-	Mc}', "");
Expect(0, 2306, '\P{^Is_Category=-	Mc}', "");
Error('\p{General_Category=	-CASED letter/a/}');
Error('\P{General_Category=	-CASED letter/a/}');
Expect(1, 90, '\p{General_Category:	casedletter}', "");
Expect(0, 90, '\p{^General_Category:	casedletter}', "");
Expect(0, 90, '\P{General_Category:	casedletter}', "");
Expect(1, 90, '\P{^General_Category:	casedletter}', "");
Expect(0, 64, '\p{General_Category:	casedletter}', "");
Expect(1, 64, '\p{^General_Category:	casedletter}', "");
Expect(1, 64, '\P{General_Category:	casedletter}', "");
Expect(0, 64, '\P{^General_Category:	casedletter}', "");
Expect(1, 90, '\p{General_Category=_CASED_Letter}', "");
Expect(0, 90, '\p{^General_Category=_CASED_Letter}', "");
Expect(0, 90, '\P{General_Category=_CASED_Letter}', "");
Expect(1, 90, '\P{^General_Category=_CASED_Letter}', "");
Expect(0, 64, '\p{General_Category=_CASED_Letter}', "");
Expect(1, 64, '\p{^General_Category=_CASED_Letter}', "");
Expect(1, 64, '\P{General_Category=_CASED_Letter}', "");
Expect(0, 64, '\P{^General_Category=_CASED_Letter}', "");
Error('\p{Gc=_LC/a/}');
Error('\P{Gc=_LC/a/}');
Expect(1, 90, '\p{Gc:   lc}', "");
Expect(0, 90, '\p{^Gc:   lc}', "");
Expect(0, 90, '\P{Gc:   lc}', "");
Expect(1, 90, '\P{^Gc:   lc}', "");
Expect(0, 64, '\p{Gc:   lc}', "");
Expect(1, 64, '\p{^Gc:   lc}', "");
Expect(1, 64, '\P{Gc:   lc}', "");
Expect(0, 64, '\P{^Gc:   lc}', "");
Expect(1, 90, '\p{Gc= -LC}', "");
Expect(0, 90, '\p{^Gc= -LC}', "");
Expect(0, 90, '\P{Gc= -LC}', "");
Expect(1, 90, '\P{^Gc= -LC}', "");
Expect(0, 64, '\p{Gc= -LC}', "");
Expect(1, 64, '\p{^Gc= -LC}', "");
Expect(1, 64, '\P{Gc= -LC}', "");
Expect(0, 64, '\P{^Gc= -LC}', "");
Error('\p{Category=_	L:=}');
Error('\P{Category=_	L:=}');
Expect(1, 90, '\p{Category=l_}', "");
Expect(0, 90, '\p{^Category=l_}', "");
Expect(0, 90, '\P{Category=l_}', "");
Expect(1, 90, '\P{^Category=l_}', "");
Expect(0, 64, '\p{Category=l_}', "");
Expect(1, 64, '\p{^Category=l_}', "");
Expect(1, 64, '\P{Category=l_}', "");
Expect(0, 64, '\P{^Category=l_}', "");
Expect(1, 90, '\p{Category=	-L}', "");
Expect(0, 90, '\p{^Category=	-L}', "");
Expect(0, 90, '\P{Category=	-L}', "");
Expect(1, 90, '\P{^Category=	-L}', "");
Expect(0, 64, '\p{Category=	-L}', "");
Expect(1, 64, '\p{^Category=	-L}', "");
Expect(1, 64, '\P{Category=	-L}', "");
Expect(0, 64, '\P{^Category=	-L}', "");
Error('\p{Is_General_Category=-:=L&}');
Error('\P{Is_General_Category=-:=L&}');
Expect(1, 90, '\p{Is_General_Category=l&}', "");
Expect(0, 90, '\p{^Is_General_Category=l&}', "");
Expect(0, 90, '\P{Is_General_Category=l&}', "");
Expect(1, 90, '\P{^Is_General_Category=l&}', "");
Expect(0, 64, '\p{Is_General_Category=l&}', "");
Expect(1, 64, '\p{^Is_General_Category=l&}', "");
Expect(1, 64, '\P{Is_General_Category=l&}', "");
Expect(0, 64, '\P{^Is_General_Category=l&}', "");
Expect(1, 90, '\p{Is_General_Category=_L&}', "");
Expect(0, 90, '\p{^Is_General_Category=_L&}', "");
Expect(0, 90, '\P{Is_General_Category=_L&}', "");
Expect(1, 90, '\P{^Is_General_Category=_L&}', "");
Expect(0, 64, '\p{Is_General_Category=_L&}', "");
Expect(1, 64, '\p{^Is_General_Category=_L&}', "");
Expect(1, 64, '\P{Is_General_Category=_L&}', "");
Expect(0, 64, '\P{^Is_General_Category=_L&}', "");
Error('\p{Is_Gc:   := _cased-LETTER}');
Error('\P{Is_Gc:   := _cased-LETTER}');
Expect(1, 90, '\p{Is_Gc=casedletter}', "");
Expect(0, 90, '\p{^Is_Gc=casedletter}', "");
Expect(0, 90, '\P{Is_Gc=casedletter}', "");
Expect(1, 90, '\P{^Is_Gc=casedletter}', "");
Expect(0, 64, '\p{Is_Gc=casedletter}', "");
Expect(1, 64, '\p{^Is_Gc=casedletter}', "");
Expect(1, 64, '\P{Is_Gc=casedletter}', "");
Expect(0, 64, '\P{^Is_Gc=casedletter}', "");
Expect(1, 90, '\p{Is_Gc=_cased_Letter}', "");
Expect(0, 90, '\p{^Is_Gc=_cased_Letter}', "");
Expect(0, 90, '\P{Is_Gc=_cased_Letter}', "");
Expect(1, 90, '\P{^Is_Gc=_cased_Letter}', "");
Expect(0, 64, '\p{Is_Gc=_cased_Letter}', "");
Expect(1, 64, '\p{^Is_Gc=_cased_Letter}', "");
Expect(1, 64, '\P{Is_Gc=_cased_Letter}', "");
Expect(0, 64, '\P{^Is_Gc=_cased_Letter}', "");
Error('\p{Is_Category=	LC:=}');
Error('\P{Is_Category=	LC:=}');
Expect(1, 90, '\p{Is_Category=lc}', "");
Expect(0, 90, '\p{^Is_Category=lc}', "");
Expect(0, 90, '\P{Is_Category=lc}', "");
Expect(1, 90, '\P{^Is_Category=lc}', "");
Expect(0, 64, '\p{Is_Category=lc}', "");
Expect(1, 64, '\p{^Is_Category=lc}', "");
Expect(1, 64, '\P{Is_Category=lc}', "");
Expect(0, 64, '\P{^Is_Category=lc}', "");
Expect(1, 90, '\p{Is_Category=--LC}', "");
Expect(0, 90, '\p{^Is_Category=--LC}', "");
Expect(0, 90, '\P{Is_Category=--LC}', "");
Expect(1, 90, '\P{^Is_Category=--LC}', "");
Expect(0, 64, '\p{Is_Category=--LC}', "");
Expect(1, 64, '\p{^Is_Category=--LC}', "");
Expect(1, 64, '\P{Is_Category=--LC}', "");
Expect(0, 64, '\P{^Is_Category=--LC}', "");
Error('\p{General_Category=:=_Connector-punctuation}');
Error('\P{General_Category=:=_Connector-punctuation}');
Expect(1, 95, '\p{General_Category=connectorpunctuation}', "");
Expect(0, 95, '\p{^General_Category=connectorpunctuation}', "");
Expect(0, 95, '\P{General_Category=connectorpunctuation}', "");
Expect(1, 95, '\P{^General_Category=connectorpunctuation}', "");
Expect(0, 94, '\p{General_Category=connectorpunctuation}', "");
Expect(1, 94, '\p{^General_Category=connectorpunctuation}', "");
Expect(1, 94, '\P{General_Category=connectorpunctuation}', "");
Expect(0, 94, '\P{^General_Category=connectorpunctuation}', "");
Expect(1, 95, '\p{General_Category=-CONNECTOR	Punctuation}', "");
Expect(0, 95, '\p{^General_Category=-CONNECTOR	Punctuation}', "");
Expect(0, 95, '\P{General_Category=-CONNECTOR	Punctuation}', "");
Expect(1, 95, '\P{^General_Category=-CONNECTOR	Punctuation}', "");
Expect(0, 94, '\p{General_Category=-CONNECTOR	Punctuation}', "");
Expect(1, 94, '\p{^General_Category=-CONNECTOR	Punctuation}', "");
Expect(1, 94, '\P{General_Category=-CONNECTOR	Punctuation}', "");
Expect(0, 94, '\P{^General_Category=-CONNECTOR	Punctuation}', "");
Error('\p{Gc=:=-Pc}');
Error('\P{Gc=:=-Pc}');
Expect(1, 95, '\p{Gc=pc}', "");
Expect(0, 95, '\p{^Gc=pc}', "");
Expect(0, 95, '\P{Gc=pc}', "");
Expect(1, 95, '\P{^Gc=pc}', "");
Expect(0, 94, '\p{Gc=pc}', "");
Expect(1, 94, '\p{^Gc=pc}', "");
Expect(1, 94, '\P{Gc=pc}', "");
Expect(0, 94, '\P{^Gc=pc}', "");
Expect(1, 95, '\p{Gc= Pc}', "");
Expect(0, 95, '\p{^Gc= Pc}', "");
Expect(0, 95, '\P{Gc= Pc}', "");
Expect(1, 95, '\P{^Gc= Pc}', "");
Expect(0, 94, '\p{Gc= Pc}', "");
Expect(1, 94, '\p{^Gc= Pc}', "");
Expect(1, 94, '\P{Gc= Pc}', "");
Expect(0, 94, '\P{^Gc= Pc}', "");
Error('\p{Category:   	_Connector/a/Punctuation}');
Error('\P{Category:   	_Connector/a/Punctuation}');
Expect(1, 95, '\p{Category=connectorpunctuation}', "");
Expect(0, 95, '\p{^Category=connectorpunctuation}', "");
Expect(0, 95, '\P{Category=connectorpunctuation}', "");
Expect(1, 95, '\P{^Category=connectorpunctuation}', "");
Expect(0, 94, '\p{Category=connectorpunctuation}', "");
Expect(1, 94, '\p{^Category=connectorpunctuation}', "");
Expect(1, 94, '\P{Category=connectorpunctuation}', "");
Expect(0, 94, '\P{^Category=connectorpunctuation}', "");
Expect(1, 95, '\p{Category=	 connectorpunctuation}', "");
Expect(0, 95, '\p{^Category=	 connectorpunctuation}', "");
Expect(0, 95, '\P{Category=	 connectorpunctuation}', "");
Expect(1, 95, '\P{^Category=	 connectorpunctuation}', "");
Expect(0, 94, '\p{Category=	 connectorpunctuation}', "");
Expect(1, 94, '\p{^Category=	 connectorpunctuation}', "");
Expect(1, 94, '\P{Category=	 connectorpunctuation}', "");
Expect(0, 94, '\P{^Category=	 connectorpunctuation}', "");
Error('\p{Is_General_Category=_/a/pc}');
Error('\P{Is_General_Category=_/a/pc}');
Expect(1, 95, '\p{Is_General_Category=pc}', "");
Expect(0, 95, '\p{^Is_General_Category=pc}', "");
Expect(0, 95, '\P{Is_General_Category=pc}', "");
Expect(1, 95, '\P{^Is_General_Category=pc}', "");
Expect(0, 94, '\p{Is_General_Category=pc}', "");
Expect(1, 94, '\p{^Is_General_Category=pc}', "");
Expect(1, 94, '\P{Is_General_Category=pc}', "");
Expect(0, 94, '\P{^Is_General_Category=pc}', "");
Expect(1, 95, '\p{Is_General_Category= 	PC}', "");
Expect(0, 95, '\p{^Is_General_Category= 	PC}', "");
Expect(0, 95, '\P{Is_General_Category= 	PC}', "");
Expect(1, 95, '\P{^Is_General_Category= 	PC}', "");
Expect(0, 94, '\p{Is_General_Category= 	PC}', "");
Expect(1, 94, '\p{^Is_General_Category= 	PC}', "");
Expect(1, 94, '\P{Is_General_Category= 	PC}', "");
Expect(0, 94, '\P{^Is_General_Category= 	PC}', "");
Error('\p{Is_Gc=-/a/Connector	Punctuation}');
Error('\P{Is_Gc=-/a/Connector	Punctuation}');
Expect(1, 95, '\p{Is_Gc=connectorpunctuation}', "");
Expect(0, 95, '\p{^Is_Gc=connectorpunctuation}', "");
Expect(0, 95, '\P{Is_Gc=connectorpunctuation}', "");
Expect(1, 95, '\P{^Is_Gc=connectorpunctuation}', "");
Expect(0, 94, '\p{Is_Gc=connectorpunctuation}', "");
Expect(1, 94, '\p{^Is_Gc=connectorpunctuation}', "");
Expect(1, 94, '\P{Is_Gc=connectorpunctuation}', "");
Expect(0, 94, '\P{^Is_Gc=connectorpunctuation}', "");
Expect(1, 95, '\p{Is_Gc=  Connectorpunctuation}', "");
Expect(0, 95, '\p{^Is_Gc=  Connectorpunctuation}', "");
Expect(0, 95, '\P{Is_Gc=  Connectorpunctuation}', "");
Expect(1, 95, '\P{^Is_Gc=  Connectorpunctuation}', "");
Expect(0, 94, '\p{Is_Gc=  Connectorpunctuation}', "");
Expect(1, 94, '\p{^Is_Gc=  Connectorpunctuation}', "");
Expect(1, 94, '\P{Is_Gc=  Connectorpunctuation}', "");
Expect(0, 94, '\P{^Is_Gc=  Connectorpunctuation}', "");
Error('\p{Is_Category=_/a/PC}');
Error('\P{Is_Category=_/a/PC}');
Expect(1, 95, '\p{Is_Category=pc}', "");
Expect(0, 95, '\p{^Is_Category=pc}', "");
Expect(0, 95, '\P{Is_Category=pc}', "");
Expect(1, 95, '\P{^Is_Category=pc}', "");
Expect(0, 94, '\p{Is_Category=pc}', "");
Expect(1, 94, '\p{^Is_Category=pc}', "");
Expect(1, 94, '\P{Is_Category=pc}', "");
Expect(0, 94, '\P{^Is_Category=pc}', "");
Expect(1, 95, '\p{Is_Category= 	PC}', "");
Expect(0, 95, '\p{^Is_Category= 	PC}', "");
Expect(0, 95, '\P{Is_Category= 	PC}', "");
Expect(1, 95, '\P{^Is_Category= 	PC}', "");
Expect(0, 94, '\p{Is_Category= 	PC}', "");
Expect(1, 94, '\p{^Is_Category= 	PC}', "");
Expect(1, 94, '\P{Is_Category= 	PC}', "");
Expect(0, 94, '\P{^Is_Category= 	PC}', "");
Error('\p{General_Category: Surrogate/a/}');
Error('\P{General_Category: Surrogate/a/}');
Expect(0, 55295, '\p{General_Category=surrogate}', "");
Expect(1, 55295, '\p{^General_Category=surrogate}', "");
Expect(1, 55295, '\P{General_Category=surrogate}', "");
Expect(0, 55295, '\P{^General_Category=surrogate}', "");
Expect(0, 55295, '\p{General_Category=-_Surrogate}', "");
Expect(1, 55295, '\p{^General_Category=-_Surrogate}', "");
Expect(1, 55295, '\P{General_Category=-_Surrogate}', "");
Expect(0, 55295, '\P{^General_Category=-_Surrogate}', "");
Error('\p{Gc=	-CS:=}');
Error('\P{Gc=	-CS:=}');
Expect(0, 55295, '\p{Gc=cs}', "");
Expect(1, 55295, '\p{^Gc=cs}', "");
Expect(1, 55295, '\P{Gc=cs}', "");
Expect(0, 55295, '\P{^Gc=cs}', "");
Expect(0, 55295, '\p{Gc=_ Cs}', "");
Expect(1, 55295, '\p{^Gc=_ Cs}', "");
Expect(1, 55295, '\P{Gc=_ Cs}', "");
Expect(0, 55295, '\P{^Gc=_ Cs}', "");
Error('\p{Category=	 SURROGATE:=}');
Error('\P{Category=	 SURROGATE:=}');
Expect(0, 55295, '\p{Category:surrogate}', "");
Expect(1, 55295, '\p{^Category:surrogate}', "");
Expect(1, 55295, '\P{Category:surrogate}', "");
Expect(0, 55295, '\P{^Category:surrogate}', "");
Expect(0, 55295, '\p{Category= SURROGATE}', "");
Expect(1, 55295, '\p{^Category= SURROGATE}', "");
Expect(1, 55295, '\P{Category= SURROGATE}', "");
Expect(0, 55295, '\P{^Category= SURROGATE}', "");
Error('\p{Is_General_Category=	/a/Cs}');
Error('\P{Is_General_Category=	/a/Cs}');
Expect(0, 55295, '\p{Is_General_Category=cs}', "");
Expect(1, 55295, '\p{^Is_General_Category=cs}', "");
Expect(1, 55295, '\P{Is_General_Category=cs}', "");
Expect(0, 55295, '\P{^Is_General_Category=cs}', "");
Expect(0, 55295, '\p{Is_General_Category=	-Cs}', "");
Expect(1, 55295, '\p{^Is_General_Category=	-Cs}', "");
Expect(1, 55295, '\P{Is_General_Category=	-Cs}', "");
Expect(0, 55295, '\P{^Is_General_Category=	-Cs}', "");
Error('\p{Is_Gc=-/a/Surrogate}');
Error('\P{Is_Gc=-/a/Surrogate}');
Expect(0, 55295, '\p{Is_Gc=surrogate}', "");
Expect(1, 55295, '\p{^Is_Gc=surrogate}', "");
Expect(1, 55295, '\P{Is_Gc=surrogate}', "");
Expect(0, 55295, '\P{^Is_Gc=surrogate}', "");
Expect(0, 55295, '\p{Is_Gc= _surrogate}', "");
Expect(1, 55295, '\p{^Is_Gc= _surrogate}', "");
Expect(1, 55295, '\P{Is_Gc= _surrogate}', "");
Expect(0, 55295, '\P{^Is_Gc= _surrogate}', "");
Error('\p{Is_Category=_cs/a/}');
Error('\P{Is_Category=_cs/a/}');
Expect(0, 55295, '\p{Is_Category=cs}', "");
Expect(1, 55295, '\p{^Is_Category=cs}', "");
Expect(1, 55295, '\P{Is_Category=cs}', "");
Expect(0, 55295, '\P{^Is_Category=cs}', "");
Expect(0, 55295, '\p{Is_Category:   -_cs}', "");
Expect(1, 55295, '\p{^Is_Category:   -_cs}', "");
Expect(1, 55295, '\P{Is_Category:   -_cs}', "");
Expect(0, 55295, '\P{^Is_Category:   -_cs}', "");
Error('\p{General_Category:		privateUse:=}');
Error('\P{General_Category:		privateUse:=}');
Expect(1, 63743, '\p{General_Category=privateuse}', "");
Expect(0, 63743, '\p{^General_Category=privateuse}', "");
Expect(0, 63743, '\P{General_Category=privateuse}', "");
Expect(1, 63743, '\P{^General_Category=privateuse}', "");
Expect(0, 1, '\p{General_Category=privateuse}', "");
Expect(1, 1, '\p{^General_Category=privateuse}', "");
Expect(1, 1, '\P{General_Category=privateuse}', "");
Expect(0, 1, '\P{^General_Category=privateuse}', "");
Expect(1, 63743, '\p{General_Category=-private-USE}', "");
Expect(0, 63743, '\p{^General_Category=-private-USE}', "");
Expect(0, 63743, '\P{General_Category=-private-USE}', "");
Expect(1, 63743, '\P{^General_Category=-private-USE}', "");
Expect(0, 1, '\p{General_Category=-private-USE}', "");
Expect(1, 1, '\p{^General_Category=-private-USE}', "");
Expect(1, 1, '\P{General_Category=-private-USE}', "");
Expect(0, 1, '\P{^General_Category=-private-USE}', "");
Error('\p{Gc=	Co/a/}');
Error('\P{Gc=	Co/a/}');
Expect(1, 63743, '\p{Gc=co}', "");
Expect(0, 63743, '\p{^Gc=co}', "");
Expect(0, 63743, '\P{Gc=co}', "");
Expect(1, 63743, '\P{^Gc=co}', "");
Expect(0, 1, '\p{Gc=co}', "");
Expect(1, 1, '\p{^Gc=co}', "");
Expect(1, 1, '\P{Gc=co}', "");
Expect(0, 1, '\P{^Gc=co}', "");
Expect(1, 63743, '\p{Gc=CO}', "");
Expect(0, 63743, '\p{^Gc=CO}', "");
Expect(0, 63743, '\P{Gc=CO}', "");
Expect(1, 63743, '\P{^Gc=CO}', "");
Expect(0, 1, '\p{Gc=CO}', "");
Expect(1, 1, '\p{^Gc=CO}', "");
Expect(1, 1, '\P{Gc=CO}', "");
Expect(0, 1, '\P{^Gc=CO}', "");
Error('\p{Category=:=_	PRIVATE-use}');
Error('\P{Category=:=_	PRIVATE-use}');
Expect(1, 63743, '\p{Category=privateuse}', "");
Expect(0, 63743, '\p{^Category=privateuse}', "");
Expect(0, 63743, '\P{Category=privateuse}', "");
Expect(1, 63743, '\P{^Category=privateuse}', "");
Expect(0, 1, '\p{Category=privateuse}', "");
Expect(1, 1, '\p{^Category=privateuse}', "");
Expect(1, 1, '\P{Category=privateuse}', "");
Expect(0, 1, '\P{^Category=privateuse}', "");
Expect(1, 63743, '\p{Category:_Private-USE}', "");
Expect(0, 63743, '\p{^Category:_Private-USE}', "");
Expect(0, 63743, '\P{Category:_Private-USE}', "");
Expect(1, 63743, '\P{^Category:_Private-USE}', "");
Expect(0, 1, '\p{Category:_Private-USE}', "");
Expect(1, 1, '\p{^Category:_Private-USE}', "");
Expect(1, 1, '\P{Category:_Private-USE}', "");
Expect(0, 1, '\P{^Category:_Private-USE}', "");
Error('\p{Is_General_Category=/a/co}');
Error('\P{Is_General_Category=/a/co}');
Expect(1, 63743, '\p{Is_General_Category:   co}', "");
Expect(0, 63743, '\p{^Is_General_Category:   co}', "");
Expect(0, 63743, '\P{Is_General_Category:   co}', "");
Expect(1, 63743, '\P{^Is_General_Category:   co}', "");
Expect(0, 1, '\p{Is_General_Category:   co}', "");
Expect(1, 1, '\p{^Is_General_Category:   co}', "");
Expect(1, 1, '\P{Is_General_Category:   co}', "");
Expect(0, 1, '\P{^Is_General_Category:   co}', "");
Expect(1, 63743, '\p{Is_General_Category=_	Co}', "");
Expect(0, 63743, '\p{^Is_General_Category=_	Co}', "");
Expect(0, 63743, '\P{Is_General_Category=_	Co}', "");
Expect(1, 63743, '\P{^Is_General_Category=_	Co}', "");
Expect(0, 1, '\p{Is_General_Category=_	Co}', "");
Expect(1, 1, '\p{^Is_General_Category=_	Co}', "");
Expect(1, 1, '\P{Is_General_Category=_	Co}', "");
Expect(0, 1, '\P{^Is_General_Category=_	Co}', "");
Error('\p{Is_Gc=_/a/Private-Use}');
Error('\P{Is_Gc=_/a/Private-Use}');
Expect(1, 63743, '\p{Is_Gc=privateuse}', "");
Expect(0, 63743, '\p{^Is_Gc=privateuse}', "");
Expect(0, 63743, '\P{Is_Gc=privateuse}', "");
Expect(1, 63743, '\P{^Is_Gc=privateuse}', "");
Expect(0, 1, '\p{Is_Gc=privateuse}', "");
Expect(1, 1, '\p{^Is_Gc=privateuse}', "");
Expect(1, 1, '\P{Is_Gc=privateuse}', "");
Expect(0, 1, '\P{^Is_Gc=privateuse}', "");
Expect(1, 63743, '\p{Is_Gc:   -PRIVATE_Use}', "");
Expect(0, 63743, '\p{^Is_Gc:   -PRIVATE_Use}', "");
Expect(0, 63743, '\P{Is_Gc:   -PRIVATE_Use}', "");
Expect(1, 63743, '\P{^Is_Gc:   -PRIVATE_Use}', "");
Expect(0, 1, '\p{Is_Gc:   -PRIVATE_Use}', "");
Expect(1, 1, '\p{^Is_Gc:   -PRIVATE_Use}', "");
Expect(1, 1, '\P{Is_Gc:   -PRIVATE_Use}', "");
Expect(0, 1, '\P{^Is_Gc:   -PRIVATE_Use}', "");
Error('\p{Is_Category=:= -Co}');
Error('\P{Is_Category=:= -Co}');
Expect(1, 63743, '\p{Is_Category=co}', "");
Expect(0, 63743, '\p{^Is_Category=co}', "");
Expect(0, 63743, '\P{Is_Category=co}', "");
Expect(1, 63743, '\P{^Is_Category=co}', "");
Expect(0, 1, '\p{Is_Category=co}', "");
Expect(1, 1, '\p{^Is_Category=co}', "");
Expect(1, 1, '\P{Is_Category=co}', "");
Expect(0, 1, '\P{^Is_Category=co}', "");
Expect(1, 63743, '\p{Is_Category= Co}', "");
Expect(0, 63743, '\p{^Is_Category= Co}', "");
Expect(0, 63743, '\P{Is_Category= Co}', "");
Expect(1, 63743, '\P{^Is_Category= Co}', "");
Expect(0, 1, '\p{Is_Category= Co}', "");
Expect(1, 1, '\p{^Is_Category= Co}', "");
Expect(1, 1, '\P{Is_Category= Co}', "");
Expect(0, 1, '\P{^Is_Category= Co}', "");
Error('\p{General_Category=_:=Lowercase LETTER}');
Error('\P{General_Category=_:=Lowercase LETTER}');
Expect(1, 122, '\p{General_Category=lowercaseletter}', "");
Expect(0, 122, '\p{^General_Category=lowercaseletter}', "");
Expect(0, 122, '\P{General_Category=lowercaseletter}', "");
Expect(1, 122, '\P{^General_Category=lowercaseletter}', "");
Expect(0, 96, '\p{General_Category=lowercaseletter}', "");
Expect(1, 96, '\p{^General_Category=lowercaseletter}', "");
Expect(1, 96, '\P{General_Category=lowercaseletter}', "");
Expect(0, 96, '\P{^General_Category=lowercaseletter}', "");
Expect(1, 122, '\p{General_Category=-LowercaseLetter}', "");
Expect(0, 122, '\p{^General_Category=-LowercaseLetter}', "");
Expect(0, 122, '\P{General_Category=-LowercaseLetter}', "");
Expect(1, 122, '\P{^General_Category=-LowercaseLetter}', "");
Expect(0, 96, '\p{General_Category=-LowercaseLetter}', "");
Expect(1, 96, '\p{^General_Category=-LowercaseLetter}', "");
Expect(1, 96, '\P{General_Category=-LowercaseLetter}', "");
Expect(0, 96, '\P{^General_Category=-LowercaseLetter}', "");
Error('\p{Gc=_Ll/a/}');
Error('\P{Gc=_Ll/a/}');
Expect(1, 122, '\p{Gc=ll}', "");
Expect(0, 122, '\p{^Gc=ll}', "");
Expect(0, 122, '\P{Gc=ll}', "");
Expect(1, 122, '\P{^Gc=ll}', "");
Expect(0, 96, '\p{Gc=ll}', "");
Expect(1, 96, '\p{^Gc=ll}', "");
Expect(1, 96, '\P{Gc=ll}', "");
Expect(0, 96, '\P{^Gc=ll}', "");
Expect(1, 122, '\p{Gc= _ll}', "");
Expect(0, 122, '\p{^Gc= _ll}', "");
Expect(0, 122, '\P{Gc= _ll}', "");
Expect(1, 122, '\P{^Gc= _ll}', "");
Expect(0, 96, '\p{Gc= _ll}', "");
Expect(1, 96, '\p{^Gc= _ll}', "");
Expect(1, 96, '\P{Gc= _ll}', "");
Expect(0, 96, '\P{^Gc= _ll}', "");
Error('\p{Category=	:=lowercase_letter}');
Error('\P{Category=	:=lowercase_letter}');
Expect(1, 122, '\p{Category=lowercaseletter}', "");
Expect(0, 122, '\p{^Category=lowercaseletter}', "");
Expect(0, 122, '\P{Category=lowercaseletter}', "");
Expect(1, 122, '\P{^Category=lowercaseletter}', "");
Expect(0, 96, '\p{Category=lowercaseletter}', "");
Expect(1, 96, '\p{^Category=lowercaseletter}', "");
Expect(1, 96, '\P{Category=lowercaseletter}', "");
Expect(0, 96, '\P{^Category=lowercaseletter}', "");
Expect(1, 122, '\p{Category=_-Lowercase LETTER}', "");
Expect(0, 122, '\p{^Category=_-Lowercase LETTER}', "");
Expect(0, 122, '\P{Category=_-Lowercase LETTER}', "");
Expect(1, 122, '\P{^Category=_-Lowercase LETTER}', "");
Expect(0, 96, '\p{Category=_-Lowercase LETTER}', "");
Expect(1, 96, '\p{^Category=_-Lowercase LETTER}', "");
Expect(1, 96, '\P{Category=_-Lowercase LETTER}', "");
Expect(0, 96, '\P{^Category=_-Lowercase LETTER}', "");
Error('\p{Is_General_Category=_Ll:=}');
Error('\P{Is_General_Category=_Ll:=}');
Expect(1, 122, '\p{Is_General_Category=ll}', "");
Expect(0, 122, '\p{^Is_General_Category=ll}', "");
Expect(0, 122, '\P{Is_General_Category=ll}', "");
Expect(1, 122, '\P{^Is_General_Category=ll}', "");
Expect(0, 96, '\p{Is_General_Category=ll}', "");
Expect(1, 96, '\p{^Is_General_Category=ll}', "");
Expect(1, 96, '\P{Is_General_Category=ll}', "");
Expect(0, 96, '\P{^Is_General_Category=ll}', "");
Expect(1, 122, '\p{Is_General_Category=-Ll}', "");
Expect(0, 122, '\p{^Is_General_Category=-Ll}', "");
Expect(0, 122, '\P{Is_General_Category=-Ll}', "");
Expect(1, 122, '\P{^Is_General_Category=-Ll}', "");
Expect(0, 96, '\p{Is_General_Category=-Ll}', "");
Expect(1, 96, '\p{^Is_General_Category=-Ll}', "");
Expect(1, 96, '\P{Is_General_Category=-Ll}', "");
Expect(0, 96, '\P{^Is_General_Category=-Ll}', "");
Error('\p{Is_Gc=-/a/lowercase_letter}');
Error('\P{Is_Gc=-/a/lowercase_letter}');
Expect(1, 122, '\p{Is_Gc=lowercaseletter}', "");
Expect(0, 122, '\p{^Is_Gc=lowercaseletter}', "");
Expect(0, 122, '\P{Is_Gc=lowercaseletter}', "");
Expect(1, 122, '\P{^Is_Gc=lowercaseletter}', "");
Expect(0, 96, '\p{Is_Gc=lowercaseletter}', "");
Expect(1, 96, '\p{^Is_Gc=lowercaseletter}', "");
Expect(1, 96, '\P{Is_Gc=lowercaseletter}', "");
Expect(0, 96, '\P{^Is_Gc=lowercaseletter}', "");
Expect(1, 122, '\p{Is_Gc=_	Lowercase-LETTER}', "");
Expect(0, 122, '\p{^Is_Gc=_	Lowercase-LETTER}', "");
Expect(0, 122, '\P{Is_Gc=_	Lowercase-LETTER}', "");
Expect(1, 122, '\P{^Is_Gc=_	Lowercase-LETTER}', "");
Expect(0, 96, '\p{Is_Gc=_	Lowercase-LETTER}', "");
Expect(1, 96, '\p{^Is_Gc=_	Lowercase-LETTER}', "");
Expect(1, 96, '\P{Is_Gc=_	Lowercase-LETTER}', "");
Expect(0, 96, '\P{^Is_Gc=_	Lowercase-LETTER}', "");
Error('\p{Is_Category=  LL:=}');
Error('\P{Is_Category=  LL:=}');
Expect(1, 122, '\p{Is_Category=ll}', "");
Expect(0, 122, '\p{^Is_Category=ll}', "");
Expect(0, 122, '\P{Is_Category=ll}', "");
Expect(1, 122, '\P{^Is_Category=ll}', "");
Expect(0, 96, '\p{Is_Category=ll}', "");
Expect(1, 96, '\p{^Is_Category=ll}', "");
Expect(1, 96, '\P{Is_Category=ll}', "");
Expect(0, 96, '\P{^Is_Category=ll}', "");
Expect(1, 122, '\p{Is_Category= LL}', "");
Expect(0, 122, '\p{^Is_Category= LL}', "");
Expect(0, 122, '\P{Is_Category= LL}', "");
Expect(1, 122, '\P{^Is_Category= LL}', "");
Expect(0, 96, '\p{Is_Category= LL}', "");
Expect(1, 96, '\p{^Is_Category= LL}', "");
Expect(1, 96, '\P{Is_Category= LL}', "");
Expect(0, 96, '\P{^Is_Category= LL}', "");
Error('\p{General_Category=/a/_ CLOSE	Punctuation}');
Error('\P{General_Category=/a/_ CLOSE	Punctuation}');
Expect(1, 41, '\p{General_Category=closepunctuation}', "");
Expect(0, 41, '\p{^General_Category=closepunctuation}', "");
Expect(0, 41, '\P{General_Category=closepunctuation}', "");
Expect(1, 41, '\P{^General_Category=closepunctuation}', "");
Expect(0, 40, '\p{General_Category=closepunctuation}', "");
Expect(1, 40, '\p{^General_Category=closepunctuation}', "");
Expect(1, 40, '\P{General_Category=closepunctuation}', "");
Expect(0, 40, '\P{^General_Category=closepunctuation}', "");
Expect(1, 41, '\p{General_Category=-_Close_Punctuation}', "");
Expect(0, 41, '\p{^General_Category=-_Close_Punctuation}', "");
Expect(0, 41, '\P{General_Category=-_Close_Punctuation}', "");
Expect(1, 41, '\P{^General_Category=-_Close_Punctuation}', "");
Expect(0, 40, '\p{General_Category=-_Close_Punctuation}', "");
Expect(1, 40, '\p{^General_Category=-_Close_Punctuation}', "");
Expect(1, 40, '\P{General_Category=-_Close_Punctuation}', "");
Expect(0, 40, '\P{^General_Category=-_Close_Punctuation}', "");
Error('\p{Gc= 	pe/a/}');
Error('\P{Gc= 	pe/a/}');
Expect(1, 41, '\p{Gc=pe}', "");
Expect(0, 41, '\p{^Gc=pe}', "");
Expect(0, 41, '\P{Gc=pe}', "");
Expect(1, 41, '\P{^Gc=pe}', "");
Expect(0, 40, '\p{Gc=pe}', "");
Expect(1, 40, '\p{^Gc=pe}', "");
Expect(1, 40, '\P{Gc=pe}', "");
Expect(0, 40, '\P{^Gc=pe}', "");
Expect(1, 41, '\p{Gc=-Pe}', "");
Expect(0, 41, '\p{^Gc=-Pe}', "");
Expect(0, 41, '\P{Gc=-Pe}', "");
Expect(1, 41, '\P{^Gc=-Pe}', "");
Expect(0, 40, '\p{Gc=-Pe}', "");
Expect(1, 40, '\p{^Gc=-Pe}', "");
Expect(1, 40, '\P{Gc=-Pe}', "");
Expect(0, 40, '\P{^Gc=-Pe}', "");
Error('\p{Category=		Close Punctuation:=}');
Error('\P{Category=		Close Punctuation:=}');
Expect(1, 41, '\p{Category:	closepunctuation}', "");
Expect(0, 41, '\p{^Category:	closepunctuation}', "");
Expect(0, 41, '\P{Category:	closepunctuation}', "");
Expect(1, 41, '\P{^Category:	closepunctuation}', "");
Expect(0, 40, '\p{Category:	closepunctuation}', "");
Expect(1, 40, '\p{^Category:	closepunctuation}', "");
Expect(1, 40, '\P{Category:	closepunctuation}', "");
Expect(0, 40, '\P{^Category:	closepunctuation}', "");
Expect(1, 41, '\p{Category=-	closePunctuation}', "");
Expect(0, 41, '\p{^Category=-	closePunctuation}', "");
Expect(0, 41, '\P{Category=-	closePunctuation}', "");
Expect(1, 41, '\P{^Category=-	closePunctuation}', "");
Expect(0, 40, '\p{Category=-	closePunctuation}', "");
Expect(1, 40, '\p{^Category=-	closePunctuation}', "");
Expect(1, 40, '\P{Category=-	closePunctuation}', "");
Expect(0, 40, '\P{^Category=-	closePunctuation}', "");
Error('\p{Is_General_Category=/a/__Pe}');
Error('\P{Is_General_Category=/a/__Pe}');
Expect(1, 41, '\p{Is_General_Category=pe}', "");
Expect(0, 41, '\p{^Is_General_Category=pe}', "");
Expect(0, 41, '\P{Is_General_Category=pe}', "");
Expect(1, 41, '\P{^Is_General_Category=pe}', "");
Expect(0, 40, '\p{Is_General_Category=pe}', "");
Expect(1, 40, '\p{^Is_General_Category=pe}', "");
Expect(1, 40, '\P{Is_General_Category=pe}', "");
Expect(0, 40, '\P{^Is_General_Category=pe}', "");
Expect(1, 41, '\p{Is_General_Category= -PE}', "");
Expect(0, 41, '\p{^Is_General_Category= -PE}', "");
Expect(0, 41, '\P{Is_General_Category= -PE}', "");
Expect(1, 41, '\P{^Is_General_Category= -PE}', "");
Expect(0, 40, '\p{Is_General_Category= -PE}', "");
Expect(1, 40, '\p{^Is_General_Category= -PE}', "");
Expect(1, 40, '\P{Is_General_Category= -PE}', "");
Expect(0, 40, '\P{^Is_General_Category= -PE}', "");
Error('\p{Is_Gc=_ Close/a/PUNCTUATION}');
Error('\P{Is_Gc=_ Close/a/PUNCTUATION}');
Expect(1, 41, '\p{Is_Gc=closepunctuation}', "");
Expect(0, 41, '\p{^Is_Gc=closepunctuation}', "");
Expect(0, 41, '\P{Is_Gc=closepunctuation}', "");
Expect(1, 41, '\P{^Is_Gc=closepunctuation}', "");
Expect(0, 40, '\p{Is_Gc=closepunctuation}', "");
Expect(1, 40, '\p{^Is_Gc=closepunctuation}', "");
Expect(1, 40, '\P{Is_Gc=closepunctuation}', "");
Expect(0, 40, '\P{^Is_Gc=closepunctuation}', "");
Expect(1, 41, '\p{Is_Gc=-closePunctuation}', "");
Expect(0, 41, '\p{^Is_Gc=-closePunctuation}', "");
Expect(0, 41, '\P{Is_Gc=-closePunctuation}', "");
Expect(1, 41, '\P{^Is_Gc=-closePunctuation}', "");
Expect(0, 40, '\p{Is_Gc=-closePunctuation}', "");
Expect(1, 40, '\p{^Is_Gc=-closePunctuation}', "");
Expect(1, 40, '\P{Is_Gc=-closePunctuation}', "");
Expect(0, 40, '\P{^Is_Gc=-closePunctuation}', "");
Error('\p{Is_Category=:=_-Pe}');
Error('\P{Is_Category=:=_-Pe}');
Expect(1, 41, '\p{Is_Category=pe}', "");
Expect(0, 41, '\p{^Is_Category=pe}', "");
Expect(0, 41, '\P{Is_Category=pe}', "");
Expect(1, 41, '\P{^Is_Category=pe}', "");
Expect(0, 40, '\p{Is_Category=pe}', "");
Expect(1, 40, '\p{^Is_Category=pe}', "");
Expect(1, 40, '\P{Is_Category=pe}', "");
Expect(0, 40, '\P{^Is_Category=pe}', "");
Expect(1, 41, '\p{Is_Category=-_Pe}', "");
Expect(0, 41, '\p{^Is_Category=-_Pe}', "");
Expect(0, 41, '\P{Is_Category=-_Pe}', "");
Expect(1, 41, '\P{^Is_Category=-_Pe}', "");
Expect(0, 40, '\p{Is_Category=-_Pe}', "");
Expect(1, 40, '\p{^Is_Category=-_Pe}', "");
Expect(1, 40, '\P{Is_Category=-_Pe}', "");
Expect(0, 40, '\P{^Is_Category=-_Pe}', "");
Error('\p{General_Category= letter/a/}');
Error('\P{General_Category= letter/a/}');
Expect(1, 90, '\p{General_Category=letter}', "");
Expect(0, 90, '\p{^General_Category=letter}', "");
Expect(0, 90, '\P{General_Category=letter}', "");
Expect(1, 90, '\P{^General_Category=letter}', "");
Expect(0, 64, '\p{General_Category=letter}', "");
Expect(1, 64, '\p{^General_Category=letter}', "");
Expect(1, 64, '\P{General_Category=letter}', "");
Expect(0, 64, '\P{^General_Category=letter}', "");
Expect(1, 90, '\p{General_Category=-	letter}', "");
Expect(0, 90, '\p{^General_Category=-	letter}', "");
Expect(0, 90, '\P{General_Category=-	letter}', "");
Expect(1, 90, '\P{^General_Category=-	letter}', "");
Expect(0, 64, '\p{General_Category=-	letter}', "");
Expect(1, 64, '\p{^General_Category=-	letter}', "");
Expect(1, 64, '\P{General_Category=-	letter}', "");
Expect(0, 64, '\P{^General_Category=-	letter}', "");
Error('\p{Gc=/a/_L}');
Error('\P{Gc=/a/_L}');
Expect(1, 90, '\p{Gc=l}', "");
Expect(0, 90, '\p{^Gc=l}', "");
Expect(0, 90, '\P{Gc=l}', "");
Expect(1, 90, '\P{^Gc=l}', "");
Expect(0, 64, '\p{Gc=l}', "");
Expect(1, 64, '\p{^Gc=l}', "");
Expect(1, 64, '\P{Gc=l}', "");
Expect(0, 64, '\P{^Gc=l}', "");
Expect(1, 90, '\p{Gc=__L}', "");
Expect(0, 90, '\p{^Gc=__L}', "");
Expect(0, 90, '\P{Gc=__L}', "");
Expect(1, 90, '\P{^Gc=__L}', "");
Expect(0, 64, '\p{Gc=__L}', "");
Expect(1, 64, '\p{^Gc=__L}', "");
Expect(1, 64, '\P{Gc=__L}', "");
Expect(0, 64, '\P{^Gc=__L}', "");
Error('\p{Category=_Letter:=}');
Error('\P{Category=_Letter:=}');
Expect(1, 90, '\p{Category:	letter}', "");
Expect(0, 90, '\p{^Category:	letter}', "");
Expect(0, 90, '\P{Category:	letter}', "");
Expect(1, 90, '\P{^Category:	letter}', "");
Expect(0, 64, '\p{Category:	letter}', "");
Expect(1, 64, '\p{^Category:	letter}', "");
Expect(1, 64, '\P{Category:	letter}', "");
Expect(0, 64, '\P{^Category:	letter}', "");
Expect(1, 90, '\p{Category:	_Letter}', "");
Expect(0, 90, '\p{^Category:	_Letter}', "");
Expect(0, 90, '\P{Category:	_Letter}', "");
Expect(1, 90, '\P{^Category:	_Letter}', "");
Expect(0, 64, '\p{Category:	_Letter}', "");
Expect(1, 64, '\p{^Category:	_Letter}', "");
Expect(1, 64, '\P{Category:	_Letter}', "");
Expect(0, 64, '\P{^Category:	_Letter}', "");
Error('\p{Is_General_Category=/a/  L}');
Error('\P{Is_General_Category=/a/  L}');
Expect(1, 90, '\p{Is_General_Category:	l}', "");
Expect(0, 90, '\p{^Is_General_Category:	l}', "");
Expect(0, 90, '\P{Is_General_Category:	l}', "");
Expect(1, 90, '\P{^Is_General_Category:	l}', "");
Expect(0, 64, '\p{Is_General_Category:	l}', "");
Expect(1, 64, '\p{^Is_General_Category:	l}', "");
Expect(1, 64, '\P{Is_General_Category:	l}', "");
Expect(0, 64, '\P{^Is_General_Category:	l}', "");
Expect(1, 90, '\p{Is_General_Category= 	L}', "");
Expect(0, 90, '\p{^Is_General_Category= 	L}', "");
Expect(0, 90, '\P{Is_General_Category= 	L}', "");
Expect(1, 90, '\P{^Is_General_Category= 	L}', "");
Expect(0, 64, '\p{Is_General_Category= 	L}', "");
Expect(1, 64, '\p{^Is_General_Category= 	L}', "");
Expect(1, 64, '\P{Is_General_Category= 	L}', "");
Expect(0, 64, '\P{^Is_General_Category= 	L}', "");
Error('\p{Is_Gc=:=--letter}');
Error('\P{Is_Gc=:=--letter}');
Expect(1, 90, '\p{Is_Gc=letter}', "");
Expect(0, 90, '\p{^Is_Gc=letter}', "");
Expect(0, 90, '\P{Is_Gc=letter}', "");
Expect(1, 90, '\P{^Is_Gc=letter}', "");
Expect(0, 64, '\p{Is_Gc=letter}', "");
Expect(1, 64, '\p{^Is_Gc=letter}', "");
Expect(1, 64, '\P{Is_Gc=letter}', "");
Expect(0, 64, '\P{^Is_Gc=letter}', "");
Expect(1, 90, '\p{Is_Gc: _ Letter}', "");
Expect(0, 90, '\p{^Is_Gc: _ Letter}', "");
Expect(0, 90, '\P{Is_Gc: _ Letter}', "");
Expect(1, 90, '\P{^Is_Gc: _ Letter}', "");
Expect(0, 64, '\p{Is_Gc: _ Letter}', "");
Expect(1, 64, '\p{^Is_Gc: _ Letter}', "");
Expect(1, 64, '\P{Is_Gc: _ Letter}', "");
Expect(0, 64, '\P{^Is_Gc: _ Letter}', "");
Error('\p{Is_Category=__L:=}');
Error('\P{Is_Category=__L:=}');
Expect(1, 90, '\p{Is_Category=l}', "");
Expect(0, 90, '\p{^Is_Category=l}', "");
Expect(0, 90, '\P{Is_Category=l}', "");
Expect(1, 90, '\P{^Is_Category=l}', "");
Expect(0, 64, '\p{Is_Category=l}', "");
Expect(1, 64, '\p{^Is_Category=l}', "");
Expect(1, 64, '\P{Is_Category=l}', "");
Expect(0, 64, '\P{^Is_Category=l}', "");
Expect(1, 90, '\p{Is_Category=__l}', "");
Expect(0, 90, '\p{^Is_Category=__l}', "");
Expect(0, 90, '\P{Is_Category=__l}', "");
Expect(1, 90, '\P{^Is_Category=__l}', "");
Expect(0, 64, '\p{Is_Category=__l}', "");
Expect(1, 64, '\p{^Is_Category=__l}', "");
Expect(1, 64, '\P{Is_Category=__l}', "");
Expect(0, 64, '\P{^Is_Category=__l}', "");
Error('\p{General_Category:  _Modifier SYMBOL:=}');
Error('\P{General_Category:  _Modifier SYMBOL:=}');
Expect(1, 94, '\p{General_Category=modifiersymbol}', "");
Expect(0, 94, '\p{^General_Category=modifiersymbol}', "");
Expect(0, 94, '\P{General_Category=modifiersymbol}', "");
Expect(1, 94, '\P{^General_Category=modifiersymbol}', "");
Expect(0, 93, '\p{General_Category=modifiersymbol}', "");
Expect(1, 93, '\p{^General_Category=modifiersymbol}', "");
Expect(1, 93, '\P{General_Category=modifiersymbol}', "");
Expect(0, 93, '\P{^General_Category=modifiersymbol}', "");
Expect(1, 94, '\p{General_Category=- modifierSymbol}', "");
Expect(0, 94, '\p{^General_Category=- modifierSymbol}', "");
Expect(0, 94, '\P{General_Category=- modifierSymbol}', "");
Expect(1, 94, '\P{^General_Category=- modifierSymbol}', "");
Expect(0, 93, '\p{General_Category=- modifierSymbol}', "");
Expect(1, 93, '\p{^General_Category=- modifierSymbol}', "");
Expect(1, 93, '\P{General_Category=- modifierSymbol}', "");
Expect(0, 93, '\P{^General_Category=- modifierSymbol}', "");
Error('\p{Gc=-:=Sk}');
Error('\P{Gc=-:=Sk}');
Expect(1, 94, '\p{Gc=sk}', "");
Expect(0, 94, '\p{^Gc=sk}', "");
Expect(0, 94, '\P{Gc=sk}', "");
Expect(1, 94, '\P{^Gc=sk}', "");
Expect(0, 93, '\p{Gc=sk}', "");
Expect(1, 93, '\p{^Gc=sk}', "");
Expect(1, 93, '\P{Gc=sk}', "");
Expect(0, 93, '\P{^Gc=sk}', "");
Expect(1, 94, '\p{Gc=	 SK}', "");
Expect(0, 94, '\p{^Gc=	 SK}', "");
Expect(0, 94, '\P{Gc=	 SK}', "");
Expect(1, 94, '\P{^Gc=	 SK}', "");
Expect(0, 93, '\p{Gc=	 SK}', "");
Expect(1, 93, '\p{^Gc=	 SK}', "");
Expect(1, 93, '\P{Gc=	 SK}', "");
Expect(0, 93, '\P{^Gc=	 SK}', "");
Error('\p{Category=/a/- Modifier Symbol}');
Error('\P{Category=/a/- Modifier Symbol}');
Expect(1, 94, '\p{Category=modifiersymbol}', "");
Expect(0, 94, '\p{^Category=modifiersymbol}', "");
Expect(0, 94, '\P{Category=modifiersymbol}', "");
Expect(1, 94, '\P{^Category=modifiersymbol}', "");
Expect(0, 93, '\p{Category=modifiersymbol}', "");
Expect(1, 93, '\p{^Category=modifiersymbol}', "");
Expect(1, 93, '\P{Category=modifiersymbol}', "");
Expect(0, 93, '\P{^Category=modifiersymbol}', "");
Expect(1, 94, '\p{Category= _Modifier-Symbol}', "");
Expect(0, 94, '\p{^Category= _Modifier-Symbol}', "");
Expect(0, 94, '\P{Category= _Modifier-Symbol}', "");
Expect(1, 94, '\P{^Category= _Modifier-Symbol}', "");
Expect(0, 93, '\p{Category= _Modifier-Symbol}', "");
Expect(1, 93, '\p{^Category= _Modifier-Symbol}', "");
Expect(1, 93, '\P{Category= _Modifier-Symbol}', "");
Expect(0, 93, '\P{^Category= _Modifier-Symbol}', "");
Error('\p{Is_General_Category=/a/	 Sk}');
Error('\P{Is_General_Category=/a/	 Sk}');
Expect(1, 94, '\p{Is_General_Category=sk}', "");
Expect(0, 94, '\p{^Is_General_Category=sk}', "");
Expect(0, 94, '\P{Is_General_Category=sk}', "");
Expect(1, 94, '\P{^Is_General_Category=sk}', "");
Expect(0, 93, '\p{Is_General_Category=sk}', "");
Expect(1, 93, '\p{^Is_General_Category=sk}', "");
Expect(1, 93, '\P{Is_General_Category=sk}', "");
Expect(0, 93, '\P{^Is_General_Category=sk}', "");
Expect(1, 94, '\p{Is_General_Category=-_SK}', "");
Expect(0, 94, '\p{^Is_General_Category=-_SK}', "");
Expect(0, 94, '\P{Is_General_Category=-_SK}', "");
Expect(1, 94, '\P{^Is_General_Category=-_SK}', "");
Expect(0, 93, '\p{Is_General_Category=-_SK}', "");
Expect(1, 93, '\p{^Is_General_Category=-_SK}', "");
Expect(1, 93, '\P{Is_General_Category=-_SK}', "");
Expect(0, 93, '\P{^Is_General_Category=-_SK}', "");
Error('\p{Is_Gc= :=Modifier	symbol}');
Error('\P{Is_Gc= :=Modifier	symbol}');
Expect(1, 94, '\p{Is_Gc=modifiersymbol}', "");
Expect(0, 94, '\p{^Is_Gc=modifiersymbol}', "");
Expect(0, 94, '\P{Is_Gc=modifiersymbol}', "");
Expect(1, 94, '\P{^Is_Gc=modifiersymbol}', "");
Expect(0, 93, '\p{Is_Gc=modifiersymbol}', "");
Expect(1, 93, '\p{^Is_Gc=modifiersymbol}', "");
Expect(1, 93, '\P{Is_Gc=modifiersymbol}', "");
Expect(0, 93, '\P{^Is_Gc=modifiersymbol}', "");
Expect(1, 94, '\p{Is_Gc=-Modifier	symbol}', "");
Expect(0, 94, '\p{^Is_Gc=-Modifier	symbol}', "");
Expect(0, 94, '\P{Is_Gc=-Modifier	symbol}', "");
Expect(1, 94, '\P{^Is_Gc=-Modifier	symbol}', "");
Expect(0, 93, '\p{Is_Gc=-Modifier	symbol}', "");
Expect(1, 93, '\p{^Is_Gc=-Modifier	symbol}', "");
Expect(1, 93, '\P{Is_Gc=-Modifier	symbol}', "");
Expect(0, 93, '\P{^Is_Gc=-Modifier	symbol}', "");
Error('\p{Is_Category= -Sk/a/}');
Error('\P{Is_Category= -Sk/a/}');
Expect(1, 94, '\p{Is_Category: sk}', "");
Expect(0, 94, '\p{^Is_Category: sk}', "");
Expect(0, 94, '\P{Is_Category: sk}', "");
Expect(1, 94, '\P{^Is_Category: sk}', "");
Expect(0, 93, '\p{Is_Category: sk}', "");
Expect(1, 93, '\p{^Is_Category: sk}', "");
Expect(1, 93, '\P{Is_Category: sk}', "");
Expect(0, 93, '\P{^Is_Category: sk}', "");
Expect(1, 94, '\p{Is_Category=-_sk}', "");
Expect(0, 94, '\p{^Is_Category=-_sk}', "");
Expect(0, 94, '\P{Is_Category=-_sk}', "");
Expect(1, 94, '\P{^Is_Category=-_sk}', "");
Expect(0, 93, '\p{Is_Category=-_sk}', "");
Expect(1, 93, '\p{^Is_Category=-_sk}', "");
Expect(1, 93, '\P{Is_Category=-_sk}', "");
Expect(0, 93, '\P{^Is_Category=-_sk}', "");
Error('\p{General_Category:   	_Control:=}');
Error('\P{General_Category:   	_Control:=}');
Expect(1, 31, '\p{General_Category=control}', "");
Expect(0, 31, '\p{^General_Category=control}', "");
Expect(0, 31, '\P{General_Category=control}', "");
Expect(1, 31, '\P{^General_Category=control}', "");
Expect(0, 126, '\p{General_Category=control}', "");
Expect(1, 126, '\p{^General_Category=control}', "");
Expect(1, 126, '\P{General_Category=control}', "");
Expect(0, 126, '\P{^General_Category=control}', "");
Expect(1, 31, '\p{General_Category= control}', "");
Expect(0, 31, '\p{^General_Category= control}', "");
Expect(0, 31, '\P{General_Category= control}', "");
Expect(1, 31, '\P{^General_Category= control}', "");
Expect(0, 126, '\p{General_Category= control}', "");
Expect(1, 126, '\p{^General_Category= control}', "");
Expect(1, 126, '\P{General_Category= control}', "");
Expect(0, 126, '\P{^General_Category= control}', "");
Error('\p{Gc=-:=CC}');
Error('\P{Gc=-:=CC}');
Expect(1, 31, '\p{Gc=cc}', "");
Expect(0, 31, '\p{^Gc=cc}', "");
Expect(0, 31, '\P{Gc=cc}', "");
Expect(1, 31, '\P{^Gc=cc}', "");
Expect(0, 126, '\p{Gc=cc}', "");
Expect(1, 126, '\p{^Gc=cc}', "");
Expect(1, 126, '\P{Gc=cc}', "");
Expect(0, 126, '\P{^Gc=cc}', "");
Expect(1, 31, '\p{Gc:   -_Cc}', "");
Expect(0, 31, '\p{^Gc:   -_Cc}', "");
Expect(0, 31, '\P{Gc:   -_Cc}', "");
Expect(1, 31, '\P{^Gc:   -_Cc}', "");
Expect(0, 126, '\p{Gc:   -_Cc}', "");
Expect(1, 126, '\p{^Gc:   -_Cc}', "");
Expect(1, 126, '\P{Gc:   -_Cc}', "");
Expect(0, 126, '\P{^Gc:   -_Cc}', "");
Error('\p{Category= /a/Cntrl}');
Error('\P{Category= /a/Cntrl}');
Expect(1, 31, '\p{Category=cntrl}', "");
Expect(0, 31, '\p{^Category=cntrl}', "");
Expect(0, 31, '\P{Category=cntrl}', "");
Expect(1, 31, '\P{^Category=cntrl}', "");
Expect(0, 126, '\p{Category=cntrl}', "");
Expect(1, 126, '\p{^Category=cntrl}', "");
Expect(1, 126, '\P{Category=cntrl}', "");
Expect(0, 126, '\P{^Category=cntrl}', "");
Expect(1, 31, '\p{Category=	-CNTRL}', "");
Expect(0, 31, '\p{^Category=	-CNTRL}', "");
Expect(0, 31, '\P{Category=	-CNTRL}', "");
Expect(1, 31, '\P{^Category=	-CNTRL}', "");
Expect(0, 126, '\p{Category=	-CNTRL}', "");
Expect(1, 126, '\p{^Category=	-CNTRL}', "");
Expect(1, 126, '\P{Category=	-CNTRL}', "");
Expect(0, 126, '\P{^Category=	-CNTRL}', "");
Error('\p{Is_General_Category=/a/ _CONTROL}');
Error('\P{Is_General_Category=/a/ _CONTROL}');
Expect(1, 31, '\p{Is_General_Category=control}', "");
Expect(0, 31, '\p{^Is_General_Category=control}', "");
Expect(0, 31, '\P{Is_General_Category=control}', "");
Expect(1, 31, '\P{^Is_General_Category=control}', "");
Expect(0, 126, '\p{Is_General_Category=control}', "");
Expect(1, 126, '\p{^Is_General_Category=control}', "");
Expect(1, 126, '\P{Is_General_Category=control}', "");
Expect(0, 126, '\P{^Is_General_Category=control}', "");
Expect(1, 31, '\p{Is_General_Category:	 	control}', "");
Expect(0, 31, '\p{^Is_General_Category:	 	control}', "");
Expect(0, 31, '\P{Is_General_Category:	 	control}', "");
Expect(1, 31, '\P{^Is_General_Category:	 	control}', "");
Expect(0, 126, '\p{Is_General_Category:	 	control}', "");
Expect(1, 126, '\p{^Is_General_Category:	 	control}', "");
Expect(1, 126, '\P{Is_General_Category:	 	control}', "");
Expect(0, 126, '\P{^Is_General_Category:	 	control}', "");
Error('\p{Is_Gc=	:=Cc}');
Error('\P{Is_Gc=	:=Cc}');
Expect(1, 31, '\p{Is_Gc=cc}', "");
Expect(0, 31, '\p{^Is_Gc=cc}', "");
Expect(0, 31, '\P{Is_Gc=cc}', "");
Expect(1, 31, '\P{^Is_Gc=cc}', "");
Expect(0, 126, '\p{Is_Gc=cc}', "");
Expect(1, 126, '\p{^Is_Gc=cc}', "");
Expect(1, 126, '\P{Is_Gc=cc}', "");
Expect(0, 126, '\P{^Is_Gc=cc}', "");
Expect(1, 31, '\p{Is_Gc= _CC}', "");
Expect(0, 31, '\p{^Is_Gc= _CC}', "");
Expect(0, 31, '\P{Is_Gc= _CC}', "");
Expect(1, 31, '\P{^Is_Gc= _CC}', "");
Expect(0, 126, '\p{Is_Gc= _CC}', "");
Expect(1, 126, '\p{^Is_Gc= _CC}', "");
Expect(1, 126, '\P{Is_Gc= _CC}', "");
Expect(0, 126, '\P{^Is_Gc= _CC}', "");
Error('\p{Is_Category=-/a/CNTRL}');
Error('\P{Is_Category=-/a/CNTRL}');
Expect(1, 31, '\p{Is_Category: cntrl}', "");
Expect(0, 31, '\p{^Is_Category: cntrl}', "");
Expect(0, 31, '\P{Is_Category: cntrl}', "");
Expect(1, 31, '\P{^Is_Category: cntrl}', "");
Expect(0, 126, '\p{Is_Category: cntrl}', "");
Expect(1, 126, '\p{^Is_Category: cntrl}', "");
Expect(1, 126, '\P{Is_Category: cntrl}', "");
Expect(0, 126, '\P{^Is_Category: cntrl}', "");
Expect(1, 31, '\p{Is_Category=__cntrl}', "");
Expect(0, 31, '\p{^Is_Category=__cntrl}', "");
Expect(0, 31, '\P{Is_Category=__cntrl}', "");
Expect(1, 31, '\P{^Is_Category=__cntrl}', "");
Expect(0, 126, '\p{Is_Category=__cntrl}', "");
Expect(1, 126, '\p{^Is_Category=__cntrl}', "");
Expect(1, 126, '\P{Is_Category=__cntrl}', "");
Expect(0, 126, '\P{^Is_Category=__cntrl}', "");
Error('\p{General_Category=:=--Line-SEPARATOR}');
Error('\P{General_Category=:=--Line-SEPARATOR}');
Expect(1, 8232, '\p{General_Category=lineseparator}', "");
Expect(0, 8232, '\p{^General_Category=lineseparator}', "");
Expect(0, 8232, '\P{General_Category=lineseparator}', "");
Expect(1, 8232, '\P{^General_Category=lineseparator}', "");
Expect(0, 8231, '\p{General_Category=lineseparator}', "");
Expect(1, 8231, '\p{^General_Category=lineseparator}', "");
Expect(1, 8231, '\P{General_Category=lineseparator}', "");
Expect(0, 8231, '\P{^General_Category=lineseparator}', "");
Expect(1, 8232, '\p{General_Category=_	Line_Separator}', "");
Expect(0, 8232, '\p{^General_Category=_	Line_Separator}', "");
Expect(0, 8232, '\P{General_Category=_	Line_Separator}', "");
Expect(1, 8232, '\P{^General_Category=_	Line_Separator}', "");
Expect(0, 8231, '\p{General_Category=_	Line_Separator}', "");
Expect(1, 8231, '\p{^General_Category=_	Line_Separator}', "");
Expect(1, 8231, '\P{General_Category=_	Line_Separator}', "");
Expect(0, 8231, '\P{^General_Category=_	Line_Separator}', "");
Error('\p{Gc=/a/ 	Zl}');
Error('\P{Gc=/a/ 	Zl}');
Expect(1, 8232, '\p{Gc=zl}', "");
Expect(0, 8232, '\p{^Gc=zl}', "");
Expect(0, 8232, '\P{Gc=zl}', "");
Expect(1, 8232, '\P{^Gc=zl}', "");
Expect(0, 8231, '\p{Gc=zl}', "");
Expect(1, 8231, '\p{^Gc=zl}', "");
Expect(1, 8231, '\P{Gc=zl}', "");
Expect(0, 8231, '\P{^Gc=zl}', "");
Expect(1, 8232, '\p{Gc:		ZL}', "");
Expect(0, 8232, '\p{^Gc:		ZL}', "");
Expect(0, 8232, '\P{Gc:		ZL}', "");
Expect(1, 8232, '\P{^Gc:		ZL}', "");
Expect(0, 8231, '\p{Gc:		ZL}', "");
Expect(1, 8231, '\p{^Gc:		ZL}', "");
Expect(1, 8231, '\P{Gc:		ZL}', "");
Expect(0, 8231, '\P{^Gc:		ZL}', "");
Error('\p{Category=/a/	_Lineseparator}');
Error('\P{Category=/a/	_Lineseparator}');
Expect(1, 8232, '\p{Category=lineseparator}', "");
Expect(0, 8232, '\p{^Category=lineseparator}', "");
Expect(0, 8232, '\P{Category=lineseparator}', "");
Expect(1, 8232, '\P{^Category=lineseparator}', "");
Expect(0, 8231, '\p{Category=lineseparator}', "");
Expect(1, 8231, '\p{^Category=lineseparator}', "");
Expect(1, 8231, '\P{Category=lineseparator}', "");
Expect(0, 8231, '\P{^Category=lineseparator}', "");
Expect(1, 8232, '\p{Category=- Line	Separator}', "");
Expect(0, 8232, '\p{^Category=- Line	Separator}', "");
Expect(0, 8232, '\P{Category=- Line	Separator}', "");
Expect(1, 8232, '\P{^Category=- Line	Separator}', "");
Expect(0, 8231, '\p{Category=- Line	Separator}', "");
Expect(1, 8231, '\p{^Category=- Line	Separator}', "");
Expect(1, 8231, '\P{Category=- Line	Separator}', "");
Expect(0, 8231, '\P{^Category=- Line	Separator}', "");
Error('\p{Is_General_Category=_zl:=}');
Error('\P{Is_General_Category=_zl:=}');
Expect(1, 8232, '\p{Is_General_Category=zl}', "");
Expect(0, 8232, '\p{^Is_General_Category=zl}', "");
Expect(0, 8232, '\P{Is_General_Category=zl}', "");
Expect(1, 8232, '\P{^Is_General_Category=zl}', "");
Expect(0, 8231, '\p{Is_General_Category=zl}', "");
Expect(1, 8231, '\p{^Is_General_Category=zl}', "");
Expect(1, 8231, '\P{Is_General_Category=zl}', "");
Expect(0, 8231, '\P{^Is_General_Category=zl}', "");
Expect(1, 8232, '\p{Is_General_Category=_-Zl}', "");
Expect(0, 8232, '\p{^Is_General_Category=_-Zl}', "");
Expect(0, 8232, '\P{Is_General_Category=_-Zl}', "");
Expect(1, 8232, '\P{^Is_General_Category=_-Zl}', "");
Expect(0, 8231, '\p{Is_General_Category=_-Zl}', "");
Expect(1, 8231, '\p{^Is_General_Category=_-Zl}', "");
Expect(1, 8231, '\P{Is_General_Category=_-Zl}', "");
Expect(0, 8231, '\P{^Is_General_Category=_-Zl}', "");
Error('\p{Is_Gc=-	Line/a/separator}');
Error('\P{Is_Gc=-	Line/a/separator}');
Expect(1, 8232, '\p{Is_Gc=lineseparator}', "");
Expect(0, 8232, '\p{^Is_Gc=lineseparator}', "");
Expect(0, 8232, '\P{Is_Gc=lineseparator}', "");
Expect(1, 8232, '\P{^Is_Gc=lineseparator}', "");
Expect(0, 8231, '\p{Is_Gc=lineseparator}', "");
Expect(1, 8231, '\p{^Is_Gc=lineseparator}', "");
Expect(1, 8231, '\P{Is_Gc=lineseparator}', "");
Expect(0, 8231, '\P{^Is_Gc=lineseparator}', "");
Expect(1, 8232, '\p{Is_Gc= -Line-Separator}', "");
Expect(0, 8232, '\p{^Is_Gc= -Line-Separator}', "");
Expect(0, 8232, '\P{Is_Gc= -Line-Separator}', "");
Expect(1, 8232, '\P{^Is_Gc= -Line-Separator}', "");
Expect(0, 8231, '\p{Is_Gc= -Line-Separator}', "");
Expect(1, 8231, '\p{^Is_Gc= -Line-Separator}', "");
Expect(1, 8231, '\P{Is_Gc= -Line-Separator}', "");
Expect(0, 8231, '\P{^Is_Gc= -Line-Separator}', "");
Error('\p{Is_Category= _ZL:=}');
Error('\P{Is_Category= _ZL:=}');
Expect(1, 8232, '\p{Is_Category=zl}', "");
Expect(0, 8232, '\p{^Is_Category=zl}', "");
Expect(0, 8232, '\P{Is_Category=zl}', "");
Expect(1, 8232, '\P{^Is_Category=zl}', "");
Expect(0, 8231, '\p{Is_Category=zl}', "");
Expect(1, 8231, '\p{^Is_Category=zl}', "");
Expect(1, 8231, '\P{Is_Category=zl}', "");
Expect(0, 8231, '\P{^Is_Category=zl}', "");
Expect(1, 8232, '\p{Is_Category=	ZL}', "");
Expect(0, 8232, '\p{^Is_Category=	ZL}', "");
Expect(0, 8232, '\P{Is_Category=	ZL}', "");
Expect(1, 8232, '\P{^Is_Category=	ZL}', "");
Expect(0, 8231, '\p{Is_Category=	ZL}', "");
Expect(1, 8231, '\p{^Is_Category=	ZL}', "");
Expect(1, 8231, '\P{Is_Category=	ZL}', "");
Expect(0, 8231, '\P{^Is_Category=	ZL}', "");
Error('\p{General_Category:	:=Open_Punctuation}');
Error('\P{General_Category:	:=Open_Punctuation}');
Expect(1, 40, '\p{General_Category=openpunctuation}', "");
Expect(0, 40, '\p{^General_Category=openpunctuation}', "");
Expect(0, 40, '\P{General_Category=openpunctuation}', "");
Expect(1, 40, '\P{^General_Category=openpunctuation}', "");
Expect(0, 39, '\p{General_Category=openpunctuation}', "");
Expect(1, 39, '\p{^General_Category=openpunctuation}', "");
Expect(1, 39, '\P{General_Category=openpunctuation}', "");
Expect(0, 39, '\P{^General_Category=openpunctuation}', "");
Expect(1, 40, '\p{General_Category=_OPEN punctuation}', "");
Expect(0, 40, '\p{^General_Category=_OPEN punctuation}', "");
Expect(0, 40, '\P{General_Category=_OPEN punctuation}', "");
Expect(1, 40, '\P{^General_Category=_OPEN punctuation}', "");
Expect(0, 39, '\p{General_Category=_OPEN punctuation}', "");
Expect(1, 39, '\p{^General_Category=_OPEN punctuation}', "");
Expect(1, 39, '\P{General_Category=_OPEN punctuation}', "");
Expect(0, 39, '\P{^General_Category=_OPEN punctuation}', "");
Error('\p{Gc= Ps/a/}');
Error('\P{Gc= Ps/a/}');
Expect(1, 40, '\p{Gc:ps}', "");
Expect(0, 40, '\p{^Gc:ps}', "");
Expect(0, 40, '\P{Gc:ps}', "");
Expect(1, 40, '\P{^Gc:ps}', "");
Expect(0, 39, '\p{Gc:ps}', "");
Expect(1, 39, '\p{^Gc:ps}', "");
Expect(1, 39, '\P{Gc:ps}', "");
Expect(0, 39, '\P{^Gc:ps}', "");
Expect(1, 40, '\p{Gc=	_Ps}', "");
Expect(0, 40, '\p{^Gc=	_Ps}', "");
Expect(0, 40, '\P{Gc=	_Ps}', "");
Expect(1, 40, '\P{^Gc=	_Ps}', "");
Expect(0, 39, '\p{Gc=	_Ps}', "");
Expect(1, 39, '\p{^Gc=	_Ps}', "");
Expect(1, 39, '\P{Gc=	_Ps}', "");
Expect(0, 39, '\P{^Gc=	_Ps}', "");
Error('\p{Category=/a/Open-Punctuation}');
Error('\P{Category=/a/Open-Punctuation}');
Expect(1, 40, '\p{Category=openpunctuation}', "");
Expect(0, 40, '\p{^Category=openpunctuation}', "");
Expect(0, 40, '\P{Category=openpunctuation}', "");
Expect(1, 40, '\P{^Category=openpunctuation}', "");
Expect(0, 39, '\p{Category=openpunctuation}', "");
Expect(1, 39, '\p{^Category=openpunctuation}', "");
Expect(1, 39, '\P{Category=openpunctuation}', "");
Expect(0, 39, '\P{^Category=openpunctuation}', "");
Expect(1, 40, '\p{Category:   		OpenPunctuation}', "");
Expect(0, 40, '\p{^Category:   		OpenPunctuation}', "");
Expect(0, 40, '\P{Category:   		OpenPunctuation}', "");
Expect(1, 40, '\P{^Category:   		OpenPunctuation}', "");
Expect(0, 39, '\p{Category:   		OpenPunctuation}', "");
Expect(1, 39, '\p{^Category:   		OpenPunctuation}', "");
Expect(1, 39, '\P{Category:   		OpenPunctuation}', "");
Expect(0, 39, '\P{^Category:   		OpenPunctuation}', "");
Error('\p{Is_General_Category: __PS:=}');
Error('\P{Is_General_Category: __PS:=}');
Expect(1, 40, '\p{Is_General_Category=ps}', "");
Expect(0, 40, '\p{^Is_General_Category=ps}', "");
Expect(0, 40, '\P{Is_General_Category=ps}', "");
Expect(1, 40, '\P{^Is_General_Category=ps}', "");
Expect(0, 39, '\p{Is_General_Category=ps}', "");
Expect(1, 39, '\p{^Is_General_Category=ps}', "");
Expect(1, 39, '\P{Is_General_Category=ps}', "");
Expect(0, 39, '\P{^Is_General_Category=ps}', "");
Expect(1, 40, '\p{Is_General_Category=- PS}', "");
Expect(0, 40, '\p{^Is_General_Category=- PS}', "");
Expect(0, 40, '\P{Is_General_Category=- PS}', "");
Expect(1, 40, '\P{^Is_General_Category=- PS}', "");
Expect(0, 39, '\p{Is_General_Category=- PS}', "");
Expect(1, 39, '\p{^Is_General_Category=- PS}', "");
Expect(1, 39, '\P{Is_General_Category=- PS}', "");
Expect(0, 39, '\P{^Is_General_Category=- PS}', "");
Error('\p{Is_Gc=	:=OPEN-PUNCTUATION}');
Error('\P{Is_Gc=	:=OPEN-PUNCTUATION}');
Expect(1, 40, '\p{Is_Gc=openpunctuation}', "");
Expect(0, 40, '\p{^Is_Gc=openpunctuation}', "");
Expect(0, 40, '\P{Is_Gc=openpunctuation}', "");
Expect(1, 40, '\P{^Is_Gc=openpunctuation}', "");
Expect(0, 39, '\p{Is_Gc=openpunctuation}', "");
Expect(1, 39, '\p{^Is_Gc=openpunctuation}', "");
Expect(1, 39, '\P{Is_Gc=openpunctuation}', "");
Expect(0, 39, '\P{^Is_Gc=openpunctuation}', "");
Expect(1, 40, '\p{Is_Gc= 	Open_Punctuation}', "");
Expect(0, 40, '\p{^Is_Gc= 	Open_Punctuation}', "");
Expect(0, 40, '\P{Is_Gc= 	Open_Punctuation}', "");
Expect(1, 40, '\P{^Is_Gc= 	Open_Punctuation}', "");
Expect(0, 39, '\p{Is_Gc= 	Open_Punctuation}', "");
Expect(1, 39, '\p{^Is_Gc= 	Open_Punctuation}', "");
Expect(1, 39, '\P{Is_Gc= 	Open_Punctuation}', "");
Expect(0, 39, '\P{^Is_Gc= 	Open_Punctuation}', "");
Error('\p{Is_Category=	 Ps:=}');
Error('\P{Is_Category=	 Ps:=}');
Expect(1, 40, '\p{Is_Category=ps}', "");
Expect(0, 40, '\p{^Is_Category=ps}', "");
Expect(0, 40, '\P{Is_Category=ps}', "");
Expect(1, 40, '\P{^Is_Category=ps}', "");
Expect(0, 39, '\p{Is_Category=ps}', "");
Expect(1, 39, '\p{^Is_Category=ps}', "");
Expect(1, 39, '\P{Is_Category=ps}', "");
Expect(0, 39, '\P{^Is_Category=ps}', "");
Expect(1, 40, '\p{Is_Category=	 ps}', "");
Expect(0, 40, '\p{^Is_Category=	 ps}', "");
Expect(0, 40, '\P{Is_Category=	 ps}', "");
Expect(1, 40, '\P{^Is_Category=	 ps}', "");
Expect(0, 39, '\p{Is_Category=	 ps}', "");
Expect(1, 39, '\p{^Is_Category=	 ps}', "");
Expect(1, 39, '\P{Is_Category=	 ps}', "");
Expect(0, 39, '\P{^Is_Category=	 ps}', "");
Error('\p{General_Category=-Math_Symbol/a/}');
Error('\P{General_Category=-Math_Symbol/a/}');
Expect(1, 43, '\p{General_Category=mathsymbol}', "");
Expect(0, 43, '\p{^General_Category=mathsymbol}', "");
Expect(0, 43, '\P{General_Category=mathsymbol}', "");
Expect(1, 43, '\P{^General_Category=mathsymbol}', "");
Expect(0, 42, '\p{General_Category=mathsymbol}', "");
Expect(1, 42, '\p{^General_Category=mathsymbol}', "");
Expect(1, 42, '\P{General_Category=mathsymbol}', "");
Expect(0, 42, '\P{^General_Category=mathsymbol}', "");
Expect(1, 43, '\p{General_Category=_ Math Symbol}', "");
Expect(0, 43, '\p{^General_Category=_ Math Symbol}', "");
Expect(0, 43, '\P{General_Category=_ Math Symbol}', "");
Expect(1, 43, '\P{^General_Category=_ Math Symbol}', "");
Expect(0, 42, '\p{General_Category=_ Math Symbol}', "");
Expect(1, 42, '\p{^General_Category=_ Math Symbol}', "");
Expect(1, 42, '\P{General_Category=_ Math Symbol}', "");
Expect(0, 42, '\P{^General_Category=_ Math Symbol}', "");
Error('\p{Gc:	:=		sm}');
Error('\P{Gc:	:=		sm}');
Expect(1, 43, '\p{Gc:	sm}', "");
Expect(0, 43, '\p{^Gc:	sm}', "");
Expect(0, 43, '\P{Gc:	sm}', "");
Expect(1, 43, '\P{^Gc:	sm}', "");
Expect(0, 42, '\p{Gc:	sm}', "");
Expect(1, 42, '\p{^Gc:	sm}', "");
Expect(1, 42, '\P{Gc:	sm}', "");
Expect(0, 42, '\P{^Gc:	sm}', "");
Expect(1, 43, '\p{Gc= SM}', "");
Expect(0, 43, '\p{^Gc= SM}', "");
Expect(0, 43, '\P{Gc= SM}', "");
Expect(1, 43, '\P{^Gc= SM}', "");
Expect(0, 42, '\p{Gc= SM}', "");
Expect(1, 42, '\p{^Gc= SM}', "");
Expect(1, 42, '\P{Gc= SM}', "");
Expect(0, 42, '\P{^Gc= SM}', "");
Error('\p{Category::=  MATH_symbol}');
Error('\P{Category::=  MATH_symbol}');
Expect(1, 43, '\p{Category=mathsymbol}', "");
Expect(0, 43, '\p{^Category=mathsymbol}', "");
Expect(0, 43, '\P{Category=mathsymbol}', "");
Expect(1, 43, '\P{^Category=mathsymbol}', "");
Expect(0, 42, '\p{Category=mathsymbol}', "");
Expect(1, 42, '\p{^Category=mathsymbol}', "");
Expect(1, 42, '\P{Category=mathsymbol}', "");
Expect(0, 42, '\P{^Category=mathsymbol}', "");
Expect(1, 43, '\p{Category=_-Math_Symbol}', "");
Expect(0, 43, '\p{^Category=_-Math_Symbol}', "");
Expect(0, 43, '\P{Category=_-Math_Symbol}', "");
Expect(1, 43, '\P{^Category=_-Math_Symbol}', "");
Expect(0, 42, '\p{Category=_-Math_Symbol}', "");
Expect(1, 42, '\p{^Category=_-Math_Symbol}', "");
Expect(1, 42, '\P{Category=_-Math_Symbol}', "");
Expect(0, 42, '\P{^Category=_-Math_Symbol}', "");
Error('\p{Is_General_Category=/a/	Sm}');
Error('\P{Is_General_Category=/a/	Sm}');
Expect(1, 43, '\p{Is_General_Category=sm}', "");
Expect(0, 43, '\p{^Is_General_Category=sm}', "");
Expect(0, 43, '\P{Is_General_Category=sm}', "");
Expect(1, 43, '\P{^Is_General_Category=sm}', "");
Expect(0, 42, '\p{Is_General_Category=sm}', "");
Expect(1, 42, '\p{^Is_General_Category=sm}', "");
Expect(1, 42, '\P{Is_General_Category=sm}', "");
Expect(0, 42, '\P{^Is_General_Category=sm}', "");
Expect(1, 43, '\p{Is_General_Category=_-SM}', "");
Expect(0, 43, '\p{^Is_General_Category=_-SM}', "");
Expect(0, 43, '\P{Is_General_Category=_-SM}', "");
Expect(1, 43, '\P{^Is_General_Category=_-SM}', "");
Expect(0, 42, '\p{Is_General_Category=_-SM}', "");
Expect(1, 42, '\p{^Is_General_Category=_-SM}', "");
Expect(1, 42, '\P{Is_General_Category=_-SM}', "");
Expect(0, 42, '\P{^Is_General_Category=_-SM}', "");
Error('\p{Is_Gc:--math:=Symbol}');
Error('\P{Is_Gc:--math:=Symbol}');
Expect(1, 43, '\p{Is_Gc=mathsymbol}', "");
Expect(0, 43, '\p{^Is_Gc=mathsymbol}', "");
Expect(0, 43, '\P{Is_Gc=mathsymbol}', "");
Expect(1, 43, '\P{^Is_Gc=mathsymbol}', "");
Expect(0, 42, '\p{Is_Gc=mathsymbol}', "");
Expect(1, 42, '\p{^Is_Gc=mathsymbol}', "");
Expect(1, 42, '\P{Is_Gc=mathsymbol}', "");
Expect(0, 42, '\P{^Is_Gc=mathsymbol}', "");
Expect(1, 43, '\p{Is_Gc=_Math-Symbol}', "");
Expect(0, 43, '\p{^Is_Gc=_Math-Symbol}', "");
Expect(0, 43, '\P{Is_Gc=_Math-Symbol}', "");
Expect(1, 43, '\P{^Is_Gc=_Math-Symbol}', "");
Expect(0, 42, '\p{Is_Gc=_Math-Symbol}', "");
Expect(1, 42, '\p{^Is_Gc=_Math-Symbol}', "");
Expect(1, 42, '\P{Is_Gc=_Math-Symbol}', "");
Expect(0, 42, '\P{^Is_Gc=_Math-Symbol}', "");
Error('\p{Is_Category=-:=Sm}');
Error('\P{Is_Category=-:=Sm}');
Expect(1, 43, '\p{Is_Category=sm}', "");
Expect(0, 43, '\p{^Is_Category=sm}', "");
Expect(0, 43, '\P{Is_Category=sm}', "");
Expect(1, 43, '\P{^Is_Category=sm}', "");
Expect(0, 42, '\p{Is_Category=sm}', "");
Expect(1, 42, '\p{^Is_Category=sm}', "");
Expect(1, 42, '\P{Is_Category=sm}', "");
Expect(0, 42, '\P{^Is_Category=sm}', "");
Expect(1, 43, '\p{Is_Category=_Sm}', "");
Expect(0, 43, '\p{^Is_Category=_Sm}', "");
Expect(0, 43, '\P{Is_Category=_Sm}', "");
Expect(1, 43, '\P{^Is_Category=_Sm}', "");
Expect(0, 42, '\p{Is_Category=_Sm}', "");
Expect(1, 42, '\p{^Is_Category=_Sm}', "");
Expect(1, 42, '\P{Is_Category=_Sm}', "");
Expect(0, 42, '\P{^Is_Category=_Sm}', "");
Error('\p{General_Category=:=- other	LETTER}');
Error('\P{General_Category=:=- other	LETTER}');
Expect(1, 443, '\p{General_Category=otherletter}', "");
Expect(0, 443, '\p{^General_Category=otherletter}', "");
Expect(0, 443, '\P{General_Category=otherletter}', "");
Expect(1, 443, '\P{^General_Category=otherletter}', "");
Expect(0, 442, '\p{General_Category=otherletter}', "");
Expect(1, 442, '\p{^General_Category=otherletter}', "");
Expect(1, 442, '\P{General_Category=otherletter}', "");
Expect(0, 442, '\P{^General_Category=otherletter}', "");
Expect(1, 443, '\p{General_Category= _other_Letter}', "");
Expect(0, 443, '\p{^General_Category= _other_Letter}', "");
Expect(0, 443, '\P{General_Category= _other_Letter}', "");
Expect(1, 443, '\P{^General_Category= _other_Letter}', "");
Expect(0, 442, '\p{General_Category= _other_Letter}', "");
Expect(1, 442, '\p{^General_Category= _other_Letter}', "");
Expect(1, 442, '\P{General_Category= _other_Letter}', "");
Expect(0, 442, '\P{^General_Category= _other_Letter}', "");
Error('\p{Gc=_LO/a/}');
Error('\P{Gc=_LO/a/}');
Expect(1, 443, '\p{Gc=lo}', "");
Expect(0, 443, '\p{^Gc=lo}', "");
Expect(0, 443, '\P{Gc=lo}', "");
Expect(1, 443, '\P{^Gc=lo}', "");
Expect(0, 442, '\p{Gc=lo}', "");
Expect(1, 442, '\p{^Gc=lo}', "");
Expect(1, 442, '\P{Gc=lo}', "");
Expect(0, 442, '\P{^Gc=lo}', "");
Expect(1, 443, '\p{Gc=		lo}', "");
Expect(0, 443, '\p{^Gc=		lo}', "");
Expect(0, 443, '\P{Gc=		lo}', "");
Expect(1, 443, '\P{^Gc=		lo}', "");
Expect(0, 442, '\p{Gc=		lo}', "");
Expect(1, 442, '\p{^Gc=		lo}', "");
Expect(1, 442, '\P{Gc=		lo}', "");
Expect(0, 442, '\P{^Gc=		lo}', "");
Error('\p{Category=__other-Letter/a/}');
Error('\P{Category=__other-Letter/a/}');
Expect(1, 443, '\p{Category=otherletter}', "");
Expect(0, 443, '\p{^Category=otherletter}', "");
Expect(0, 443, '\P{Category=otherletter}', "");
Expect(1, 443, '\P{^Category=otherletter}', "");
Expect(0, 442, '\p{Category=otherletter}', "");
Expect(1, 442, '\p{^Category=otherletter}', "");
Expect(1, 442, '\P{Category=otherletter}', "");
Expect(0, 442, '\P{^Category=otherletter}', "");
Expect(1, 443, '\p{Category=	_Other_Letter}', "");
Expect(0, 443, '\p{^Category=	_Other_Letter}', "");
Expect(0, 443, '\P{Category=	_Other_Letter}', "");
Expect(1, 443, '\P{^Category=	_Other_Letter}', "");
Expect(0, 442, '\p{Category=	_Other_Letter}', "");
Expect(1, 442, '\p{^Category=	_Other_Letter}', "");
Expect(1, 442, '\P{Category=	_Other_Letter}', "");
Expect(0, 442, '\P{^Category=	_Other_Letter}', "");
Error('\p{Is_General_Category=_/a/LO}');
Error('\P{Is_General_Category=_/a/LO}');
Expect(1, 443, '\p{Is_General_Category=lo}', "");
Expect(0, 443, '\p{^Is_General_Category=lo}', "");
Expect(0, 443, '\P{Is_General_Category=lo}', "");
Expect(1, 443, '\P{^Is_General_Category=lo}', "");
Expect(0, 442, '\p{Is_General_Category=lo}', "");
Expect(1, 442, '\p{^Is_General_Category=lo}', "");
Expect(1, 442, '\P{Is_General_Category=lo}', "");
Expect(0, 442, '\P{^Is_General_Category=lo}', "");
Expect(1, 443, '\p{Is_General_Category= _Lo}', "");
Expect(0, 443, '\p{^Is_General_Category= _Lo}', "");
Expect(0, 443, '\P{Is_General_Category= _Lo}', "");
Expect(1, 443, '\P{^Is_General_Category= _Lo}', "");
Expect(0, 442, '\p{Is_General_Category= _Lo}', "");
Expect(1, 442, '\p{^Is_General_Category= _Lo}', "");
Expect(1, 442, '\P{Is_General_Category= _Lo}', "");
Expect(0, 442, '\P{^Is_General_Category= _Lo}', "");
Error('\p{Is_Gc= -other:=Letter}');
Error('\P{Is_Gc= -other:=Letter}');
Expect(1, 443, '\p{Is_Gc=otherletter}', "");
Expect(0, 443, '\p{^Is_Gc=otherletter}', "");
Expect(0, 443, '\P{Is_Gc=otherletter}', "");
Expect(1, 443, '\P{^Is_Gc=otherletter}', "");
Expect(0, 442, '\p{Is_Gc=otherletter}', "");
Expect(1, 442, '\p{^Is_Gc=otherletter}', "");
Expect(1, 442, '\P{Is_Gc=otherletter}', "");
Expect(0, 442, '\P{^Is_Gc=otherletter}', "");
Expect(1, 443, '\p{Is_Gc=--OTHER	letter}', "");
Expect(0, 443, '\p{^Is_Gc=--OTHER	letter}', "");
Expect(0, 443, '\P{Is_Gc=--OTHER	letter}', "");
Expect(1, 443, '\P{^Is_Gc=--OTHER	letter}', "");
Expect(0, 442, '\p{Is_Gc=--OTHER	letter}', "");
Expect(1, 442, '\p{^Is_Gc=--OTHER	letter}', "");
Expect(1, 442, '\P{Is_Gc=--OTHER	letter}', "");
Expect(0, 442, '\P{^Is_Gc=--OTHER	letter}', "");
Error('\p{Is_Category=__LO:=}');
Error('\P{Is_Category=__LO:=}');
Expect(1, 443, '\p{Is_Category=lo}', "");
Expect(0, 443, '\p{^Is_Category=lo}', "");
Expect(0, 443, '\P{Is_Category=lo}', "");
Expect(1, 443, '\P{^Is_Category=lo}', "");
Expect(0, 442, '\p{Is_Category=lo}', "");
Expect(1, 442, '\p{^Is_Category=lo}', "");
Expect(1, 442, '\P{Is_Category=lo}', "");
Expect(0, 442, '\P{^Is_Category=lo}', "");
Expect(1, 443, '\p{Is_Category= _lo}', "");
Expect(0, 443, '\p{^Is_Category= _lo}', "");
Expect(0, 443, '\P{Is_Category= _lo}', "");
Expect(1, 443, '\P{^Is_Category= _lo}', "");
Expect(0, 442, '\p{Is_Category= _lo}', "");
Expect(1, 442, '\p{^Is_Category= _lo}', "");
Expect(1, 442, '\P{Is_Category= _lo}', "");
Expect(0, 442, '\P{^Is_Category= _lo}', "");
Error('\p{General_Category=:=	 Separator}');
Error('\P{General_Category=:=	 Separator}');
Expect(1, 32, '\p{General_Category=separator}', "");
Expect(0, 32, '\p{^General_Category=separator}', "");
Expect(0, 32, '\P{General_Category=separator}', "");
Expect(1, 32, '\P{^General_Category=separator}', "");
Expect(0, 31, '\p{General_Category=separator}', "");
Expect(1, 31, '\p{^General_Category=separator}', "");
Expect(1, 31, '\P{General_Category=separator}', "");
Expect(0, 31, '\P{^General_Category=separator}', "");
Expect(1, 32, '\p{General_Category= Separator}', "");
Expect(0, 32, '\p{^General_Category= Separator}', "");
Expect(0, 32, '\P{General_Category= Separator}', "");
Expect(1, 32, '\P{^General_Category= Separator}', "");
Expect(0, 31, '\p{General_Category= Separator}', "");
Expect(1, 31, '\p{^General_Category= Separator}', "");
Expect(1, 31, '\P{General_Category= Separator}', "");
Expect(0, 31, '\P{^General_Category= Separator}', "");
Error('\p{Gc:  -Z:=}');
Error('\P{Gc:  -Z:=}');
Expect(1, 32, '\p{Gc=z}', "");
Expect(0, 32, '\p{^Gc=z}', "");
Expect(0, 32, '\P{Gc=z}', "");
Expect(1, 32, '\P{^Gc=z}', "");
Expect(0, 31, '\p{Gc=z}', "");
Expect(1, 31, '\p{^Gc=z}', "");
Expect(1, 31, '\P{Gc=z}', "");
Expect(0, 31, '\P{^Gc=z}', "");
Expect(1, 32, '\p{Gc=	 Z}', "");
Expect(0, 32, '\p{^Gc=	 Z}', "");
Expect(0, 32, '\P{Gc=	 Z}', "");
Expect(1, 32, '\P{^Gc=	 Z}', "");
Expect(0, 31, '\p{Gc=	 Z}', "");
Expect(1, 31, '\p{^Gc=	 Z}', "");
Expect(1, 31, '\P{Gc=	 Z}', "");
Expect(0, 31, '\P{^Gc=	 Z}', "");
Error('\p{Category=  SEPARATOR:=}');
Error('\P{Category=  SEPARATOR:=}');
Expect(1, 32, '\p{Category:separator}', "");
Expect(0, 32, '\p{^Category:separator}', "");
Expect(0, 32, '\P{Category:separator}', "");
Expect(1, 32, '\P{^Category:separator}', "");
Expect(0, 31, '\p{Category:separator}', "");
Expect(1, 31, '\p{^Category:separator}', "");
Expect(1, 31, '\P{Category:separator}', "");
Expect(0, 31, '\P{^Category:separator}', "");
Expect(1, 32, '\p{Category=Separator}', "");
Expect(0, 32, '\p{^Category=Separator}', "");
Expect(0, 32, '\P{Category=Separator}', "");
Expect(1, 32, '\P{^Category=Separator}', "");
Expect(0, 31, '\p{Category=Separator}', "");
Expect(1, 31, '\p{^Category=Separator}', "");
Expect(1, 31, '\P{Category=Separator}', "");
Expect(0, 31, '\P{^Category=Separator}', "");
Error('\p{Is_General_Category=_:=Z}');
Error('\P{Is_General_Category=_:=Z}');
Expect(1, 32, '\p{Is_General_Category=z}', "");
Expect(0, 32, '\p{^Is_General_Category=z}', "");
Expect(0, 32, '\P{Is_General_Category=z}', "");
Expect(1, 32, '\P{^Is_General_Category=z}', "");
Expect(0, 31, '\p{Is_General_Category=z}', "");
Expect(1, 31, '\p{^Is_General_Category=z}', "");
Expect(1, 31, '\P{Is_General_Category=z}', "");
Expect(0, 31, '\P{^Is_General_Category=z}', "");
Expect(1, 32, '\p{Is_General_Category=_ Z}', "");
Expect(0, 32, '\p{^Is_General_Category=_ Z}', "");
Expect(0, 32, '\P{Is_General_Category=_ Z}', "");
Expect(1, 32, '\P{^Is_General_Category=_ Z}', "");
Expect(0, 31, '\p{Is_General_Category=_ Z}', "");
Expect(1, 31, '\p{^Is_General_Category=_ Z}', "");
Expect(1, 31, '\P{Is_General_Category=_ Z}', "");
Expect(0, 31, '\P{^Is_General_Category=_ Z}', "");
Error('\p{Is_Gc=/a/	-Separator}');
Error('\P{Is_Gc=/a/	-Separator}');
Expect(1, 32, '\p{Is_Gc:	separator}', "");
Expect(0, 32, '\p{^Is_Gc:	separator}', "");
Expect(0, 32, '\P{Is_Gc:	separator}', "");
Expect(1, 32, '\P{^Is_Gc:	separator}', "");
Expect(0, 31, '\p{Is_Gc:	separator}', "");
Expect(1, 31, '\p{^Is_Gc:	separator}', "");
Expect(1, 31, '\P{Is_Gc:	separator}', "");
Expect(0, 31, '\P{^Is_Gc:	separator}', "");
Expect(1, 32, '\p{Is_Gc=-	separator}', "");
Expect(0, 32, '\p{^Is_Gc=-	separator}', "");
Expect(0, 32, '\P{Is_Gc=-	separator}', "");
Expect(1, 32, '\P{^Is_Gc=-	separator}', "");
Expect(0, 31, '\p{Is_Gc=-	separator}', "");
Expect(1, 31, '\p{^Is_Gc=-	separator}', "");
Expect(1, 31, '\P{Is_Gc=-	separator}', "");
Expect(0, 31, '\P{^Is_Gc=-	separator}', "");
Error('\p{Is_Category=	:=Z}');
Error('\P{Is_Category=	:=Z}');
Expect(1, 32, '\p{Is_Category=z}', "");
Expect(0, 32, '\p{^Is_Category=z}', "");
Expect(0, 32, '\P{Is_Category=z}', "");
Expect(1, 32, '\P{^Is_Category=z}', "");
Expect(0, 31, '\p{Is_Category=z}', "");
Expect(1, 31, '\p{^Is_Category=z}', "");
Expect(1, 31, '\P{Is_Category=z}', "");
Expect(0, 31, '\P{^Is_Category=z}', "");
Expect(1, 32, '\p{Is_Category:			Z}', "");
Expect(0, 32, '\p{^Is_Category:			Z}', "");
Expect(0, 32, '\P{Is_Category:			Z}', "");
Expect(1, 32, '\P{^Is_Category:			Z}', "");
Expect(0, 31, '\p{Is_Category:			Z}', "");
Expect(1, 31, '\p{^Is_Category:			Z}', "");
Expect(1, 31, '\P{Is_Category:			Z}', "");
Expect(0, 31, '\P{^Is_Category:			Z}', "");
Error('\p{General_Category=:=Other	Punctuation}');
Error('\P{General_Category=:=Other	Punctuation}');
Expect(1, 35, '\p{General_Category=otherpunctuation}', "");
Expect(0, 35, '\p{^General_Category=otherpunctuation}', "");
Expect(0, 35, '\P{General_Category=otherpunctuation}', "");
Expect(1, 35, '\P{^General_Category=otherpunctuation}', "");
Expect(0, 32, '\p{General_Category=otherpunctuation}', "");
Expect(1, 32, '\p{^General_Category=otherpunctuation}', "");
Expect(1, 32, '\P{General_Category=otherpunctuation}', "");
Expect(0, 32, '\P{^General_Category=otherpunctuation}', "");
Expect(1, 35, '\p{General_Category= _other Punctuation}', "");
Expect(0, 35, '\p{^General_Category= _other Punctuation}', "");
Expect(0, 35, '\P{General_Category= _other Punctuation}', "");
Expect(1, 35, '\P{^General_Category= _other Punctuation}', "");
Expect(0, 32, '\p{General_Category= _other Punctuation}', "");
Expect(1, 32, '\p{^General_Category= _other Punctuation}', "");
Expect(1, 32, '\P{General_Category= _other Punctuation}', "");
Expect(0, 32, '\P{^General_Category= _other Punctuation}', "");
Error('\p{Gc: /a/-	Po}');
Error('\P{Gc: /a/-	Po}');
Expect(1, 35, '\p{Gc=po}', "");
Expect(0, 35, '\p{^Gc=po}', "");
Expect(0, 35, '\P{Gc=po}', "");
Expect(1, 35, '\P{^Gc=po}', "");
Expect(0, 32, '\p{Gc=po}', "");
Expect(1, 32, '\p{^Gc=po}', "");
Expect(1, 32, '\P{Gc=po}', "");
Expect(0, 32, '\P{^Gc=po}', "");
Expect(1, 35, '\p{Gc= _Po}', "");
Expect(0, 35, '\p{^Gc= _Po}', "");
Expect(0, 35, '\P{Gc= _Po}', "");
Expect(1, 35, '\P{^Gc= _Po}', "");
Expect(0, 32, '\p{Gc= _Po}', "");
Expect(1, 32, '\p{^Gc= _Po}', "");
Expect(1, 32, '\P{Gc= _Po}', "");
Expect(0, 32, '\P{^Gc= _Po}', "");
Error('\p{Category=:= -otherPunctuation}');
Error('\P{Category=:= -otherPunctuation}');
Expect(1, 35, '\p{Category=otherpunctuation}', "");
Expect(0, 35, '\p{^Category=otherpunctuation}', "");
Expect(0, 35, '\P{Category=otherpunctuation}', "");
Expect(1, 35, '\P{^Category=otherpunctuation}', "");
Expect(0, 32, '\p{Category=otherpunctuation}', "");
Expect(1, 32, '\p{^Category=otherpunctuation}', "");
Expect(1, 32, '\P{Category=otherpunctuation}', "");
Expect(0, 32, '\P{^Category=otherpunctuation}', "");
Expect(1, 35, '\p{Category=- OtherPunctuation}', "");
Expect(0, 35, '\p{^Category=- OtherPunctuation}', "");
Expect(0, 35, '\P{Category=- OtherPunctuation}', "");
Expect(1, 35, '\P{^Category=- OtherPunctuation}', "");
Expect(0, 32, '\p{Category=- OtherPunctuation}', "");
Expect(1, 32, '\p{^Category=- OtherPunctuation}', "");
Expect(1, 32, '\P{Category=- OtherPunctuation}', "");
Expect(0, 32, '\P{^Category=- OtherPunctuation}', "");
Error('\p{Is_General_Category= PO:=}');
Error('\P{Is_General_Category= PO:=}');
Expect(1, 35, '\p{Is_General_Category=po}', "");
Expect(0, 35, '\p{^Is_General_Category=po}', "");
Expect(0, 35, '\P{Is_General_Category=po}', "");
Expect(1, 35, '\P{^Is_General_Category=po}', "");
Expect(0, 32, '\p{Is_General_Category=po}', "");
Expect(1, 32, '\p{^Is_General_Category=po}', "");
Expect(1, 32, '\P{Is_General_Category=po}', "");
Expect(0, 32, '\P{^Is_General_Category=po}', "");
Expect(1, 35, '\p{Is_General_Category= Po}', "");
Expect(0, 35, '\p{^Is_General_Category= Po}', "");
Expect(0, 35, '\P{Is_General_Category= Po}', "");
Expect(1, 35, '\P{^Is_General_Category= Po}', "");
Expect(0, 32, '\p{Is_General_Category= Po}', "");
Expect(1, 32, '\p{^Is_General_Category= Po}', "");
Expect(1, 32, '\P{Is_General_Category= Po}', "");
Expect(0, 32, '\P{^Is_General_Category= Po}', "");
Error('\p{Is_Gc=--OTHER/a/Punctuation}');
Error('\P{Is_Gc=--OTHER/a/Punctuation}');
Expect(1, 35, '\p{Is_Gc=otherpunctuation}', "");
Expect(0, 35, '\p{^Is_Gc=otherpunctuation}', "");
Expect(0, 35, '\P{Is_Gc=otherpunctuation}', "");
Expect(1, 35, '\P{^Is_Gc=otherpunctuation}', "");
Expect(0, 32, '\p{Is_Gc=otherpunctuation}', "");
Expect(1, 32, '\p{^Is_Gc=otherpunctuation}', "");
Expect(1, 32, '\P{Is_Gc=otherpunctuation}', "");
Expect(0, 32, '\P{^Is_Gc=otherpunctuation}', "");
Expect(1, 35, '\p{Is_Gc=  Other	Punctuation}', "");
Expect(0, 35, '\p{^Is_Gc=  Other	Punctuation}', "");
Expect(0, 35, '\P{Is_Gc=  Other	Punctuation}', "");
Expect(1, 35, '\P{^Is_Gc=  Other	Punctuation}', "");
Expect(0, 32, '\p{Is_Gc=  Other	Punctuation}', "");
Expect(1, 32, '\p{^Is_Gc=  Other	Punctuation}', "");
Expect(1, 32, '\P{Is_Gc=  Other	Punctuation}', "");
Expect(0, 32, '\P{^Is_Gc=  Other	Punctuation}', "");
Error('\p{Is_Category=/a/  PO}');
Error('\P{Is_Category=/a/  PO}');
Expect(1, 35, '\p{Is_Category=po}', "");
Expect(0, 35, '\p{^Is_Category=po}', "");
Expect(0, 35, '\P{Is_Category=po}', "");
Expect(1, 35, '\P{^Is_Category=po}', "");
Expect(0, 32, '\p{Is_Category=po}', "");
Expect(1, 32, '\p{^Is_Category=po}', "");
Expect(1, 32, '\P{Is_Category=po}', "");
Expect(0, 32, '\P{^Is_Category=po}', "");
Expect(1, 35, '\p{Is_Category= _po}', "");
Expect(0, 35, '\p{^Is_Category= _po}', "");
Expect(0, 35, '\P{Is_Category= _po}', "");
Expect(1, 35, '\P{^Is_Category= _po}', "");
Expect(0, 32, '\p{Is_Category= _po}', "");
Expect(1, 32, '\p{^Is_Category= _po}', "");
Expect(1, 32, '\P{Is_Category= _po}', "");
Expect(0, 32, '\P{^Is_Category= _po}', "");
Error('\p{General_Category= :=SPACESeparator}');
Error('\P{General_Category= :=SPACESeparator}');
Expect(1, 32, '\p{General_Category=spaceseparator}', "");
Expect(0, 32, '\p{^General_Category=spaceseparator}', "");
Expect(0, 32, '\P{General_Category=spaceseparator}', "");
Expect(1, 32, '\P{^General_Category=spaceseparator}', "");
Expect(0, 31, '\p{General_Category=spaceseparator}', "");
Expect(1, 31, '\p{^General_Category=spaceseparator}', "");
Expect(1, 31, '\P{General_Category=spaceseparator}', "");
Expect(0, 31, '\P{^General_Category=spaceseparator}', "");
Expect(1, 32, '\p{General_Category=-SPACE	separator}', "");
Expect(0, 32, '\p{^General_Category=-SPACE	separator}', "");
Expect(0, 32, '\P{General_Category=-SPACE	separator}', "");
Expect(1, 32, '\P{^General_Category=-SPACE	separator}', "");
Expect(0, 31, '\p{General_Category=-SPACE	separator}', "");
Expect(1, 31, '\p{^General_Category=-SPACE	separator}', "");
Expect(1, 31, '\P{General_Category=-SPACE	separator}', "");
Expect(0, 31, '\P{^General_Category=-SPACE	separator}', "");
Error('\p{Gc=--Zs/a/}');
Error('\P{Gc=--Zs/a/}');
Expect(1, 32, '\p{Gc: zs}', "");
Expect(0, 32, '\p{^Gc: zs}', "");
Expect(0, 32, '\P{Gc: zs}', "");
Expect(1, 32, '\P{^Gc: zs}', "");
Expect(0, 31, '\p{Gc: zs}', "");
Expect(1, 31, '\p{^Gc: zs}', "");
Expect(1, 31, '\P{Gc: zs}', "");
Expect(0, 31, '\P{^Gc: zs}', "");
Expect(1, 32, '\p{Gc=-	Zs}', "");
Expect(0, 32, '\p{^Gc=-	Zs}', "");
Expect(0, 32, '\P{Gc=-	Zs}', "");
Expect(1, 32, '\P{^Gc=-	Zs}', "");
Expect(0, 31, '\p{Gc=-	Zs}', "");
Expect(1, 31, '\p{^Gc=-	Zs}', "");
Expect(1, 31, '\P{Gc=-	Zs}', "");
Expect(0, 31, '\P{^Gc=-	Zs}', "");
Error('\p{Category:	-SPACE_separator:=}');
Error('\P{Category:	-SPACE_separator:=}');
Expect(1, 32, '\p{Category: spaceseparator}', "");
Expect(0, 32, '\p{^Category: spaceseparator}', "");
Expect(0, 32, '\P{Category: spaceseparator}', "");
Expect(1, 32, '\P{^Category: spaceseparator}', "");
Expect(0, 31, '\p{Category: spaceseparator}', "");
Expect(1, 31, '\p{^Category: spaceseparator}', "");
Expect(1, 31, '\P{Category: spaceseparator}', "");
Expect(0, 31, '\P{^Category: spaceseparator}', "");
Expect(1, 32, '\p{Category:	  Space_Separator}', "");
Expect(0, 32, '\p{^Category:	  Space_Separator}', "");
Expect(0, 32, '\P{Category:	  Space_Separator}', "");
Expect(1, 32, '\P{^Category:	  Space_Separator}', "");
Expect(0, 31, '\p{Category:	  Space_Separator}', "");
Expect(1, 31, '\p{^Category:	  Space_Separator}', "");
Expect(1, 31, '\P{Category:	  Space_Separator}', "");
Expect(0, 31, '\P{^Category:	  Space_Separator}', "");
Error('\p{Is_General_Category=_:=ZS}');
Error('\P{Is_General_Category=_:=ZS}');
Expect(1, 32, '\p{Is_General_Category=zs}', "");
Expect(0, 32, '\p{^Is_General_Category=zs}', "");
Expect(0, 32, '\P{Is_General_Category=zs}', "");
Expect(1, 32, '\P{^Is_General_Category=zs}', "");
Expect(0, 31, '\p{Is_General_Category=zs}', "");
Expect(1, 31, '\p{^Is_General_Category=zs}', "");
Expect(1, 31, '\P{Is_General_Category=zs}', "");
Expect(0, 31, '\P{^Is_General_Category=zs}', "");
Expect(1, 32, '\p{Is_General_Category:  -ZS}', "");
Expect(0, 32, '\p{^Is_General_Category:  -ZS}', "");
Expect(0, 32, '\P{Is_General_Category:  -ZS}', "");
Expect(1, 32, '\P{^Is_General_Category:  -ZS}', "");
Expect(0, 31, '\p{Is_General_Category:  -ZS}', "");
Expect(1, 31, '\p{^Is_General_Category:  -ZS}', "");
Expect(1, 31, '\P{Is_General_Category:  -ZS}', "");
Expect(0, 31, '\P{^Is_General_Category:  -ZS}', "");
Error('\p{Is_Gc=-/a/SpaceSeparator}');
Error('\P{Is_Gc=-/a/SpaceSeparator}');
Expect(1, 32, '\p{Is_Gc=spaceseparator}', "");
Expect(0, 32, '\p{^Is_Gc=spaceseparator}', "");
Expect(0, 32, '\P{Is_Gc=spaceseparator}', "");
Expect(1, 32, '\P{^Is_Gc=spaceseparator}', "");
Expect(0, 31, '\p{Is_Gc=spaceseparator}', "");
Expect(1, 31, '\p{^Is_Gc=spaceseparator}', "");
Expect(1, 31, '\P{Is_Gc=spaceseparator}', "");
Expect(0, 31, '\P{^Is_Gc=spaceseparator}', "");
Expect(1, 32, '\p{Is_Gc= 	Space-SEPARATOR}', "");
Expect(0, 32, '\p{^Is_Gc= 	Space-SEPARATOR}', "");
Expect(0, 32, '\P{Is_Gc= 	Space-SEPARATOR}', "");
Expect(1, 32, '\P{^Is_Gc= 	Space-SEPARATOR}', "");
Expect(0, 31, '\p{Is_Gc= 	Space-SEPARATOR}', "");
Expect(1, 31, '\p{^Is_Gc= 	Space-SEPARATOR}', "");
Expect(1, 31, '\P{Is_Gc= 	Space-SEPARATOR}', "");
Expect(0, 31, '\P{^Is_Gc= 	Space-SEPARATOR}', "");
Error('\p{Is_Category=	-Zs:=}');
Error('\P{Is_Category=	-Zs:=}');
Expect(1, 32, '\p{Is_Category: zs}', "");
Expect(0, 32, '\p{^Is_Category: zs}', "");
Expect(0, 32, '\P{Is_Category: zs}', "");
Expect(1, 32, '\P{^Is_Category: zs}', "");
Expect(0, 31, '\p{Is_Category: zs}', "");
Expect(1, 31, '\p{^Is_Category: zs}', "");
Expect(1, 31, '\P{Is_Category: zs}', "");
Expect(0, 31, '\P{^Is_Category: zs}', "");
Expect(1, 32, '\p{Is_Category=-_Zs}', "");
Expect(0, 32, '\p{^Is_Category=-_Zs}', "");
Expect(0, 32, '\P{Is_Category=-_Zs}', "");
Expect(1, 32, '\P{^Is_Category=-_Zs}', "");
Expect(0, 31, '\p{Is_Category=-_Zs}', "");
Expect(1, 31, '\p{^Is_Category=-_Zs}', "");
Expect(1, 31, '\P{Is_Category=-_Zs}', "");
Expect(0, 31, '\P{^Is_Category=-_Zs}', "");
Error('\p{General_Category=/a/- other	NUMBER}');
Error('\P{General_Category=/a/- other	NUMBER}');
Expect(1, 179, '\p{General_Category=othernumber}', "");
Expect(0, 179, '\p{^General_Category=othernumber}', "");
Expect(0, 179, '\P{General_Category=othernumber}', "");
Expect(1, 179, '\P{^General_Category=othernumber}', "");
Expect(0, 177, '\p{General_Category=othernumber}', "");
Expect(1, 177, '\p{^General_Category=othernumber}', "");
Expect(1, 177, '\P{General_Category=othernumber}', "");
Expect(0, 177, '\P{^General_Category=othernumber}', "");
Expect(1, 179, '\p{General_Category= -Other-Number}', "");
Expect(0, 179, '\p{^General_Category= -Other-Number}', "");
Expect(0, 179, '\P{General_Category= -Other-Number}', "");
Expect(1, 179, '\P{^General_Category= -Other-Number}', "");
Expect(0, 177, '\p{General_Category= -Other-Number}', "");
Expect(1, 177, '\p{^General_Category= -Other-Number}', "");
Expect(1, 177, '\P{General_Category= -Other-Number}', "");
Expect(0, 177, '\P{^General_Category= -Other-Number}', "");
Error('\p{Gc=:=		No}');
Error('\P{Gc=:=		No}');
Expect(1, 179, '\p{Gc=no}', "");
Expect(0, 179, '\p{^Gc=no}', "");
Expect(0, 179, '\P{Gc=no}', "");
Expect(1, 179, '\P{^Gc=no}', "");
Expect(0, 177, '\p{Gc=no}', "");
Expect(1, 177, '\p{^Gc=no}', "");
Expect(1, 177, '\P{Gc=no}', "");
Expect(0, 177, '\P{^Gc=no}', "");
Expect(1, 179, '\p{Gc= -No}', "");
Expect(0, 179, '\p{^Gc= -No}', "");
Expect(0, 179, '\P{Gc= -No}', "");
Expect(1, 179, '\P{^Gc= -No}', "");
Expect(0, 177, '\p{Gc= -No}', "");
Expect(1, 177, '\p{^Gc= -No}', "");
Expect(1, 177, '\P{Gc= -No}', "");
Expect(0, 177, '\P{^Gc= -No}', "");
Error('\p{Category=-:=Other Number}');
Error('\P{Category=-:=Other Number}');
Expect(1, 179, '\p{Category=othernumber}', "");
Expect(0, 179, '\p{^Category=othernumber}', "");
Expect(0, 179, '\P{Category=othernumber}', "");
Expect(1, 179, '\P{^Category=othernumber}', "");
Expect(0, 177, '\p{Category=othernumber}', "");
Expect(1, 177, '\p{^Category=othernumber}', "");
Expect(1, 177, '\P{Category=othernumber}', "");
Expect(0, 177, '\P{^Category=othernumber}', "");
Expect(1, 179, '\p{Category=- other_Number}', "");
Expect(0, 179, '\p{^Category=- other_Number}', "");
Expect(0, 179, '\P{Category=- other_Number}', "");
Expect(1, 179, '\P{^Category=- other_Number}', "");
Expect(0, 177, '\p{Category=- other_Number}', "");
Expect(1, 177, '\p{^Category=- other_Number}', "");
Expect(1, 177, '\P{Category=- other_Number}', "");
Expect(0, 177, '\P{^Category=- other_Number}', "");
Error('\p{Is_General_Category= _no/a/}');
Error('\P{Is_General_Category= _no/a/}');
Expect(1, 179, '\p{Is_General_Category=no}', "");
Expect(0, 179, '\p{^Is_General_Category=no}', "");
Expect(0, 179, '\P{Is_General_Category=no}', "");
Expect(1, 179, '\P{^Is_General_Category=no}', "");
Expect(0, 177, '\p{Is_General_Category=no}', "");
Expect(1, 177, '\p{^Is_General_Category=no}', "");
Expect(1, 177, '\P{Is_General_Category=no}', "");
Expect(0, 177, '\P{^Is_General_Category=no}', "");
Expect(1, 179, '\p{Is_General_Category=-NO}', "");
Expect(0, 179, '\p{^Is_General_Category=-NO}', "");
Expect(0, 179, '\P{Is_General_Category=-NO}', "");
Expect(1, 179, '\P{^Is_General_Category=-NO}', "");
Expect(0, 177, '\p{Is_General_Category=-NO}', "");
Expect(1, 177, '\p{^Is_General_Category=-NO}', "");
Expect(1, 177, '\P{Is_General_Category=-NO}', "");
Expect(0, 177, '\P{^Is_General_Category=-NO}', "");
Error('\p{Is_Gc:	__other_Number:=}');
Error('\P{Is_Gc:	__other_Number:=}');
Expect(1, 179, '\p{Is_Gc=othernumber}', "");
Expect(0, 179, '\p{^Is_Gc=othernumber}', "");
Expect(0, 179, '\P{Is_Gc=othernumber}', "");
Expect(1, 179, '\P{^Is_Gc=othernumber}', "");
Expect(0, 177, '\p{Is_Gc=othernumber}', "");
Expect(1, 177, '\p{^Is_Gc=othernumber}', "");
Expect(1, 177, '\P{Is_Gc=othernumber}', "");
Expect(0, 177, '\P{^Is_Gc=othernumber}', "");
Expect(1, 179, '\p{Is_Gc:	-OtherNumber}', "");
Expect(0, 179, '\p{^Is_Gc:	-OtherNumber}', "");
Expect(0, 179, '\P{Is_Gc:	-OtherNumber}', "");
Expect(1, 179, '\P{^Is_Gc:	-OtherNumber}', "");
Expect(0, 177, '\p{Is_Gc:	-OtherNumber}', "");
Expect(1, 177, '\p{^Is_Gc:	-OtherNumber}', "");
Expect(1, 177, '\P{Is_Gc:	-OtherNumber}', "");
Expect(0, 177, '\P{^Is_Gc:	-OtherNumber}', "");
Error('\p{Is_Category=_no/a/}');
Error('\P{Is_Category=_no/a/}');
Expect(1, 179, '\p{Is_Category=no}', "");
Expect(0, 179, '\p{^Is_Category=no}', "");
Expect(0, 179, '\P{Is_Category=no}', "");
Expect(1, 179, '\P{^Is_Category=no}', "");
Expect(0, 177, '\p{Is_Category=no}', "");
Expect(1, 177, '\p{^Is_Category=no}', "");
Expect(1, 177, '\P{Is_Category=no}', "");
Expect(0, 177, '\P{^Is_Category=no}', "");
Expect(1, 179, '\p{Is_Category= -No}', "");
Expect(0, 179, '\p{^Is_Category= -No}', "");
Expect(0, 179, '\P{Is_Category= -No}', "");
Expect(1, 179, '\P{^Is_Category= -No}', "");
Expect(0, 177, '\p{Is_Category= -No}', "");
Expect(1, 177, '\p{^Is_Category= -No}', "");
Expect(1, 177, '\P{Is_Category= -No}', "");
Expect(0, 177, '\P{^Is_Category= -No}', "");
Error('\p{General_Category=-Mark/a/}');
Error('\P{General_Category=-Mark/a/}');
Expect(1, 879, '\p{General_Category=mark}', "");
Expect(0, 879, '\p{^General_Category=mark}', "");
Expect(0, 879, '\P{General_Category=mark}', "");
Expect(1, 879, '\P{^General_Category=mark}', "");
Expect(0, 767, '\p{General_Category=mark}', "");
Expect(1, 767, '\p{^General_Category=mark}', "");
Expect(1, 767, '\P{General_Category=mark}', "");
Expect(0, 767, '\P{^General_Category=mark}', "");
Expect(1, 879, '\p{General_Category:   		Mark}', "");
Expect(0, 879, '\p{^General_Category:   		Mark}', "");
Expect(0, 879, '\P{General_Category:   		Mark}', "");
Expect(1, 879, '\P{^General_Category:   		Mark}', "");
Expect(0, 767, '\p{General_Category:   		Mark}', "");
Expect(1, 767, '\p{^General_Category:   		Mark}', "");
Expect(1, 767, '\P{General_Category:   		Mark}', "");
Expect(0, 767, '\P{^General_Category:   		Mark}', "");
Error('\p{Gc: /a/m}');
Error('\P{Gc: /a/m}');
Expect(1, 879, '\p{Gc=m}', "");
Expect(0, 879, '\p{^Gc=m}', "");
Expect(0, 879, '\P{Gc=m}', "");
Expect(1, 879, '\P{^Gc=m}', "");
Expect(0, 767, '\p{Gc=m}', "");
Expect(1, 767, '\p{^Gc=m}', "");
Expect(1, 767, '\P{Gc=m}', "");
Expect(0, 767, '\P{^Gc=m}', "");
Expect(1, 879, '\p{Gc=-	M}', "");
Expect(0, 879, '\p{^Gc=-	M}', "");
Expect(0, 879, '\P{Gc=-	M}', "");
Expect(1, 879, '\P{^Gc=-	M}', "");
Expect(0, 767, '\p{Gc=-	M}', "");
Expect(1, 767, '\p{^Gc=-	M}', "");
Expect(1, 767, '\P{Gc=-	M}', "");
Expect(0, 767, '\P{^Gc=-	M}', "");
Error('\p{Category=-MARK:=}');
Error('\P{Category=-MARK:=}');
Expect(1, 879, '\p{Category=mark}', "");
Expect(0, 879, '\p{^Category=mark}', "");
Expect(0, 879, '\P{Category=mark}', "");
Expect(1, 879, '\P{^Category=mark}', "");
Expect(0, 767, '\p{Category=mark}', "");
Expect(1, 767, '\p{^Category=mark}', "");
Expect(1, 767, '\P{Category=mark}', "");
Expect(0, 767, '\P{^Category=mark}', "");
Expect(1, 879, '\p{Category=-_Mark}', "");
Expect(0, 879, '\p{^Category=-_Mark}', "");
Expect(0, 879, '\P{Category=-_Mark}', "");
Expect(1, 879, '\P{^Category=-_Mark}', "");
Expect(0, 767, '\p{Category=-_Mark}', "");
Expect(1, 767, '\p{^Category=-_Mark}', "");
Expect(1, 767, '\P{Category=-_Mark}', "");
Expect(0, 767, '\P{^Category=-_Mark}', "");
Error('\p{Is_General_Category=__M:=}');
Error('\P{Is_General_Category=__M:=}');
Expect(1, 879, '\p{Is_General_Category=m}', "");
Expect(0, 879, '\p{^Is_General_Category=m}', "");
Expect(0, 879, '\P{Is_General_Category=m}', "");
Expect(1, 879, '\P{^Is_General_Category=m}', "");
Expect(0, 767, '\p{Is_General_Category=m}', "");
Expect(1, 767, '\p{^Is_General_Category=m}', "");
Expect(1, 767, '\P{Is_General_Category=m}', "");
Expect(0, 767, '\P{^Is_General_Category=m}', "");
Expect(1, 879, '\p{Is_General_Category:	M}', "");
Expect(0, 879, '\p{^Is_General_Category:	M}', "");
Expect(0, 879, '\P{Is_General_Category:	M}', "");
Expect(1, 879, '\P{^Is_General_Category:	M}', "");
Expect(0, 767, '\p{Is_General_Category:	M}', "");
Expect(1, 767, '\p{^Is_General_Category:	M}', "");
Expect(1, 767, '\P{Is_General_Category:	M}', "");
Expect(0, 767, '\P{^Is_General_Category:	M}', "");
Error('\p{Is_Gc=	mark/a/}');
Error('\P{Is_Gc=	mark/a/}');
Expect(1, 879, '\p{Is_Gc=mark}', "");
Expect(0, 879, '\p{^Is_Gc=mark}', "");
Expect(0, 879, '\P{Is_Gc=mark}', "");
Expect(1, 879, '\P{^Is_Gc=mark}', "");
Expect(0, 767, '\p{Is_Gc=mark}', "");
Expect(1, 767, '\p{^Is_Gc=mark}', "");
Expect(1, 767, '\P{Is_Gc=mark}', "");
Expect(0, 767, '\P{^Is_Gc=mark}', "");
Expect(1, 879, '\p{Is_Gc=  mark}', "");
Expect(0, 879, '\p{^Is_Gc=  mark}', "");
Expect(0, 879, '\P{Is_Gc=  mark}', "");
Expect(1, 879, '\P{^Is_Gc=  mark}', "");
Expect(0, 767, '\p{Is_Gc=  mark}', "");
Expect(1, 767, '\p{^Is_Gc=  mark}', "");
Expect(1, 767, '\P{Is_Gc=  mark}', "");
Expect(0, 767, '\P{^Is_Gc=  mark}', "");
Error('\p{Is_Category=_M:=}');
Error('\P{Is_Category=_M:=}');
Expect(1, 879, '\p{Is_Category=m}', "");
Expect(0, 879, '\p{^Is_Category=m}', "");
Expect(0, 879, '\P{Is_Category=m}', "");
Expect(1, 879, '\P{^Is_Category=m}', "");
Expect(0, 767, '\p{Is_Category=m}', "");
Expect(1, 767, '\p{^Is_Category=m}', "");
Expect(1, 767, '\P{Is_Category=m}', "");
Expect(0, 767, '\P{^Is_Category=m}', "");
Expect(1, 879, '\p{Is_Category:  m}', "");
Expect(0, 879, '\p{^Is_Category:  m}', "");
Expect(0, 879, '\P{Is_Category:  m}', "");
Expect(1, 879, '\P{^Is_Category:  m}', "");
Expect(0, 767, '\p{Is_Category:  m}', "");
Expect(1, 767, '\p{^Is_Category:  m}', "");
Expect(1, 767, '\P{Is_Category:  m}', "");
Expect(0, 767, '\P{^Is_Category:  m}', "");
Error('\p{General_Category=	:=other}');
Error('\P{General_Category=	:=other}');
Expect(1, 31, '\p{General_Category:other}', "");
Expect(0, 31, '\p{^General_Category:other}', "");
Expect(0, 31, '\P{General_Category:other}', "");
Expect(1, 31, '\P{^General_Category:other}', "");
Expect(0, 126, '\p{General_Category:other}', "");
Expect(1, 126, '\p{^General_Category:other}', "");
Expect(1, 126, '\P{General_Category:other}', "");
Expect(0, 126, '\P{^General_Category:other}', "");
Expect(1, 31, '\p{General_Category= 	OTHER}', "");
Expect(0, 31, '\p{^General_Category= 	OTHER}', "");
Expect(0, 31, '\P{General_Category= 	OTHER}', "");
Expect(1, 31, '\P{^General_Category= 	OTHER}', "");
Expect(0, 126, '\p{General_Category= 	OTHER}', "");
Expect(1, 126, '\p{^General_Category= 	OTHER}', "");
Expect(1, 126, '\P{General_Category= 	OTHER}', "");
Expect(0, 126, '\P{^General_Category= 	OTHER}', "");
Error('\p{Gc=:= _c}');
Error('\P{Gc=:= _c}');
Expect(1, 31, '\p{Gc:	c}', "");
Expect(0, 31, '\p{^Gc:	c}', "");
Expect(0, 31, '\P{Gc:	c}', "");
Expect(1, 31, '\P{^Gc:	c}', "");
Expect(0, 126, '\p{Gc:	c}', "");
Expect(1, 126, '\p{^Gc:	c}', "");
Expect(1, 126, '\P{Gc:	c}', "");
Expect(0, 126, '\P{^Gc:	c}', "");
Expect(1, 31, '\p{Gc=__C}', "");
Expect(0, 31, '\p{^Gc=__C}', "");
Expect(0, 31, '\P{Gc=__C}', "");
Expect(1, 31, '\P{^Gc=__C}', "");
Expect(0, 126, '\p{Gc=__C}', "");
Expect(1, 126, '\p{^Gc=__C}', "");
Expect(1, 126, '\P{Gc=__C}', "");
Expect(0, 126, '\P{^Gc=__C}', "");
Error('\p{Category=:=  Other}');
Error('\P{Category=:=  Other}');
Expect(1, 31, '\p{Category=other}', "");
Expect(0, 31, '\p{^Category=other}', "");
Expect(0, 31, '\P{Category=other}', "");
Expect(1, 31, '\P{^Category=other}', "");
Expect(0, 126, '\p{Category=other}', "");
Expect(1, 126, '\p{^Category=other}', "");
Expect(1, 126, '\P{Category=other}', "");
Expect(0, 126, '\P{^Category=other}', "");
Expect(1, 31, '\p{Category=	-OTHER}', "");
Expect(0, 31, '\p{^Category=	-OTHER}', "");
Expect(0, 31, '\P{Category=	-OTHER}', "");
Expect(1, 31, '\P{^Category=	-OTHER}', "");
Expect(0, 126, '\p{Category=	-OTHER}', "");
Expect(1, 126, '\p{^Category=	-OTHER}', "");
Expect(1, 126, '\P{Category=	-OTHER}', "");
Expect(0, 126, '\P{^Category=	-OTHER}', "");
Error('\p{Is_General_Category=:= C}');
Error('\P{Is_General_Category=:= C}');
Expect(1, 31, '\p{Is_General_Category=c}', "");
Expect(0, 31, '\p{^Is_General_Category=c}', "");
Expect(0, 31, '\P{Is_General_Category=c}', "");
Expect(1, 31, '\P{^Is_General_Category=c}', "");
Expect(0, 126, '\p{Is_General_Category=c}', "");
Expect(1, 126, '\p{^Is_General_Category=c}', "");
Expect(1, 126, '\P{Is_General_Category=c}', "");
Expect(0, 126, '\P{^Is_General_Category=c}', "");
Expect(1, 31, '\p{Is_General_Category=--C}', "");
Expect(0, 31, '\p{^Is_General_Category=--C}', "");
Expect(0, 31, '\P{Is_General_Category=--C}', "");
Expect(1, 31, '\P{^Is_General_Category=--C}', "");
Expect(0, 126, '\p{Is_General_Category=--C}', "");
Expect(1, 126, '\p{^Is_General_Category=--C}', "");
Expect(1, 126, '\P{Is_General_Category=--C}', "");
Expect(0, 126, '\P{^Is_General_Category=--C}', "");
Error('\p{Is_Gc=		Other:=}');
Error('\P{Is_Gc=		Other:=}');
Expect(1, 31, '\p{Is_Gc=other}', "");
Expect(0, 31, '\p{^Is_Gc=other}', "");
Expect(0, 31, '\P{Is_Gc=other}', "");
Expect(1, 31, '\P{^Is_Gc=other}', "");
Expect(0, 126, '\p{Is_Gc=other}', "");
Expect(1, 126, '\p{^Is_Gc=other}', "");
Expect(1, 126, '\P{Is_Gc=other}', "");
Expect(0, 126, '\P{^Is_Gc=other}', "");
Expect(1, 31, '\p{Is_Gc=	Other}', "");
Expect(0, 31, '\p{^Is_Gc=	Other}', "");
Expect(0, 31, '\P{Is_Gc=	Other}', "");
Expect(1, 31, '\P{^Is_Gc=	Other}', "");
Expect(0, 126, '\p{Is_Gc=	Other}', "");
Expect(1, 126, '\p{^Is_Gc=	Other}', "");
Expect(1, 126, '\P{Is_Gc=	Other}', "");
Expect(0, 126, '\P{^Is_Gc=	Other}', "");
Error('\p{Is_Category=-/a/C}');
Error('\P{Is_Category=-/a/C}');
Expect(1, 31, '\p{Is_Category=c}', "");
Expect(0, 31, '\p{^Is_Category=c}', "");
Expect(0, 31, '\P{Is_Category=c}', "");
Expect(1, 31, '\P{^Is_Category=c}', "");
Expect(0, 126, '\p{Is_Category=c}', "");
Expect(1, 126, '\p{^Is_Category=c}', "");
Expect(1, 126, '\P{Is_Category=c}', "");
Expect(0, 126, '\P{^Is_Category=c}', "");
Expect(1, 31, '\p{Is_Category=--C}', "");
Expect(0, 31, '\p{^Is_Category=--C}', "");
Expect(0, 31, '\P{Is_Category=--C}', "");
Expect(1, 31, '\P{^Is_Category=--C}', "");
Expect(0, 126, '\p{Is_Category=--C}', "");
Expect(1, 126, '\p{^Is_Category=--C}', "");
Expect(1, 126, '\P{Is_Category=--C}', "");
Expect(0, 126, '\P{^Is_Category=--C}', "");
Error('\p{General_Category=:=EnclosingMARK}');
Error('\P{General_Category=:=EnclosingMARK}');
Expect(1, 1161, '\p{General_Category:	enclosingmark}', "");
Expect(0, 1161, '\p{^General_Category:	enclosingmark}', "");
Expect(0, 1161, '\P{General_Category:	enclosingmark}', "");
Expect(1, 1161, '\P{^General_Category:	enclosingmark}', "");
Expect(0, 1159, '\p{General_Category:	enclosingmark}', "");
Expect(1, 1159, '\p{^General_Category:	enclosingmark}', "");
Expect(1, 1159, '\P{General_Category:	enclosingmark}', "");
Expect(0, 1159, '\P{^General_Category:	enclosingmark}', "");
Expect(1, 1161, '\p{General_Category:   	-enclosing Mark}', "");
Expect(0, 1161, '\p{^General_Category:   	-enclosing Mark}', "");
Expect(0, 1161, '\P{General_Category:   	-enclosing Mark}', "");
Expect(1, 1161, '\P{^General_Category:   	-enclosing Mark}', "");
Expect(0, 1159, '\p{General_Category:   	-enclosing Mark}', "");
Expect(1, 1159, '\p{^General_Category:   	-enclosing Mark}', "");
Expect(1, 1159, '\P{General_Category:   	-enclosing Mark}', "");
Expect(0, 1159, '\P{^General_Category:   	-enclosing Mark}', "");
Error('\p{Gc:	:=		Me}');
Error('\P{Gc:	:=		Me}');
Expect(1, 1161, '\p{Gc=me}', "");
Expect(0, 1161, '\p{^Gc=me}', "");
Expect(0, 1161, '\P{Gc=me}', "");
Expect(1, 1161, '\P{^Gc=me}', "");
Expect(0, 1159, '\p{Gc=me}', "");
Expect(1, 1159, '\p{^Gc=me}', "");
Expect(1, 1159, '\P{Gc=me}', "");
Expect(0, 1159, '\P{^Gc=me}', "");
Expect(1, 1161, '\p{Gc=_ me}', "");
Expect(0, 1161, '\p{^Gc=_ me}', "");
Expect(0, 1161, '\P{Gc=_ me}', "");
Expect(1, 1161, '\P{^Gc=_ me}', "");
Expect(0, 1159, '\p{Gc=_ me}', "");
Expect(1, 1159, '\p{^Gc=_ me}', "");
Expect(1, 1159, '\P{Gc=_ me}', "");
Expect(0, 1159, '\P{^Gc=_ me}', "");
Error('\p{Category=-	ENCLOSING/a/MARK}');
Error('\P{Category=-	ENCLOSING/a/MARK}');
Expect(1, 1161, '\p{Category=enclosingmark}', "");
Expect(0, 1161, '\p{^Category=enclosingmark}', "");
Expect(0, 1161, '\P{Category=enclosingmark}', "");
Expect(1, 1161, '\P{^Category=enclosingmark}', "");
Expect(0, 1159, '\p{Category=enclosingmark}', "");
Expect(1, 1159, '\p{^Category=enclosingmark}', "");
Expect(1, 1159, '\P{Category=enclosingmark}', "");
Expect(0, 1159, '\P{^Category=enclosingmark}', "");
Expect(1, 1161, '\p{Category: 	Enclosing_MARK}', "");
Expect(0, 1161, '\p{^Category: 	Enclosing_MARK}', "");
Expect(0, 1161, '\P{Category: 	Enclosing_MARK}', "");
Expect(1, 1161, '\P{^Category: 	Enclosing_MARK}', "");
Expect(0, 1159, '\p{Category: 	Enclosing_MARK}', "");
Expect(1, 1159, '\p{^Category: 	Enclosing_MARK}', "");
Expect(1, 1159, '\P{Category: 	Enclosing_MARK}', "");
Expect(0, 1159, '\P{^Category: 	Enclosing_MARK}', "");
Error('\p{Is_General_Category=/a/	me}');
Error('\P{Is_General_Category=/a/	me}');
Expect(1, 1161, '\p{Is_General_Category=me}', "");
Expect(0, 1161, '\p{^Is_General_Category=me}', "");
Expect(0, 1161, '\P{Is_General_Category=me}', "");
Expect(1, 1161, '\P{^Is_General_Category=me}', "");
Expect(0, 1159, '\p{Is_General_Category=me}', "");
Expect(1, 1159, '\p{^Is_General_Category=me}', "");
Expect(1, 1159, '\P{Is_General_Category=me}', "");
Expect(0, 1159, '\P{^Is_General_Category=me}', "");
Expect(1, 1161, '\p{Is_General_Category=-Me}', "");
Expect(0, 1161, '\p{^Is_General_Category=-Me}', "");
Expect(0, 1161, '\P{Is_General_Category=-Me}', "");
Expect(1, 1161, '\P{^Is_General_Category=-Me}', "");
Expect(0, 1159, '\p{Is_General_Category=-Me}', "");
Expect(1, 1159, '\p{^Is_General_Category=-Me}', "");
Expect(1, 1159, '\P{Is_General_Category=-Me}', "");
Expect(0, 1159, '\P{^Is_General_Category=-Me}', "");
Error('\p{Is_Gc=	Enclosing-Mark/a/}');
Error('\P{Is_Gc=	Enclosing-Mark/a/}');
Expect(1, 1161, '\p{Is_Gc=enclosingmark}', "");
Expect(0, 1161, '\p{^Is_Gc=enclosingmark}', "");
Expect(0, 1161, '\P{Is_Gc=enclosingmark}', "");
Expect(1, 1161, '\P{^Is_Gc=enclosingmark}', "");
Expect(0, 1159, '\p{Is_Gc=enclosingmark}', "");
Expect(1, 1159, '\p{^Is_Gc=enclosingmark}', "");
Expect(1, 1159, '\P{Is_Gc=enclosingmark}', "");
Expect(0, 1159, '\P{^Is_Gc=enclosingmark}', "");
Expect(1, 1161, '\p{Is_Gc=_EnclosingMark}', "");
Expect(0, 1161, '\p{^Is_Gc=_EnclosingMark}', "");
Expect(0, 1161, '\P{Is_Gc=_EnclosingMark}', "");
Expect(1, 1161, '\P{^Is_Gc=_EnclosingMark}', "");
Expect(0, 1159, '\p{Is_Gc=_EnclosingMark}', "");
Expect(1, 1159, '\p{^Is_Gc=_EnclosingMark}', "");
Expect(1, 1159, '\P{Is_Gc=_EnclosingMark}', "");
Expect(0, 1159, '\P{^Is_Gc=_EnclosingMark}', "");
Error('\p{Is_Category: :=-Me}');
Error('\P{Is_Category: :=-Me}');
Expect(1, 1161, '\p{Is_Category=me}', "");
Expect(0, 1161, '\p{^Is_Category=me}', "");
Expect(0, 1161, '\P{Is_Category=me}', "");
Expect(1, 1161, '\P{^Is_Category=me}', "");
Expect(0, 1159, '\p{Is_Category=me}', "");
Expect(1, 1159, '\p{^Is_Category=me}', "");
Expect(1, 1159, '\P{Is_Category=me}', "");
Expect(0, 1159, '\P{^Is_Category=me}', "");
Expect(1, 1161, '\p{Is_Category=-ME}', "");
Expect(0, 1161, '\p{^Is_Category=-ME}', "");
Expect(0, 1161, '\P{Is_Category=-ME}', "");
Expect(1, 1161, '\P{^Is_Category=-ME}', "");
Expect(0, 1159, '\p{Is_Category=-ME}', "");
Expect(1, 1159, '\p{^Is_Category=-ME}', "");
Expect(1, 1159, '\P{Is_Category=-ME}', "");
Expect(0, 1159, '\P{^Is_Category=-ME}', "");
Error('\p{General_Category=_:=Titlecase	LETTER}');
Error('\P{General_Category=_:=Titlecase	LETTER}');
Expect(1, 453, '\p{General_Category=titlecaseletter}', "");
Expect(0, 453, '\p{^General_Category=titlecaseletter}', "");
Expect(0, 453, '\P{General_Category=titlecaseletter}', "");
Expect(1, 453, '\P{^General_Category=titlecaseletter}', "");
Expect(0, 452, '\p{General_Category=titlecaseletter}', "");
Expect(1, 452, '\p{^General_Category=titlecaseletter}', "");
Expect(1, 452, '\P{General_Category=titlecaseletter}', "");
Expect(0, 452, '\P{^General_Category=titlecaseletter}', "");
Expect(1, 453, '\p{General_Category=--titlecaseLetter}', "");
Expect(0, 453, '\p{^General_Category=--titlecaseLetter}', "");
Expect(0, 453, '\P{General_Category=--titlecaseLetter}', "");
Expect(1, 453, '\P{^General_Category=--titlecaseLetter}', "");
Expect(0, 452, '\p{General_Category=--titlecaseLetter}', "");
Expect(1, 452, '\p{^General_Category=--titlecaseLetter}', "");
Expect(1, 452, '\P{General_Category=--titlecaseLetter}', "");
Expect(0, 452, '\P{^General_Category=--titlecaseLetter}', "");
Error('\p{Gc=_:=LT}');
Error('\P{Gc=_:=LT}');
Expect(1, 453, '\p{Gc=lt}', "");
Expect(0, 453, '\p{^Gc=lt}', "");
Expect(0, 453, '\P{Gc=lt}', "");
Expect(1, 453, '\P{^Gc=lt}', "");
Expect(0, 452, '\p{Gc=lt}', "");
Expect(1, 452, '\p{^Gc=lt}', "");
Expect(1, 452, '\P{Gc=lt}', "");
Expect(0, 452, '\P{^Gc=lt}', "");
Expect(1, 453, '\p{Gc=	_LT}', "");
Expect(0, 453, '\p{^Gc=	_LT}', "");
Expect(0, 453, '\P{Gc=	_LT}', "");
Expect(1, 453, '\P{^Gc=	_LT}', "");
Expect(0, 452, '\p{Gc=	_LT}', "");
Expect(1, 452, '\p{^Gc=	_LT}', "");
Expect(1, 452, '\P{Gc=	_LT}', "");
Expect(0, 452, '\P{^Gc=	_LT}', "");
Error('\p{Category=- titlecase:=Letter}');
Error('\P{Category=- titlecase:=Letter}');
Expect(1, 453, '\p{Category:	titlecaseletter}', "");
Expect(0, 453, '\p{^Category:	titlecaseletter}', "");
Expect(0, 453, '\P{Category:	titlecaseletter}', "");
Expect(1, 453, '\P{^Category:	titlecaseletter}', "");
Expect(0, 452, '\p{Category:	titlecaseletter}', "");
Expect(1, 452, '\p{^Category:	titlecaseletter}', "");
Expect(1, 452, '\P{Category:	titlecaseletter}', "");
Expect(0, 452, '\P{^Category:	titlecaseletter}', "");
Expect(1, 453, '\p{Category:  TITLECASELetter}', "");
Expect(0, 453, '\p{^Category:  TITLECASELetter}', "");
Expect(0, 453, '\P{Category:  TITLECASELetter}', "");
Expect(1, 453, '\P{^Category:  TITLECASELetter}', "");
Expect(0, 452, '\p{Category:  TITLECASELetter}', "");
Expect(1, 452, '\p{^Category:  TITLECASELetter}', "");
Expect(1, 452, '\P{Category:  TITLECASELetter}', "");
Expect(0, 452, '\P{^Category:  TITLECASELetter}', "");
Error('\p{Is_General_Category=:=_LT}');
Error('\P{Is_General_Category=:=_LT}');
Expect(1, 453, '\p{Is_General_Category=lt}', "");
Expect(0, 453, '\p{^Is_General_Category=lt}', "");
Expect(0, 453, '\P{Is_General_Category=lt}', "");
Expect(1, 453, '\P{^Is_General_Category=lt}', "");
Expect(0, 452, '\p{Is_General_Category=lt}', "");
Expect(1, 452, '\p{^Is_General_Category=lt}', "");
Expect(1, 452, '\P{Is_General_Category=lt}', "");
Expect(0, 452, '\P{^Is_General_Category=lt}', "");
Expect(1, 453, '\p{Is_General_Category=_Lt}', "");
Expect(0, 453, '\p{^Is_General_Category=_Lt}', "");
Expect(0, 453, '\P{Is_General_Category=_Lt}', "");
Expect(1, 453, '\P{^Is_General_Category=_Lt}', "");
Expect(0, 452, '\p{Is_General_Category=_Lt}', "");
Expect(1, 452, '\p{^Is_General_Category=_Lt}', "");
Expect(1, 452, '\P{Is_General_Category=_Lt}', "");
Expect(0, 452, '\P{^Is_General_Category=_Lt}', "");
Error('\p{Is_Gc:  -Titlecase/a/LETTER}');
Error('\P{Is_Gc:  -Titlecase/a/LETTER}');
Expect(1, 453, '\p{Is_Gc=titlecaseletter}', "");
Expect(0, 453, '\p{^Is_Gc=titlecaseletter}', "");
Expect(0, 453, '\P{Is_Gc=titlecaseletter}', "");
Expect(1, 453, '\P{^Is_Gc=titlecaseletter}', "");
Expect(0, 452, '\p{Is_Gc=titlecaseletter}', "");
Expect(1, 452, '\p{^Is_Gc=titlecaseletter}', "");
Expect(1, 452, '\P{Is_Gc=titlecaseletter}', "");
Expect(0, 452, '\P{^Is_Gc=titlecaseletter}', "");
Expect(1, 453, '\p{Is_Gc= TITLECASE letter}', "");
Expect(0, 453, '\p{^Is_Gc= TITLECASE letter}', "");
Expect(0, 453, '\P{Is_Gc= TITLECASE letter}', "");
Expect(1, 453, '\P{^Is_Gc= TITLECASE letter}', "");
Expect(0, 452, '\p{Is_Gc= TITLECASE letter}', "");
Expect(1, 452, '\p{^Is_Gc= TITLECASE letter}', "");
Expect(1, 452, '\P{Is_Gc= TITLECASE letter}', "");
Expect(0, 452, '\P{^Is_Gc= TITLECASE letter}', "");
Error('\p{Is_Category=/a/ 	lt}');
Error('\P{Is_Category=/a/ 	lt}');
Expect(1, 453, '\p{Is_Category=lt}', "");
Expect(0, 453, '\p{^Is_Category=lt}', "");
Expect(0, 453, '\P{Is_Category=lt}', "");
Expect(1, 453, '\P{^Is_Category=lt}', "");
Expect(0, 452, '\p{Is_Category=lt}', "");
Expect(1, 452, '\p{^Is_Category=lt}', "");
Expect(1, 452, '\P{Is_Category=lt}', "");
Expect(0, 452, '\P{^Is_Category=lt}', "");
Expect(1, 453, '\p{Is_Category=_Lt}', "");
Expect(0, 453, '\p{^Is_Category=_Lt}', "");
Expect(0, 453, '\P{Is_Category=_Lt}', "");
Expect(1, 453, '\P{^Is_Category=_Lt}', "");
Expect(0, 452, '\p{Is_Category=_Lt}', "");
Expect(1, 452, '\p{^Is_Category=_Lt}', "");
Expect(1, 452, '\P{Is_Category=_Lt}', "");
Expect(0, 452, '\P{^Is_Category=_Lt}', "");
Error('\p{General_Category=_/a/PUNCTUATION}');
Error('\P{General_Category=_/a/PUNCTUATION}');
Expect(1, 35, '\p{General_Category=punctuation}', "");
Expect(0, 35, '\p{^General_Category=punctuation}', "");
Expect(0, 35, '\P{General_Category=punctuation}', "");
Expect(1, 35, '\P{^General_Category=punctuation}', "");
Expect(0, 32, '\p{General_Category=punctuation}', "");
Expect(1, 32, '\p{^General_Category=punctuation}', "");
Expect(1, 32, '\P{General_Category=punctuation}', "");
Expect(0, 32, '\P{^General_Category=punctuation}', "");
Expect(1, 35, '\p{General_Category= Punctuation}', "");
Expect(0, 35, '\p{^General_Category= Punctuation}', "");
Expect(0, 35, '\P{General_Category= Punctuation}', "");
Expect(1, 35, '\P{^General_Category= Punctuation}', "");
Expect(0, 32, '\p{General_Category= Punctuation}', "");
Expect(1, 32, '\p{^General_Category= Punctuation}', "");
Expect(1, 32, '\P{General_Category= Punctuation}', "");
Expect(0, 32, '\P{^General_Category= Punctuation}', "");
Error('\p{Gc=	P:=}');
Error('\P{Gc=	P:=}');
Expect(1, 35, '\p{Gc=p}', "");
Expect(0, 35, '\p{^Gc=p}', "");
Expect(0, 35, '\P{Gc=p}', "");
Expect(1, 35, '\P{^Gc=p}', "");
Expect(0, 32, '\p{Gc=p}', "");
Expect(1, 32, '\p{^Gc=p}', "");
Expect(1, 32, '\P{Gc=p}', "");
Expect(0, 32, '\P{^Gc=p}', "");
Expect(1, 35, '\p{Gc: _	P}', "");
Expect(0, 35, '\p{^Gc: _	P}', "");
Expect(0, 35, '\P{Gc: _	P}', "");
Expect(1, 35, '\P{^Gc: _	P}', "");
Expect(0, 32, '\p{Gc: _	P}', "");
Expect(1, 32, '\p{^Gc: _	P}', "");
Expect(1, 32, '\P{Gc: _	P}', "");
Expect(0, 32, '\P{^Gc: _	P}', "");
Error('\p{Category=/a/	_PUNCT}');
Error('\P{Category=/a/	_PUNCT}');
Expect(1, 35, '\p{Category=punct}', "");
Expect(0, 35, '\p{^Category=punct}', "");
Expect(0, 35, '\P{Category=punct}', "");
Expect(1, 35, '\P{^Category=punct}', "");
Expect(0, 32, '\p{Category=punct}', "");
Expect(1, 32, '\p{^Category=punct}', "");
Expect(1, 32, '\P{Category=punct}', "");
Expect(0, 32, '\P{^Category=punct}', "");
Expect(1, 35, '\p{Category:    _PUNCT}', "");
Expect(0, 35, '\p{^Category:    _PUNCT}', "");
Expect(0, 35, '\P{Category:    _PUNCT}', "");
Expect(1, 35, '\P{^Category:    _PUNCT}', "");
Expect(0, 32, '\p{Category:    _PUNCT}', "");
Expect(1, 32, '\p{^Category:    _PUNCT}', "");
Expect(1, 32, '\P{Category:    _PUNCT}', "");
Expect(0, 32, '\P{^Category:    _PUNCT}', "");
Error('\p{Is_General_Category=_/a/Punctuation}');
Error('\P{Is_General_Category=_/a/Punctuation}');
Expect(1, 35, '\p{Is_General_Category=punctuation}', "");
Expect(0, 35, '\p{^Is_General_Category=punctuation}', "");
Expect(0, 35, '\P{Is_General_Category=punctuation}', "");
Expect(1, 35, '\P{^Is_General_Category=punctuation}', "");
Expect(0, 32, '\p{Is_General_Category=punctuation}', "");
Expect(1, 32, '\p{^Is_General_Category=punctuation}', "");
Expect(1, 32, '\P{Is_General_Category=punctuation}', "");
Expect(0, 32, '\P{^Is_General_Category=punctuation}', "");
Expect(1, 35, '\p{Is_General_Category= -Punctuation}', "");
Expect(0, 35, '\p{^Is_General_Category= -Punctuation}', "");
Expect(0, 35, '\P{Is_General_Category= -Punctuation}', "");
Expect(1, 35, '\P{^Is_General_Category= -Punctuation}', "");
Expect(0, 32, '\p{Is_General_Category= -Punctuation}', "");
Expect(1, 32, '\p{^Is_General_Category= -Punctuation}', "");
Expect(1, 32, '\P{Is_General_Category= -Punctuation}', "");
Expect(0, 32, '\P{^Is_General_Category= -Punctuation}', "");
Error('\p{Is_Gc= /a/P}');
Error('\P{Is_Gc= /a/P}');
Expect(1, 35, '\p{Is_Gc:   p}', "");
Expect(0, 35, '\p{^Is_Gc:   p}', "");
Expect(0, 35, '\P{Is_Gc:   p}', "");
Expect(1, 35, '\P{^Is_Gc:   p}', "");
Expect(0, 32, '\p{Is_Gc:   p}', "");
Expect(1, 32, '\p{^Is_Gc:   p}', "");
Expect(1, 32, '\P{Is_Gc:   p}', "");
Expect(0, 32, '\P{^Is_Gc:   p}', "");
Expect(1, 35, '\p{Is_Gc=__P}', "");
Expect(0, 35, '\p{^Is_Gc=__P}', "");
Expect(0, 35, '\P{Is_Gc=__P}', "");
Expect(1, 35, '\P{^Is_Gc=__P}', "");
Expect(0, 32, '\p{Is_Gc=__P}', "");
Expect(1, 32, '\p{^Is_Gc=__P}', "");
Expect(1, 32, '\P{Is_Gc=__P}', "");
Expect(0, 32, '\P{^Is_Gc=__P}', "");
Error('\p{Is_Category=/a/-punct}');
Error('\P{Is_Category=/a/-punct}');
Expect(1, 35, '\p{Is_Category=punct}', "");
Expect(0, 35, '\p{^Is_Category=punct}', "");
Expect(0, 35, '\P{Is_Category=punct}', "");
Expect(1, 35, '\P{^Is_Category=punct}', "");
Expect(0, 32, '\p{Is_Category=punct}', "");
Expect(1, 32, '\p{^Is_Category=punct}', "");
Expect(1, 32, '\P{Is_Category=punct}', "");
Expect(0, 32, '\P{^Is_Category=punct}', "");
Expect(1, 35, '\p{Is_Category=		PUNCT}', "");
Expect(0, 35, '\p{^Is_Category=		PUNCT}', "");
Expect(0, 35, '\P{Is_Category=		PUNCT}', "");
Expect(1, 35, '\P{^Is_Category=		PUNCT}', "");
Expect(0, 32, '\p{Is_Category=		PUNCT}', "");
Expect(1, 32, '\p{^Is_Category=		PUNCT}', "");
Expect(1, 32, '\P{Is_Category=		PUNCT}', "");
Expect(0, 32, '\P{^Is_Category=		PUNCT}', "");
Error('\p{General_Category=-/a/UPPERCASE-Letter}');
Error('\P{General_Category=-/a/UPPERCASE-Letter}');
Expect(1, 90, '\p{General_Category=uppercaseletter}', "");
Expect(0, 90, '\p{^General_Category=uppercaseletter}', "");
Expect(0, 90, '\P{General_Category=uppercaseletter}', "");
Expect(1, 90, '\P{^General_Category=uppercaseletter}', "");
Expect(0, 64, '\p{General_Category=uppercaseletter}', "");
Expect(1, 64, '\p{^General_Category=uppercaseletter}', "");
Expect(1, 64, '\P{General_Category=uppercaseletter}', "");
Expect(0, 64, '\P{^General_Category=uppercaseletter}', "");
Expect(1, 90, '\p{General_Category=	-UPPERCASE-letter}', "");
Expect(0, 90, '\p{^General_Category=	-UPPERCASE-letter}', "");
Expect(0, 90, '\P{General_Category=	-UPPERCASE-letter}', "");
Expect(1, 90, '\P{^General_Category=	-UPPERCASE-letter}', "");
Expect(0, 64, '\p{General_Category=	-UPPERCASE-letter}', "");
Expect(1, 64, '\p{^General_Category=	-UPPERCASE-letter}', "");
Expect(1, 64, '\P{General_Category=	-UPPERCASE-letter}', "");
Expect(0, 64, '\P{^General_Category=	-UPPERCASE-letter}', "");
Error('\p{Gc=	:=LU}');
Error('\P{Gc=	:=LU}');
Expect(1, 90, '\p{Gc=lu}', "");
Expect(0, 90, '\p{^Gc=lu}', "");
Expect(0, 90, '\P{Gc=lu}', "");
Expect(1, 90, '\P{^Gc=lu}', "");
Expect(0, 64, '\p{Gc=lu}', "");
Expect(1, 64, '\p{^Gc=lu}', "");
Expect(1, 64, '\P{Gc=lu}', "");
Expect(0, 64, '\P{^Gc=lu}', "");
Expect(1, 90, '\p{Gc=	 lu}', "");
Expect(0, 90, '\p{^Gc=	 lu}', "");
Expect(0, 90, '\P{Gc=	 lu}', "");
Expect(1, 90, '\P{^Gc=	 lu}', "");
Expect(0, 64, '\p{Gc=	 lu}', "");
Expect(1, 64, '\p{^Gc=	 lu}', "");
Expect(1, 64, '\P{Gc=	 lu}', "");
Expect(0, 64, '\P{^Gc=	 lu}', "");
Error('\p{Category= UPPERCASE:=letter}');
Error('\P{Category= UPPERCASE:=letter}');
Expect(1, 90, '\p{Category=uppercaseletter}', "");
Expect(0, 90, '\p{^Category=uppercaseletter}', "");
Expect(0, 90, '\P{Category=uppercaseletter}', "");
Expect(1, 90, '\P{^Category=uppercaseletter}', "");
Expect(0, 64, '\p{Category=uppercaseletter}', "");
Expect(1, 64, '\p{^Category=uppercaseletter}', "");
Expect(1, 64, '\P{Category=uppercaseletter}', "");
Expect(0, 64, '\P{^Category=uppercaseletter}', "");
Expect(1, 90, '\p{Category=	uppercase LETTER}', "");
Expect(0, 90, '\p{^Category=	uppercase LETTER}', "");
Expect(0, 90, '\P{Category=	uppercase LETTER}', "");
Expect(1, 90, '\P{^Category=	uppercase LETTER}', "");
Expect(0, 64, '\p{Category=	uppercase LETTER}', "");
Expect(1, 64, '\p{^Category=	uppercase LETTER}', "");
Expect(1, 64, '\P{Category=	uppercase LETTER}', "");
Expect(0, 64, '\P{^Category=	uppercase LETTER}', "");
Error('\p{Is_General_Category:   :=-Lu}');
Error('\P{Is_General_Category:   :=-Lu}');
Expect(1, 90, '\p{Is_General_Category=lu}', "");
Expect(0, 90, '\p{^Is_General_Category=lu}', "");
Expect(0, 90, '\P{Is_General_Category=lu}', "");
Expect(1, 90, '\P{^Is_General_Category=lu}', "");
Expect(0, 64, '\p{Is_General_Category=lu}', "");
Expect(1, 64, '\p{^Is_General_Category=lu}', "");
Expect(1, 64, '\P{Is_General_Category=lu}', "");
Expect(0, 64, '\P{^Is_General_Category=lu}', "");
Expect(1, 90, '\p{Is_General_Category=  Lu}', "");
Expect(0, 90, '\p{^Is_General_Category=  Lu}', "");
Expect(0, 90, '\P{Is_General_Category=  Lu}', "");
Expect(1, 90, '\P{^Is_General_Category=  Lu}', "");
Expect(0, 64, '\p{Is_General_Category=  Lu}', "");
Expect(1, 64, '\p{^Is_General_Category=  Lu}', "");
Expect(1, 64, '\P{Is_General_Category=  Lu}', "");
Expect(0, 64, '\P{^Is_General_Category=  Lu}', "");
Error('\p{Is_Gc=/a/  Uppercase Letter}');
Error('\P{Is_Gc=/a/  Uppercase Letter}');
Expect(1, 90, '\p{Is_Gc=uppercaseletter}', "");
Expect(0, 90, '\p{^Is_Gc=uppercaseletter}', "");
Expect(0, 90, '\P{Is_Gc=uppercaseletter}', "");
Expect(1, 90, '\P{^Is_Gc=uppercaseletter}', "");
Expect(0, 64, '\p{Is_Gc=uppercaseletter}', "");
Expect(1, 64, '\p{^Is_Gc=uppercaseletter}', "");
Expect(1, 64, '\P{Is_Gc=uppercaseletter}', "");
Expect(0, 64, '\P{^Is_Gc=uppercaseletter}', "");
Expect(1, 90, '\p{Is_Gc= 	Uppercase Letter}', "");
Expect(0, 90, '\p{^Is_Gc= 	Uppercase Letter}', "");
Expect(0, 90, '\P{Is_Gc= 	Uppercase Letter}', "");
Expect(1, 90, '\P{^Is_Gc= 	Uppercase Letter}', "");
Expect(0, 64, '\p{Is_Gc= 	Uppercase Letter}', "");
Expect(1, 64, '\p{^Is_Gc= 	Uppercase Letter}', "");
Expect(1, 64, '\P{Is_Gc= 	Uppercase Letter}', "");
Expect(0, 64, '\P{^Is_Gc= 	Uppercase Letter}', "");
Error('\p{Is_Category=/a/Lu}');
Error('\P{Is_Category=/a/Lu}');
Expect(1, 90, '\p{Is_Category=lu}', "");
Expect(0, 90, '\p{^Is_Category=lu}', "");
Expect(0, 90, '\P{Is_Category=lu}', "");
Expect(1, 90, '\P{^Is_Category=lu}', "");
Expect(0, 64, '\p{Is_Category=lu}', "");
Expect(1, 64, '\p{^Is_Category=lu}', "");
Expect(1, 64, '\P{Is_Category=lu}', "");
Expect(0, 64, '\P{^Is_Category=lu}', "");
Expect(1, 90, '\p{Is_Category= _Lu}', "");
Expect(0, 90, '\p{^Is_Category= _Lu}', "");
Expect(0, 90, '\P{Is_Category= _Lu}', "");
Expect(1, 90, '\P{^Is_Category= _Lu}', "");
Expect(0, 64, '\p{Is_Category= _Lu}', "");
Expect(1, 64, '\p{^Is_Category= _Lu}', "");
Expect(1, 64, '\P{Is_Category= _Lu}', "");
Expect(0, 64, '\P{^Is_Category= _Lu}', "");
Error('\p{General_Category=_-Number/a/}');
Error('\P{General_Category=_-Number/a/}');
Expect(1, 57, '\p{General_Category:	number}', "");
Expect(0, 57, '\p{^General_Category:	number}', "");
Expect(0, 57, '\P{General_Category:	number}', "");
Expect(1, 57, '\P{^General_Category:	number}', "");
Expect(0, 47, '\p{General_Category:	number}', "");
Expect(1, 47, '\p{^General_Category:	number}', "");
Expect(1, 47, '\P{General_Category:	number}', "");
Expect(0, 47, '\P{^General_Category:	number}', "");
Expect(1, 57, '\p{General_Category=-	NUMBER}', "");
Expect(0, 57, '\p{^General_Category=-	NUMBER}', "");
Expect(0, 57, '\P{General_Category=-	NUMBER}', "");
Expect(1, 57, '\P{^General_Category=-	NUMBER}', "");
Expect(0, 47, '\p{General_Category=-	NUMBER}', "");
Expect(1, 47, '\p{^General_Category=-	NUMBER}', "");
Expect(1, 47, '\P{General_Category=-	NUMBER}', "");
Expect(0, 47, '\P{^General_Category=-	NUMBER}', "");
Error('\p{Gc=	/a/N}');
Error('\P{Gc=	/a/N}');
Expect(1, 57, '\p{Gc=n}', "");
Expect(0, 57, '\p{^Gc=n}', "");
Expect(0, 57, '\P{Gc=n}', "");
Expect(1, 57, '\P{^Gc=n}', "");
Expect(0, 47, '\p{Gc=n}', "");
Expect(1, 47, '\p{^Gc=n}', "");
Expect(1, 47, '\P{Gc=n}', "");
Expect(0, 47, '\P{^Gc=n}', "");
Expect(1, 57, '\p{Gc=	-N}', "");
Expect(0, 57, '\p{^Gc=	-N}', "");
Expect(0, 57, '\P{Gc=	-N}', "");
Expect(1, 57, '\P{^Gc=	-N}', "");
Expect(0, 47, '\p{Gc=	-N}', "");
Expect(1, 47, '\p{^Gc=	-N}', "");
Expect(1, 47, '\P{Gc=	-N}', "");
Expect(0, 47, '\P{^Gc=	-N}', "");
Error('\p{Category=_:=NUMBER}');
Error('\P{Category=_:=NUMBER}');
Expect(1, 57, '\p{Category:   number}', "");
Expect(0, 57, '\p{^Category:   number}', "");
Expect(0, 57, '\P{Category:   number}', "");
Expect(1, 57, '\P{^Category:   number}', "");
Expect(0, 47, '\p{Category:   number}', "");
Expect(1, 47, '\p{^Category:   number}', "");
Expect(1, 47, '\P{Category:   number}', "");
Expect(0, 47, '\P{^Category:   number}', "");
Expect(1, 57, '\p{Category=-	Number}', "");
Expect(0, 57, '\p{^Category=-	Number}', "");
Expect(0, 57, '\P{Category=-	Number}', "");
Expect(1, 57, '\P{^Category=-	Number}', "");
Expect(0, 47, '\p{Category=-	Number}', "");
Expect(1, 47, '\p{^Category=-	Number}', "");
Expect(1, 47, '\P{Category=-	Number}', "");
Expect(0, 47, '\P{^Category=-	Number}', "");
Error('\p{Is_General_Category=:=-_N}');
Error('\P{Is_General_Category=:=-_N}');
Expect(1, 57, '\p{Is_General_Category=n}', "");
Expect(0, 57, '\p{^Is_General_Category=n}', "");
Expect(0, 57, '\P{Is_General_Category=n}', "");
Expect(1, 57, '\P{^Is_General_Category=n}', "");
Expect(0, 47, '\p{Is_General_Category=n}', "");
Expect(1, 47, '\p{^Is_General_Category=n}', "");
Expect(1, 47, '\P{Is_General_Category=n}', "");
Expect(0, 47, '\P{^Is_General_Category=n}', "");
Expect(1, 57, '\p{Is_General_Category:   --N}', "");
Expect(0, 57, '\p{^Is_General_Category:   --N}', "");
Expect(0, 57, '\P{Is_General_Category:   --N}', "");
Expect(1, 57, '\P{^Is_General_Category:   --N}', "");
Expect(0, 47, '\p{Is_General_Category:   --N}', "");
Expect(1, 47, '\p{^Is_General_Category:   --N}', "");
Expect(1, 47, '\P{Is_General_Category:   --N}', "");
Expect(0, 47, '\P{^Is_General_Category:   --N}', "");
Error('\p{Is_Gc= number:=}');
Error('\P{Is_Gc= number:=}');
Expect(1, 57, '\p{Is_Gc=number}', "");
Expect(0, 57, '\p{^Is_Gc=number}', "");
Expect(0, 57, '\P{Is_Gc=number}', "");
Expect(1, 57, '\P{^Is_Gc=number}', "");
Expect(0, 47, '\p{Is_Gc=number}', "");
Expect(1, 47, '\p{^Is_Gc=number}', "");
Expect(1, 47, '\P{Is_Gc=number}', "");
Expect(0, 47, '\P{^Is_Gc=number}', "");
Expect(1, 57, '\p{Is_Gc=_ Number}', "");
Expect(0, 57, '\p{^Is_Gc=_ Number}', "");
Expect(0, 57, '\P{Is_Gc=_ Number}', "");
Expect(1, 57, '\P{^Is_Gc=_ Number}', "");
Expect(0, 47, '\p{Is_Gc=_ Number}', "");
Expect(1, 47, '\p{^Is_Gc=_ Number}', "");
Expect(1, 47, '\P{Is_Gc=_ Number}', "");
Expect(0, 47, '\P{^Is_Gc=_ Number}', "");
Error('\p{Is_Category=-_n:=}');
Error('\P{Is_Category=-_n:=}');
Expect(1, 57, '\p{Is_Category=n}', "");
Expect(0, 57, '\p{^Is_Category=n}', "");
Expect(0, 57, '\P{Is_Category=n}', "");
Expect(1, 57, '\P{^Is_Category=n}', "");
Expect(0, 47, '\p{Is_Category=n}', "");
Expect(1, 47, '\p{^Is_Category=n}', "");
Expect(1, 47, '\P{Is_Category=n}', "");
Expect(0, 47, '\P{^Is_Category=n}', "");
Expect(1, 57, '\p{Is_Category=	-N}', "");
Expect(0, 57, '\p{^Is_Category=	-N}', "");
Expect(0, 57, '\P{Is_Category=	-N}', "");
Expect(1, 57, '\P{^Is_Category=	-N}', "");
Expect(0, 47, '\p{Is_Category=	-N}', "");
Expect(1, 47, '\p{^Is_Category=	-N}', "");
Expect(1, 47, '\P{Is_Category=	-N}', "");
Expect(0, 47, '\P{^Is_Category=	-N}', "");
Error('\p{General_Category= FINAL:=Punctuation}');
Error('\P{General_Category= FINAL:=Punctuation}');
Expect(1, 187, '\p{General_Category=finalpunctuation}', "");
Expect(0, 187, '\p{^General_Category=finalpunctuation}', "");
Expect(0, 187, '\P{General_Category=finalpunctuation}', "");
Expect(1, 187, '\P{^General_Category=finalpunctuation}', "");
Expect(0, 186, '\p{General_Category=finalpunctuation}', "");
Expect(1, 186, '\p{^General_Category=finalpunctuation}', "");
Expect(1, 186, '\P{General_Category=finalpunctuation}', "");
Expect(0, 186, '\P{^General_Category=finalpunctuation}', "");
Expect(1, 187, '\p{General_Category=	-Final	PUNCTUATION}', "");
Expect(0, 187, '\p{^General_Category=	-Final	PUNCTUATION}', "");
Expect(0, 187, '\P{General_Category=	-Final	PUNCTUATION}', "");
Expect(1, 187, '\P{^General_Category=	-Final	PUNCTUATION}', "");
Expect(0, 186, '\p{General_Category=	-Final	PUNCTUATION}', "");
Expect(1, 186, '\p{^General_Category=	-Final	PUNCTUATION}', "");
Expect(1, 186, '\P{General_Category=	-Final	PUNCTUATION}', "");
Expect(0, 186, '\P{^General_Category=	-Final	PUNCTUATION}', "");
Error('\p{Gc=- PF/a/}');
Error('\P{Gc=- PF/a/}');
Expect(1, 187, '\p{Gc=pf}', "");
Expect(0, 187, '\p{^Gc=pf}', "");
Expect(0, 187, '\P{Gc=pf}', "");
Expect(1, 187, '\P{^Gc=pf}', "");
Expect(0, 186, '\p{Gc=pf}', "");
Expect(1, 186, '\p{^Gc=pf}', "");
Expect(1, 186, '\P{Gc=pf}', "");
Expect(0, 186, '\P{^Gc=pf}', "");
Expect(1, 187, '\p{Gc: Pf}', "");
Expect(0, 187, '\p{^Gc: Pf}', "");
Expect(0, 187, '\P{Gc: Pf}', "");
Expect(1, 187, '\P{^Gc: Pf}', "");
Expect(0, 186, '\p{Gc: Pf}', "");
Expect(1, 186, '\p{^Gc: Pf}', "");
Expect(1, 186, '\P{Gc: Pf}', "");
Expect(0, 186, '\P{^Gc: Pf}', "");
Error('\p{Category=_final-punctuation/a/}');
Error('\P{Category=_final-punctuation/a/}');
Expect(1, 187, '\p{Category=finalpunctuation}', "");
Expect(0, 187, '\p{^Category=finalpunctuation}', "");
Expect(0, 187, '\P{Category=finalpunctuation}', "");
Expect(1, 187, '\P{^Category=finalpunctuation}', "");
Expect(0, 186, '\p{Category=finalpunctuation}', "");
Expect(1, 186, '\p{^Category=finalpunctuation}', "");
Expect(1, 186, '\P{Category=finalpunctuation}', "");
Expect(0, 186, '\P{^Category=finalpunctuation}', "");
Expect(1, 187, '\p{Category=	 FinalPUNCTUATION}', "");
Expect(0, 187, '\p{^Category=	 FinalPUNCTUATION}', "");
Expect(0, 187, '\P{Category=	 FinalPUNCTUATION}', "");
Expect(1, 187, '\P{^Category=	 FinalPUNCTUATION}', "");
Expect(0, 186, '\p{Category=	 FinalPUNCTUATION}', "");
Expect(1, 186, '\p{^Category=	 FinalPUNCTUATION}', "");
Expect(1, 186, '\P{Category=	 FinalPUNCTUATION}', "");
Expect(0, 186, '\P{^Category=	 FinalPUNCTUATION}', "");
Error('\p{Is_General_Category=	/a/Pf}');
Error('\P{Is_General_Category=	/a/Pf}');
Expect(1, 187, '\p{Is_General_Category=pf}', "");
Expect(0, 187, '\p{^Is_General_Category=pf}', "");
Expect(0, 187, '\P{Is_General_Category=pf}', "");
Expect(1, 187, '\P{^Is_General_Category=pf}', "");
Expect(0, 186, '\p{Is_General_Category=pf}', "");
Expect(1, 186, '\p{^Is_General_Category=pf}', "");
Expect(1, 186, '\P{Is_General_Category=pf}', "");
Expect(0, 186, '\P{^Is_General_Category=pf}', "");
Expect(1, 187, '\p{Is_General_Category: 	-Pf}', "");
Expect(0, 187, '\p{^Is_General_Category: 	-Pf}', "");
Expect(0, 187, '\P{Is_General_Category: 	-Pf}', "");
Expect(1, 187, '\P{^Is_General_Category: 	-Pf}', "");
Expect(0, 186, '\p{Is_General_Category: 	-Pf}', "");
Expect(1, 186, '\p{^Is_General_Category: 	-Pf}', "");
Expect(1, 186, '\P{Is_General_Category: 	-Pf}', "");
Expect(0, 186, '\P{^Is_General_Category: 	-Pf}', "");
Error('\p{Is_Gc=	:=Final-PUNCTUATION}');
Error('\P{Is_Gc=	:=Final-PUNCTUATION}');
Expect(1, 187, '\p{Is_Gc=finalpunctuation}', "");
Expect(0, 187, '\p{^Is_Gc=finalpunctuation}', "");
Expect(0, 187, '\P{Is_Gc=finalpunctuation}', "");
Expect(1, 187, '\P{^Is_Gc=finalpunctuation}', "");
Expect(0, 186, '\p{Is_Gc=finalpunctuation}', "");
Expect(1, 186, '\p{^Is_Gc=finalpunctuation}', "");
Expect(1, 186, '\P{Is_Gc=finalpunctuation}', "");
Expect(0, 186, '\P{^Is_Gc=finalpunctuation}', "");
Expect(1, 187, '\p{Is_Gc:  FINAL	punctuation}', "");
Expect(0, 187, '\p{^Is_Gc:  FINAL	punctuation}', "");
Expect(0, 187, '\P{Is_Gc:  FINAL	punctuation}', "");
Expect(1, 187, '\P{^Is_Gc:  FINAL	punctuation}', "");
Expect(0, 186, '\p{Is_Gc:  FINAL	punctuation}', "");
Expect(1, 186, '\p{^Is_Gc:  FINAL	punctuation}', "");
Expect(1, 186, '\P{Is_Gc:  FINAL	punctuation}', "");
Expect(0, 186, '\P{^Is_Gc:  FINAL	punctuation}', "");
Error('\p{Is_Category:    :=pf}');
Error('\P{Is_Category:    :=pf}');
Expect(1, 187, '\p{Is_Category=pf}', "");
Expect(0, 187, '\p{^Is_Category=pf}', "");
Expect(0, 187, '\P{Is_Category=pf}', "");
Expect(1, 187, '\P{^Is_Category=pf}', "");
Expect(0, 186, '\p{Is_Category=pf}', "");
Expect(1, 186, '\p{^Is_Category=pf}', "");
Expect(1, 186, '\P{Is_Category=pf}', "");
Expect(0, 186, '\P{^Is_Category=pf}', "");
Expect(1, 187, '\p{Is_Category=-Pf}', "");
Expect(0, 187, '\p{^Is_Category=-Pf}', "");
Expect(0, 187, '\P{Is_Category=-Pf}', "");
Expect(1, 187, '\P{^Is_Category=-Pf}', "");
Expect(0, 186, '\p{Is_Category=-Pf}', "");
Expect(1, 186, '\p{^Is_Category=-Pf}', "");
Expect(1, 186, '\P{Is_Category=-Pf}', "");
Expect(0, 186, '\P{^Is_Category=-Pf}', "");
Error('\p{General_Category=/a/UNASSIGNED}');
Error('\P{General_Category=/a/UNASSIGNED}');
Expect(1, 889, '\p{General_Category=unassigned}', "");
Expect(0, 889, '\p{^General_Category=unassigned}', "");
Expect(0, 889, '\P{General_Category=unassigned}', "");
Expect(1, 889, '\P{^General_Category=unassigned}', "");
Expect(0, 887, '\p{General_Category=unassigned}', "");
Expect(1, 887, '\p{^General_Category=unassigned}', "");
Expect(1, 887, '\P{General_Category=unassigned}', "");
Expect(0, 887, '\P{^General_Category=unassigned}', "");
Expect(1, 889, '\p{General_Category=-UNASSIGNED}', "");
Expect(0, 889, '\p{^General_Category=-UNASSIGNED}', "");
Expect(0, 889, '\P{General_Category=-UNASSIGNED}', "");
Expect(1, 889, '\P{^General_Category=-UNASSIGNED}', "");
Expect(0, 887, '\p{General_Category=-UNASSIGNED}', "");
Expect(1, 887, '\p{^General_Category=-UNASSIGNED}', "");
Expect(1, 887, '\P{General_Category=-UNASSIGNED}', "");
Expect(0, 887, '\P{^General_Category=-UNASSIGNED}', "");
Error('\p{Gc=_:=Cn}');
Error('\P{Gc=_:=Cn}');
Expect(1, 889, '\p{Gc=cn}', "");
Expect(0, 889, '\p{^Gc=cn}', "");
Expect(0, 889, '\P{Gc=cn}', "");
Expect(1, 889, '\P{^Gc=cn}', "");
Expect(0, 887, '\p{Gc=cn}', "");
Expect(1, 887, '\p{^Gc=cn}', "");
Expect(1, 887, '\P{Gc=cn}', "");
Expect(0, 887, '\P{^Gc=cn}', "");
Expect(1, 889, '\p{Gc= 	cn}', "");
Expect(0, 889, '\p{^Gc= 	cn}', "");
Expect(0, 889, '\P{Gc= 	cn}', "");
Expect(1, 889, '\P{^Gc= 	cn}', "");
Expect(0, 887, '\p{Gc= 	cn}', "");
Expect(1, 887, '\p{^Gc= 	cn}', "");
Expect(1, 887, '\P{Gc= 	cn}', "");
Expect(0, 887, '\P{^Gc= 	cn}', "");
Error('\p{Category= :=Unassigned}');
Error('\P{Category= :=Unassigned}');
Expect(1, 889, '\p{Category=unassigned}', "");
Expect(0, 889, '\p{^Category=unassigned}', "");
Expect(0, 889, '\P{Category=unassigned}', "");
Expect(1, 889, '\P{^Category=unassigned}', "");
Expect(0, 887, '\p{Category=unassigned}', "");
Expect(1, 887, '\p{^Category=unassigned}', "");
Expect(1, 887, '\P{Category=unassigned}', "");
Expect(0, 887, '\P{^Category=unassigned}', "");
Expect(1, 889, '\p{Category=  UNASSIGNED}', "");
Expect(0, 889, '\p{^Category=  UNASSIGNED}', "");
Expect(0, 889, '\P{Category=  UNASSIGNED}', "");
Expect(1, 889, '\P{^Category=  UNASSIGNED}', "");
Expect(0, 887, '\p{Category=  UNASSIGNED}', "");
Expect(1, 887, '\p{^Category=  UNASSIGNED}', "");
Expect(1, 887, '\P{Category=  UNASSIGNED}', "");
Expect(0, 887, '\P{^Category=  UNASSIGNED}', "");
Error('\p{Is_General_Category=-CN:=}');
Error('\P{Is_General_Category=-CN:=}');
Expect(1, 889, '\p{Is_General_Category=cn}', "");
Expect(0, 889, '\p{^Is_General_Category=cn}', "");
Expect(0, 889, '\P{Is_General_Category=cn}', "");
Expect(1, 889, '\P{^Is_General_Category=cn}', "");
Expect(0, 887, '\p{Is_General_Category=cn}', "");
Expect(1, 887, '\p{^Is_General_Category=cn}', "");
Expect(1, 887, '\P{Is_General_Category=cn}', "");
Expect(0, 887, '\P{^Is_General_Category=cn}', "");
Expect(1, 889, '\p{Is_General_Category= cn}', "");
Expect(0, 889, '\p{^Is_General_Category= cn}', "");
Expect(0, 889, '\P{Is_General_Category= cn}', "");
Expect(1, 889, '\P{^Is_General_Category= cn}', "");
Expect(0, 887, '\p{Is_General_Category= cn}', "");
Expect(1, 887, '\p{^Is_General_Category= cn}', "");
Expect(1, 887, '\P{Is_General_Category= cn}', "");
Expect(0, 887, '\P{^Is_General_Category= cn}', "");
Error('\p{Is_Gc=		Unassigned/a/}');
Error('\P{Is_Gc=		Unassigned/a/}');
Expect(1, 889, '\p{Is_Gc=unassigned}', "");
Expect(0, 889, '\p{^Is_Gc=unassigned}', "");
Expect(0, 889, '\P{Is_Gc=unassigned}', "");
Expect(1, 889, '\P{^Is_Gc=unassigned}', "");
Expect(0, 887, '\p{Is_Gc=unassigned}', "");
Expect(1, 887, '\p{^Is_Gc=unassigned}', "");
Expect(1, 887, '\P{Is_Gc=unassigned}', "");
Expect(0, 887, '\P{^Is_Gc=unassigned}', "");
Expect(1, 889, '\p{Is_Gc=__Unassigned}', "");
Expect(0, 889, '\p{^Is_Gc=__Unassigned}', "");
Expect(0, 889, '\P{Is_Gc=__Unassigned}', "");
Expect(1, 889, '\P{^Is_Gc=__Unassigned}', "");
Expect(0, 887, '\p{Is_Gc=__Unassigned}', "");
Expect(1, 887, '\p{^Is_Gc=__Unassigned}', "");
Expect(1, 887, '\P{Is_Gc=__Unassigned}', "");
Expect(0, 887, '\P{^Is_Gc=__Unassigned}', "");
Error('\p{Is_Category=_ CN/a/}');
Error('\P{Is_Category=_ CN/a/}');
Expect(1, 889, '\p{Is_Category:cn}', "");
Expect(0, 889, '\p{^Is_Category:cn}', "");
Expect(0, 889, '\P{Is_Category:cn}', "");
Expect(1, 889, '\P{^Is_Category:cn}', "");
Expect(0, 887, '\p{Is_Category:cn}', "");
Expect(1, 887, '\p{^Is_Category:cn}', "");
Expect(1, 887, '\P{Is_Category:cn}', "");
Expect(0, 887, '\P{^Is_Category:cn}', "");
Expect(1, 889, '\p{Is_Category=-Cn}', "");
Expect(0, 889, '\p{^Is_Category=-Cn}', "");
Expect(0, 889, '\P{Is_Category=-Cn}', "");
Expect(1, 889, '\P{^Is_Category=-Cn}', "");
Expect(0, 887, '\p{Is_Category=-Cn}', "");
Expect(1, 887, '\p{^Is_Category=-Cn}', "");
Expect(1, 887, '\P{Is_Category=-Cn}', "");
Expect(0, 887, '\P{^Is_Category=-Cn}', "");
Error('\p{General_Category=  Decimal	Number/a/}');
Error('\P{General_Category=  Decimal	Number/a/}');
Expect(1, 57, '\p{General_Category=decimalnumber}', "");
Expect(0, 57, '\p{^General_Category=decimalnumber}', "");
Expect(0, 57, '\P{General_Category=decimalnumber}', "");
Expect(1, 57, '\P{^General_Category=decimalnumber}', "");
Expect(0, 47, '\p{General_Category=decimalnumber}', "");
Expect(1, 47, '\p{^General_Category=decimalnumber}', "");
Expect(1, 47, '\P{General_Category=decimalnumber}', "");
Expect(0, 47, '\P{^General_Category=decimalnumber}', "");
Expect(1, 57, '\p{General_Category=-Decimal number}', "");
Expect(0, 57, '\p{^General_Category=-Decimal number}', "");
Expect(0, 57, '\P{General_Category=-Decimal number}', "");
Expect(1, 57, '\P{^General_Category=-Decimal number}', "");
Expect(0, 47, '\p{General_Category=-Decimal number}', "");
Expect(1, 47, '\p{^General_Category=-Decimal number}', "");
Expect(1, 47, '\P{General_Category=-Decimal number}', "");
Expect(0, 47, '\P{^General_Category=-Decimal number}', "");
Error('\p{Gc:/a/  Nd}');
Error('\P{Gc:/a/  Nd}');
Expect(1, 57, '\p{Gc=nd}', "");
Expect(0, 57, '\p{^Gc=nd}', "");
Expect(0, 57, '\P{Gc=nd}', "");
Expect(1, 57, '\P{^Gc=nd}', "");
Expect(0, 47, '\p{Gc=nd}', "");
Expect(1, 47, '\p{^Gc=nd}', "");
Expect(1, 47, '\P{Gc=nd}', "");
Expect(0, 47, '\P{^Gc=nd}', "");
Error('\p{Category=/a/digit}');
Error('\P{Category=/a/digit}');
Expect(1, 57, '\p{Category=digit}', "");
Expect(0, 57, '\p{^Category=digit}', "");
Expect(0, 57, '\P{Category=digit}', "");
Expect(1, 57, '\P{^Category=digit}', "");
Expect(0, 47, '\p{Category=digit}', "");
Expect(1, 47, '\p{^Category=digit}', "");
Expect(1, 47, '\P{Category=digit}', "");
Expect(0, 47, '\P{^Category=digit}', "");
Expect(1, 57, '\p{Category:- Digit}', "");
Expect(0, 57, '\p{^Category:- Digit}', "");
Expect(0, 57, '\P{Category:- Digit}', "");
Expect(1, 57, '\P{^Category:- Digit}', "");
Expect(0, 47, '\p{Category:- Digit}', "");
Expect(1, 47, '\p{^Category:- Digit}', "");
Expect(1, 47, '\P{Category:- Digit}', "");
Expect(0, 47, '\P{^Category:- Digit}', "");
Error('\p{Is_General_Category=/a/ Decimalnumber}');
Error('\P{Is_General_Category=/a/ Decimalnumber}');
Expect(1, 57, '\p{Is_General_Category=decimalnumber}', "");
Expect(0, 57, '\p{^Is_General_Category=decimalnumber}', "");
Expect(0, 57, '\P{Is_General_Category=decimalnumber}', "");
Expect(1, 57, '\P{^Is_General_Category=decimalnumber}', "");
Expect(0, 47, '\p{Is_General_Category=decimalnumber}', "");
Expect(1, 47, '\p{^Is_General_Category=decimalnumber}', "");
Expect(1, 47, '\P{Is_General_Category=decimalnumber}', "");
Expect(0, 47, '\P{^Is_General_Category=decimalnumber}', "");
Expect(1, 57, '\p{Is_General_Category=-	DECIMAL	Number}', "");
Expect(0, 57, '\p{^Is_General_Category=-	DECIMAL	Number}', "");
Expect(0, 57, '\P{Is_General_Category=-	DECIMAL	Number}', "");
Expect(1, 57, '\P{^Is_General_Category=-	DECIMAL	Number}', "");
Expect(0, 47, '\p{Is_General_Category=-	DECIMAL	Number}', "");
Expect(1, 47, '\p{^Is_General_Category=-	DECIMAL	Number}', "");
Expect(1, 47, '\P{Is_General_Category=-	DECIMAL	Number}', "");
Expect(0, 47, '\P{^Is_General_Category=-	DECIMAL	Number}', "");
Error('\p{Is_Gc=/a/-Nd}');
Error('\P{Is_Gc=/a/-Nd}');
Expect(1, 57, '\p{Is_Gc:	nd}', "");
Expect(0, 57, '\p{^Is_Gc:	nd}', "");
Expect(0, 57, '\P{Is_Gc:	nd}', "");
Expect(1, 57, '\P{^Is_Gc:	nd}', "");
Expect(0, 47, '\p{Is_Gc:	nd}', "");
Expect(1, 47, '\p{^Is_Gc:	nd}', "");
Expect(1, 47, '\P{Is_Gc:	nd}', "");
Expect(0, 47, '\P{^Is_Gc:	nd}', "");
Expect(1, 57, '\p{Is_Gc=_	Nd}', "");
Expect(0, 57, '\p{^Is_Gc=_	Nd}', "");
Expect(0, 57, '\P{Is_Gc=_	Nd}', "");
Expect(1, 57, '\P{^Is_Gc=_	Nd}', "");
Expect(0, 47, '\p{Is_Gc=_	Nd}', "");
Expect(1, 47, '\p{^Is_Gc=_	Nd}', "");
Expect(1, 47, '\P{Is_Gc=_	Nd}', "");
Expect(0, 47, '\P{^Is_Gc=_	Nd}', "");
Error('\p{Is_Category:	_DIGIT/a/}');
Error('\P{Is_Category:	_DIGIT/a/}');
Expect(1, 57, '\p{Is_Category=digit}', "");
Expect(0, 57, '\p{^Is_Category=digit}', "");
Expect(0, 57, '\P{Is_Category=digit}', "");
Expect(1, 57, '\P{^Is_Category=digit}', "");
Expect(0, 47, '\p{Is_Category=digit}', "");
Expect(1, 47, '\p{^Is_Category=digit}', "");
Expect(1, 47, '\P{Is_Category=digit}', "");
Expect(0, 47, '\P{^Is_Category=digit}', "");
Expect(1, 57, '\p{Is_Category=	_DIGIT}', "");
Expect(0, 57, '\p{^Is_Category=	_DIGIT}', "");
Expect(0, 57, '\P{Is_Category=	_DIGIT}', "");
Expect(1, 57, '\P{^Is_Category=	_DIGIT}', "");
Expect(0, 47, '\p{Is_Category=	_DIGIT}', "");
Expect(1, 47, '\p{^Is_Category=	_DIGIT}', "");
Expect(1, 47, '\P{Is_Category=	_DIGIT}', "");
Expect(0, 47, '\P{^Is_Category=	_DIGIT}', "");
Error('\p{General_Category=	-PARAGRAPH-Separator:=}');
Error('\P{General_Category=	-PARAGRAPH-Separator:=}');
Expect(1, 8233, '\p{General_Category=paragraphseparator}', "");
Expect(0, 8233, '\p{^General_Category=paragraphseparator}', "");
Expect(0, 8233, '\P{General_Category=paragraphseparator}', "");
Expect(1, 8233, '\P{^General_Category=paragraphseparator}', "");
Expect(0, 8232, '\p{General_Category=paragraphseparator}', "");
Expect(1, 8232, '\p{^General_Category=paragraphseparator}', "");
Expect(1, 8232, '\P{General_Category=paragraphseparator}', "");
Expect(0, 8232, '\P{^General_Category=paragraphseparator}', "");
Expect(1, 8233, '\p{General_Category:		 Paragraph	separator}', "");
Expect(0, 8233, '\p{^General_Category:		 Paragraph	separator}', "");
Expect(0, 8233, '\P{General_Category:		 Paragraph	separator}', "");
Expect(1, 8233, '\P{^General_Category:		 Paragraph	separator}', "");
Expect(0, 8232, '\p{General_Category:		 Paragraph	separator}', "");
Expect(1, 8232, '\p{^General_Category:		 Paragraph	separator}', "");
Expect(1, 8232, '\P{General_Category:		 Paragraph	separator}', "");
Expect(0, 8232, '\P{^General_Category:		 Paragraph	separator}', "");
Error('\p{Gc=/a/	Zp}');
Error('\P{Gc=/a/	Zp}');
Expect(1, 8233, '\p{Gc=zp}', "");
Expect(0, 8233, '\p{^Gc=zp}', "");
Expect(0, 8233, '\P{Gc=zp}', "");
Expect(1, 8233, '\P{^Gc=zp}', "");
Expect(0, 8232, '\p{Gc=zp}', "");
Expect(1, 8232, '\p{^Gc=zp}', "");
Expect(1, 8232, '\P{Gc=zp}', "");
Expect(0, 8232, '\P{^Gc=zp}', "");
Expect(1, 8233, '\p{Gc=-	zp}', "");
Expect(0, 8233, '\p{^Gc=-	zp}', "");
Expect(0, 8233, '\P{Gc=-	zp}', "");
Expect(1, 8233, '\P{^Gc=-	zp}', "");
Expect(0, 8232, '\p{Gc=-	zp}', "");
Expect(1, 8232, '\p{^Gc=-	zp}', "");
Expect(1, 8232, '\P{Gc=-	zp}', "");
Expect(0, 8232, '\P{^Gc=-	zp}', "");
Error('\p{Category=:=-_paragraph-separator}');
Error('\P{Category=:=-_paragraph-separator}');
Expect(1, 8233, '\p{Category:   paragraphseparator}', "");
Expect(0, 8233, '\p{^Category:   paragraphseparator}', "");
Expect(0, 8233, '\P{Category:   paragraphseparator}', "");
Expect(1, 8233, '\P{^Category:   paragraphseparator}', "");
Expect(0, 8232, '\p{Category:   paragraphseparator}', "");
Expect(1, 8232, '\p{^Category:   paragraphseparator}', "");
Expect(1, 8232, '\P{Category:   paragraphseparator}', "");
Expect(0, 8232, '\P{^Category:   paragraphseparator}', "");
Expect(1, 8233, '\p{Category:	 Paragraph Separator}', "");
Expect(0, 8233, '\p{^Category:	 Paragraph Separator}', "");
Expect(0, 8233, '\P{Category:	 Paragraph Separator}', "");
Expect(1, 8233, '\P{^Category:	 Paragraph Separator}', "");
Expect(0, 8232, '\p{Category:	 Paragraph Separator}', "");
Expect(1, 8232, '\p{^Category:	 Paragraph Separator}', "");
Expect(1, 8232, '\P{Category:	 Paragraph Separator}', "");
Expect(0, 8232, '\P{^Category:	 Paragraph Separator}', "");
Error('\p{Is_General_Category=_Zp/a/}');
Error('\P{Is_General_Category=_Zp/a/}');
Expect(1, 8233, '\p{Is_General_Category=zp}', "");
Expect(0, 8233, '\p{^Is_General_Category=zp}', "");
Expect(0, 8233, '\P{Is_General_Category=zp}', "");
Expect(1, 8233, '\P{^Is_General_Category=zp}', "");
Expect(0, 8232, '\p{Is_General_Category=zp}', "");
Expect(1, 8232, '\p{^Is_General_Category=zp}', "");
Expect(1, 8232, '\P{Is_General_Category=zp}', "");
Expect(0, 8232, '\P{^Is_General_Category=zp}', "");
Expect(1, 8233, '\p{Is_General_Category=	_Zp}', "");
Expect(0, 8233, '\p{^Is_General_Category=	_Zp}', "");
Expect(0, 8233, '\P{Is_General_Category=	_Zp}', "");
Expect(1, 8233, '\P{^Is_General_Category=	_Zp}', "");
Expect(0, 8232, '\p{Is_General_Category=	_Zp}', "");
Expect(1, 8232, '\p{^Is_General_Category=	_Zp}', "");
Expect(1, 8232, '\P{Is_General_Category=	_Zp}', "");
Expect(0, 8232, '\P{^Is_General_Category=	_Zp}', "");
Error('\p{Is_Gc= :=Paragraph-SEPARATOR}');
Error('\P{Is_Gc= :=Paragraph-SEPARATOR}');
Expect(1, 8233, '\p{Is_Gc=paragraphseparator}', "");
Expect(0, 8233, '\p{^Is_Gc=paragraphseparator}', "");
Expect(0, 8233, '\P{Is_Gc=paragraphseparator}', "");
Expect(1, 8233, '\P{^Is_Gc=paragraphseparator}', "");
Expect(0, 8232, '\p{Is_Gc=paragraphseparator}', "");
Expect(1, 8232, '\p{^Is_Gc=paragraphseparator}', "");
Expect(1, 8232, '\P{Is_Gc=paragraphseparator}', "");
Expect(0, 8232, '\P{^Is_Gc=paragraphseparator}', "");
Expect(1, 8233, '\p{Is_Gc=	-Paragraph_Separator}', "");
Expect(0, 8233, '\p{^Is_Gc=	-Paragraph_Separator}', "");
Expect(0, 8233, '\P{Is_Gc=	-Paragraph_Separator}', "");
Expect(1, 8233, '\P{^Is_Gc=	-Paragraph_Separator}', "");
Expect(0, 8232, '\p{Is_Gc=	-Paragraph_Separator}', "");
Expect(1, 8232, '\p{^Is_Gc=	-Paragraph_Separator}', "");
Expect(1, 8232, '\P{Is_Gc=	-Paragraph_Separator}', "");
Expect(0, 8232, '\P{^Is_Gc=	-Paragraph_Separator}', "");
Error('\p{Is_Category=:=Zp}');
Error('\P{Is_Category=:=Zp}');
Expect(1, 8233, '\p{Is_Category=zp}', "");
Expect(0, 8233, '\p{^Is_Category=zp}', "");
Expect(0, 8233, '\P{Is_Category=zp}', "");
Expect(1, 8233, '\P{^Is_Category=zp}', "");
Expect(0, 8232, '\p{Is_Category=zp}', "");
Expect(1, 8232, '\p{^Is_Category=zp}', "");
Expect(1, 8232, '\P{Is_Category=zp}', "");
Expect(0, 8232, '\P{^Is_Category=zp}', "");
Expect(1, 8233, '\p{Is_Category=	ZP}', "");
Expect(0, 8233, '\p{^Is_Category=	ZP}', "");
Expect(0, 8233, '\P{Is_Category=	ZP}', "");
Expect(1, 8233, '\P{^Is_Category=	ZP}', "");
Expect(0, 8232, '\p{Is_Category=	ZP}', "");
Expect(1, 8232, '\p{^Is_Category=	ZP}', "");
Expect(1, 8232, '\P{Is_Category=	ZP}', "");
Expect(0, 8232, '\P{^Is_Category=	ZP}', "");
Error('\p{General_Category=-modifier:=Letter}');
Error('\P{General_Category=-modifier:=Letter}');
Expect(1, 705, '\p{General_Category=modifierletter}', "");
Expect(0, 705, '\p{^General_Category=modifierletter}', "");
Expect(0, 705, '\P{General_Category=modifierletter}', "");
Expect(1, 705, '\P{^General_Category=modifierletter}', "");
Expect(0, 687, '\p{General_Category=modifierletter}', "");
Expect(1, 687, '\p{^General_Category=modifierletter}', "");
Expect(1, 687, '\P{General_Category=modifierletter}', "");
Expect(0, 687, '\P{^General_Category=modifierletter}', "");
Expect(1, 705, '\p{General_Category=__MODIFIER	LETTER}', "");
Expect(0, 705, '\p{^General_Category=__MODIFIER	LETTER}', "");
Expect(0, 705, '\P{General_Category=__MODIFIER	LETTER}', "");
Expect(1, 705, '\P{^General_Category=__MODIFIER	LETTER}', "");
Expect(0, 687, '\p{General_Category=__MODIFIER	LETTER}', "");
Expect(1, 687, '\p{^General_Category=__MODIFIER	LETTER}', "");
Expect(1, 687, '\P{General_Category=__MODIFIER	LETTER}', "");
Expect(0, 687, '\P{^General_Category=__MODIFIER	LETTER}', "");
Error('\p{Gc: :=lm}');
Error('\P{Gc: :=lm}');
Expect(1, 705, '\p{Gc=lm}', "");
Expect(0, 705, '\p{^Gc=lm}', "");
Expect(0, 705, '\P{Gc=lm}', "");
Expect(1, 705, '\P{^Gc=lm}', "");
Expect(0, 687, '\p{Gc=lm}', "");
Expect(1, 687, '\p{^Gc=lm}', "");
Expect(1, 687, '\P{Gc=lm}', "");
Expect(0, 687, '\P{^Gc=lm}', "");
Expect(1, 705, '\p{Gc:   -	Lm}', "");
Expect(0, 705, '\p{^Gc:   -	Lm}', "");
Expect(0, 705, '\P{Gc:   -	Lm}', "");
Expect(1, 705, '\P{^Gc:   -	Lm}', "");
Expect(0, 687, '\p{Gc:   -	Lm}', "");
Expect(1, 687, '\p{^Gc:   -	Lm}', "");
Expect(1, 687, '\P{Gc:   -	Lm}', "");
Expect(0, 687, '\P{^Gc:   -	Lm}', "");
Error('\p{Category=_ MODIFIER_LETTER/a/}');
Error('\P{Category=_ MODIFIER_LETTER/a/}');
Expect(1, 705, '\p{Category=modifierletter}', "");
Expect(0, 705, '\p{^Category=modifierletter}', "");
Expect(0, 705, '\P{Category=modifierletter}', "");
Expect(1, 705, '\P{^Category=modifierletter}', "");
Expect(0, 687, '\p{Category=modifierletter}', "");
Expect(1, 687, '\p{^Category=modifierletter}', "");
Expect(1, 687, '\P{Category=modifierletter}', "");
Expect(0, 687, '\P{^Category=modifierletter}', "");
Expect(1, 705, '\p{Category= 	Modifierletter}', "");
Expect(0, 705, '\p{^Category= 	Modifierletter}', "");
Expect(0, 705, '\P{Category= 	Modifierletter}', "");
Expect(1, 705, '\P{^Category= 	Modifierletter}', "");
Expect(0, 687, '\p{Category= 	Modifierletter}', "");
Expect(1, 687, '\p{^Category= 	Modifierletter}', "");
Expect(1, 687, '\P{Category= 	Modifierletter}', "");
Expect(0, 687, '\P{^Category= 	Modifierletter}', "");
Error('\p{Is_General_Category: -	Lm:=}');
Error('\P{Is_General_Category: -	Lm:=}');
Expect(1, 705, '\p{Is_General_Category=lm}', "");
Expect(0, 705, '\p{^Is_General_Category=lm}', "");
Expect(0, 705, '\P{Is_General_Category=lm}', "");
Expect(1, 705, '\P{^Is_General_Category=lm}', "");
Expect(0, 687, '\p{Is_General_Category=lm}', "");
Expect(1, 687, '\p{^Is_General_Category=lm}', "");
Expect(1, 687, '\P{Is_General_Category=lm}', "");
Expect(0, 687, '\P{^Is_General_Category=lm}', "");
Expect(1, 705, '\p{Is_General_Category= LM}', "");
Expect(0, 705, '\p{^Is_General_Category= LM}', "");
Expect(0, 705, '\P{Is_General_Category= LM}', "");
Expect(1, 705, '\P{^Is_General_Category= LM}', "");
Expect(0, 687, '\p{Is_General_Category= LM}', "");
Expect(1, 687, '\p{^Is_General_Category= LM}', "");
Expect(1, 687, '\P{Is_General_Category= LM}', "");
Expect(0, 687, '\P{^Is_General_Category= LM}', "");
Error('\p{Is_Gc:_/a/MODIFIERletter}');
Error('\P{Is_Gc:_/a/MODIFIERletter}');
Expect(1, 705, '\p{Is_Gc=modifierletter}', "");
Expect(0, 705, '\p{^Is_Gc=modifierletter}', "");
Expect(0, 705, '\P{Is_Gc=modifierletter}', "");
Expect(1, 705, '\P{^Is_Gc=modifierletter}', "");
Expect(0, 687, '\p{Is_Gc=modifierletter}', "");
Expect(1, 687, '\p{^Is_Gc=modifierletter}', "");
Expect(1, 687, '\P{Is_Gc=modifierletter}', "");
Expect(0, 687, '\P{^Is_Gc=modifierletter}', "");
Expect(1, 705, '\p{Is_Gc:_Modifier	Letter}', "");
Expect(0, 705, '\p{^Is_Gc:_Modifier	Letter}', "");
Expect(0, 705, '\P{Is_Gc:_Modifier	Letter}', "");
Expect(1, 705, '\P{^Is_Gc:_Modifier	Letter}', "");
Expect(0, 687, '\p{Is_Gc:_Modifier	Letter}', "");
Expect(1, 687, '\p{^Is_Gc:_Modifier	Letter}', "");
Expect(1, 687, '\P{Is_Gc:_Modifier	Letter}', "");
Expect(0, 687, '\P{^Is_Gc:_Modifier	Letter}', "");
Error('\p{Is_Category=-	Lm:=}');
Error('\P{Is_Category=-	Lm:=}');
Expect(1, 705, '\p{Is_Category=lm}', "");
Expect(0, 705, '\p{^Is_Category=lm}', "");
Expect(0, 705, '\P{Is_Category=lm}', "");
Expect(1, 705, '\P{^Is_Category=lm}', "");
Expect(0, 687, '\p{Is_Category=lm}', "");
Expect(1, 687, '\p{^Is_Category=lm}', "");
Expect(1, 687, '\P{Is_Category=lm}', "");
Expect(0, 687, '\P{^Is_Category=lm}', "");
Expect(1, 705, '\p{Is_Category=	 LM}', "");
Expect(0, 705, '\p{^Is_Category=	 LM}', "");
Expect(0, 705, '\P{Is_Category=	 LM}', "");
Expect(1, 705, '\P{^Is_Category=	 LM}', "");
Expect(0, 687, '\p{Is_Category=	 LM}', "");
Expect(1, 687, '\p{^Is_Category=	 LM}', "");
Expect(1, 687, '\P{Is_Category=	 LM}', "");
Expect(0, 687, '\P{^Is_Category=	 LM}', "");
Error('\p{General_Category= /a/OTHER_SYMBOL}');
Error('\P{General_Category= /a/OTHER_SYMBOL}');
Expect(1, 167, '\p{General_Category=othersymbol}', "");
Expect(0, 167, '\p{^General_Category=othersymbol}', "");
Expect(0, 167, '\P{General_Category=othersymbol}', "");
Expect(1, 167, '\P{^General_Category=othersymbol}', "");
Expect(0, 165, '\p{General_Category=othersymbol}', "");
Expect(1, 165, '\p{^General_Category=othersymbol}', "");
Expect(1, 165, '\P{General_Category=othersymbol}', "");
Expect(0, 165, '\P{^General_Category=othersymbol}', "");
Expect(1, 167, '\p{General_Category: 		OTHER	SYMBOL}', "");
Expect(0, 167, '\p{^General_Category: 		OTHER	SYMBOL}', "");
Expect(0, 167, '\P{General_Category: 		OTHER	SYMBOL}', "");
Expect(1, 167, '\P{^General_Category: 		OTHER	SYMBOL}', "");
Expect(0, 165, '\p{General_Category: 		OTHER	SYMBOL}', "");
Expect(1, 165, '\p{^General_Category: 		OTHER	SYMBOL}', "");
Expect(1, 165, '\P{General_Category: 		OTHER	SYMBOL}', "");
Expect(0, 165, '\P{^General_Category: 		OTHER	SYMBOL}', "");
Error('\p{Gc=/a/_ so}');
Error('\P{Gc=/a/_ so}');
Expect(1, 167, '\p{Gc=so}', "");
Expect(0, 167, '\p{^Gc=so}', "");
Expect(0, 167, '\P{Gc=so}', "");
Expect(1, 167, '\P{^Gc=so}', "");
Expect(0, 165, '\p{Gc=so}', "");
Expect(1, 165, '\p{^Gc=so}', "");
Expect(1, 165, '\P{Gc=so}', "");
Expect(0, 165, '\P{^Gc=so}', "");
Expect(1, 167, '\p{Gc=		So}', "");
Expect(0, 167, '\p{^Gc=		So}', "");
Expect(0, 167, '\P{Gc=		So}', "");
Expect(1, 167, '\P{^Gc=		So}', "");
Expect(0, 165, '\p{Gc=		So}', "");
Expect(1, 165, '\p{^Gc=		So}', "");
Expect(1, 165, '\P{Gc=		So}', "");
Expect(0, 165, '\P{^Gc=		So}', "");
Error('\p{Category=-:=Other	Symbol}');
Error('\P{Category=-:=Other	Symbol}');
Expect(1, 167, '\p{Category=othersymbol}', "");
Expect(0, 167, '\p{^Category=othersymbol}', "");
Expect(0, 167, '\P{Category=othersymbol}', "");
Expect(1, 167, '\P{^Category=othersymbol}', "");
Expect(0, 165, '\p{Category=othersymbol}', "");
Expect(1, 165, '\p{^Category=othersymbol}', "");
Expect(1, 165, '\P{Category=othersymbol}', "");
Expect(0, 165, '\P{^Category=othersymbol}', "");
Expect(1, 167, '\p{Category= otherSYMBOL}', "");
Expect(0, 167, '\p{^Category= otherSYMBOL}', "");
Expect(0, 167, '\P{Category= otherSYMBOL}', "");
Expect(1, 167, '\P{^Category= otherSYMBOL}', "");
Expect(0, 165, '\p{Category= otherSYMBOL}', "");
Expect(1, 165, '\p{^Category= otherSYMBOL}', "");
Expect(1, 165, '\P{Category= otherSYMBOL}', "");
Expect(0, 165, '\P{^Category= otherSYMBOL}', "");
Error('\p{Is_General_Category=:=_-so}');
Error('\P{Is_General_Category=:=_-so}');
Expect(1, 167, '\p{Is_General_Category=so}', "");
Expect(0, 167, '\p{^Is_General_Category=so}', "");
Expect(0, 167, '\P{Is_General_Category=so}', "");
Expect(1, 167, '\P{^Is_General_Category=so}', "");
Expect(0, 165, '\p{Is_General_Category=so}', "");
Expect(1, 165, '\p{^Is_General_Category=so}', "");
Expect(1, 165, '\P{Is_General_Category=so}', "");
Expect(0, 165, '\P{^Is_General_Category=so}', "");
Expect(1, 167, '\p{Is_General_Category= _so}', "");
Expect(0, 167, '\p{^Is_General_Category= _so}', "");
Expect(0, 167, '\P{Is_General_Category= _so}', "");
Expect(1, 167, '\P{^Is_General_Category= _so}', "");
Expect(0, 165, '\p{Is_General_Category= _so}', "");
Expect(1, 165, '\p{^Is_General_Category= _so}', "");
Expect(1, 165, '\P{Is_General_Category= _so}', "");
Expect(0, 165, '\P{^Is_General_Category= _so}', "");
Error('\p{Is_Gc=	-Other:=SYMBOL}');
Error('\P{Is_Gc=	-Other:=SYMBOL}');
Expect(1, 167, '\p{Is_Gc=othersymbol}', "");
Expect(0, 167, '\p{^Is_Gc=othersymbol}', "");
Expect(0, 167, '\P{Is_Gc=othersymbol}', "");
Expect(1, 167, '\P{^Is_Gc=othersymbol}', "");
Expect(0, 165, '\p{Is_Gc=othersymbol}', "");
Expect(1, 165, '\p{^Is_Gc=othersymbol}', "");
Expect(1, 165, '\P{Is_Gc=othersymbol}', "");
Expect(0, 165, '\P{^Is_Gc=othersymbol}', "");
Expect(1, 167, '\p{Is_Gc=_ othersymbol}', "");
Expect(0, 167, '\p{^Is_Gc=_ othersymbol}', "");
Expect(0, 167, '\P{Is_Gc=_ othersymbol}', "");
Expect(1, 167, '\P{^Is_Gc=_ othersymbol}', "");
Expect(0, 165, '\p{Is_Gc=_ othersymbol}', "");
Expect(1, 165, '\p{^Is_Gc=_ othersymbol}', "");
Expect(1, 165, '\P{Is_Gc=_ othersymbol}', "");
Expect(0, 165, '\P{^Is_Gc=_ othersymbol}', "");
Error('\p{Is_Category=:=_	SO}');
Error('\P{Is_Category=:=_	SO}');
Expect(1, 167, '\p{Is_Category=so}', "");
Expect(0, 167, '\p{^Is_Category=so}', "");
Expect(0, 167, '\P{Is_Category=so}', "");
Expect(1, 167, '\P{^Is_Category=so}', "");
Expect(0, 165, '\p{Is_Category=so}', "");
Expect(1, 165, '\p{^Is_Category=so}', "");
Expect(1, 165, '\P{Is_Category=so}', "");
Expect(0, 165, '\P{^Is_Category=so}', "");
Expect(1, 167, '\p{Is_Category:   	so}', "");
Expect(0, 167, '\p{^Is_Category:   	so}', "");
Expect(0, 167, '\P{Is_Category:   	so}', "");
Expect(1, 167, '\P{^Is_Category:   	so}', "");
Expect(0, 165, '\p{Is_Category:   	so}', "");
Expect(1, 165, '\p{^Is_Category:   	so}', "");
Expect(1, 165, '\P{Is_Category:   	so}', "");
Expect(0, 165, '\P{^Is_Category:   	so}', "");
Error('\p{General_Category: /a/ -NONSPACING_mark}');
Error('\P{General_Category: /a/ -NONSPACING_mark}');
Expect(1, 879, '\p{General_Category=nonspacingmark}', "");
Expect(0, 879, '\p{^General_Category=nonspacingmark}', "");
Expect(0, 879, '\P{General_Category=nonspacingmark}', "");
Expect(1, 879, '\P{^General_Category=nonspacingmark}', "");
Expect(0, 767, '\p{General_Category=nonspacingmark}', "");
Expect(1, 767, '\p{^General_Category=nonspacingmark}', "");
Expect(1, 767, '\P{General_Category=nonspacingmark}', "");
Expect(0, 767, '\P{^General_Category=nonspacingmark}', "");
Expect(1, 879, '\p{General_Category=_ Nonspacing-Mark}', "");
Expect(0, 879, '\p{^General_Category=_ Nonspacing-Mark}', "");
Expect(0, 879, '\P{General_Category=_ Nonspacing-Mark}', "");
Expect(1, 879, '\P{^General_Category=_ Nonspacing-Mark}', "");
Expect(0, 767, '\p{General_Category=_ Nonspacing-Mark}', "");
Expect(1, 767, '\p{^General_Category=_ Nonspacing-Mark}', "");
Expect(1, 767, '\P{General_Category=_ Nonspacing-Mark}', "");
Expect(0, 767, '\P{^General_Category=_ Nonspacing-Mark}', "");
Error('\p{Gc= /a/MN}');
Error('\P{Gc= /a/MN}');
Expect(1, 879, '\p{Gc=mn}', "");
Expect(0, 879, '\p{^Gc=mn}', "");
Expect(0, 879, '\P{Gc=mn}', "");
Expect(1, 879, '\P{^Gc=mn}', "");
Expect(0, 767, '\p{Gc=mn}', "");
Expect(1, 767, '\p{^Gc=mn}', "");
Expect(1, 767, '\P{Gc=mn}', "");
Expect(0, 767, '\P{^Gc=mn}', "");
Expect(1, 879, '\p{Gc=-Mn}', "");
Expect(0, 879, '\p{^Gc=-Mn}', "");
Expect(0, 879, '\P{Gc=-Mn}', "");
Expect(1, 879, '\P{^Gc=-Mn}', "");
Expect(0, 767, '\p{Gc=-Mn}', "");
Expect(1, 767, '\p{^Gc=-Mn}', "");
Expect(1, 767, '\P{Gc=-Mn}', "");
Expect(0, 767, '\P{^Gc=-Mn}', "");
Error('\p{Category= /a/nonspacing-Mark}');
Error('\P{Category= /a/nonspacing-Mark}');
Expect(1, 879, '\p{Category=nonspacingmark}', "");
Expect(0, 879, '\p{^Category=nonspacingmark}', "");
Expect(0, 879, '\P{Category=nonspacingmark}', "");
Expect(1, 879, '\P{^Category=nonspacingmark}', "");
Expect(0, 767, '\p{Category=nonspacingmark}', "");
Expect(1, 767, '\p{^Category=nonspacingmark}', "");
Expect(1, 767, '\P{Category=nonspacingmark}', "");
Expect(0, 767, '\P{^Category=nonspacingmark}', "");
Expect(1, 879, '\p{Category= nonspacing_mark}', "");
Expect(0, 879, '\p{^Category= nonspacing_mark}', "");
Expect(0, 879, '\P{Category= nonspacing_mark}', "");
Expect(1, 879, '\P{^Category= nonspacing_mark}', "");
Expect(0, 767, '\p{Category= nonspacing_mark}', "");
Expect(1, 767, '\p{^Category= nonspacing_mark}', "");
Expect(1, 767, '\P{Category= nonspacing_mark}', "");
Expect(0, 767, '\P{^Category= nonspacing_mark}', "");
Error('\p{Is_General_Category= 	Mn:=}');
Error('\P{Is_General_Category= 	Mn:=}');
Expect(1, 879, '\p{Is_General_Category=mn}', "");
Expect(0, 879, '\p{^Is_General_Category=mn}', "");
Expect(0, 879, '\P{Is_General_Category=mn}', "");
Expect(1, 879, '\P{^Is_General_Category=mn}', "");
Expect(0, 767, '\p{Is_General_Category=mn}', "");
Expect(1, 767, '\p{^Is_General_Category=mn}', "");
Expect(1, 767, '\P{Is_General_Category=mn}', "");
Expect(0, 767, '\P{^Is_General_Category=mn}', "");
Expect(1, 879, '\p{Is_General_Category=-_Mn}', "");
Expect(0, 879, '\p{^Is_General_Category=-_Mn}', "");
Expect(0, 879, '\P{Is_General_Category=-_Mn}', "");
Expect(1, 879, '\P{^Is_General_Category=-_Mn}', "");
Expect(0, 767, '\p{Is_General_Category=-_Mn}', "");
Expect(1, 767, '\p{^Is_General_Category=-_Mn}', "");
Expect(1, 767, '\P{Is_General_Category=-_Mn}', "");
Expect(0, 767, '\P{^Is_General_Category=-_Mn}', "");
Error('\p{Is_Gc=:=-	Nonspacingmark}');
Error('\P{Is_Gc=:=-	Nonspacingmark}');
Expect(1, 879, '\p{Is_Gc=nonspacingmark}', "");
Expect(0, 879, '\p{^Is_Gc=nonspacingmark}', "");
Expect(0, 879, '\P{Is_Gc=nonspacingmark}', "");
Expect(1, 879, '\P{^Is_Gc=nonspacingmark}', "");
Expect(0, 767, '\p{Is_Gc=nonspacingmark}', "");
Expect(1, 767, '\p{^Is_Gc=nonspacingmark}', "");
Expect(1, 767, '\P{Is_Gc=nonspacingmark}', "");
Expect(0, 767, '\P{^Is_Gc=nonspacingmark}', "");
Expect(1, 879, '\p{Is_Gc:	  Nonspacing_mark}', "");
Expect(0, 879, '\p{^Is_Gc:	  Nonspacing_mark}', "");
Expect(0, 879, '\P{Is_Gc:	  Nonspacing_mark}', "");
Expect(1, 879, '\P{^Is_Gc:	  Nonspacing_mark}', "");
Expect(0, 767, '\p{Is_Gc:	  Nonspacing_mark}', "");
Expect(1, 767, '\p{^Is_Gc:	  Nonspacing_mark}', "");
Expect(1, 767, '\P{Is_Gc:	  Nonspacing_mark}', "");
Expect(0, 767, '\P{^Is_Gc:	  Nonspacing_mark}', "");
Error('\p{Is_Category=/a/ _MN}');
Error('\P{Is_Category=/a/ _MN}');
Expect(1, 879, '\p{Is_Category=mn}', "");
Expect(0, 879, '\p{^Is_Category=mn}', "");
Expect(0, 879, '\P{Is_Category=mn}', "");
Expect(1, 879, '\P{^Is_Category=mn}', "");
Expect(0, 767, '\p{Is_Category=mn}', "");
Expect(1, 767, '\p{^Is_Category=mn}', "");
Expect(1, 767, '\P{Is_Category=mn}', "");
Expect(0, 767, '\P{^Is_Category=mn}', "");
Expect(1, 879, '\p{Is_Category:	- Mn}', "");
Expect(0, 879, '\p{^Is_Category:	- Mn}', "");
Expect(0, 879, '\P{Is_Category:	- Mn}', "");
Expect(1, 879, '\P{^Is_Category:	- Mn}', "");
Expect(0, 767, '\p{Is_Category:	- Mn}', "");
Expect(1, 767, '\p{^Is_Category:	- Mn}', "");
Expect(1, 767, '\P{Is_Category:	- Mn}', "");
Expect(0, 767, '\P{^Is_Category:	- Mn}', "");
Error('\p{General_Category:   :=_	DASH-PUNCTUATION}');
Error('\P{General_Category:   :=_	DASH-PUNCTUATION}');
Expect(1, 45, '\p{General_Category=dashpunctuation}', "");
Expect(0, 45, '\p{^General_Category=dashpunctuation}', "");
Expect(0, 45, '\P{General_Category=dashpunctuation}', "");
Expect(1, 45, '\P{^General_Category=dashpunctuation}', "");
Expect(0, 44, '\p{General_Category=dashpunctuation}', "");
Expect(1, 44, '\p{^General_Category=dashpunctuation}', "");
Expect(1, 44, '\P{General_Category=dashpunctuation}', "");
Expect(0, 44, '\P{^General_Category=dashpunctuation}', "");
Expect(1, 45, '\p{General_Category= DASH	Punctuation}', "");
Expect(0, 45, '\p{^General_Category= DASH	Punctuation}', "");
Expect(0, 45, '\P{General_Category= DASH	Punctuation}', "");
Expect(1, 45, '\P{^General_Category= DASH	Punctuation}', "");
Expect(0, 44, '\p{General_Category= DASH	Punctuation}', "");
Expect(1, 44, '\p{^General_Category= DASH	Punctuation}', "");
Expect(1, 44, '\P{General_Category= DASH	Punctuation}', "");
Expect(0, 44, '\P{^General_Category= DASH	Punctuation}', "");
Error('\p{Gc=	 Pd/a/}');
Error('\P{Gc=	 Pd/a/}');
Expect(1, 45, '\p{Gc=pd}', "");
Expect(0, 45, '\p{^Gc=pd}', "");
Expect(0, 45, '\P{Gc=pd}', "");
Expect(1, 45, '\P{^Gc=pd}', "");
Expect(0, 44, '\p{Gc=pd}', "");
Expect(1, 44, '\p{^Gc=pd}', "");
Expect(1, 44, '\P{Gc=pd}', "");
Expect(0, 44, '\P{^Gc=pd}', "");
Expect(1, 45, '\p{Gc: _Pd}', "");
Expect(0, 45, '\p{^Gc: _Pd}', "");
Expect(0, 45, '\P{Gc: _Pd}', "");
Expect(1, 45, '\P{^Gc: _Pd}', "");
Expect(0, 44, '\p{Gc: _Pd}', "");
Expect(1, 44, '\p{^Gc: _Pd}', "");
Expect(1, 44, '\P{Gc: _Pd}', "");
Expect(0, 44, '\P{^Gc: _Pd}', "");
Error('\p{Category=	Dash_Punctuation/a/}');
Error('\P{Category=	Dash_Punctuation/a/}');
Expect(1, 45, '\p{Category=dashpunctuation}', "");
Expect(0, 45, '\p{^Category=dashpunctuation}', "");
Expect(0, 45, '\P{Category=dashpunctuation}', "");
Expect(1, 45, '\P{^Category=dashpunctuation}', "");
Expect(0, 44, '\p{Category=dashpunctuation}', "");
Expect(1, 44, '\p{^Category=dashpunctuation}', "");
Expect(1, 44, '\P{Category=dashpunctuation}', "");
Expect(0, 44, '\P{^Category=dashpunctuation}', "");
Expect(1, 45, '\p{Category=_	Dash-Punctuation}', "");
Expect(0, 45, '\p{^Category=_	Dash-Punctuation}', "");
Expect(0, 45, '\P{Category=_	Dash-Punctuation}', "");
Expect(1, 45, '\P{^Category=_	Dash-Punctuation}', "");
Expect(0, 44, '\p{Category=_	Dash-Punctuation}', "");
Expect(1, 44, '\p{^Category=_	Dash-Punctuation}', "");
Expect(1, 44, '\P{Category=_	Dash-Punctuation}', "");
Expect(0, 44, '\P{^Category=_	Dash-Punctuation}', "");
Error('\p{Is_General_Category=:=-pd}');
Error('\P{Is_General_Category=:=-pd}');
Expect(1, 45, '\p{Is_General_Category:   pd}', "");
Expect(0, 45, '\p{^Is_General_Category:   pd}', "");
Expect(0, 45, '\P{Is_General_Category:   pd}', "");
Expect(1, 45, '\P{^Is_General_Category:   pd}', "");
Expect(0, 44, '\p{Is_General_Category:   pd}', "");
Expect(1, 44, '\p{^Is_General_Category:   pd}', "");
Expect(1, 44, '\P{Is_General_Category:   pd}', "");
Expect(0, 44, '\P{^Is_General_Category:   pd}', "");
Expect(1, 45, '\p{Is_General_Category=_-Pd}', "");
Expect(0, 45, '\p{^Is_General_Category=_-Pd}', "");
Expect(0, 45, '\P{Is_General_Category=_-Pd}', "");
Expect(1, 45, '\P{^Is_General_Category=_-Pd}', "");
Expect(0, 44, '\p{Is_General_Category=_-Pd}', "");
Expect(1, 44, '\p{^Is_General_Category=_-Pd}', "");
Expect(1, 44, '\P{Is_General_Category=_-Pd}', "");
Expect(0, 44, '\P{^Is_General_Category=_-Pd}', "");
Error('\p{Is_Gc:	 :=DASH-punctuation}');
Error('\P{Is_Gc:	 :=DASH-punctuation}');
Expect(1, 45, '\p{Is_Gc=dashpunctuation}', "");
Expect(0, 45, '\p{^Is_Gc=dashpunctuation}', "");
Expect(0, 45, '\P{Is_Gc=dashpunctuation}', "");
Expect(1, 45, '\P{^Is_Gc=dashpunctuation}', "");
Expect(0, 44, '\p{Is_Gc=dashpunctuation}', "");
Expect(1, 44, '\p{^Is_Gc=dashpunctuation}', "");
Expect(1, 44, '\P{Is_Gc=dashpunctuation}', "");
Expect(0, 44, '\P{^Is_Gc=dashpunctuation}', "");
Expect(1, 45, '\p{Is_Gc=- Dash-PUNCTUATION}', "");
Expect(0, 45, '\p{^Is_Gc=- Dash-PUNCTUATION}', "");
Expect(0, 45, '\P{Is_Gc=- Dash-PUNCTUATION}', "");
Expect(1, 45, '\P{^Is_Gc=- Dash-PUNCTUATION}', "");
Expect(0, 44, '\p{Is_Gc=- Dash-PUNCTUATION}', "");
Expect(1, 44, '\p{^Is_Gc=- Dash-PUNCTUATION}', "");
Expect(1, 44, '\P{Is_Gc=- Dash-PUNCTUATION}', "");
Expect(0, 44, '\P{^Is_Gc=- Dash-PUNCTUATION}', "");
Error('\p{Is_Category=	 PD:=}');
Error('\P{Is_Category=	 PD:=}');
Expect(1, 45, '\p{Is_Category=pd}', "");
Expect(0, 45, '\p{^Is_Category=pd}', "");
Expect(0, 45, '\P{Is_Category=pd}', "");
Expect(1, 45, '\P{^Is_Category=pd}', "");
Expect(0, 44, '\p{Is_Category=pd}', "");
Expect(1, 44, '\p{^Is_Category=pd}', "");
Expect(1, 44, '\P{Is_Category=pd}', "");
Expect(0, 44, '\P{^Is_Category=pd}', "");
Expect(1, 45, '\p{Is_Category=	Pd}', "");
Expect(0, 45, '\p{^Is_Category=	Pd}', "");
Expect(0, 45, '\P{Is_Category=	Pd}', "");
Expect(1, 45, '\P{^Is_Category=	Pd}', "");
Expect(0, 44, '\p{Is_Category=	Pd}', "");
Expect(1, 44, '\p{^Is_Category=	Pd}', "");
Expect(1, 44, '\P{Is_Category=	Pd}', "");
Expect(0, 44, '\P{^Is_Category=	Pd}', "");
Error('\p{General_Category=/a/_ Letter_Number}');
Error('\P{General_Category=/a/_ Letter_Number}');
Expect(1, 5872, '\p{General_Category=letternumber}', "");
Expect(0, 5872, '\p{^General_Category=letternumber}', "");
Expect(0, 5872, '\P{General_Category=letternumber}', "");
Expect(1, 5872, '\P{^General_Category=letternumber}', "");
Expect(0, 5869, '\p{General_Category=letternumber}', "");
Expect(1, 5869, '\p{^General_Category=letternumber}', "");
Expect(1, 5869, '\P{General_Category=letternumber}', "");
Expect(0, 5869, '\P{^General_Category=letternumber}', "");
Expect(1, 5872, '\p{General_Category=letter	Number}', "");
Expect(0, 5872, '\p{^General_Category=letter	Number}', "");
Expect(0, 5872, '\P{General_Category=letter	Number}', "");
Expect(1, 5872, '\P{^General_Category=letter	Number}', "");
Expect(0, 5869, '\p{General_Category=letter	Number}', "");
Expect(1, 5869, '\p{^General_Category=letter	Number}', "");
Expect(1, 5869, '\P{General_Category=letter	Number}', "");
Expect(0, 5869, '\P{^General_Category=letter	Number}', "");
Error('\p{Gc: /a/_ Nl}');
Error('\P{Gc: /a/_ Nl}');
Expect(1, 5872, '\p{Gc=nl}', "");
Expect(0, 5872, '\p{^Gc=nl}', "");
Expect(0, 5872, '\P{Gc=nl}', "");
Expect(1, 5872, '\P{^Gc=nl}', "");
Expect(0, 5869, '\p{Gc=nl}', "");
Expect(1, 5869, '\p{^Gc=nl}', "");
Expect(1, 5869, '\P{Gc=nl}', "");
Expect(0, 5869, '\P{^Gc=nl}', "");
Expect(1, 5872, '\p{Gc= _nl}', "");
Expect(0, 5872, '\p{^Gc= _nl}', "");
Expect(0, 5872, '\P{Gc= _nl}', "");
Expect(1, 5872, '\P{^Gc= _nl}', "");
Expect(0, 5869, '\p{Gc= _nl}', "");
Expect(1, 5869, '\p{^Gc= _nl}', "");
Expect(1, 5869, '\P{Gc= _nl}', "");
Expect(0, 5869, '\P{^Gc= _nl}', "");
Error('\p{Category=-	Letter Number/a/}');
Error('\P{Category=-	Letter Number/a/}');
Expect(1, 5872, '\p{Category=letternumber}', "");
Expect(0, 5872, '\p{^Category=letternumber}', "");
Expect(0, 5872, '\P{Category=letternumber}', "");
Expect(1, 5872, '\P{^Category=letternumber}', "");
Expect(0, 5869, '\p{Category=letternumber}', "");
Expect(1, 5869, '\p{^Category=letternumber}', "");
Expect(1, 5869, '\P{Category=letternumber}', "");
Expect(0, 5869, '\P{^Category=letternumber}', "");
Expect(1, 5872, '\p{Category=-_letter	Number}', "");
Expect(0, 5872, '\p{^Category=-_letter	Number}', "");
Expect(0, 5872, '\P{Category=-_letter	Number}', "");
Expect(1, 5872, '\P{^Category=-_letter	Number}', "");
Expect(0, 5869, '\p{Category=-_letter	Number}', "");
Expect(1, 5869, '\p{^Category=-_letter	Number}', "");
Expect(1, 5869, '\P{Category=-_letter	Number}', "");
Expect(0, 5869, '\P{^Category=-_letter	Number}', "");
Error('\p{Is_General_Category=	:=Nl}');
Error('\P{Is_General_Category=	:=Nl}');
Expect(1, 5872, '\p{Is_General_Category=nl}', "");
Expect(0, 5872, '\p{^Is_General_Category=nl}', "");
Expect(0, 5872, '\P{Is_General_Category=nl}', "");
Expect(1, 5872, '\P{^Is_General_Category=nl}', "");
Expect(0, 5869, '\p{Is_General_Category=nl}', "");
Expect(1, 5869, '\p{^Is_General_Category=nl}', "");
Expect(1, 5869, '\P{Is_General_Category=nl}', "");
Expect(0, 5869, '\P{^Is_General_Category=nl}', "");
Expect(1, 5872, '\p{Is_General_Category:--Nl}', "");
Expect(0, 5872, '\p{^Is_General_Category:--Nl}', "");
Expect(0, 5872, '\P{Is_General_Category:--Nl}', "");
Expect(1, 5872, '\P{^Is_General_Category:--Nl}', "");
Expect(0, 5869, '\p{Is_General_Category:--Nl}', "");
Expect(1, 5869, '\p{^Is_General_Category:--Nl}', "");
Expect(1, 5869, '\P{Is_General_Category:--Nl}', "");
Expect(0, 5869, '\P{^Is_General_Category:--Nl}', "");
Error('\p{Is_Gc=:=  LETTERNumber}');
Error('\P{Is_Gc=:=  LETTERNumber}');
Expect(1, 5872, '\p{Is_Gc=letternumber}', "");
Expect(0, 5872, '\p{^Is_Gc=letternumber}', "");
Expect(0, 5872, '\P{Is_Gc=letternumber}', "");
Expect(1, 5872, '\P{^Is_Gc=letternumber}', "");
Expect(0, 5869, '\p{Is_Gc=letternumber}', "");
Expect(1, 5869, '\p{^Is_Gc=letternumber}', "");
Expect(1, 5869, '\P{Is_Gc=letternumber}', "");
Expect(0, 5869, '\P{^Is_Gc=letternumber}', "");
Expect(1, 5872, '\p{Is_Gc=	letter	NUMBER}', "");
Expect(0, 5872, '\p{^Is_Gc=	letter	NUMBER}', "");
Expect(0, 5872, '\P{Is_Gc=	letter	NUMBER}', "");
Expect(1, 5872, '\P{^Is_Gc=	letter	NUMBER}', "");
Expect(0, 5869, '\p{Is_Gc=	letter	NUMBER}', "");
Expect(1, 5869, '\p{^Is_Gc=	letter	NUMBER}', "");
Expect(1, 5869, '\P{Is_Gc=	letter	NUMBER}', "");
Expect(0, 5869, '\P{^Is_Gc=	letter	NUMBER}', "");
Error('\p{Is_Category= :=NL}');
Error('\P{Is_Category= :=NL}');
Expect(1, 5872, '\p{Is_Category=nl}', "");
Expect(0, 5872, '\p{^Is_Category=nl}', "");
Expect(0, 5872, '\P{Is_Category=nl}', "");
Expect(1, 5872, '\P{^Is_Category=nl}', "");
Expect(0, 5869, '\p{Is_Category=nl}', "");
Expect(1, 5869, '\p{^Is_Category=nl}', "");
Expect(1, 5869, '\P{Is_Category=nl}', "");
Expect(0, 5869, '\P{^Is_Category=nl}', "");
Expect(1, 5872, '\p{Is_Category=_Nl}', "");
Expect(0, 5872, '\p{^Is_Category=_Nl}', "");
Expect(0, 5872, '\P{Is_Category=_Nl}', "");
Expect(1, 5872, '\P{^Is_Category=_Nl}', "");
Expect(0, 5869, '\p{Is_Category=_Nl}', "");
Expect(1, 5869, '\p{^Is_Category=_Nl}', "");
Expect(1, 5869, '\P{Is_Category=_Nl}', "");
Expect(0, 5869, '\P{^Is_Category=_Nl}', "");
Error('\p{General_Category=	 initial:=Punctuation}');
Error('\P{General_Category=	 initial:=Punctuation}');
Expect(1, 171, '\p{General_Category=initialpunctuation}', "");
Expect(0, 171, '\p{^General_Category=initialpunctuation}', "");
Expect(0, 171, '\P{General_Category=initialpunctuation}', "");
Expect(1, 171, '\P{^General_Category=initialpunctuation}', "");
Expect(0, 170, '\p{General_Category=initialpunctuation}', "");
Expect(1, 170, '\p{^General_Category=initialpunctuation}', "");
Expect(1, 170, '\P{General_Category=initialpunctuation}', "");
Expect(0, 170, '\P{^General_Category=initialpunctuation}', "");
Expect(1, 171, '\p{General_Category=-initial PUNCTUATION}', "");
Expect(0, 171, '\p{^General_Category=-initial PUNCTUATION}', "");
Expect(0, 171, '\P{General_Category=-initial PUNCTUATION}', "");
Expect(1, 171, '\P{^General_Category=-initial PUNCTUATION}', "");
Expect(0, 170, '\p{General_Category=-initial PUNCTUATION}', "");
Expect(1, 170, '\p{^General_Category=-initial PUNCTUATION}', "");
Expect(1, 170, '\P{General_Category=-initial PUNCTUATION}', "");
Expect(0, 170, '\P{^General_Category=-initial PUNCTUATION}', "");
Error('\p{Gc=:=	pi}');
Error('\P{Gc=:=	pi}');
Expect(1, 171, '\p{Gc=pi}', "");
Expect(0, 171, '\p{^Gc=pi}', "");
Expect(0, 171, '\P{Gc=pi}', "");
Expect(1, 171, '\P{^Gc=pi}', "");
Expect(0, 170, '\p{Gc=pi}', "");
Expect(1, 170, '\p{^Gc=pi}', "");
Expect(1, 170, '\P{Gc=pi}', "");
Expect(0, 170, '\P{^Gc=pi}', "");
Expect(1, 171, '\p{Gc=	-Pi}', "");
Expect(0, 171, '\p{^Gc=	-Pi}', "");
Expect(0, 171, '\P{Gc=	-Pi}', "");
Expect(1, 171, '\P{^Gc=	-Pi}', "");
Expect(0, 170, '\p{Gc=	-Pi}', "");
Expect(1, 170, '\p{^Gc=	-Pi}', "");
Expect(1, 170, '\P{Gc=	-Pi}', "");
Expect(0, 170, '\P{^Gc=	-Pi}', "");
Error('\p{Category=:=	Initialpunctuation}');
Error('\P{Category=:=	Initialpunctuation}');
Expect(1, 171, '\p{Category=initialpunctuation}', "");
Expect(0, 171, '\p{^Category=initialpunctuation}', "");
Expect(0, 171, '\P{Category=initialpunctuation}', "");
Expect(1, 171, '\P{^Category=initialpunctuation}', "");
Expect(0, 170, '\p{Category=initialpunctuation}', "");
Expect(1, 170, '\p{^Category=initialpunctuation}', "");
Expect(1, 170, '\P{Category=initialpunctuation}', "");
Expect(0, 170, '\P{^Category=initialpunctuation}', "");
Expect(1, 171, '\p{Category=-INITIAL_Punctuation}', "");
Expect(0, 171, '\p{^Category=-INITIAL_Punctuation}', "");
Expect(0, 171, '\P{Category=-INITIAL_Punctuation}', "");
Expect(1, 171, '\P{^Category=-INITIAL_Punctuation}', "");
Expect(0, 170, '\p{Category=-INITIAL_Punctuation}', "");
Expect(1, 170, '\p{^Category=-INITIAL_Punctuation}', "");
Expect(1, 170, '\P{Category=-INITIAL_Punctuation}', "");
Expect(0, 170, '\P{^Category=-INITIAL_Punctuation}', "");
Error('\p{Is_General_Category=		Pi/a/}');
Error('\P{Is_General_Category=		Pi/a/}');
Expect(1, 171, '\p{Is_General_Category: pi}', "");
Expect(0, 171, '\p{^Is_General_Category: pi}', "");
Expect(0, 171, '\P{Is_General_Category: pi}', "");
Expect(1, 171, '\P{^Is_General_Category: pi}', "");
Expect(0, 170, '\p{Is_General_Category: pi}', "");
Expect(1, 170, '\p{^Is_General_Category: pi}', "");
Expect(1, 170, '\P{Is_General_Category: pi}', "");
Expect(0, 170, '\P{^Is_General_Category: pi}', "");
Expect(1, 171, '\p{Is_General_Category=_Pi}', "");
Expect(0, 171, '\p{^Is_General_Category=_Pi}', "");
Expect(0, 171, '\P{Is_General_Category=_Pi}', "");
Expect(1, 171, '\P{^Is_General_Category=_Pi}', "");
Expect(0, 170, '\p{Is_General_Category=_Pi}', "");
Expect(1, 170, '\p{^Is_General_Category=_Pi}', "");
Expect(1, 170, '\P{Is_General_Category=_Pi}', "");
Expect(0, 170, '\P{^Is_General_Category=_Pi}', "");
Error('\p{Is_Gc: -	Initial/a/punctuation}');
Error('\P{Is_Gc: -	Initial/a/punctuation}');
Expect(1, 171, '\p{Is_Gc:initialpunctuation}', "");
Expect(0, 171, '\p{^Is_Gc:initialpunctuation}', "");
Expect(0, 171, '\P{Is_Gc:initialpunctuation}', "");
Expect(1, 171, '\P{^Is_Gc:initialpunctuation}', "");
Expect(0, 170, '\p{Is_Gc:initialpunctuation}', "");
Expect(1, 170, '\p{^Is_Gc:initialpunctuation}', "");
Expect(1, 170, '\P{Is_Gc:initialpunctuation}', "");
Expect(0, 170, '\P{^Is_Gc:initialpunctuation}', "");
Expect(1, 171, '\p{Is_Gc=_	INITIAL_punctuation}', "");
Expect(0, 171, '\p{^Is_Gc=_	INITIAL_punctuation}', "");
Expect(0, 171, '\P{Is_Gc=_	INITIAL_punctuation}', "");
Expect(1, 171, '\P{^Is_Gc=_	INITIAL_punctuation}', "");
Expect(0, 170, '\p{Is_Gc=_	INITIAL_punctuation}', "");
Expect(1, 170, '\p{^Is_Gc=_	INITIAL_punctuation}', "");
Expect(1, 170, '\P{Is_Gc=_	INITIAL_punctuation}', "");
Expect(0, 170, '\P{^Is_Gc=_	INITIAL_punctuation}', "");
Error('\p{Is_Category= PI:=}');
Error('\P{Is_Category= PI:=}');
Expect(1, 171, '\p{Is_Category=pi}', "");
Expect(0, 171, '\p{^Is_Category=pi}', "");
Expect(0, 171, '\P{Is_Category=pi}', "");
Expect(1, 171, '\P{^Is_Category=pi}', "");
Expect(0, 170, '\p{Is_Category=pi}', "");
Expect(1, 170, '\p{^Is_Category=pi}', "");
Expect(1, 170, '\P{Is_Category=pi}', "");
Expect(0, 170, '\P{^Is_Category=pi}', "");
Expect(1, 171, '\p{Is_Category=-	PI}', "");
Expect(0, 171, '\p{^Is_Category=-	PI}', "");
Expect(0, 171, '\P{Is_Category=-	PI}', "");
Expect(1, 171, '\P{^Is_Category=-	PI}', "");
Expect(0, 170, '\p{Is_Category=-	PI}', "");
Expect(1, 170, '\p{^Is_Category=-	PI}', "");
Expect(1, 170, '\P{Is_Category=-	PI}', "");
Expect(0, 170, '\P{^Is_Category=-	PI}', "");
Error('\p{General_Category=:=	Currency SYMBOL}');
Error('\P{General_Category=:=	Currency SYMBOL}');
Expect(1, 36, '\p{General_Category=currencysymbol}', "");
Expect(0, 36, '\p{^General_Category=currencysymbol}', "");
Expect(0, 36, '\P{General_Category=currencysymbol}', "");
Expect(1, 36, '\P{^General_Category=currencysymbol}', "");
Expect(0, 35, '\p{General_Category=currencysymbol}', "");
Expect(1, 35, '\p{^General_Category=currencysymbol}', "");
Expect(1, 35, '\P{General_Category=currencysymbol}', "");
Expect(0, 35, '\P{^General_Category=currencysymbol}', "");
Expect(1, 36, '\p{General_Category=-currencySymbol}', "");
Expect(0, 36, '\p{^General_Category=-currencySymbol}', "");
Expect(0, 36, '\P{General_Category=-currencySymbol}', "");
Expect(1, 36, '\P{^General_Category=-currencySymbol}', "");
Expect(0, 35, '\p{General_Category=-currencySymbol}', "");
Expect(1, 35, '\p{^General_Category=-currencySymbol}', "");
Expect(1, 35, '\P{General_Category=-currencySymbol}', "");
Expect(0, 35, '\P{^General_Category=-currencySymbol}', "");
Error('\p{Gc=/a/ 	sc}');
Error('\P{Gc=/a/ 	sc}');
Expect(1, 36, '\p{Gc:	sc}', "");
Expect(0, 36, '\p{^Gc:	sc}', "");
Expect(0, 36, '\P{Gc:	sc}', "");
Expect(1, 36, '\P{^Gc:	sc}', "");
Expect(0, 35, '\p{Gc:	sc}', "");
Expect(1, 35, '\p{^Gc:	sc}', "");
Expect(1, 35, '\P{Gc:	sc}', "");
Expect(0, 35, '\P{^Gc:	sc}', "");
Expect(1, 36, '\p{Gc= Sc}', "");
Expect(0, 36, '\p{^Gc= Sc}', "");
Expect(0, 36, '\P{Gc= Sc}', "");
Expect(1, 36, '\P{^Gc= Sc}', "");
Expect(0, 35, '\p{Gc= Sc}', "");
Expect(1, 35, '\p{^Gc= Sc}', "");
Expect(1, 35, '\P{Gc= Sc}', "");
Expect(0, 35, '\P{^Gc= Sc}', "");
Error('\p{Category=-:=CURRENCY	Symbol}');
Error('\P{Category=-:=CURRENCY	Symbol}');
Expect(1, 36, '\p{Category=currencysymbol}', "");
Expect(0, 36, '\p{^Category=currencysymbol}', "");
Expect(0, 36, '\P{Category=currencysymbol}', "");
Expect(1, 36, '\P{^Category=currencysymbol}', "");
Expect(0, 35, '\p{Category=currencysymbol}', "");
Expect(1, 35, '\p{^Category=currencysymbol}', "");
Expect(1, 35, '\P{Category=currencysymbol}', "");
Expect(0, 35, '\P{^Category=currencysymbol}', "");
Expect(1, 36, '\p{Category= _Currency_Symbol}', "");
Expect(0, 36, '\p{^Category= _Currency_Symbol}', "");
Expect(0, 36, '\P{Category= _Currency_Symbol}', "");
Expect(1, 36, '\P{^Category= _Currency_Symbol}', "");
Expect(0, 35, '\p{Category= _Currency_Symbol}', "");
Expect(1, 35, '\p{^Category= _Currency_Symbol}', "");
Expect(1, 35, '\P{Category= _Currency_Symbol}', "");
Expect(0, 35, '\P{^Category= _Currency_Symbol}', "");
Error('\p{Is_General_Category=:=--Sc}');
Error('\P{Is_General_Category=:=--Sc}');
Expect(1, 36, '\p{Is_General_Category=sc}', "");
Expect(0, 36, '\p{^Is_General_Category=sc}', "");
Expect(0, 36, '\P{Is_General_Category=sc}', "");
Expect(1, 36, '\P{^Is_General_Category=sc}', "");
Expect(0, 35, '\p{Is_General_Category=sc}', "");
Expect(1, 35, '\p{^Is_General_Category=sc}', "");
Expect(1, 35, '\P{Is_General_Category=sc}', "");
Expect(0, 35, '\P{^Is_General_Category=sc}', "");
Expect(1, 36, '\p{Is_General_Category:   sc}', "");
Expect(0, 36, '\p{^Is_General_Category:   sc}', "");
Expect(0, 36, '\P{Is_General_Category:   sc}', "");
Expect(1, 36, '\P{^Is_General_Category:   sc}', "");
Expect(0, 35, '\p{Is_General_Category:   sc}', "");
Expect(1, 35, '\p{^Is_General_Category:   sc}', "");
Expect(1, 35, '\P{Is_General_Category:   sc}', "");
Expect(0, 35, '\P{^Is_General_Category:   sc}', "");
Error('\p{Is_Gc= _Currency_symbol:=}');
Error('\P{Is_Gc= _Currency_symbol:=}');
Expect(1, 36, '\p{Is_Gc:   currencysymbol}', "");
Expect(0, 36, '\p{^Is_Gc:   currencysymbol}', "");
Expect(0, 36, '\P{Is_Gc:   currencysymbol}', "");
Expect(1, 36, '\P{^Is_Gc:   currencysymbol}', "");
Expect(0, 35, '\p{Is_Gc:   currencysymbol}', "");
Expect(1, 35, '\p{^Is_Gc:   currencysymbol}', "");
Expect(1, 35, '\P{Is_Gc:   currencysymbol}', "");
Expect(0, 35, '\P{^Is_Gc:   currencysymbol}', "");
Expect(1, 36, '\p{Is_Gc:	_-Currency-Symbol}', "");
Expect(0, 36, '\p{^Is_Gc:	_-Currency-Symbol}', "");
Expect(0, 36, '\P{Is_Gc:	_-Currency-Symbol}', "");
Expect(1, 36, '\P{^Is_Gc:	_-Currency-Symbol}', "");
Expect(0, 35, '\p{Is_Gc:	_-Currency-Symbol}', "");
Expect(1, 35, '\p{^Is_Gc:	_-Currency-Symbol}', "");
Expect(1, 35, '\P{Is_Gc:	_-Currency-Symbol}', "");
Expect(0, 35, '\P{^Is_Gc:	_-Currency-Symbol}', "");
Error('\p{Is_Category=/a/Sc}');
Error('\P{Is_Category=/a/Sc}');
Expect(1, 36, '\p{Is_Category:sc}', "");
Expect(0, 36, '\p{^Is_Category:sc}', "");
Expect(0, 36, '\P{Is_Category:sc}', "");
Expect(1, 36, '\P{^Is_Category:sc}', "");
Expect(0, 35, '\p{Is_Category:sc}', "");
Expect(1, 35, '\p{^Is_Category:sc}', "");
Expect(1, 35, '\P{Is_Category:sc}', "");
Expect(0, 35, '\P{^Is_Category:sc}', "");
Expect(1, 36, '\p{Is_Category=SC}', "");
Expect(0, 36, '\p{^Is_Category=SC}', "");
Expect(0, 36, '\P{Is_Category=SC}', "");
Expect(1, 36, '\P{^Is_Category=SC}', "");
Expect(0, 35, '\p{Is_Category=SC}', "");
Expect(1, 35, '\p{^Is_Category=SC}', "");
Expect(1, 35, '\P{Is_Category=SC}', "");
Expect(0, 35, '\P{^Is_Category=SC}', "");
Error('\p{General_Category=:=_format}');
Error('\P{General_Category=:=_format}');
Expect(1, 173, '\p{General_Category=format}', "");
Expect(0, 173, '\p{^General_Category=format}', "");
Expect(0, 173, '\P{General_Category=format}', "");
Expect(1, 173, '\P{^General_Category=format}', "");
Expect(0, 172, '\p{General_Category=format}', "");
Expect(1, 172, '\p{^General_Category=format}', "");
Expect(1, 172, '\P{General_Category=format}', "");
Expect(0, 172, '\P{^General_Category=format}', "");
Expect(1, 173, '\p{General_Category=FORMAT}', "");
Expect(0, 173, '\p{^General_Category=FORMAT}', "");
Expect(0, 173, '\P{General_Category=FORMAT}', "");
Expect(1, 173, '\P{^General_Category=FORMAT}', "");
Expect(0, 172, '\p{General_Category=FORMAT}', "");
Expect(1, 172, '\p{^General_Category=FORMAT}', "");
Expect(1, 172, '\P{General_Category=FORMAT}', "");
Expect(0, 172, '\P{^General_Category=FORMAT}', "");
Error('\p{Gc=-cf:=}');
Error('\P{Gc=-cf:=}');
Expect(1, 173, '\p{Gc=cf}', "");
Expect(0, 173, '\p{^Gc=cf}', "");
Expect(0, 173, '\P{Gc=cf}', "");
Expect(1, 173, '\P{^Gc=cf}', "");
Expect(0, 172, '\p{Gc=cf}', "");
Expect(1, 172, '\p{^Gc=cf}', "");
Expect(1, 172, '\P{Gc=cf}', "");
Expect(0, 172, '\P{^Gc=cf}', "");
Expect(1, 173, '\p{Gc=	-Cf}', "");
Expect(0, 173, '\p{^Gc=	-Cf}', "");
Expect(0, 173, '\P{Gc=	-Cf}', "");
Expect(1, 173, '\P{^Gc=	-Cf}', "");
Expect(0, 172, '\p{Gc=	-Cf}', "");
Expect(1, 172, '\p{^Gc=	-Cf}', "");
Expect(1, 172, '\P{Gc=	-Cf}', "");
Expect(0, 172, '\P{^Gc=	-Cf}', "");
Error('\p{Category=	:=FORMAT}');
Error('\P{Category=	:=FORMAT}');
Expect(1, 173, '\p{Category=format}', "");
Expect(0, 173, '\p{^Category=format}', "");
Expect(0, 173, '\P{Category=format}', "");
Expect(1, 173, '\P{^Category=format}', "");
Expect(0, 172, '\p{Category=format}', "");
Expect(1, 172, '\p{^Category=format}', "");
Expect(1, 172, '\P{Category=format}', "");
Expect(0, 172, '\P{^Category=format}', "");
Expect(1, 173, '\p{Category=_Format}', "");
Expect(0, 173, '\p{^Category=_Format}', "");
Expect(0, 173, '\P{Category=_Format}', "");
Expect(1, 173, '\P{^Category=_Format}', "");
Expect(0, 172, '\p{Category=_Format}', "");
Expect(1, 172, '\p{^Category=_Format}', "");
Expect(1, 172, '\P{Category=_Format}', "");
Expect(0, 172, '\P{^Category=_Format}', "");
Error('\p{Is_General_Category=:=Cf}');
Error('\P{Is_General_Category=:=Cf}');
Expect(1, 173, '\p{Is_General_Category=cf}', "");
Expect(0, 173, '\p{^Is_General_Category=cf}', "");
Expect(0, 173, '\P{Is_General_Category=cf}', "");
Expect(1, 173, '\P{^Is_General_Category=cf}', "");
Expect(0, 172, '\p{Is_General_Category=cf}', "");
Expect(1, 172, '\p{^Is_General_Category=cf}', "");
Expect(1, 172, '\P{Is_General_Category=cf}', "");
Expect(0, 172, '\P{^Is_General_Category=cf}', "");
Expect(1, 173, '\p{Is_General_Category= cf}', "");
Expect(0, 173, '\p{^Is_General_Category= cf}', "");
Expect(0, 173, '\P{Is_General_Category= cf}', "");
Expect(1, 173, '\P{^Is_General_Category= cf}', "");
Expect(0, 172, '\p{Is_General_Category= cf}', "");
Expect(1, 172, '\p{^Is_General_Category= cf}', "");
Expect(1, 172, '\P{Is_General_Category= cf}', "");
Expect(0, 172, '\P{^Is_General_Category= cf}', "");
Error('\p{Is_Gc= /a/format}');
Error('\P{Is_Gc= /a/format}');
Expect(1, 173, '\p{Is_Gc=format}', "");
Expect(0, 173, '\p{^Is_Gc=format}', "");
Expect(0, 173, '\P{Is_Gc=format}', "");
Expect(1, 173, '\P{^Is_Gc=format}', "");
Expect(0, 172, '\p{Is_Gc=format}', "");
Expect(1, 172, '\p{^Is_Gc=format}', "");
Expect(1, 172, '\P{Is_Gc=format}', "");
Expect(0, 172, '\P{^Is_Gc=format}', "");
Expect(1, 173, '\p{Is_Gc:   	FORMAT}', "");
Expect(0, 173, '\p{^Is_Gc:   	FORMAT}', "");
Expect(0, 173, '\P{Is_Gc:   	FORMAT}', "");
Expect(1, 173, '\P{^Is_Gc:   	FORMAT}', "");
Expect(0, 172, '\p{Is_Gc:   	FORMAT}', "");
Expect(1, 172, '\p{^Is_Gc:   	FORMAT}', "");
Expect(1, 172, '\P{Is_Gc:   	FORMAT}', "");
Expect(0, 172, '\P{^Is_Gc:   	FORMAT}', "");
Error('\p{Is_Category=_	Cf:=}');
Error('\P{Is_Category=_	Cf:=}');
Expect(1, 173, '\p{Is_Category=cf}', "");
Expect(0, 173, '\p{^Is_Category=cf}', "");
Expect(0, 173, '\P{Is_Category=cf}', "");
Expect(1, 173, '\P{^Is_Category=cf}', "");
Expect(0, 172, '\p{Is_Category=cf}', "");
Expect(1, 172, '\p{^Is_Category=cf}', "");
Expect(1, 172, '\P{Is_Category=cf}', "");
Expect(0, 172, '\P{^Is_Category=cf}', "");
Expect(1, 173, '\p{Is_Category=	-cf}', "");
Expect(0, 173, '\p{^Is_Category=	-cf}', "");
Expect(0, 173, '\P{Is_Category=	-cf}', "");
Expect(1, 173, '\P{^Is_Category=	-cf}', "");
Expect(0, 172, '\p{Is_Category=	-cf}', "");
Expect(1, 172, '\p{^Is_Category=	-cf}', "");
Expect(1, 172, '\P{Is_Category=	-cf}', "");
Expect(0, 172, '\P{^Is_Category=	-cf}', "");
Error('\p{Default_Ignorable_Code_Point=/a/_	Yes}');
Error('\P{Default_Ignorable_Code_Point=/a/_	Yes}');
Expect(1, 173, '\p{Default_Ignorable_Code_Point=yes}', "");
Expect(0, 173, '\p{^Default_Ignorable_Code_Point=yes}', "");
Expect(0, 173, '\P{Default_Ignorable_Code_Point=yes}', "");
Expect(1, 173, '\P{^Default_Ignorable_Code_Point=yes}', "");
Expect(0, 172, '\p{Default_Ignorable_Code_Point=yes}', "");
Expect(1, 172, '\p{^Default_Ignorable_Code_Point=yes}', "");
Expect(1, 172, '\P{Default_Ignorable_Code_Point=yes}', "");
Expect(0, 172, '\P{^Default_Ignorable_Code_Point=yes}', "");
Expect(1, 173, '\p{Default_Ignorable_Code_Point=_Yes}', "");
Expect(0, 173, '\p{^Default_Ignorable_Code_Point=_Yes}', "");
Expect(0, 173, '\P{Default_Ignorable_Code_Point=_Yes}', "");
Expect(1, 173, '\P{^Default_Ignorable_Code_Point=_Yes}', "");
Expect(0, 172, '\p{Default_Ignorable_Code_Point=_Yes}', "");
Expect(1, 172, '\p{^Default_Ignorable_Code_Point=_Yes}', "");
Expect(1, 172, '\P{Default_Ignorable_Code_Point=_Yes}', "");
Expect(0, 172, '\P{^Default_Ignorable_Code_Point=_Yes}', "");
Error('\p{DI:   :=Y}');
Error('\P{DI:   :=Y}');
Expect(1, 173, '\p{DI=y}', "");
Expect(0, 173, '\p{^DI=y}', "");
Expect(0, 173, '\P{DI=y}', "");
Expect(1, 173, '\P{^DI=y}', "");
Expect(0, 172, '\p{DI=y}', "");
Expect(1, 172, '\p{^DI=y}', "");
Expect(1, 172, '\P{DI=y}', "");
Expect(0, 172, '\P{^DI=y}', "");
Expect(1, 173, '\p{DI=-_Y}', "");
Expect(0, 173, '\p{^DI=-_Y}', "");
Expect(0, 173, '\P{DI=-_Y}', "");
Expect(1, 173, '\P{^DI=-_Y}', "");
Expect(0, 172, '\p{DI=-_Y}', "");
Expect(1, 172, '\p{^DI=-_Y}', "");
Expect(1, 172, '\P{DI=-_Y}', "");
Expect(0, 172, '\P{^DI=-_Y}', "");
Error('\p{Is_Default_Ignorable_Code_Point=:=_T}');
Error('\P{Is_Default_Ignorable_Code_Point=:=_T}');
Expect(1, 173, '\p{Is_Default_Ignorable_Code_Point:t}', "");
Expect(0, 173, '\p{^Is_Default_Ignorable_Code_Point:t}', "");
Expect(0, 173, '\P{Is_Default_Ignorable_Code_Point:t}', "");
Expect(1, 173, '\P{^Is_Default_Ignorable_Code_Point:t}', "");
Expect(0, 172, '\p{Is_Default_Ignorable_Code_Point:t}', "");
Expect(1, 172, '\p{^Is_Default_Ignorable_Code_Point:t}', "");
Expect(1, 172, '\P{Is_Default_Ignorable_Code_Point:t}', "");
Expect(0, 172, '\P{^Is_Default_Ignorable_Code_Point:t}', "");
Expect(1, 173, '\p{Is_Default_Ignorable_Code_Point=__T}', "");
Expect(0, 173, '\p{^Is_Default_Ignorable_Code_Point=__T}', "");
Expect(0, 173, '\P{Is_Default_Ignorable_Code_Point=__T}', "");
Expect(1, 173, '\P{^Is_Default_Ignorable_Code_Point=__T}', "");
Expect(0, 172, '\p{Is_Default_Ignorable_Code_Point=__T}', "");
Expect(1, 172, '\p{^Is_Default_Ignorable_Code_Point=__T}', "");
Expect(1, 172, '\P{Is_Default_Ignorable_Code_Point=__T}', "");
Expect(0, 172, '\P{^Is_Default_Ignorable_Code_Point=__T}', "");
Error('\p{Is_DI=:=_ True}');
Error('\P{Is_DI=:=_ True}');
Expect(1, 173, '\p{Is_DI=true}', "");
Expect(0, 173, '\p{^Is_DI=true}', "");
Expect(0, 173, '\P{Is_DI=true}', "");
Expect(1, 173, '\P{^Is_DI=true}', "");
Expect(0, 172, '\p{Is_DI=true}', "");
Expect(1, 172, '\p{^Is_DI=true}', "");
Expect(1, 172, '\P{Is_DI=true}', "");
Expect(0, 172, '\P{^Is_DI=true}', "");
Expect(1, 173, '\p{Is_DI=-_TRUE}', "");
Expect(0, 173, '\p{^Is_DI=-_TRUE}', "");
Expect(0, 173, '\P{Is_DI=-_TRUE}', "");
Expect(1, 173, '\P{^Is_DI=-_TRUE}', "");
Expect(0, 172, '\p{Is_DI=-_TRUE}', "");
Expect(1, 172, '\p{^Is_DI=-_TRUE}', "");
Expect(1, 172, '\P{Is_DI=-_TRUE}', "");
Expect(0, 172, '\P{^Is_DI=-_TRUE}', "");
Error('\p{Default_Ignorable_Code_Point=:=-	No}');
Error('\P{Default_Ignorable_Code_Point=:=-	No}');
Expect(1, 172, '\p{Default_Ignorable_Code_Point=no}', "");
Expect(0, 172, '\p{^Default_Ignorable_Code_Point=no}', "");
Expect(0, 172, '\P{Default_Ignorable_Code_Point=no}', "");
Expect(1, 172, '\P{^Default_Ignorable_Code_Point=no}', "");
Expect(0, 173, '\p{Default_Ignorable_Code_Point=no}', "");
Expect(1, 173, '\p{^Default_Ignorable_Code_Point=no}', "");
Expect(1, 173, '\P{Default_Ignorable_Code_Point=no}', "");
Expect(0, 173, '\P{^Default_Ignorable_Code_Point=no}', "");
Expect(1, 172, '\p{Default_Ignorable_Code_Point=--No}', "");
Expect(0, 172, '\p{^Default_Ignorable_Code_Point=--No}', "");
Expect(0, 172, '\P{Default_Ignorable_Code_Point=--No}', "");
Expect(1, 172, '\P{^Default_Ignorable_Code_Point=--No}', "");
Expect(0, 173, '\p{Default_Ignorable_Code_Point=--No}', "");
Expect(1, 173, '\p{^Default_Ignorable_Code_Point=--No}', "");
Expect(1, 173, '\P{Default_Ignorable_Code_Point=--No}', "");
Expect(0, 173, '\P{^Default_Ignorable_Code_Point=--No}', "");
Error('\p{DI=:=__n}');
Error('\P{DI=:=__n}');
Expect(1, 172, '\p{DI=n}', "");
Expect(0, 172, '\p{^DI=n}', "");
Expect(0, 172, '\P{DI=n}', "");
Expect(1, 172, '\P{^DI=n}', "");
Expect(0, 173, '\p{DI=n}', "");
Expect(1, 173, '\p{^DI=n}', "");
Expect(1, 173, '\P{DI=n}', "");
Expect(0, 173, '\P{^DI=n}', "");
Expect(1, 172, '\p{DI=_-N}', "");
Expect(0, 172, '\p{^DI=_-N}', "");
Expect(0, 172, '\P{DI=_-N}', "");
Expect(1, 172, '\P{^DI=_-N}', "");
Expect(0, 173, '\p{DI=_-N}', "");
Expect(1, 173, '\p{^DI=_-N}', "");
Expect(1, 173, '\P{DI=_-N}', "");
Expect(0, 173, '\P{^DI=_-N}', "");
Error('\p{Is_Default_Ignorable_Code_Point=	_F/a/}');
Error('\P{Is_Default_Ignorable_Code_Point=	_F/a/}');
Expect(1, 172, '\p{Is_Default_Ignorable_Code_Point=f}', "");
Expect(0, 172, '\p{^Is_Default_Ignorable_Code_Point=f}', "");
Expect(0, 172, '\P{Is_Default_Ignorable_Code_Point=f}', "");
Expect(1, 172, '\P{^Is_Default_Ignorable_Code_Point=f}', "");
Expect(0, 173, '\p{Is_Default_Ignorable_Code_Point=f}', "");
Expect(1, 173, '\p{^Is_Default_Ignorable_Code_Point=f}', "");
Expect(1, 173, '\P{Is_Default_Ignorable_Code_Point=f}', "");
Expect(0, 173, '\P{^Is_Default_Ignorable_Code_Point=f}', "");
Expect(1, 172, '\p{Is_Default_Ignorable_Code_Point= F}', "");
Expect(0, 172, '\p{^Is_Default_Ignorable_Code_Point= F}', "");
Expect(0, 172, '\P{Is_Default_Ignorable_Code_Point= F}', "");
Expect(1, 172, '\P{^Is_Default_Ignorable_Code_Point= F}', "");
Expect(0, 173, '\p{Is_Default_Ignorable_Code_Point= F}', "");
Expect(1, 173, '\p{^Is_Default_Ignorable_Code_Point= F}', "");
Expect(1, 173, '\P{Is_Default_Ignorable_Code_Point= F}', "");
Expect(0, 173, '\P{^Is_Default_Ignorable_Code_Point= F}', "");
Error('\p{Is_DI=	 false:=}');
Error('\P{Is_DI=	 false:=}');
Expect(1, 172, '\p{Is_DI=false}', "");
Expect(0, 172, '\p{^Is_DI=false}', "");
Expect(0, 172, '\P{Is_DI=false}', "");
Expect(1, 172, '\P{^Is_DI=false}', "");
Expect(0, 173, '\p{Is_DI=false}', "");
Expect(1, 173, '\p{^Is_DI=false}', "");
Expect(1, 173, '\P{Is_DI=false}', "");
Expect(0, 173, '\P{^Is_DI=false}', "");
Expect(1, 172, '\p{Is_DI:	 False}', "");
Expect(0, 172, '\p{^Is_DI:	 False}', "");
Expect(0, 172, '\P{Is_DI:	 False}', "");
Expect(1, 172, '\P{^Is_DI:	 False}', "");
Expect(0, 173, '\p{Is_DI:	 False}', "");
Expect(1, 173, '\p{^Is_DI:	 False}', "");
Expect(1, 173, '\P{Is_DI:	 False}', "");
Expect(0, 173, '\P{^Is_DI:	 False}', "");
Error('\p{Terminal_Punctuation= 	Yes/a/}');
Error('\P{Terminal_Punctuation= 	Yes/a/}');
Expect(1, 33, '\p{Terminal_Punctuation: yes}', "");
Expect(0, 33, '\p{^Terminal_Punctuation: yes}', "");
Expect(0, 33, '\P{Terminal_Punctuation: yes}', "");
Expect(1, 33, '\P{^Terminal_Punctuation: yes}', "");
Expect(0, 32, '\p{Terminal_Punctuation: yes}', "");
Expect(1, 32, '\p{^Terminal_Punctuation: yes}', "");
Expect(1, 32, '\P{Terminal_Punctuation: yes}', "");
Expect(0, 32, '\P{^Terminal_Punctuation: yes}', "");
Expect(1, 33, '\p{Terminal_Punctuation=		yes}', "");
Expect(0, 33, '\p{^Terminal_Punctuation=		yes}', "");
Expect(0, 33, '\P{Terminal_Punctuation=		yes}', "");
Expect(1, 33, '\P{^Terminal_Punctuation=		yes}', "");
Expect(0, 32, '\p{Terminal_Punctuation=		yes}', "");
Expect(1, 32, '\p{^Terminal_Punctuation=		yes}', "");
Expect(1, 32, '\P{Terminal_Punctuation=		yes}', "");
Expect(0, 32, '\P{^Terminal_Punctuation=		yes}', "");
Error('\p{Term=_Y/a/}');
Error('\P{Term=_Y/a/}');
Expect(1, 33, '\p{Term=y}', "");
Expect(0, 33, '\p{^Term=y}', "");
Expect(0, 33, '\P{Term=y}', "");
Expect(1, 33, '\P{^Term=y}', "");
Expect(0, 32, '\p{Term=y}', "");
Expect(1, 32, '\p{^Term=y}', "");
Expect(1, 32, '\P{Term=y}', "");
Expect(0, 32, '\P{^Term=y}', "");
Expect(1, 33, '\p{Term=-	Y}', "");
Expect(0, 33, '\p{^Term=-	Y}', "");
Expect(0, 33, '\P{Term=-	Y}', "");
Expect(1, 33, '\P{^Term=-	Y}', "");
Expect(0, 32, '\p{Term=-	Y}', "");
Expect(1, 32, '\p{^Term=-	Y}', "");
Expect(1, 32, '\P{Term=-	Y}', "");
Expect(0, 32, '\P{^Term=-	Y}', "");
Error('\p{Is_Terminal_Punctuation= /a/T}');
Error('\P{Is_Terminal_Punctuation= /a/T}');
Expect(1, 33, '\p{Is_Terminal_Punctuation=t}', "");
Expect(0, 33, '\p{^Is_Terminal_Punctuation=t}', "");
Expect(0, 33, '\P{Is_Terminal_Punctuation=t}', "");
Expect(1, 33, '\P{^Is_Terminal_Punctuation=t}', "");
Expect(0, 32, '\p{Is_Terminal_Punctuation=t}', "");
Expect(1, 32, '\p{^Is_Terminal_Punctuation=t}', "");
Expect(1, 32, '\P{Is_Terminal_Punctuation=t}', "");
Expect(0, 32, '\P{^Is_Terminal_Punctuation=t}', "");
Expect(1, 33, '\p{Is_Terminal_Punctuation=__t}', "");
Expect(0, 33, '\p{^Is_Terminal_Punctuation=__t}', "");
Expect(0, 33, '\P{Is_Terminal_Punctuation=__t}', "");
Expect(1, 33, '\P{^Is_Terminal_Punctuation=__t}', "");
Expect(0, 32, '\p{Is_Terminal_Punctuation=__t}', "");
Expect(1, 32, '\p{^Is_Terminal_Punctuation=__t}', "");
Expect(1, 32, '\P{Is_Terminal_Punctuation=__t}', "");
Expect(0, 32, '\P{^Is_Terminal_Punctuation=__t}', "");
Error('\p{Is_Term:_True/a/}');
Error('\P{Is_Term:_True/a/}');
Expect(1, 33, '\p{Is_Term=true}', "");
Expect(0, 33, '\p{^Is_Term=true}', "");
Expect(0, 33, '\P{Is_Term=true}', "");
Expect(1, 33, '\P{^Is_Term=true}', "");
Expect(0, 32, '\p{Is_Term=true}', "");
Expect(1, 32, '\p{^Is_Term=true}', "");
Expect(1, 32, '\P{Is_Term=true}', "");
Expect(0, 32, '\P{^Is_Term=true}', "");
Expect(1, 33, '\p{Is_Term=- True}', "");
Expect(0, 33, '\p{^Is_Term=- True}', "");
Expect(0, 33, '\P{Is_Term=- True}', "");
Expect(1, 33, '\P{^Is_Term=- True}', "");
Expect(0, 32, '\p{Is_Term=- True}', "");
Expect(1, 32, '\p{^Is_Term=- True}', "");
Expect(1, 32, '\P{Is_Term=- True}', "");
Expect(0, 32, '\P{^Is_Term=- True}', "");
Error('\p{Terminal_Punctuation=:=_-NO}');
Error('\P{Terminal_Punctuation=:=_-NO}');
Expect(1, 32, '\p{Terminal_Punctuation=no}', "");
Expect(0, 32, '\p{^Terminal_Punctuation=no}', "");
Expect(0, 32, '\P{Terminal_Punctuation=no}', "");
Expect(1, 32, '\P{^Terminal_Punctuation=no}', "");
Expect(0, 33, '\p{Terminal_Punctuation=no}', "");
Expect(1, 33, '\p{^Terminal_Punctuation=no}', "");
Expect(1, 33, '\P{Terminal_Punctuation=no}', "");
Expect(0, 33, '\P{^Terminal_Punctuation=no}', "");
Expect(1, 32, '\p{Terminal_Punctuation=-_No}', "");
Expect(0, 32, '\p{^Terminal_Punctuation=-_No}', "");
Expect(0, 32, '\P{Terminal_Punctuation=-_No}', "");
Expect(1, 32, '\P{^Terminal_Punctuation=-_No}', "");
Expect(0, 33, '\p{Terminal_Punctuation=-_No}', "");
Expect(1, 33, '\p{^Terminal_Punctuation=-_No}', "");
Expect(1, 33, '\P{Terminal_Punctuation=-_No}', "");
Expect(0, 33, '\P{^Terminal_Punctuation=-_No}', "");
Error('\p{Term=/a/N}');
Error('\P{Term=/a/N}');
Expect(1, 32, '\p{Term: n}', "");
Expect(0, 32, '\p{^Term: n}', "");
Expect(0, 32, '\P{Term: n}', "");
Expect(1, 32, '\P{^Term: n}', "");
Expect(0, 33, '\p{Term: n}', "");
Expect(1, 33, '\p{^Term: n}', "");
Expect(1, 33, '\P{Term: n}', "");
Expect(0, 33, '\P{^Term: n}', "");
Expect(1, 32, '\p{Term= -N}', "");
Expect(0, 32, '\p{^Term= -N}', "");
Expect(0, 32, '\P{Term= -N}', "");
Expect(1, 32, '\P{^Term= -N}', "");
Expect(0, 33, '\p{Term= -N}', "");
Expect(1, 33, '\p{^Term= -N}', "");
Expect(1, 33, '\P{Term= -N}', "");
Expect(0, 33, '\P{^Term= -N}', "");
Error('\p{Is_Terminal_Punctuation=-:=F}');
Error('\P{Is_Terminal_Punctuation=-:=F}');
Expect(1, 32, '\p{Is_Terminal_Punctuation=f}', "");
Expect(0, 32, '\p{^Is_Terminal_Punctuation=f}', "");
Expect(0, 32, '\P{Is_Terminal_Punctuation=f}', "");
Expect(1, 32, '\P{^Is_Terminal_Punctuation=f}', "");
Expect(0, 33, '\p{Is_Terminal_Punctuation=f}', "");
Expect(1, 33, '\p{^Is_Terminal_Punctuation=f}', "");
Expect(1, 33, '\P{Is_Terminal_Punctuation=f}', "");
Expect(0, 33, '\P{^Is_Terminal_Punctuation=f}', "");
Expect(1, 32, '\p{Is_Terminal_Punctuation=_F}', "");
Expect(0, 32, '\p{^Is_Terminal_Punctuation=_F}', "");
Expect(0, 32, '\P{Is_Terminal_Punctuation=_F}', "");
Expect(1, 32, '\P{^Is_Terminal_Punctuation=_F}', "");
Expect(0, 33, '\p{Is_Terminal_Punctuation=_F}', "");
Expect(1, 33, '\p{^Is_Terminal_Punctuation=_F}', "");
Expect(1, 33, '\P{Is_Terminal_Punctuation=_F}', "");
Expect(0, 33, '\P{^Is_Terminal_Punctuation=_F}', "");
Error('\p{Is_Term:   :=_False}');
Error('\P{Is_Term:   :=_False}');
Expect(1, 32, '\p{Is_Term=false}', "");
Expect(0, 32, '\p{^Is_Term=false}', "");
Expect(0, 32, '\P{Is_Term=false}', "");
Expect(1, 32, '\P{^Is_Term=false}', "");
Expect(0, 33, '\p{Is_Term=false}', "");
Expect(1, 33, '\p{^Is_Term=false}', "");
Expect(1, 33, '\P{Is_Term=false}', "");
Expect(0, 33, '\P{^Is_Term=false}', "");
Expect(1, 32, '\p{Is_Term=-False}', "");
Expect(0, 32, '\p{^Is_Term=-False}', "");
Expect(0, 32, '\P{Is_Term=-False}', "");
Expect(1, 32, '\P{^Is_Term=-False}', "");
Expect(0, 33, '\p{Is_Term=-False}', "");
Expect(1, 33, '\p{^Is_Term=-False}', "");
Expect(1, 33, '\P{Is_Term=-False}', "");
Expect(0, 33, '\P{^Is_Term=-False}', "");
Test_X('÷ 0020 ÷ 0020 ÷');
Test_X('÷ 0020 × 0308 ÷ 0020 ÷');
Test_X('÷ 0020 ÷ 000D ÷');
Test_X('÷ 0020 × 0308 ÷ 000D ÷');
Test_X('÷ 0020 ÷ 000A ÷');
Test_X('÷ 0020 × 0308 ÷ 000A ÷');
Test_X('÷ 0020 ÷ 0001 ÷');
Test_X('÷ 0020 × 0308 ÷ 0001 ÷');
Test_X('÷ 0020 × 0300 ÷');
Test_X('÷ 0020 × 0308 × 0300 ÷');
Test_X('÷ 0020 ÷ 0E40 ÷');
Test_X('÷ 0020 × 0308 ÷ 0E40 ÷');
Test_X('÷ 0020 × 0903 ÷');
Test_X('÷ 0020 × 0308 × 0903 ÷');
Test_X('÷ 0020 ÷ 1100 ÷');
Test_X('÷ 0020 × 0308 ÷ 1100 ÷');
Test_X('÷ 0020 ÷ 1160 ÷');
Test_X('÷ 0020 × 0308 ÷ 1160 ÷');
Test_X('÷ 0020 ÷ 11A8 ÷');
Test_X('÷ 0020 × 0308 ÷ 11A8 ÷');
Test_X('÷ 0020 ÷ AC00 ÷');
Test_X('÷ 0020 × 0308 ÷ AC00 ÷');
Test_X('÷ 0020 ÷ AC01 ÷');
Test_X('÷ 0020 × 0308 ÷ AC01 ÷');
Test_X('÷ 000D ÷ 0020 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 0020 ÷');
Test_X('÷ 000D ÷ 000D ÷');
Test_X('÷ 000D ÷ 0308 ÷ 000D ÷');
Test_X('÷ 000D × 000A ÷');
Test_X('÷ 000D ÷ 0308 ÷ 000A ÷');
Test_X('÷ 000D ÷ 0001 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 0001 ÷');
Test_X('÷ 000D ÷ 0300 ÷');
Test_X('÷ 000D ÷ 0308 × 0300 ÷');
Test_X('÷ 000D ÷ 0E40 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 0E40 ÷');
Test_X('÷ 000D ÷ 0903 ÷');
Test_X('÷ 000D ÷ 0308 × 0903 ÷');
Test_X('÷ 000D ÷ 1100 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 1100 ÷');
Test_X('÷ 000D ÷ 1160 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 1160 ÷');
Test_X('÷ 000D ÷ 11A8 ÷');
Test_X('÷ 000D ÷ 0308 ÷ 11A8 ÷');
Test_X('÷ 000D ÷ AC00 ÷');
Test_X('÷ 000D ÷ 0308 ÷ AC00 ÷');
Test_X('÷ 000D ÷ AC01 ÷');
Test_X('÷ 000D ÷ 0308 ÷ AC01 ÷');
Test_X('÷ 000A ÷ 0020 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 0020 ÷');
Test_X('÷ 000A ÷ 000D ÷');
Test_X('÷ 000A ÷ 0308 ÷ 000D ÷');
Test_X('÷ 000A ÷ 000A ÷');
Test_X('÷ 000A ÷ 0308 ÷ 000A ÷');
Test_X('÷ 000A ÷ 0001 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 0001 ÷');
Test_X('÷ 000A ÷ 0300 ÷');
Test_X('÷ 000A ÷ 0308 × 0300 ÷');
Test_X('÷ 000A ÷ 0E40 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 0E40 ÷');
Test_X('÷ 000A ÷ 0903 ÷');
Test_X('÷ 000A ÷ 0308 × 0903 ÷');
Test_X('÷ 000A ÷ 1100 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 1100 ÷');
Test_X('÷ 000A ÷ 1160 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 1160 ÷');
Test_X('÷ 000A ÷ 11A8 ÷');
Test_X('÷ 000A ÷ 0308 ÷ 11A8 ÷');
Test_X('÷ 000A ÷ AC00 ÷');
Test_X('÷ 000A ÷ 0308 ÷ AC00 ÷');
Test_X('÷ 000A ÷ AC01 ÷');
Test_X('÷ 000A ÷ 0308 ÷ AC01 ÷');
Test_X('÷ 0001 ÷ 0020 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 0020 ÷');
Test_X('÷ 0001 ÷ 000D ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 000D ÷');
Test_X('÷ 0001 ÷ 000A ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 000A ÷');
Test_X('÷ 0001 ÷ 0001 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 0001 ÷');
Test_X('÷ 0001 ÷ 0300 ÷');
Test_X('÷ 0001 ÷ 0308 × 0300 ÷');
Test_X('÷ 0001 ÷ 0E40 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 0E40 ÷');
Test_X('÷ 0001 ÷ 0903 ÷');
Test_X('÷ 0001 ÷ 0308 × 0903 ÷');
Test_X('÷ 0001 ÷ 1100 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 1100 ÷');
Test_X('÷ 0001 ÷ 1160 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 1160 ÷');
Test_X('÷ 0001 ÷ 11A8 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ 11A8 ÷');
Test_X('÷ 0001 ÷ AC00 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ AC00 ÷');
Test_X('÷ 0001 ÷ AC01 ÷');
Test_X('÷ 0001 ÷ 0308 ÷ AC01 ÷');
Test_X('÷ 0300 ÷ 0020 ÷');
Test_X('÷ 0300 × 0308 ÷ 0020 ÷');
Test_X('÷ 0300 ÷ 000D ÷');
Test_X('÷ 0300 × 0308 ÷ 000D ÷');
Test_X('÷ 0300 ÷ 000A ÷');
Test_X('÷ 0300 × 0308 ÷ 000A ÷');
Test_X('÷ 0300 ÷ 0001 ÷');
Test_X('÷ 0300 × 0308 ÷ 0001 ÷');
Test_X('÷ 0300 × 0300 ÷');
Test_X('÷ 0300 × 0308 × 0300 ÷');
Test_X('÷ 0300 ÷ 0E40 ÷');
Test_X('÷ 0300 × 0308 ÷ 0E40 ÷');
Test_X('÷ 0300 × 0903 ÷');
Test_X('÷ 0300 × 0308 × 0903 ÷');
Test_X('÷ 0300 ÷ 1100 ÷');
Test_X('÷ 0300 × 0308 ÷ 1100 ÷');
Test_X('÷ 0300 ÷ 1160 ÷');
Test_X('÷ 0300 × 0308 ÷ 1160 ÷');
Test_X('÷ 0300 ÷ 11A8 ÷');
Test_X('÷ 0300 × 0308 ÷ 11A8 ÷');
Test_X('÷ 0300 ÷ AC00 ÷');
Test_X('÷ 0300 × 0308 ÷ AC00 ÷');
Test_X('÷ 0300 ÷ AC01 ÷');
Test_X('÷ 0300 × 0308 ÷ AC01 ÷');
Test_X('÷ 0E40 × 0020 ÷');
Test_X('÷ 0E40 × 0308 ÷ 0020 ÷');
Test_X('÷ 0E40 ÷ 000D ÷');
Test_X('÷ 0E40 × 0308 ÷ 000D ÷');
Test_X('÷ 0E40 ÷ 000A ÷');
Test_X('÷ 0E40 × 0308 ÷ 000A ÷');
Test_X('÷ 0E40 ÷ 0001 ÷');
Test_X('÷ 0E40 × 0308 ÷ 0001 ÷');
Test_X('÷ 0E40 × 0300 ÷');
Test_X('÷ 0E40 × 0308 × 0300 ÷');
Test_X('÷ 0E40 × 0E40 ÷');
Test_X('÷ 0E40 × 0308 ÷ 0E40 ÷');
Test_X('÷ 0E40 × 0903 ÷');
Test_X('÷ 0E40 × 0308 × 0903 ÷');
Test_X('÷ 0E40 × 1100 ÷');
Test_X('÷ 0E40 × 0308 ÷ 1100 ÷');
Test_X('÷ 0E40 × 1160 ÷');
Test_X('÷ 0E40 × 0308 ÷ 1160 ÷');
Test_X('÷ 0E40 × 11A8 ÷');
Test_X('÷ 0E40 × 0308 ÷ 11A8 ÷');
Test_X('÷ 0E40 × AC00 ÷');
Test_X('÷ 0E40 × 0308 ÷ AC00 ÷');
Test_X('÷ 0E40 × AC01 ÷');
Test_X('÷ 0E40 × 0308 ÷ AC01 ÷');
Test_X('÷ 0903 ÷ 0020 ÷');
Test_X('÷ 0903 × 0308 ÷ 0020 ÷');
Test_X('÷ 0903 ÷ 000D ÷');
Test_X('÷ 0903 × 0308 ÷ 000D ÷');
Test_X('÷ 0903 ÷ 000A ÷');
Test_X('÷ 0903 × 0308 ÷ 000A ÷');
Test_X('÷ 0903 ÷ 0001 ÷');
Test_X('÷ 0903 × 0308 ÷ 0001 ÷');
Test_X('÷ 0903 × 0300 ÷');
Test_X('÷ 0903 × 0308 × 0300 ÷');
Test_X('÷ 0903 ÷ 0E40 ÷');
Test_X('÷ 0903 × 0308 ÷ 0E40 ÷');
Test_X('÷ 0903 × 0903 ÷');
Test_X('÷ 0903 × 0308 × 0903 ÷');
Test_X('÷ 0903 ÷ 1100 ÷');
Test_X('÷ 0903 × 0308 ÷ 1100 ÷');
Test_X('÷ 0903 ÷ 1160 ÷');
Test_X('÷ 0903 × 0308 ÷ 1160 ÷');
Test_X('÷ 0903 ÷ 11A8 ÷');
Test_X('÷ 0903 × 0308 ÷ 11A8 ÷');
Test_X('÷ 0903 ÷ AC00 ÷');
Test_X('÷ 0903 × 0308 ÷ AC00 ÷');
Test_X('÷ 0903 ÷ AC01 ÷');
Test_X('÷ 0903 × 0308 ÷ AC01 ÷');
Test_X('÷ 1100 ÷ 0020 ÷');
Test_X('÷ 1100 × 0308 ÷ 0020 ÷');
Test_X('÷ 1100 ÷ 000D ÷');
Test_X('÷ 1100 × 0308 ÷ 000D ÷');
Test_X('÷ 1100 ÷ 000A ÷');
Test_X('÷ 1100 × 0308 ÷ 000A ÷');
Test_X('÷ 1100 ÷ 0001 ÷');
Test_X('÷ 1100 × 0308 ÷ 0001 ÷');
Test_X('÷ 1100 × 0300 ÷');
Test_X('÷ 1100 × 0308 × 0300 ÷');
Test_X('÷ 1100 ÷ 0E40 ÷');
Test_X('÷ 1100 × 0308 ÷ 0E40 ÷');
Test_X('÷ 1100 × 0903 ÷');
Test_X('÷ 1100 × 0308 × 0903 ÷');
Test_X('÷ 1100 × 1100 ÷');
Test_X('÷ 1100 × 0308 ÷ 1100 ÷');
Test_X('÷ 1100 × 1160 ÷');
Test_X('÷ 1100 × 0308 ÷ 1160 ÷');
Test_X('÷ 1100 ÷ 11A8 ÷');
Test_X('÷ 1100 × 0308 ÷ 11A8 ÷');
Test_X('÷ 1100 × AC00 ÷');
Test_X('÷ 1100 × 0308 ÷ AC00 ÷');
Test_X('÷ 1100 × AC01 ÷');
Test_X('÷ 1100 × 0308 ÷ AC01 ÷');
Test_X('÷ 1160 ÷ 0020 ÷');
Test_X('÷ 1160 × 0308 ÷ 0020 ÷');
Test_X('÷ 1160 ÷ 000D ÷');
Test_X('÷ 1160 × 0308 ÷ 000D ÷');
Test_X('÷ 1160 ÷ 000A ÷');
Test_X('÷ 1160 × 0308 ÷ 000A ÷');
Test_X('÷ 1160 ÷ 0001 ÷');
Test_X('÷ 1160 × 0308 ÷ 0001 ÷');
Test_X('÷ 1160 × 0300 ÷');
Test_X('÷ 1160 × 0308 × 0300 ÷');
Test_X('÷ 1160 ÷ 0E40 ÷');
Test_X('÷ 1160 × 0308 ÷ 0E40 ÷');
Test_X('÷ 1160 × 0903 ÷');
Test_X('÷ 1160 × 0308 × 0903 ÷');
Test_X('÷ 1160 ÷ 1100 ÷');
Test_X('÷ 1160 × 0308 ÷ 1100 ÷');
Test_X('÷ 1160 × 1160 ÷');
Test_X('÷ 1160 × 0308 ÷ 1160 ÷');
Test_X('÷ 1160 × 11A8 ÷');
Test_X('÷ 1160 × 0308 ÷ 11A8 ÷');
Test_X('÷ 1160 ÷ AC00 ÷');
Test_X('÷ 1160 × 0308 ÷ AC00 ÷');
Test_X('÷ 1160 ÷ AC01 ÷');
Test_X('÷ 1160 × 0308 ÷ AC01 ÷');
Test_X('÷ 11A8 ÷ 0020 ÷');
Test_X('÷ 11A8 × 0308 ÷ 0020 ÷');
Test_X('÷ 11A8 ÷ 000D ÷');
Test_X('÷ 11A8 × 0308 ÷ 000D ÷');
Test_X('÷ 11A8 ÷ 000A ÷');
Test_X('÷ 11A8 × 0308 ÷ 000A ÷');
Test_X('÷ 11A8 ÷ 0001 ÷');
Test_X('÷ 11A8 × 0308 ÷ 0001 ÷');
Test_X('÷ 11A8 × 0300 ÷');
Test_X('÷ 11A8 × 0308 × 0300 ÷');
Test_X('÷ 11A8 ÷ 0E40 ÷');
Test_X('÷ 11A8 × 0308 ÷ 0E40 ÷');
Test_X('÷ 11A8 × 0903 ÷');
Test_X('÷ 11A8 × 0308 × 0903 ÷');
Test_X('÷ 11A8 ÷ 1100 ÷');
Test_X('÷ 11A8 × 0308 ÷ 1100 ÷');
Test_X('÷ 11A8 ÷ 1160 ÷');
Test_X('÷ 11A8 × 0308 ÷ 1160 ÷');
Test_X('÷ 11A8 × 11A8 ÷');
Test_X('÷ 11A8 × 0308 ÷ 11A8 ÷');
Test_X('÷ 11A8 ÷ AC00 ÷');
Test_X('÷ 11A8 × 0308 ÷ AC00 ÷');
Test_X('÷ 11A8 ÷ AC01 ÷');
Test_X('÷ 11A8 × 0308 ÷ AC01 ÷');
Test_X('÷ AC00 ÷ 0020 ÷');
Test_X('÷ AC00 × 0308 ÷ 0020 ÷');
Test_X('÷ AC00 ÷ 000D ÷');
Test_X('÷ AC00 × 0308 ÷ 000D ÷');
Test_X('÷ AC00 ÷ 000A ÷');
Test_X('÷ AC00 × 0308 ÷ 000A ÷');
Test_X('÷ AC00 ÷ 0001 ÷');
Test_X('÷ AC00 × 0308 ÷ 0001 ÷');
Test_X('÷ AC00 × 0300 ÷');
Test_X('÷ AC00 × 0308 × 0300 ÷');
Test_X('÷ AC00 ÷ 0E40 ÷');
Test_X('÷ AC00 × 0308 ÷ 0E40 ÷');
Test_X('÷ AC00 × 0903 ÷');
Test_X('÷ AC00 × 0308 × 0903 ÷');
Test_X('÷ AC00 ÷ 1100 ÷');
Test_X('÷ AC00 × 0308 ÷ 1100 ÷');
Test_X('÷ AC00 × 1160 ÷');
Test_X('÷ AC00 × 0308 ÷ 1160 ÷');
Test_X('÷ AC00 × 11A8 ÷');
Test_X('÷ AC00 × 0308 ÷ 11A8 ÷');
Test_X('÷ AC00 ÷ AC00 ÷');
Test_X('÷ AC00 × 0308 ÷ AC00 ÷');
Test_X('÷ AC00 ÷ AC01 ÷');
Test_X('÷ AC00 × 0308 ÷ AC01 ÷');
Test_X('÷ AC01 ÷ 0020 ÷');
Test_X('÷ AC01 × 0308 ÷ 0020 ÷');
Test_X('÷ AC01 ÷ 000D ÷');
Test_X('÷ AC01 × 0308 ÷ 000D ÷');
Test_X('÷ AC01 ÷ 000A ÷');
Test_X('÷ AC01 × 0308 ÷ 000A ÷');
Test_X('÷ AC01 ÷ 0001 ÷');
Test_X('÷ AC01 × 0308 ÷ 0001 ÷');
Test_X('÷ AC01 × 0300 ÷');
Test_X('÷ AC01 × 0308 × 0300 ÷');
Test_X('÷ AC01 ÷ 0E40 ÷');
Test_X('÷ AC01 × 0308 ÷ 0E40 ÷');
Test_X('÷ AC01 × 0903 ÷');
Test_X('÷ AC01 × 0308 × 0903 ÷');
Test_X('÷ AC01 ÷ 1100 ÷');
Test_X('÷ AC01 × 0308 ÷ 1100 ÷');
Test_X('÷ AC01 ÷ 1160 ÷');
Test_X('÷ AC01 × 0308 ÷ 1160 ÷');
Test_X('÷ AC01 × 11A8 ÷');
Test_X('÷ AC01 × 0308 ÷ 11A8 ÷');
Test_X('÷ AC01 ÷ AC00 ÷');
Test_X('÷ AC01 × 0308 ÷ AC00 ÷');
Test_X('÷ AC01 ÷ AC01 ÷');
Test_X('÷ AC01 × 0308 ÷ AC01 ÷');
Finished();
